commit 0052a318680af83242d7af67acd3b055bde740c5
Author: Florin Malita <fmalita@chromium.org>
Date:   Fri Jun 15 16:42:09 2018 -0400

    [skjson] Detect end-of-input for unbalanced strings
    
    We currently blow through string chars without checking for end-of-input.
    
    Maybe we could avoid this upfront, when we locate the stop char: try to
    determine if it's part of an unterminated string, fail immediately if
    so.  Figuring out if the tail is an unterminated string seems
    intractable though (requires arbitrarily deep tail parsing).
    
    That brings us to plan B:
    
      * treat scope-closing tokens (} & ]) as string terminators
        (we know end-of-input points to one of these for sure)
    
      * adjust matchString() to check for end-of-input
    
    Bug: oss-fuzz:8899
    Change-Id: Ic0a88a405548e8724b76faca525099a7e7037341
    Reviewed-on: https://skia-review.googlesource.com/135145
    Commit-Queue: Florin Malita <fmalita@chromium.org>
    Reviewed-by: Kevin Lubick <kjlubick@google.com>

diff --git a/modules/skjson/src/SkJSON.cpp b/modules/skjson/src/SkJSON.cpp
index d423715947..23a3d14c9c 100644
--- a/modules/skjson/src/SkJSON.cpp
+++ b/modules/skjson/src/SkJSON.cpp
@@ -157,39 +157,41 @@ const Value& ObjectValue::operator[](const char* key) const {
 namespace {
 
 // Lexer/parser inspired by rapidjson [1], sajson [2] and pjson [3].
 //
 // [1] https://github.com/Tencent/rapidjson/
 // [2] https://github.com/chadaustin/sajson
 // [3] https://pastebin.com/hnhSTL3h
 
 
 // bit 0 (0x01) - plain ASCII string character
 // bit 1 (0x02) - whitespace
-// bit 2 (0x04) - string terminator (" \0 [control chars])
+// bit 2 (0x04) - string terminator (" \0 [control chars] **AND } ]** <- see matchString notes)
 // bit 3 (0x08) - 0-9
 // bit 4 (0x10) - 0-9 e E .
+// bit 5 (0x20) - scope terminator (} ])
 static constexpr uint8_t g_token_flags[256] = {
  // 0    1    2    3    4    5    6    7      8    9    A    B    C    D    E    F
     4,   4,   4,   4,   4,   4,   4,   4,     4,   6,   6,   4,   4,   6,   4,   4, // 0
     4,   4,   4,   4,   4,   4,   4,   4,     4,   4,   4,   4,   4,   4,   4,   4, // 1
     3,   1,   4,   1,   1,   1,   1,   1,     1,   1,   1,   1,   1,   1,   0x11,1, // 2
  0x19,0x19,0x19,0x19,0x19,0x19,0x19,0x19,  0x19,0x19,   1,   1,   1,   1,   1,   1, // 3
     1,   1,   1,   1,   1,   0x11,1,   1,     1,   1,   1,   1,   1,   1,   1,   1, // 4
-    1,   1,   1,   1,   1,   1,   1,   1,     1,   1,   1,   1,   0,   1,   1,   1, // 5
+    1,   1,   1,   1,   1,   1,   1,   1,     1,   1,   1,   1,   0,0x25,   1,   1, // 5
     1,   1,   1,   1,   1,   0x11,1,   1,     1,   1,   1,   1,   1,   1,   1,   1, // 6
-    1,   1,   1,   1,   1,   1,   1,   1,     1,   1,   1,   1,   1,   1,   1,   1, // 7
+    1,   1,   1,   1,   1,   1,   1,   1,     1,   1,   1,   1,   1,0x25,   1,   1, // 7
 
  // 128-255
     0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0
 };
 
-static inline bool is_ws(char c)          { return g_token_flags[static_cast<uint8_t>(c)] & 0x02; }
-static inline bool is_sterminator(char c) { return g_token_flags[static_cast<uint8_t>(c)] & 0x04; }
-static inline bool is_digit(char c)       { return g_token_flags[static_cast<uint8_t>(c)] & 0x08; }
-static inline bool is_numeric(char c)     { return g_token_flags[static_cast<uint8_t>(c)] & 0x10; }
+static inline bool is_ws(char c)       { return g_token_flags[static_cast<uint8_t>(c)] & 0x02; }
+static inline bool is_eostring(char c) { return g_token_flags[static_cast<uint8_t>(c)] & 0x04; }
+static inline bool is_digit(char c)    { return g_token_flags[static_cast<uint8_t>(c)] & 0x08; }
+static inline bool is_numeric(char c)  { return g_token_flags[static_cast<uint8_t>(c)] & 0x10; }
+static inline bool is_eoscope(char c)  { return g_token_flags[static_cast<uint8_t>(c)] & 0x20; }
 
 static inline const char* skip_ws(const char* p) {
     while (is_ws(*p)) ++p;
@@ -222,171 +224,171 @@ class DOMParser {
 public:
     explicit DOMParser(SkArenaAlloc& alloc)
         : fAlloc(alloc) {
 
         fValueStack.reserve(kValueStackReserve);
         fScopeStack.reserve(kScopeStackReserve);
     }
 
     const Value parse(const char* p, size_t size) {
         if (!size) {
             return this->error(NullValue(), p, "invalid empty input");
         }
 
         const char* p_stop = p + size - 1;
 
         // We're only checking for end-of-stream on object/array close('}',']'),
         // so we must trim any whitespace from the buffer tail.
         while (p_stop > p && is_ws(*p_stop)) --p_stop;
 
         SkASSERT(p_stop >= p && p_stop < p + size);
-        if (*p_stop != '}' && *p_stop != ']') {
+        if (!is_eoscope(*p_stop)) {
             return this->error(NullValue(), p_stop, "invalid top-level value");
         }
 
         p = skip_ws(p);
 
         switch (*p) {
         case '{':
             goto match_object;
         case '[':
             goto match_array;
         default:
             return this->error(NullValue(), p, "invalid top-level value");
         }
 
     match_object:
         SkASSERT(*p == '{');
         p = skip_ws(p + 1);
 
         this->pushObjectScope();
 
         if (*p == '}') goto pop_object;
 
         // goto match_object_key;
     match_object_key:
         p = skip_ws(p);
         if (*p != '"') return this->error(NullValue(), p, "expected object key");
 
-        p = this->matchString(p, [this](const char* key, size_t size) {
+        p = this->matchString(p, p_stop, [this](const char* key, size_t size) {
             this->pushObjectKey(key, size);
         });
         if (!p) return NullValue();
 
         p = skip_ws(p);
         if (*p != ':') return this->error(NullValue(), p, "expected ':' separator");
 
         ++p;
 
         // goto match_value;
     match_value:
         p = skip_ws(p);
 
         switch (*p) {
         case '\0':
             return this->error(NullValue(), p, "unexpected input end");
         case '"':
-            p = this->matchString(p, [this](const char* str, size_t size) {
+            p = this->matchString(p, p_stop, [this](const char* str, size_t size) {
                 this->pushString(str, size);
             });
             break;
         case '[':
             goto match_array;
         case 'f':
             p = this->matchFalse(p);
             break;
         case 'n':
             p = this->matchNull(p);
             break;
         case 't':
             p = this->matchTrue(p);
             break;
         case '{':
             goto match_object;
         default:
             p = this->matchNumber(p);
             break;
         }
 
         if (!p) return NullValue();
 
         // goto match_post_value;
     match_post_value:
         SkASSERT(!fScopeStack.empty());
 
         p = skip_ws(p);
         switch (*p) {
         case ',':
             ++p;
             if (fScopeStack.back() >= 0) {
                 goto match_object_key;
             } else {
                 goto match_value;
             }
         case ']':
             goto pop_array;
         case '}':
             goto pop_object;
         default:
             return this->error(NullValue(), p - 1, "unexpected value-trailing token");
         }
 
         // unreachable
         SkASSERT(false);
 
     pop_object:
         SkASSERT(*p == '}');
 
         if (fScopeStack.back() < 0) {
             return this->error(NullValue(), p, "unexpected object terminator");
         }
 
         this->popObjectScope();
 
         // goto pop_common
     pop_common:
-        SkASSERT(*p == '}' || *p == ']');
+        SkASSERT(is_eoscope(*p));
 
         if (fScopeStack.empty()) {
             SkASSERT(fValueStack.size() == 1);
 
             // Success condition: parsed the top level element and reached the stop token.
             return p == p_stop
                 ? fValueStack.front()
                 : this->error(NullValue(), p + 1, "trailing root garbage");
         }
 
         if (p == p_stop) {
             return this->error(NullValue(), p, "unexpected end-of-input");
         }
 
         ++p;
 
         goto match_post_value;
 
     match_array:
         SkASSERT(*p == '[');
         p = skip_ws(p + 1);
 
         this->pushArrayScope();
 
         if (*p != ']') goto match_value;
 
         // goto pop_array;
     pop_array:
         SkASSERT(*p == ']');
 
         if (fScopeStack.back() >= 0) {
             return this->error(NullValue(), p, "unexpected array terminator");
         }
 
         this->popArrayScope();
 
         goto pop_common;
 
         SkASSERT(false);
         return NullValue();
     }
 
     std::tuple<const char*, const SkString> getError() const {
         return std::make_tuple(fErrorToken, fErrorMessage);
     }
@@ -394,279 +396,290 @@ public:
 private:
     SkArenaAlloc&         fAlloc;
 
     static constexpr size_t kValueStackReserve = 256;
     static constexpr size_t kScopeStackReserve = 128;
     std::vector<Value   > fValueStack;
     std::vector<intptr_t> fScopeStack;
 
     const char*           fErrorToken = nullptr;
     SkString              fErrorMessage;
 
     template <typename VectorT>
     void popScopeAsVec(size_t scope_start) {
         SkASSERT(scope_start > 0);
         SkASSERT(scope_start <= fValueStack.size());
 
         using T = typename VectorT::ValueT;
         static_assert( sizeof(T) >=  sizeof(Value), "");
         static_assert( sizeof(T)  %  sizeof(Value) == 0, "");
         static_assert(alignof(T) == alignof(Value), "");
 
         const auto scope_count = fValueStack.size() - scope_start,
                          count = scope_count / (sizeof(T) / sizeof(Value));
         SkASSERT(scope_count % (sizeof(T) / sizeof(Value)) == 0);
 
         const auto* begin = reinterpret_cast<const T*>(fValueStack.data() + scope_start);
 
         // Instantiate the placeholder value added in onPush{Object/Array}.
         fValueStack[scope_start - 1] = VectorT(begin, count, fAlloc);
 
         // Drop the current scope.
         fScopeStack.pop_back();
         fValueStack.resize(scope_start);
     }
 
     void pushObjectScope() {
         // Object placeholder.
         fValueStack.emplace_back();
 
         // Object scope marker (size).
         fScopeStack.push_back(SkTo<intptr_t>(fValueStack.size()));
     }
 
     void popObjectScope() {
         const auto scope_start = fScopeStack.back();
         SkASSERT(scope_start > 0);
         this->popScopeAsVec<ObjectValue>(SkTo<size_t>(scope_start));
 
         SkDEBUGCODE(
             const auto& obj = fValueStack.back().as<ObjectValue>();
             SkASSERT(obj.is<ObjectValue>());
             for (const auto& member : obj) {
                 SkASSERT(member.fKey.is<StringValue>());
             }
         )
     }
 
     void pushArrayScope() {
         // Array placeholder.
         fValueStack.emplace_back();
 
         // Array scope marker (-size).
         fScopeStack.push_back(-SkTo<intptr_t>(fValueStack.size()));
     }
 
     void popArrayScope() {
         const auto scope_start = -fScopeStack.back();
         SkASSERT(scope_start > 0);
         this->popScopeAsVec<ArrayValue>(SkTo<size_t>(scope_start));
 
         SkDEBUGCODE(
             const auto& arr = fValueStack.back().as<ArrayValue>();
             SkASSERT(arr.is<ArrayValue>());
         )
     }
 
     void pushObjectKey(const char* key, size_t size) {
         SkASSERT(fScopeStack.back() >= 0);
         SkASSERT(fValueStack.size() >= SkTo<size_t>(fScopeStack.back()));
         SkASSERT(!((fValueStack.size() - SkTo<size_t>(fScopeStack.back())) & 1));
         this->pushString(key, size);
     }
 
     void pushTrue() {
         fValueStack.push_back(BoolValue(true));
     }
 
     void pushFalse() {
         fValueStack.push_back(BoolValue(false));
     }
 
     void pushNull() {
         fValueStack.push_back(NullValue());
     }
 
     void pushString(const char* s, size_t size) {
         fValueStack.push_back(StringValue(s, size, fAlloc));
     }
 
     void pushInt32(int32_t i) {
         fValueStack.push_back(NumberValue(i));
     }
 
     void pushFloat(float f) {
         fValueStack.push_back(NumberValue(f));
     }
 
     template <typename T>
     T error(T&& ret_val, const char* p, const char* msg) {
 #if defined(SK_JSON_REPORT_ERRORS)
         fErrorToken = p;
         fErrorMessage.set(msg);
 #endif
         return ret_val;
     }
 
     const char* matchTrue(const char* p) {
         SkASSERT(p[0] == 't');
 
         if (p[1] == 'r' && p[2] == 'u' && p[3] == 'e') {
             this->pushTrue();
             return p + 4;
         }
 
         return this->error(nullptr, p, "invalid token");
     }
 
     const char* matchFalse(const char* p) {
         SkASSERT(p[0] == 'f');
 
         if (p[1] == 'a' && p[2] == 'l' && p[3] == 's' && p[4] == 'e') {
             this->pushFalse();
             return p + 5;
         }
 
         return this->error(nullptr, p, "invalid token");
     }
 
     const char* matchNull(const char* p) {
         SkASSERT(p[0] == 'n');
 
         if (p[1] == 'u' && p[2] == 'l' && p[3] == 'l') {
             this->pushNull();
             return p + 4;
         }
 
         return this->error(nullptr, p, "invalid token");
     }
 
     template <typename MatchFunc>
-    const char* matchString(const char* p, MatchFunc&& func) {
+    const char* matchString(const char* p, const char* p_stop, MatchFunc&& func) {
         SkASSERT(*p == '"');
         const auto* s_begin = p + 1;
 
         // TODO: unescape
-        for (p = s_begin; !is_sterminator(*p); ++p) {}
 
-        if (*p == '"') {
-            func(s_begin, p - s_begin);
-            return p + 1;
-        }
+        do {
+            // Consume string chars.
+            for (p = p + 1; !is_eostring(*p); ++p);
+
+            if (*p == '"') {
+                // Valid string found.
+                func(s_begin, p - s_begin);
+                return p + 1;
+            }
+
+            // End-of-scope chars are special: we use them to tag the end of the input.
+            // Thus they cannot be consumed indiscriminately -- we need to check if we hit the
+            // end of the input.  To that effect, we treat them as string terminators above,
+            // then we catch them here.
+        } while (is_eoscope(*p) && (p != p_stop)); // Safe scope terminator char, keep going.
 
+        // Premature end-of-input, or illegal string char.
         return this->error(nullptr, s_begin - 1, "invalid string");
     }
 
     const char* matchFastFloatDecimalPart(const char* p, int sign, float f, int exp) {
         SkASSERT(exp <= 0);
 
         for (;;) {
             if (!is_digit(*p)) break;
             f = f * 10.f + (*p++ - '0'); --exp;
             if (!is_digit(*p)) break;
             f = f * 10.f + (*p++ - '0'); --exp;
         }
 
         if (is_numeric(*p)) {
             SkASSERT(*p == '.' || *p == 'e' || *p == 'E');
             // We either have malformed input, or an (unsupported) exponent.
             return nullptr;
         }
 
         this->pushFloat(sign * f * pow10(exp));
 
         return p;
     }
 
     const char* matchFastFloatPart(const char* p, int sign, float f) {
         for (;;) {
             if (!is_digit(*p)) break;
             f = f * 10.f + (*p++ - '0');
             if (!is_digit(*p)) break;
             f = f * 10.f + (*p++ - '0');
         }
 
         if (!is_numeric(*p)) {
             // Matched (integral) float.
             this->pushFloat(sign * f);
             return p;
         }
 
         return (*p == '.') ? this->matchFastFloatDecimalPart(p + 1, sign, f, 0)
                            : nullptr;
     }
 
     const char* matchFast32OrFloat(const char* p) {
         int sign = 1;
         if (*p == '-') {
             sign = -1;
             ++p;
         }
 
         const auto* digits_start = p;
 
         int32_t n32 = 0;
 
         // This is the largest absolute int32 value we can handle before
         // risking overflow *on the next digit* (214748363).
         static constexpr int32_t kMaxInt32 = (std::numeric_limits<int32_t>::max() - 9) / 10;
 
         if (is_digit(*p)) {
             n32 = (*p++ - '0');
             for (;;) {
                 if (!is_digit(*p) || n32 > kMaxInt32) break;
                 n32 = n32 * 10 + (*p++ - '0');
             }
         }
 
         if (!is_numeric(*p)) {
             // Did we actually match any digits?
             if (p > digits_start) {
                 this->pushInt32(sign * n32);
                 return p;
             }
             return nullptr;
         }
 
         if (*p == '.') {
             const auto* decimals_start = ++p;
 
             int exp = 0;
 
             for (;;) {
                 if (!is_digit(*p) || n32 > kMaxInt32) break;
                 n32 = n32 * 10 + (*p++ - '0'); --exp;
                 if (!is_digit(*p) || n32 > kMaxInt32) break;
                 n32 = n32 * 10 + (*p++ - '0'); --exp;
             }
 
             if (!is_numeric(*p)) {
                 // Did we actually match any digits?
                 if (p > decimals_start) {
                     this->pushFloat(sign * n32 * pow10(exp));
                     return p;
                 }
                 return nullptr;
             }
 
             if (n32 > kMaxInt32) {
                 // we ran out on n32 bits
                 return this->matchFastFloatDecimalPart(p, sign, n32, exp);
             }
         }
 
         return this->matchFastFloatPart(p, sign, n32);
     }
 
     const char* matchNumber(const char* p) {
         if (const auto* fast = this->matchFast32OrFloat(p)) return fast;
 
         // slow fallback
         char* matched;
         float f = strtof(p, &matched);
         if (matched > p) {
             this->pushFloat(f);
             return matched;
         }
         return this->error(nullptr, p, "invalid numeric token");
     }
 };
diff --git a/modules/skjson/src/SkJSONTest.cpp b/modules/skjson/src/SkJSONTest.cpp
index 1aaa278fb8..df04ac3529 100644
--- a/modules/skjson/src/SkJSONTest.cpp
+++ b/modules/skjson/src/SkJSONTest.cpp
@@ -17,99 +17,103 @@ using namespace skjson;
 DEF_TEST(SkJSON_Parse, reporter) {
     static constexpr struct {
         const char* in;
         const char* out;
     } g_tests[] = {
         { ""     , nullptr },
         { "["    , nullptr },
         { "]"    , nullptr },
         { "[[]"  , nullptr },
         { "[]]"  , nullptr },
         { "[]f"  , nullptr },
         { "{"    , nullptr },
         { "}"    , nullptr },
         { "{{}"  , nullptr },
         { "{}}"  , nullptr },
         { "{}f"  , nullptr },
         { "{]"   , nullptr },
         { "[}"   , nullptr },
+        { "{\"}" , nullptr },
+        { "[\"]" , nullptr },
         { "1"    , nullptr },
         { "true" , nullptr },
         { "false", nullptr },
         { "null" , nullptr },
 
         { "[nulll]" , nullptr },
         { "[false2]", nullptr },
         { "[true:]" , nullptr },
 
         { "[1 2]"   , nullptr },
         { "[1,,2]"  , nullptr },
         { "[1,2,]"  , nullptr },
         { "[,1,2]"  , nullptr },
 
         { "[ \"foo"       , nullptr },
         { "[ \"fo\0o\" ]" , nullptr },
 
         { "{\"\":{}"                  , nullptr },
         { "{ null }"                  , nullptr },
         { "{ \"k\" : }"               , nullptr },
         { "{ : null }"                , nullptr },
         { "{ \"k\" : : null }"        , nullptr },
         { "{ \"k\" : null , }"        , nullptr },
         { "{ \"k\" : null \"k\" : 1 }", nullptr },
 
 
         { "[]"                           , "[]" },
         { " \n\r\t [ \n\r\t ] \n\r\t "   , "[]" },
         { "[[]]"                         , "[[]]" },
         { "[ null ]"                     , "[null]" },
         { "[ true ]"                     , "[true]" },
         { "[ false ]"                    , "[false]" },
         { "[ 0 ]"                        , "[0]" },
         { "[ 1 ]"                        , "[1]" },
         { "[ 1.248 ]"                    , "[1.248]" },
         { "[ \"\" ]"                     , "[\"\"]" },
+        { "[ \"foo{bar}baz\" ]"          , "[\"foo{bar}baz\"]" },
         { "[ \" f o o \" ]"              , "[\" f o o \"]" },
         { "[ \"123456\" ]"               , "[\"123456\"]" },
         { "[ \"1234567\" ]"              , "[\"1234567\"]" },
         { "[ \"12345678\" ]"             , "[\"12345678\"]" },
         { "[ \"123456789\" ]"            , "[\"123456789\"]" },
         { "[ null , true, false,0,12.8 ]", "[null,true,false,0,12.8]" },
 
         { "{}"                          , "{}" },
         { " \n\r\t { \n\r\t } \n\r\t "  , "{}" },
         { "{ \"k\" : null }"            , "{\"k\":null}" },
+        { "{ \"foo{\" : \"bar}baz\" }"  , "{\"foo{\":\"bar}baz\"}" },
         { "{ \"k1\" : null, \"k2 \":0 }", "{\"k1\":null,\"k2 \":0}" },
         { "{ \"k1\" : null, \"k1\":0 }" , "{\"k1\":null,\"k1\":0}" },
 
         { "{ \"k1\" : null,                   \n\
              \"k2\" : 0,                      \n\
              \"k3\" : [                       \n\
                         true,                 \r\n\
                         { \"kk1\" : \"foo\" , \n\
                           \"kk2\" : \"bar\" , \n\
                           \"kk3\" : 1.28 ,    \n\
                           \"kk4\" : [ 42 ]    \n\
                         } ,                   \n\
                         \"boo\" ,             \n\
                         null                  \n\
                       ]                       \n\
            }",
           "{\"k1\":null,\"k2\":0,\"k3\":[true,"
               "{\"kk1\":\"foo\",\"kk2\":\"bar\",\"kk3\":1.28,\"kk4\":[42]},\"boo\",null]}" },
     };
 
     for (const auto& tst : g_tests) {
         DOM dom(tst.in, strlen(tst.in));
         const auto success = !dom.root().is<NullValue>();
         REPORTER_ASSERT(reporter, success == (tst.out != nullptr));
         if (!success) continue;
 
         SkDynamicMemoryWStream str;
         dom.write(&str);
         str.write8('\0');
 
         auto data = str.detachAsData();
         REPORTER_ASSERT(reporter, !strcmp(tst.out, static_cast<const char*>(data->data())));
     }
 
 }
