commit bb5e7d56416f989a1ea62de4b9ae50158e268b9d
Author: K.Kosako <kkosako0@gmail.com>
Date:   Tue Mar 23 12:09:23 2021 +0900

    fix: Issue 32340, 32345, 32355 in oss-fuzz

diff --git a/src/regexec.c b/src/regexec.c
index 27e6605..b018336 100644
--- a/src/regexec.c
+++ b/src/regexec.c
@@ -1,60 +1,64 @@
 /**********************************************************************
   regexec.c -  Oniguruma (regular expression library)
 **********************************************************************/
 /*-
  * Copyright (c) 2002-2021  K.Kosako
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
  *    notice, this list of conditions and the following disclaimer in the
  *    documentation and/or other materials provided with the distribution.
  *
  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  */
 
 #ifndef ONIG_NO_PRINT
 #ifndef NEED_TO_INCLUDE_STDIO
 #define NEED_TO_INCLUDE_STDIO
 #endif
 #endif
 
 #include "regint.h"
 
 #define IS_MBC_WORD_ASCII_MODE(enc,s,end,mode) \
   ((mode) == 0 ? ONIGENC_IS_MBC_WORD(enc,s,end) : ONIGENC_IS_MBC_WORD_ASCII(enc,s,end))
 
 #ifdef USE_CRNL_AS_LINE_TERMINATOR
 #define ONIGENC_IS_MBC_CRNL(enc,p,end) \
   (ONIGENC_MBC_TO_CODE(enc,p,end) == 13 && \
    ONIGENC_IS_MBC_NEWLINE(enc,(p+enclen(enc,p)),end))
 #endif
 
 #define CHECK_INTERRUPT_IN_MATCH
 
 #define STACK_MEM_START(reg, idx) \
   (MEM_STATUS_AT((reg)->push_mem_start, (idx)) != 0 ? \
    STACK_AT(mem_start_stk[idx].i)->u.mem.pstr : mem_start_stk[idx].s)
 
 #define STACK_MEM_END(reg, idx) \
   (MEM_STATUS_AT((reg)->push_mem_end, (idx)) != 0 ? \
    STACK_AT(mem_end_stk[idx].i)->u.mem.pstr : mem_end_stk[idx].s)
 
-#define DIST_CAST(d)   (int )(d)
+#ifdef _MSC_VER
+#define DIST_CAST(d)   (OnigLen )(d)
+#else
+#define DIST_CAST(d)   (d)
+#endif
 
 
 static int forward_search(regex_t* reg, const UChar* str, const UChar* end, UChar* start, UChar* range, UChar** low, UChar** high);
@@ -4474,148 +4478,148 @@ static inline int
 regset_search_body_position_lead(OnigRegSet* set,
            const UChar* str, const UChar* end,
            const UChar* start, const UChar* range, /* match start range */
            const UChar* orig_range, /* data range */
            OnigOptionType option, MatchArg* msas, int* rmatch_pos)
 {
   int r, n, i;
   UChar *s;
   UChar *low, *high;
   UChar* sch_range;
   regex_t* reg;
   OnigEncoding enc;
   SearchRange* sr;
 
   n   = set->n;
   enc = set->enc;
   s = (UChar* )start;
 
   sr = (SearchRange* )xmalloc(sizeof(*sr) * n);
   CHECK_NULL_RETURN_MEMERR(sr);
 
   for (i = 0; i < n; i++) {
     reg = set->rs[i].reg;
 
     sr[i].state = SRS_DEAD;
     if (reg->optimize != OPTIMIZE_NONE) {
       if (reg->dist_max != INFINITE_LEN) {
-        if (end - range > DIST_CAST(reg->dist_max))
+        if (DIST_CAST(end - range) > reg->dist_max)
           sch_range = (UChar* )range + reg->dist_max;
         else
           sch_range = (UChar* )end;
 
         if (forward_search(reg, str, end, s, sch_range, &low, &high)) {
           sr[i].state = SRS_LOW_HIGH;
           sr[i].low  = low;
           sr[i].high = high;
           sr[i].sch_range = sch_range;
         }
       }
       else {
         sch_range = (UChar* )end;
         if (forward_search(reg, str, end, s, sch_range, &low, &high)) {
           goto total_active;
         }
       }
     }
     else {
     total_active:
       sr[i].state    = SRS_ALL_RANGE;
       sr[i].low      = s;
       sr[i].high     = (UChar* )range;
     }
   }
 
 #define ACTIVATE_ALL_LOW_HIGH_SEARCH_THRESHOLD_LEN   500
 
   if (set->all_low_high != 0
       && range - start > ACTIVATE_ALL_LOW_HIGH_SEARCH_THRESHOLD_LEN) {
     do {
       int try_count = 0;
       for (i = 0; i < n; i++) {
         if (sr[i].state == SRS_DEAD) continue;
 
         if (s <  sr[i].low) continue;
         if (s >= sr[i].high) {
           if (forward_search(set->rs[i].reg, str, end, s, sr[i].sch_range,
                              &low, &high) != 0) {
             sr[i].low      = low;
             sr[i].high     = high;
             if (s < low) continue;
           }
           else {
             sr[i].state = SRS_DEAD;
             continue;
           }
         }
 
         reg = set->rs[i].reg;
         REGSET_MATCH_AND_RETURN_CHECK(orig_range);
         try_count++;
       } /* for (i) */
 
       if (s >= range) break;
 
       if (try_count == 0) {
         low = (UChar* )range;
         for (i = 0; i < n; i++) {
           if (sr[i].state == SRS_LOW_HIGH && low > sr[i].low) {
             low = sr[i].low;
           }
         }
         if (low == range) break;
 
         s = low;
       }
       else {
         s += enclen(enc, s);
       }
     } while (1);
   }
   else {
     int prev_is_newline = 1;
     do {
       for (i = 0; i < n; i++) {
         if (sr[i].state == SRS_DEAD) continue;
         if (sr[i].state == SRS_LOW_HIGH) {
           if (s <  sr[i].low) continue;
           if (s >= sr[i].high) {
             if (forward_search(set->rs[i].reg, str, end, s, sr[i].sch_range,
                                &low, &high) != 0) {
               sr[i].low      = low;
               sr[i].high     = high;
               if (s < low) continue;
             }
             else {
               sr[i].state = SRS_DEAD;
               continue;
             }
           }
         }
 
         reg = set->rs[i].reg;
         if ((reg->anchor & ANCR_ANYCHAR_INF) == 0 || prev_is_newline != 0) {
           REGSET_MATCH_AND_RETURN_CHECK(orig_range);
         }
       }
 
       if (s >= range) break;
 
       if (set->anychar_inf != 0)
         prev_is_newline = ONIGENC_IS_MBC_NEWLINE(set->enc, s, end);
 
       s += enclen(enc, s);
     } while (1);
   }
 
   xfree(sr);
   return ONIG_MISMATCH;
 
  finish:
   xfree(sr);
   return r;
 
  match:
   xfree(sr);
   *rmatch_pos = (int )(s - str);
   return i;
 }
@@ -5152,118 +5156,118 @@ static int
 forward_search(regex_t* reg, const UChar* str, const UChar* end, UChar* start,
                UChar* range, UChar** low, UChar** high)
 {
   UChar *p, *pprev = (UChar* )NULL;
 
 #ifdef ONIG_DEBUG_SEARCH
   fprintf(DBGFP, "forward_search: str: %p, end: %p, start: %p, range: %p\n",
           str, end, start, range);
 #endif
 
   p = start;
   if (reg->dist_min != 0) {
-    if (end - p <= DIST_CAST(reg->dist_min))
+    if (DIST_CAST(end - p) <= reg->dist_min)
       return 0; /* fail */
 
     if (ONIGENC_IS_SINGLEBYTE(reg->enc)) {
       p += reg->dist_min;
     }
     else {
       UChar *q = p + reg->dist_min;
       while (p < q) p += enclen(reg->enc, p);
     }
   }
 
  retry:
   switch (reg->optimize) {
   case OPTIMIZE_STR:
     p = slow_search(reg->enc, reg->exact, reg->exact_end, p, end, range);
     break;
 
   case OPTIMIZE_STR_FAST:
     p = sunday_quick_search(reg, reg->exact, reg->exact_end, p, end, range);
     break;
 
   case OPTIMIZE_STR_FAST_STEP_FORWARD:
     p = sunday_quick_search_step_forward(reg, reg->exact, reg->exact_end,
                                          p, end, range);
     break;
 
   case OPTIMIZE_MAP:
     p = map_search(reg->enc, reg->map, p, range);
     break;
   }
 
   if (p && p < range) {
-    if (p - start < DIST_CAST(reg->dist_min)) {
+    if (DIST_CAST(p - start) < reg->dist_min) {
     retry_gate:
       pprev = p;
       p += enclen(reg->enc, p);
       goto retry;
     }
 
     if (reg->sub_anchor) {
       UChar* prev;
 
       switch (reg->sub_anchor) {
       case ANCR_BEGIN_LINE:
         if (!ON_STR_BEGIN(p)) {
           prev = onigenc_get_prev_char_head(reg->enc, (pprev ? pprev : str), p);
           if (!ONIGENC_IS_MBC_NEWLINE(reg->enc, prev, end))
             goto retry_gate;
         }
         break;
 
       case ANCR_END_LINE:
         if (ON_STR_END(p)) {
 #ifndef USE_NEWLINE_AT_END_OF_STRING_HAS_EMPTY_LINE
           prev = (UChar* )onigenc_get_prev_char_head(reg->enc,
                                                      (pprev ? pprev : str), p);
           if (prev && ONIGENC_IS_MBC_NEWLINE(reg->enc, prev, end))
             goto retry_gate;
 #endif
         }
         else if (! ONIGENC_IS_MBC_NEWLINE(reg->enc, p, end)
 #ifdef USE_CRNL_AS_LINE_TERMINATOR
                  && ! ONIGENC_IS_MBC_CRNL(reg->enc, p, end)
 #endif
                  )
           goto retry_gate;
 
         break;
       }
     }
 
     if (reg->dist_max == 0) {
       *low  = p;
       *high = p;
     }
     else {
       if (reg->dist_max != INFINITE_LEN) {
-        if (p - str < DIST_CAST(reg->dist_max)) {
+        if (DIST_CAST(p - str) < reg->dist_max) {
           *low = (UChar* )str;
         }
         else {
           *low = p - reg->dist_max;
           if (*low > start) {
             *low = onigenc_get_right_adjust_char_head(reg->enc, start, *low);
           }
         }
       }
       /* no needs to adjust *high, *high is used as range check only */
-      if (p - str < DIST_CAST(reg->dist_min))
+      if (DIST_CAST(p - str) < reg->dist_min)
         *high = (UChar* )str;
       else
         *high = p - reg->dist_min;
     }
 
 #ifdef ONIG_DEBUG_SEARCH
     fprintf(DBGFP,
             "forward_search success: low: %d, high: %d, dmin: %u, dmax: %u\n",
             (int )(*low - str), (int )(*high - str),
             reg->dist_min, reg->dist_max);
 #endif
     return 1; /* success */
   }
 
   return 0; /* fail */
 }
@@ -5273,96 +5277,96 @@ static int
 backward_search(regex_t* reg, const UChar* str, const UChar* end, UChar* s,
                 const UChar* range, UChar* adjrange, UChar** low, UChar** high)
 {
   UChar *p;
 
   p = s;
 
  retry:
   switch (reg->optimize) {
   case OPTIMIZE_STR:
   exact_method:
     p = slow_search_backward(reg->enc, reg->exact, reg->exact_end,
                              range, adjrange, end, p);
     break;
 
   case OPTIMIZE_STR_FAST:
   case OPTIMIZE_STR_FAST_STEP_FORWARD:
     goto exact_method;
     break;
 
   case OPTIMIZE_MAP:
     p = map_search_backward(reg->enc, reg->map, range, adjrange, p);
     break;
   }
 
   if (p) {
     if (reg->sub_anchor) {
       UChar* prev;
 
       switch (reg->sub_anchor) {
       case ANCR_BEGIN_LINE:
         if (!ON_STR_BEGIN(p)) {
           prev = onigenc_get_prev_char_head(reg->enc, str, p);
           if (IS_NOT_NULL(prev) && !ONIGENC_IS_MBC_NEWLINE(reg->enc, prev, end)) {
             p = prev;
             goto retry;
           }
         }
         break;
 
       case ANCR_END_LINE:
         if (ON_STR_END(p)) {
 #ifndef USE_NEWLINE_AT_END_OF_STRING_HAS_EMPTY_LINE
           prev = onigenc_get_prev_char_head(reg->enc, adjrange, p);
           if (IS_NULL(prev)) goto fail;
           if (ONIGENC_IS_MBC_NEWLINE(reg->enc, prev, end)) {
             p = prev;
             goto retry;
           }
 #endif
         }
         else if (! ONIGENC_IS_MBC_NEWLINE(reg->enc, p, end)
 #ifdef USE_CRNL_AS_LINE_TERMINATOR
                  && ! ONIGENC_IS_MBC_CRNL(reg->enc, p, end)
 #endif
                  ) {
           p = onigenc_get_prev_char_head(reg->enc, adjrange, p);
           if (IS_NULL(p)) goto fail;
           goto retry;
         }
         break;
       }
     }
 
     if (reg->dist_max != INFINITE_LEN) {
-      if (p - str < DIST_CAST(reg->dist_max))
+      if (DIST_CAST(p - str) < reg->dist_max)
         *low = (UChar* )str;
       else
         *low = p - reg->dist_max;
 
       if (reg->dist_min != 0) {
-        if (p - str < DIST_CAST(reg->dist_min))
+        if (DIST_CAST(p - str) < reg->dist_min)
           *high = (UChar* )str;
         else
           *high = p - reg->dist_min;
       }
       else {
         *high = p;
       }
 
       *high = onigenc_get_right_adjust_char_head(reg->enc, adjrange, *high);
     }
 
 #ifdef ONIG_DEBUG_SEARCH
     fprintf(DBGFP, "backward_search: low: %d, high: %d\n",
             (int )(*low - str), (int )(*high - str));
 #endif
     return 1; /* success */
   }
 
  fail:
 #ifdef ONIG_DEBUG_SEARCH
   fprintf(DBGFP, "backward_search: fail.\n");
 #endif
   return 0; /* fail */
 }
@@ -5397,344 +5401,344 @@ static int
 search_in_range(regex_t* reg, const UChar* str, const UChar* end,
                 const UChar* start, const UChar* range, /* match start range */
                 const UChar* data_range, /* subject string range */
                 OnigRegion* region,
                 OnigOptionType option, OnigMatchParam* mp)
 {
   int r;
   UChar *s;
   MatchArg msa;
   const UChar *orig_start = start;
 
 #ifdef ONIG_DEBUG_SEARCH
   fprintf(DBGFP,
      "onig_search (entry point): str: %p, end: %d, start: %d, range: %d\n",
      str, (int )(end - str), (int )(start - str), (int )(range - str));
 #endif
 
   ADJUST_MATCH_PARAM(reg, mp);
 
 #ifndef USE_POSIX_API
   if (OPTON_POSIX_REGION(option)) {
     r = ONIGERR_INVALID_ARGUMENT;
     goto finish_no_msa;
   }
 #endif
 
   if (region
 #ifdef USE_POSIX_API
       && ! OPTON_POSIX_REGION(option)
 #endif
       ) {
     r = onig_region_resize_clear(region, reg->num_mem + 1);
     if (r != 0) goto finish_no_msa;
   }
 
   if (start > end || start < str) goto mismatch_no_msa;
 
   if (OPTON_CHECK_VALIDITY_OF_STRING(option)) {
     if (! ONIGENC_IS_VALID_MBC_STRING(reg->enc, str, end)) {
       r = ONIGERR_INVALID_WIDE_CHAR_VALUE;
       goto finish_no_msa;
     }
   }
 
 
 #define MATCH_AND_RETURN_CHECK(upper_range) \
   r = match_at(reg, str, end, (upper_range), s, &msa);\
   if (r != ONIG_MISMATCH) {\
     if (r >= 0) {\
       goto match;\
     }\
     else goto finish; /* error */ \
   }
 
 
   /* anchor optimize: resume search range */
   if (reg->anchor != 0 && str < end) {
     UChar *min_semi_end, *max_semi_end;
 
     if (reg->anchor & ANCR_BEGIN_POSITION) {
       /* search start-position only */
     begin_position:
       if (range > start)
         range = start + 1;
       else
         range = start;
     }
     else if (reg->anchor & ANCR_BEGIN_BUF) {
       /* search str-position only */
       if (range > start) {
         if (start != str) goto mismatch_no_msa;
         range = str + 1;
       }
       else {
         if (range <= str) {
           start = str;
           range = str;
         }
         else
           goto mismatch_no_msa;
       }
     }
     else if (reg->anchor & ANCR_END_BUF) {
       min_semi_end = max_semi_end = (UChar* )end;
 
     end_buf:
       if ((OnigLen )(max_semi_end - str) < reg->anc_dist_min)
         goto mismatch_no_msa;
 
       if (range > start) {
         if (reg->anc_dist_max != INFINITE_LEN &&
-            min_semi_end - start > DIST_CAST(reg->anc_dist_max)) {
+            DIST_CAST(min_semi_end - start) > reg->anc_dist_max) {
           start = min_semi_end - reg->anc_dist_max;
           if (start < end)
             start = onigenc_get_right_adjust_char_head(reg->enc, str, start);
         }
-        if (max_semi_end - (range - 1) < DIST_CAST(reg->anc_dist_min)) {
-          if (max_semi_end - str + 1 < DIST_CAST(reg->anc_dist_min))
+        if (DIST_CAST(max_semi_end - (range - 1)) < reg->anc_dist_min) {
+          if (DIST_CAST(max_semi_end - str + 1) < reg->anc_dist_min)
             goto mismatch_no_msa;
           else
             range = max_semi_end - reg->anc_dist_min + 1;
         }
 
         if (start > range) goto mismatch_no_msa;
         /* If start == range, match with empty at end.
            Backward search is used. */
       }
       else {
         if (reg->anc_dist_max != INFINITE_LEN &&
-            min_semi_end - range > DIST_CAST(reg->anc_dist_max)) {
+            DIST_CAST(min_semi_end - range) > reg->anc_dist_max) {
           range = min_semi_end - reg->anc_dist_max;
         }
-        if (max_semi_end - start < DIST_CAST(reg->anc_dist_min)) {
-          if (max_semi_end - str < DIST_CAST(reg->anc_dist_min))
+        if (DIST_CAST(max_semi_end - start) < reg->anc_dist_min) {
+          if (DIST_CAST(max_semi_end - str) < reg->anc_dist_min)
             goto mismatch_no_msa;
           else {
             start = max_semi_end - reg->anc_dist_min;
             start = ONIGENC_LEFT_ADJUST_CHAR_HEAD(reg->enc, str, start);
           }
         }
         if (range > start) goto mismatch_no_msa;
       }
     }
     else if (reg->anchor & ANCR_SEMI_END_BUF) {
       UChar* pre_end = ONIGENC_STEP_BACK(reg->enc, str, end, 1);
 
       max_semi_end = (UChar* )end;
       if (ONIGENC_IS_MBC_NEWLINE(reg->enc, pre_end, end)) {
         min_semi_end = pre_end;
 
 #ifdef USE_CRNL_AS_LINE_TERMINATOR
         pre_end = ONIGENC_STEP_BACK(reg->enc, str, pre_end, 1);
         if (IS_NOT_NULL(pre_end) &&
             ONIGENC_IS_MBC_CRNL(reg->enc, pre_end, end)) {
           min_semi_end = pre_end;
         }
 #endif
         if (min_semi_end > str && start <= min_semi_end) {
           goto end_buf;
         }
       }
       else {
         min_semi_end = (UChar* )end;
         goto end_buf;
       }
     }
     else if ((reg->anchor & ANCR_ANYCHAR_INF_ML) && range > start) {
       goto begin_position;
     }
   }
   else if (str == end) { /* empty string */
     static const UChar* address_for_empty_string = (UChar* )"";
 
 #ifdef ONIG_DEBUG_SEARCH
     fprintf(DBGFP, "onig_search: empty string.\n");
 #endif
 
     if (reg->threshold_len == 0) {
       start = end = str = address_for_empty_string;
       s = (UChar* )start;
 
       MATCH_ARG_INIT(msa, reg, option, region, start, mp);
       MATCH_AND_RETURN_CHECK(end);
       goto mismatch;
     }
     goto mismatch_no_msa;
   }
 
 #ifdef ONIG_DEBUG_SEARCH
   fprintf(DBGFP, "onig_search(apply anchor): end: %d, start: %d, range: %d\n",
           (int )(end - str), (int )(start - str), (int )(range - str));
 #endif
 
   MATCH_ARG_INIT(msa, reg, option, region, orig_start, mp);
 
   s = (UChar* )start;
   if (range > start) {   /* forward search */
     if (reg->optimize != OPTIMIZE_NONE) {
       UChar *sch_range, *low, *high;
 
       if (reg->dist_max != 0) {
         if (reg->dist_max == INFINITE_LEN)
           sch_range = (UChar* )end;
         else {
-          if (end - range < DIST_CAST(reg->dist_max))
+          if (DIST_CAST(end - range) < reg->dist_max)
             sch_range = (UChar* )end;
           else {
             sch_range = (UChar* )range + reg->dist_max;
           }
         }
       }
       else
         sch_range = (UChar* )range;
 
       if ((end - start) < reg->threshold_len)
         goto mismatch;
 
       if (reg->dist_max != INFINITE_LEN) {
         do {
           if (! forward_search(reg, str, end, s, sch_range, &low, &high))
             goto mismatch;
           if (s < low) {
             s    = low;
           }
           while (s <= high) {
             MATCH_AND_RETURN_CHECK(data_range);
             s += enclen(reg->enc, s);
           }
         } while (s < range);
         goto mismatch;
       }
       else { /* check only. */
         if (! forward_search(reg, str, end, s, sch_range, &low, &high))
           goto mismatch;
 
         if ((reg->anchor & ANCR_ANYCHAR_INF) != 0 &&
             (reg->anchor & (ANCR_LOOK_BEHIND | ANCR_PREC_READ_NOT)) == 0) {
           do {
             UChar* prev;
 
             MATCH_AND_RETURN_CHECK(data_range);
             prev = s;
             s += enclen(reg->enc, s);
 
             while (!ONIGENC_IS_MBC_NEWLINE(reg->enc, prev, end) && s < range) {
               prev = s;
               s += enclen(reg->enc, s);
             }
           } while (s < range);
           goto mismatch;
         }
       }
     }
 
     do {
       MATCH_AND_RETURN_CHECK(data_range);
       s += enclen(reg->enc, s);
     } while (s < range);
 
     if (s == range) { /* because empty match with /$/. */
       MATCH_AND_RETURN_CHECK(data_range);
     }
   }
   else {  /* backward search */
     if (range < str) goto mismatch;
 
     if (orig_start < end)
       orig_start += enclen(reg->enc, orig_start); /* is upper range */
 
     if (reg->optimize != OPTIMIZE_NONE) {
       UChar *low, *high, *adjrange, *sch_start;
       const UChar *min_range;
 
       if ((end - range) < reg->threshold_len) goto mismatch;
 
       if (range < end)
         adjrange = ONIGENC_LEFT_ADJUST_CHAR_HEAD(reg->enc, str, range);
       else
         adjrange = (UChar* )end;
 
-      if (end - range > DIST_CAST(reg->dist_min))
+      if (DIST_CAST(end - range) > reg->dist_min)
         min_range = range + reg->dist_min;
       else
         min_range = end;
 
       if (reg->dist_max != INFINITE_LEN) {
         do {
-          if (end - s > DIST_CAST(reg->dist_max))
+          if (DIST_CAST(end - s) > reg->dist_max)
             sch_start = s + reg->dist_max;
           else {
             sch_start = onigenc_get_prev_char_head(reg->enc, str, end);
           }
 
           if (backward_search(reg, str, end, sch_start, min_range, adjrange,
                               &low, &high) <= 0)
             goto mismatch;
 
           if (s > high)
             s = high;
 
           while (PTR_GE(s, low)) {
             MATCH_AND_RETURN_CHECK(orig_start);
             s = onigenc_get_prev_char_head(reg->enc, str, s);
           }
         } while (PTR_GE(s, range));
         goto mismatch;
       }
       else { /* check only. */
         sch_start = onigenc_get_prev_char_head(reg->enc, str, end);
 
         if (backward_search(reg, str, end, sch_start, min_range, adjrange,
                             &low, &high) <= 0) goto mismatch;
       }
     }
 
     do {
       MATCH_AND_RETURN_CHECK(orig_start);
       s = onigenc_get_prev_char_head(reg->enc, str, s);
     } while (PTR_GE(s, range));
   }
 
  mismatch:
 #ifdef USE_FIND_LONGEST_SEARCH_ALL_OF_RANGE
   if (OPTON_FIND_LONGEST(reg->options)) {
     if (msa.best_len >= 0) {
       s = msa.best_s;
       goto match;
     }
   }
 #endif
   r = ONIG_MISMATCH;
 
  finish:
   MATCH_ARG_FREE(msa);
 
   /* If result is mismatch and no FIND_NOT_EMPTY option,
      then the region is not set in match_at(). */
   if (OPTON_FIND_NOT_EMPTY(reg->options) && region
 #ifdef USE_POSIX_API
       && !OPTON_POSIX_REGION(option)
 #endif
       ) {
     onig_region_clear(region);
   }
 
 #ifdef ONIG_DEBUG
   if (r != ONIG_MISMATCH)
     fprintf(DBGFP, "onig_search: error %d\n", r);
 #endif
   return r;
 
  mismatch_no_msa:
   r = ONIG_MISMATCH;
  finish_no_msa:
 #ifdef ONIG_DEBUG
   if (r != ONIG_MISMATCH)
     fprintf(DBGFP, "onig_search: error %d\n", r);
 #endif
   return r;
 
  match:
   MATCH_ARG_FREE(msa);
   return (int )(s - str);
 }
