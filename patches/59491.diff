commit bb3844bee2734e09dcc121e61b15ca2336b9434f
Merge: 4cc92f1c6a ed31ab4c83
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Thu Jun 1 14:46:02 2023 -0700

    Merge branch 'V5-9-patches'
    
    * V5-9-patches:
      libsnmp: Fix a buffer overflow in sprint_realloc_hinted_integer()

diff --git a/snmplib/mib.c b/snmplib/mib.c
index 232c8756a9..955c738630 100644
--- a/snmplib/mib.c
+++ b/snmplib/mib.c
@@ -1227,100 +1227,100 @@ int
 sprint_realloc_hinted_integer(u_char ** buf, size_t * buf_len,
                               size_t * out_len, int allow_realloc,
                               long val, const char decimaltype,
                               const char *hint, const char *units)
 {
     char            fmt[10] = "%l@", tmp[256];
     int             shift = 0, len, negative = 0;
 
     if (!strchr("bdoux", decimaltype)) {
         snmp_log(LOG_ERR, "Invalid decimal type '%c'\n", decimaltype);
         return 0;
     }
 
     if (hint[0] == 'd') {
         /*
          * We might *actually* want a 'u' here.  
          */
         if (hint[1] == '-') {
             shift = atoi(hint + 2);
             if (shift < 0)
                 shift = 0;
         }
         fmt[2] = decimaltype;
         if (val < 0) {
             negative = 1;
             val = -val;
         }
     } else {
         /*
          * DISPLAY-HINT character is 'b', 'o', or 'x'.  
          */
         fmt[2] = hint[0];
     }
 
     if (hint[0] == 'b') {
 	unsigned long int bit = 0x80000000LU;
 	char *bp = tmp;
 	while (bit) {
 	    *bp++ = val & bit ? '1' : '0';
 	    bit >>= 1;
 	}
 	*bp = 0;
+    } else {
+        snprintf(tmp, sizeof(tmp), fmt, val);
     }
-    else
-	sprintf(tmp, fmt, val);
 
     if (shift != 0) {
         len = strlen(tmp);
         if (shift <= len) {
             tmp[len + 1] = 0;
             while (shift--) {
                 tmp[len] = tmp[len - 1];
                 len--;
             }
             tmp[len] = '.';
         } else if (shift < sizeof(tmp) - 1) {
             tmp[shift + 1] = 0;
             while (shift) {
                 if (len-- > 0) {
                     tmp[shift] = tmp[len];
                 } else {
                     tmp[shift] = '0';
                 }
                 shift--;
             }
             tmp[0] = '.';
         }
     }
     if (negative) {
         len = strlen(tmp)+1;
         while (len) {
             tmp[len] = tmp[len-1];
             len--;
         }
         tmp[0] = '-';
     }
     return snmp_cstrcat(buf, buf_len, out_len, allow_realloc, tmp);
 }
 
 
 /**
  * Prints an integer into a buffer.
  *
  * If allow_realloc is true the buffer will be (re)allocated to fit in the 
  * needed size. (Note: *buf may change due to this.)
  * 
  * @param buf      Address of the buffer to print to.
  * @param buf_len  Address to an integer containing the size of buf.
  * @param out_len  Incremented by the number of characters printed.
  * @param allow_realloc if not zero reallocate the buffer to fit the 
  *                      needed size.
  * @param var      The variable to encode.
  * @param enums    The enumeration ff this variable is enumerated. may be NULL.
  * @param hint     Contents of the DISPLAY-HINT clause of the MIB.
  *                 See RFC 1903 Section 3.1 for details. may be NULL.
  * @param units    Contents of the UNITS clause of the MIB. may be NULL.
  * 
  * @return 1 on success, or 0 on failure (out of memory, or buffer to
  *         small when not allowed to realloc.)
  */
