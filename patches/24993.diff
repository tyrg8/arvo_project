commit 5f80153e95109741dd1779b12ff13554dee6affc
Author: Dirk Farin <dirk.farin@gmail.com>
Date:   Tue Aug 11 12:39:08 2020 +0200

    fix crash on copying non-HDR alpha plane

diff --git a/libheif/heif_colorconversion.cc b/libheif/heif_colorconversion.cc
index 70cf848..52a9870 100644
--- a/libheif/heif_colorconversion.cc
+++ b/libheif/heif_colorconversion.cc
@@ -573,129 +573,130 @@ std::shared_ptr<HeifPixelImage>
 Op_RGB_to_YCbCr<Pixel>::convert_colorspace(const std::shared_ptr<const HeifPixelImage>& input,
                                            ColorState target_state,
                                            ColorConversionOptions options)
 {
   bool hdr = !std::is_same<Pixel, uint8_t>::value;
 
   int width = input->get_width();
   int height = input->get_height();
 
   heif_chroma chroma = target_state.chroma;
   int subH = chroma_h_subsampling(chroma);
   int subV = chroma_v_subsampling(chroma);
 
   int bpp = input->get_bits_per_pixel(heif_channel_R);
   if ((bpp != 8) != hdr) {
     return nullptr;
   }
 
   bool has_alpha = input->has_channel(heif_channel_Alpha);
 
   if (has_alpha && input->get_bits_per_pixel(heif_channel_Alpha) != bpp) {
     return nullptr;
   }
 
   auto outimg = std::make_shared<HeifPixelImage>();
 
   outimg->create(width, height, heif_colorspace_YCbCr, chroma);
 
   int cwidth = (width + subH - 1) / subH;
   int cheight = (height + subV - 1) / subV;
 
   outimg->add_plane(heif_channel_Y, width, height, bpp);
   outimg->add_plane(heif_channel_Cb, cwidth, cheight, bpp);
   outimg->add_plane(heif_channel_Cr, cwidth, cheight, bpp);
 
   if (has_alpha) {
     outimg->add_plane(heif_channel_Alpha, width, height, bpp);
   }
 
   const Pixel* in_r, * in_g, * in_b, * in_a;
   int in_r_stride = 0, in_g_stride = 0, in_b_stride = 0, in_a_stride = 0;
 
   Pixel* out_y, * out_cb, * out_cr, * out_a;
   int out_y_stride = 0, out_cb_stride = 0, out_cr_stride = 0, out_a_stride = 0;
 
   in_r = (const Pixel*) input->get_plane(heif_channel_R, &in_r_stride);
   in_g = (const Pixel*) input->get_plane(heif_channel_G, &in_g_stride);
   in_b = (const Pixel*) input->get_plane(heif_channel_B, &in_b_stride);
   out_y = (Pixel*) outimg->get_plane(heif_channel_Y, &out_y_stride);
   out_cb = (Pixel*) outimg->get_plane(heif_channel_Cb, &out_cb_stride);
   out_cr = (Pixel*) outimg->get_plane(heif_channel_Cr, &out_cr_stride);
 
   if (has_alpha) {
     in_a = (const Pixel*) input->get_plane(heif_channel_Alpha, &in_a_stride);
     out_a = (Pixel*) outimg->get_plane(heif_channel_Alpha, &out_a_stride);
   }
   else {
     in_a = nullptr;
     out_a = nullptr;
   }
 
   if (hdr) {
     in_r_stride /= 2;
     in_g_stride /= 2;
     in_b_stride /= 2;
     in_a_stride /= 2;
     out_y_stride /= 2;
     out_cb_stride /= 2;
     out_cr_stride /= 2;
     out_a_stride /= 2;
   }
 
   uint16_t halfRange = (uint16_t) (1 << (bpp - 1));
   int32_t fullRange = (1 << bpp) - 1;
 
   int matrix_coeffs = 2;
   RGB_to_YCbCr_coefficients coeffs = RGB_to_YCbCr_coefficients::defaults();
   if (target_state.nclx_profile) {
     matrix_coeffs = target_state.nclx_profile->get_matrix_coefficients();
     coeffs = heif::get_RGB_to_YCbCr_coefficients(target_state.nclx_profile->get_matrix_coefficients(),
                                                  target_state.nclx_profile->get_colour_primaries());
   }
 
   int x, y;
 
   for (y = 0; y < height; y++) {
     for (x = 0; x < width; x++) {
       if (matrix_coeffs == 0) {
         out_y[y * out_y_stride + x] = in_g[y * in_g_stride + x];
       }
       else {
         float r = in_r[y * in_r_stride + x];
         float g = in_g[y * in_g_stride + x];
         float b = in_b[y * in_b_stride + x];
 
         out_y[y * out_y_stride + x] = (Pixel) clip(
             (int32_t) (r * coeffs.c[0][0] + g * coeffs.c[0][1] + b * coeffs.c[0][2]), fullRange);
       }
     }
   }
 
   for (y = 0; y < height; y += subV) {
     for (x = 0; x < width; x += subH) {
       if (matrix_coeffs == 0) {
         out_cb[(y / subV) * out_cb_stride + (x / subH)] = in_b[y * in_b_stride + x];
         out_cr[(y / subV) * out_cb_stride + (x / subH)] = in_r[y * in_b_stride + x];
       }
       else {
         float r = in_r[y * in_r_stride + x];
         float g = in_g[y * in_g_stride + x];
         float b = in_b[y * in_b_stride + x];
 
         out_cb[(y / subV) * out_cb_stride + (x / subH)] = (Pixel) clip(
             halfRange + (int32_t) (r * coeffs.c[1][0] + g * coeffs.c[1][1] + b * coeffs.c[1][2]), fullRange);
         out_cr[(y / subV) * out_cr_stride + (x / subH)] = (Pixel) clip(
             halfRange + (int32_t) (r * coeffs.c[2][0] + g * coeffs.c[2][1] + b * coeffs.c[2][2]), fullRange);
       }
     }
   }
 
 
   if (has_alpha) {
+    int copyWidth = (hdr ? width*2 : width);
     for (y = 0; y < height; y++) {
-      memcpy(&out_a[y * out_a_stride], &in_a[y * in_a_stride], width * 2);
+      memcpy(&out_a[y * out_a_stride], &in_a[y * in_a_stride], copyWidth);
     }
   }
 
   return outimg;
 }
