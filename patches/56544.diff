commit f62a3f606db3163b85666a0b8997e52987c87e97
Author: Robin Watts <Robin.Watts@artifex.com>
Date:   Fri Apr 28 19:22:09 2023 +0100

    Ensure that we catch errors from gs_update_trans_marking_params

diff --git a/base/gdevp14.c b/base/gdevp14.c
index afa303ad8..ff7b24f1f 100644
--- a/base/gdevp14.c
+++ b/base/gdevp14.c
@@ -4457,20 +4457,26 @@ pdf14_fill_stroke_prestroke(gx_device* dev, gs_gstate* pgs, float stroke_alpha,
 }
 
 /* Cleanup after the stroke in fill-stroke  */
-static void
+static int
 pdf14_fill_stroke_poststroke(gx_device* dev, gs_gstate* pgs, float fill_alpha, bool op_ca_eq_CA)
 {
+    int code;
+
     if (!op_ca_eq_CA) {
         /* Bug 703324 we need to reset the fill constant alpha in the graphics
           * state to the correct saved value. We also need to reset the 'opacity' member of the
           * device, because some device methods (eg fill_masked_image) don't take a graphics
           * state pointer as a parameter and so are unable to set the opacity value themselves.
           * We therefore need to make sure it is set according to the current fill state.
           */
         (void)gs_setfillconstantalpha(pgs, fill_alpha);
-        gs_update_trans_marking_params(pgs);
+        code = gs_update_trans_marking_params(pgs);
+        if (code < 0)
+            return code;
         pdf14_set_marking_params(dev, pgs);
     }
+
+    return 0;
 }
 
 /* cleanup in fill-stroke  */
@@ -4501,103 +4507,106 @@ static int
 pdf14_fill_stroke_path(gx_device *dev, const gs_gstate *cpgs, gx_path *ppath,
     const gx_fill_params *fill_params, const gx_drawing_color *pdcolor_fill,
     const gx_stroke_params *stroke_params, const gx_drawing_color *pdcolor_stroke,
     const gx_clip_path *pcpath)
 {
     bool op_ca_eq_CA;
     bool path_empty;
     int code;
     float stroke_alpha = cpgs->strokeconstantalpha;
     float fill_alpha = cpgs->fillconstantalpha;
     gs_blend_mode_t blend_mode = cpgs->blend_mode;
     pdf14_device* p14dev = (pdf14_device*)dev;
     PDF14_OP_FS_STATE save_op_state = p14dev->op_state;
     gs_log2_scale_point path_log2scale;
     bool group_needed = true;
     gx_device* curr_pgs_dev = cpgs->device;
 
     union {
         const gs_gstate* cpgs;
         gs_gstate* pgs;
     } const_breaker;
     gs_gstate* pgs;
 
     /* Break const just once, neatly */
     const_breaker.cpgs = cpgs;
     pgs = const_breaker.pgs;
     path_log2scale.x = 0;
     path_log2scale.y = 0;
 
     code = pdf14_initialize_ctx(dev, dev->color_info.num_components,
         dev->color_info.polarity != GX_CINFO_POLARITY_SUBTRACTIVE, pgs);
     if (code < 0)
         return code;
 
     /* From looking at what AR is doing, it appears that if alpha is 1 and
      * blend is normal we don't do a group push. Just do the stroke
      * and the fill, even with overprint */
     if (stroke_alpha == 1 && fill_alpha == 1 && blend_mode == BLEND_MODE_Normal)
         group_needed = false;
 
     if (group_needed) {
         pgs->device = dev; /* This is needed due to the gs_trans calls.  This method
                               can be called on the clist writer side when dealing
                               with the abuf/pdf14 interaction. Those calls have to
                               go through the gs_trans API not the gx_trans or pdf14
                               methods.  Perhaps these methods should have a different
                               suffix, but they are static methods here in the pdf14
                               file. */
         code = pdf14_fill_stroke_prefill(dev, pgs, ppath, pcpath, fill_alpha, stroke_alpha,
             blend_mode, &op_ca_eq_CA, &path_empty, path_log2scale);
         pgs->device = curr_pgs_dev;
         if (code < 0)
             goto cleanup;
         if (path_empty)
             return 0;
     }
 
     code = pdf14_fill_path(dev, pgs, ppath, fill_params, pdcolor_fill, pcpath);
     if (code < 0)
         goto cleanup;
 
     if (group_needed)
         pdf14_fill_stroke_prestroke(dev, pgs, stroke_alpha, blend_mode, op_ca_eq_CA);
     gs_swapcolors_quick(pgs);
 
 
 #if RAW_DUMP
     /* Dump the current buffer to see what we have. */
     dump_raw_buffer(p14dev->ctx->memory,
         p14dev->ctx->stack->rect.q.y - p14dev->ctx->stack->rect.p.y,
         p14dev->ctx->stack->rowstride >> p14dev->ctx->stack->deep, p14dev->ctx->stack->n_planes,
         p14dev->ctx->stack->planestride, p14dev->ctx->stack->rowstride,
         "BeforeStrokeOnFillStroke", p14dev->ctx->stack->data, p14dev->ctx->stack->deep);
     global_index++;
 #endif
 
     code = pdf14_stroke_path(dev, pgs, ppath, stroke_params, pdcolor_stroke, pcpath);
     gs_swapcolors_quick(pgs);
     if (code < 0) {
         goto cleanup;
     }
 
 #if RAW_DUMP
     /* Dump the current buffer to see what we have. */
     dump_raw_buffer(p14dev->ctx->memory,
         p14dev->ctx->stack->rect.q.y - p14dev->ctx->stack->rect.p.y,
         p14dev->ctx->stack->rowstride >> p14dev->ctx->stack->deep, p14dev->ctx->stack->n_planes,
         p14dev->ctx->stack->planestride, p14dev->ctx->stack->rowstride,
         "AfterStrokeOnFillStroke", p14dev->ctx->stack->data, p14dev->ctx->stack->deep);
     global_index++;
 #endif
     if (group_needed)
-        pdf14_fill_stroke_poststroke(dev, pgs, fill_alpha, save_op_state);
+        code = pdf14_fill_stroke_poststroke(dev, pgs, fill_alpha, save_op_state);
 
 cleanup:
     if (group_needed) {
+        int code1;
         pgs->device = dev; /* This is needed due to the gs_trans calls */
-        code = pdf14_fill_stroke_cleanup(dev, pgs, fill_alpha, stroke_alpha, blend_mode,
+        code1 = pdf14_fill_stroke_cleanup(dev, pgs, fill_alpha, stroke_alpha, blend_mode,
             save_op_state);
+        if (code1 < 0)
+            code = code1;
         pgs->device = curr_pgs_dev;
     }
     return code;
 }
@@ -8660,146 +8669,147 @@ static int
 pdf14_dev_spec_op(gx_device *pdev, int dev_spec_op,
                   void *data, int size)
 {
     pdf14_device * p14dev = (pdf14_device *)pdev;
 
     if (dev_spec_op == gxdso_supports_pattern_transparency)
         return 1;
     if (dev_spec_op == gxdso_pattern_shfill_doesnt_need_path)
         return 1;
     if (dev_spec_op == gxdso_is_pdf14_device) {
         if (data != NULL && size == sizeof(gx_device *))
             *(gx_device **)data = pdev;
         return 1;
     }
     if (dev_spec_op == gxdso_device_child) {
         pdf14_device *dev = (pdf14_device *)pdev;
         gxdso_device_child_request *d = (gxdso_device_child_request *)data;
         if (d->target == pdev) {
             d->target = dev->target;
             return 1;
         }
     }
     if (dev_spec_op == gxdso_supports_devn
      || dev_spec_op == gxdso_skip_icc_component_validation) {
         cmm_dev_profile_t *dev_profile;
         int code;
         code = dev_proc(pdev, get_profile)((gx_device*) pdev, &dev_profile);
         if (code == 0) {
             return dev_profile->supports_devn;
         } else {
             return 0;
         }
     }
     if (dev_spec_op == gxdso_pdf14_sep_device) {
         pdf14_device* dev = (pdf14_device*)pdev;
 
         if (strcmp(dev->dname, "pdf14cmykspot") == 0 ||
             strcmp(dev->dname, "pdf14clistcmykspot") == 0)
             return 1;
         return 0;
     }
     if (dev_spec_op == gxdso_is_encoding_direct)
         return 1;
 
     /* We don't want to pass on these spec_ops either, because the child might respond
      * with an inappropriate response when the PDF14 device is active. For example; the
      * JPEG passthrough will give utterly wrong results if we pass that to a device which
      * supports JPEG passthrough, because the pdf14 device needs to render the image.
      */
     if (dev_spec_op == gxdso_in_pattern_accumulator)
         return 0;
     if (dev_spec_op == gxdso_copy_color_is_fast)
         return 0;
     if(dev_spec_op == gxdso_pattern_handles_clip_path)
         return 0;
     if(dev_spec_op == gxdso_supports_hlcolor)
         return 0;
     if(dev_spec_op == gxdso_pattern_can_accum)
         return 0;
     if(dev_spec_op == gxdso_JPEG_passthrough_query)
         return 0;
     if (dev_spec_op == gxdso_overprint_active) {
         if (p14dev->pclist_device != NULL) {
             return dev_proc(p14dev->pclist_device, dev_spec_op)(p14dev->pclist_device, dev_spec_op, data, size);
         } else {
             return p14dev->overprint || p14dev->stroke_overprint;
         }
     }
 
     /* These should be coming only from the abuf device
        during fill-stroke operation. Any other use will
        result in bad things. */
     if (dev_spec_op == gxdso_abuf_optrans)
     {
         int ret = p14dev->op_state;
         overprint_abuf_state_t *state_data = (overprint_abuf_state_t *)data;
         pdf14_abuf_state_t *pdf14_abuf = (pdf14_abuf_state_t *)&state_data->storage[0];
         const gs_gstate* cpgs = state_data->pgs;
         union {
             const gs_gstate* cpgs;
             gs_gstate* pgs;
         } const_breaker;
         gs_gstate* pgs;
         int code = 0;
         int code1 = 0;
 
         /* A compile time assert to check our storage types are appropriately sized. */
         typedef char compile_time_assert[sizeof(pdf14_abuf_state_t) <= sizeof(state_data->storage) ? 1 : -1];
 
         /* I don't really like this, but there is no easy way around it. The device
            in the pgs needs to be the pdf14 device to ensure that the compositor
            actions occur with the gs_transparency calls. We have to call at that
            level (as opposed to the gx_ or pdf14_ level) to ensure that the clist
            operations are invoked. We could change the gs_trans calls to take a
            device to avoid this dance but that changes the device procs. */
         gx_device *curr_dev;
 
         const_breaker.cpgs = cpgs;
         pgs = const_breaker.pgs;
         curr_dev = pgs->device;
         pgs->device = pdev;
 
         switch (state_data->op_trans) {
 
             case OP_FS_TRANS_PREFILL:
                 pdf14_abuf->orig_state = p14dev->op_state;
                 pdf14_abuf->blend_mode = cpgs->blend_mode;
                 pdf14_abuf->fill_alpha = cpgs->fillconstantalpha;
                 pdf14_abuf->stroke_alpha = cpgs->strokeconstantalpha;
                 pdf14_abuf->pgs = pgs; /* ref count? only used for this back and forth so ok */
                 if (pdf14_abuf->fill_alpha == 1.0 && pdf14_abuf->stroke_alpha == 1.0 &&
                     pdf14_abuf->blend_mode == BLEND_MODE_Normal)
                     pdf14_abuf->group_needed = false;
                 else
                     pdf14_abuf->group_needed = true;
 
                 if (pdf14_abuf->group_needed) {
                     code = pdf14_fill_stroke_prefill(pdev, pgs, state_data->ppath,
                         state_data->pcpath, pdf14_abuf->fill_alpha,
                         pdf14_abuf->stroke_alpha, pdf14_abuf->blend_mode,
                         &(pdf14_abuf->op_ca_eq_CA), &(pdf14_abuf->path_empty),
                         state_data->alpha_buf_path_scale);
                     if (code < 0)
                         goto cleanup;
                 }
-                gs_update_trans_marking_params(pgs);
+                code = gs_update_trans_marking_params(pgs);
                 break;
 
             case OP_FS_TRANS_PRESTROKE:
                 if (pdf14_abuf->group_needed) {
                     pdf14_fill_stroke_prestroke(pdev, pdf14_abuf->pgs, pdf14_abuf->stroke_alpha,
                                                 pdf14_abuf->blend_mode, pdf14_abuf->op_ca_eq_CA);
                 }
-                gs_update_trans_marking_params(pgs);
+                code = gs_update_trans_marking_params(pgs);
                 break;
 
             case OP_FS_TRANS_POSTSTROKE:
                 if (pdf14_abuf->group_needed) {
-                    pdf14_fill_stroke_poststroke(pdev, pdf14_abuf->pgs, pdf14_abuf->fill_alpha,
-                                                 pdf14_abuf->op_ca_eq_CA);
+                    code = pdf14_fill_stroke_poststroke(pdev, pdf14_abuf->pgs, pdf14_abuf->fill_alpha,
+                                                        pdf14_abuf->op_ca_eq_CA);
                 }
-                gs_update_trans_marking_params(pgs);
+                if (code >= 0)
+                    code = gs_update_trans_marking_params(pgs);
 
                 /* fallthrough */
 
             case OP_FS_TRANS_CLEANUP:
diff --git a/base/gspaint.c b/base/gspaint.c
index 02f7a9bfa..30d78e0c6 100644
--- a/base/gspaint.c
+++ b/base/gspaint.c
@@ -203,62 +203,64 @@ static int
 alpha_buffer_init(gs_gstate * pgs, fixed extra_x, fixed extra_y, int alpha_bits,
                   bool devn)
 {
     gx_device *dev = gs_currentdevice_inline(pgs);
     int log2_alpha_bits = ilog2(alpha_bits);
     gs_fixed_rect bbox;
     gs_int_rect ibox;
     uint width, raster, band_space;
     uint height, height2;
     gs_log2_scale_point log2_scale;
     gs_memory_t *mem;
     gx_device_memory *mdev;
 
     log2_scale.x = log2_scale.y = log2_alpha_bits;
     gx_path_bbox(pgs->path, &bbox);
     ibox.p.x = fixed2int(bbox.p.x - extra_x) - 1;
     ibox.p.y = fixed2int(bbox.p.y - extra_y) - 1;
     ibox.q.x = fixed2int_ceiling(bbox.q.x + extra_x) + 1;
     ibox.q.y = fixed2int_ceiling(bbox.q.y + extra_y) + 1;
     (void)dev_proc(dev, dev_spec_op)(dev, gxdso_restrict_bbox, &ibox, sizeof(ibox));
     if ((ibox.q.y <= ibox.p.y) || (ibox.q.x <= ibox.p.x))
         return 2;
     width = (ibox.q.x - ibox.p.x) << log2_scale.x;
     raster = bitmap_raster(width);
     band_space = raster << log2_scale.y;
     height2 = (ibox.q.y - ibox.p.y);
     height = (abuf_nominal / band_space);
     if (height == 0)
         height = 1;
     if (height > height2)
         height = height2;
     height <<= log2_scale.y;
     mem = pgs->memory;
     mdev = gs_alloc_struct(mem, gx_device_memory, &st_device_memory,
                            "alpha_buffer_init");
     if (mdev == 0)
         return 0;		/* if no room, don't buffer */
     /* We may have to update the marking parameters if we have a pdf14 device
        as our target.  Need to do while dev is still active in pgs */
     if (dev_proc(dev, dev_spec_op)(dev, gxdso_is_pdf14_device, NULL, 0) > 0) {
-        gs_update_trans_marking_params(pgs);
+        int code = gs_update_trans_marking_params(pgs);
+        if (code < 0)
+            return code;
     }
     gs_make_mem_abuf_device(mdev, mem, dev, &log2_scale,
                             alpha_bits, ibox.p.x << log2_scale.x, devn);
     mdev->width = width;
     mdev->height = height;
     mdev->bitmap_memory = mem;
     /* Set the horrible hacky flag that tells people that the width/height here
      * have been set for *our* convenience, rather than accurately depicting the
      * size of the device for callers. */
     mdev->non_strict_bounds = 1;
     if ((*dev_proc(mdev, open_device)) ((gx_device *) mdev) < 0) {
         /* No room for bits, punt. */
         gs_free_object(mem, mdev, "alpha_buffer_init");
         return 0;
     }
     gx_set_device_only(pgs, (gx_device *) mdev);
     scale_paths(pgs, log2_scale.x, log2_scale.y, true);
     return 1;
 }
 
 /* Release an alpha buffer. */
