commit b1f750c11bd75ac79fb5ca532aed468939f216f3
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Wed Dec 6 20:29:46 2017 +0300

    DngOpcodes::DeltaRowOrCol: sanitize count of 'delta' elements.
    
    While the logic seems sound, apparently no RPU sample uses
    any of these opcodes, so.
    
    Also, this might be incorrect in some edge-cases, e.g. with
    some strange pitch.

diff --git a/src/librawspeed/common/DngOpcodes.cpp b/src/librawspeed/common/DngOpcodes.cpp
index 4632bae4..e8c8c325 100644
--- a/src/librawspeed/common/DngOpcodes.cpp
+++ b/src/librawspeed/common/DngOpcodes.cpp
@@ -223,41 +223,43 @@ class DngOpcodes::PixelOpcode : public ROIOpcode {
 protected:
   explicit PixelOpcode(const RawImage& ri, ByteStream* bs)
       : ROIOpcode(ri, bs, false) {
     firstPlane = bs->getU32();
     planes = bs->getU32();
 
     if (planes == 0 || firstPlane > ri->getCpp() || planes > ri->getCpp() ||
         firstPlane + planes > ri->getCpp()) {
       ThrowRDE("Bad plane params (first %u, num %u), got planes = %u",
                firstPlane, planes, ri->getCpp());
     }
 
     rowPitch = bs->getU32();
     colPitch = bs->getU32();
 
     const iRectangle2D& ROI = getRoi();
 
     if (rowPitch < 1 || rowPitch > static_cast<uint32>(ROI.getHeight()) ||
         colPitch < 1 || colPitch > static_cast<uint32>(ROI.getWidth()))
       ThrowRDE("Invalid pitch");
   }
 
   // traverses the current ROI and applies the operation OP to each pixel,
   // i.e. each pixel value v is replaced by op(x, y, v), where x/y are the
   // coordinates of the pixel value v.
   template <typename T, typename OP> void applyOP(const RawImage& ri, OP op) {
     int cpp = ri->getCpp();
     const iRectangle2D& ROI = getRoi();
     for (auto y = ROI.getTop(); y < ROI.getBottom(); y += rowPitch) {
       auto* src = reinterpret_cast<T*>(ri->getData(0, y));
       // Add offset, so this is always first plane
       src += firstPlane;
+      // FIXME: is op() really supposed to recieve global image coordinates,
+      // and not [0..ROI.getHeight()-1][0..ROI.getWidth()-1] ?
       for (auto x = ROI.getLeft(); x < ROI.getRight(); x += colPitch) {
         for (auto p = 0U; p < planes; ++p)
           src[x * cpp + p] = op(x, y, src[x * cpp + p]);
       }
     }
   }
 };
 
 // ****************************************************************************
@@ -364,24 +366,35 @@ public:
 protected:
   const float f2iScale;
   vector<float> deltaF;
   vector<int> deltaI;
 
   // only meaningful for ushort16 images!
   virtual bool valueIsOk(float value) = 0;
 
   DeltaRowOrCol(const RawImage& ri, ByteStream* bs, float f2iScale_)
       : DeltaRowOrColBase(ri, bs), f2iScale(f2iScale_) {
     const auto deltaF_count = bs->getU32();
     bs->check(deltaF_count, 4);
 
+    // See PixelOpcode::applyOP(). We will access deltaF/deltaI up to (excl.)
+    // either ROI.getRight() or ROI.getBottom() index. Thus, we need to have
+    // either ROI.getRight() or ROI.getBottom() elements in there.
+    // FIXME: i guess not strictly true with pitch != 1.
+    const auto expectedSize =
+        S::select(getRoi().getRight(), getRoi().getBottom());
+    if (expectedSize != deltaF_count) {
+      ThrowRDE("Got unexpected number of elements (%u), expected %u.",
+               expectedSize, deltaF_count);
+    }
+
     deltaF.reserve(deltaF_count);
     std::generate_n(std::back_inserter(deltaF), deltaF_count, [&bs]() {
       const auto F = bs->get<float>();
       if (!std::isfinite(F))
         ThrowRDE("Got bad float %f.", F);
       return F;
     });
   }
 };
 
 // ****************************************************************************
