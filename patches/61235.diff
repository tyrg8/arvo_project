commit 3fa10e8cc197390392f5f5f6e0c9e2fcd5590530
Author: itchyny <itchyny@cybozu.co.jp>
Date:   Sun Aug 13 12:06:16 2023 +0900

    Fix crash on numeric comparison again (ref #2825)
    
    The decNumber library subtracts the exponents of two numbers,
    we make sure to limit the number of digits not to make it overflows.
    Since the maximum adjusted exponent is `emax` and the minimum is
    `emin - digits + 1`, we follow `emax - (emin - digits + 1) <= INT32_MAX`.

diff --git a/src/jv.c b/src/jv.c
index ddc2948..b763272 100644
--- a/src/jv.c
+++ b/src/jv.c
@@ -519,28 +519,28 @@ void jv_tsd_dec_ctx_init() {
 static decContext* tsd_dec_ctx_get(pthread_key_t *key) {
   pthread_once(&dec_ctx_once, jv_tsd_dec_ctx_init); // cannot fail
   decContext *ctx = (decContext*)pthread_getspecific(*key);
   if (ctx) {
     return ctx;
   }
 
   ctx = malloc(sizeof(decContext));
   if (ctx) {
     if (key == &dec_ctx_key)
     {
       decContextDefault(ctx, DEC_INIT_BASE);
-      ctx->digits = DEC_MAX_DIGITS - 1;
+      ctx->digits = INT32_MAX - (ctx->emax - ctx->emin - 1);
       ctx->traps = 0; /*no errors*/
     }
     else if (key == &dec_ctx_dbl_key)
     {
       decContextDefault(ctx, DEC_INIT_DECIMAL64);
       // just to make sure we got this right
       assert(ctx->digits <= DEC_NUBMER_DOUBLE_PRECISION);
     }
     if (pthread_setspecific(*key, ctx) != 0) {
       fprintf(stderr, "error: cannot store thread specific data");
       abort();
     }
   }
   return ctx;
 }
diff --git a/tests/jq.test b/tests/jq.test
index eff15e0..de38e4d 100644
--- a/tests/jq.test
+++ b/tests/jq.test
@@ -555,9 +555,25 @@ null
 1 / 1e-17
 null
 1e+17
 
-5E500000000>5E-5000000000
+9E999999999, 9999999999E999999990, 1E-999999999, 0.000000001E-999999990
 null
+9E+999999999
+9.999999999E+999999999
+1E-999999999
+1E-999999999
+
+5E500000000 > 5E-5000000000, 10000E500000000 > 10000E-5000000000
+null
+true
+true
+
+# #2825
+(1e999999999, 10e999999999) > (1e-1147483648, 0.1e-1147483648)
+null
+true
+true
+true
 true
 
 25 % 7
