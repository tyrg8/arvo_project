commit 75e6498d9a8b600ab7f00b3d279f1054dd72feec
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Tue Mar 14 12:41:46 2023 -0600

    Don't use M_PI
    
    Fixes https://github.com/harfbuzz/harfbuzz/issues/4166
    
    Happy Pi Day!

diff --git a/src/OT/Color/COLR/COLR.hh b/src/OT/Color/COLR/COLR.hh
index 31be6585d..3c774e8e6 100644
--- a/src/OT/Color/COLR/COLR.hh
+++ b/src/OT/Color/COLR/COLR.hh
@@ -718,47 +718,47 @@ template <template<typename> class Var>
 struct PaintSweepGradient
 {
   void closurev1 (hb_colrv1_closure_context_t* c) const
   { (this+colorLine).closurev1 (c); }
 
   bool subset (hb_subset_context_t *c) const
   {
     TRACE_SUBSET (this);
     auto *out = c->serializer->embed (this);
     if (unlikely (!out)) return_trace (false);
 
     return_trace (out->colorLine.serialize_subset (c, colorLine, this));
   }
 
   bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     return_trace (c->check_struct (this) && colorLine.sanitize (c, this));
   }
 
   void paint_glyph (hb_paint_context_t *c, uint32_t varIdxBase) const
   {
     hb_color_line_t cl = {
       (void *) &(this+colorLine),
       (this+colorLine).static_get_color_stops, c,
       (this+colorLine).static_get_extend, nullptr
     };
 
     c->funcs->sweep_gradient (c->data, &cl,
 			      centerX + c->instancer (varIdxBase, 0),
 			      centerY + c->instancer (varIdxBase, 1),
-                              (startAngle.to_float (c->instancer (varIdxBase, 2)) + 1) * (float) M_PI,
-                              (endAngle.to_float   (c->instancer (varIdxBase, 3)) + 1) * (float) M_PI);
+                              (startAngle.to_float (c->instancer (varIdxBase, 2)) + 1) * HB_PI,
+                              (endAngle.to_float   (c->instancer (varIdxBase, 3)) + 1) * HB_PI);
   }
 
   HBUINT8			format; /* format = 8(noVar) or 9 (Var) */
   Offset24To<ColorLine<Var>>	colorLine; /* Offset (from beginning of PaintSweepGradient
                                             * table) to ColorLine subtable. */
   FWORD			centerX;
   FWORD			centerY;
   F2DOT14		startAngle;
   F2DOT14		endAngle;
   public:
   DEFINE_SIZE_STATIC (4 + 2 * FWORD::static_size + 2 * F2DOT14::static_size);
 };
 
 // Paint a non-COLR glyph, filled as indicated by paint.
diff --git a/src/OT/glyf/VarCompositeGlyph.hh b/src/OT/glyf/VarCompositeGlyph.hh
index f1d48be2b..f543eff2b 100644
--- a/src/OT/glyf/VarCompositeGlyph.hh
+++ b/src/OT/glyf/VarCompositeGlyph.hh
@@ -13,321 +13,321 @@ namespace glyf_impl {
 struct VarCompositeGlyphRecord
 {
   protected:
   enum var_composite_glyph_flag_t
   {
     USE_MY_METRICS		= 0x0001,
     AXIS_INDICES_ARE_SHORT	= 0x0002,
     UNIFORM_SCALE		= 0x0004,
     HAVE_TRANSLATE_X		= 0x0008,
     HAVE_TRANSLATE_Y		= 0x0010,
     HAVE_ROTATION		= 0x0020,
     HAVE_SCALE_X		= 0x0040,
     HAVE_SCALE_Y		= 0x0080,
     HAVE_SKEW_X			= 0x0100,
     HAVE_SKEW_Y			= 0x0200,
     HAVE_TCENTER_X		= 0x0400,
     HAVE_TCENTER_Y		= 0x0800,
     GID_IS_24BIT		= 0x1000,
     AXES_HAVE_VARIATION		= 0x2000,
     RESET_UNSPECIFIED_AXES	= 0x4000,
   };
 
   public:
 
   unsigned int get_size () const
   {
     unsigned int size = min_size;
 
     unsigned axis_width = (flags & AXIS_INDICES_ARE_SHORT) ? 4 : 3;
     size += numAxes * axis_width;
 
     // gid
     size += 2;
     if (flags & GID_IS_24BIT)		size += 1;
 
     if (flags & HAVE_TRANSLATE_X)	size += 2;
     if (flags & HAVE_TRANSLATE_Y)	size += 2;
     if (flags & HAVE_ROTATION)		size += 2;
     if (flags & HAVE_SCALE_X)		size += 2;
     if (flags & HAVE_SCALE_Y)		size += 2;
     if (flags & HAVE_SKEW_X)		size += 2;
     if (flags & HAVE_SKEW_Y)		size += 2;
     if (flags & HAVE_TCENTER_X)		size += 2;
     if (flags & HAVE_TCENTER_Y)		size += 2;
 
     return size;
   }
 
   bool has_more () const { return true; }
 
   bool is_use_my_metrics () const { return flags & USE_MY_METRICS; }
   bool is_reset_unspecified_axes () const { return flags & RESET_UNSPECIFIED_AXES; }
 
   hb_codepoint_t get_gid () const
   {
     if (flags & GID_IS_24BIT)
       return StructAfter<const HBGlyphID24> (numAxes);
     else
       return StructAfter<const HBGlyphID16> (numAxes);
   }
 
   unsigned get_numAxes () const
   {
     return numAxes;
   }
 
   unsigned get_num_points () const
   {
     unsigned num = 0;
     if (flags & AXES_HAVE_VARIATION)			num += numAxes;
     if (flags & (HAVE_TRANSLATE_X | HAVE_TRANSLATE_Y))	num++;
     if (flags & HAVE_ROTATION)				num++;
     if (flags & (HAVE_SCALE_X | HAVE_SCALE_Y))		num++;
     if (flags & (HAVE_SKEW_X | HAVE_SKEW_Y))		num++;
     if (flags & (HAVE_TCENTER_X | HAVE_TCENTER_Y))	num++;
     return num;
   }
 
   void transform_points (hb_array_t<contour_point_t> record_points,
 			 contour_point_vector_t &points) const
   {
     float matrix[4];
     contour_point_t trans;
 
     get_transformation_from_points (record_points, matrix, trans);
 
     points.transform (matrix);
     points.translate (trans);
   }
 
   static inline void transform (float (&matrix)[4], contour_point_t &trans,
 				float (other)[6])
   {
     // https://github.com/fonttools/fonttools/blob/f66ee05f71c8b57b5f519ee975e95edcd1466e14/Lib/fontTools/misc/transform.py#L268
     float xx1 = other[0];
     float xy1 = other[1];
     float yx1 = other[2];
     float yy1 = other[3];
     float dx1 = other[4];
     float dy1 = other[5];
     float xx2 = matrix[0];
     float xy2 = matrix[1];
     float yx2 = matrix[2];
     float yy2 = matrix[3];
     float dx2 = trans.x;
     float dy2 = trans.y;
 
     matrix[0] = xx1*xx2 + xy1*yx2;
     matrix[1] = xx1*xy2 + xy1*yy2;
     matrix[2] = yx1*xx2 + yy1*yx2;
     matrix[3] = yx1*xy2 + yy1*yy2;
     trans.x = xx2*dx1 + yx2*dy1 + dx2;
     trans.y = xy2*dx1 + yy2*dy1 + dy2;
   }
 
   static void translate (float (&matrix)[4], contour_point_t &trans,
 			 float translateX, float translateY)
   {
     // https://github.com/fonttools/fonttools/blob/f66ee05f71c8b57b5f519ee975e95edcd1466e14/Lib/fontTools/misc/transform.py#L213
     float other[6] = {1.f, 0.f, 0.f, 1.f, translateX, translateY};
     transform (matrix, trans, other);
   }
 
   static void scale (float (&matrix)[4], contour_point_t &trans,
 		     float scaleX, float scaleY)
   {
     // https://github.com/fonttools/fonttools/blob/f66ee05f71c8b57b5f519ee975e95edcd1466e14/Lib/fontTools/misc/transform.py#L224
     float other[6] = {scaleX, 0.f, 0.f, scaleY, 0.f, 0.f};
     transform (matrix, trans, other);
   }
 
   static void rotate (float (&matrix)[4], contour_point_t &trans,
 		      float rotation)
   {
     // https://github.com/fonttools/fonttools/blob/f66ee05f71c8b57b5f519ee975e95edcd1466e14/Lib/fontTools/misc/transform.py#L240
-    rotation = rotation * float (M_PI);
+    rotation = rotation * HB_PI;
     float c = cosf (rotation);
     float s = sinf (rotation);
     float other[6] = {c, s, -s, c, 0.f, 0.f};
     transform (matrix, trans, other);
   }
 
   static void skew (float (&matrix)[4], contour_point_t &trans,
 		    float skewX, float skewY)
   {
     // https://github.com/fonttools/fonttools/blob/f66ee05f71c8b57b5f519ee975e95edcd1466e14/Lib/fontTools/misc/transform.py#L255
-    skewX = skewX * float (M_PI);
-    skewY = skewY * float (M_PI);
+    skewX = skewX * HB_PI;
+    skewY = skewY * HB_PI;
     float other[6] = {1.f, tanf (skewY), tanf (skewX), 1.f, 0.f, 0.f};
     transform (matrix, trans, other);
   }
 
   bool get_points (contour_point_vector_t &points) const
   {
     float translateX = 0.f;
     float translateY = 0.f;
     float rotation = 0.f;
     float scaleX = 1.f * (1 << 10);
     float scaleY = 1.f * (1 << 10);
     float skewX = 0.f;
     float skewY = 0.f;
     float tCenterX = 0.f;
     float tCenterY = 0.f;
 
     if (unlikely (!points.resize (points.length + get_num_points ()))) return false;
 
     unsigned axis_width = (flags & AXIS_INDICES_ARE_SHORT) ? 2 : 1;
     unsigned axes_size = numAxes * axis_width;
 
     const F2DOT14 *q = (const F2DOT14 *) (axes_size +
 					  (flags & GID_IS_24BIT ? 3 : 2) +
 					  &StructAfter<const HBUINT8> (numAxes));
 
     hb_array_t<contour_point_t> rec_points = points.as_array ().sub_array (points.length - get_num_points ());
 
     unsigned count = numAxes;
     if (flags & AXES_HAVE_VARIATION)
     {
       for (unsigned i = 0; i < count; i++)
 	rec_points[i].x = q++->to_int ();
       rec_points += count;
     }
     else
       q += count;
 
     const HBUINT16 *p = (const HBUINT16 *) q;
 
     if (flags & HAVE_TRANSLATE_X)	translateX = * (const FWORD *) p++;
     if (flags & HAVE_TRANSLATE_Y)	translateY = * (const FWORD *) p++;
     if (flags & HAVE_ROTATION)		rotation = ((const F4DOT12 *) p++)->to_int ();
     if (flags & HAVE_SCALE_X)		scaleX = ((const F6DOT10 *) p++)->to_int ();
     if (flags & HAVE_SCALE_Y)		scaleY = ((const F6DOT10 *) p++)->to_int ();
     if (flags & HAVE_SKEW_X)		skewX = ((const F4DOT12 *) p++)->to_int ();
     if (flags & HAVE_SKEW_Y)		skewY = ((const F4DOT12 *) p++)->to_int ();
     if (flags & HAVE_TCENTER_X)		tCenterX = * (const FWORD *) p++;
     if (flags & HAVE_TCENTER_Y)		tCenterY = * (const FWORD *) p++;
 
     if ((flags & UNIFORM_SCALE) && !(flags & HAVE_SCALE_Y))
       scaleY = scaleX;
 
     if (flags & (HAVE_TRANSLATE_X | HAVE_TRANSLATE_Y))
     {
       rec_points[0].x = translateX;
       rec_points[0].y = translateY;
       rec_points++;
     }
     if (flags & HAVE_ROTATION)
     {
       rec_points[0].x = rotation;
       rec_points++;
     }
     if (flags & (HAVE_SCALE_X | HAVE_SCALE_Y))
     {
       rec_points[0].x = scaleX;
       rec_points[0].y = scaleY;
       rec_points++;
     }
     if (flags & (HAVE_SKEW_X | HAVE_SKEW_Y))
     {
       rec_points[0].x = skewX;
       rec_points[0].y = skewY;
       rec_points++;
     }
     if (flags & (HAVE_TCENTER_X | HAVE_TCENTER_Y))
     {
       rec_points[0].x = tCenterX;
       rec_points[0].y = tCenterY;
       rec_points++;
     }
     assert (!rec_points);
 
     return true;
   }
 
   void get_transformation_from_points (hb_array_t<contour_point_t> rec_points,
 				       float (&matrix)[4], contour_point_t &trans) const
   {
     if (flags & AXES_HAVE_VARIATION)
       rec_points += numAxes;
 
     matrix[0] = matrix[3] = 1.f;
     matrix[1] = matrix[2] = 0.f;
     trans.init (0.f, 0.f);
 
     float translateX = 0.f;
     float translateY = 0.f;
     float rotation = 0.f;
     float scaleX = 1.f;
     float scaleY = 1.f;
     float skewX = 0.f;
     float skewY = 0.f;
     float tCenterX = 0.f;
     float tCenterY = 0.f;
 
     if (flags & (HAVE_TRANSLATE_X | HAVE_TRANSLATE_Y))
     {
       translateX = rec_points[0].x;
       translateY = rec_points[0].y;
       rec_points++;
     }
     if (flags & HAVE_ROTATION)
     {
       rotation = rec_points[0].x / (1 << 12);
       rec_points++;
     }
     if (flags & (HAVE_SCALE_X | HAVE_SCALE_Y))
     {
       scaleX = rec_points[0].x / (1 << 10);
       scaleY = rec_points[0].y / (1 << 10);
       rec_points++;
     }
     if (flags & (HAVE_SKEW_X | HAVE_SKEW_Y))
     {
       skewX = rec_points[0].x / (1 << 12);
       skewY = rec_points[0].y / (1 << 12);
       rec_points++;
     }
     if (flags & (HAVE_TCENTER_X | HAVE_TCENTER_Y))
     {
       tCenterX = rec_points[0].x;
       tCenterY = rec_points[0].y;
       rec_points++;
     }
     assert (!rec_points);
 
     translate (matrix, trans, translateX + tCenterX, translateY + tCenterY);
     rotate (matrix, trans, rotation);
     scale (matrix, trans, scaleX, scaleY);
     skew (matrix, trans, -skewX, skewY);
     translate (matrix, trans, -tCenterX, -tCenterY);
   }
 
   void set_variations (coord_setter_t &setter,
 		       hb_array_t<contour_point_t> rec_points) const
   {
     bool have_variations = flags & AXES_HAVE_VARIATION;
     unsigned axis_width = (flags & AXIS_INDICES_ARE_SHORT) ? 2 : 1;
 
     const HBUINT8  *p = (const HBUINT8 *)  (((HBUINT8 *) &numAxes) + numAxes.static_size + (flags & GID_IS_24BIT ? 3 : 2));
     const HBUINT16 *q = (const HBUINT16 *) (((HBUINT8 *) &numAxes) + numAxes.static_size + (flags & GID_IS_24BIT ? 3 : 2));
 
     const F2DOT14 *a = (const F2DOT14 *) ((HBUINT8 *) (axis_width == 1 ? (p + numAxes) : (HBUINT8 *) (q + numAxes)));
 
     unsigned count = numAxes;
     for (unsigned i = 0; i < count; i++)
     {
       unsigned axis_index = axis_width == 1 ? (unsigned) *p++ : (unsigned) *q++;
 
       signed v = have_variations ? rec_points[i].x : a++->to_int ();
 
       v = hb_clamp (v, -(1<<14), (1<<14));
       setter[axis_index] = v;
     }
   }
 
   protected:
   HBUINT16	flags;
   HBUINT8	numAxes;
   public:
   DEFINE_SIZE_MIN (3);
 };
diff --git a/src/hb-cairo-utils.cc b/src/hb-cairo-utils.cc
index d841994d2..0f94d8169 100644
--- a/src/hb-cairo-utils.cc
+++ b/src/hb-cairo-utils.cc
@@ -1,48 +1,46 @@
 /*
  * Copyright © 2022  Red Hat, Inc
  * Copyright © 2021, 2022  Black Foundry
  *
  *  This is part of HarfBuzz, a text shaping library.
  *
  * Permission is hereby granted, without written agreement and without
  * license or royalty fees, to use, copy, modify, and distribute this
  * software and its documentation for any purpose, provided that the
  * above copyright notice and the following two paragraphs appear in
  * all copies of this software.
  *
  * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR
  * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
  * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN
  * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
  * DAMAGE.
  *
  * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,
  * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
  * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
  * ON AN "AS IS" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO
  * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
  *
  * Google Author(s): Matthias Clasen
  */
 
 #include "hb.hh"
 
 #ifdef HAVE_CAIRO
 
 #include "hb-cairo-utils.hh"
 
 #include <cairo.h>
 
 /* Some routines in this file were ported from BlackRenderer by Black Foundry.
  * Used by permission to relicense to HarfBuzz license.
  *
  * https://github.com/BlackFoundryCom/black-renderer
  */
 
 #define PREALLOCATED_COLOR_STOPS 16
 
-#define _2_M_PIf (2.f * float (M_PI))
-
 typedef struct {
   float r, g, b, a;
 } hb_cairo_color_t;
@@ -495,37 +493,37 @@ static void
 _hb_cairo_add_patch (cairo_pattern_t *pattern, hb_cairo_point_t *center, hb_cairo_patch_t *p)
 {
   cairo_mesh_pattern_begin_patch (pattern);
   cairo_mesh_pattern_move_to (pattern, (double) center->x, (double) center->y);
   cairo_mesh_pattern_line_to (pattern, (double) p->p0.x, (double) p->p0.y);
   cairo_mesh_pattern_curve_to (pattern,
                                (double) p->c0.x, (double) p->c0.y,
                                (double) p->c1.x, (double) p->c1.y,
                                (double) p->p1.x, (double) p->p1.y);
   cairo_mesh_pattern_line_to (pattern, (double) center->x, (double) center->y);
   cairo_mesh_pattern_set_corner_color_rgba (pattern, 0,
                                             (double) p->color0.r,
                                             (double) p->color0.g,
                                             (double) p->color0.b,
                                             (double) p->color0.a);
   cairo_mesh_pattern_set_corner_color_rgba (pattern, 1,
                                             (double) p->color0.r,
                                             (double) p->color0.g,
                                             (double) p->color0.b,
                                             (double) p->color0.a);
   cairo_mesh_pattern_set_corner_color_rgba (pattern, 2,
                                             (double) p->color1.r,
                                             (double) p->color1.g,
                                             (double) p->color1.b,
                                             (double) p->color1.a);
   cairo_mesh_pattern_set_corner_color_rgba (pattern, 3,
                                             (double) p->color1.r,
                                             (double) p->color1.g,
                                             (double) p->color1.b,
                                             (double) p->color1.a);
   cairo_mesh_pattern_end_patch (pattern);
 }
 
-#define MAX_ANGLE ((float) M_PI / 8.f)
+#define MAX_ANGLE (HB_PI / 8.f)
 
 static void
 _hb_cairo_add_sweep_gradient_patches1 (float cx, float cy, float radius,
@@ -580,245 +578,245 @@ static void
 _hb_cairo_add_sweep_gradient_patches (hb_color_stop_t *stops,
 				      unsigned int n_stops,
 				      cairo_extend_t extend,
 				      float cx, float cy,
 				      float radius,
 				      float start_angle,
 				      float end_angle,
 				      cairo_pattern_t *pattern)
 {
   float angles_[PREALLOCATED_COLOR_STOPS];
   float *angles = angles_;
   hb_cairo_color_t colors_[PREALLOCATED_COLOR_STOPS];
   hb_cairo_color_t *colors = colors_;
   hb_cairo_color_t color0, color1;
 
   if (start_angle == end_angle)
   {
     if (extend == CAIRO_EXTEND_PAD)
     {
       hb_cairo_color_t c;
       if (start_angle > 0)
       {
 	c.r = hb_color_get_red (stops[0].color) / 255.;
 	c.g = hb_color_get_green (stops[0].color) / 255.;
 	c.b = hb_color_get_blue (stops[0].color) / 255.;
 	c.a = hb_color_get_alpha (stops[0].color) / 255.;
 	_hb_cairo_add_sweep_gradient_patches1 (cx, cy, radius,
 					       0.,          &c,
 					       start_angle, &c,
 					       pattern);
       }
-      if (end_angle < _2_M_PIf)
+      if (end_angle < HB_2_PI)
       {
 	c.r = hb_color_get_red (stops[n_stops - 1].color) / 255.;
 	c.g = hb_color_get_green (stops[n_stops - 1].color) / 255.;
 	c.b = hb_color_get_blue (stops[n_stops - 1].color) / 255.;
 	c.a = hb_color_get_alpha (stops[n_stops - 1].color) / 255.;
 	_hb_cairo_add_sweep_gradient_patches1 (cx, cy, radius,
 					       end_angle, &c,
-					       _2_M_PIf,  &c,
+					       HB_2_PI,  &c,
 					       pattern);
       }
     }
     return;
   }
 
   assert (start_angle != end_angle);
 
   /* handle directions */
   if (end_angle < start_angle)
   {
     hb_swap (start_angle, end_angle);
 
     for (unsigned i = 0; i < n_stops - 1 - i; i++)
       hb_swap (stops[i], stops[n_stops - 1 - i]);
     for (unsigned i = 0; i < n_stops; i++)
       stops[i].offset = 1 - stops[i].offset;
   }
 
   if (n_stops > PREALLOCATED_COLOR_STOPS)
   {
     angles = (float *) hb_malloc (sizeof (float) * n_stops);
     colors = (hb_cairo_color_t *) hb_malloc (sizeof (hb_cairo_color_t) * n_stops);
     if (unlikely (!angles || !colors))
     {
       hb_free (angles);
       hb_free (colors);
       return;
     }
   }
 
   for (unsigned i = 0; i < n_stops; i++)
   {
     angles[i] = start_angle + stops[i].offset * (end_angle - start_angle);
     colors[i].r = hb_color_get_red (stops[i].color) / 255.;
     colors[i].g = hb_color_get_green (stops[i].color) / 255.;
     colors[i].b = hb_color_get_blue (stops[i].color) / 255.;
     colors[i].a = hb_color_get_alpha (stops[i].color) / 255.;
   }
 
   if (extend == CAIRO_EXTEND_PAD)
   {
     unsigned pos;
 
     color0 = colors[0];
     for (pos = 0; pos < n_stops; pos++)
     {
       if (angles[pos] >= 0)
       {
 	if (pos > 0)
 	{
 	  float k = (0 - angles[pos - 1]) / (angles[pos] - angles[pos - 1]);
 	  _hb_cairo_interpolate_colors (&colors[pos-1], &colors[pos], k, &color0);
 	}
 	break;
       }
     }
     if (pos == n_stops)
     {
       /* everything is below 0 */
       color0 = colors[n_stops-1];
       _hb_cairo_add_sweep_gradient_patches1 (cx, cy, radius,
 					     0.,       &color0,
-					     _2_M_PIf, &color0,
+					     HB_2_PI, &color0,
 					     pattern);
       goto done;
     }
 
     _hb_cairo_add_sweep_gradient_patches1 (cx, cy, radius,
 					   0.,          &color0,
 					   angles[pos], &colors[pos],
 					   pattern);
 
     for (pos++; pos < n_stops; pos++)
     {
-      if (angles[pos] <= _2_M_PIf)
+      if (angles[pos] <= HB_2_PI)
       {
 	_hb_cairo_add_sweep_gradient_patches1 (cx, cy, radius,
 					       angles[pos - 1], &colors[pos-1],
 					       angles[pos],     &colors[pos],
 					       pattern);
       }
       else
       {
-	float k = (_2_M_PIf - angles[pos - 1]) / (angles[pos] - angles[pos - 1]);
+	float k = (HB_2_PI - angles[pos - 1]) / (angles[pos] - angles[pos - 1]);
 	_hb_cairo_interpolate_colors (&colors[pos - 1], &colors[pos], k, &color1);
 	_hb_cairo_add_sweep_gradient_patches1 (cx, cy, radius,
 					       angles[pos - 1], &colors[pos - 1],
-					       _2_M_PIf,        &color1,
+					       HB_2_PI,        &color1,
 					       pattern);
 	break;
       }
     }
 
     if (pos == n_stops)
     {
       /* everything is below 2*M_PI */
       color0 = colors[n_stops - 1];
       _hb_cairo_add_sweep_gradient_patches1 (cx, cy, radius,
 					     angles[n_stops - 1], &color0,
-					     _2_M_PIf,            &color0,
+					     HB_2_PI,            &color0,
 					     pattern);
       goto done;
     }
   }
   else
   {
     int k;
     float span;
 
     span = angles[n_stops - 1] - angles[0];
     k = 0;
     if (angles[0] >= 0)
     {
       float ss = angles[0];
       while (ss > 0)
       {
 	if (span > 0)
 	{
 	  ss -= span;
 	  k--;
 	}
 	else
 	{
 	  ss += span;
 	  k++;
 	}
       }
     }
     else if (angles[0] < 0)
     {
       float ee = angles[n_stops - 1];
       while (ee < 0)
       {
 	if (span > 0)
 	{
 	  ee += span;
 	  k++;
 	}
 	else
 	{
 	  ee -= span;
 	  k--;
 	}
       }
     }
 
     //assert (angles[0] + k * span <= 0 && 0 < angles[n_stops - 1] + k * span);
     span = fabs (span);
 
     for (signed l = k; l < 1000; l++)
     {
       for (unsigned i = 1; i < n_stops; i++)
       {
         float a0, a1;
 	hb_cairo_color_t *c0, *c1;
 
 	if ((l % 2 != 0) && (extend == CAIRO_EXTEND_REFLECT))
 	{
 	  a0 = angles[0] + angles[n_stops - 1] - angles[n_stops - 1 - (i-1)] + l * span;
 	  a1 = angles[0] + angles[n_stops - 1] - angles[n_stops - 1 - i] + l * span;
 	  c0 = &colors[n_stops - 1 - (i - 1)];
 	  c1 = &colors[n_stops - 1 - i];
 	}
 	else
 	{
 	  a0 = angles[i-1] + l * span;
 	  a1 = angles[i] + l * span;
 	  c0 = &colors[i-1];
 	  c1 = &colors[i];
 	}
 
 	if (a1 < 0)
 	  continue;
 	if (a0 < 0)
 	{
 	  hb_cairo_color_t color;
 	  float f = (0 - a0)/(a1 - a0);
 	  _hb_cairo_interpolate_colors (c0, c1, f, &color);
 	  _hb_cairo_add_sweep_gradient_patches1 (cx, cy, radius,
 						 0,  &color,
 						 a1, c1,
 						 pattern);
 	}
-	else if (a1 >= _2_M_PIf)
+	else if (a1 >= HB_2_PI)
 	{
 	  hb_cairo_color_t color;
-	  float f = (_2_M_PIf - a0)/(a1 - a0);
+	  float f = (HB_2_PI - a0)/(a1 - a0);
 	  _hb_cairo_interpolate_colors (c0, c1, f, &color);
 	  _hb_cairo_add_sweep_gradient_patches1 (cx, cy, radius,
 						 a0,       c0,
-						 _2_M_PIf, &color,
+						 HB_2_PI, &color,
 						 pattern);
 	  goto done;
 	}
 	else
 	{
 	  _hb_cairo_add_sweep_gradient_patches1 (cx, cy, radius,
 						 a0, c0,
 						 a1, c1,
 						 pattern);
 	}
       }
     }
   }
diff --git a/src/hb-ft-colr.hh b/src/hb-ft-colr.hh
index b3457933c..fa5712f9b 100644
--- a/src/hb-ft-colr.hh
+++ b/src/hb-ft-colr.hh
@@ -206,234 +206,234 @@ void
 _hb_ft_paint (hb_ft_paint_context_t *c,
 	      FT_OpaquePaint opaque_paint)
 {
   FT_Face ft_face = c->ft_font->ft_face;
   FT_COLR_Paint paint;
   if (!FT_Get_Paint (ft_face, opaque_paint, &paint))
     return;
 
   switch (paint.format)
   {
     case FT_COLR_PAINTFORMAT_COLR_LAYERS:
     {
       FT_OpaquePaint other_paint = {0};
       while (FT_Get_Paint_Layers (ft_face,
 				  &paint.u.colr_layers.layer_iterator,
 				  &other_paint))
       {
 	c->funcs->push_group (c->data);
 	c->recurse (other_paint);
 	c->funcs->pop_group (c->data, HB_PAINT_COMPOSITE_MODE_SRC_OVER);
       }
     }
     break;
     case FT_COLR_PAINTFORMAT_SOLID:
     {
       bool is_foreground = paint.u.solid.color.palette_index ==  0xFFFF;
       hb_color_t color;
       if (is_foreground)
 	color = HB_COLOR (hb_color_get_blue (c->foreground),
 			  hb_color_get_green (c->foreground),
 			  hb_color_get_red (c->foreground),
 			  (hb_color_get_alpha (c->foreground) * paint.u.solid.color.alpha) >> 14);
       else
       {
 	if (c->funcs->custom_palette_color (c->data, paint.u.solid.color.palette_index, &color))
 	{
 	  color = HB_COLOR (hb_color_get_blue (color),
 			    hb_color_get_green (color),
 			    hb_color_get_red (color),
 			    (hb_color_get_alpha (color) * paint.u.solid.color.alpha) >> 14);
 	}
 	else
 	{
 	  FT_Color ft_color = c->palette[paint.u.solid.color.palette_index];
 	  color = HB_COLOR (ft_color.blue,
 			    ft_color.green,
 			    ft_color.red,
 			    (ft_color.alpha * paint.u.solid.color.alpha) >> 14);
 	}
       }
       c->funcs->color (c->data, is_foreground, color);
     }
     break;
     case FT_COLR_PAINTFORMAT_LINEAR_GRADIENT:
     {
       hb_color_line_t cl = {
 	&paint.u.linear_gradient.colorline,
 	_hb_ft_color_line_get_color_stops, c,
 	_hb_ft_color_line_get_extend, nullptr
       };
 
       c->funcs->linear_gradient (c->data, &cl,
 				 paint.u.linear_gradient.p0.x / 65536.f,
 				 paint.u.linear_gradient.p0.y / 65536.f,
 				 paint.u.linear_gradient.p1.x / 65536.f,
 				 paint.u.linear_gradient.p1.y / 65536.f,
 				 paint.u.linear_gradient.p2.x / 65536.f,
 				 paint.u.linear_gradient.p2.y / 65536.f);
     }
     break;
     case FT_COLR_PAINTFORMAT_RADIAL_GRADIENT:
     {
       hb_color_line_t cl = {
 	&paint.u.linear_gradient.colorline,
 	_hb_ft_color_line_get_color_stops, c,
 	_hb_ft_color_line_get_extend, nullptr
       };
 
       c->funcs->radial_gradient (c->data, &cl,
 				 paint.u.radial_gradient.c0.x / 65536.f,
 				 paint.u.radial_gradient.c0.y / 65536.f,
 				 paint.u.radial_gradient.r0 / 65536.f,
 				 paint.u.radial_gradient.c1.x / 65536.f,
 				 paint.u.radial_gradient.c1.y / 65536.f,
 				 paint.u.radial_gradient.r1 / 65536.f);
     }
     break;
     case FT_COLR_PAINTFORMAT_SWEEP_GRADIENT:
     {
       hb_color_line_t cl = {
 	&paint.u.linear_gradient.colorline,
 	_hb_ft_color_line_get_color_stops, c,
 	_hb_ft_color_line_get_extend, nullptr
       };
 
       c->funcs->sweep_gradient (c->data, &cl,
 				paint.u.sweep_gradient.center.x / 65536.f,
 				paint.u.sweep_gradient.center.y / 65536.f,
-				(paint.u.sweep_gradient.start_angle / 65536.f + 1) * (float) M_PI,
-				(paint.u.sweep_gradient.end_angle / 65536.f + 1) * (float) M_PI);
+				(paint.u.sweep_gradient.start_angle / 65536.f + 1) * HB_PI,
+				(paint.u.sweep_gradient.end_angle / 65536.f + 1) * HB_PI);
     }
     break;
     case FT_COLR_PAINTFORMAT_GLYPH:
     {
       c->funcs->push_inverse_root_transform (c->data, c->font);
       c->ft_font->lock.unlock ();
       c->funcs->push_clip_glyph (c->data, paint.u.glyph.glyphID, c->font);
       c->ft_font->lock.lock ();
       c->funcs->push_root_transform (c->data, c->font);
       c->recurse (paint.u.glyph.paint);
       c->funcs->pop_transform (c->data);
       c->funcs->pop_clip (c->data);
       c->funcs->pop_transform (c->data);
     }
     break;
     case FT_COLR_PAINTFORMAT_COLR_GLYPH:
     {
       FT_OpaquePaint other_paint = {0};
       if (FT_Get_Color_Glyph_Paint (ft_face, paint.u.colr_glyph.glyphID,
 				    FT_COLOR_NO_ROOT_TRANSFORM,
 				    &other_paint))
       {
         bool has_clip_box;
         FT_ClipBox clip_box;
         has_clip_box = FT_Get_Color_Glyph_ClipBox (ft_face, paint.u.colr_glyph.glyphID, &clip_box);
 
         if (has_clip_box)
 	{
 	  /* The FreeType ClipBox is in scaled coordinates, whereas we need
 	   * unscaled clipbox here. Oh well...
 	   */
 
 	  float upem = c->font->face->get_upem ();
 	  float xscale = upem / (c->font->x_scale ? c->font->x_scale : upem);
 	  float yscale = upem / (c->font->y_scale ? c->font->y_scale : upem);
 
           c->funcs->push_clip_rectangle (c->data,
 					 clip_box.bottom_left.x * xscale,
 					 clip_box.bottom_left.y * yscale,
 					 clip_box.top_right.x * xscale,
 					 clip_box.top_right.y * yscale);
 	}
 
 	c->recurse (other_paint);
 
         if (has_clip_box)
           c->funcs->pop_clip (c->data);
       }
     }
     break;
     case FT_COLR_PAINTFORMAT_TRANSFORM:
     {
       c->funcs->push_transform (c->data,
 				paint.u.transform.affine.xx / 65536.f,
 				paint.u.transform.affine.yx / 65536.f,
 				paint.u.transform.affine.xy / 65536.f,
 				paint.u.transform.affine.yy / 65536.f,
 				paint.u.transform.affine.dx / 65536.f,
 				paint.u.transform.affine.dy / 65536.f);
       c->recurse (paint.u.transform.paint);
       c->funcs->pop_transform (c->data);
     }
     break;
     case FT_COLR_PAINTFORMAT_TRANSLATE:
     {
       float dx = paint.u.translate.dx / 65536.f;
       float dy = paint.u.translate.dy / 65536.f;
 
       bool p1 = c->funcs->push_translate (c->data, dx, dy);
       c->recurse (paint.u.translate.paint);
       if (p1) c->funcs->pop_transform (c->data);
     }
     break;
     case FT_COLR_PAINTFORMAT_SCALE:
     {
       float dx = paint.u.scale.center_x / 65536.f;
       float dy = paint.u.scale.center_y / 65536.f;
       float sx = paint.u.scale.scale_x / 65536.f;
       float sy = paint.u.scale.scale_y / 65536.f;
 
       bool p1 = c->funcs->push_translate (c->data, +dx, +dy);
       bool p2 = c->funcs->push_scale (c->data, sx, sy);
       bool p3 = c->funcs->push_translate (c->data, -dx, -dy);
       c->recurse (paint.u.scale.paint);
       if (p3) c->funcs->pop_transform (c->data);
       if (p2) c->funcs->pop_transform (c->data);
       if (p1) c->funcs->pop_transform (c->data);
     }
     break;
     case FT_COLR_PAINTFORMAT_ROTATE:
     {
       float dx = paint.u.rotate.center_x / 65536.f;
       float dy = paint.u.rotate.center_y / 65536.f;
       float a = paint.u.rotate.angle / 65536.f;
 
       bool p1 = c->funcs->push_translate (c->data, +dx, +dy);
       bool p2 = c->funcs->push_rotate (c->data, a);
       bool p3 = c->funcs->push_translate (c->data, -dx, -dy);
       c->recurse (paint.u.rotate.paint);
       if (p3) c->funcs->pop_transform (c->data);
       if (p2) c->funcs->pop_transform (c->data);
       if (p1) c->funcs->pop_transform (c->data);
     }
     break;
     case FT_COLR_PAINTFORMAT_SKEW:
     {
       float dx = paint.u.skew.center_x / 65536.f;
       float dy = paint.u.skew.center_y / 65536.f;
       float sx = paint.u.skew.x_skew_angle / 65536.f;
       float sy = paint.u.skew.y_skew_angle / 65536.f;
 
       bool p1 = c->funcs->push_translate (c->data, +dx, +dy);
       bool p2 = c->funcs->push_skew (c->data, sx, sy);
       bool p3 = c->funcs->push_translate (c->data, -dx, -dy);
       c->recurse (paint.u.skew.paint);
       if (p3) c->funcs->pop_transform (c->data);
       if (p2) c->funcs->pop_transform (c->data);
       if (p1) c->funcs->pop_transform (c->data);
     }
     break;
     case FT_COLR_PAINTFORMAT_COMPOSITE:
     {
       c->recurse (paint.u.composite.backdrop_paint);
       c->funcs->push_group (c->data);
       c->recurse (paint.u.composite.source_paint);
       c->funcs->pop_group (c->data, _hb_ft_paint_composite_mode (paint.u.composite.composite_mode));
     }
     break;
 
     case FT_COLR_PAINT_FORMAT_MAX: break;
     default: HB_FALLTHROUGH;
     case FT_COLR_PAINTFORMAT_UNSUPPORTED: break;
   }
 }
diff --git a/src/hb-paint.hh b/src/hb-paint.hh
index f7b71aa19..d291a4b97 100644
--- a/src/hb-paint.hh
+++ b/src/hb-paint.hh
@@ -48,177 +48,177 @@
 struct hb_paint_funcs_t
 {
   hb_object_header_t header;
 
   struct {
 #define HB_PAINT_FUNC_IMPLEMENT(name) hb_paint_##name##_func_t name;
     HB_PAINT_FUNCS_IMPLEMENT_CALLBACKS
 #undef HB_PAINT_FUNC_IMPLEMENT
   } func;
 
   struct {
 #define HB_PAINT_FUNC_IMPLEMENT(name) void *name;
     HB_PAINT_FUNCS_IMPLEMENT_CALLBACKS
 #undef HB_PAINT_FUNC_IMPLEMENT
   } *user_data;
 
   struct {
 #define HB_PAINT_FUNC_IMPLEMENT(name) hb_destroy_func_t name;
     HB_PAINT_FUNCS_IMPLEMENT_CALLBACKS
 #undef HB_PAINT_FUNC_IMPLEMENT
   } *destroy;
 
   void push_transform (void *paint_data,
                        float xx, float yx,
                        float xy, float yy,
                        float dx, float dy)
   { func.push_transform (this, paint_data,
                          xx, yx, xy, yy, dx, dy,
                          !user_data ? nullptr : user_data->push_transform); }
   void pop_transform (void *paint_data)
   { func.pop_transform (this, paint_data,
                         !user_data ? nullptr : user_data->pop_transform); }
   void push_clip_glyph (void *paint_data,
                         hb_codepoint_t glyph,
                         hb_font_t *font)
   { func.push_clip_glyph (this, paint_data,
                           glyph,
                           font,
                           !user_data ? nullptr : user_data->push_clip_glyph); }
   void push_clip_rectangle (void *paint_data,
                            float xmin, float ymin, float xmax, float ymax)
   { func.push_clip_rectangle (this, paint_data,
                               xmin, ymin, xmax, ymax,
                               !user_data ? nullptr : user_data->push_clip_rectangle); }
   void pop_clip (void *paint_data)
   { func.pop_clip (this, paint_data,
                    !user_data ? nullptr : user_data->pop_clip); }
   void color (void *paint_data,
               hb_bool_t is_foreground,
               hb_color_t color)
   { func.color (this, paint_data,
                 is_foreground, color,
                 !user_data ? nullptr : user_data->color); }
   bool image (void *paint_data,
               hb_blob_t *image,
               unsigned width, unsigned height,
               hb_tag_t format,
               float slant,
               hb_glyph_extents_t *extents)
   { return func.image (this, paint_data,
                        image, width, height, format, slant, extents,
                        !user_data ? nullptr : user_data->image); }
   void linear_gradient (void *paint_data,
                         hb_color_line_t *color_line,
                         float x0, float y0,
                         float x1, float y1,
                         float x2, float y2)
   { func.linear_gradient (this, paint_data,
                           color_line, x0, y0, x1, y1, x2, y2,
                           !user_data ? nullptr : user_data->linear_gradient); }
   void radial_gradient (void *paint_data,
                         hb_color_line_t *color_line,
                         float x0, float y0, float r0,
                         float x1, float y1, float r1)
   { func.radial_gradient (this, paint_data,
                           color_line, x0, y0, r0, x1, y1, r1,
                           !user_data ? nullptr : user_data->radial_gradient); }
   void sweep_gradient (void *paint_data,
                        hb_color_line_t *color_line,
                        float x0, float y0,
                        float start_angle,
                        float end_angle)
   { func.sweep_gradient (this, paint_data,
                          color_line, x0, y0, start_angle, end_angle,
                          !user_data ? nullptr : user_data->sweep_gradient); }
   void push_group (void *paint_data)
   { func.push_group (this, paint_data,
                      !user_data ? nullptr : user_data->push_group); }
   void pop_group (void *paint_data,
                   hb_paint_composite_mode_t mode)
   { func.pop_group (this, paint_data,
                     mode,
                     !user_data ? nullptr : user_data->pop_group); }
   bool custom_palette_color (void *paint_data,
                              unsigned int color_index,
                              hb_color_t *color)
   { return func.custom_palette_color (this, paint_data,
                                       color_index,
                                       color,
                                       !user_data ? nullptr : user_data->custom_palette_color); }
 
 
   /* Internal specializations. */
 
   void push_root_transform (void *paint_data,
                             const hb_font_t *font)
   {
     float upem = font->face->get_upem ();
     int xscale = font->x_scale, yscale = font->y_scale;
     float slant = font->slant_xy;
 
     push_transform (paint_data,
 		    xscale/upem, 0, slant * yscale/upem, yscale/upem, 0, 0);
   }
 
   void push_inverse_root_transform (void *paint_data,
                                     hb_font_t *font)
   {
     float upem = font->face->get_upem ();
     int xscale = font->x_scale ? font->x_scale : upem;
     int yscale = font->y_scale ? font->y_scale : upem;
     float slant = font->slant_xy;
 
     push_transform (paint_data,
 		    upem/xscale, 0, -slant * upem/xscale, upem/yscale, 0, 0);
   }
 
   HB_NODISCARD
   bool push_translate (void *paint_data,
                        float dx, float dy)
   {
     if (!dx && !dy)
       return false;
 
     push_transform (paint_data,
 		    1.f, 0.f, 0.f, 1.f, dx, dy);
     return true;
   }
 
   HB_NODISCARD
   bool push_scale (void *paint_data,
                    float sx, float sy)
   {
     if (sx == 1.f && sy == 1.f)
       return false;
 
     push_transform (paint_data,
 		    sx, 0.f, 0.f, sy, 0.f, 0.f);
     return true;
   }
 
   HB_NODISCARD
   bool push_rotate (void *paint_data,
                     float a)
   {
     if (!a)
       return false;
 
-    float cc = cosf (a * (float) M_PI);
-    float ss = sinf (a * (float) M_PI);
+    float cc = cosf (a * HB_PI);
+    float ss = sinf (a * HB_PI);
     push_transform (paint_data, cc, ss, -ss, cc, 0.f, 0.f);
     return true;
   }
 
   HB_NODISCARD
   bool push_skew (void *paint_data,
                   float sx, float sy)
   {
     if (!sx && !sy)
       return false;
 
-    float x = tanf (-sx * (float) M_PI);
-    float y = tanf (+sy * (float) M_PI);
+    float x = tanf (-sx * HB_PI);
+    float y = tanf (+sy * HB_PI);
     push_transform (paint_data, 1.f, y, x, 1.f, 0.f, 0.f);
     return true;
   }
 };
diff --git a/src/hb-style.cc b/src/hb-style.cc
index c7d7d713c..bd5cb5c6b 100644
--- a/src/hb-style.cc
+++ b/src/hb-style.cc
@@ -46,25 +46,25 @@
 static inline float
 _hb_angle_to_ratio (float a)
 {
-  return tanf (a * float (-M_PI / 180.));
+  return tanf (a * -HB_PI / 180.f);
 }
 
 static inline float
 _hb_ratio_to_angle (float r)
 {
-  return atanf (r) * float (-180. / M_PI);
+  return atanf (r) * -180.f / HB_PI;
 }
 
 /**
  * hb_style_get_value:
  * @font: a #hb_font_t object.
  * @style_tag: a style tag.
  *
  * Searches variation axes of a #hb_font_t object for a specific axis first,
  * if not set, then tries to get default style values from different
  * tables of the font.
  *
  * Returns: Corresponding axis or default value to a style tag.
  *
  * Since: 3.0.0
  **/
diff --git a/src/hb.hh b/src/hb.hh
index d09849e56..30b3de499 100644
--- a/src/hb.hh
+++ b/src/hb.hh
@@ -509,20 +509,26 @@ static_assert ((sizeof (hb_mask_t) == 4), "");
 static_assert ((sizeof (hb_var_int_t) == 4), "");
 
 
+/* Pie time. */
+// https://github.com/harfbuzz/harfbuzz/issues/4166
+#define HB_PI 3.14159265358979f
+#define HB_2_PI (2.f * HB_PI)
+
+
 /* Headers we include for everyone.  Keep topologically sorted by dependency.
  * They express dependency amongst themselves, but no other file should include
  * them directly.*/
 #include "hb-cplusplus.hh"
 #include "hb-meta.hh"
 #include "hb-mutex.hh"
 #include "hb-number.hh"
 #include "hb-atomic.hh"	// Requires: hb-meta
 #include "hb-null.hh"	// Requires: hb-meta
 #include "hb-algs.hh"	// Requires: hb-meta hb-null hb-number
 #include "hb-iter.hh"	// Requires: hb-algs hb-meta
 #include "hb-debug.hh"	// Requires: hb-algs hb-atomic
 #include "hb-array.hh"	// Requires: hb-algs hb-iter hb-null
 #include "hb-vector.hh"	// Requires: hb-array hb-null
 #include "hb-object.hh"	// Requires: hb-atomic hb-mutex hb-vector
 
 #endif /* HB_HH */
