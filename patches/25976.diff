commit 2701739f8ad80d14c36de1e3a7a35bd792fceabb
Author: Joachim Metz <joachim.metz@gmail.com>
Date:   Wed Apr 28 09:40:47 2021 +0200

    Fixed OOB reads in hfs_cat_traverse #1401

diff --git a/tsk/fs/hfs.c b/tsk/fs/hfs.c
index 22618534e..003db5a95 100644
--- a/tsk/fs/hfs.c
+++ b/tsk/fs/hfs.c
@@ -306,382 +306,402 @@ static uint8_t
 hfs_ext_find_extent_record_attr(HFS_INFO * hfs, uint32_t cnid,
     TSK_FS_ATTR * a_attr, unsigned char dataForkQ)
 {
     TSK_FS_INFO *fs = (TSK_FS_INFO *) & (hfs->fs_info);
     uint16_t nodesize;          /* size of nodes (all, regardless of the name) */
     uint32_t cur_node;          /* node id of the current node */
     char *node = NULL;
     uint8_t is_done;
     uint8_t desiredType;
 
     tsk_error_reset();
 
     if (tsk_verbose)
         tsk_fprintf(stderr,
             "hfs_ext_find_extent_record_attr: Looking for extents for file %"
             PRIu32 " %s\n", cnid,
             dataForkQ ? "data fork" : "resource fork");
 
     if (!hfs->has_extents_file) {
         // No extents file (which is optional), and so, no further extents are possible.
         return 0;
     }
 
     // Are we looking for extents of the data fork or the resource fork?
     desiredType =
         dataForkQ ? HFS_EXT_KEY_TYPE_DATA : HFS_EXT_KEY_TYPE_RSRC;
 
     // Load the extents attribute, if it has not been done so yet.
     if (hfs->extents_file == NULL) {
         ssize_t cnt;
 
         if ((hfs->extents_file =
                 tsk_fs_file_open_meta(fs, NULL,
                     HFS_EXTENTS_FILE_ID)) == NULL) {
             return 1;
         }
 
         /* cache the data attribute */
         hfs->extents_attr =
             tsk_fs_attrlist_get(hfs->extents_file->meta->attr,
             TSK_FS_ATTR_TYPE_DEFAULT);
         if (!hfs->extents_attr) {
             tsk_error_errstr2_concat
                 (" - Default Attribute not found in Extents File");
             return 1;
         }
 
         // cache the extents file header
         cnt = tsk_fs_attr_read(hfs->extents_attr, 14,
             (char *) &(hfs->extents_header),
             sizeof(hfs_btree_header_record), 0);
         if (cnt != sizeof(hfs_btree_header_record)) {
             if (cnt >= 0) {
                 tsk_error_reset();
                 tsk_error_set_errno(TSK_ERR_FS_READ);
             }
             tsk_error_set_errstr2
                 ("hfs_ext_find_extent_record_attr: Error reading header");
             return 1;
         }
     }
 
     // allocate a node buffer
     nodesize = tsk_getu16(fs->endian, hfs->extents_header.nodesize);
     if ((node = (char *) tsk_malloc(nodesize)) == NULL) {
         return 1;
     }
 
     /* start at root node */
     cur_node = tsk_getu32(fs->endian, hfs->extents_header.rootNode);
 
     /* if the root node is zero, then the extents btree is empty */
     /* if no files have overflow extents, the Extents B-tree still
        exists on disk, but is an empty B-tree containing only
        the header node */
     if (cur_node == 0) {
         if (tsk_verbose)
             tsk_fprintf(stderr, "hfs_ext_find_extent_record: "
                 "empty extents btree\n");
         free(node);
         return 0;
     }
 
     if (tsk_verbose)
         tsk_fprintf(stderr, "hfs_ext_find_extent_record: starting at "
             "root node %" PRIu32 "; nodesize = %"
             PRIu16 "\n", cur_node, nodesize);
 
     /* Recurse down to the needed leaf nodes and then go forward */
     is_done = 0;
     while (is_done == 0) {
         TSK_OFF_T cur_off;      /* start address of cur_node */
         uint16_t num_rec;       /* number of records in this node */
         ssize_t cnt;
         hfs_btree_node *node_desc;
 
         // sanity check
         if (cur_node > tsk_getu32(fs->endian,
                 hfs->extents_header.totalNodes)) {
             tsk_error_set_errno(TSK_ERR_FS_GENFS);
             tsk_error_set_errstr
                 ("hfs_ext_find_extent_record_attr: Node %d too large for file",
                 cur_node);
             free(node);
             return 1;
         }
 
         // read the current node
         cur_off = (TSK_OFF_T)cur_node * nodesize;
         if (tsk_verbose)
             tsk_fprintf(stderr,
                 "hfs_ext_find_extent_record: reading node %" PRIu32
                 " at offset %" PRIdOFF "\n", cur_node, cur_off);
 
         cnt = tsk_fs_attr_read(hfs->extents_attr, cur_off,
             node, nodesize, 0);
         if (cnt != nodesize) {
             if (cnt >= 0) {
                 tsk_error_reset();
                 tsk_error_set_errno(TSK_ERR_FS_READ);
             }
             tsk_error_set_errstr2
                 ("hfs_ext_find_extent_record_attr: Error reading node %d at offset %"
                 PRIdOFF, cur_node, cur_off);
             free(node);
             return 1;
         }
 
         // process the header / descriptor
         if (nodesize < sizeof(hfs_btree_node)) {
             tsk_error_set_errno(TSK_ERR_FS_GENFS);
             tsk_error_set_errstr
                 ("hfs_ext_find_extent_record_attr: Node size %d is too small to be valid", nodesize);
             free(node);
             return 1;
         }
         node_desc = (hfs_btree_node *) node;
         num_rec = tsk_getu16(fs->endian, node_desc->num_rec);
 
         if (num_rec == 0) {
             tsk_error_set_errno(TSK_ERR_FS_GENFS);
             tsk_error_set_errstr
                 ("hfs_ext_find_extent_record: zero records in node %"
                 PRIu32, cur_node);
             free(node);
             return 1;
         }
 
 
         /* With an index node, find the record with the largest key that is smaller
          * to or equal to cnid */
         if (node_desc->type == HFS_BT_NODE_TYPE_IDX) {
             uint32_t next_node = 0;
             int rec;
 
             if (tsk_verbose)
                 tsk_fprintf(stderr,
                     "hfs_ext_find_extent_record: Index node %" PRIu32
                     " @ %" PRIu64 " has %" PRIu16 " records\n", cur_node,
                     cur_off, num_rec);
 
             for (rec = 0; rec < num_rec; ++rec) {
                 int cmp;
                 size_t rec_off;
                 hfs_btree_key_ext *key;
 
+                // Make sure node is large enough, note that (rec + 1) * 2 is an offset
+                // relative to the end of node
+                if ((rec + 1) * 2 > (int) nodesize) {
+                    tsk_error_set_errno(TSK_ERR_FS_GENFS);
+                    tsk_error_set_errstr
+                        ("hfs_ext_find_extent_record: offset of record %d in leaf node %d too small (%"
+                        PRIu16 ")", rec, cur_node, nodesize);
+                    free(node);
+                    return 1;
+                }
                 // get the record offset in the node
                 rec_off =
                     tsk_getu16(fs->endian,
                     &node[nodesize - (rec + 1) * 2]);
                 if (rec_off + sizeof(hfs_btree_key_ext) > nodesize) {
                     tsk_error_set_errno(TSK_ERR_FS_GENFS);
                     tsk_error_set_errstr
                         ("hfs_ext_find_extent_record_attr: offset of record %d in index node %d too large (%d vs %"
                         PRIu16 ")", rec, cur_node, (int) rec_off,
                         nodesize);
                     free(node);
                     return 1;
                 }
                 key = (hfs_btree_key_ext *) & node[rec_off];
 
                 cmp = hfs_ext_compare_keys(hfs, cnid, key);
 
                 if (tsk_verbose)
                     tsk_fprintf(stderr,
                         "hfs_ext_find_extent_record: record %" PRIu16
                         " ; keylen %" PRIu16 " (FileId: %" PRIu32
                         ", ForkType: %" PRIu8 ", StartBlk: %" PRIu32
                         "); compare: %d\n", rec, tsk_getu16(fs->endian,
                             key->key_len), tsk_getu32(fs->endian,
                             key->file_id), key->fork_type,
                         tsk_getu32(fs->endian, key->start_block), cmp);
 
                 /* save the info from this record unless it is bigger than cnid */
                 if ((cmp <= 0) || (next_node == 0)) {
                     hfs_btree_index_record *idx_rec;
                     int keylen =
                         2 + hfs_get_idxkeylen(hfs, tsk_getu16(fs->endian,
                             key->key_len), &(hfs->extents_header));
                     if (rec_off + keylen > nodesize) {
                         tsk_error_set_errno(TSK_ERR_FS_GENFS);
                         tsk_error_set_errstr
                             ("hfs_ext_find_extent_record_attr: offset and keylenth of record %d in index node %d too large (%d vs %"
                             PRIu16 ")", rec, cur_node,
                             (int) rec_off + keylen, nodesize);
                         free(node);
                         return 1;
                     }
                     idx_rec =
                         (hfs_btree_index_record *) & node[rec_off +
                         keylen];
                     next_node = tsk_getu32(fs->endian, idx_rec->childNode);
                 }
 
                 // we are bigger than cnid, so move on to the next node
                 if (cmp > 0) {
                     break;
                 }
             }
 
             // check if we found a relevant node, if not stop.
             if (next_node == 0) {
                 if (tsk_verbose)
                     tsk_fprintf(stderr,
                         "hfs_ext_find_extent_record_attr: did not find any keys for %d in index node %d",
                         cnid, cur_node);
                 is_done = 1;
                 break;
             }
             cur_node = next_node;
         }
 
         /* with a leaf, we process until we are past cnid.  We move right too if we can */
         else if (node_desc->type == HFS_BT_NODE_TYPE_LEAF) {
             int rec;
 
             if (tsk_verbose)
                 tsk_fprintf(stderr,
                     "hfs_ext_find_extent_record: Leaf node %" PRIu32 " @ %"
                     PRIu64 " has %" PRIu16 " records\n", cur_node, cur_off,
                     num_rec);
 
             for (rec = 0; rec < num_rec; ++rec) {
                 size_t rec_off;
                 hfs_btree_key_ext *key;
                 uint32_t rec_cnid;
                 hfs_extents *extents;
                 TSK_OFF_T ext_off = 0;
                 int keylen;
                 TSK_FS_ATTR_RUN *attr_run;
 
+                // Make sure node is large enough, note that (rec + 1) * 2 is an offset
+                // relative to the end of node
+                if ((rec + 1) * 2 > (int) nodesize) {
+                    tsk_error_set_errno(TSK_ERR_FS_GENFS);
+                    tsk_error_set_errstr
+                        ("hfs_ext_find_extent_record_attr: offset of record %d in leaf node %d too small (%"
+                        PRIu16 ")", rec, cur_node, nodesize);
+                    free(node);
+                    return 1;
+                }
                 // get the record offset in the node
                 rec_off =
                     tsk_getu16(fs->endian,
                     &node[nodesize - (rec + 1) * 2]);
-                if (rec_off > nodesize) {
+                if (rec_off >= nodesize) {
                     tsk_error_set_errno(TSK_ERR_FS_GENFS);
                     tsk_error_set_errstr
                         ("hfs_ext_find_extent_record_attr: offset of record %d in leaf node %d too large (%d vs %"
                         PRIu16 ")", rec, cur_node, (int) rec_off,
                         nodesize);
                     free(node);
                     return 1;
                 }
 
                 // Check that the whole hfs_btree_key_ext structure is set
                 if (sizeof(hfs_btree_key_ext) > nodesize - rec_off) {
                     tsk_error_set_errno(TSK_ERR_FS_GENFS);
                     tsk_error_set_errstr
                     ("hfs_ext_find_extent_record_attr: record %d in leaf node %d truncated (have %d vs %"
                         PRIu16 " bytes)", rec, cur_node, nodesize - (int)rec_off,
                         sizeof(hfs_btree_key_ext));
                     free(node);
                     return 1;
                 }
 
                 key = (hfs_btree_key_ext *) & node[rec_off];
 
                 if (tsk_verbose)
                     tsk_fprintf(stderr,
                         "hfs_ext_find_extent_record: record %" PRIu16
                         "; keylen %" PRIu16 " (%" PRIu32
                         ", %" PRIu8 ", %" PRIu32 ")\n", rec,
                         tsk_getu16(fs->endian, key->key_len),
                         tsk_getu32(fs->endian, key->file_id),
                         key->fork_type, tsk_getu32(fs->endian,
                             key->start_block));
 
                 rec_cnid = tsk_getu32(fs->endian, key->file_id);
 
                 // see if this record is for our file
                 // OLD logic, just handles the DATA fork
 //                if (rec_cnid < cnid) {
 //                    continue;
 //                }
 //                else if ((rec_cnid > cnid)
 //                    || (key->fork_type != HFS_EXT_KEY_TYPE_DATA)) {
 //                    is_done = 1;
 //                    break;
 //                }
 
                 // NEW logic, handles both DATA and RSRC forks.
                 if (rec_cnid < cnid) {
                     continue;
                 }
                 if (rec_cnid > cnid) {
                     is_done = 1;
                     break;
                 }
 
 
                 if (key->fork_type != desiredType) {
                     if (dataForkQ) {
                         is_done = 1;
                         break;
                     }
                     else
                         continue;
                 }
 
                 // OK, this is one of the extents records that we are seeking, so save it.
                 // Make sure there is room for the hfs_extents struct
                 keylen = 2 + tsk_getu16(fs->endian, key->key_len);
                 if (rec_off + keylen + sizeof(hfs_extents) > nodesize) {
                     tsk_error_set_errno(TSK_ERR_FS_GENFS);
                     tsk_error_set_errstr
                         ("hfs_ext_find_extent_record_attr: offset and keylenth of record %d in leaf node %d too large (%d vs %"
                         PRIu16 ")", rec, cur_node, (int) rec_off + keylen,
                         nodesize);
                     free(node);
                     return 1;
                 }
 
                 // get the starting offset of this extent
                 ext_off = tsk_getu32(fs->endian, key->start_block);
 
                 // convert the extents to the TSK format
                 extents = (hfs_extents *) & node[rec_off + keylen];
 
                 attr_run =
                     hfs_extents_to_attr(fs, extents->extents, ext_off);
                 if ((attr_run == NULL) && (tsk_error_get_errno() != 0)) {
                     tsk_error_errstr2_concat
                         (" - hfs_ext_find_extent_record_attr");
                     free(node);
                     return 1;
                 }
 
                 if (tsk_fs_attr_add_run(fs, a_attr, attr_run)) {
                     tsk_error_errstr2_concat
                         (" - hfs_ext_find_extent_record_attr");
                     free(node);
                     return 1;
                 }
             }
             cur_node = tsk_getu32(fs->endian, node_desc->flink);
             if (cur_node == 0) {
                 is_done = 1;
                 break;
             }
         }
         else {
             tsk_error_set_errno(TSK_ERR_FS_GENFS);
             tsk_error_set_errstr("hfs_ext_find_extent_record: btree node %"
                 PRIu32 " (%" PRIdOFF ") is neither index nor leaf (%" PRIu8
                 ")", cur_node, cur_off, node_desc->type);
             free(node);
             return 1;
         }
     }
     free(node);
     return 0;
 }
 
 
 /** \internal
  * Compares two Catalog B-tree keys.
  * @param hfs File System being analyzed
  * @param key1 Key 1 to compare
  * @param key2 Key 2 to compare
  * @returns -1 if key1 is smaller, 0 if equal, and 1 if key1 is larger
  */
@@ -718,291 +738,311 @@ uint8_t
 hfs_cat_traverse(HFS_INFO * hfs,
     TSK_HFS_BTREE_CB a_cb, void *ptr)
 {
     TSK_FS_INFO *fs = &(hfs->fs_info);
     uint32_t cur_node;          /* node id of the current node */
     char *node;
 
     uint16_t nodesize;
     uint8_t is_done = 0;
 
     tsk_error_reset();
 
     nodesize = tsk_getu16(fs->endian, hfs->catalog_header.nodesize);
     if ((node = (char *) tsk_malloc(nodesize)) == NULL)
         return 1;
 
     /* start at root node */
     cur_node = tsk_getu32(fs->endian, hfs->catalog_header.rootNode);
 
     /* if the root node is zero, then the extents btree is empty */
     /* if no files have overflow extents, the Extents B-tree still
        exists on disk, but is an empty B-tree containing only
        the header node */
     if (cur_node == 0) {
         if (tsk_verbose)
             tsk_fprintf(stderr, "hfs_cat_traverse: "
                 "empty extents btree\n");
         free(node);
         return 1;
     }
 
     if (tsk_verbose)
         tsk_fprintf(stderr, "hfs_cat_traverse: starting at "
             "root node %" PRIu32 "; nodesize = %"
             PRIu16 "\n", cur_node, nodesize);
 
     /* Recurse down to the needed leaf nodes and then go forward */
     is_done = 0;
     while (is_done == 0) {
         TSK_OFF_T cur_off;      /* start address of cur_node */
         uint16_t num_rec;       /* number of records in this node */
         ssize_t cnt;
         hfs_btree_node *node_desc;
 
         // sanity check
         if (cur_node > tsk_getu32(fs->endian,
                 hfs->catalog_header.totalNodes)) {
             tsk_error_set_errno(TSK_ERR_FS_GENFS);
             tsk_error_set_errstr
                 ("hfs_cat_traverse: Node %d too large for file", cur_node);
             free(node);
             return 1;
         }
 
         // read the current node
         cur_off = (TSK_OFF_T)cur_node * nodesize;
         cnt = tsk_fs_attr_read(hfs->catalog_attr, cur_off,
             node, nodesize, 0);
         if (cnt != nodesize) {
             if (cnt >= 0) {
                 tsk_error_reset();
                 tsk_error_set_errno(TSK_ERR_FS_READ);
             }
             tsk_error_set_errstr2
                 ("hfs_cat_traverse: Error reading node %d at offset %"
                 PRIdOFF, cur_node, cur_off);
             free(node);
             return 1;
         }
 
         // process the header / descriptor
         if (nodesize < sizeof(hfs_btree_node)) {
             tsk_error_set_errno(TSK_ERR_FS_GENFS);
             tsk_error_set_errstr
             ("hfs_cat_traverse: Node size %d is too small to be valid", nodesize);
             free(node);
             return 1;
         }
         node_desc = (hfs_btree_node *) node;
         num_rec = tsk_getu16(fs->endian, node_desc->num_rec);
 
         if (tsk_verbose)
             tsk_fprintf(stderr, "hfs_cat_traverse: node %" PRIu32
                 " @ %" PRIu64 " has %" PRIu16 " records\n",
                 cur_node, cur_off, num_rec);
 
         if (num_rec == 0) {
             tsk_error_set_errno(TSK_ERR_FS_GENFS);
             tsk_error_set_errstr("hfs_cat_traverse: zero records in node %"
                 PRIu32, cur_node);
             free(node);
             return 1;
         }
 
         /* With an index node, find the record with the largest key that is smaller
          * to or equal to cnid */
         if (node_desc->type == HFS_BT_NODE_TYPE_IDX) {
             uint32_t next_node = 0;
             int rec;
 
             for (rec = 0; rec < num_rec; ++rec) {
                 size_t rec_off;
                 hfs_btree_key_cat *key;
                 uint8_t retval;
                 int keylen;
 
+                // Make sure node is large enough, note that (rec + 1) * 2 is an offset
+                // relative to the end of node
+                if ((rec + 1) * 2 > (int) nodesize) {
+                    tsk_error_set_errno(TSK_ERR_FS_GENFS);
+                    tsk_error_set_errstr
+                        ("hfs_cat_traverse: offset of record %d in leaf node %d too small (%"
+                        PRIu16 ")", rec, cur_node, nodesize);
+                    free(node);
+                    return 1;
+                }
                 // get the record offset in the node
                 rec_off =
                     tsk_getu16(fs->endian,
                     &node[nodesize - (rec + 1) * 2]);
-                if (rec_off > nodesize) {
+                if (rec_off >= nodesize) {
                     tsk_error_set_errno(TSK_ERR_FS_GENFS);
                     tsk_error_set_errstr
                         ("hfs_cat_traverse: offset of record %d in index node %d too large (%d vs %"
                         PRIu16 ")", rec, cur_node, (int) rec_off,
                         nodesize);
                     free(node);
                     return 1;
                 }
 
                 key = (hfs_btree_key_cat *) & node[rec_off];
                 keylen = 2 + tsk_getu16(hfs->fs_info.endian, key->key_len);
 
                 if (keylen > nodesize - rec_off) {
                     tsk_error_set_errno(TSK_ERR_FS_GENFS);
                     tsk_error_set_errstr
                         ("hfs_cat_traverse: length of key %d in index node %d too large (%d vs %"
                         PRIu16 ")", rec, cur_node, keylen, (nodesize - rec_off));
                     free(node);
                     return 1;
                 }
 
                 /*
                    if (tsk_verbose)
                    tsk_fprintf(stderr,
                    "hfs_cat_traverse: record %" PRIu16
                    " ; keylen %" PRIu16 " (%" PRIu32 ")\n", rec,
                    tsk_getu16(fs->endian, key->key_len),
                    tsk_getu32(fs->endian, key->parent_cnid));
                  */
 
 
                 /* save the info from this record unless it is too big */
                 retval =
                     a_cb(hfs, HFS_BT_NODE_TYPE_IDX, key,
                     cur_off + rec_off, ptr);
                 if (retval == HFS_BTREE_CB_ERR) {
                     tsk_error_set_errno(TSK_ERR_FS_GENFS);
                     tsk_error_set_errstr2
                         ("hfs_cat_traverse: Callback returned error");
                     free(node);
                     return 1;
                 }
                 // record the closest entry
                 else if ((retval == HFS_BTREE_CB_IDX_LT)
                     || (next_node == 0)) {
                     hfs_btree_index_record *idx_rec;
                     int keylen =
                         2 + hfs_get_idxkeylen(hfs, tsk_getu16(fs->endian,
                             key->key_len), &(hfs->catalog_header));
                     if (keylen > nodesize - rec_off) {
                         tsk_error_set_errno(TSK_ERR_FS_GENFS);
                         tsk_error_set_errstr
                             ("hfs_cat_traverse: offset of record and keylength %d in index node %d too large (%d vs %"
                             PRIu16 ")", rec, cur_node,
                             (int) rec_off + keylen, nodesize);
                         free(node);
                         return 1;
                     }
                     if (sizeof(hfs_btree_index_record) > nodesize - rec_off - keylen) {
                         tsk_error_set_errno(TSK_ERR_FS_GENFS);
                         tsk_error_set_errstr("hfs_cat_traverse: truncated btree index record");
                         free(node);
                         return 1;
                     }
                     idx_rec =
                         (hfs_btree_index_record *) & node[rec_off +
                         keylen];
                     next_node = tsk_getu32(fs->endian, idx_rec->childNode);
                 }
                 if (retval == HFS_BTREE_CB_IDX_EQGT) {
                     // move down to the next node
                     break;
                 }
             }
             // check if we found a relevant node
             if (next_node == 0) {
                 tsk_error_set_errno(TSK_ERR_FS_GENFS);
                 tsk_error_set_errstr
                     ("hfs_cat_traverse: did not find any keys in index node %d",
                     cur_node);
                 is_done = 1;
                 break;
             }
             // TODO: Handle multinode loops
             if (next_node == cur_node) {
                 tsk_error_set_errno(TSK_ERR_FS_GENFS);
                 tsk_error_set_errstr
                     ("hfs_cat_traverse: node %d references itself as next node",
                     cur_node);
                 is_done = 1;
                 break;
             }
             cur_node = next_node;
         }
 
         /* With a leaf, we look for the specific record. */
         else if (node_desc->type == HFS_BT_NODE_TYPE_LEAF) {
             int rec;
 
             for (rec = 0; rec < num_rec; ++rec) {
                 size_t rec_off;
                 hfs_btree_key_cat *key;
                 uint8_t retval;
                 int keylen;
 
+                // Make sure node is large enough, note that (rec + 1) * 2 is an offset
+                // relative to the end of node
+                if ((rec + 1) * 2 > (int) nodesize) {
+                    tsk_error_set_errno(TSK_ERR_FS_GENFS);
+                    tsk_error_set_errstr
+                        ("hfs_cat_traverse: offset of record %d in leaf node %d too small (%"
+                        PRIu16 ")", rec, cur_node, nodesize);
+                    free(node);
+                    return 1;
+                }
                 // get the record offset in the node
                 rec_off =
                     tsk_getu16(fs->endian,
                     &node[nodesize - (rec + 1) * 2]);
-                if (rec_off > nodesize) {
+                if (rec_off >= nodesize) {
                     tsk_error_set_errno(TSK_ERR_FS_GENFS);
                     tsk_error_set_errstr
                         ("hfs_cat_traverse: offset of record %d in leaf node %d too large (%d vs %"
                         PRIu16 ")", rec, cur_node, (int) rec_off,
                         nodesize);
                     free(node);
                     return 1;
                 }
 
                 key = (hfs_btree_key_cat *) & node[rec_off];
                 keylen = 2 + tsk_getu16(hfs->fs_info.endian, key->key_len);
 
                 if (keylen > nodesize - rec_off) {
                     tsk_error_set_errno(TSK_ERR_FS_GENFS);
                     tsk_error_set_errstr
                         ("hfs_cat_traverse: length of key %d in leaf node %d too large (%d vs %"
                         PRIu16 ")", rec, cur_node, keylen, nodesize);
                     free(node);
                     return 1;
                 }
 
                 /*
                    if (tsk_verbose)
                    tsk_fprintf(stderr,
                    "hfs_cat_traverse: record %" PRIu16
                    "; keylen %" PRIu16 " (%" PRIu32 ")\n", rec,
                    tsk_getu16(fs->endian, key->key_len),
                    tsk_getu32(fs->endian, key->parent_cnid));
                  */
                 //                rec_cnid = tsk_getu32(fs->endian, key->file_id);
 
                 retval =
                     a_cb(hfs, HFS_BT_NODE_TYPE_LEAF, key,
                     cur_off + rec_off, ptr);
                 if (retval == HFS_BTREE_CB_LEAF_STOP) {
                     is_done = 1;
                     break;
                 }
                 else if (retval == HFS_BTREE_CB_ERR) {
                     tsk_error_set_errno(TSK_ERR_FS_GENFS);
                     tsk_error_set_errstr2
                         ("hfs_cat_traverse: Callback returned error");
                     free(node);
                     return 1;
                 }
             }
 
             // move right to the next node if we got this far
             if (is_done == 0) {
                 cur_node = tsk_getu32(fs->endian, node_desc->flink);
                 if (cur_node == 0) {
                     is_done = 1;
                 }
                 if (tsk_verbose)
                     tsk_fprintf(stderr,
                         "hfs_cat_traverse: moving forward to next leaf");
             }
         }
         else {
             tsk_error_set_errno(TSK_ERR_FS_GENFS);
             tsk_error_set_errstr("hfs_cat_traverse: btree node %" PRIu32
                 " (%" PRIu64 ") is neither index nor leaf (%" PRIu8 ")",
                 cur_node, cur_off, node_desc->type);
             free(node);
             return 1;
         }
     }
     free(node);
     return 0;
 }
