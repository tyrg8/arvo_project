commit 0677b26b6d15f35f027eaabf11cfaa0af541f8c8
Merge: 844c53ed 4d8a2132
Author: Nick Terrell <terrelln@fb.com>
Date:   Fri Jan 7 09:27:09 2022 -0800

    Merge pull request #2980 from terrelln/opt-oss-fuzz-fix
    
    [opt] Fix oss-fuzz bug in optimal parser

diff --git a/lib/compress/zstd_opt.c b/lib/compress/zstd_opt.c
index 2fa10816..1b1ddad4 100644
--- a/lib/compress/zstd_opt.c
+++ b/lib/compress/zstd_opt.c
@@ -268,20 +268,29 @@ static U32 ZSTD_rawLiteralsCost(const BYTE* const literals, U32 const litLength,
 /* ZSTD_litLengthPrice() :
  * cost of literalLength symbol */
 static U32 ZSTD_litLengthPrice(U32 const litLength, const optState_t* const optPtr, int optLevel)
 {
-    if (optPtr->priceType == zop_predef) return WEIGHT(litLength, optLevel);
+    assert(litLength <= ZSTD_BLOCKSIZE_MAX);
+    if (optPtr->priceType == zop_predef)
+        return WEIGHT(litLength, optLevel);
+    /* We can't compute the litLength price for sizes >= ZSTD_BLOCKSIZE_MAX
+     * because it isn't representable in the zstd format. So instead just
+     * call it 1 bit more than ZSTD_BLOCKSIZE_MAX - 1. In this case the block
+     * would be all literals.
+     */
+    if (litLength == ZSTD_BLOCKSIZE_MAX)
+        return BITCOST_MULTIPLIER + ZSTD_litLengthPrice(ZSTD_BLOCKSIZE_MAX - 1, optPtr, optLevel);
 
     /* dynamic statistics */
     {   U32 const llCode = ZSTD_LLcode(litLength);
         return (LL_bits[llCode] * BITCOST_MULTIPLIER)
              + optPtr->litLengthSumBasePrice
              - WEIGHT(optPtr->litLengthFreq[llCode], optLevel);
     }
 }
 
 /* ZSTD_getMatchPrice() :
  * Provides the cost of the match part (offset + matchLength) of a sequence
  * Must be combined with ZSTD_fullLiteralsCost() to get the full cost of a sequence.
  * @offcode : expects a scale where 0,1,2 are repcodes 1-3, and 3+ are real_offsets+2
  * @optLevel: when <2, favors small offset for decompression speed (improved cache efficiency)
  */
