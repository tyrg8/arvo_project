commit f58c5ff569a738339349a2aaee36d175eddff891
Author: Zaggy1024 <zaggy1024@gmail.com>
Date:   Thu Feb 2 05:01:26 2023 -0600

    LibVideo/VP9: Correct the mode/partition probability adaption counts

diff --git a/Userland/Libraries/LibVideo/VP9/Decoder.cpp b/Userland/Libraries/LibVideo/VP9/Decoder.cpp
index 09fb9058d3..01628bf6e9 100644
--- a/Userland/Libraries/LibVideo/VP9/Decoder.cpp
+++ b/Userland/Libraries/LibVideo/VP9/Decoder.cpp
@@ -286,45 +286,45 @@ DecoderErrorOr<void> Decoder::adapt_coef_probs(bool is_inter_predicted_frame)
 DecoderErrorOr<void> Decoder::adapt_non_coef_probs(FrameContext const& frame_context)
 {
     auto& probs = *m_parser->m_probability_tables;
     auto& counter = *m_parser->m_syntax_element_counter;
     ADAPT_PROB_TABLE(is_inter, IS_INTER_CONTEXTS);
     ADAPT_PROB_TABLE(comp_mode, COMP_MODE_CONTEXTS);
     ADAPT_PROB_TABLE(comp_ref, REF_CONTEXTS);
     for (size_t i = 0; i < REF_CONTEXTS; i++) {
         for (size_t j = 0; j < 2; j++)
             probs.single_ref_prob()[i][j] = adapt_prob(probs.single_ref_prob()[i][j], counter.m_counts_single_ref[i][j]);
     }
     ADAPT_TREE(inter_mode, inter_mode, inter_mode, INTER_MODE_CONTEXTS);
-    ADAPT_TREE(intra_mode, y_mode, intra_mode, INTER_MODE_CONTEXTS);
-    ADAPT_TREE(intra_mode, uv_mode, uv_mode, INTER_MODE_CONTEXTS);
-    ADAPT_TREE(partition, partition, partition, INTER_MODE_CONTEXTS);
+    ADAPT_TREE(intra_mode, y_mode, intra_mode, BLOCK_SIZE_GROUPS);
+    ADAPT_TREE(intra_mode, uv_mode, uv_mode, INTRA_MODES);
+    ADAPT_TREE(partition, partition, partition, PARTITION_CONTEXTS);
     ADAPT_PROB_TABLE(skip, SKIP_CONTEXTS);
     if (frame_context.interpolation_filter == Switchable) {
         ADAPT_TREE(interp_filter, interp_filter, interp_filter, INTERP_FILTER_CONTEXTS);
     }
     if (frame_context.transform_mode == TransformMode::Select) {
         for (size_t i = 0; i < TX_SIZE_CONTEXTS; i++) {
             auto& tx_probs = probs.tx_probs();
             auto& tx_counts = counter.m_counts_tx_size;
             adapt_probs(tx_size_8_tree, tx_probs[Transform_8x8][i], tx_counts[Transform_8x8][i]);
             adapt_probs(tx_size_16_tree, tx_probs[Transform_16x16][i], tx_counts[Transform_16x16][i]);
             adapt_probs(tx_size_32_tree, tx_probs[Transform_32x32][i], tx_counts[Transform_32x32][i]);
         }
     }
     adapt_probs(mv_joint_tree, probs.mv_joint_probs(), counter.m_counts_mv_joint);
     for (size_t i = 0; i < 2; i++) {
         probs.mv_sign_prob()[i] = adapt_prob(probs.mv_sign_prob()[i], counter.m_counts_mv_sign[i]);
         adapt_probs(mv_class_tree, probs.mv_class_probs()[i], counter.m_counts_mv_class[i]);
         probs.mv_class0_bit_prob()[i] = adapt_prob(probs.mv_class0_bit_prob()[i], counter.m_counts_mv_class0_bit[i]);
         for (size_t j = 0; j < MV_OFFSET_BITS; j++)
             probs.mv_bits_prob()[i][j] = adapt_prob(probs.mv_bits_prob()[i][j], counter.m_counts_mv_bits[i][j]);
         for (size_t j = 0; j < CLASS0_SIZE; j++)
             adapt_probs(mv_fr_tree, probs.mv_class0_fr_probs()[i][j], counter.m_counts_mv_class0_fr[i][j]);
         adapt_probs(mv_fr_tree, probs.mv_fr_probs()[i], counter.m_counts_mv_fr[i]);
         if (frame_context.high_precision_motion_vectors_allowed) {
             probs.mv_class0_hp_prob()[i] = adapt_prob(probs.mv_class0_hp_prob()[i], counter.m_counts_mv_class0_hp[i]);
             probs.mv_hp_prob()[i] = adapt_prob(probs.mv_hp_prob()[i], counter.m_counts_mv_hp[i]);
         }
     }
     return {};
 }
