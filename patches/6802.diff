commit 262b6ecd39c26dd0c87f3857a9e1e0495eba7773
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Fri Mar 9 06:37:50 2018 -0500

    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6802

diff --git a/MagickCore/fx.c b/MagickCore/fx.c
index 52b206da8..658a666b3 100644
--- a/MagickCore/fx.c
+++ b/MagickCore/fx.c
@@ -1252,585 +1252,586 @@ static inline const char *FxSubexpression(const char *expression,
 static double FxGetSymbol(FxInfo *fx_info,const PixelChannel channel,
   const ssize_t x,const ssize_t y,const char *expression,
   ExceptionInfo *exception)
 {
   char
     *q,
     subexpression[MagickPathExtent],
     symbol[MagickPathExtent];
 
   const char
     *p,
     *value;
 
   Image
     *image;
 
   MagickBooleanType
     status;
 
   PixelInfo
     pixel;
 
   double
     alpha,
     beta;
 
   PointInfo
     point;
 
   register ssize_t
     i;
 
   size_t
     depth,
     length,
     level;
 
   p=expression;
   i=GetImageIndexInList(fx_info->images);
   depth=0;
   level=0;
   point.x=(double) x;
   point.y=(double) y;
   if (isalpha((int) ((unsigned char) *(p+1))) == 0)
     {
       if (strchr("suv",(int) *p) != (char *) NULL)
         {
           switch (*p)
           {
             case 's':
             default:
             {
               i=GetImageIndexInList(fx_info->images);
               break;
             }
             case 'u': i=0; break;
             case 'v': i=1; break;
           }
           p++;
           if (*p == '[')
             {
               level++;
               q=subexpression;
               for (p++; *p != '\0'; )
               {
                 if (*p == '[')
                   level++;
                 else
                   if (*p == ']')
                     {
                       level--;
                       if (level == 0)
                         break;
                     }
                 *q++=(*p++);
               }
               *q='\0';
               alpha=FxEvaluateSubexpression(fx_info,channel,x,y,subexpression,
                 &depth,&beta,exception);
               i=(ssize_t) alpha;
               p++;
             }
           if (*p == '.')
             p++;
         }
       if ((*p == 'p') && (isalpha((int) ((unsigned char) *(p+1))) == 0))
         {
           p++;
           if (*p == '{')
             {
               level++;
               q=subexpression;
               for (p++; *p != '\0'; )
               {
                 if (*p == '{')
                   level++;
                 else
                   if (*p == '}')
                     {
                       level--;
                       if (level == 0)
                         break;
                     }
                 *q++=(*p++);
               }
               *q='\0';
               alpha=FxEvaluateSubexpression(fx_info,channel,x,y,subexpression,
                 &depth,&beta,exception);
               point.x=alpha;
               point.y=beta;
-              p++;
+              if (*p != '\0')
+                p++;
             }
           else
             if (*p == '[')
               {
                 level++;
                 q=subexpression;
                 for (p++; *p != '\0'; )
                 {
                   if (*p == '[')
                     level++;
                   else
                     if (*p == ']')
                       {
                         level--;
                         if (level == 0)
                           break;
                       }
                   *q++=(*p++);
                 }
                 *q='\0';
                 alpha=FxEvaluateSubexpression(fx_info,channel,x,y,subexpression,
                   &depth,&beta,exception);
                 point.x+=alpha;
                 point.y+=beta;
                 if (*p != '\0')
                   p++;
               }
           if (*p == '.')
             p++;
         }
     }
   length=GetImageListLength(fx_info->images);
   while (i < 0)
     i+=(ssize_t) length;
   if (length != 0)
     i%=length;
   image=GetImageFromList(fx_info->images,i);
   if (image == (Image *) NULL)
     {
       (void) ThrowMagickException(exception,GetMagickModule(),OptionError,
         "NoSuchImage","`%s'",expression);
       return(0.0);
     }
   GetPixelInfo(image,&pixel);
   status=InterpolatePixelInfo(image,fx_info->view[i],image->interpolate,
     point.x,point.y,&pixel,exception);
   (void) status;
   if ((strlen(p) > 2) && (LocaleCompare(p,"intensity") != 0) &&
       (LocaleCompare(p,"luma") != 0) && (LocaleCompare(p,"luminance") != 0) &&
       (LocaleCompare(p,"hue") != 0) && (LocaleCompare(p,"saturation") != 0) &&
       (LocaleCompare(p,"lightness") != 0))
     {
       char
         name[MagickPathExtent];
 
       (void) CopyMagickString(name,p,MagickPathExtent);
       for (q=name+(strlen(name)-1); q > name; q--)
       {
         if (*q == ')')
           break;
         if (*q == '.')
           {
             *q='\0';
             break;
           }
       }
       if ((strlen(name) > 2) &&
           (GetValueFromSplayTree(fx_info->symbols,name) == (const char *) NULL))
         {
           PixelInfo
             *color;
 
           color=(PixelInfo *) GetValueFromSplayTree(fx_info->colors,name);
           if (color != (PixelInfo *) NULL)
             {
               pixel=(*color);
               p+=strlen(name);
             }
           else
             {
               MagickBooleanType
                 status;
 
               status=QueryColorCompliance(name,AllCompliance,&pixel,
                 fx_info->exception);
               if (status != MagickFalse)
                 {
                   (void) AddValueToSplayTree(fx_info->colors,ConstantString(
                     name),ClonePixelInfo(&pixel));
                   p+=strlen(name);
                 }
             }
         }
     }
   (void) CopyMagickString(symbol,p,MagickPathExtent);
   StripString(symbol);
   if (*symbol == '\0')
     {
       switch (channel)
       {
         case RedPixelChannel: return(QuantumScale*pixel.red);
         case GreenPixelChannel: return(QuantumScale*pixel.green);
         case BluePixelChannel: return(QuantumScale*pixel.blue);
         case BlackPixelChannel:
         {
           if (image->colorspace != CMYKColorspace)
             {
               (void) ThrowMagickException(exception,GetMagickModule(),
                 ImageError,"ColorSeparatedImageRequired","`%s'",
                 image->filename);
               return(0.0);
             }
           return(QuantumScale*pixel.black);
         }
         case AlphaPixelChannel:
         {
           if (pixel.alpha_trait == UndefinedPixelTrait)
             return(1.0);
           alpha=(double) (QuantumScale*pixel.alpha);
           return(alpha);
         }
         case IndexPixelChannel:
           return(0.0);
         case IntensityPixelChannel:
         {
           Quantum
             quantum_pixel[MaxPixelChannels];
 
           SetPixelViaPixelInfo(image,&pixel,quantum_pixel);
           return(QuantumScale*GetPixelIntensity(image,quantum_pixel));
         }
         default:
           break;
       }
       (void) ThrowMagickException(exception,GetMagickModule(),OptionError,
         "UnableToParseExpression","`%s'",p);
       return(0.0);
     }
   switch (*symbol)
   {
     case 'A':
     case 'a':
     {
       if (LocaleCompare(symbol,"a") == 0)
         return((QuantumScale*pixel.alpha));
       break;
     }
     case 'B':
     case 'b':
     {
       if (LocaleCompare(symbol,"b") == 0)
         return(QuantumScale*pixel.blue);
       break;
     }
     case 'C':
     case 'c':
     {
       if (LocaleNCompare(symbol,"channel",7) == 0)
         {
           GeometryInfo
             channel_info;
 
           MagickStatusType
             flags;
 
           flags=ParseGeometry(symbol+7,&channel_info);
           if (image->colorspace == CMYKColorspace)
             switch (channel)
             {
               case CyanPixelChannel:
               {
                 if ((flags & RhoValue) == 0)
                   return(0.0);
                 return(channel_info.rho);
               }
               case MagentaPixelChannel:
               {
                 if ((flags & SigmaValue) == 0)
                   return(0.0);
                 return(channel_info.sigma);
               }
               case YellowPixelChannel:
               {
                 if ((flags & XiValue) == 0)
                   return(0.0);
                 return(channel_info.xi);
               }
               case BlackPixelChannel:
               {
                 if ((flags & PsiValue) == 0)
                   return(0.0);
                 return(channel_info.psi);
               }
               case AlphaPixelChannel:
               {
                 if ((flags & ChiValue) == 0)
                   return(0.0);
                 return(channel_info.chi);
               }
               default:
                 return(0.0);
             }
           switch (channel)
           {
             case RedPixelChannel:
             {
               if ((flags & RhoValue) == 0)
                 return(0.0);
               return(channel_info.rho);
             }
             case GreenPixelChannel:
             {
               if ((flags & SigmaValue) == 0)
                 return(0.0);
               return(channel_info.sigma);
             }
             case BluePixelChannel:
             {
               if ((flags & XiValue) == 0)
                 return(0.0);
               return(channel_info.xi);
             }
             case BlackPixelChannel:
             {
               if ((flags & ChiValue) == 0)
                 return(0.0);
               return(channel_info.chi);
             }
             case AlphaPixelChannel:
             {
               if ((flags & PsiValue) == 0)
                 return(0.0);
               return(channel_info.psi);
             }
             default:
               return(0.0);
           }
         }
       if (LocaleCompare(symbol,"c") == 0)
         return(QuantumScale*pixel.red);
       break;
     }
     case 'D':
     case 'd':
     {
       if (LocaleNCompare(symbol,"depth",5) == 0)
         return(FxChannelStatistics(fx_info,image,channel,symbol,exception));
       break;
     }
     case 'G':
     case 'g':
     {
       if (LocaleCompare(symbol,"g") == 0)
         return(QuantumScale*pixel.green);
       break;
     }
     case 'K':
     case 'k':
     {
       if (LocaleNCompare(symbol,"kurtosis",8) == 0)
         return(FxChannelStatistics(fx_info,image,channel,symbol,exception));
       if (LocaleCompare(symbol,"k") == 0)
         {
           if (image->colorspace != CMYKColorspace)
             {
               (void) ThrowMagickException(exception,GetMagickModule(),
                 OptionError,"ColorSeparatedImageRequired","`%s'",
                 image->filename);
               return(0.0);
             }
           return(QuantumScale*pixel.black);
         }
       break;
     }
     case 'H':
     case 'h':
     {
       if (LocaleCompare(symbol,"h") == 0)
         return((double) image->rows);
       if (LocaleCompare(symbol,"hue") == 0)
         {
           double
             hue,
             lightness,
             saturation;
 
           ConvertRGBToHSL(pixel.red,pixel.green,pixel.blue,&hue,&saturation,
             &lightness);
           return(hue);
         }
       break;
     }
     case 'I':
     case 'i':
     {
       if ((LocaleCompare(symbol,"image.depth") == 0) ||
           (LocaleCompare(symbol,"image.minima") == 0) ||
           (LocaleCompare(symbol,"image.maxima") == 0) ||
           (LocaleCompare(symbol,"image.mean") == 0) ||
           (LocaleCompare(symbol,"image.kurtosis") == 0) ||
           (LocaleCompare(symbol,"image.skewness") == 0) ||
           (LocaleCompare(symbol,"image.standard_deviation") == 0))
         return(FxChannelStatistics(fx_info,image,channel,symbol+6,exception));
       if (LocaleCompare(symbol,"image.resolution.x") == 0)
         return(image->resolution.x);
       if (LocaleCompare(symbol,"image.resolution.y") == 0)
         return(image->resolution.y);
       if (LocaleCompare(symbol,"intensity") == 0)
         {
           Quantum
             quantum_pixel[MaxPixelChannels];
 
           SetPixelViaPixelInfo(image,&pixel,quantum_pixel);
           return(QuantumScale*GetPixelIntensity(image,quantum_pixel));
         }
       if (LocaleCompare(symbol,"i") == 0)
         return((double) x);
       break;
     }
     case 'J':
     case 'j':
     {
       if (LocaleCompare(symbol,"j") == 0)
         return((double) y);
       break;
     }
     case 'L':
     case 'l':
     {
       if (LocaleCompare(symbol,"lightness") == 0)
         {
           double
             hue,
             lightness,
             saturation;
 
           ConvertRGBToHSL(pixel.red,pixel.green,pixel.blue,&hue,&saturation,
             &lightness);
           return(lightness);
         }
       if (LocaleCompare(symbol,"luma") == 0)
         {
           double
             luma;
 
           luma=0.212656*pixel.red+0.715158*pixel.green+0.072186*pixel.blue;
           return(QuantumScale*luma);
         }
       if (LocaleCompare(symbol,"luminance") == 0)
         {
           double
             luminence;
 
           luminence=0.212656*pixel.red+0.715158*pixel.green+0.072186*pixel.blue;
           return(QuantumScale*luminence);
         }
       break;
     }
     case 'M':
     case 'm':
     {
       if (LocaleNCompare(symbol,"maxima",6) == 0)
         return(FxChannelStatistics(fx_info,image,channel,symbol,exception));
       if (LocaleNCompare(symbol,"mean",4) == 0)
         return(FxChannelStatistics(fx_info,image,channel,symbol,exception));
       if (LocaleNCompare(symbol,"minima",6) == 0)
         return(FxChannelStatistics(fx_info,image,channel,symbol,exception));
       if (LocaleCompare(symbol,"m") == 0)
         return(QuantumScale*pixel.green);
       break;
     }
     case 'N':
     case 'n':
     {
       if (LocaleCompare(symbol,"n") == 0)
         return((double) GetImageListLength(fx_info->images));
       break;
     }
     case 'O':
     case 'o':
     {
       if (LocaleCompare(symbol,"o") == 0)
         return(QuantumScale*pixel.alpha);
       break;
     }
     case 'P':
     case 'p':
     {
       if (LocaleCompare(symbol,"page.height") == 0)
         return((double) image->page.height);
       if (LocaleCompare(symbol,"page.width") == 0)
         return((double) image->page.width);
       if (LocaleCompare(symbol,"page.x") == 0)
         return((double) image->page.x);
       if (LocaleCompare(symbol,"page.y") == 0)
         return((double) image->page.y);
       break;
     }
     case 'Q':
     case 'q':
     {
       if (LocaleCompare(symbol,"quality") == 0)
         return((double) image->quality);
       break;
     }
     case 'R':
     case 'r':
     {
       if (LocaleCompare(symbol,"resolution.x") == 0)
         return(image->resolution.x);
       if (LocaleCompare(symbol,"resolution.y") == 0)
         return(image->resolution.y);
       if (LocaleCompare(symbol,"r") == 0)
         return(QuantumScale*pixel.red);
       break;
     }
     case 'S':
     case 's':
     {
       if (LocaleCompare(symbol,"saturation") == 0)
         {
           double
             hue,
             lightness,
             saturation;
 
           ConvertRGBToHSL(pixel.red,pixel.green,pixel.blue,&hue,&saturation,
             &lightness);
           return(saturation);
         }
       if (LocaleNCompare(symbol,"skewness",8) == 0)
         return(FxChannelStatistics(fx_info,image,channel,symbol,exception));
       if (LocaleNCompare(symbol,"standard_deviation",18) == 0)
         return(FxChannelStatistics(fx_info,image,channel,symbol,exception));
       break;
     }
     case 'T':
     case 't':
     {
       if (LocaleCompare(symbol,"t") == 0)
         return((double) GetImageIndexInList(fx_info->images));
       break;
     }
     case 'W':
     case 'w':
     {
       if (LocaleCompare(symbol,"w") == 0)
         return((double) image->columns);
       break;
     }
     case 'Y':
     case 'y':
     {
       if (LocaleCompare(symbol,"y") == 0)
         return(QuantumScale*pixel.blue);
       break;
     }
     case 'Z':
     case 'z':
     {
       if (LocaleCompare(symbol,"z") == 0)
         return((double)GetImageDepth(image, fx_info->exception));
       break;
     }
     default:
       break;
   }
   value=(const char *) GetValueFromSplayTree(fx_info->symbols,symbol);
   if (value != (const char *) NULL)
     return(StringToDouble(value,(char **) NULL));
   (void) ThrowMagickException(exception,GetMagickModule(),OptionError,
     "UnableToParseExpression","`%s'",symbol);
   return(0.0);
 }
