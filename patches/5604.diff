commit 8fdad62ddb46f8798643e9b1a564a2af8b12411d
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Wed Jan 24 00:59:35 2018 +0100

    Bug 698904: Drop pixmap only once upon error when painting shades.
    
    If fz_new_pixmap_with_bbox() threw conv would be NULL and temp would
    be pointing to a pixmap that would be dropped 2 times.
    
    If fz_clone_pixmap_area_with_different_seps() threw temp and conv
    would be pointing to the same pixmap that would be dropped 3 times.

diff --git a/source/fitz/draw-mesh.c b/source/fitz/draw-mesh.c
index 90838709e..b8bf68d2b 100644
--- a/source/fitz/draw-mesh.c
+++ b/source/fitz/draw-mesh.c
@@ -214,151 +214,147 @@ void
 fz_paint_shade(fz_context *ctx, fz_shade *shade, fz_colorspace *colorspace, const fz_matrix *ctm, fz_pixmap *dest, const fz_color_params *color_params, const fz_irect *bbox, const fz_overprint *op)
 {
 	unsigned char clut[256][FZ_MAX_COLORS];
 	fz_pixmap *temp = NULL;
 	fz_pixmap *conv = NULL;
 	float color[FZ_MAX_COLORS];
 	struct paint_tri_data ptd = { 0 };
 	int i, k;
 	fz_matrix local_ctm;
 
 	fz_var(temp);
 	fz_var(conv);
 
 	if (colorspace == NULL)
 		colorspace = shade->colorspace;
 
 	fz_try(ctx)
 	{
 		fz_concat(&local_ctm, &shade->matrix, ctm);
 
 		if (shade->use_function)
 		{
 			/* We need to use alpha = 1 here, because the shade might not fill
 			 * the bbox. */
 			temp = fz_new_pixmap_with_bbox(ctx, fz_device_gray(ctx), bbox, NULL, 1);
 			fz_clear_pixmap(ctx, temp);
 		}
 		else
 		{
 			temp = dest;
 		}
 
 		ptd.dest = temp;
 		ptd.shade = shade;
 		ptd.bbox = bbox;
 
 		fz_init_cached_color_converter(ctx, &ptd.cc, NULL, temp->colorspace, colorspace, color_params);
 		fz_process_shade(ctx, shade, &local_ctm, prepare_mesh_vertex, &do_paint_tri, &ptd);
 
 		if (shade->use_function)
 		{
 			/* If the shade is defined in a deviceN (or separation,
 			 * which is the same internally to MuPDF) space, then
 			 * we need to render it in deviceN before painting it
 			 * to the destination. If not, we are free to render it
 			 * direct to the target. */
 			if (fz_colorspace_is_device_n(ctx, colorspace))
 			{
 				/* We've drawn it as greyscale, with the values being
 				 * the input to the function. Now make DevN version
 				 * by mapping that greyscale through the function.
 				 * This seems inefficient, but it's actually required,
 				 * because we need to apply the function lookup POST
 				 * interpolation in the do_paint_tri routines, not
 				 * before it to avoid problems with some test files
 				 * (tests/GhentV3.0/061_Shading_x1a.pdf for example).
 				 */
 				unsigned char *s = temp->samples;
 				unsigned char *d;
 				int hh = temp->h;
 				int n = fz_colorspace_n(ctx, colorspace);
 
 				/* alpha = 1 here for the same reason as earlier */
 				conv = fz_new_pixmap_with_bbox(ctx, colorspace, bbox, NULL, 1);
 				d = conv->samples;
 				while (hh--)
 				{
 					int len = temp->w;
 					while (len--)
 					{
 						int v = *s++;
 						int a = *s++;
 						const float *f = shade->function[v];
 						for (k = 0; k < n; k++)
 							*d++ = fz_clampi(255 * f[k], 0, 255);
 						*d++ = a;
 					}
 					d += conv->stride - conv->w * conv->n;
 					s += temp->stride - temp->w * temp->n;
 				}
 				fz_drop_pixmap(ctx, temp);
 				temp = conv;
+				conv = NULL;
 
 				/* Now Change from our device_n colorspace into the target colorspace/spots. */
 				conv = fz_clone_pixmap_area_with_different_seps(ctx, temp, NULL, dest->colorspace, dest->seps, color_params, NULL);
 			}
 			else
 			{
 				unsigned char *s = temp->samples;
 				unsigned char *d;
 				int da;
 				int sa = temp->alpha;
 				int hh = temp->h;
 
 				fz_color_converter cc;
 				int cn = fz_colorspace_n(ctx, colorspace);
 				int m = dest->n - dest->alpha;
 				int n = fz_colorspace_n(ctx, dest->colorspace);
 				fz_find_color_converter(ctx, &cc, NULL, dest->colorspace, colorspace, color_params);
 				for (i = 0; i < 256; i++)
 				{
 					cc.convert(ctx, &cc, color, shade->function[i]);
 					for (k = 0; k < n; k++)
 						clut[i][k] = color[k] * 255;
 					for (; k < m; k++)
 						clut[i][k] = 0;
 					clut[i][k] = shade->function[i][cn] * 255;
 				}
 				fz_drop_color_converter(ctx, &cc);
 
 				conv = fz_new_pixmap_with_bbox(ctx, dest->colorspace, bbox, dest->seps, 1);
 				d = conv->samples;
 				da = conv->alpha;
 				while (hh--)
 				{
 					int len = temp->w;
 					while (len--)
 					{
 						int v = *s++;
 						int a = (da ? clut[v][conv->n - 1] : 255);
 						if (sa)
 							a = fz_mul255(*s++, a);
 						for (k = 0; k < conv->n - da; k++)
 							*d++ = fz_mul255(clut[v][k], a);
 						if (da)
 							*d++ = a;
 					}
 					d += conv->stride - conv->w * conv->n;
 					s += temp->stride - temp->w * temp->n;
 				}
 			}
 			fz_paint_pixmap_with_overprint(dest, conv, op);
-			fz_drop_pixmap(ctx, conv);
 		}
 	}
 	fz_always(ctx)
-	{
-		if (temp != dest)
-			fz_drop_pixmap(ctx, temp);
-		fz_fin_cached_color_converter(ctx, &ptd.cc);
-	}
-	fz_catch(ctx)
 	{
 		if (shade->use_function)
 		{
-			fz_drop_pixmap(ctx, conv);
 			fz_drop_pixmap(ctx, temp);
+			fz_drop_pixmap(ctx, conv);
 		}
-		fz_rethrow(ctx);
+		fz_fin_cached_color_converter(ctx, &ptd.cc);
 	}
+	fz_catch(ctx)
+		fz_rethrow(ctx);
 }
