commit 18384d6c6cbb666d08d08c0dabc4a0d1b7623f6f
Author: Josh Haberman <jhaberman@gmail.com>
Date:   Mon Feb 19 13:36:36 2018 -0800

    Fixed bug found by fuzzing.
    
    Thanks to OSS-Fuzz for finding the bug.
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=5873

diff --git a/src/disassemble.cc b/src/disassemble.cc
index f0a0365..b1bb710 100644
--- a/src/disassemble.cc
+++ b/src/disassemble.cc
@@ -46,43 +46,48 @@ static std::string RightPad(const std::string& input, size_t size) {
 }  // anonymous namespace
 
 void DisassembleFindReferences(const DisassemblyInfo& info, RangeSink* sink) {
+  if (info.arch != CS_ARCH_X86) {
+    // x86 only for now.
+    return;
+  }
+
   csh handle;
   if (cs_open(info.arch, info.mode, &handle) != CS_ERR_OK ||
       cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON) != CS_ERR_OK) {
     THROW("Couldn't initialize Capstone");
   }
 
   if (info.text.size() == 0) {
     THROW("Tried to disassemble empty function.");
   }
 
   cs_insn *in = cs_malloc(handle);
   uint64_t address = info.start_address;
   const uint8_t* ptr = reinterpret_cast<const uint8_t*>(info.text.data());
   size_t size = info.text.size();
 
   while (size > 0) {
     if (!cs_disasm_iter(handle, &ptr, &size, &address, in)) {
       // Some symbols that end up in the .text section aren't really functions
       // but data.  Not sure why this happens.
       if (verbose_level > 1) {
         printf("Error disassembling function at address: %" PRIx64 "\n",
                address);
       }
       goto cleanup;
     }
 
     size_t count = in->detail->x86.op_count;
     for (size_t i = 0; i < count; i++) {
       cs_x86_op* op = &in->detail->x86.operands[i];
       if (op->type == X86_OP_MEM && op->mem.base == X86_REG_RIP &&
           op->mem.segment == X86_REG_INVALID &&
           op->mem.index == X86_REG_INVALID) {
         uint64_t to_address = in->address + in->size + op->mem.disp;
         if (to_address) {
           sink->AddVMRangeFor("x86_disassemble", in->address, to_address,
                               RangeSink::kUnknownSize);
         }
       }
     }
   }
diff --git a/tests/testdata/fuzz_corpus/f5d4fb20f43ef7131ed49ff29f5c1bee69070ff2 b/tests/testdata/fuzz_corpus/f5d4fb20f43ef7131ed49ff29f5c1bee69070ff2
new file mode 100644
index 0000000..ee17dbf
Binary files /dev/null and b/tests/testdata/fuzz_corpus/f5d4fb20f43ef7131ed49ff29f5c1bee69070ff2 differ
