commit 4d630a05c30c8d178dd1de0d1cf309e9c4e5bcca
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Sun Mar 19 13:12:10 2023 +0100

    malloc-fail: Fix memory leak in xsltCompileAttr
    
    Also report malloc failures.
    
    Found by OSS-Fuzz, see #84.

diff --git a/libxslt/attrvt.c b/libxslt/attrvt.c
index 3d51feda..6157fcdf 100644
--- a/libxslt/attrvt.c
+++ b/libxslt/attrvt.c
@@ -178,152 +178,158 @@ void
 xsltCompileAttr(xsltStylesheetPtr style, xmlAttrPtr attr) {
     const xmlChar *str;
     const xmlChar *cur;
     xmlChar *ret = NULL;
     xmlChar *expr = NULL;
+    xmlXPathCompExprPtr comp = NULL;
     xsltAttrVTPtr avt;
     int i = 0, lastavt = 0;
 
     if ((style == NULL) || (attr == NULL) || (attr->children == NULL))
         return;
     if ((attr->children->type != XML_TEXT_NODE) ||
         (attr->children->next != NULL)) {
         xsltTransformError(NULL, style, attr->parent,
 	    "Attribute '%s': The content is expected to be a single text "
 	    "node when compiling an AVT.\n", attr->name);
 	style->errors++;
 	return;
     }
     str = attr->children->content;
     if ((xmlStrchr(str, '{') == NULL) &&
         (xmlStrchr(str, '}') == NULL)) return;
 
 #ifdef WITH_XSLT_DEBUG_AVT
     xsltGenericDebug(xsltGenericDebugContext,
 		    "Found AVT %s: %s\n", attr->name, str);
 #endif
     if (attr->psvi != NULL) {
 #ifdef WITH_XSLT_DEBUG_AVT
 	xsltGenericDebug(xsltGenericDebugContext,
 			"AVT %s: already compiled\n", attr->name);
 #endif
         return;
     }
     /*
     * Create a new AVT object.
     */
     avt = xsltNewAttrVT(style);
     if (avt == NULL)
 	return;
     attr->psvi = avt;
 
     avt->nsList = xmlGetNsList(attr->doc, attr->parent);
     if (avt->nsList != NULL) {
 	while (avt->nsList[i] != NULL)
 	    i++;
     }
     avt->nsNr = i;
 
     cur = str;
     while (*cur != 0) {
 	if (*cur == '{') {
 	    if (*(cur+1) == '{') {	/* escaped '{' */
 	        cur++;
 		ret = xmlStrncat(ret, str, cur - str);
 		cur++;
 		str = cur;
 		continue;
 	    }
 	    if (*(cur+1) == '}') {	/* skip empty AVT */
 		ret = xmlStrncat(ret, str, cur - str);
 	        cur += 2;
 		str = cur;
 		continue;
 	    }
 	    if ((ret != NULL) || (cur - str > 0)) {
 		ret = xmlStrncat(ret, str, cur - str);
 		str = cur;
 		if (avt->nb_seg == 0)
 		    avt->strstart = 1;
 		if ((avt = xsltSetAttrVTsegment(avt, (void *) ret)) == NULL)
 		    goto error;
 		ret = NULL;
 		lastavt = 0;
 	    }
 
 	    cur++;
 	    while ((*cur != 0) && (*cur != '}')) {
 		/* Need to check for literal (bug539741) */
 		if ((*cur == '\'') || (*cur == '"')) {
 		    char delim = *(cur++);
 		    while ((*cur != 0) && (*cur != delim))
 			cur++;
 		    if (*cur != 0)
 			cur++;	/* skip the ending delimiter */
 		} else
 		    cur++;
 	    }
 	    if (*cur == 0) {
 	        xsltTransformError(NULL, style, attr->parent,
 		     "Attribute '%s': The AVT has an unmatched '{'.\n",
 		     attr->name);
 		style->errors++;
 		goto error;
 	    }
 	    str++;
 	    expr = xmlStrndup(str, cur - str);
 	    if (expr == NULL) {
 		/*
 		* TODO: What needs to be done here?
 		*/
 	        XSLT_TODO
 		goto error;
 	    } else {
-		xmlXPathCompExprPtr comp;
-
 		comp = xsltXPathCompile(style, expr);
 		if (comp == NULL) {
 		    xsltTransformError(NULL, style, attr->parent,
 			 "Attribute '%s': Failed to compile the expression "
 			 "'%s' in the AVT.\n", attr->name, expr);
 		    style->errors++;
 		    goto error;
 		}
 		if (avt->nb_seg == 0)
 		    avt->strstart = 0;
 		if (lastavt == 1) {
-		    if ((avt = xsltSetAttrVTsegment(avt, NULL)) == NULL)
+		    if ((avt = xsltSetAttrVTsegment(avt, NULL)) == NULL) {
+                        xsltTransformError(NULL, style, attr->parent,
+                                           "out of memory\n");
 		        goto error;
+                    }
 		}
-		if ((avt = xsltSetAttrVTsegment(avt, (void *) comp)) == NULL)
+		if ((avt = xsltSetAttrVTsegment(avt, (void *) comp)) == NULL) {
+                    xsltTransformError(NULL, style, attr->parent,
+                                       "out of memory\n");
 		    goto error;
+                }
 		lastavt = 1;
 		xmlFree(expr);
 		expr = NULL;
+                comp = NULL;
 	    }
 	    cur++;
 	    str = cur;
 	} else if (*cur == '}') {
 	    cur++;
 	    if (*cur == '}') {	/* escaped '}' */
 		ret = xmlStrncat(ret, str, cur - str);
 		cur++;
 		str = cur;
 		continue;
 	    } else {
 	        xsltTransformError(NULL, style, attr->parent,
 		     "Attribute '%s': The AVT has an unmatched '}'.\n",
 		     attr->name);
 		goto error;
 	    }
 	} else
 	    cur++;
     }
     if ((ret != NULL) || (cur - str > 0)) {
 	ret = xmlStrncat(ret, str, cur - str);
 	str = cur;
 	if (avt->nb_seg == 0)
 	    avt->strstart = 1;
 	if ((avt = xsltSetAttrVTsegment(avt, (void *) ret)) == NULL)
 	    goto error;
 	ret = NULL;
     }
@@ -331,34 +337,36 @@ xsltCompileAttr(xsltStylesheetPtr style, xmlAttrPtr attr) {
 error:
     if (avt == NULL) {
         xsltTransformError(NULL, style, attr->parent,
 		"xsltCompileAttr: malloc problem\n");
     } else {
         if (attr->psvi != avt) {  /* may have changed from realloc */
             attr->psvi = avt;
 	    /*
 	     * This is a "hack", but I can't see any clean method of
 	     * doing it.  If a re-alloc has taken place, then the pointer
 	     * for this AVT may have changed.  style->attVTs was set by
 	     * xsltNewAttrVT, so it needs to be re-set to the new value!
 	     */
 	    style->attVTs = avt;
 	}
     }
     if (ret != NULL)
 	xmlFree(ret);
     if (expr != NULL)
 	xmlFree(expr);
+    if (comp != NULL)
+        xmlXPathFreeCompExpr(comp);
 }
 
 
 /**
  * xsltEvalAVT:
  * @ctxt: the XSLT transformation context
  * @avt: the prevompiled attribute value template info
  * @node: the node hosting the attribute
  *
  * Process the given AVT, and return the new string value.
  *
  * Returns the computed string value or NULL, must be deallocated by the
  *         caller.
  */
