commit 64396aa487fc24cd26b62a9b92e13a952c6ecf74
Author: Antoine Pitrou <antoine@python.org>
Date:   Wed Nov 11 10:33:43 2020 +0900

    ARROW-10545: [C++] Fix crash on invalid Parquet file (OSS-Fuzz)
    
    Also removed a memory allocation (probably not performance-critical).
    
    Closes #8626 from pitrou/ARROW-10545-parquet-oss-fuzz
    
    Authored-by: Antoine Pitrou <antoine@python.org>
    Signed-off-by: Sutou Kouhei <kou@clear-code.com>

diff --git a/cpp/src/parquet/level_conversion.cc b/cpp/src/parquet/level_conversion.cc
index fadd56e1d..ffdca476d 100644
--- a/cpp/src/parquet/level_conversion.cc
+++ b/cpp/src/parquet/level_conversion.cc
@@ -1,31 +1,32 @@
 // Licensed to the Apache Software Foundation (ASF) under one
 // or more contributor license agreements.  See the NOTICE file
 // distributed with this work for additional information
 // regarding copyright ownership.  The ASF licenses this file
 // to you under the Apache License, Version 2.0 (the
 // "License"); you may not use this file except in compliance
 // with the License.  You may obtain a copy of the License at
 //
 //   http://www.apache.org/licenses/LICENSE-2.0
 //
 // Unless required by applicable law or agreed to in writing,
 // software distributed under the License is distributed on an
 // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 // KIND, either express or implied.  See the License for the
 // specific language governing permissions and limitations
 // under the License.
 #include "parquet/level_conversion.h"
 
 #include <algorithm>
 #include <limits>
 
 #include "arrow/util/bit_run_reader.h"
 #include "arrow/util/bit_util.h"
 #include "arrow/util/cpu_info.h"
 #include "arrow/util/logging.h"
+#include "arrow/util/optional.h"
 #include "parquet/exception.h"
 
 #include "parquet/level_comparison.h"
 #define PARQUET_IMPL_NAMESPACE standard
 #include "parquet/level_conversion_inc.h"
 #undef PARQUET_IMPL_NAMESPACE
@@ -35,92 +36,93 @@ namespace internal {
 namespace {
 
 using ::arrow::internal::CpuInfo;
+using ::arrow::util::optional;
 
 template <typename OffsetType>
 void DefRepLevelsToListInfo(const int16_t* def_levels, const int16_t* rep_levels,
                             int64_t num_def_levels, LevelInfo level_info,
                             ValidityBitmapInputOutput* output, OffsetType* offsets) {
   OffsetType* orig_pos = offsets;
-  std::unique_ptr<::arrow::internal::FirstTimeBitmapWriter> valid_bits_writer;
+  optional<::arrow::internal::FirstTimeBitmapWriter> valid_bits_writer;
   if (output->valid_bits) {
-    valid_bits_writer.reset(new ::arrow::internal::FirstTimeBitmapWriter(
-        output->valid_bits, output->valid_bits_offset, num_def_levels));
+    valid_bits_writer.emplace(output->valid_bits, output->valid_bits_offset,
+                              output->values_read_upper_bound);
   }
   for (int x = 0; x < num_def_levels; x++) {
     // Skip items that belong to empty or null ancestor lists and further nested lists.
     if (def_levels[x] < level_info.repeated_ancestor_def_level ||
         rep_levels[x] > level_info.rep_level) {
       continue;
     }
 
     if (rep_levels[x] == level_info.rep_level) {
       // A continuation of an existing list.
       // offsets can be null for structs with repeated children (we don't need to know
       // offsets until we get to the children).
       if (offsets != nullptr) {
         if (ARROW_PREDICT_FALSE(*offsets == std::numeric_limits<OffsetType>::max())) {
           throw ParquetException("List index overflow.");
         }
         *offsets += 1;
       }
     } else {
       if (ARROW_PREDICT_FALSE(
-              (valid_bits_writer != nullptr &&
+              (valid_bits_writer.has_value() &&
                valid_bits_writer->position() >= output->values_read_upper_bound) ||
               (offsets - orig_pos) >= output->values_read_upper_bound)) {
         std::stringstream ss;
         ss << "Definition levels exceeded upper bound: "
            << output->values_read_upper_bound;
         throw ParquetException(ss.str());
       }
 
       // current_rep < list rep_level i.e. start of a list (ancestor empty lists are
       // filtered out above).
       // offsets can be null for structs with repeated children (we don't need to know
       // offsets until we get to the children).
       if (offsets != nullptr) {
         ++offsets;
         // Use cumulative offsets because variable size lists are more common then
         // fixed size lists so it should be cheaper to make these cumulative and
         // subtract when validating fixed size lists.
         *offsets = *(offsets - 1);
         if (def_levels[x] >= level_info.def_level) {
           if (ARROW_PREDICT_FALSE(*offsets == std::numeric_limits<OffsetType>::max())) {
             throw ParquetException("List index overflow.");
           }
           *offsets += 1;
         }
       }
 
-      if (valid_bits_writer != nullptr) {
+      if (valid_bits_writer.has_value()) {
         // the level_info def level for lists reflects element present level.
         // the prior level distinguishes between empty lists.
         if (def_levels[x] >= level_info.def_level - 1) {
           valid_bits_writer->Set();
         } else {
           output->null_count++;
           valid_bits_writer->Clear();
         }
         valid_bits_writer->Next();
       }
     }
   }
-  if (valid_bits_writer != nullptr) {
+  if (valid_bits_writer.has_value()) {
     valid_bits_writer->Finish();
   }
   if (offsets != nullptr) {
     output->values_read = offsets - orig_pos;
-  } else if (valid_bits_writer != nullptr) {
+  } else if (valid_bits_writer.has_value()) {
     output->values_read = valid_bits_writer->position();
   }
   if (output->null_count > 0 && level_info.null_slot_usage > 1) {
     throw ParquetException(
         "Null values with null_slot_usage > 1 not supported."
         "(i.e. FixedSizeLists with null values are not supported)");
   }
 }
 
 }  // namespace
 
 #if defined(ARROW_HAVE_RUNTIME_BMI2)
 // defined in level_conversion_bmi2.cc for dynamic dispatch.
diff --git a/cpp/src/parquet/level_conversion.h b/cpp/src/parquet/level_conversion.h
index d406724ce..d4d68457a 100644
--- a/cpp/src/parquet/level_conversion.h
+++ b/cpp/src/parquet/level_conversion.h
@@ -137,26 +137,26 @@ struct PARQUET_EXPORT LevelInfo {
 // Input/Output structure for reconstructed validity bitmaps.
 struct PARQUET_EXPORT ValidityBitmapInputOutput {
   // Input only.
   // The maximum number of values_read expected (actual
-  // values read must be less than or equal to this value.
+  // values read must be less than or equal to this value).
   // If this number is exceeded methods will throw a
   // ParquetException. Exceeding this limit indicates
   // either a corrupt or incorrectly written file.
   int64_t values_read_upper_bound = 0;
   // Output only. The number of values added to the encountered
-  // (this is logicallyt he count of the number of elements
+  // (this is logically the count of the number of elements
   // for an Arrow array).
   int64_t values_read = 0;
   // Input/Output. The number of nulls encountered.
   int64_t null_count = 0;
   // Output only. The validity bitmap to populate. May be be null only
   // for DefRepLevelsToListInfo (if all that is needed is list offsets).
   uint8_t* valid_bits = NULLPTR;
   // Input only, offset into valid_bits to start at.
   int64_t valid_bits_offset = 0;
 };
 
 //  Converts def_levels to validity bitmaps for non-list arrays and structs that have
 //  at least one member that is not a list and has no list descendents.
 //  For lists use DefRepLevelsToList and structs where all descendants contain
 //  a list use DefRepLevelsToBitmap.
diff --git a/testing b/testing
index 860376d4e..3ab0d5352 160000
--- a/testing
+++ b/testing
@@ -1 +1 @@
-Subproject commit 860376d4e586a3ac34ec93089889da624ead6c2a
+Subproject commit 3ab0d53528a050c370a31c3741574250a6e88a4d
