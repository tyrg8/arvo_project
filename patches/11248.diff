commit 97bbfd67d7fa4d633e10e3dc90fd523051607836
Author: LE GARREC Vincent <gitlab-freedesktop@le-garrec.fr>
Date:   Wed Apr 17 10:59:34 2019 +0000

    ofz-11248: Use-of-uninitialized-value in Parser::makeStream

diff --git a/poppler/Hints.cc b/poppler/Hints.cc
index aeb7542c..05d2f74d 100644
--- a/poppler/Hints.cc
+++ b/poppler/Hints.cc
@@ -103,52 +103,54 @@ private:
 Hints::Hints(BaseStream *str, Linearization *linearization, XRef *xref, SecurityHandler *secHdlr)
 {
   mainXRefEntriesOffset = linearization->getMainXRefEntriesOffset();
   nPages = linearization->getNumPages();
   pageFirst = linearization->getPageFirst();
   pageEndFirst = linearization->getEndFirst();
   pageObjectFirst = linearization->getObjectNumberFirst();
   if (pageObjectFirst < 0 || pageObjectFirst >= xref->getNumObjects()) {
     error(errSyntaxWarning, -1,
       "Invalid reference for first page object ({0:d}) in linearization table ",
       pageObjectFirst);
     pageObjectFirst = 0;
   }
   XRefEntry *pageObjectFirstXRefEntry = xref->getEntry(pageObjectFirst);
   if (!pageObjectFirstXRefEntry) {
       error(errSyntaxWarning, -1, "No XRef entry for first page object");
       pageOffsetFirst = 0;
   } else {
       pageOffsetFirst = pageObjectFirstXRefEntry->offset;
   }
 
   if (nPages >= INT_MAX / (int)sizeof(unsigned int)) {
      error(errSyntaxWarning, -1, "Invalid number of pages ({0:d}) for hints table", nPages);
      nPages = 0;
   }
   nObjects = (unsigned int *) gmallocn_checkoverflow(nPages, sizeof(unsigned int));
   pageObjectNum = (int *) gmallocn_checkoverflow(nPages, sizeof(int));
   xRefOffset = (unsigned int *) gmallocn_checkoverflow(nPages, sizeof(unsigned int));
   pageLength = (unsigned int *) gmallocn_checkoverflow(nPages, sizeof(unsigned int));
   pageOffset = (Goffset *) gmallocn_checkoverflow(nPages, sizeof(Goffset));
   numSharedObject = (unsigned int *) gmallocn_checkoverflow(nPages, sizeof(unsigned int));
   sharedObjectId = (unsigned int **) gmallocn_checkoverflow(nPages, sizeof(unsigned int*));
   if (!nObjects || !pageObjectNum || !xRefOffset || !pageLength || !pageOffset ||
       !numSharedObject || !sharedObjectId) {
     error(errSyntaxWarning, -1, "Failed to allocate memory for hints table");
     nPages = 0;
   }
 
-  memset(pageLength, 0, nPages * sizeof(unsigned int));
-  memset(pageOffset, 0, nPages * sizeof(unsigned int));
-  memset(numSharedObject, 0, nPages * sizeof(unsigned int));
-  memset(pageObjectNum, 0, nPages * sizeof(int));
+  if (nPages != 0) {
+    memset(pageLength, 0, nPages * sizeof(unsigned int));
+    memset(pageOffset, 0, nPages * sizeof(unsigned int));
+    memset(numSharedObject, 0, nPages * sizeof(unsigned int));
+    memset(pageObjectNum, 0, nPages * sizeof(int));
+  }
 
   groupLength = nullptr;
   groupOffset = nullptr;
   groupHasSignature = nullptr;
   groupNumObjects = nullptr;
   groupXRefOffset = nullptr;
 
   ok = true;
   readTables(str, linearization, xref, secHdlr);
 }
diff --git a/poppler/XRef.cc b/poppler/XRef.cc
index 68f92d05..87a08c7d 100644
--- a/poppler/XRef.cc
+++ b/poppler/XRef.cc
@@ -1,74 +1,75 @@
 //========================================================================
 //
 // XRef.cc
 //
 // Copyright 1996-2003 Glyph & Cog, LLC
 //
 //========================================================================
 
 //========================================================================
 //
 // Modified under the Poppler project - http://poppler.freedesktop.org
 //
 // All changes made under the Poppler project to this file are licensed
 // under GPL version 2 or later
 //
 // Copyright (C) 2005 Dan Sheridan <dan.sheridan@postman.org.uk>
 // Copyright (C) 2005 Brad Hards <bradh@frogmouth.net>
 // Copyright (C) 2006, 2008, 2010, 2012-2014, 2016-2019 Albert Astals Cid <aacid@kde.org>
 // Copyright (C) 2007-2008 Julien Rebetez <julienr@svn.gnome.org>
 // Copyright (C) 2007 Carlos Garcia Campos <carlosgc@gnome.org>
 // Copyright (C) 2009, 2010 Ilya Gorenbein <igorenbein@finjan.com>
 // Copyright (C) 2010 Hib Eris <hib@hiberis.nl>
 // Copyright (C) 2012, 2013, 2016 Thomas Freitag <Thomas.Freitag@kabelmail.de>
 // Copyright (C) 2012, 2013 Fabio D'Urso <fabiodurso@hotmail.it>
 // Copyright (C) 2013, 2014, 2017 Adrian Johnson <ajohnson@redneon.com>
 // Copyright (C) 2013 Pino Toscano <pino@kde.org>
 // Copyright (C) 2016 Jakub Alba <jakubalba@gmail.com>
 // Copyright (C) 2018, 2019 Adam Reichold <adam.reichold@t-online.de>
 // Copyright (C) 2018 Tobias Deiminger <haxtibal@posteo.de>
+// Copyright (C) 2019 LE GARREC Vincent <legarrec.vincent@gmail.com>
 //
 // To see a description of the changes please see the Changelog file that
 // came with your tarball or type make ChangeLog if you are building from git
 //
 //========================================================================
 
 #include <config.h>
 #include "poppler-config.h"
 
 #include <stdlib.h>
 #include <stddef.h>
 #include <string.h>
 #include <math.h>
 #include <ctype.h>
 #include <limits.h>
 #include <float.h>
 #include "goo/gfile.h"
 #include "goo/gmem.h"
 #include "Object.h"
 #include "Stream.h"
 #include "Lexer.h"
 #include "Parser.h"
 #include "Dict.h"
 #include "Error.h"
 #include "ErrorCodes.h"
 #include "XRef.h"
 
 //------------------------------------------------------------------------
 // Permission bits
 // Note that the PDF spec uses 1 base (eg bit 3 is 1<<2)
 //------------------------------------------------------------------------
 
 #define permPrint         (1<<2)  // bit 3
 #define permChange        (1<<3)  // bit 4
 #define permCopy          (1<<4)  // bit 5
 #define permNotes         (1<<5)  // bit 6
 #define permFillForm      (1<<8)  // bit 9
 #define permAccessibility (1<<9)  // bit 10
 #define permAssemble      (1<<10) // bit 11
 #define permHighResPrint  (1<<11) // bit 12
 #define defPermFlags 0xfffc
 
 //------------------------------------------------------------------------
 // ObjectStream
 //------------------------------------------------------------------------
@@ -1563,41 +1564,42 @@ DummyXRefEntry dummyXRefEntry;
 XRefEntry *XRef::getEntry(int i, bool complainIfMissing)
 {
   if (unlikely(i < 0)) {
     error(errInternal, -1, "Request for invalid XRef entry [{0:d}]", i);
     return &dummyXRefEntry;
   }
 
   if (i >= size || entries[i].type == xrefEntryNone) {
 
     if ((!xRefStream) && mainXRefEntriesOffset) {
       if (unlikely(i >= capacity)) {
 	error(errInternal, -1, "Request for out-of-bounds XRef entry [{0:d}]", i);
 	return &dummyXRefEntry;
       }
 
       if (!parseEntry(mainXRefEntriesOffset + 20*i, &entries[i])) {
-        error(errSyntaxError, -1, "Failed to parse XRef entry [{0:d}].", i);
+	error(errSyntaxError, -1, "Failed to parse XRef entry [{0:d}].", i);
+	return &dummyXRefEntry;
       }
     } else {
       // Read XRef tables until the entry we're looking for is found
       readXRefUntil(i);
       
       // We might have reconstructed the xref
       // Check again i is in bounds
       if (unlikely(i >= size)) {
 	return &dummyXRefEntry;
       }
 
       if (entries[i].type == xrefEntryNone) {
         if (complainIfMissing) {
           error(errSyntaxError, -1, "Invalid XRef entry {0:d}", i);
         }
         entries[i].type = xrefEntryFree;
       }
     }
   }
 
   return &entries[i];
 }
 
 // Recursively sets the Unencrypted flag in all referenced xref entries
