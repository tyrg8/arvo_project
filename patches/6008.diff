commit 79de802e7586ab4339b7b81e3d3501d5fcffd57a
Author: Dirk Lemstra <dirk@git.imagemagick.org>
Date:   Sun Mar 4 22:06:42 2018 +0100

    Fixed setting the alpha channel for the merged image in a grayscale image (https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6008).

diff --git a/coders/psd.c b/coders/psd.c
index dcacb60a1..b41e7d8f2 100644
--- a/coders/psd.c
+++ b/coders/psd.c
@@ -1063,46 +1063,46 @@ static MagickBooleanType ReadPSDChannelPixels(Image *image,
 static MagickBooleanType ReadPSDChannelRaw(Image *image,const size_t channels,
   const ssize_t type,ExceptionInfo *exception)
 {
   MagickBooleanType
     status;
 
   size_t
     count,
     row_size;
 
   ssize_t
     y;
 
   unsigned char
     *pixels;
 
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(CoderEvent,GetMagickModule(),
        "      layer data is RAW");
 
   row_size=GetPSDRowSize(image);
   pixels=(unsigned char *) AcquireQuantumMemory(row_size,sizeof(*pixels));
   if (pixels == (unsigned char *) NULL)
     ThrowBinaryException(ResourceLimitError,"MemoryAllocationFailed",
       image->filename);
 
   status=MagickTrue;
   for (y=0; y < (ssize_t) image->rows; y++)
   {
     status=MagickFalse;
 
     count=ReadBlob(image,row_size,pixels);
     if (count != row_size)
-    {
-      status=MagickFalse;
-      break;
-    }
+      {
+        status=MagickFalse;
+        break;
+      }
 
     status=ReadPSDChannelPixels(image,channels,y,type,pixels,exception);
     if (status == MagickFalse)
       break;
   }
 
   pixels=(unsigned char *) RelinquishMagickMemory(pixels);
   return(status);
 }
@@ -1978,60 +1978,67 @@ ModuleExport MagickBooleanType ReadPSDLayers(Image *image,
 static MagickBooleanType ReadPSDMergedImage(const ImageInfo *image_info,
   Image *image,const PSDInfo *psd_info,ExceptionInfo *exception)
 {
   MagickOffsetType
     *sizes;
 
   MagickBooleanType
     status;
 
   PSDCompressionType
     compression;
 
   register ssize_t
     i;
 
   compression=(PSDCompressionType) ReadBlobMSBShort(image);
   image->compression=ConvertPSDCompression(compression);
 
   if (compression != Raw && compression != RLE)
     {
       (void) ThrowMagickException(exception,GetMagickModule(),
         TypeWarning,"CompressionNotSupported","'%.20g'",(double) compression);
       return(MagickFalse);
     }
 
   sizes=(MagickOffsetType *) NULL;
   if (compression == RLE)
     {
       sizes=ReadPSDRLESizes(image,psd_info,image->rows*psd_info->channels);
       if (sizes == (MagickOffsetType *) NULL)
         ThrowBinaryException(ResourceLimitError,"MemoryAllocationFailed",
           image->filename);
     }
 
   status=MagickTrue;
   for (i=0; i < (ssize_t) psd_info->channels; i++)
   {
+    ssize_t
+      type;
+
+    type=i;
+    if ((type == 1) && (psd_info->channels == 2))
+      type=-1;
+
     if (compression == RLE)
-      status=ReadPSDChannelRLE(image,psd_info,i,sizes+(i*image->rows),
+      status=ReadPSDChannelRLE(image,psd_info,type,sizes+(i*image->rows),
         exception);
     else
-      status=ReadPSDChannelRaw(image,psd_info->channels,i,exception);
+      status=ReadPSDChannelRaw(image,psd_info->channels,type,exception);
 
     if (status != MagickFalse)
       status=SetImageProgress(image,LoadImagesTag,i,psd_info->channels);
 
     if (status == MagickFalse)
       break;
   }
 
   if ((status != MagickFalse) && (image->colorspace == CMYKColorspace))
     status=NegateCMYK(image,exception);
 
   if (status != MagickFalse)
     status=CorrectPSDAlphaBlend(image_info,image,exception);
 
   sizes=(MagickOffsetType *) RelinquishMagickMemory(sizes);
 
   return(status);
 }
