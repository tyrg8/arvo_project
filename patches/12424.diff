commit bc0f0522419f1be77378120a4b946c82da4ac635
Author: Christian Blichmann <cblichmann@users.noreply.github.com>
Date:   Fri Aug 18 08:53:04 2023 +0200

    DEX: Replace remaining calls to read_uleb128() (#1951)
    
    This is a follow-up to PR #1949, replacing all remaingin uses of
    `read_uleb128()` in `dex.c`.
    
    It also fixes another heap-buffer-overflow, again found by fuzzing.
    
    Tested with `test-dex.c`

diff --git a/libyara/modules/dex/dex.c b/libyara/modules/dex/dex.c
index 5fe167e2..b45f171f 100644
--- a/libyara/modules/dex/dex.c
+++ b/libyara/modules/dex/dex.c
@@ -434,13 +434,6 @@ error:
 }
 
 
-static int32_t read_uleb128(const uint8_t* pStream, uint32_t* size)
-{
-  bool error;
-  return read_uleb128_bounded(pStream, (const uint8_t*) SIZE_MAX, size, &error);
-}
-
-
 static int64_t dex_get_integer(
     YR_OBJECT* object,
     const char* pattern,
@@ -583,134 +576,142 @@ void dex_parse_header(dex_header_t* dex_header, YR_OBJECT* module_object)
 uint32_t load_encoded_field(
     DEX* dex,
     size_t start_offset,
     uint32_t* previous_field_idx,
     int index_encoded_field,
     int static_field,
     int instance_field)
 {
 #ifdef DEBUG_DEX_MODULE
   printf("[DEX] Parse encoded field start_offset:0x%zx\n", start_offset);
 #endif
 
+  const uint8_t* data_cur_start = dex->data + start_offset;
   if (!fits_in_dex(dex, dex->data + start_offset, sizeof(uint32_t) * 2))
     return 0;
 
+  const uint8_t* data_end = dex->data + dex->data_size;
   uint32_t current_size = 0;
-
+  bool error = false;
   encoded_field_t encoded_field;
 
-  encoded_field.field_idx_diff = (uint32_t) read_uleb128(
-      (dex->data + start_offset + current_size), &current_size);
+  encoded_field.field_idx_diff =
+      (uint32_t) read_uleb128_bounded((dex->data + start_offset + current_size),
+                                      data_end, &current_size, &error);
+  if (error)
+    return 0;
 
-  encoded_field.access_flags = (uint32_t) read_uleb128(
-      (dex->data + start_offset + current_size), &current_size);
+  encoded_field.access_flags =
+      (uint32_t) read_uleb128_bounded((dex->data + start_offset + current_size),
+                                      data_end, &current_size, &error);
+  if (error)
+    return 0;
 
   yr_set_integer(
       encoded_field.field_idx_diff,
       dex->object,
       "field[%i].field_idx_diff",
       index_encoded_field);
 
   yr_set_integer(
       encoded_field.access_flags,
       dex->object,
       "field[%i].access_flags",
       index_encoded_field);
 
   yr_set_integer(
       static_field, dex->object, "field[%i].static", index_encoded_field);
 
   yr_set_integer(
       instance_field, dex->object, "field[%i].instance", index_encoded_field);
 
   *previous_field_idx = encoded_field.field_idx_diff + *previous_field_idx;
 
 #ifdef DEBUG_DEX_MODULE
   printf(
       "[DEX]\tEncoded field field_idx:0x%x field_idx_diff:0x%x "
       "access_flags:0x%x\n",
       *previous_field_idx,
       encoded_field.field_idx_diff,
       encoded_field.access_flags);
 #endif
 
   int64_t name_idx = dex_get_integer(
       dex->object, "field_ids[%i].name_idx", *previous_field_idx);
 
   if (name_idx == YR_UNDEFINED)
     return 0;
 
   SIZED_STRING* field_name = dex_get_string(
       dex->object, "string_ids[%i].value", name_idx);
 
   if (field_name != NULL)
   {
 #ifdef DEBUG_DEX_MODULE
     printf(
         "[DEX]\tFIELD_NAME %s NAME_IDX 0x%llx\n", field_name->c_string, name_idx);
 #endif
 
     yr_set_sized_string(
         field_name->c_string,
         field_name->length,
         dex->object,
         "field[%i].name",
         index_encoded_field);
   }
 
   int64_t class_idx = dex_get_integer(
       dex->object, "field_ids[%i].class_idx", *previous_field_idx);
 
   int64_t descriptor_idx = dex_get_integer(
       dex->object, "type_ids[%i].descriptor_idx", class_idx);
 
   SIZED_STRING* class_name = dex_get_string(
       dex->object, "string_ids[%i].value", descriptor_idx);
 
   if (class_name != NULL)
   {
 #ifdef DEBUG_DEX_MODULE
     printf(
         "[DEX]\tCLASS_NAME %s CLASS_IDX 0x%llx DESCRIPTOR_IDX 0x%llx\n",
         class_name->c_string,
         class_idx,
         descriptor_idx);
 #endif
 
     yr_set_sized_string(
         class_name->c_string,
         class_name->length,
         dex->object,
         "field[%i].class_name",
         index_encoded_field);
   }
 
   int type_idx = dex_get_integer(
       dex->object, "field_ids[%i].type_idx", *previous_field_idx);
 
   int shorty_idx = dex_get_integer(
       dex->object, "type_ids[%i].descriptor_idx", type_idx);
 
   SIZED_STRING* proto_name = dex_get_string(
       dex->object, "string_ids[%i].value", shorty_idx);
 
   if (proto_name != NULL)
   {
 #ifdef DEBUG_DEX_MODULE
     printf(
         "[DEX]\tPROTO_NAME %s TYPE_IDX 0x%x SHORTY_IDX 0x%x\n",
         proto_name->c_string,
         type_idx,
         shorty_idx);
 #endif
 
     yr_set_sized_string(
         proto_name->c_string,
         proto_name->length,
         dex->object,
         "field[%i].proto",
         index_encoded_field);
   }
 
   return current_size;
 }
@@ -937,487 +938,501 @@ uint32_t load_encoded_method(
 void dex_parse(DEX* dex, uint64_t base_address)
 {
   dex_header_t* dex_header;
 
   int i, j;
 
   uint32_t uleb128_size = 0;
   uint32_t new_size = 0;
   uint32_t index_class_data_item = 0;
   uint32_t index_encoded_method = 0;
   uint32_t index_encoded_field = 0;
 
+  const uint8_t* data_end = dex->data + dex->data_size;
+
   if (!struct_fits_in_dex(dex, dex->data, dex_header_t))
     return;
 
   dex_parse_header(dex->header, dex->object);
 
   dex_header = dex->header;
 
   if (!fits_in_dex(
           dex,
           dex->data + yr_le32toh(dex_header->string_ids_offset),
           yr_le32toh(dex_header->string_ids_size) * sizeof(string_id_item_t)))
     return;
 
 #ifdef DEBUG_DEX_MODULE
   printf("[DEX] Parse STRING ID section\n");
 #endif
 
   // Get information about the String ID section
   for (i = 0; i < yr_le32toh(dex_header->string_ids_size); i++)
   {
     string_id_item_t* string_id_item =
         (string_id_item_t*) (dex->data + yr_le32toh(dex_header->string_ids_offset) + i * sizeof(string_id_item_t));
 
 #ifdef DEBUG_DEX_MODULE
     printf(
         "[DEX] STRING ID item data_offset:0x%x\n",
         yr_le32toh(string_id_item->string_data_offset));
 #endif
 
     if (!fits_in_dex(
             dex,
             dex->data + yr_le32toh(string_id_item->string_data_offset),
             sizeof(uint32_t)))
       continue;
 
-    uint32_t value = (uint32_t) read_uleb128(
+    bool error = false;
+    uint32_t value = (uint32_t) read_uleb128_bounded(
         (dex->data + yr_le32toh(string_id_item->string_data_offset)),
-        &uleb128_size);
+        data_end, &uleb128_size, &error);
+    if (error)
+      continue;
 
 #ifdef DEBUG_DEX_MODULE
     printf("[DEX] STRING ID item size:0x%x\n", value);
 #endif
 
     if (!fits_in_dex(
             dex,
             dex->data + yr_le32toh(string_id_item->string_data_offset) + 1,
             value))
       continue;
 
     yr_set_integer(
         yr_le32toh(string_id_item->string_data_offset),
         dex->object,
         "string_ids[%i].offset",
         i);
 
     yr_set_integer(value, dex->object, "string_ids[%i].size", i);
 
     yr_set_sized_string(
         (const char*) (
             dex->data + yr_le32toh(string_id_item->string_data_offset) + 1),
         value,
         dex->object,
         "string_ids[%i].value",
         i);
   }
 
   if (!fits_in_dex(
           dex,
           dex->data + yr_le32toh(dex_header->type_ids_offset),
           yr_le32toh(dex_header->type_ids_size) * sizeof(type_id_item_t)))
     return;
 
 #ifdef DEBUG_DEX_MODULE
   printf("[DEX] Parse TYPE ID section\n");
 #endif
 
   // Get information about the Type ID section
   for (i = 0; i < yr_le32toh(dex_header->type_ids_size); i++)
   {
     type_id_item_t* type_id_item =
         (type_id_item_t*) (dex->data + yr_le32toh(dex_header->type_ids_offset) + i * sizeof(type_id_item_t));
 
     yr_set_integer(
         yr_le32toh(type_id_item->descriptor_idx),
         dex->object,
         "type_ids[%i].descriptor_idx",
         i);
   }
 
   if (!fits_in_dex(
           dex,
           dex->data + yr_le32toh(dex_header->proto_ids_offset),
           yr_le32toh(dex_header->proto_ids_size) * sizeof(proto_id_item_t)))
     return;
 
 #ifdef DEBUG_DEX_MODULE
   printf("[DEX] Parse PROTO ID section\n");
 #endif
 
   // Get information about the Proto ID section
   for (i = 0; i < yr_le32toh(dex_header->proto_ids_size); i++)
   {
     proto_id_item_t* proto_id_item =
         (proto_id_item_t*) (dex->data + yr_le32toh(dex_header->proto_ids_offset) + i * sizeof(proto_id_item_t));
 
     yr_set_integer(
         yr_le32toh(proto_id_item->shorty_idx),
         dex->object,
         "proto_ids[%i].shorty_idx",
         i);
     yr_set_integer(
         yr_le32toh(proto_id_item->return_type_idx),
         dex->object,
         "proto_ids[%i].return_type_idx",
         i);
     yr_set_integer(
         yr_le32toh(proto_id_item->parameters_offset),
         dex->object,
         "proto_ids[%i].parameters_offset",
         i);
   }
 
   if (!fits_in_dex(
           dex,
           dex->data + yr_le32toh(dex_header->field_ids_offset),
           yr_le32toh(dex_header->field_ids_size) * sizeof(field_id_item_t)))
     return;
 
 #ifdef DEBUG_DEX_MODULE
   printf("[DEX] Parse FIELD ID section\n");
 #endif
 
   // Get information about the Field ID section
   for (i = 0; i < yr_le32toh(dex_header->field_ids_size); i++)
   {
     field_id_item_t* field_id_item =
         (field_id_item_t*) (dex->data + yr_le32toh(dex_header->field_ids_offset) + i * sizeof(field_id_item_t));
 
     yr_set_integer(
         yr_le16toh(field_id_item->class_idx),
         dex->object,
         "field_ids[%i].class_idx",
         i);
     yr_set_integer(
         yr_le16toh(field_id_item->type_idx),
         dex->object,
         "field_ids[%i].type_idx",
         i);
     yr_set_integer(
         yr_le32toh(field_id_item->name_idx),
         dex->object,
         "field_ids[%i].name_idx",
         i);
   }
 
   if (!fits_in_dex(
           dex,
           dex->data + yr_le32toh(dex_header->method_ids_offset),
           yr_le32toh(dex_header->method_ids_size) * sizeof(method_id_item_t)))
     return;
 
 #ifdef DEBUG_DEX_MODULE
   printf("[DEX] Parse METHOD ID section\n");
 #endif
 
   // Get information about the Method ID section
   for (i = 0; i < yr_le32toh(dex_header->method_ids_size); i++)
   {
     method_id_item_t* method_id_item =
         (method_id_item_t*) (dex->data + yr_le32toh(dex_header->method_ids_offset) + i * sizeof(method_id_item_t));
 
     yr_set_integer(
         yr_le16toh(method_id_item->class_idx),
         dex->object,
         "method_ids[%i].class_idx",
         i);
     yr_set_integer(
         yr_le16toh(method_id_item->proto_idx),
         dex->object,
         "method_ids[%i].proto_idx",
         i);
     yr_set_integer(
         yr_le32toh(method_id_item->name_idx),
         dex->object,
         "method_ids[%i].name_idx",
         i);
   }
 
 #ifdef DEBUG_DEX_MODULE
   printf("[DEX] Parse MAP List ID section\n");
 #endif
 
   // Get information about the Map List ID section
   if (yr_le32toh(dex_header->map_offset) != 0 &&
       fits_in_dex(
           dex,
           dex->data + yr_le32toh(dex_header->map_offset),
           sizeof(uint32_t)))
   {
     uint32_t* map_list_size =
         (uint32_t*) (dex->data + yr_le32toh(dex_header->map_offset));
 
     yr_set_integer(yr_le32toh(*map_list_size), dex->object, "map_list.size");
 
     if (!fits_in_dex(
             dex,
             dex->data + yr_le32toh(dex_header->map_offset),
             sizeof(uint32_t) + yr_le32toh(*map_list_size) * sizeof(map_item_t)))
       return;
 
     for (i = 0; i < yr_le32toh(*map_list_size); i++)
     {
       map_item_t* map_item =
           (map_item_t*) (dex->data + yr_le32toh(dex_header->map_offset) + sizeof(uint32_t) + i * sizeof(map_item_t));
 
       if (!struct_fits_in_dex(dex, map_item, map_item_t))
         return;
 
       yr_set_integer(
           yr_le16toh(map_item->type),
           dex->object,
           "map_list.map_item[%i].type",
           i);
       yr_set_integer(
           yr_le16toh(map_item->unused),
           dex->object,
           "map_list.map_item[%i].unused",
           i);
       yr_set_integer(
           yr_le32toh(map_item->size),
           dex->object,
           "map_list.map_item[%i].size",
           i);
       yr_set_integer(
           yr_le32toh(map_item->offset),
           dex->object,
           "map_list.map_item[%i].offset",
           i);
     }
   }
 
   if (!fits_in_dex(
           dex,
           dex->data + yr_le32toh(dex_header->class_defs_offset),
           yr_le32toh(dex_header->class_defs_size) * sizeof(class_id_item_t)))
     return;
 
 #ifdef DEBUG_DEX_MODULE
   printf("[DEX] Parse CLASS ID section\n");
 #endif
 
   // Get information about the Class ID section
   for (i = 0; i < yr_le32toh(dex_header->class_defs_size); i++)
   {
     class_id_item_t* class_id_item =
         (class_id_item_t*) (dex->data + yr_le32toh(dex_header->class_defs_offset) + i * sizeof(class_id_item_t));
 
 #ifdef DEBUG_DEX_MODULE
     printf(
         "[DEX] CLASS ID item class_idx:0x%x access_flags:0x%x "
         "super_class_idx:0x%x interfaces_offset:0x%x source_file_idx:0x%x "
         "annotations_offset:0x%x class_data_offset:0x%x "
         "static_values_offset:0x%x\n",
         yr_le32toh(class_id_item->class_idx),
         yr_le32toh(class_id_item->access_flags),
         yr_le32toh(class_id_item->super_class_idx),
         yr_le32toh(class_id_item->interfaces_offset),
         yr_le32toh(class_id_item->source_file_idx),
         yr_le32toh(class_id_item->annotations_offset),
         yr_le32toh(class_id_item->class_data_offset),
         yr_le32toh(class_id_item->static_values_offset));
 #endif
 
     yr_set_integer(
         yr_le32toh(class_id_item->class_idx),
         dex->object,
         "class_defs[%i].class_idx",
         i);
     yr_set_integer(
         yr_le32toh(class_id_item->access_flags),
         dex->object,
         "class_defs[%i].access_flags",
         i);
     yr_set_integer(
         yr_le32toh(class_id_item->super_class_idx),
         dex->object,
         "class_defs[%i].super_class_idx",
         i);
     yr_set_integer(
         yr_le32toh(class_id_item->interfaces_offset),
         dex->object,
         "class_defs[%i].interfaces_offset",
         i);
     yr_set_integer(
         yr_le32toh(class_id_item->source_file_idx),
         dex->object,
         "class_defs[%i].source_file_idx",
         i);
     yr_set_integer(
         yr_le32toh(class_id_item->annotations_offset),
         dex->object,
         "class_defs[%i].annotations_offset",
         i);
     yr_set_integer(
         yr_le32toh(class_id_item->class_data_offset),
         dex->object,
         "class_defs[%i].class_data_offset",
         i);
     yr_set_integer(
         yr_le32toh(class_id_item->static_values_offset),
         dex->object,
         "class_defs[%i].static_values_offset",
         i);
 
     if (yr_le32toh(class_id_item->class_data_offset) != 0)
     {
       class_data_item_t class_data_item;
 
       if (!fits_in_dex(
               dex,
               dex->data + yr_le32toh(class_id_item->class_data_offset),
               4 * sizeof(uint32_t)))
         return;
 
       uleb128_size = 0;
+      bool error = false;
 
-      class_data_item.static_fields_size = (uint32_t) read_uleb128(
+      class_data_item.static_fields_size = (uint32_t) read_uleb128_bounded(
           (dex->data + yr_le32toh(class_id_item->class_data_offset)),
-          &uleb128_size);
+          data_end, &uleb128_size, &error);
+      if (error)
+        return;
 
-      class_data_item.instance_fields_size = (uint32_t) read_uleb128(
+      class_data_item.instance_fields_size = (uint32_t) read_uleb128_bounded(
           (dex->data + yr_le32toh(class_id_item->class_data_offset) +
            uleb128_size),
-          &uleb128_size);
+          data_end, &uleb128_size, &error);
+      if (error)
+        return;
 
-      class_data_item.direct_methods_size = (uint32_t) read_uleb128(
+      class_data_item.direct_methods_size = (uint32_t) read_uleb128_bounded(
           (dex->data + yr_le32toh(class_id_item->class_data_offset) +
            uleb128_size),
-          &uleb128_size);
+          data_end, &uleb128_size, &error);
+      if (error)
+        return;
 
-      class_data_item.virtual_methods_size = (uint32_t) read_uleb128(
+      class_data_item.virtual_methods_size = (uint32_t) read_uleb128_bounded(
           (dex->data + yr_le32toh(class_id_item->class_data_offset) +
            uleb128_size),
-          &uleb128_size);
+          data_end, &uleb128_size, &error);
+      if (error)
+        return;
 
       yr_set_integer(
           class_data_item.static_fields_size,
           dex->object,
           "class_data_item[%i].static_fields_size",
           index_class_data_item);
 
       yr_set_integer(
           class_data_item.instance_fields_size,
           dex->object,
           "class_data_item[%i].instance_fields_size",
           index_class_data_item);
 
       yr_set_integer(
           class_data_item.direct_methods_size,
           dex->object,
           "class_data_item[%i].direct_methods_size",
           index_class_data_item);
 
       yr_set_integer(
           class_data_item.virtual_methods_size,
           dex->object,
           "class_data_item[%i].virtual_methods_size",
           index_class_data_item);
 
 #ifdef DEBUG_DEX_MODULE
       printf("[DEX] CLASS DATA item static fields\n");
 #endif
 
       uint32_t previous_field_idx = 0;
       for (j = 0; j < class_data_item.static_fields_size; j++)
       {
         new_size = load_encoded_field(
             dex,
             yr_le32toh(class_id_item->class_data_offset) + uleb128_size,
             &previous_field_idx,
             index_encoded_field,
             1,
             0);
 
         // If the current field isn't parsed the other fields aren't likely to
         // parse.
         if (new_size == 0)
           break;
 
         uleb128_size += new_size;
         index_encoded_field += 1;
       }
 
 #ifdef DEBUG_DEX_MODULE
       printf("[DEX] CLASS DATA item instance fields\n");
 #endif
 
       previous_field_idx = 0;
 
       for (j = 0; j < class_data_item.instance_fields_size; j++)
       {
         new_size = load_encoded_field(
             dex,
             yr_le32toh(class_id_item->class_data_offset) + uleb128_size,
             &previous_field_idx,
             index_encoded_field,
             0,
             1);
 
         // If the current field isn't parsed the other fields aren't likely to
         // parse.
         if (new_size == 0)
           break;
 
         uleb128_size += new_size;
         index_encoded_field += 1;
       }
 
 #ifdef DEBUG_DEX_MODULE
       printf("[DEX] CLASS DATA item direct methods\n");
 #endif
 
       uint32_t previous_method_idx = 0;
 
       for (j = 0; j < class_data_item.direct_methods_size; j++)
       {
         new_size = load_encoded_method(
             dex,
             yr_le32toh(class_id_item->class_data_offset) + uleb128_size,
             &previous_method_idx,
             index_encoded_method,
             1,
             0);
 
         // If the current field isn't parsed the other fields aren't likely to
         // parse.
         if (new_size == 0)
           break;
 
         uleb128_size += new_size;
         index_encoded_method += 1;
       }
 
 #ifdef DEBUG_DEX_MODULE
       printf("[DEX] CLASS DATA item virtual methods\n");
 #endif
 
       previous_method_idx = 0;
 
       for (j = 0; j < class_data_item.virtual_methods_size; j++)
       {
         new_size = load_encoded_method(
             dex,
             yr_le32toh(class_id_item->class_data_offset) + uleb128_size,
             &previous_method_idx,
             index_encoded_method,
             0,
             1);
 
         // If the current field isn't parsed the other fields aren't likely to
         // parse.
         if (new_size == 0)
           break;
 
         uleb128_size += new_size;
         index_encoded_method += 1;
       }
 
       index_class_data_item++;
     }
   }
 
   yr_set_integer(index_encoded_method, dex->object, "number_of_methods");
   yr_set_integer(index_encoded_field, dex->object, "number_of_fields");
 }
