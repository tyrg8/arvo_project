commit 459910c36a21369c09b75bcfa82f287c9da56abf
Author: Kevin Backhouse <kevinbackhouse@github.com>
Date:   Sat Oct 8 21:40:04 2022 +0100

    Credit to OSS-Fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=51751
    Credit to OSS-Fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=52053
    Avoid null pointer deref and heap buffer overflow.

diff --git a/src/quicktimevideo.cpp b/src/quicktimevideo.cpp
index 352fe4b0d..fa567ecaa 100644
--- a/src/quicktimevideo.cpp
+++ b/src/quicktimevideo.cpp
@@ -575,90 +575,89 @@ void QuickTimeVideo::decodeBlock(std::string const& entered_from) {
   tagDecoder(buf, newsize);
 }  // QuickTimeVideo::decodeBlock
 
+static std::string readString(BasicIo& io, size_t size) {
+  enforce(size <= io.size() - io.tell(), Exiv2::ErrorCode::kerCorruptedMetadata);
+  Exiv2::DataBuf str(size + 1);
+  io.readOrThrow(str.data(), size);
+  str.write_uint8(size, 0); // nul-terminate string
+  return Exiv2::toString(str.data());
+}
+
 void QuickTimeVideo::tagDecoder(Exiv2::DataBuf& buf, size_t size) {
   assert(buf.size() > 4);
 
   if (ignoreList(buf))
     discard(size);
 
   else if (dataIgnoreList(buf)) {
     decodeBlock(Exiv2::toString(buf.data()));
   } else if (equalsQTimeTag(buf, "ftyp"))
     fileTypeDecoder(size);
 
   else if (equalsQTimeTag(buf, "trak"))
     setMediaStream();
 
   else if (equalsQTimeTag(buf, "mvhd"))
     movieHeaderDecoder(size);
 
   else if (equalsQTimeTag(buf, "tkhd"))
     trackHeaderDecoder(size);
 
   else if (equalsQTimeTag(buf, "mdhd"))
     mediaHeaderDecoder(size);
 
   else if (equalsQTimeTag(buf, "hdlr"))
     handlerDecoder(size);
 
   else if (equalsQTimeTag(buf, "vmhd"))
     videoHeaderDecoder(size);
 
   else if (equalsQTimeTag(buf, "udta"))
     userDataDecoder(size);
 
   else if (equalsQTimeTag(buf, "dref"))
     multipleEntriesDecoder();
 
   else if (equalsQTimeTag(buf, "stsd"))
     sampleDesc(size);
 
   else if (equalsQTimeTag(buf, "stts"))
     timeToSampleDecoder();
 
   else if (equalsQTimeTag(buf, "pnot"))
     previewTagDecoder(size);
 
   else if (equalsQTimeTag(buf, "tapt"))
     trackApertureTagDecoder(size);
 
   else if (equalsQTimeTag(buf, "keys"))
     keysTagDecoder(size);
 
   else if (equalsQTimeTag(buf, "url ")) {
-    Exiv2::DataBuf url(size + 1);
-    io_->readOrThrow(url.data(), size);
-    url.write_uint8(size, 0);
     if (currentStream_ == Video)
-      xmpData_["Xmp.video.URL"] = Exiv2::toString(url.data());
+      xmpData_["Xmp.video.URL"] = readString(*io_, size);
     else if (currentStream_ == Audio)
-      xmpData_["Xmp.audio.URL"] = Exiv2::toString(url.data());
+      xmpData_["Xmp.audio.URL"] = readString(*io_, size);
   }
 
   else if (equalsQTimeTag(buf, "urn ")) {
-    Exiv2::DataBuf urn(size + 1);
-    io_->readOrThrow(urn.data(), size);
-    urn.write_uint8(size, 0);
     if (currentStream_ == Video)
-      xmpData_["Xmp.video.URN"] = Exiv2::toString(urn.data());
+      xmpData_["Xmp.video.URN"] = readString(*io_, size);
     else if (currentStream_ == Audio)
-      xmpData_["Xmp.audio.URN"] = Exiv2::toString(urn.data());
+      xmpData_["Xmp.audio.URN"] = readString(*io_, size);
   }
 
   else if (equalsQTimeTag(buf, "dcom")) {
-    Exiv2::DataBuf dcom(size + 1);
-    io_->readOrThrow(dcom.data(), size);
-    dcom.write_uint8(size, 0);
-    xmpData_["Xmp.video.Compressor"] = Exiv2::toString(dcom.data());
+    xmpData_["Xmp.video.Compressor"] = readString(*io_, size);
   }
 
   else if (equalsQTimeTag(buf, "smhd")) {
     io_->readOrThrow(buf.data(), 4);
     io_->readOrThrow(buf.data(), 4);
     xmpData_["Xmp.audio.Balance"] = buf.read_uint16(0, bigEndian);
   }
 
   else {
     discard(size);
   }
 }  // QuickTimeVideo::tagDecoder
@@ -753,39 +752,40 @@ void QuickTimeVideo::trackApertureTagDecoder(size_t size) {
 void QuickTimeVideo::CameraTagsDecoder(size_t size_external) {
   size_t cur_pos = io_->tell();
   DataBuf buf(50), buf2(4);
   const TagDetails* td;
 
   io_->readOrThrow(buf.data(), 4);
   if (equalsQTimeTag(buf, "NIKO")) {
     io_->seek(cur_pos, BasicIo::beg);
 
     io_->readOrThrow(buf.data(), 24);
     xmpData_["Xmp.video.Make"] = Exiv2::toString(buf.data());
     io_->readOrThrow(buf.data(), 14);
     xmpData_["Xmp.video.Model"] = Exiv2::toString(buf.data());
     io_->readOrThrow(buf.data(), 4);
     xmpData_["Xmp.video.ExposureTime"] = "1/" + Exiv2::toString(ceil(buf.read_uint32(0, littleEndian) / (double)10));
     io_->readOrThrow(buf.data(), 4);
     io_->readOrThrow(buf2.data(), 4);
     xmpData_["Xmp.video.FNumber"] = buf.read_uint32(0, littleEndian) / (double)buf2.read_uint32(0, littleEndian);
     io_->readOrThrow(buf.data(), 4);
     io_->readOrThrow(buf2.data(), 4);
     xmpData_["Xmp.video.ExposureCompensation"] =
         buf.read_uint32(0, littleEndian) / (double)buf2.read_uint32(0, littleEndian);
     io_->readOrThrow(buf.data(), 10);
     io_->readOrThrow(buf.data(), 4);
     td = find(whiteBalance, buf.read_uint32(0, littleEndian));
     if (td)
       xmpData_["Xmp.video.WhiteBalance"] = exvGettext(td->label_);
     io_->readOrThrow(buf.data(), 4);
     io_->readOrThrow(buf2.data(), 4);
     xmpData_["Xmp.video.FocalLength"] = buf.read_uint32(0, littleEndian) / (double)buf2.read_uint32(0, littleEndian);
     io_->seek(static_cast<long>(95), BasicIo::cur);
     io_->readOrThrow(buf.data(), 48);
+    buf.write_uint8(48, 0);
     xmpData_["Xmp.video.Software"] = Exiv2::toString(buf.data());
     io_->readOrThrow(buf.data(), 4);
     xmpData_["Xmp.video.ISO"] = buf.read_uint32(0, littleEndian);
   }
 
   io_->seek(cur_pos + size_external, BasicIo::beg);
 }  // QuickTimeVideo::CameraTagsDecoder
@@ -793,72 +793,65 @@ void QuickTimeVideo::CameraTagsDecoder(size_t size_external) {
 void QuickTimeVideo::userDataDecoder(size_t size_external) {
   size_t cur_pos = io_->tell();
   const TagVocabulary* td;
   const TagVocabulary *tv, *tv_internal;
 
   const long bufMinSize = 100;
   DataBuf buf(bufMinSize);
   size_t size_internal = size_external;
   std::memset(buf.data(), 0x0, buf.size());
 
   while ((size_internal / 4 != 0) && (size_internal > 0)) {
     buf.data()[4] = '\0';
     io_->readOrThrow(buf.data(), 4);
     const size_t size = buf.read_uint32(0, bigEndian);
     if (size > size_internal)
       break;
     size_internal -= size;
     io_->readOrThrow(buf.data(), 4);
 
     if (buf.data()[0] == 169)
       buf.data()[0] = ' ';
     td = find(userDatatags, Exiv2::toString(buf.data()));
 
     tv = find(userDataReferencetags, Exiv2::toString(buf.data()));
 
     if (size <= 12)
       break;
 
     else if (equalsQTimeTag(buf, "DcMD") || equalsQTimeTag(buf, "NCDT"))
       userDataDecoder(size - 8);
 
     else if (equalsQTimeTag(buf, "NCTG"))
       NikonTagsDecoder(size - 8);
 
     else if (equalsQTimeTag(buf, "TAGS"))
       CameraTagsDecoder(size - 8);
 
     else if (equalsQTimeTag(buf, "CNCV") || equalsQTimeTag(buf, "CNFV") || equalsQTimeTag(buf, "CNMN") ||
              equalsQTimeTag(buf, "NCHD") || equalsQTimeTag(buf, "FFMV")) {
-      io_->readOrThrow(buf.data(), size - 8);
-      xmpData_[exvGettext(tv->label_)] = Exiv2::toString(buf.data());
+      enforce(tv, Exiv2::ErrorCode::kerCorruptedMetadata);
+      xmpData_[exvGettext(tv->label_)] = readString(*io_, size - 8);
     }
 
     else if (equalsQTimeTag(buf, "CMbo") || equalsQTimeTag(buf, "Cmbo")) {
       io_->readOrThrow(buf.data(), 2);
       buf.data()[2] = '\0';
       tv_internal = find(cameraByteOrderTags, Exiv2::toString(buf.data()));
 
       if (tv_internal)
         xmpData_[exvGettext(tv->label_)] = exvGettext(tv_internal->label_);
       else
         xmpData_[exvGettext(tv->label_)] = Exiv2::toString(buf.data());
     }
 
     else if (tv) {
-      const size_t tv_size = size - 12;
-      if (tv_size >= buf.size()) {
-        enforce(tv_size <= io_->size() - io_->tell(), Exiv2::ErrorCode::kerCorruptedMetadata);
-        buf.resize(tv_size + 1);
-      }
       io_->readOrThrow(buf.data(), 4);
-      io_->readOrThrow(buf.data(), tv_size);
-      buf.write_uint8(tv_size, 0);  // nul-terminate string
-      xmpData_[exvGettext(tv->label_)] = Exiv2::toString(buf.data());
+      xmpData_[exvGettext(tv->label_)] = readString(*io_, size - 12);
     }
 
     else if (td)
       tagDecoder(buf, size - 8);
   }
 
   io_->seek(cur_pos + size_external, BasicIo::beg);
 }  // QuickTimeVideo::userDataDecoder
diff --git a/test/data/issue_2376_poc.mp4 b/test/data/issue_2376_poc.mp4
new file mode 100644
index 000000000..fc2c61bd6
Binary files /dev/null and b/test/data/issue_2376_poc.mp4 differ
diff --git a/test/data/issue_2377_poc.mp4 b/test/data/issue_2377_poc.mp4
new file mode 100644
index 000000000..747351387
Binary files /dev/null and b/test/data/issue_2377_poc.mp4 differ
diff --git a/tests/bugfixes/github/test_issue_2376.py b/tests/bugfixes/github/test_issue_2376.py
new file mode 100644
index 000000000..2afdbc965
--- /dev/null
+++ b/tests/bugfixes/github/test_issue_2376.py
@@ -0,0 +1,13 @@
+# -*- coding: utf-8 -*-
+
+from system_tests import CaseMeta, check_no_ASAN_UBSAN_errors
+
+class issue_2376_QuickTimeVideo_userDataDecoder_null_deref(metaclass=CaseMeta):
+    url      = "https://github.com/Exiv2/exiv2/issues/2376"
+    filename = "$data_path/issue_2376_poc.mp4"
+    commands = ["$exiv2 $filename"]
+    retval   = [1]
+    stderr   = ["""$exiv2_exception_message $filename:
+$kerCorruptedMetadata
+"""]
+    stdout   = [""]
diff --git a/tests/bugfixes/github/test_issue_2377.py b/tests/bugfixes/github/test_issue_2377.py
new file mode 100644
index 000000000..010a46685
--- /dev/null
+++ b/tests/bugfixes/github/test_issue_2377.py
@@ -0,0 +1,17 @@
+# -*- coding: utf-8 -*-
+
+from system_tests import CaseMeta, check_no_ASAN_UBSAN_errors
+
+class issue_2377_QuickTimeVideo_userDataDecoder_buffer_overflow(metaclass=CaseMeta):
+    url      = "https://github.com/Exiv2/exiv2/issues/2377"
+    filename = "$data_path/issue_2377_poc.mp4"
+    commands = ["$exiv2 $filename"]
+    retval   = [253]
+    stderr   = ["""$filename: No Exif data found in the file
+"""]
+    stdout   = ["""File name       : $filename
+File size       : 225 Bytes
+MIME type       : video/quicktime
+Image size      : 0 x 0
+"""]
+
diff --git a/tests/regression_tests/test_regression_allfiles.py b/tests/regression_tests/test_regression_allfiles.py
index c9b237752..d4fb53b9f 100644
--- a/tests/regression_tests/test_regression_allfiles.py
+++ b/tests/regression_tests/test_regression_allfiles.py
@@ -7,154 +7,156 @@ from system_tests import BT
 def get_valid_files(data_dir):
     """return a list of files inside 'data_dir' that exiv2 can run over without error"""
     # we only include the below extensions because the folder has sooooo many
     # other files that we don't want to run exiv2 over.
     valid_extensions = [
         ".avif",
         ".cr3",
         ".crw",
         ".dng",
         ".eps",
         ".exv",
         ".heic",
         ".hif",
         ".jp2",
         ".jpg",
         ".jxl",
         ".pgf",
         ".png",
         ".psd",
         ".raf",
         ".tif",
         ".tiff",
         ".webp",
         ".xmp",
         ".mp4",
     ]
 
     excludes = [
         # all of the below files are excluded because they throw a utf-8 decoding
         # error and I did not yet have the patience to deal with that.
         "issue_1881_coverage.jpg",
         "test_issue_ghsa_mv9g_fxh2_m49m.crw",
         "issue_1827_poc.crw",
         "iptc-psAPP13s-wIPTCs-psAPP13s-wIPTCs.jpg",
         "issue_ghsa_8949_hhfh_j7rj_poc.jp2",
         "exiv2-bug444.jpg",
         "issue_1847_poc.jpg",
         "table.jpg",
         "issue_1830_poc.tiff",
         "issue_1530_poc.crw",
         "issue_ghsa_pvjp_m4f6_q984_poc.exv",
         "iptc-psAPP13s-noIPTC-psAPP13s-wIPTC.jpg",
         "issue_1530_poc.exv",
         "exiv2-bug501.jpg",
         "smiley1.jpg",
         "imagemagick.pgf",
         "iptc-psAPP13s-wIPTC-psAPP13s-noIPTC.jpg",
         "Reagan.jp2",
         "issue_ghsa_8949_hhfh_j7rj_poc.exv",
         "exiv2-bug495.jpg",
         "issue_1920_poc.tiff",
         "issue_2190_poc.jp2",
         # non-zero return code files, most of them are security POC so we don't
         # really need to worry about them here
         "issue_2340_poc.mp4",
         "issue_2345_poc.mp4",
         "issue_2366_poc.mp4",
+        "issue_2376_poc.mp4",
+        "issue_2377_poc.mp4",
         "2018-01-09-exiv2-crash-001.tiff",
         "cve_2017_1000126_stack-oob-read.webp",
         "exiv2-bug1247.jpg",
         "exiv2-bug841.png",
         "h02.psd",
         "issue_1097_poc.crw",
         "issue_1793_poc.heic",
         "issue_1812_poc.jp2",
         "issue_1841_poc.webp",
         "issue_428_poc1.png",
         "issue_428_poc2.png",
         "issue_428_poc3.png",
         "issue_428_poc4.png",
         "issue_428_poc5.png",
         "issue_428_poc6.png",
         "issue_428_poc7.png",
         "issue_428_poc8.png",
         "issue_712_poc.tif",
         "issue_789_poc1.png",
         "issue_790_poc2.png",
         "issue_791_poc1.webp",
         "issue_828_poc.png",
         "issue_841_poc.crw",
         "issue_843_poc.crw",
         "issue_845_poc.png",
         "issue_847_poc.pgf",
         "issue_853_poc.jpg",
         "issue_855_poc.psd",
         "issue_857_coverage.raf",
         "issue_857_poc.raf",
         "issue_869_poc.png",
         "issue_960.poc.webp",
         "issue_2160_poc.jpg",
         "issue_2178_poc.jp2",
         "issue_2268_poc.jp2",
         "issue_2270_poc.webp",
         "issue_2320_poc.jpg",
         "issue_2339_poc.tiff",
         "issue_2352_poc.jpg",
         "issue_ghsa_583f_w9pm_99r2_poc.jp2",
         "issue_ghsa_7569_phvm_vwc2_poc.jp2",
         "issue_ghsa_mxw9_qx4c_6m8v_poc.jp2",
         "pocIssue283.jpg",
         "poc_1522.jp2",
         "xmpsdk.xmp",
         # large file that creates 11Mb of output so let's exclude it
         "ReaganLargeTiff.tiff",
         # files that don't create any output
         "exiv2-empty.jpg",
         "exiv2-bug836.eps",
         "1343_empty.png",
         "issue_2027_poc.jpg",
         "issue_1815_poc.jpg",
         "exiv2.dc.dwc.i18n.jpg",
         "exiv2-bug1137.jpg",
         "issue_1833_poc.jpg",
         "exiv2-bug480.jpg",
         "issue_1934_poc4-thumb_ref.jpg",
         "heic.heic",
         "issue_1817_poc.png",
         "issue_ghsa_mvc4_g5pv_4qqq_poc.jpg",
         "issue_1881_poc.jpg",
         "issue_1934_poc1-thumb.jpg",
         "iptc-noAPP13.jpg",
         "1343_comment.png",
         "issue_ghsa_9jh3_fcc3_g6hv_poc.jpg",
         "Reagan2.jp2",
         "relax.jp2",
         # has a warning that includes absolute paths and I don't want to go
         # through the trouble of cleaning the output for a single broken file
         "issue_1845_poc.jp2",
         # fails with different error messages inside xmpsdk on win/macos than
         # on linux it's a poc file from a fuzzing test so let's just skip them
         "issue_1901_poc1.xmp",
         "issue_1901_poc2.xmp",
         "issue_1901_poc3.xmp",
         "issue_1901_poc4.xmp",
         "issue_1954_poc.xmp",
         # this test file actually contains some eixf info, but windows has
         # different output let's try and fix this later
         "exiv2-bug1044.tif",
     ]
 
     file_paths = [
         os.path.join(data_dir, f) for f in os.listdir(data_dir) if f not in excludes
     ]
 
     return [
         f
         for f in file_paths
         if os.path.isfile(os.path.join(data_dir, f))
         and os.path.splitext(f)[1] in valid_extensions
     ]
 
 
 # create an empty TestCase to which we will programmatically add one test for
 # each discovered file in exiv_dir/test/data/
