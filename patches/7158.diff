commit 57b2c00cbf5d68cb30cf71b37ccc051d2b87c1a5
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Tue Mar 27 19:44:25 2018 -0400

    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=7158

diff --git a/coders/heic.c b/coders/heic.c
index f8f337b93..510a05ed1 100644
--- a/coders/heic.c
+++ b/coders/heic.c
@@ -286,23 +286,24 @@ static MagickBooleanType ParseAtom(Image *image, DataBuffer *db,
 static MagickBooleanType ParseFullBox(Image *image, DataBuffer *db,
     unsigned int atom, HEICImageContext *ctx, ExceptionInfo *exception)
 {
   unsigned int
     version, flags, i;
 
   flags = DBReadUInt(db);
   version = flags >> 24;
   flags &= 0xffffff;
 
   (void) flags;
   (void) version;
 
   if (DBGetSize(db) < 4) {
     ThrowAndReturn("atom is too short");
   }
 
   for (i = 0; i < MAX_ATOMS_IN_BOX && DBGetSize(db) > 0; i++) {
-    (void) ParseAtom(image, db, ctx, exception);
+    if (ParseAtom(image, db, ctx, exception) == MagickFalse)
+      return MagickFalse;
   }
 
   return MagickTrue;
 }
@@ -310,12 +311,13 @@ static MagickBooleanType ParseFullBox(Image *image, DataBuffer *db,
 static MagickBooleanType ParseBox(Image *image, DataBuffer *db,
     unsigned int atom, HEICImageContext *ctx, ExceptionInfo *exception)
 {
   unsigned int
     i;
 
   for (i = 0; i < MAX_ATOMS_IN_BOX && DBGetSize(db) > 0; i++) {
-    (void) ParseAtom(image, db, ctx, exception);
+    if (ParseAtom(image, db, ctx, exception) == MagickFalse)
+      break;
   }
 
   return MagickTrue;
 }
@@ -471,33 +473,33 @@ static MagickBooleanType ParseIinfAtom(Image *image, DataBuffer *db,
 static MagickBooleanType ParseInfeAtom(Image *image, DataBuffer *db,
     HEICImageContext *ctx, ExceptionInfo *exception)
 {
   unsigned int
     version, flags, id, type;
 
   if (DBGetSize(db) < 9) {
     ThrowAndReturn("atom is too short");
   }
 
   flags = DBReadUInt(db);
   version = flags >> 24;
   flags = 0xffffff;
 
   if (version != 2) {
     ThrowAndReturn("unsupported infe atom version");
   }
 
   id = DBReadUShort(db);
   DBSkip(db, 2);   /* item protection index */
   type = DBReadUInt(db);
 
   /*
      item indicies starts from 1
   */
-  if (id >= (ssize_t) ctx->idsCount) {
+  if (id > (ssize_t) ctx->idsCount) {
     ThrowAndReturn("item id is incorrect");
   }
 
   ctx->itemInfo[id].type = type;
 
   return MagickTrue;
 }
