commit 85d8681747faa317c9934f658dcf8749e945ea8c
Author: Alan Modra <amodra@gmail.com>
Date:   Mon Jan 6 17:12:51 2020 +1030

    som_bfd_fill_in_ar_symbols buffer overflow
    
            * som.c (som_bfd_fill_in_ar_symbols): Bounds check som_dict index.

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index 1d2b346060c..2aed0db7ac2 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,98 +1,102 @@
+2020-01-06  Alan Modra  <amodra@gmail.com>
+
+	* som.c (som_bfd_fill_in_ar_symbols): Bounds check som_dict index.
+
 2020-01-06  Alan Modra  <amodra@gmail.com>
 
 	* mach-o.c (bfd_mach_o_read_dylinker): Don't read past end of
 	command.  Check name offset is within command.
 	(bfd_mach_o_read_dylib, bfd_mach_o_read_prebound_dylib),
 	(bfd_mach_o_read_prebind_cksum, bfd_mach_o_read_twolevel_hints),
 	(bfd_mach_o_read_fvmlib, bfd_mach_o_read_dysymtab),
 	(bfd_mach_o_read_symtab, bfd_mach_o_read_uuid),
 	(bfd_mach_o_read_linkedit, bfd_mach_o_read_str),
 	(bfd_mach_o_read_dyld_info, bfd_mach_o_read_version_min),
 	(bfd_mach_o_read_encryption_info, bfd_mach_o_read_source_version),
 	(bfd_mach_o_read_encryption_info_64, bfd_mach_o_read_main),
 	(bfd_mach_o_read_note, bfd_mach_o_read_build_version),
 	(bfd_mach_o_read_segment): Similarly.
 	(bfd_mach_o_read_thread): Properly bound check thread struct.
 	Don't repeat checks on second loop.
 	(bfd_mach_o_read_command): Fail on invalid command length.
 
 2020-01-04  Alan Modra  <amodra@gmail.com>
 
 	* format.c (bfd_check_format_matches): Add preserve_match.
 	Save initial bfd state in "preserve", matched bfd state in
 	"preserve_match".  Save just the first match.  Release
 	bfd_alloc memory.  Restore and finish preserved state as
 	appropriate on all function exit paths.
 
 2020-01-04  Alan Modra  <amodra@gmail.com>
 
 	* mmo.c (mmo_mkobject): Allocate tdata with bfd_zalloc.
 
 2020-01-04  Alan Modra  <amodra@gmail.com>
 
 	* coffgen.c (coff_real_object_p): Free malloc'd memory on target
 	match too.
 
 2020-01-03  Nick Clifton  <nickc@redhat.com>
 
 	PR 25307
 	(bfd_pef_parse_function_stubs): Correct the test that ensures that
 	there is enough data remaining in the code buffer before
 	attempting to read a function stub.
 
 2020-01-03  Nick Clifton  <nickc@redhat.com>
 
 	PR 25308
 	* elf-properties.c (_bfd_elf_convert_gnu_properties): Check the
 	return value from bfd_malloc.
 	* elf32-arm.c (bfd_elf32_arm_vfp11_fix_veneer_locations): Likewise.
 	(bfd_elf32_arm_stm32l4xx_fix_veneer_locations): Likewise.
 	(elf32_arm_filter_cmse_symbols): Likewise.
 	(elf32_arm_write_section): Likewise.
 	* mach-o.c (bfd_mach_o_core_fetch_environment): Likewise.
 	(bfd_mach_o_follow_dsym): Likewise.
 	* pef.c (bfd_pef_print_loader_section): Likewise.
 	(bfd_pef_scan_start_address): Likewise.
 	(bfd_pef_parse_function_stubs): Likewise.
 	(bfd_pef_parse_symbols): Likewise.
 
 2020-01-03  Sergei Trofimovich  <siarheit@google.com>
 
         * elfnn-ia64.c (elfNN_ia64_merge_private_bfd_data): don't fail
         on binary inputs ld/PR25316.
         (is_ia64_elf): new helper to filter on ia64 objects.
 
 2020-01-03  Jan Beulich  <jbeulich@suse.com>
 
 	* mach-o.c (cpusubtype, bfd_mach_o_header_p): Insert underscore
 	in parameter names.
 	(bfd_mach_o_scan): Insert underscore in two variable names.
 
 2020-01-02  Sergey Belyashov  <sergey.belyashov@gmail.com>
 
 	* Makefile.am: Add z80-elf target support.
 	* configure.ac: Likewise.
 	* targets.c: Likewise.
 	* Makefile.in: Regenerate.
 	* configure: Regenerate.
 	* config.bfd: Add z80-elf target support and new arches: ez80 and
 	z180.
 	* elf32-z80.c: New file.
 	* archures.c: Add new z80 architectures: eZ80 and Z180.
 	* coffcode.h: Likewise.
 	* cpu-z80.c: Likewise.
 	* coff-z80.c: Add new relocations for Z80 target and local label
 	check.
 	* reloc.c: Add new relocs.
 	* bfd-in2.h: Regenerate.
 	* libbfd.h: Regenerate.
 
 2020-01-02  Tamar Christina  <tamar.christina@arm.com>
 
 	PR 25210
 	PR 24753
 	* elfnn-aarch64.c (_bfd_aarch64_create_stub_section): Set ELF class.
 
 2020-01-01  Alan Modra  <amodra@gmail.com>
 
 	Update year range in copyright notice of all files.
diff --git a/bfd/som.c b/bfd/som.c
index 954b75213ea..779fd5d3883 100644
--- a/bfd/som.c
+++ b/bfd/som.c
@@ -5957,168 +5957,179 @@ static bfd_boolean
 som_bfd_fill_in_ar_symbols (bfd *abfd,
 			    struct som_lst_header *lst_header,
 			    carsym **syms)
 {
   unsigned int i;
   carsym *set = syms[0];
   unsigned char *hash_table;
   struct som_external_som_entry *som_dict = NULL;
   bfd_size_type amt;
   file_ptr lst_filepos;
   unsigned int string_loc;
 
   lst_filepos = bfd_tell (abfd) - sizeof (struct som_external_lst_header);
   hash_table = bfd_malloc2 (lst_header->hash_size, 4);
   if (hash_table == NULL && lst_header->hash_size != 0)
     goto error_return;
 
   /* Read in the hash table.  The has table is an array of 32bit file offsets
      which point to the hash chains.  */
   amt = (bfd_size_type) lst_header->hash_size * 4;
   if (bfd_bread ((void *) hash_table, amt, abfd) != amt)
     goto error_return;
 
   /* Seek to and read in the SOM dictionary.  We will need this to fill
      in the carsym's filepos field.  */
   if (bfd_seek (abfd, lst_filepos + lst_header->dir_loc, SEEK_SET) != 0)
     goto error_return;
 
   som_dict = bfd_malloc2 (lst_header->module_count,
 			  sizeof (struct som_external_som_entry));
   if (som_dict == NULL && lst_header->module_count != 0)
     goto error_return;
 
   amt = lst_header->module_count;
   amt *= sizeof (struct som_external_som_entry);
   if (bfd_bread ((void *) som_dict, amt, abfd) != amt)
     goto error_return;
 
   string_loc = lst_header->string_loc;
 
   /* Walk each chain filling in the carsyms as we go along.  */
   for (i = 0; i < lst_header->hash_size; i++)
     {
       struct som_external_lst_symbol_record lst_symbol;
       unsigned int hash_val;
       size_t len;
       unsigned char ext_len[4];
       char *name;
+      unsigned int ndx;
 
       /* An empty chain has zero as it's file offset.  */
       hash_val = bfd_getb32 (hash_table + 4 * i);
       if (hash_val == 0)
 	continue;
 
       /* Seek to and read the first symbol on the chain.  */
       if (bfd_seek (abfd, lst_filepos + hash_val, SEEK_SET) != 0)
 	goto error_return;
 
       amt = sizeof (lst_symbol);
       if (bfd_bread ((void *) &lst_symbol, amt, abfd) != amt)
 	goto error_return;
 
       /* Get the name of the symbol, first get the length which is stored
 	 as a 32bit integer just before the symbol.
 
 	 One might ask why we don't just read in the entire string table
 	 and index into it.  Well, according to the SOM ABI the string
 	 index can point *anywhere* in the archive to save space, so just
 	 using the string table would not be safe.  */
       if (bfd_seek (abfd, (lst_filepos + string_loc
 			   + bfd_getb32 (lst_symbol.name) - 4), SEEK_SET) != 0)
 	goto error_return;
 
       if (bfd_bread (&ext_len, (bfd_size_type) 4, abfd) != 4)
 	goto error_return;
       len = bfd_getb32 (ext_len);
 
       /* Allocate space for the name and null terminate it too.  */
       if (len == (size_t) -1)
 	{
 	  bfd_set_error (bfd_error_no_memory);
 	  goto error_return;
 	}
       name = bfd_zalloc (abfd, (bfd_size_type) len + 1);
       if (!name)
 	goto error_return;
       if (bfd_bread (name, (bfd_size_type) len, abfd) != len)
 	goto error_return;
 
       name[len] = 0;
       set->name = name;
 
       /* Fill in the file offset.  Note that the "location" field points
 	 to the SOM itself, not the ar_hdr in front of it.  */
-      set->file_offset =
-	bfd_getb32 (som_dict[bfd_getb32 (lst_symbol.som_index)].location)
-	- sizeof (struct ar_hdr);
+      ndx = bfd_getb32 (lst_symbol.som_index);
+      if (ndx >= lst_header->module_count)
+	{
+	  bfd_set_error (bfd_error_bad_value);
+	  goto error_return;
+	}
+      set->file_offset
+	= bfd_getb32 (som_dict[ndx].location) - sizeof (struct ar_hdr);
 
       /* Go to the next symbol.  */
       set++;
 
       /* Iterate through the rest of the chain.  */
       while (1)
 	{
 	  unsigned int next_entry = bfd_getb32 (lst_symbol.next_entry);
 
 	  if (next_entry == 0)
 	    break;
 
 	  /* Seek to the next symbol and read it in.  */
 	  if (bfd_seek (abfd, lst_filepos + next_entry, SEEK_SET) != 0)
 	    goto error_return;
 
 	  amt = sizeof (lst_symbol);
 	  if (bfd_bread ((void *) &lst_symbol, amt, abfd) != amt)
 	    goto error_return;
 
 	  /* Seek to the name length & string and read them in.  */
 	  if (bfd_seek (abfd, lst_filepos + string_loc
 			+ bfd_getb32 (lst_symbol.name) - 4, SEEK_SET) != 0)
 	    goto error_return;
 
 	  if (bfd_bread (&ext_len, (bfd_size_type) 4, abfd) != 4)
 	    goto error_return;
 	  len = bfd_getb32 (ext_len);
 
 	  /* Allocate space for the name and null terminate it too.  */
 	  if (len == (size_t) -1)
 	    {
 	      bfd_set_error (bfd_error_no_memory);
 	      goto error_return;
 	    }
 	  name = bfd_zalloc (abfd, (bfd_size_type) len + 1);
 	  if (!name)
 	    goto error_return;
 
 	  if (bfd_bread (name, (bfd_size_type) len, abfd) != len)
 	    goto error_return;
 	  name[len] = 0;
 	  set->name = name;
 
 	  /* Fill in the file offset.  Note that the "location" field points
 	     to the SOM itself, not the ar_hdr in front of it.  */
-	  set->file_offset =
-	    bfd_getb32 (som_dict[bfd_getb32 (lst_symbol.som_index)].location)
-	    - sizeof (struct ar_hdr);
+	  ndx = bfd_getb32 (lst_symbol.som_index);
+	  if (ndx >= lst_header->module_count)
+	    {
+	      bfd_set_error (bfd_error_bad_value);
+	      goto error_return;
+	    }
+	  set->file_offset
+	    = bfd_getb32 (som_dict[ndx].location) - sizeof (struct ar_hdr);
 
 	  /* Go on to the next symbol.  */
 	  set++;
 	}
     }
   /* If we haven't died by now, then we successfully read the entire
      archive symbol table.  */
   if (hash_table != NULL)
     free (hash_table);
   if (som_dict != NULL)
     free (som_dict);
   return TRUE;
 
  error_return:
   if (hash_table != NULL)
     free (hash_table);
   if (som_dict != NULL)
     free (som_dict);
   return FALSE;
 }
 
 /* Read in the LST from the archive.  */
