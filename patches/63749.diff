commit 7a617ee2238c8eaca22264bf774276f809fb4825
Merge: 1ea8a10ca8 bbfadd32e8
Author: Arnaud Le Blanc <arnaud.lb@gmail.com>
Date:   Sat Oct 28 15:03:17 2023 +0200

    Merge branch 'PHP-8.1' into PHP-8.2
    
    * PHP-8.1:
      [ci skip] NEWS
      Fix segfault caused by weak references to FFI objects (#12488)

diff --git a/ext/ffi/ffi.c b/ext/ffi/ffi.c
index 0fe224d7c8..9be5ac3405 100644
--- a/ext/ffi/ffi.c
+++ b/ext/ffi/ffi.c
@@ -1,46 +1,47 @@
 /*
    +----------------------------------------------------------------------+
    | Copyright (c) The PHP Group                                          |
    +----------------------------------------------------------------------+
    | This source file is subject to version 3.01 of the PHP license,      |
    | that is bundled with this package in the file LICENSE, and is        |
    | available through the world-wide-web at the following url:           |
    | https://www.php.net/license/3_01.txt                                 |
    | If you did not receive a copy of the PHP license and are unable to   |
    | obtain it through the world-wide-web, please send a note to          |
    | license@php.net so we can mail you a copy immediately.               |
    +----------------------------------------------------------------------+
    | Author: Dmitry Stogov <dmitry@zend.com>                              |
    +----------------------------------------------------------------------+
 */
 
 #ifdef HAVE_CONFIG_H
 # include "config.h"
 #endif
 
 #include "php.h"
 #include "php_ffi.h"
 #include "ext/standard/info.h"
 #include "php_scandir.h"
 #include "zend_exceptions.h"
 #include "zend_closures.h"
+#include "zend_weakrefs.h"
 #include "main/SAPI.h"
 
 #include <ffi.h>
 
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
 
 #ifdef HAVE_GLOB
 #ifdef PHP_WIN32
 #include "win32/glob.h"
 #else
 #include <glob.h>
 #endif
 #endif
 
 #ifndef __BIGGEST_ALIGNMENT__
 /* XXX need something better, perhaps with regard to SIMD, etc. */
 # define __BIGGEST_ALIGNMENT__ sizeof(size_t)
 #endif
@@ -2187,8 +2188,12 @@ static zend_object *zend_ffi_ctype_new(zend_class_entry *class_type) /* {{{ */
 static void zend_ffi_ctype_free_obj(zend_object *object) /* {{{ */
 {
 	zend_ffi_ctype *ctype = (zend_ffi_ctype*)object;
 
 	zend_ffi_type_dtor(ctype->type);
+
+    if (UNEXPECTED(GC_FLAGS(object) & IS_OBJ_WEAKLY_REFERENCED)) {
+        zend_weakrefs_notify(object);
+    }
 }
 /* }}} */
 
@@ -2396,33 +2401,41 @@ static void zend_ffi_scope_hash_dtor(zval *zv) /* {{{ */
 static void zend_ffi_free_obj(zend_object *object) /* {{{ */
 {
 	zend_ffi *ffi = (zend_ffi*)object;
 
 	if (ffi->persistent) {
 		return;
 	}
 
 	if (ffi->lib) {
 		DL_UNLOAD(ffi->lib);
 		ffi->lib = NULL;
 	}
 
 	if (ffi->symbols) {
 		zend_hash_destroy(ffi->symbols);
 		efree(ffi->symbols);
 	}
 
 	if (ffi->tags) {
 		zend_hash_destroy(ffi->tags);
 		efree(ffi->tags);
 	}
+
+    if (UNEXPECTED(GC_FLAGS(object) & IS_OBJ_WEAKLY_REFERENCED)) {
+        zend_weakrefs_notify(object);
+    }
 }
 /* }}} */
 
 static void zend_ffi_cdata_free_obj(zend_object *object) /* {{{ */
 {
 	zend_ffi_cdata *cdata = (zend_ffi_cdata*)object;
 
 	zend_ffi_cdata_dtor(cdata);
+
+    if (UNEXPECTED(GC_FLAGS(object) & IS_OBJ_WEAKLY_REFERENCED)) {
+        zend_weakrefs_notify(object);
+    }
 }
 /* }}} */
 
diff --git a/ext/ffi/tests/weak_reference_001.phpt b/ext/ffi/tests/weak_reference_001.phpt
new file mode 100644
index 0000000000..56f0be981f
--- /dev/null
+++ b/ext/ffi/tests/weak_reference_001.phpt
@@ -0,0 +1,17 @@
+--TEST--
+Weak reference to \FFI
+--EXTENSIONS--
+ffi
+--INI--
+ffi.enable=1
+--FILE--
+<?php
+$ffi = \FFI::cdef('');
+$ref = \WeakReference::create($ffi);
+var_dump($ref->get() === $ffi);
+unset($ffi);
+var_dump($ref->get() === null);
+?>
+--EXPECTF--
+bool(true)
+bool(true)
diff --git a/ext/ffi/tests/weak_reference_002.phpt b/ext/ffi/tests/weak_reference_002.phpt
new file mode 100644
index 0000000000..5c36cfa703
--- /dev/null
+++ b/ext/ffi/tests/weak_reference_002.phpt
@@ -0,0 +1,36 @@
+--TEST--
+Weak reference to \FFI\CData
+--EXTENSIONS--
+ffi
+--INI--
+ffi.enable=1
+--FILE--
+<?php
+$cdata_value = \FFI::new('int');
+$cdata_array = \FFI::new('int[1]');
+$cdata_free = \FFI::new('int[1]', false);
+\FFI::free($cdata_free);
+
+$ref_value = \WeakReference::create($cdata_value);
+$ref_array = \WeakReference::create($cdata_array);
+$ref_free = \WeakReference::create($cdata_free);
+
+var_dump($ref_value->get() === $cdata_value);
+var_dump($ref_array->get() === $cdata_array);
+var_dump($ref_free->get() === $cdata_free);
+
+unset($cdata_value);
+unset($cdata_array);
+unset($cdata_free);
+
+var_dump($ref_value->get() === null);
+var_dump($ref_array->get() === null);
+var_dump($ref_free->get() === null);
+?>
+--EXPECTF--
+bool(true)
+bool(true)
+bool(true)
+bool(true)
+bool(true)
+bool(true)
diff --git a/ext/ffi/tests/weak_reference_003.phpt b/ext/ffi/tests/weak_reference_003.phpt
new file mode 100644
index 0000000000..15b9397a68
--- /dev/null
+++ b/ext/ffi/tests/weak_reference_003.phpt
@@ -0,0 +1,17 @@
+--TEST--
+Weak reference to \FFI\CType
+--EXTENSIONS--
+ffi
+--INI--
+ffi.enable=1
+--FILE--
+<?php
+$ctype = \FFI::type('int');
+$ref = \WeakReference::create($ctype);
+var_dump($ref->get() === $ctype);
+unset($ctype);
+var_dump($ref->get() === null);
+?>
+--EXPECTF--
+bool(true)
+bool(true)
diff --git a/ext/ffi/tests/weak_reference_004.phpt b/ext/ffi/tests/weak_reference_004.phpt
new file mode 100644
index 0000000000..500776fa21
--- /dev/null
+++ b/ext/ffi/tests/weak_reference_004.phpt
@@ -0,0 +1,36 @@
+--TEST--
+Using FFI Types for keys of a WeakMap
+--EXTENSIONS--
+ffi
+--INI--
+ffi.enable=1
+--FILE--
+<?php
+$map = new WeakMap();
+
+$ffi = \FFI::cdef('');
+$cdata_value = \FFI::new('int');
+$cdata_array = \FFI::new('int[1]');
+$cdata_free = \FFI::new('int[1]', false);
+\FFI::free($cdata_free);
+$ctype = \FFI::type('int');
+
+$map[$ffi] = 'ffi';
+$map[$cdata_value] = 'cdata_value';
+$map[$cdata_array] = 'cdata_array';
+$map[$cdata_free] = 'cdata_free';
+$map[$ctype] = 'ctype';
+
+var_dump(count($map) === 5);
+
+unset($ffi);
+unset($cdata_value);
+unset($cdata_array);
+unset($cdata_free);
+unset($ctype);
+
+var_dump(count($map) === 0);
+?>
+--EXPECTF--
+bool(true)
+bool(true)
