commit 872d8d0beabd9a81c08fc34ec83285c690228aa8
Author: Namyoon Woo <namyoon@google.com>
Date:   Mon Mar 23 10:37:53 2020 -0700

    reduce command set to CC_S_CROS_ONLY for cr50 dev image
    
    This patch reduces the TPM command set from CC_S_COMMON_SET to
    CC_S_CROS_ONLY. Techincally, it excludes CC_S_TCG_MUST, CC_S_WIN_MUST
    and CC_WIN_REC. It reduces flash usage by 12.6 kbytes.
    
    BUG=b:151758820
    TEST=ran trunks_client tests on octopus fleex.
    $ trunks_client --regression_test
    $ trunks_client --stress_test
    $ trunks_client --ext_command_test
    
    Ran platform/login tests, and checked them pass:
      login_CryptohomeDataLeak
      login_CryptohomeOwnerQuery
      login_LoginSuccess
      login_LoginSuccess.stress
      platform_BootLockboxServer
      platform_BootPerf
      platform_CryptohomeBadPerms
      platform_CryptohomeChangePassword
      platform_CryptohomeFio
      platform_CryptohomeFio.dirty_setting
      platform_CryptohomeFio.stress
      platform_CryptohomeGetEnrollmentId
      platform_CryptohomeKeyEviction
      platform_CryptohomeLECredentialManagerServer
      platform_CryptohomeMigrateKey
      platform_CryptohomeMount
      platform_CryptohomeMultiple
      platform_CryptohomeNonDirs
      platform_CryptohomeStress
      platform_CryptohomeStress.surfing
      platform_CryptohomeTPMReOwnServer
      platform_CryptohomeTestAuth
      platform_CryptohomeTpmLiveTestServer
      platform_LogoutPerf
      platform_Pkcs11InitOnLogin
    
    Ran tast hwsec tests, and checked them pass:
      hwsec.Login
      hwsec.LoginGuest
      hwsec.AttestationEID
      hwsec.ChallengeResponseMount
      hwsec.CryptohomeTPMLiveTests
      hwsec.RecreateUserVault
      hwsec.ClearOwnership
      hwsec.CryptohomeKeysAndMountSanity
      hwsec.InstallAttributes
      hwsec.LoginDuringTakingOwnership
      hwsec.RetakeOwnership
      hwsec.RetakeOwnershipFlushPassword
      hwsec.RetakeOwnershipLatePreparation
    
    Change-Id: I702c8e89a84647fb856ec9f8ccb2c44fa6fee4f5
    Reviewed-on: https://chromium-review.googlesource.com/c/chromiumos/third_party/tpm2/+/2115943
    Tested-by: Namyoon Woo <namyoon@chromium.org>
    Reviewed-by: Andrey Pronin <apronin@chromium.org>
    Commit-Queue: Namyoon Woo <namyoon@chromium.org>

diff --git a/Implementation.h b/Implementation.h
index 829f1af..767a652 100644
--- a/Implementation.h
+++ b/Implementation.h
@@ -1,353 +1,353 @@
 // This file was extracted from the TCG Published
 // Trusted Platform Module Library
 // Part 4: Supporting Routines
 // Family "2.0"
 // Level 00 Revision 01.16
 // October 30, 2014
 
 #ifndef _IMPLEMENTATION_H_
 #define _IMPLEMENTATION_H_
 #include     "BaseTypes.h"
 #include     "TPMB.h"
 #undef TRUE
 #undef FALSE
 //
 //     This table is built in to TpmStructures() Change these definitions
 //     to turn all algorithms or commands on or off
 //
 #define         ALG_YES         YES
 #define         ALG_NO          NO
 #define         CC_YES          YES
 #define         CC_NO           NO
 //
 //     From TPM 2.0 Part 2: Table 4 - Defines for Logic Values
 //
 #define    TRUE       1
 #define    FALSE      0
 #define    YES        1
 #define    NO         0
 #define    SET        1
 #define    CLEAR      0
 //
 //     From Vendor-Specific: Table 1 - Defines for Processor Values
 //
 #define    BIG_ENDIAN_TPM             NO
 #define    LITTLE_ENDIAN_TPM          YES
 #define    NO_AUTO_ALIGN              NO
 //
 //     From Vendor-Specific: Table 2 - Defines for Implemented Algorithms
 //
 #define    ALG_RSA                     ALG_YES
 #define    ALG_SHA1                    ALG_YES
 #define    ALG_HMAC                    ALG_YES
 #define    ALG_AES                     ALG_YES
 #define    ALG_MGF1                    ALG_YES
 #define    ALG_XOR                     ALG_YES
 #define    ALG_KEYEDHASH               ALG_YES
 #define    ALG_SHA256                  ALG_YES
 #define    ALG_SHA384                  ALG_YES
 #define    ALG_SHA512                  ALG_YES
 #define    ALG_SM3_256                 ALG_NO
 #define    ALG_SM4                     ALG_NO
 #define    ALG_RSASSA                  (ALG_YES*ALG_RSA)
 #define    ALG_RSAES                   (ALG_YES*ALG_RSA)
 #define    ALG_RSAPSS                  (ALG_YES*ALG_RSA)
 #define   ALG_OAEP                  (ALG_YES*ALG_RSA)
 #define   ALG_ECC                   ALG_YES
 #define   ALG_ECDH                  (ALG_YES*ALG_ECC)
 #define   ALG_ECDSA                 (ALG_YES*ALG_ECC)
 #ifdef EMBEDDED_MODE
 #define   ALG_ECDAA                 (ALG_NO*ALG_ECC)
 #define   ALG_SM2                   (ALG_NO*ALG_ECC)
 #define   ALG_ECSCHNORR             (ALG_NO*ALG_ECC)
 #else
 #define   ALG_ECDAA                 (ALG_YES*ALG_ECC)
 #define   ALG_SM2                   (ALG_YES*ALG_ECC)
 #define   ALG_ECSCHNORR             (ALG_YES*ALG_ECC)
 #endif
 #define   ALG_ECMQV                 (ALG_NO*ALG_ECC)
 #define   ALG_SYMCIPHER             ALG_YES
 #define   ALG_KDF1_SP800_56A        (ALG_YES*ALG_ECC)
 #define   ALG_KDF2                  ALG_NO
 #define   ALG_KDF1_SP800_108        ALG_YES
 #define   ALG_CTR                   ALG_YES
 #define   ALG_OFB                   ALG_YES
 #define   ALG_CBC                   ALG_YES
 #define   ALG_CFB                   ALG_YES
 #define   ALG_ECB                   ALG_YES
 //
 //     From Vendor-Specific: Table 4 - Defines for Key Size Constants
 //
 #define RSA_KEY_SIZES_BITS          {1024,2048}
 #define RSA_KEY_SIZE_BITS_1024      RSA_ALLOWED_KEY_SIZE_1024
 #define RSA_KEY_SIZE_BITS_2048      RSA_ALLOWED_KEY_SIZE_2048
 #define MAX_RSA_KEY_BITS            2048
 #define MAX_RSA_KEY_BYTES           256
 #define AES_KEY_SIZES_BITS          {128,256}
 #define AES_KEY_SIZE_BITS_128       AES_ALLOWED_KEY_SIZE_128
 #define AES_KEY_SIZE_BITS_256       AES_ALLOWED_KEY_SIZE_256
 #define MAX_AES_KEY_BITS            256
 #define MAX_AES_KEY_BYTES           32
 #define MAX_AES_BLOCK_SIZE_BYTES                               \
            MAX(AES_128_BLOCK_SIZE_BYTES,                      \
            MAX(AES_256_BLOCK_SIZE_BYTES, 0))
 #define SM4_KEY_SIZES_BITS          {128}
 #define SM4_KEY_SIZE_BITS_128       SM4_ALLOWED_KEY_SIZE_128
 #define MAX_SM4_KEY_BITS            128
 #define MAX_SM4_KEY_BYTES           16
 #define MAX_SM4_BLOCK_SIZE_BYTES                               \
            MAX(SM4_128_BLOCK_SIZE_BYTES, 0)
 #define CAMELLIA_KEY_SIZES_BITS     {128}
 #define CAMELLIA_KEY_SIZE_BITS_128      CAMELLIA_ALLOWED_KEY_SIZE_128
 #define MAX_CAMELLIA_KEY_BITS       128
 #define MAX_CAMELLIA_KEY_BYTES      16
 #define MAX_CAMELLIA_BLOCK_SIZE_BYTES                          \
            MAX(CAMELLIA_128_BLOCK_SIZE_BYTES, 0)
 //
 //     From Vendor-Specific: Table 5 - Defines for Implemented Curves
 //
 #define ECC_NIST_P256          YES
 #define ECC_NIST_P384          YES
 #define ECC_BN_P256            YES
 #define ECC_CURVES             {\
    TPM_ECC_BN_P256, TPM_ECC_NIST_P256, TPM_ECC_NIST_P384}
 #define ECC_KEY_SIZES_BITS     {256, 384}
 #define ECC_KEY_SIZE_BITS_256
 #define ECC_KEY_SIZE_BITS_384
 #define MAX_ECC_KEY_BITS       384
 #define MAX_ECC_KEY_BYTES      48
 //
 //     From Vendor-Specific: Table 6 - Defines for Implemented Commands
 //
 
 // Flags to define wherever command is needed for a particular environment:
 // - Commands mandatory for Chrome OS
 #define CC_S_CROS_MUST (1 << 1)
 // - Commands required by TCG PC Client Profile
 #define CC_S_TCG_MUST  (1 << 2)
 // - Commands mandatory for Windows
 #define CC_S_WIN_MUST  (1 << 3)
 // - Commands recommended for Windows
 #define CC_S_WIN_REC   (1 << 4)
 // - Commands devoted to firmware upgrade
 #define CC_S_FWUPGRADE (1 << 5)
 // - Commands required for ChromeOS AP firmware
 #define CC_S_COREBOOT  (1 << 6)
 // - Other commands: optional for all OS and TCG
 #define CC_S_OPTIONAL  (1 << 7)
 
 // Flags to define common combinations of flags:
 // - Commands mandatory for ChromeOS and TCG
 #define CC_S_CROS_TCG (CC_S_CROS_MUST | CC_S_TCG_MUST)
 // - Commands mandatory and recommended for Windows
 #define CC_S_WINDOWS (CC_S_WIN_MUST | CC_S_WIN_REC)
 // - Commands mandatory for TCG and Windows, including recommended for Windows
 #define CC_S_WIN_TCG (CC_S_WINDOWS | CC_S_TCG_MUST)
 // - Commands mandatory for ChromeOS, Windows, TCG
 #define CC_S_ALL_MUST (CC_S_CROS_MUST | CC_S_WINDOWS | CC_S_TCG_MUST)
 
 // Flags to select supported environment (for CC_ENABLED_SET)
-// CC_S_CROS_ONLY - Only ChromeOS / Coreboot / FW Upgrade required commands
+// CC_S_CROS_ONLY - Only ChromeOS / Coreboot
 // CC_S_WINDOWS_ONLY - Support only Windows mandatory and recommended
 // CC_S_COMMON_SET - Common subset of mandatory and recommended
 //          commands, excluding OPTIONAL
 #define CC_S_CROS_ONLY (CC_S_CROS_MUST | CC_S_COREBOOT)
 #define CC_S_WINDOWS_ONLY (CC_S_WINDOWS | CC_S_COREBOOT)
 #define CC_S_COMMON_SET (CC_S_CROS_ONLY | CC_S_WIN_TCG)
 
 // CC_ENABLED_SET defines flags to select supported environment
 #ifndef CC_ENABLED_SET
-#define CC_ENABLED_SET CC_S_COMMON_SET
+#define CC_ENABLED_SET (CC_S_CROS_ONLY)
 #endif
 
 #define CC_SET(mask) ((CC_ENABLED_SET & (mask)) ? CC_YES : CC_NO)
 #define IS_CC_ENABLED(cmd) ((CC_##cmd) == CC_YES)
 
 #define    CC_ActivateCredential             CC_SET(CC_S_ALL_MUST)
 #define    CC_Certify                        CC_SET(CC_S_ALL_MUST)
 #define    CC_CertifyCreation                CC_SET(CC_S_ALL_MUST)
 //
 #define    CC_ChangeEPS                      CC_SET(CC_S_OPTIONAL)
 #define    CC_ChangePPS                      CC_SET(CC_S_OPTIONAL)
 
 #define    CC_Clear                          CC_SET((CC_S_ALL_MUST | CC_S_COREBOOT))
 #define    CC_ClearControl                   CC_SET(CC_S_WIN_TCG)
 #define    CC_ClockRateAdjust                CC_SET(CC_S_TCG_MUST)
 #define    CC_ClockSet                       CC_SET(CC_S_WINDOWS)
 #define    CC_Commit                         CC_SET((CC_S_CROS_TCG * ALG_ECC))
 #define    CC_ContextLoad                    CC_SET(CC_S_ALL_MUST)
 #define    CC_ContextSave                    CC_SET(CC_S_ALL_MUST)
 #define    CC_Create                         CC_SET(CC_S_ALL_MUST)
 #define    CC_CreatePrimary                  CC_SET(CC_S_ALL_MUST)
 #define    CC_DictionaryAttackLockReset      CC_SET(CC_S_ALL_MUST)
 #define    CC_DictionaryAttackParameters     CC_SET(CC_S_ALL_MUST)
 #define    CC_Duplicate                      CC_SET(CC_S_WIN_TCG)
 #define    CC_ECC_Parameters                 CC_SET((CC_S_CROS_TCG * ALG_ECC))
 #define    CC_ECDH_KeyGen                    CC_SET((CC_S_CROS_TCG * ALG_ECC))
 #define    CC_ECDH_ZGen                      CC_SET((CC_S_CROS_TCG * ALG_ECC))
 #define    CC_EC_Ephemeral                   CC_SET((CC_S_OPTIONAL * ALG_ECC))
 #define    CC_EncryptDecrypt                 CC_SET(CC_S_OPTIONAL)
 #define    CC_EventSequenceComplete          CC_SET((CC_S_TCG_MUST | CC_S_WIN_REC))
 #define    CC_EvictControl                   CC_SET(CC_S_ALL_MUST)
 #define    CC_FieldUpgradeData               CC_SET(CC_S_FWUPGRADE)
 #define    CC_FieldUpgradeStart              CC_SET(CC_S_FWUPGRADE)
 #define    CC_FirmwareRead                   CC_SET(CC_S_FWUPGRADE)
 #define    CC_FlushContext                   CC_SET(CC_S_ALL_MUST)
 #define    CC_GetCapability                  CC_SET((CC_S_ALL_MUST | CC_S_COREBOOT))
 #define    CC_GetCommandAuditDigest          CC_SET(CC_S_OPTIONAL)
 #define    CC_GetRandom                      CC_SET(CC_S_ALL_MUST)
 #define    CC_GetSessionAuditDigest          CC_SET(CC_S_TCG_MUST)
 #define    CC_GetTestResult                  CC_SET(CC_S_ALL_MUST)
 #define    CC_GetTime                        CC_SET(CC_S_TCG_MUST)
 #define    CC_Hash                           CC_SET(CC_S_ALL_MUST)
 #define    CC_HashSequenceStart              CC_SET((CC_S_TCG_MUST | CC_S_WIN_REC))
 #define    CC_HierarchyChangeAuth            CC_SET(CC_S_ALL_MUST)
 #define    CC_HierarchyControl               CC_SET((CC_S_ALL_MUST | CC_S_COREBOOT))
 #define    CC_HMAC                           CC_SET(CC_S_CROS_TCG)
 #define    CC_HMAC_Start                     CC_SET(CC_S_TCG_MUST)
 #define    CC_Import                         CC_SET(CC_S_ALL_MUST)
 #define    CC_IncrementalSelfTest            CC_SET(CC_S_TCG_MUST)
 #define    CC_Load                           CC_SET(CC_S_ALL_MUST)
 #define    CC_LoadExternal                   CC_SET((CC_S_CROS_TCG | CC_S_WIN_REC))
 #define    CC_MakeCredential                 CC_SET((CC_S_TCG_MUST | CC_S_WIN_REC))
 #define    CC_NV_Certify                     CC_SET(CC_S_CROS_TCG)
 #define    CC_NV_ChangeAuth                  CC_SET(CC_S_WIN_TCG)
 #define    CC_NV_DefineSpace                 CC_SET((CC_S_ALL_MUST | CC_S_COREBOOT))
 #define    CC_NV_Extend                      CC_SET(CC_S_CROS_TCG)
 #define    CC_NV_GlobalWriteLock             CC_SET(CC_S_OPTIONAL)
 #define    CC_NV_Increment                   CC_SET(CC_S_WIN_TCG)
 #define    CC_NV_Read                        CC_SET((CC_S_ALL_MUST | CC_S_COREBOOT))
 #define    CC_NV_ReadLock                    CC_SET(CC_S_CROS_TCG)
 #define    CC_NV_ReadPublic                  CC_SET(CC_S_ALL_MUST)
 #define    CC_NV_SetBits                     CC_SET(CC_S_TCG_MUST)
 #define    CC_NV_UndefineSpace               CC_SET(CC_S_ALL_MUST)
 #define    CC_NV_UndefineSpaceSpecial        CC_SET(CC_S_CROS_TCG)
 #define    CC_NV_Write                       CC_SET((CC_S_ALL_MUST | CC_S_COREBOOT))
 #define    CC_NV_WriteLock                   CC_SET((CC_S_CROS_TCG | CC_S_COREBOOT))
 #define    CC_ObjectChangeAuth               CC_SET(CC_S_ALL_MUST)
 #define    CC_PCR_Allocate                   CC_SET(CC_S_CROS_TCG)
 #define    CC_PCR_Event                      CC_SET(CC_S_WIN_TCG)
 #define    CC_PCR_Extend                     CC_SET((CC_S_ALL_MUST | CC_S_COREBOOT))
 #define    CC_PCR_Read                       CC_SET(CC_S_ALL_MUST)
 #define    CC_PCR_Reset                      CC_SET(CC_S_WIN_TCG)
 #define    CC_PCR_SetAuthPolicy              CC_SET(CC_S_OPTIONAL)
 #define    CC_PCR_SetAuthValue               CC_SET(CC_S_OPTIONAL)
 #define    CC_PolicyAuthorize                CC_SET((CC_S_TCG_MUST | CC_S_WIN_REC))
 #define    CC_PolicyAuthValue                CC_SET(CC_S_ALL_MUST)
 #define    CC_PolicyCommandCode              CC_SET(CC_S_ALL_MUST)
 #define    CC_PolicyCounterTimer             CC_SET((CC_S_TCG_MUST | CC_S_WIN_REC))
 #define    CC_PolicyCpHash                   CC_SET((CC_S_TCG_MUST | CC_S_WIN_REC))
 #define    CC_PolicyDuplicationSelect        CC_SET((CC_S_TCG_MUST | CC_S_WIN_REC))
 #define    CC_PolicyGetDigest                CC_SET(CC_S_ALL_MUST)
 #define    CC_PolicyLocality                 CC_SET(CC_S_TCG_MUST)
 #define    CC_PolicyNameHash                 CC_SET((CC_S_TCG_MUST | CC_S_WIN_REC))
 #define    CC_PolicyNV                       CC_SET((CC_S_TCG_MUST | CC_S_WINDOWS))
 #define    CC_PolicyNvWritten                CC_SET(CC_S_TCG_MUST)
 #define    CC_PolicyOR                       CC_SET(CC_S_ALL_MUST)
 #define    CC_PolicyPassword                 CC_SET((CC_S_TCG_MUST | CC_S_WIN_REC))
 #define    CC_PolicyPCR                      CC_SET(CC_S_ALL_MUST)
 #define    CC_PolicyPhysicalPresence         CC_SET(CC_S_OPTIONAL)
 #define    CC_PolicyRestart                  CC_SET(CC_S_ALL_MUST)
 #define    CC_PolicySecret                   CC_SET(CC_S_ALL_MUST)
 #define    CC_PolicySigned                   CC_SET((CC_S_CROS_TCG | CC_S_WIN_REC))
 #define    CC_PolicyTicket                   CC_SET((CC_S_TCG_MUST | CC_S_WIN_REC))
 #define    CC_PP_Commands                    CC_SET(CC_S_OPTIONAL)
 #define    CC_Quote                          CC_SET(CC_S_ALL_MUST)
 #define    CC_ReadClock                      CC_SET(CC_S_WIN_TCG)
 #define    CC_ReadPublic                     CC_SET(CC_S_ALL_MUST)
 #define    CC_Rewrap                         CC_SET(CC_S_OPTIONAL)
 #define    CC_RSA_Decrypt                    CC_SET((CC_S_ALL_MUST * ALG_RSA))
 #define    CC_RSA_Encrypt                    CC_SET((CC_S_CROS_TCG * ALG_RSA))
 #define    CC_SelfTest                       CC_SET((CC_S_ALL_MUST | CC_S_COREBOOT))
 #define    CC_SequenceComplete               CC_SET((CC_S_TCG_MUST | CC_S_WIN_REC))
 #define    CC_SequenceUpdate                 CC_SET((CC_S_TCG_MUST | CC_S_WIN_REC))
 #define    CC_SetAlgorithmSet                CC_SET(CC_S_OPTIONAL)
 #define    CC_SetCommandCodeAuditStatus      CC_SET(CC_S_OPTIONAL)
 #define    CC_SetPrimaryPolicy               CC_SET(CC_S_TCG_MUST)
 #define    CC_Shutdown                       CC_SET((CC_S_ALL_MUST | CC_S_COREBOOT))
 #define    CC_Sign                           CC_SET(CC_S_ALL_MUST)
 #define    CC_StartAuthSession               CC_SET(CC_S_ALL_MUST)
 #define    CC_Startup                        CC_SET((CC_S_ALL_MUST | CC_S_COREBOOT))
 #define    CC_StirRandom                     CC_SET(CC_S_ALL_MUST)
 #define    CC_TestParms                      CC_SET(CC_S_TCG_MUST)
 #define    CC_Unseal                         CC_SET(CC_S_ALL_MUST)
 #define    CC_Vendor_TCG_Test                CC_SET(CC_S_OPTIONAL)
 #define    CC_VerifySignature                CC_SET((CC_S_CROS_TCG | CC_S_WIN_REC))
 #define    CC_ZGen_2Phase                    CC_SET((CC_S_OPTIONAL * ALG_ECC))
 
 #define IS_CCE_ENABLED(cmd) ((CCE_##cmd) == CC_YES)
 #define    CCE_PolicyFidoSigned              CC_SET(CC_S_CROS_TCG)
 
 //
 //      From Vendor-Specific: Table 7 - Defines for Implementation Values
 //
 #define   FIELD_UPGRADE_IMPLEMENTED              NO
 #define   BSIZE                                  UINT16
 #define   BUFFER_ALIGNMENT                       4
 #define   IMPLEMENTATION_PCR                     24
 #define   PLATFORM_PCR                           24
 #define   DRTM_PCR                               17
 #define   HCRTM_PCR                              0
 #define   NUM_LOCALITIES                         5
 #define   MAX_HANDLE_NUM                         3
 #define   MAX_ACTIVE_SESSIONS                    64
 #define   CONTEXT_SLOT                           UINT16
 #define   CONTEXT_COUNTER                        UINT64
 #define   MAX_LOADED_SESSIONS                    3
 #define   MAX_SESSION_NUM                        3
 #define   MAX_LOADED_OBJECTS                     3
 #define   MIN_EVICT_OBJECTS                      2
 #define   PCR_SELECT_MIN                         ((PLATFORM_PCR+7)/8)
 #define   PCR_SELECT_MAX                         ((IMPLEMENTATION_PCR+7)/8)
 #define   NUM_POLICY_PCR_GROUP                   1
 #define   NUM_AUTHVALUE_PCR_GROUP                1
 #define   MAX_CONTEXT_SIZE                       2048
 #define   MAX_DIGEST_BUFFER                      1024
 #define   MAX_NV_INDEX_SIZE                      2048
 //
 #define MAX_NV_BUFFER_SIZE                1024
 #define MAX_CAP_BUFFER                    1024
 #ifdef EMBEDDED_MODE
 // This must be matched by the package using this library!
 #define NV_MEMORY_SIZE                    11980
 // Versioning NV storage format will allow to smoothly migrate NVRAM contents.
 // Versions:
 // 1 - full non-serialized objects in NVMEM, max SHA digest is SHA-256
 // 2 - a mix of serialized and non-serialized objects in NVMEM, max SHA digest
 //     is SHA-512. Eviction objects can be stored either serialized or
 //     non-serialized. The size of the stored entity smaller than
 //     sizeof(OBJECT) is considered an indication of the serialized form.
 
 #define NV_FORMAT_VERSION                 2
 #else
 #define NV_MEMORY_SIZE                    16384
 #endif
 #define NUM_STATIC_PCR                    16
 #define MAX_ALG_LIST_SIZE                 64
 #define TIMER_PRESCALE                    100000
 #define PRIMARY_SEED_SIZE                 32
 #define CONTEXT_ENCRYPT_ALG               TPM_ALG_AES
 #define CONTEXT_ENCRYPT_KEY_BITS          MAX_SYM_KEY_BITS
 #define CONTEXT_ENCRYPT_KEY_BYTES         ((CONTEXT_ENCRYPT_KEY_BITS+7)/8)
 #define CONTEXT_INTEGRITY_HASH_ALG        TPM_ALG_SHA256
 #define CONTEXT_INTEGRITY_HASH_SIZE       SHA256_DIGEST_SIZE
 #define PROOF_SIZE                        CONTEXT_INTEGRITY_HASH_SIZE
 #define NV_CLOCK_UPDATE_INTERVAL          12
 #define NUM_POLICY_PCR                    1
 #define MAX_COMMAND_SIZE                  2048
 #define MAX_RESPONSE_SIZE                 2048
 #define ORDERLY_BITS                      8
 #define MAX_ORDERLY_COUNT                 ((1<<ORDERLY_BITS)-1)
 #define ALG_ID_FIRST                      TPM_ALG_FIRST
 #define ALG_ID_LAST                       TPM_ALG_LAST
 #define MAX_SYM_DATA                      128
 #define MAX_RNG_ENTROPY_SIZE              64
 #define RAM_INDEX_SPACE                   512
 #define RSA_DEFAULT_PUBLIC_EXPONENT       0x00010001
 #define ENABLE_PCR_NO_INCREMENT           YES
 #define CRT_FORMAT_RSA                    YES
 #define PRIVATE_VENDOR_SPECIFIC_BYTES     \
    ((MAX_RSA_KEY_BYTES/2)*(3+CRT_FORMAT_RSA*2))
 //
 //      From TCG Algorithm Registry: Table 2 - Definition of TPM_ALG_ID Constants
 //
