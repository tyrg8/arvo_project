commit 06aec61435eab1c511c4c809e5ebd637c2551839
Author: Luca Versari <veluca93@gmail.com>
Date:   Thu Jan 4 13:06:15 2024 +0100

    Fix dithering when doing non-8-aligned processing. (#3093)

diff --git a/lib/jxl/render_pipeline/stage_write.cc b/lib/jxl/render_pipeline/stage_write.cc
index e0a8c896..847972ac 100644
--- a/lib/jxl/render_pipeline/stage_write.cc
+++ b/lib/jxl/render_pipeline/stage_write.cc
@@ -38,23 +38,48 @@ using hwy::HWY_NAMESPACE::VFromD;
 // 8x8 ordered dithering pattern from
 // https://en.wikipedia.org/wiki/Ordered_dithering
 // scaled to have an average of 0 and be fully contained in (-0.5, 0.5).
-const float kDither[64] = {
-    -0.4921875, 0.0078125,  -0.3671875, 0.1328125,   //
-    -0.4609375, 0.0390625,  -0.3359375, 0.1640625,   //
-    0.2578125,  -0.2421875, 0.3828125,  -0.1171875,  //
-    0.2890625,  -0.2109375, 0.4140625,  -0.0859375,  //
-    -0.3046875, 0.1953125,  -0.4296875, 0.0703125,   //
-    -0.2734375, 0.2265625,  -0.3984375, 0.1015625,   //
-    0.4453125,  -0.0546875, 0.3203125,  -0.1796875,  //
-    0.4765625,  -0.0234375, 0.3515625,  -0.1484375,  //
-    -0.4453125, 0.0546875,  -0.3203125, 0.1796875,   //
-    -0.4765625, 0.0234375,  -0.3515625, 0.1484375,   //
-    0.3046875,  -0.1953125, 0.4296875,  -0.0703125,  //
-    0.2734375,  -0.2265625, 0.3984375,  -0.1015625,  //
-    -0.2578125, 0.2421875,  -0.3828125, 0.1171875,   //
-    -0.2890625, 0.2109375,  -0.4140625, 0.0859375,   //
-    0.4921875,  -0.0078125, 0.3671875,  -0.1328125,  //
-    0.4609375,  -0.0390625, 0.3359375,  -0.1640625,  //
+// Matrix is duplicated in width to avoid inconsistencies or out-of-bound-reads
+// if doing unaligned operations.
+const float kDither[(2 * 8) * 8] = {
+    -0.4921875, 0.0078125, -0.3671875, 0.1328125,  //
+    -0.4609375, 0.0390625, -0.3359375, 0.1640625,  //
+    -0.4921875, 0.0078125, -0.3671875, 0.1328125,  //
+    -0.4609375, 0.0390625, -0.3359375, 0.1640625,  //
+                                                   //
+    0.2578125, -0.2421875, 0.3828125, -0.1171875,  //
+    0.2890625, -0.2109375, 0.4140625, -0.0859375,  //
+    0.2578125, -0.2421875, 0.3828125, -0.1171875,  //
+    0.2890625, -0.2109375, 0.4140625, -0.0859375,  //
+                                                   //
+    -0.3046875, 0.1953125, -0.4296875, 0.0703125,  //
+    -0.2734375, 0.2265625, -0.3984375, 0.1015625,  //
+    -0.3046875, 0.1953125, -0.4296875, 0.0703125,  //
+    -0.2734375, 0.2265625, -0.3984375, 0.1015625,  //
+                                                   //
+    0.4453125, -0.0546875, 0.3203125, -0.1796875,  //
+    0.4765625, -0.0234375, 0.3515625, -0.1484375,  //
+    0.4453125, -0.0546875, 0.3203125, -0.1796875,  //
+    0.4765625, -0.0234375, 0.3515625, -0.1484375,  //
+                                                   //
+    -0.4453125, 0.0546875, -0.3203125, 0.1796875,  //
+    -0.4765625, 0.0234375, -0.3515625, 0.1484375,  //
+    -0.4453125, 0.0546875, -0.3203125, 0.1796875,  //
+    -0.4765625, 0.0234375, -0.3515625, 0.1484375,  //
+                                                   //
+    0.3046875, -0.1953125, 0.4296875, -0.0703125,  //
+    0.2734375, -0.2265625, 0.3984375, -0.1015625,  //
+    0.3046875, -0.1953125, 0.4296875, -0.0703125,  //
+    0.2734375, -0.2265625, 0.3984375, -0.1015625,  //
+                                                   //
+    -0.2578125, 0.2421875, -0.3828125, 0.1171875,  //
+    -0.2890625, 0.2109375, -0.4140625, 0.0859375,  //
+    -0.2578125, 0.2421875, -0.3828125, 0.1171875,  //
+    -0.2890625, 0.2109375, -0.4140625, 0.0859375,  //
+                                                   //
+    0.4921875, -0.0078125, 0.3671875, -0.1328125,  //
+    0.4609375, -0.0390625, 0.3359375, -0.1640625,  //
+    0.4921875, -0.0078125, 0.3671875, -0.1328125,  //
+    0.4609375, -0.0390625, 0.3359375, -0.1640625,  //
 };
 
 using DF = HWY_FULL(float);
@@ -65,18 +90,18 @@ template <typename T>
 VFromD<Rebind<T, DF>> MakeUnsigned(VFromD<DF> v, size_t x0, size_t y0,
                                    VFromD<DF> mul) {
   static_assert(std::is_unsigned<T>::value, "T must be an unsigned type");
   using DU = Rebind<T, DF>;
   v = Mul(v, mul);
   // TODO(veluca): if constexpr with C++17
   if (sizeof(T) == 1) {
-    size_t pos = (y0 % 8) * 8 + (x0 % 8);
+    size_t pos = (y0 % 8) * (2 * 8) + (x0 % 8);
 #if HWY_TARGET != HWY_SCALAR
     auto dither = LoadDup128(DF(), kDither + pos);
 #else
     auto dither = LoadU(DF(), kDither + pos);
 #endif
     v = Add(v, dither);
   }
   v = Clamp(Zero(DF()), v, mul);
   return DemoteTo(DU(), NearestInt(v));
 }
