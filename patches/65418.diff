commit a20a5df162992908b166644f4d5b7dad96b4cdfd
Author: Ashwin Natesan <ashwin.natesan@ittiam.com>
Date:   Tue Jan 16 13:04:58 2024 +0530

    mvcdec: Heap overflow in 'ih264d_parse_fgc'
    
    Although the fag end of both the NALU and the bitstream buffer
     is being parsed, not all FGC SEI symbols would have been
    decoded semantically. This commit detects and returns an error
    in this situation.
    
    Bug = ossfuzz:65418
    Test: mvc_dec_fuzzer

diff --git a/decoder/ih264d_sei.c b/decoder/ih264d_sei.c
index 079f036..e7d436c 100644
--- a/decoder/ih264d_sei.c
+++ b/decoder/ih264d_sei.c
@@ -735,213 +735,221 @@ WORD32 ih264d_parse_sii(dec_bit_stream_t *ps_bitstrm, dec_struct_t *ps_dec,
 /*****************************************************************************/
 /*                                                                           */
 /*  Function Name : ih264d_parse_fgc                                         */
 /*                                                                           */
 /*  Description   : This function parses SEI message film grain charcaristics*/
 /*  Inputs        : ps_bitstrm    Bitstream                                  */
 /*                  ps_dec          Poniter decoder context                  */
 /*                  ui4_payload_size pay load i4_size                        */
 /*  Globals       : None                                                     */
 /*  Processing    :                                                          */
 /*  Outputs       : None                                                     */
 /*  Return        : 0 for successfull parsing, else -1                       */
 /*                                                                           */
 /*  Issues        :                                                          */
 /*                                                                           */
 /*  Revision History:                                                        */
 /*                                                                           */
 /*         DD MM YYYY   Author(s)       Changes (Describe the changes made)  */
 /*                         Draft                                             */
 /*                                                                           */
 /*****************************************************************************/
 WORD32 ih264d_parse_fgc(dec_bit_stream_t *ps_bitstrm, dec_struct_t *ps_dec,
                         UWORD32 ui4_payload_size)
 {
     sei *ps_sei = ps_dec->ps_sei_parse;
     dec_err_status_t *ps_err = ps_dec->ps_dec_err_status;
     UWORD32 *pu4_bitstrm_ofst = &ps_bitstrm->u4_ofst;
     UWORD32 *pu4_bitstrm_buf = ps_bitstrm->pu4_buffer;
     UWORD32 u4_count;
     WORD32 i4_luma_bitdepth, i4_chroma_bitdepth;
     UWORD32 c, i, j;
     UNUSED(ui4_payload_size);
 
     if((ps_dec == NULL) || (ps_sei == NULL))
     {
         return NOT_OK;
     }
 
     ps_sei->u1_sei_fgc_params_present_flag = 0;
 
     ps_sei->s_sei_fgc_params.u1_film_grain_characteristics_cancel_flag =
         (UWORD8) ih264d_get_bit_h264(ps_bitstrm);
 
     if(0 == ps_sei->s_sei_fgc_params.u1_film_grain_characteristics_cancel_flag)
     {
         ps_sei->s_sei_fgc_params.u1_film_grain_model_id =
             (UWORD8) ih264d_get_bits_h264(ps_bitstrm, 2);
         if(ps_sei->s_sei_fgc_params.u1_film_grain_model_id > 1)
         {
             return ERROR_INV_SEI_FGC_PARAMS;
         }
         ps_sei->s_sei_fgc_params.u1_separate_colour_description_present_flag =
             (UWORD8) ih264d_get_bit_h264(ps_bitstrm);
 
         if(ps_sei->s_sei_fgc_params.u1_separate_colour_description_present_flag)
         {
             ps_sei->s_sei_fgc_params.u1_film_grain_bit_depth_luma_minus8 =
                 (UWORD8) ih264d_get_bits_h264(ps_bitstrm, 3);
 
             i4_luma_bitdepth = ps_sei->s_sei_fgc_params.u1_film_grain_bit_depth_luma_minus8 + 8;
 
             ps_sei->s_sei_fgc_params.u1_film_grain_bit_depth_chroma_minus8 =
                 (UWORD8) ih264d_get_bits_h264(ps_bitstrm, 3);
 
             i4_chroma_bitdepth = ps_sei->s_sei_fgc_params.u1_film_grain_bit_depth_chroma_minus8 + 8;
 
             ps_sei->s_sei_fgc_params.u1_film_grain_full_range_flag =
                 (UWORD8) ih264d_get_bit_h264(ps_bitstrm);
 
             ps_sei->s_sei_fgc_params.u1_film_grain_colour_primaries =
                 (UWORD8) ih264d_get_bits_h264(ps_bitstrm, 8);
 
             ps_sei->s_sei_fgc_params.u1_film_grain_transfer_characteristics =
                 (UWORD8) ih264d_get_bits_h264(ps_bitstrm, 8);
 
             ps_sei->s_sei_fgc_params.u1_film_grain_matrix_coefficients =
                 (UWORD8) ih264d_get_bits_h264(ps_bitstrm, 8);
         }
         else
         {
             if(ps_dec->ps_cur_sps == NULL)
             {
                 return NOT_OK;
             }
             i4_luma_bitdepth = ps_dec->ps_cur_sps->i4_bit_depth_luma_minus8 + 8;
             i4_chroma_bitdepth = ps_dec->ps_cur_sps->i4_bit_depth_chroma_minus8 + 8;
         }
         ps_sei->s_sei_fgc_params.u1_blending_mode_id = (UWORD8) ih264d_get_bits_h264(ps_bitstrm, 2);
 
         if(ps_sei->s_sei_fgc_params.u1_blending_mode_id > 1)
         {
             return ERROR_INV_SEI_FGC_PARAMS;
         }
 
         ps_sei->s_sei_fgc_params.u1_log2_scale_factor =
             (UWORD8) ih264d_get_bits_h264(ps_bitstrm, 4);
 
         for(c = 0; c < SEI_FGC_NUM_COLOUR_COMPONENTS; c++)
         {
             ps_sei->s_sei_fgc_params.au1_comp_model_present_flag[c] =
                 (UWORD8) ih264d_get_bit_h264(ps_bitstrm);
         }
 
         for(c = 0; c < SEI_FGC_NUM_COLOUR_COMPONENTS; c++)
         {
             if(ps_sei->s_sei_fgc_params.au1_comp_model_present_flag[c])
             {
                 ps_sei->s_sei_fgc_params.au1_num_intensity_intervals_minus1[c] =
                     (UWORD8) ih264d_get_bits_h264(ps_bitstrm, 8);
 
                 ps_sei->s_sei_fgc_params.au1_num_model_values_minus1[c] =
                     (UWORD8) ih264d_get_bits_h264(ps_bitstrm, 3);
 
                 if(ps_sei->s_sei_fgc_params.au1_num_model_values_minus1[c] >
                    (SEI_FGC_MAX_NUM_MODEL_VALUES - 1))
                 {
                     return ERROR_INV_SEI_FGC_PARAMS;
                 }
 
                 for(i = 0; i <= ps_sei->s_sei_fgc_params.au1_num_intensity_intervals_minus1[c]; i++)
                 {
+                    /* Although the fag end of both the NALU and the bitstream buffer */
+                    /* is being parsed, not all FGC SEI symbols would have been */
+                    /* decoded semantically. The code below detects this condition */
+                    if((ps_bitstrm->u4_ofst + 8 + 8) >= ps_bitstrm->u4_max_ofst)
+                    {
+                        return ERROR_INV_SEI_FGC_PARAMS;
+                    }
+
                     ps_sei->s_sei_fgc_params.au1_intensity_interval_lower_bound[c][i] =
                         (UWORD8) ih264d_get_bits_h264(ps_bitstrm, 8);
 
                     ps_sei->s_sei_fgc_params.au1_intensity_interval_upper_bound[c][i] =
                         (UWORD8) ih264d_get_bits_h264(ps_bitstrm, 8);
 
                     for(j = 0; j <= ps_sei->s_sei_fgc_params.au1_num_model_values_minus1[c]; j++)
                     {
                         ps_sei->s_sei_fgc_params.ai4_comp_model_value[c][i][j] =
                             (WORD32) ih264d_sev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
                         if(0 == ps_sei->s_sei_fgc_params.u1_film_grain_model_id)
                         {
                             if((1 == j) || (2 == j))
                             {
                                 if((ps_sei->s_sei_fgc_params.ai4_comp_model_value[c][i][j] < 0) ||
                                    (ps_sei->s_sei_fgc_params.ai4_comp_model_value[c][i][j] > 16))
                                     return ERROR_INV_SEI_FGC_PARAMS;
                             }
                             else if((3 == j) || (4 == j))
                             {
                                 if((ps_sei->s_sei_fgc_params.ai4_comp_model_value[c][i][j] < 0) ||
                                    (ps_sei->s_sei_fgc_params.ai4_comp_model_value[c][i][j] >
                                     ps_sei->s_sei_fgc_params.ai4_comp_model_value[c][i][j - 2]))
                                     return ERROR_INV_SEI_FGC_PARAMS;
                             }
                             else
                             {
                                 WORD32 max_lim = (c == 0) ? (1 << i4_luma_bitdepth) - 1
                                                           : (1 << i4_chroma_bitdepth) - 1;
 
                                 if((ps_sei->s_sei_fgc_params.ai4_comp_model_value[c][i][j] < 0) ||
                                    (ps_sei->s_sei_fgc_params.ai4_comp_model_value[c][i][j] >
                                     max_lim))
                                 {
                                     return ERROR_INV_SEI_FGC_PARAMS;
                                 }
                             }
                         }
                         else
                         {
                             WORD32 max_lim = (c == 0) ? (1 << (i4_luma_bitdepth - 1))
                                                       : (1 << (i4_chroma_bitdepth - 1));
 
                             if((ps_sei->s_sei_fgc_params.ai4_comp_model_value[c][i][j] <
                                 -max_lim) ||
                                (ps_sei->s_sei_fgc_params.ai4_comp_model_value[c][i][j] >= max_lim))
                             {
                                 return ERROR_INV_SEI_FGC_PARAMS;
                             }
                         }
                     }
                 }
             }
         }
 
         ps_sei->s_sei_fgc_params.u4_film_grain_characteristics_repetition_period =
             (UWORD32) ih264d_uev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
 
         if(ps_sei->s_sei_fgc_params.u4_film_grain_characteristics_repetition_period < 0 ||
            ps_sei->s_sei_fgc_params.u4_film_grain_characteristics_repetition_period > 16384)
         {
             return ERROR_INV_SEI_FGC_PARAMS;
         }
 
         ps_sei->u1_sei_fgc_params_present_flag = 1;
     }
 
     return (OK);
 }
 
 /*****************************************************************************/
 /*                                                                           */
 /*  Function Name : ih264d_parse_sei_payload                                 */
 /*                                                                           */
 /*  Description   : This function parses SEI pay loads. Currently it's       */
 /*                  implemented partially.                                   */
 /*  Inputs        : ps_bitstrm    Bitstream                                  */
 /*                  ui4_payload_type  SEI payload type                       */
 /*                  ui4_payload_size  SEI payload i4_size                    */
 /*  Globals       : None                                                     */
 /*  Processing    : Parses SEI payloads units and stores the info            */
 /*  Outputs       : None                                                     */
 /*  Return        : status for successful parsing, else -1                   */
 /*                                                                           */
 /*  Issues        : Not implemented fully                                    */
 /*                                                                           */
 /*  Revision History:                                                        */
 /*                                                                           */
 /*         DD MM YYYY   Author(s)       Changes (Describe the changes made)  */
 /*         06 05 2002   NS              Draft                                */
 /*                                                                           */
 /*****************************************************************************/
diff --git a/decoder/mvc/imvcd_api.c b/decoder/mvc/imvcd_api.c
index 3e95a80..1026fc8 100644
--- a/decoder/mvc/imvcd_api.c
+++ b/decoder/mvc/imvcd_api.c
@@ -669,344 +669,346 @@ static FORCEINLINE void imvcd_update_num_subset_sps(mvc_dec_ctxt_t *ps_mvcd_ctxt
 static IV_API_CALL_STATUS_T imvcd_view_decode(iv_obj_t *ps_dec_hdl, imvcd_video_decode_ip_t *ps_ip,
                                               imvcd_video_decode_op_t *ps_op)
 {
     UWORD8 *pu1_input_buffer;
     UWORD8 *pu1_bitstream_buf;
     UWORD32 u4_bitstream_buf_size;
     WORD32 i4_nalu_length;
     UWORD32 u4_length_of_start_code;
     WORD32 i4_error_code;
 
     mvc_dec_ctxt_t *ps_mvcd_ctxt = (mvc_dec_ctxt_t *) ps_dec_hdl->pv_codec_handle;
     dec_struct_t *ps_view_ctxt = &ps_mvcd_ctxt->s_view_dec_ctxt;
 
     UWORD32 u4_num_bytes_consumed = 0;
     UWORD32 u4_num_bytes_remaining = ps_ip->s_ivd_ip.u4_num_Bytes;
     bool b_first_start_code_found = false;
     bool b_frame_data_left = true;
     bool b_header_data_left = true;
     UWORD32 u4_next_is_aud = 0;
 
     ASSERT(u4_num_bytes_remaining > 0);
 
     imvcd_view_init(ps_mvcd_ctxt);
 
     do
     {
         pu1_input_buffer = ((UWORD8 *) ps_ip->s_ivd_ip.pv_stream_buffer) + u4_num_bytes_consumed;
 
         if(!ps_view_ctxt->pu1_bits_buf_dynamic &&
            is_header_decoded(ps_view_ctxt->i4_header_decoded, PPS))
         {
             if(IV_SUCCESS !=
                imvcd_bitstream_buf_alloc(
                    ps_view_ctxt, is_header_decoded(ps_view_ctxt->i4_header_decoded, SUBSET_SPS)
                                      ? ps_mvcd_ctxt->u2_num_views
                                      : 1))
             {
                 return IV_FAIL;
             }
         }
 
         if(ps_view_ctxt->pu1_bits_buf_dynamic)
         {
             pu1_bitstream_buf = ps_view_ctxt->pu1_bits_buf_dynamic;
             u4_bitstream_buf_size = ps_view_ctxt->u4_dynamic_bits_buf_size;
         }
         else
         {
             pu1_bitstream_buf = ps_view_ctxt->pu1_bits_buf_static;
             u4_bitstream_buf_size = ps_view_ctxt->u4_static_bits_buf_size;
         }
 
         i4_nalu_length = ih264d_find_start_code(pu1_input_buffer, 0, u4_num_bytes_remaining,
                                                 &u4_length_of_start_code, &u4_next_is_aud);
 
         if(i4_nalu_length == -1)
         {
             i4_nalu_length = 0;
         }
 
         if((0 != u4_next_is_aud) && (1 != u4_next_is_aud))
         {
             return IV_FAIL;
         }
 
         if(i4_nalu_length)
         {
             UWORD32 u4_nalu_buf_size = ((UWORD32) i4_nalu_length) + 8;
 
             if(u4_nalu_buf_size > u4_bitstream_buf_size)
             {
-                if(IV_SUCCESS != imvcd_bitstream_buf_realloc(ps_view_ctxt, u4_nalu_buf_size))
+                /* 64 extra bytes to account for OOB accesses during SEI parsing in */
+                /* some fuzzer bitstreams */
+                if(IV_SUCCESS != imvcd_bitstream_buf_realloc(ps_view_ctxt, u4_nalu_buf_size + 64))
                 {
                     return IV_FAIL;
                 }
 
                 pu1_bitstream_buf = ps_view_ctxt->pu1_bits_buf_dynamic;
                 u4_bitstream_buf_size = ps_view_ctxt->u4_dynamic_bits_buf_size;
             }
 
             memcpy(pu1_bitstream_buf, pu1_input_buffer + u4_length_of_start_code, i4_nalu_length);
 
             /* Decoder may read extra 8 bytes near end of the frame */
             if(u4_nalu_buf_size < u4_bitstream_buf_size)
             {
                 memset(pu1_bitstream_buf + i4_nalu_length, 0, 8 * sizeof(pu1_bitstream_buf[0]));
             }
 
             b_first_start_code_found = true;
         }
         else
         {
             if(!b_first_start_code_found)
             {
                 ps_view_ctxt->i4_error_code = ERROR_START_CODE_NOT_FOUND;
                 ps_op->s_ivd_op.u4_error_code |= 1 << IVD_INSUFFICIENTDATA;
 
                 if(ps_view_ctxt->u4_pic_buf_got == 0)
                 {
                     imvcd_fill_output_struct_from_context(ps_mvcd_ctxt, ps_op);
 
                     ps_op->s_ivd_op.u4_error_code = ps_view_ctxt->i4_error_code;
 
                     imvcd_video_decode_clean_return(ps_mvcd_ctxt, ps_ip, ps_op);
 
                     return IV_FAIL;
                 }
                 else
                 {
                     ps_view_ctxt->u1_pic_decode_done = 1;
 
                     continue;
                 }
             }
             else
             {
                 /* a start code has already been found earlier in the same process
                  * call*/
                 b_frame_data_left = false;
                 b_header_data_left = false;
 
                 if(!ps_view_ctxt->i4_decode_header && !ps_view_ctxt->u4_pic_buf_got)
                 {
                     ps_op->s_ivd_op.u4_error_code = ih264d_map_error(ERROR_UNKNOWN_NAL);
 
                     imvcd_video_decode_clean_return(ps_mvcd_ctxt, ps_ip, ps_op);
 
                     return IV_FAIL;
                 }
 
                 continue;
             }
         }
 
         ps_mvcd_ctxt->ae_nalu_id[ps_mvcd_ctxt->u2_num_views_decoded] =
             NAL_UNIT_TYPE(pu1_bitstream_buf[0]);
         ps_mvcd_ctxt->au1_nal_ref_idc[ps_mvcd_ctxt->u2_num_views_decoded] =
             NAL_REF_IDC(pu1_bitstream_buf[0]);
 
         if(ps_view_ctxt->u4_dec_thread_created &&
            !is_slice_nalu_type(ps_mvcd_ctxt->ae_nalu_id[ps_mvcd_ctxt->u2_num_views_decoded]))
         {
             ps_op->s_ivd_op.u4_error_code = ERROR_FEATURE_UNAVAIL;
 
             imvcd_video_decode_clean_return(ps_mvcd_ctxt, ps_ip, ps_op);
 
             return IV_FAIL;
         }
 
         if(!is_mvc_nalu(ps_mvcd_ctxt->ae_nalu_id[ps_mvcd_ctxt->u2_num_views_decoded]))
         {
             ivd_video_decode_op_t s_avc_op;
 
             i4_error_code =
                 ih264d_parse_nal_unit(ps_dec_hdl, &s_avc_op, pu1_bitstream_buf, i4_nalu_length);
         }
         else
         {
             i4_error_code = imvcd_nalu_parser(ps_mvcd_ctxt, pu1_bitstream_buf, i4_nalu_length);
         }
 
         if(OK != i4_error_code)
         {
             ps_op->s_ivd_op.u4_error_code = i4_error_code;
 
             imvcd_video_decode_clean_return(ps_mvcd_ctxt, ps_ip, ps_op);
 
             return IV_FAIL;
         }
         else if(PPS == ps_mvcd_ctxt->ae_nalu_id[ps_mvcd_ctxt->u2_num_views_decoded])
         {
             imvcd_update_num_pps(ps_mvcd_ctxt);
         }
         else if(SPS == ps_mvcd_ctxt->ae_nalu_id[ps_mvcd_ctxt->u2_num_views_decoded])
         {
             imvcd_update_num_sps(ps_mvcd_ctxt);
         }
         else if(SUBSET_SPS == ps_mvcd_ctxt->ae_nalu_id[ps_mvcd_ctxt->u2_num_views_decoded])
         {
             imvcd_update_num_subset_sps(ps_mvcd_ctxt);
         }
 
         b_header_data_left = ps_view_ctxt->i4_decode_header &&
                              (!is_header_decoded(ps_view_ctxt->i4_header_decoded, SPS) ||
                               !is_header_decoded(ps_view_ctxt->i4_header_decoded, PPS)) &&
                              (u4_num_bytes_consumed < ps_ip->s_ivd_ip.u4_num_Bytes);
         b_frame_data_left = (!ps_view_ctxt->i4_decode_header &&
                              (!ps_view_ctxt->u1_pic_decode_done || u4_next_is_aud)) &&
                             (u4_num_bytes_consumed < ps_ip->s_ivd_ip.u4_num_Bytes);
 
         u4_num_bytes_consumed += i4_nalu_length + u4_length_of_start_code;
         u4_num_bytes_remaining -= i4_nalu_length + u4_length_of_start_code;
 
     } while(b_header_data_left || b_frame_data_left);
 
     if((i4_error_code == IVD_RES_CHANGED) || (i4_error_code == IVD_MEM_ALLOC_FAILED) ||
        (i4_error_code == ERROR_UNAVAIL_PICBUF_T) || (i4_error_code == ERROR_UNAVAIL_MVBUF_T) ||
        (i4_error_code == ERROR_INV_SPS_PPS_T))
     {
         ih264d_signal_decode_thread(ps_view_ctxt);
 
         if(ps_view_ctxt->u4_num_cores == 3)
         {
             ih264d_signal_bs_deblk_thread(ps_view_ctxt);
         }
 
         /* dont consume bitstream for change in resolution case */
         if(i4_error_code == IVD_RES_CHANGED)
         {
             ps_op->s_ivd_op.u4_num_bytes_consumed -= u4_num_bytes_consumed;
         }
 
         imvcd_video_decode_clean_return(ps_mvcd_ctxt, ps_ip, ps_op);
 
         return IV_FAIL;
     }
 
     if(ps_view_ctxt->u1_separate_parse)
     {
         if(ps_view_ctxt->u4_num_cores == 2)
         {
             if((ps_view_ctxt->u4_nmb_deblk == 0) && (ps_view_ctxt->u4_start_recon_deblk == 1))
             {
                 tfr_ctxt_t s_tfr_ctxt;
 
                 UWORD32 u4_num_mbs, u4_max_addr;
 
                 tfr_ctxt_t *ps_tfr_cxt = &s_tfr_ctxt;
                 pad_mgr_t *ps_pad_mgr = &ps_view_ctxt->s_pad_mgr;
                 nalu_mvc_ext_t *ps_cur_nalu_mvc_ext = imvcd_get_cur_nalu_mvc_ext(ps_mvcd_ctxt);
 
                 /*BS is done for all mbs while parsing*/
                 u4_max_addr = (ps_view_ctxt->u2_frm_wd_in_mbs * ps_view_ctxt->u2_frm_ht_in_mbs) - 1;
                 ps_view_ctxt->u4_cur_bs_mb_num = u4_max_addr + 1;
 
                 ps_view_ctxt->ps_cur_pic = &ps_view_ctxt->s_cur_pic;
                 imvcd_convert_au_buf_to_view_buf(ps_mvcd_ctxt->ps_cur_au, &ps_view_ctxt->s_cur_pic,
                                                  ps_mvcd_ctxt->u2_num_views_decoded,
                                                  ps_cur_nalu_mvc_ext->u2_view_id);
 
                 ih264d_init_deblk_tfr_ctxt(ps_view_ctxt, ps_pad_mgr, ps_tfr_cxt,
                                            ps_view_ctxt->u2_frm_wd_in_mbs, 0);
 
                 u4_num_mbs = u4_max_addr - ps_view_ctxt->u4_cur_deblk_mb_num + 1;
 
                 if(u4_num_mbs != 0)
                 {
                     ih264d_check_mb_map_deblk(ps_view_ctxt, u4_num_mbs, ps_tfr_cxt, 1);
                 }
 
                 ps_view_ctxt->u4_start_recon_deblk = 0;
             }
         }
 
         ih264d_signal_decode_thread(ps_view_ctxt);
 
         if(ps_view_ctxt->u4_num_cores == 3)
         {
             ih264d_signal_bs_deblk_thread(ps_view_ctxt);
         }
     }
 
     DATA_SYNC();
 
     // Report if header (sps and pps) has not been decoded yet
     if(ps_view_ctxt->i4_decode_header &&
        (!is_header_decoded(ps_view_ctxt->i4_header_decoded, SPS) &&
         !is_header_decoded(ps_view_ctxt->i4_header_decoded, PPS)))
     {
         ps_op->s_ivd_op.u4_error_code |= (1 << IVD_INSUFFICIENTDATA);
 
         imvcd_video_decode_clean_return(ps_mvcd_ctxt, ps_ip, ps_op);
 
         return IV_FAIL;
     }
 
     if(ps_view_ctxt->u4_pic_buf_got)
     {
         ps_view_ctxt->u1_top_bottom_decoded = TOP_FIELD_ONLY | BOT_FIELD_ONLY;
 
         if(((ps_view_ctxt->ps_dec_err_status->u1_err_flag & REJECT_CUR_PIC) == 0) &&
            ps_view_ctxt->u1_pic_decode_done)
         {
             nalu_mvc_ext_t *ps_cur_nalu_mvc_ext = imvcd_get_cur_nalu_mvc_ext(ps_mvcd_ctxt);
 
             if(!ps_mvcd_ctxt->au1_nal_ref_idc[ps_mvcd_ctxt->u2_num_views_decoded] &&
                ps_cur_nalu_mvc_ext->u1_inter_view_flag)
             {
                 ps_view_ctxt->ps_cur_slice->u1_nal_ref_idc = 1;
             }
 
             /* Padding only. Deblk has happened already. */
             ih264d_deblock_picture_progressive(ps_view_ctxt);
 
             if(!ps_mvcd_ctxt->au1_nal_ref_idc[ps_mvcd_ctxt->u2_num_views_decoded] &&
                ps_cur_nalu_mvc_ext->u1_inter_view_flag)
             {
                 ps_view_ctxt->ps_cur_slice->u1_nal_ref_idc = 0;
             }
         }
 
         /*Update the i4_frametype at the end of picture*/
         if(imvcd_is_idr_au(ps_mvcd_ctxt))
         {
             ps_view_ctxt->i4_frametype = IV_IDR_FRAME;
         }
         else if(ps_view_ctxt->i4_pic_type == B_SLICE)
         {
             ps_view_ctxt->i4_frametype = IV_B_FRAME;
         }
         else if(ps_view_ctxt->i4_pic_type == P_SLICE)
         {
             ps_view_ctxt->i4_frametype = IV_P_FRAME;
         }
         else if(ps_view_ctxt->i4_pic_type == I_SLICE)
         {
             ps_view_ctxt->i4_frametype = IV_I_FRAME;
         }
 
         ps_view_ctxt->i4_content_type = ps_view_ctxt->ps_cur_slice->u1_field_pic_flag;
     }
 
     /* close deblock thread if it is not closed yet*/
     if(ps_view_ctxt->u4_num_cores == 3)
     {
         ih264d_signal_bs_deblk_thread(ps_view_ctxt);
     }
 
     if(ps_view_ctxt->u4_dec_thread_created)
     {
         ih264d_signal_decode_thread(ps_view_ctxt);
     }
 
     if(ps_view_ctxt->u4_bs_deblk_thread_created)
     {
         ih264d_signal_bs_deblk_thread(ps_view_ctxt);
     }
 
     ps_op->s_ivd_op.u4_num_bytes_consumed = u4_num_bytes_consumed;
 
     DATA_SYNC();
 
     return IV_SUCCESS;
 }
