commit 9a510b8035e6a83fb149cc447a61f847e786140f
Author: Arne Welzel <arne.welzel@corelight.com>
Date:   Tue Jan 23 15:03:37 2024 +0100

    SMTP: Add SMTP_IN_BDAT state
    
    Initially this reused SMTP_IN_DATA, but separating into SMTP_IN_BDAT
    to avoid spurious EndData() calls upon a server's reply. The client
    should usually continue to send the full in-flight chunk still.

diff --git a/src/analyzer/protocol/smtp/SMTP.cc b/src/analyzer/protocol/smtp/SMTP.cc
index 8fa3dd2c9..185a3b46b 100644
--- a/src/analyzer/protocol/smtp/SMTP.cc
+++ b/src/analyzer/protocol/smtp/SMTP.cc
@@ -76,34 +76,34 @@ void SMTP_Analyzer::Done() {
 void SMTP_Analyzer::Undelivered(uint64_t seq, int len, bool is_orig) {
     analyzer::tcp::TCP_ApplicationAnalyzer::Undelivered(seq, len, is_orig);
 
     if ( len <= 0 )
         return;
 
     const char* buf = util::fmt("seq = %" PRIu64 ", len = %d", seq, len);
     int buf_len = strlen(buf);
 
     Unexpected(is_orig, "content gap", buf_len, buf);
 
-    if ( state == detail::SMTP_IN_DATA ) {
+    if ( state == detail::SMTP_IN_DATA || state == detail::SMTP_CMD_BDAT ) {
         // Record the SMTP data gap and terminate the
         // ongoing mail transaction.
         if ( mail )
             mail->Undelivered(len);
 
         EndData();
     }
 
     if ( line_after_gap ) {
         delete line_after_gap;
         line_after_gap = nullptr;
     }
 
     pending_cmd_q.clear();
 
     first_cmd = last_replied_cmd = -1;
 
     // Missing either the sender's packets or their replies
     // (e.g. code 354) is critical, so we set state to SMTP_AFTER_GAP
     // in both cases
     state = detail::SMTP_AFTER_GAP;
 }
@@ -173,186 +173,186 @@ void SMTP_Analyzer::DeliverStream(int length, const u_char* line, bool orig) {
 void SMTP_Analyzer::ProcessLine(int length, const char* line, bool orig) {
     const char* end_of_line = line + length;
     int cmd_len = 0;
     const char* cmd = "";
 
     // NOTE: do not use IsOrig() here, because of TURN command.
     bool is_sender = orig_is_sender ? orig : ! orig;
 
     if ( ! pipelining && ((is_sender && ! expect_sender) || (! is_sender && ! expect_recver)) )
         Unexpected(is_sender, "out of order", length, line);
 
     if ( is_sender ) {
         int cmd_code = -1;
 
         if ( state == detail::SMTP_AFTER_GAP ) {
             // Don't know whether it is a command line or
             // a data line.
             delete line_after_gap;
 
             line_after_gap = new String((const u_char*)line, length, true);
         }
 
         else if ( state == detail::SMTP_IN_DATA && line[0] == '.' && length == 1 ) {
             cmd = ".";
             cmd_len = 1;
             cmd_code = detail::SMTP_CMD_END_OF_DATA;
             NewCmd(cmd_code);
 
             expect_sender = false;
             expect_recver = true;
         }
 
-        else if ( state == detail::SMTP_IN_DATA && ! bdat ) {
+        else if ( state == detail::SMTP_IN_DATA ) {
             // Check "." for end of data for non-BDAT transfers.
             expect_recver = false; // ?? MAY server respond to mail data?
 
             if ( line[0] == '.' )
                 ++line;
 
             int data_len = end_of_line - line;
 
             if ( ! mail )
                 // This can happen if we're already shut
                 // down the connection due to seeing a RST
                 // but are now processing packets sent
                 // afterwards (because, e.g., the RST was
                 // dropped or ignored).
                 BeginData(orig);
 
             ProcessData(data_len, line);
 
             if ( smtp_data && ! skip_data ) {
                 EnqueueConnEvent(smtp_data, ConnVal(), val_mgr->Bool(orig), make_intrusive<StringVal>(data_len, line));
             }
         }
 
         else if ( state == detail::SMTP_IN_AUTH ) {
             cmd = "***";
             cmd_len = 2;
             cmd_code = detail::SMTP_CMD_AUTH_ANSWER;
             NewCmd(cmd_code);
         }
 
         else {
             expect_sender = false;
             expect_recver = true;
 
             util::get_word(length, line, cmd_len, cmd);
             line = util::skip_whitespace(line + cmd_len, end_of_line);
             cmd_code = ParseCmd(cmd_len, cmd);
 
             if ( cmd_code == -1 ) {
                 Unexpected(true, "unknown command", cmd_len, cmd);
                 cmd = nullptr;
             }
             else
                 NewCmd(cmd_code);
         }
 
         // Generate smtp_request event
         if ( cmd_code >= 0 ) {
             // In order for all MIME events nested
             // between SMTP command DATA and END_OF_DATA,
             // we need to call UpdateState(), which in
             // turn calls BeginData() and EndData(),  and
             // RequestEvent() in different orders for the
             // two commands.
             if ( cmd_code == detail::SMTP_CMD_END_OF_DATA )
                 UpdateState(cmd_code, 0, orig);
 
             if ( smtp_request ) {
                 int data_len = end_of_line - line;
 
                 if ( cmd_len > 0 || data_len > 0 )
                     RequestEvent(cmd_len, cmd, data_len, line);
             }
 
             // See above, might have already done so.
             bool do_update_state = cmd_code != detail::SMTP_CMD_END_OF_DATA;
 
             if ( cmd_code == detail::SMTP_CMD_BDAT )
                 // Do not update state if this isn't a valid BDAT command.
                 do_update_state = ProcessBdatArg(end_of_line - line, line, orig);
             else if ( bdat ) {
                 // Non-BDAT command from client but still have BDAT state,
                 // close it out. This can happen when a client started to
                 // send BDAT chunks, but starts sending other commands without
                 // a last BDAT chunk.
                 Weird("smtp_missing_bdat_last_chunk");
                 EndData();
             }
 
             if ( do_update_state )
                 UpdateState(cmd_code, 0, orig);
         }
     }
 
     else {
         int reply_code;
 
         if ( length >= 3 && isdigit(line[0]) && isdigit(line[1]) && isdigit(line[2]) ) {
             reply_code = (line[0] - '0') * 100 + (line[1] - '0') * 10 + (line[2] - '0');
         }
         else
             reply_code = -1;
 
         // The first digit of reply code must be between 1 and 5,
         // and the second between 0 and 5 (RFC 2821).  But sometimes
         // we see 5xx codes larger than 559, so we still tolerate that.
         if ( reply_code < 100 || reply_code > 599 ) {
             reply_code = -1;
             Unexpected(is_sender, "reply code out of range", length, line);
             AnalyzerViolation(util::fmt("reply code %d out of range", reply_code), line, length);
         }
 
         else { // Valid reply code.
             if ( pending_reply && reply_code != pending_reply ) {
                 Unexpected(is_sender, "reply code does not match the continuing reply", length, line);
                 pending_reply = 0;
             }
 
             if ( ! pending_reply && reply_code >= 0 )
                 // It is not a continuation.
                 NewReply(reply_code, orig);
 
             // Update pending_reply.
             if ( reply_code >= 0 && length > 3 && line[3] == '-' ) { // A continued reply.
                 pending_reply = reply_code;
                 line = util::skip_whitespace(line + 4, end_of_line);
             }
 
             else { // This is the end of the reply.
                 line = util::skip_whitespace(line + 3, end_of_line);
 
                 pending_reply = 0;
                 expect_sender = true;
                 expect_recver = false;
             }
 
             // Generate events.
             if ( smtp_reply && reply_code >= 0 ) {
                 int cmd_code = last_replied_cmd;
                 switch ( cmd_code ) {
                     case detail::SMTP_CMD_CONN_ESTABLISHMENT: cmd = ">"; break;
 
                     case detail::SMTP_CMD_END_OF_DATA: cmd = "."; break;
 
                     default: cmd = SMTP_CMD_WORD(cmd_code); break;
                 }
 
                 EnqueueConnEvent(smtp_reply, ConnVal(), val_mgr->Bool(orig), val_mgr->Count(reply_code),
                                  make_intrusive<StringVal>(cmd), make_intrusive<StringVal>(end_of_line - line, line),
                                  val_mgr->Bool((pending_reply > 0)));
             }
         }
 
         // Process SMTP extensions, e.g. PIPELINING.
         if ( last_replied_cmd == detail::SMTP_CMD_EHLO && reply_code == 250 ) {
             const char* ext;
             int ext_len;
 
             util::get_word(end_of_line - line, line, ext_len, ext);
             ProcessExtension(ext_len, ext);
         }
     }
 }
@@ -443,331 +443,331 @@ void SMTP_Analyzer::NewReply(int reply_code, bool orig) {
 void SMTP_Analyzer::UpdateState(int cmd_code, int reply_code, bool orig) {
     int st = state;
 
     if ( st == detail::SMTP_QUIT && reply_code == 0 )
         UnexpectedCommand(cmd_code, reply_code);
 
     switch ( cmd_code ) {
         case detail::SMTP_CMD_CONN_ESTABLISHMENT:
             switch ( reply_code ) {
                 case 0:
                     if ( st != detail::SMTP_CONNECTED ) {
                         // Impossible state, because the command
                         // CONN_ESTABLISHMENT should only appear
                         // in the very beginning.
                         UnexpectedCommand(cmd_code, reply_code);
                     }
                     state = detail::SMTP_INITIATED;
                     break;
 
                 case 220: break;
 
                 case 421:
                 case 554: state = detail::SMTP_NOT_AVAILABLE; break;
 
                 default: UnexpectedReply(cmd_code, reply_code); break;
             }
             break;
 
         case detail::SMTP_CMD_EHLO:
         case detail::SMTP_CMD_HELO:
             switch ( reply_code ) {
                 case 0:
                     if ( st != detail::SMTP_INITIATED )
                         UnexpectedCommand(cmd_code, reply_code);
                     state = detail::SMTP_READY;
                     break;
 
                 case 250: break;
 
                 case 421:
                 case 500:
                 case 501:
                 case 504:
                 case 550: state = detail::SMTP_INITIATED; break;
 
                 default: UnexpectedReply(cmd_code, reply_code); break;
             }
             break;
 
         case detail::SMTP_CMD_MAIL:
         case detail::SMTP_CMD_SEND:
         case detail::SMTP_CMD_SOML:
         case detail::SMTP_CMD_SAML:
             switch ( reply_code ) {
                 case 0:
                     if ( st != detail::SMTP_READY )
                         UnexpectedCommand(cmd_code, reply_code);
                     state = detail::SMTP_MAIL_OK;
                     break;
 
                 case 250: break;
 
                 case 421:
                 case 451:
                 case 452:
                 case 500:
                 case 501:
                 case 503:
                 case 550:
                 case 552:
                 case 553:
                     if ( state != detail::SMTP_IN_DATA )
                         state = detail::SMTP_READY;
                     break;
 
                 default: UnexpectedReply(cmd_code, reply_code); break;
             }
             break;
 
         case detail::SMTP_CMD_RCPT:
             switch ( reply_code ) {
                 case 0:
                     if ( st != detail::SMTP_MAIL_OK && st != detail::SMTP_RCPT_OK )
                         UnexpectedCommand(cmd_code, reply_code);
                     state = detail::SMTP_RCPT_OK;
                     break;
 
                 case 250:
                 case 251: // ?? Shall we catch 251? (RFC 2821)
                     break;
 
                 case 421:
                 case 450:
                 case 451:
                 case 452:
                 case 500:
                 case 501:
                 case 503:
                 case 550:
                 case 551: // ?? Shall we catch 551?
                 case 552:
                 case 553:
                 case 554: // = transaction failed/recipient refused
                     break;
 
                 default: UnexpectedReply(cmd_code, reply_code); break;
             }
             break;
 
         case detail::SMTP_CMD_DATA:
             switch ( reply_code ) {
                 case 0:
                     if ( state != detail::SMTP_RCPT_OK )
                         UnexpectedCommand(cmd_code, reply_code);
                     BeginData(orig);
                     break;
 
                 case 354: break;
 
                 case 421:
                     if ( state == detail::SMTP_IN_DATA )
                         EndData();
                     state = detail::SMTP_QUIT;
                     break;
 
                 case 500:
                 case 501:
                 case 503:
                 case 451:
                 case 554:
                     if ( state == detail::SMTP_IN_DATA )
                         EndData();
                     state = detail::SMTP_READY;
                     break;
 
                 default:
                     UnexpectedReply(cmd_code, reply_code);
                     if ( state == detail::SMTP_IN_DATA )
                         EndData();
                     state = detail::SMTP_READY;
                     break;
             }
             break;
 
         case detail::SMTP_CMD_BDAT:
             switch ( reply_code ) {
                 case 0:
                     if ( state != detail::SMTP_RCPT_OK )
                         UnexpectedCommand(cmd_code, reply_code);
 
                     assert(bdat);
-                    state = detail::SMTP_IN_DATA;
+                    state = detail::SMTP_IN_BDAT;
                     break;
 
                 case 250: break; // server accepted BDAT transfer.
 
-                case 421: state = detail::SMTP_QUIT; break;
-
+                case 421:
                 case 500:
                 case 501:
                 case 503:
                 case 451:
                 case 554:
-                    // Client may continue sending chunks if pipelined. We don't
-                    // call EndData() here as it might be interesting what the
-                    // client does send, even if the server isn't accepting it.
+                    // Client will continue completing the inflight chunk no matter
+                    // what the server replies, so we don't call EndData() here as
+                    // it might be interesting what the client does actually send,
+                    // even if the server isn't accepting it.
                     break;
 
                 default:
                     UnexpectedReply(cmd_code, reply_code);
                     // Chunks might still be in-flight. See above.
                     break;
             }
             break;
 
         case detail::SMTP_CMD_END_OF_DATA:
             switch ( reply_code ) {
                 case 0:
-                    if ( st != detail::SMTP_IN_DATA )
+                    if ( st != detail::SMTP_IN_DATA && st != detail::SMTP_IN_BDAT )
                         UnexpectedCommand(cmd_code, reply_code);
                     EndData();
                     state = detail::SMTP_AFTER_DATA;
                     break;
 
                 case 250: break;
 
                 case 421:
                 case 451:
                 case 452:
                 case 552:
                 case 554: break;
 
                 default: UnexpectedReply(cmd_code, reply_code); break;
             }
 
             if ( reply_code > 0 )
                 state = detail::SMTP_READY;
             break;
 
         case detail::SMTP_CMD_RSET:
             switch ( reply_code ) {
                 case 0: state = detail::SMTP_READY; break;
 
                 case 250: break;
 
                 default: UnexpectedReply(cmd_code, reply_code); break;
             }
 
             break;
 
         case detail::SMTP_CMD_QUIT:
             switch ( reply_code ) {
                 case 0: state = detail::SMTP_QUIT; break;
 
                 case 221: break;
 
                 default: UnexpectedReply(cmd_code, reply_code); break;
             }
 
             break;
 
         case detail::SMTP_CMD_AUTH:
             if ( st != detail::SMTP_READY )
                 UnexpectedCommand(cmd_code, reply_code);
 
             switch ( reply_code ) {
                 case 0:
                     // Here we wait till there's a reply.
                     break;
 
                 case 334: state = detail::SMTP_IN_AUTH; break;
 
                 case 235: state = detail::SMTP_INITIATED; break;
 
                 case 432:
                 case 454:
                 case 501:
                 case 503:
                 case 504:
                 case 534:
                 case 535:
                 case 538:
                 default: state = detail::SMTP_INITIATED; break;
             }
             break;
 
         case detail::SMTP_CMD_AUTH_ANSWER:
             if ( st != detail::SMTP_IN_AUTH )
                 UnexpectedCommand(cmd_code, reply_code);
 
             switch ( reply_code ) {
                 case 0:
                     // Here we wait till there's a reply.
                     break;
 
                 case 334: state = detail::SMTP_IN_AUTH; break;
 
                 case 235:
                 case 535:
                 default: state = detail::SMTP_INITIATED; break;
             }
             break;
 
         case detail::SMTP_CMD_TURN:
             if ( st != detail::SMTP_READY )
                 UnexpectedCommand(cmd_code, reply_code);
 
             switch ( reply_code ) {
                 case 0:
                     // Here we wait till there's a reply.
                     break;
 
                 case 250:
                     // flip-side
                     orig_is_sender = ! orig_is_sender;
 
                     state = detail::SMTP_CONNECTED;
                     expect_sender = false;
                     expect_recver = true;
                     break;
 
                 case 502:
                 default: break;
             }
             break;
 
         case detail::SMTP_CMD_STARTTLS:
         case detail::SMTP_CMD_X_ANONYMOUSTLS:
             if ( st != detail::SMTP_READY )
                 UnexpectedCommand(cmd_code, reply_code);
 
             switch ( reply_code ) {
                 case 0:
                     // Here we wait till there's a reply.
                     break;
 
                 case 220: StartTLS(); break;
 
                 case 454:
                 case 501:
                 default: break;
             }
             break;
 
         case detail::SMTP_CMD_VRFY:
         case detail::SMTP_CMD_EXPN:
         case detail::SMTP_CMD_HELP:
         case detail::SMTP_CMD_NOOP:
             // These commands do not affect state.
             // ?? However, later we may want to add reply
             // and state check code.
 
         default:
             if ( st == detail::SMTP_GAP_RECOVERY && reply_code == 354 ) {
                 BeginData(orig);
             }
             break;
     }
 
         // A hack: whenever the server makes a valid reply during a DATA
         // section, we assume that the DATA section has ended (the end
         // of data line might have been lost due to gaps in trace).  Note,
         // BeginData() won't be called till the next DATA command.
 #if 0
 	if ( state == detail::SMTP_IN_DATA && reply_code >= 400 )
 		{
 		EndData();
 		state = detail::SMTP_READY;
 		}
 #endif
 }
@@ -854,45 +854,45 @@ void SMTP_Analyzer::ProcessData(int length, const char* line) { mail->Deliver(le
 bool SMTP_Analyzer::ProcessBdatArg(int arg_len, const char* arg, bool orig) {
     // For the BDAT command, parse out the chunk-size from the line
     // and switch the ContentLineAnalyzer into plain delivery mode
     // assuming things look valid.
     const auto [chunk_size, is_last_chunk, error] = detail::parse_bdat_arg(arg_len, arg);
     if ( error ) {
         Weird("smtp_invalid_bdat_command", error);
         return false;
     }
 
     // The ContentLine analyzer only supports int64_t, but BDAT could deal
     // with uint64_t sized chunks. Weird if the chunk size is larger and
     // do not configure the ContentLine analyzer for plain delivery.
     if ( chunk_size > std::numeric_limits<int64_t>::max() ) {
         const char* addl = zeek::util::fmt("%" PRIu64, chunk_size);
         Weird("smtp_huge_bdat_chunk", addl);
         return false;
     }
 
     auto* cl = orig ? cl_orig : cl_resp;
     cl->SetPlainDelivery(chunk_size);
 
     if ( ! bdat ) {
         // This is the first BDAT chunk.
-        BeginData(orig);
+        BeginData(orig, detail::SMTP_IN_BDAT);
         bdat = std::make_unique<detail::SMTP_BDAT_Analyzer>(Conn(), mail, zeek::BifConst::SMTP::bdat_max_line_length);
     }
 
     bdat->NextChunk(is_last_chunk ? detail::ChunkType::Last : detail::ChunkType::Intermediate, chunk_size);
 
     // All good.
     return true;
 }
 
-void SMTP_Analyzer::BeginData(bool orig) {
-    state = detail::SMTP_IN_DATA;
+void SMTP_Analyzer::BeginData(bool orig, detail::SMTP_State new_state) {
+    state = new_state;
     skip_data = false; // reset the flag at the beginning of the mail
     if ( mail != nullptr ) {
         Weird("smtp_nested_mail_transaction");
         mail->Done();
         delete mail;
     }
 
     mail = new analyzer::mime::MIME_Mail(this, orig);
 }
diff --git a/src/analyzer/protocol/smtp/SMTP.h b/src/analyzer/protocol/smtp/SMTP.h
index 389a45022..1d255bbed 100644
--- a/src/analyzer/protocol/smtp/SMTP.h
+++ b/src/analyzer/protocol/smtp/SMTP.h
@@ -23,18 +23,19 @@ enum SMTP_Cmd {
 // State is updated on every SMTP reply.
 enum SMTP_State {
     SMTP_CONNECTED,     // 0: before the opening message
     SMTP_INITIATED,     // 1: after opening message 220, EHLO/HELO expected
     SMTP_NOT_AVAILABLE, // 2: after opening message 554, etc.
     SMTP_READY,         // 3: after EHLO/HELO and reply 250
     SMTP_MAIL_OK,       // 4: after MAIL/SEND/SOML/SAML and 250, RCPT expected
     SMTP_RCPT_OK,       // 5: after one successful RCPT, DATA or more RCPT expected
     SMTP_IN_DATA,       // 6: after DATA
     SMTP_AFTER_DATA,    // 7: after . and before reply
     SMTP_IN_AUTH,       // 8: after AUTH and 334
     SMTP_IN_TLS,        // 9: after STARTTLS/X-ANONYMOUSTLS and 220
     SMTP_QUIT,          // 10: after QUIT
     SMTP_AFTER_GAP,     // 11: after a gap is detected
     SMTP_GAP_RECOVERY,  // 12: after the first reply after a gap
+    SMTP_IN_BDAT,       // 13: receiving BDAT chunk via plain delivery
 };
 
 } // namespace detail
@@ -56,36 +57,36 @@ public:
 protected:
     void ProcessLine(int length, const char* line, bool orig);
     void NewCmd(int cmd_code);
     void NewReply(int reply_code, bool orig);
     void ProcessExtension(int ext_len, const char* ext);
     void ProcessData(int length, const char* line);
     bool ProcessBdatArg(int arg_len, const char* arg, bool orig);
 
     void UpdateState(int cmd_code, int reply_code, bool orig);
 
-    void BeginData(bool orig);
+    void BeginData(bool orig, detail::SMTP_State new_state = detail::SMTP_IN_DATA);
     void EndData();
 
     int ParseCmd(int cmd_len, const char* cmd);
 
     void RequestEvent(int cmd_len, const char* cmd, int arg_len, const char* arg);
     void Unexpected(bool is_sender, const char* msg, int detail_len, const char* detail);
     void UnexpectedCommand(int cmd_code, int reply_code);
     void UnexpectedReply(int cmd_code, int reply_code);
     void StartTLS();
 
     bool orig_is_sender;
     bool expect_sender, expect_recver;
     bool pipelining; // whether pipelining is supported
     int state;
     int last_replied_cmd;
     int first_cmd;                // first un-replied SMTP cmd, or -1
     int pending_reply;            // code assoc. w/ multi-line reply, or 0
     std::list<int> pending_cmd_q; // to support pipelining
     bool skip_data;               // whether to skip message body
     String* line_after_gap;       // last line before the first reply
                                   // after a gap
 
     std::unique_ptr<detail::SMTP_BDAT_Analyzer> bdat; // if set, BDAT chunk transfer active
 
     analyzer::mime::MIME_Mail* mail;
