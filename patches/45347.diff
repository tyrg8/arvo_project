commit a9c7640b90bc583e04be7b1eebccd5c07e79c063
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Tue Mar 8 10:38:47 2022 +0000

    OSS_fuzz #45347 - validate image parameters
    
    The file has an inline image with a /H (height) of -19. The interpreter
    was simply passing that to the image rendering code which, not
    unreasonably did nothing, but reported it had consumed -19 rows.
    
    We then used that to try and skip over the image data, but treating
    a negative number as an unsigned integer led to us trying to skip
    ridiculously large amounts of data and eventually caused a crash in the
    file handling.
    
    This commit sets negative values to 0 (which then causes us to skip
    the image) unless STOPONWARNING is set in which case we return an error.

diff --git a/pdf/pdf_image.c b/pdf/pdf_image.c
index fa2e5362f..554cc3448 100644
--- a/pdf/pdf_image.c
+++ b/pdf/pdf_image.c
@@ -439,212 +439,228 @@ static int
 pdfi_get_image_info(pdf_context *ctx, pdf_stream *image_obj,
                     pdf_dict *page_dict, pdf_dict *stream_dict, bool inline_image,
                     pdfi_image_info_t *info)
 {
     int code;
     double temp_f;
     pdf_dict *image_dict = NULL;
 
     memset(info, 0, sizeof(*info));
     info->page_dict = page_dict;
     info->stream_dict = stream_dict;
     info->inline_image = inline_image;
 
     /* Not Handled: "ID", "OPI" */
 
     /* Length if it's in a stream dict */
     info->Length = pdfi_stream_length(ctx, image_obj);
 
     code = pdfi_dict_from_obj(ctx, (pdf_obj *)image_obj, &image_dict);
     if (code < 0)
         goto errorExit;
 
     /* Required */
     code = pdfi_dict_get_number2(ctx, image_dict, "Height", "H", &temp_f);
     if (code < 0)
         goto errorExit;
     /* This is bonkers, but... Bug695872.pdf has /W and /H which are real numbers */
     info->Height = (int)temp_f;
     if ((int)temp_f != (int)(temp_f+.5)) {
         pdfi_set_warning(ctx, 0, NULL, W_PDF_BAD_IMAGEDICT, "pdfi_get_image_info", NULL);
         if (ctx->args.pdfstoponwarning) {
             code = gs_note_error(gs_error_rangecheck);
             goto errorExit;
         }
     }
+    if (info->Height < 0) {
+        pdfi_set_warning(ctx, 0, NULL, W_PDF_BAD_IMAGEDICT, "pdfi_get_image_info", NULL);
+        if (ctx->args.pdfstoponwarning) {
+            code = gs_note_error(gs_error_rangecheck);
+            goto errorExit;
+        }
+        info->Height = 0;
+    }
 
     /* Required */
     code = pdfi_dict_get_number2(ctx, image_dict, "Width", "W", &temp_f);
     if (code < 0)
         goto errorExit;
     info->Width = (int)temp_f;
     if ((int)temp_f != (int)(temp_f+.5)) {
         pdfi_set_warning(ctx, 0, NULL, W_PDF_BAD_IMAGEDICT, "pdfi_get_image_info", NULL);
         if (ctx->args.pdfstoponwarning) {
             code = gs_note_error(gs_error_rangecheck);
             goto errorExit;
         }
     }
+    if (info->Width < 0) {
+        pdfi_set_warning(ctx, 0, NULL, W_PDF_BAD_IMAGEDICT, "pdfi_get_image_info", NULL);
+        if (ctx->args.pdfstoponwarning) {
+            code = gs_note_error(gs_error_rangecheck);
+            goto errorExit;
+        }
+        info->Width = 0;
+    }
 
     /* Optional, default false */
     code = pdfi_dict_get_bool2(ctx, image_dict, "ImageMask", "IM", &info->ImageMask);
     if (code != 0) {
         if (code != gs_error_undefined)
             goto errorExit;
         info->ImageMask = false;
     }
 
     /* Optional, default false */
     code = pdfi_dict_get_bool2(ctx, image_dict, "Interpolate", "I", &info->Interpolate);
     if (code != 0) {
         if (code != gs_error_undefined)
             goto errorExit;
         info->Interpolate = false;
     }
 
     /* Optional (Required, unless ImageMask is true)
      * But apparently for JPXDecode filter, this can be omitted.
      * Let's try a default of 1 for now...
      */
     code = pdfi_dict_get_int2(ctx, image_dict, "BitsPerComponent", "BPC", &info->BPC);
     if (code < 0) {
         if (code != gs_error_undefined) {
             goto errorExit;
         }
         info->BPC = 1;
     }
     /* TODO: spec says if ImageMask is specified, and BPC is specified, then BPC must be 1
        Should we flag an error if this is violated?
      */
 
     /* Optional (apparently there is no "M" abbreviation for "Mask"? */
     code = pdfi_dict_get(ctx, image_dict, "Mask", &info->Mask);
     if (code < 0) {
         /* A lack of a Mask is not an error. If there is a genuine error reading
          * the Mask, ignore it unless PDFSTOPONWARNING is set. We can still render
          * the image. Arguably we should not, and Acrobat doesn't, but the current
          * GS implementation does.
          */
         if (code != gs_error_undefined) {
         pdfi_set_warning(ctx, 0, NULL, W_PDF_BAD_IMAGEDICT, "pdfi_get_image_info", NULL);
            if (ctx->args.pdfstoponwarning)
                 goto errorExit;
         }
     }
 
     /* Optional (apparently there is no abbreviation for "SMask"? */
     code = pdfi_dict_get(ctx, image_dict, "SMask", &info->SMask);
     if (code < 0) {
         if (code != gs_error_undefined) {
             /* Broken SMask, Warn, and ignore the SMask */
             pdfi_set_warning(ctx, 0, NULL, W_PDF_BAD_IMAGEDICT, "pdfi_get_image_info", (char *)"*** Warning: Image has invalid SMask.  Ignoring it");
             if (ctx->args.pdfstoponwarning)
                 goto errorExit;
             code = 0;
         }
     } else {
         if (info->SMask->type == PDF_NAME) {
             pdf_obj *o = NULL;
 
             code = pdfi_find_resource(ctx, (unsigned char *)"ExtGState", (pdf_name *)info->SMask, image_dict, page_dict, &o);
             if (code >= 0) {
                 pdfi_countdown(info->SMask);
                 info->SMask = o;
             }
         }
 
         if (info->SMask->type != PDF_STREAM){
             pdfi_countdown(info->SMask);
             info->SMask = NULL;
         }
     }
 
     /* Optional, for JPXDecode filter images
      * (If non-zero, then SMask shouldn't be  specified)
      * Default: 0
      */
     code = pdfi_dict_get_int(ctx, image_dict, "SMaskInData", &info->SMaskInData);
     if (code < 0) {
         if (code != gs_error_undefined)
             goto errorExit;
         info->SMaskInData = 0;
     }
 
     /* Optional (Required except for ImageMask, not allowed for ImageMask)*/
     /* TODO: Should we enforce this required/not allowed thing? */
     code = pdfi_dict_get2(ctx, image_dict, "ColorSpace", "CS", &info->ColorSpace);
     if (code < 0) {
         if (code != gs_error_undefined)
             goto errorExit;
     }
 
     /* Optional (default is to use from graphics state) */
     /* (no abbreviation for inline) */
     code = pdfi_dict_get_type(ctx, image_dict, "Intent", PDF_NAME, (pdf_obj **)&info->Intent);
     if (code < 0) {
         if (code != gs_error_undefined)
             goto errorExit;
     }
 
     /* Optional (array of alternate image dicts, can't be nested) */
     code = pdfi_dict_get(ctx, image_dict, "Alternates", &info->Alternates);
     if (code < 0) {
         if (code != gs_error_undefined)
             goto errorExit;
     }
 
     /* Optional (required in PDF1.0, obsolete, do we support?) */
     code = pdfi_dict_get(ctx, image_dict, "Name", &info->Name);
     if (code < 0) {
         if (code != gs_error_undefined)
             goto errorExit;
     }
 
     /* Required "if image is structural content item" */
     /* TODO: Figure out what to do here */
     code = pdfi_dict_get_int(ctx, image_dict, "StructParent", &info->StructParent);
     if (code < 0) {
         if (code != gs_error_undefined)
             goto errorExit;
     }
 
     /* Optional (default is probably [0,1] per component) */
     code = pdfi_dict_get2(ctx, image_dict, "Decode", "D", &info->Decode);
     if (code < 0) {
         if (code != gs_error_undefined)
             goto errorExit;
     }
 
     /* Optional "Optional Content" */
     code = pdfi_dict_get_type(ctx, image_dict, "OC", PDF_DICT, (pdf_obj **)&info->OC);
     if (code < 0) {
         if (code != gs_error_undefined)
             goto errorExit;
     }
 
     /* Optional */
     code = pdfi_dict_get2(ctx, image_dict, "Filter", "F", &info->Filter);
     if (code < 0) {
         if (code != gs_error_undefined)
             goto errorExit;
     }
 
     /* Check and set JPXDecode flag for later */
     info->is_JPXDecode = false;
     if (info->Filter && info->Filter->type == PDF_NAME) {
         if (pdfi_name_is((pdf_name *)info->Filter, "JPXDecode"))
             info->is_JPXDecode = true;
     }
 
     /* Optional */
     code = pdfi_dict_get2(ctx, image_dict, "DecodeParms", "DP", &info->DecodeParms);
     if (code < 0) {
         if (code != gs_error_undefined)
             goto errorExit;
     }
 
     return 0;
 
  errorExit:
     pdfi_free_image_info_components(info);
     return code;
 }
