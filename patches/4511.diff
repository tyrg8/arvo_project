commit b08b150e21a096e49f56dc044537295991986fa4
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Sun Dec 3 18:15:33 2017 +0300

    PanasonicDecompressor: attemp to sanitize load_flags.

diff --git a/src/librawspeed/decompressors/PanasonicDecompressor.cpp b/src/librawspeed/decompressors/PanasonicDecompressor.cpp
index a1f91b5b..cb7ba3bb 100644
--- a/src/librawspeed/decompressors/PanasonicDecompressor.cpp
+++ b/src/librawspeed/decompressors/PanasonicDecompressor.cpp
@@ -33,58 +33,61 @@ namespace rawspeed {
 PanasonicDecompressor::PanasonicDecompressor(const RawImage& img,
                                              ByteStream input_,
                                              bool zero_is_not_bad,
                                              uint32 load_flags_)
     : AbstractParallelizedDecompressor(img), input(std::move(input_)),
       zero_is_bad(!zero_is_not_bad), load_flags(load_flags_) {
   if (mRaw->getCpp() != 1 || mRaw->getDataType() != TYPE_USHORT16 ||
       mRaw->getBpp() != 2)
     ThrowRDE("Unexpected component count / data type");
 
   const uint32 width = mRaw->dim.x;
   const uint32 height = mRaw->dim.y;
 
   if (width == 0 || height == 0 || width > 5488 || height > 3904)
     ThrowRDE("Unexpected image dimensions found: (%u; %u)", width, height);
 
+  if (BufSize < load_flags)
+    ThrowRDE("Bad load_flags: %u, less than BufSize (%u)", load_flags, BufSize);
+
   input.check(load_flags);
 }
 
 struct PanasonicDecompressor::PanaBitpump {
-  static constexpr uint32 BufSize = 0x4000;
   ByteStream input;
   std::vector<uchar8> buf;
   int vbits = 0;
   uint32 load_flags;
 
   PanaBitpump(ByteStream input_, int load_flags_)
       : input(std::move(input_)), load_flags(load_flags_) {
     // get one more byte, so the return statement of getBits does not have
     // to special case for accessing the last byte
     buf.resize(BufSize + 1UL);
   }
 
   void skipBytes(int bytes) {
     int blocks = (bytes / BufSize) * BufSize;
     input.skipBytes(blocks);
     for (int i = blocks; i < bytes; i++)
       (void)getBits(8);
   }
 
   uint32 getBits(int nbits) {
     if (!vbits) {
       /* On truncated files this routine will just return just for the truncated
        * part of the file. Since there is no chance of affecting output buffer
        * size we allow the decoder to decode this
        */
+      assert(BufSize >= load_flags);
       auto size = std::min(input.getRemainSize(), BufSize - load_flags);
       memcpy(buf.data() + load_flags, input.getData(size), size);
 
       size = std::min(input.getRemainSize(), load_flags);
       if (size != 0)
         memcpy(buf.data(), input.getData(size), size);
     }
     vbits = (vbits - nbits) & 0x1ffff;
     int byte = vbits >> 3 ^ 0x3ff0;
     return (buf[byte] | buf[byte + 1UL] << 8) >> (vbits & 7) & ~(-(1 << nbits));
   }
 };
diff --git a/src/librawspeed/decompressors/PanasonicDecompressor.h b/src/librawspeed/decompressors/PanasonicDecompressor.h
index d2da0350..2fdb9fd3 100644
--- a/src/librawspeed/decompressors/PanasonicDecompressor.h
+++ b/src/librawspeed/decompressors/PanasonicDecompressor.h
@@ -29,10 +29,11 @@ namespace rawspeed {
 class RawImage;
 
 class PanasonicDecompressor final : public AbstractParallelizedDecompressor {
+  static constexpr uint32 BufSize = 0x4000;
   struct PanaBitpump;
 
   void decompressThreaded(const RawDecompressorThread* t) const final;
 
   ByteStream input;
   bool zero_is_bad;
   uint32 load_flags;
