commit 27808d5a8dc8d13c64e88c0a819f5cd29b274979
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Mon Oct 8 22:54:43 2018 +0300

    PhaseOneDecompressor: do validate strips (the rows they specify)
    
    While in the proper IIQDecoder we will always have the correct
    strips vector, we shouldn't just assume that.
    The fuzzer that was just added (thankfully, as it should!)
    is able to produce incorrect 'strips', that result in broken image.

diff --git a/src/librawspeed/decompressors/PhaseOneDecompressor.cpp b/src/librawspeed/decompressors/PhaseOneDecompressor.cpp
index 84f605fd..a580f3dd 100644
--- a/src/librawspeed/decompressors/PhaseOneDecompressor.cpp
+++ b/src/librawspeed/decompressors/PhaseOneDecompressor.cpp
@@ -1,33 +1,34 @@
 /*
     RawSpeed - RAW file decoder.
 
     Copyright (C) 2009-2014 Klaus Post
     Copyright (C) 2014-2015 Pedro CÃ´rte-Real
     Copyright (C) 2017-2018 Roman Lebedev
 
     This library is free software; you can redistribute it and/or
     modify it under the terms of the GNU Lesser General Public
     License as published by the Free Software Foundation; either
     version 2 of the License, or (at your option) any later version.
 
     This library is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     Lesser General Public License for more details.
 
     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */
 
 #include "decompressors/PhaseOneDecompressor.h"
 #include "common/Common.h"                // for int32, uint32, ushort16
 #include "common/Point.h"                 // for iPoint2D
 #include "common/RawImage.h"              // for RawImage, RawImageData
 #include "decoders/RawDecoderException.h" // for ThrowRDE
 #include "io/BitPumpMSB32.h"              // for BitPumpMSB32
+#include <algorithm>                      // for for_each
 #include <array>                          // for array
 #include <cassert>                        // for assert
 #include <cstddef>                        // for size_t
 #include <utility>                        // for move
 #include <vector>                         // for vector, vector<>::size_type
@@ -37,22 +38,61 @@ namespace rawspeed {
 PhaseOneDecompressor::PhaseOneDecompressor(const RawImage& img,
                                            std::vector<PhaseOneStrip>&& strips_)
     : AbstractParallelizedDecompressor(img), strips(std::move(strips_)) {
   if (mRaw->getDataType() != TYPE_USHORT16)
     ThrowRDE("Unexpected data type");
 
   if (!((mRaw->getCpp() == 1 && mRaw->getBpp() == 2)))
     ThrowRDE("Unexpected cpp: %u", mRaw->getCpp());
 
   if (!mRaw->dim.hasPositiveArea() || mRaw->dim.x % 2 != 0 ||
       mRaw->dim.x > 11608 || mRaw->dim.y > 8708) {
     ThrowRDE("Unexpected image dimensions found: (%u; %u)", mRaw->dim.x,
              mRaw->dim.y);
   }
 
+  validateStrips();
+}
+
+void PhaseOneDecompressor::validateStrips() const {
+  // The 'strips' vector should contain exactly one element per row of image.
+
+  // If the lenght is different, then the 'strips' vector is clearly incorrect.
   if (strips.size() != static_cast<decltype(strips)::size_type>(mRaw->dim.y)) {
     ThrowRDE("Height (%u) vs strip count %zu mismatch", mRaw->dim.y,
              strips.size());
   }
+
+  struct RowBin {
+    using value_type = unsigned char;
+    bool isEmpty() const { return data == 0; }
+    void fill() { data = 1; }
+    value_type data = 0;
+  };
+
+  // Now, the strips in 'strips' vector aren't in order.
+  // The 'decltype(strips)::value_type::n' is the row number of a strip.
+  // We need to make sure that we have every row (0..mRaw->dim.y-1), once.
+
+  // There are many ways to do that. Here, we take the histogram of all the
+  // row numbers, and if any bin ends up not being '1' (one strip per row),
+  // then the input is bad.
+  std::vector<RowBin> histogram;
+  histogram.resize(strips.size());
+  int numBinsFilled = 0;
+  std::for_each(strips.begin(), strips.end(),
+                [y = mRaw->dim.y, &histogram,
+                 &numBinsFilled](const PhaseOneStrip& strip) {
+                  if (strip.n < 0 || strip.n >= y)
+                    ThrowRDE("Strip specifies out-of-bounds row %u", strip.n);
+                  RowBin& rowBin = histogram[strip.n];
+                  if (!rowBin.isEmpty())
+                    ThrowRDE("Duplicate row %u", strip.n);
+                  rowBin.fill();
+                  numBinsFilled++;
+                });
+  assert(histogram.size() == strips.size());
+  assert(numBinsFilled == mRaw->dim.y &&
+         "We should only get here if all the rows/bins got filled.");
 }
 
 void PhaseOneDecompressor::decompressStrip(const PhaseOneStrip& strip) const {
diff --git a/src/librawspeed/decompressors/PhaseOneDecompressor.h b/src/librawspeed/decompressors/PhaseOneDecompressor.h
index 7c89edf1..e7b9d3f8 100644
--- a/src/librawspeed/decompressors/PhaseOneDecompressor.h
+++ b/src/librawspeed/decompressors/PhaseOneDecompressor.h
@@ -45,6 +45,8 @@ class PhaseOneDecompressor final : public AbstractParallelizedDecompressor {
 
   void decompressThreaded(const RawDecompressorThread* t) const final;
 
+  void validateStrips() const;
+
 public:
   PhaseOneDecompressor(const RawImage& img,
                        std::vector<PhaseOneStrip>&& strips_);
