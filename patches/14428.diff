commit 6e5c820cf7a1d54b7732af3c6a3c9727d4bd78bf
Author: Tim RÃ¼hsen <tim.ruehsen@gmx.de>
Date:   Wed Apr 24 09:40:20 2019 +0200

    Fix heap buffer overflow introduced in previous commit
    
    * libwget/iri.c (_iri_unescape_inline): Add missing 'continue'
    
    Found by OSS-FUZZ (Issue 14428)

diff --git a/libwget/iri.c b/libwget/iri.c
index 6d50f3e8..46e4f190 100644
--- a/libwget/iri.c
+++ b/libwget/iri.c
@@ -214,97 +214,98 @@ static unsigned char G_GNUC_WGET_CONST _unhex(unsigned char c)
 static char *_iri_unescape_inline(char *src, int ctype)
 {
 	char *ret = NULL;
 	unsigned char *s = (unsigned char *)src; // just a helper to avoid casting a lot
 	unsigned char *d = s;
 
 	while (*s) {
 		if (*s == '%') {
 			if (c_isxdigit(s[1]) && c_isxdigit(s[2])) {
 				unsigned char c = (unsigned char) (_unhex(s[1]) << 4) | _unhex(s[2]);
 				if (!ctype || (!(iri_ctype[(unsigned char)(c)] & ctype) && c != '%')) {
 					*d++ = c;
 					s += 3;
 					ret = src;
 					continue;
 				}
 			}
 		} else if (*s == '&') {
 			// entities are case sensitive (RFC1866, 3.2.3)
 			if (!strncmp((char *) s + 1, "amp;", 4)) {
 				*d++ = '&';
 				s += 5;
 				ret = src;
 				continue;
 			} else if (!strncmp((char *) s + 1, "gt;", 3)) {
 				*d++ = '>';
 				s += 4;
 				ret = src;
 				continue;
 			} else if (!strncmp((char *) s + 1, "lt;", 3)) {
 				*d++ = '<';
 				s += 4;
 				ret = src;
 				continue;
 			} else if (!strncmp((char *) s + 1, "quot;", 5)) {
 				*d++ = '\"';
 				s += 6;
 				ret = src;
 				continue;
 			} else if (!strncmp((char *) s + 1, "apos;", 5)) {
 				*d++ = '\'';
 				s += 6;
 				ret = src;
+				continue;
 			}
 		} else if (*s == '#') {
 			uint32_t value = 0;
 
 			if (s[1] == 'x') {
 				unsigned char *p = s + 2;
 				while (c_isxdigit(*p)) {
 					value = (value << 4) | _unhex(*p);
 					p++;
 				}
 				if (*p == ';') {
 					if (value > 0 && value < 128) {
 						*d++ = (unsigned char) value;
 						s = p + 1;
 						continue;
 					}
 					// else: we have to convert the unicode value to whatever encoding the URL is in (likely UTF-8)
 					// this cannot be done inline since the URL's length may increase
 				}
 			} else {
 				unsigned char *p = s + 1;
 				while (c_isdigit(*p)) {
 					value = value * 10 + (*p - '0');
 					p++;
 				}
 				if (*p == ';') {
 					if (value > 0 && value < 128) {
 						*d++ = (unsigned char) value;
 						s = p + 1;
 						continue;
 					}
 					// else: we have to convert the unicode value to whatever encoding the URL is in (likely UTF-8)
 					// this cannot be done inline since the URL's length may increase
 				}
 			}
 		}
 
 		*d++ = *s++;
 	}
 	*d = 0;
 
 	return ret;
 }
 
 /**
  * \param[in] src A string
  * \return A pointer to \p src, after the transformation is done
  *
  * Unescape a string. All the percent-encoded characters (`%XX`) are converted
  * back to their original form.
  *
  * **The transformation is done inline**, so `src` will be modified after this function returns.
  * If no percent-encoded characters are found, the string is left untouched.
  */
