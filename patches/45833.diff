commit eadb9f70eb83e7f88246431d355b9bc7387fcc6f
Author: Evgenii Kliuchnikov <eustas@google.com>
Date:   Mon Mar 21 14:25:58 2022 +0000

    Fix heap-buffer-overflow

diff --git a/lib/jxl/render_pipeline/stage_write.cc b/lib/jxl/render_pipeline/stage_write.cc
index b4f6033a..e4796bba 100644
--- a/lib/jxl/render_pipeline/stage_write.cc
+++ b/lib/jxl/render_pipeline/stage_write.cc
@@ -269,68 +269,71 @@ class WriteToImage3FStage : public RenderPipelineStage {
 class WriteToPixelCallbackStage : public RenderPipelineStage {
  public:
   WriteToPixelCallbackStage(
       const std::function<void(const float*, size_t, size_t, size_t)>&
           pixel_callback,
       size_t width, size_t height, bool rgba, bool has_alpha, size_t alpha_c)
       : RenderPipelineStage(RenderPipelineStage::Settings()),
         pixel_callback_(pixel_callback),
         width_(width),
         height_(height),
         rgba_(rgba),
         has_alpha_(has_alpha),
         alpha_c_(alpha_c),
         opaque_alpha_(kMaxPixelsPerCall, 1.0f) {
     settings_.temp_buffer_size = kMaxPixelsPerCall * (rgba_ ? 4 : 3);
   }
 
   void ProcessRow(const RowInfo& input_rows, const RowInfo& output_rows,
                   size_t xextra, size_t xsize, size_t xpos, size_t ypos,
                   float* JXL_RESTRICT temp) const final {
     if (ypos >= height_) return;
     const float* line_buffers[4];
     for (size_t c = 0; c < 3; c++) {
-      line_buffers[c] = GetInputRow(input_rows, c, 0);
+      line_buffers[c] = GetInputRow(input_rows, c, 0) - xextra;
     }
     if (has_alpha_) {
-      line_buffers[3] = GetInputRow(input_rows, alpha_c_, 0);
+      line_buffers[3] = GetInputRow(input_rows, alpha_c_, 0) - xextra;
     } else {
+      // No xextra offset; opaque_alpha_ is a way to set all values to 1.0f.
       line_buffers[3] = opaque_alpha_.data();
     }
     // TODO(veluca): SIMD.
     ssize_t limit = std::min(xextra + xsize, width_ - xpos);
     for (ssize_t x0 = -xextra; x0 < limit; x0 += kMaxPixelsPerCall) {
       size_t j = 0;
       size_t ix = 0;
       for (; ix < kMaxPixelsPerCall && ssize_t(ix) + x0 < limit; ix++) {
-        temp[j++] = line_buffers[0][x0 + ix];
-        temp[j++] = line_buffers[1][x0 + ix];
-        temp[j++] = line_buffers[2][x0 + ix];
+        temp[j++] = line_buffers[0][ix];
+        temp[j++] = line_buffers[1][ix];
+        temp[j++] = line_buffers[2][ix];
         if (rgba_) {
-          temp[j++] = line_buffers[3][x0 + ix];
+          temp[j++] = line_buffers[3][ix];
         }
       }
       pixel_callback_(temp, xpos + x0, ypos, ix);
+      for (size_t c = 0; c < 3; c++) line_buffers[c] += kMaxPixelsPerCall;
+      if (has_alpha_) line_buffers[3] += kMaxPixelsPerCall;
     }
   }
 
   RenderPipelineChannelMode GetChannelMode(size_t c) const final {
     return c < 3 || (has_alpha_ && c == alpha_c_)
                ? RenderPipelineChannelMode::kInput
                : RenderPipelineChannelMode::kIgnored;
   }
 
   const char* GetName() const override { return "WritePixelCB"; }
 
  private:
   static constexpr size_t kMaxPixelsPerCall = 1024;
   const std::function<void(const float*, size_t, size_t, size_t)>&
       pixel_callback_;
   size_t width_;
   size_t height_;
   bool rgba_;
   bool has_alpha_;
   size_t alpha_c_;
   std::vector<float> opaque_alpha_;
 };
 
 }  // namespace
