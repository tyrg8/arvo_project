commit bd2e06c4c77f32b2368b00ecf9966031ad724255
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Sun Dec 24 11:48:51 2017 +0000

    NAS: fix potential null pointer dereference. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=4758. Credit to OSS Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@41129 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/ogr/ogrsf_frmts/nas/nashandler.cpp b/gdal/ogr/ogrsf_frmts/nas/nashandler.cpp
index 6230a3b5c3..9dc13d285b 100644
--- a/gdal/ogr/ogrsf_frmts/nas/nashandler.cpp
+++ b/gdal/ogr/ogrsf_frmts/nas/nashandler.cpp
@@ -474,256 +474,256 @@ void NASHandler::startElement( const XMLCh* const /* uri */,
 /************************************************************************/
 /*                             endElement()                             */
 /************************************************************************/
 void NASHandler::endElement( const XMLCh* const /* uri */ ,
                              const XMLCh* const localname,
                              const XMLCh* const /* qname */)
 
 {
     GMLReadState *poState = m_poReader->GetState();
 
     transcode( localname, m_osElementName );
 
     m_nDepth --;
 #ifdef DEBUG_TRACE_ELEMENTS
     for(int k=0;k<m_nDepth;k++)
         printf(" "); /*ok*/
     printf("<%s\n", m_osElementName.c_str()); /*ok*/
 #endif
 
     if (m_bIgnoreFeature && m_nDepth >= m_nDepthFeature)
     {
         if (m_nDepth == m_nDepthFeature)
         {
             m_bIgnoreFeature = false;
             m_nDepthFeature = 0;
         }
         return;
     }
 
 #ifdef DEBUG_VERBOSE
     CPLDebug("NAS",
               "%*sendElement %s m_bIgnoreFeature:%d depth:%d depthFeature:%d featureClass:%s",
               m_nDepth, "", m_osElementName.c_str(),
               m_bIgnoreFeature, m_nDepth, m_nDepthFeature,
               poState->m_poFeature ? poState->m_poFeature->GetClass()->GetElementName() : "(no feature)"
             );
 #endif
 
    if( m_bInUpdateProperty )
    {
        if( m_osElementName == "Name" && m_nDepth == m_nNameOrValueDepth )
        {
            CPLAssert( m_osLastPropertyName == "" );
-           m_osLastPropertyName = m_pszCurField;
+           m_osLastPropertyName = m_pszCurField ? m_pszCurField : "";
            m_pszCurField = nullptr;
            m_nNameOrValueDepth = 0;
        }
        else if( m_osElementName == "Value" && m_nDepth == m_nNameOrValueDepth )
        {
            CPLAssert( m_osLastPropertyValue == "" );
-           m_osLastPropertyValue = m_pszCurField;
+           m_osLastPropertyValue = m_pszCurField ? m_pszCurField : "";
            m_pszCurField = nullptr;
            m_nNameOrValueDepth = 0;
        }
        else if( m_nDepth == m_nUpdatePropertyDepth && m_osElementName == "Property" )
        {
            if( EQUAL( m_osLastPropertyName, "adv:lebenszeitintervall/adv:AA_Lebenszeitintervall/adv:endet" ) ||
                EQUAL( m_osLastPropertyName, "lebenszeitintervall/AA_Lebenszeitintervall/endet" ) )
            {
                CPLAssert( m_osLastPropertyValue != "" );
                m_osLastEnded = m_osLastPropertyValue;
            }
            else if( EQUAL( m_osLastPropertyName, "adv:anlass" ) ||
                     EQUAL( m_osLastPropertyName, "anlass" ) )
            {
                CPLAssert( m_osLastPropertyValue != "" );
                m_LastOccasions.push_back( m_osLastPropertyValue );
            }
            else
            {
                CPLError( CE_Warning, CPLE_AppDefined,
                          "NAS: Expected property name or value instead of %s",
                          m_osLastPropertyName.c_str() );
            }
 
            m_osLastPropertyName = "";
            m_osLastPropertyValue = "";
            m_bInUpdateProperty = false;
            m_nUpdatePropertyDepth = 0;
        }
 
        poState->PopPath();
 
        return;
    }
 
    if( m_nUpdateOrDeleteDepth > 0 &&
              (m_osElementName == "Delete" || m_osElementName == "Update") )
    {
         if ( m_bInUpdate && m_osElementName == "Update" )
         {
             m_bInUpdate = false;
         }
         m_nUpdateOrDeleteDepth = 0;
    }
 
 /* -------------------------------------------------------------------- */
 /*      Is this closing off an attribute value?  We assume so if        */
 /*      we are collecting an attribute value and got to this point.     */
 /*      We don't bother validating that the closing tag matches the     */
 /*      opening tag.                                                    */
 /* -------------------------------------------------------------------- */
     if( m_pszCurField != nullptr )
     {
         CPLAssert( poState->m_poFeature != nullptr );
 
         m_poReader->SetFeaturePropertyDirectly( poState->osPath.c_str(), m_pszCurField );
         m_pszCurField = nullptr;
     }
 
 /* -------------------------------------------------------------------- */
 /*      If we are collecting Geometry than store it, and consider if    */
 /*      this is the end of the geometry.                                */
 /* -------------------------------------------------------------------- */
     if( m_pszGeometry != nullptr )
     {
         int nLNLen = static_cast<int>(m_osElementName.size());
 
         /* should save attributes too! */
 
         if( m_nGeomLen + nLNLen + 4 > m_nGeomAlloc )
         {
             m_nGeomAlloc = (int) (m_nGeomAlloc * 1.3 + nLNLen + 1000);
             m_pszGeometry = (char *)
                 CPLRealloc( m_pszGeometry, m_nGeomAlloc);
         }
 
         strcat( m_pszGeometry+m_nGeomLen, "</" );
         strcpy( m_pszGeometry+m_nGeomLen+2, m_osElementName );
         strcat( m_pszGeometry+m_nGeomLen+nLNLen+2, ">" );
         m_nGeomLen += static_cast<int>(strlen(m_pszGeometry+m_nGeomLen));
 
         if( poState->m_nPathLength == m_nGeometryDepth+1 )
         {
             if( poState->m_poFeature != nullptr )
             {
                 CPLXMLNode* psNode = CPLParseXMLString(m_pszGeometry);
                 if (psNode)
                 {
                     /* workaround for common malformed gml:pos with just a
                      * elevation value instead of a full 3D coordinate:
                      *
                      * <gml:Point gml:id="BII2H">
                      *    <gml:pos srsName="urn:adv:crs:ETRS89_h">41.394</gml:pos>
                      * </gml:Point>
                      *
                      */
                     const char *pszPos =
                         CPLGetXMLValue( psNode, "=Point.pos", nullptr );
                     if( pszPos != nullptr && strstr(pszPos, " ") == nullptr )
                     {
                         CPLSetXMLValue( psNode, "pos", CPLSPrintf("0 0 %s", pszPos) );
                     }
 
                     if ( m_nGeometryPropertyIndex >= 0 &&
                          m_nGeometryPropertyIndex < poState->m_poFeature->GetGeometryCount() &&
                          poState->m_poFeature->GetGeometryList()[m_nGeometryPropertyIndex] )
                     {
                         int iId = poState->m_poFeature->GetClass()->GetPropertyIndex( "gml_id" );
                         const GMLProperty *poIdProp = poState->m_poFeature->GetProperty(iId);
 #ifdef DEBUG_VERBOSE
                         char *pszOldGeom = CPLSerializeXMLTree( poState->m_poFeature->GetGeometryList()[m_nGeometryPropertyIndex] );
 
                         CPLDebug("NAS", "Overwriting other geometry (%s; replace:%s; with:%s)",
                                  poIdProp && poIdProp->nSubProperties>0 && poIdProp->papszSubProperties[0] ? poIdProp->papszSubProperties[0] : "(null)",
                                  m_pszGeometry,
                                  pszOldGeom
                                 );
 
                         CPLFree( pszOldGeom );
 #else
                         CPLError( CE_Warning, CPLE_AppDefined, "NAS: Overwriting other geometry (%s)",
                                  poIdProp && poIdProp->nSubProperties>0 && poIdProp->papszSubProperties[0] ? poIdProp->papszSubProperties[0] : "(null)" );
 #endif
                     }
 
                     if( m_nGeometryPropertyIndex >= 0 )
                         poState->m_poFeature->SetGeometryDirectly( m_nGeometryPropertyIndex, psNode );
 
                     // no geometry property or property without element path
                     else if( poState->m_poFeature->GetClass()->GetGeometryPropertyCount() == 0 ||
                              ( poState->m_poFeature->GetClass()->GetGeometryPropertyCount() == 1 &&
                                poState->m_poFeature->GetClass()->GetGeometryProperty(0)->GetSrcElement() &&
                                *poState->m_poFeature->GetClass()->GetGeometryProperty(0)->GetSrcElement() == 0 ) )
                         poState->m_poFeature->SetGeometryDirectly( psNode );
 
                     else
                     {
                         CPLError( CE_Warning, CPLE_AppDefined, "NAS: Unexpected geometry skipped (class:%s path:%s geom:%s)",
                                   poState->m_poFeature->GetClass()->GetName(),
                                   poState->osPath.c_str(),
                                   m_pszGeometry );
                         CPLDestroyXMLNode( psNode );
                     }
                 }
                 else
                     CPLError( CE_Warning, CPLE_AppDefined, "NAS: Invalid geometry skipped" );
             }
             else
                 CPLError( CE_Warning, CPLE_AppDefined, "NAS: Skipping geometry without feature" );
 
             CPLFree( m_pszGeometry );
             m_pszGeometry = nullptr;
             m_nGeomAlloc = m_nGeomLen = 0;
             m_nGeometryPropertyIndex = -1;
         }
     }
 
 /* -------------------------------------------------------------------- */
 /*      If we are collecting a feature, and this element tag matches    */
 /*      element name for the class, then we have finished the           */
 /*      feature, and we pop the feature read state.                     */
 /* -------------------------------------------------------------------- */
     const char *pszLast = nullptr;
 
     if( m_nDepth == m_nDepthFeature && poState->m_poFeature != nullptr
         && m_osElementName ==
                  poState->m_poFeature->GetClass()->GetElementName() )
     {
         m_nDepthFeature = 0;
         m_poReader->PopState();
     }
 
 /* -------------------------------------------------------------------- */
 /*      Ends of a wfs:Delete or wfs:Update should be triggered on the   */
 /*      close of the <Filter> element.                                  */
 /* -------------------------------------------------------------------- */
     else if( m_nDepth == m_nDepthFeature
              && poState->m_poFeature != nullptr
              && m_osElementName == "Filter"
              && (pszLast=poState->m_poFeature->GetClass()->GetElementName())
                 != nullptr
              && ( EQUAL(pszLast, "Delete") || EQUAL(pszLast, "Update") ) )
     {
         m_nDepthFeature = 0;
         m_poReader->PopState();
     }
 
 /* -------------------------------------------------------------------- */
 /*      Otherwise, we just pop the element off the local read states    */
 /*      element stack.                                                  */
 /* -------------------------------------------------------------------- */
     else
     {
         if( m_osElementName == poState->GetLastComponent() )
             poState->PopPath();
         else
         {
             CPLAssert( false );
         }
     }
 }
 
 /************************************************************************/
 /*                             characters()                             */
 /************************************************************************/
