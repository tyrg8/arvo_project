commit 3c75a977879b066c20f6c9587481ac93e476630b
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Tue Feb 1 08:37:11 2022 +0000

    oss-fuzz 44264: pdfi_pscript_interpret() check input buffer limit
    
    Add a missing check for an exhausted buffer

diff --git a/pdf/pdf_fontps.c b/pdf/pdf_fontps.c
index ffff236ac..02384ab24 100644
--- a/pdf/pdf_fontps.c
+++ b/pdf/pdf_fontps.c
@@ -166,212 +166,212 @@ int
 pdfi_pscript_interpret(pdf_ps_ctx_t *cs, byte *pdfpsbuf, int64_t buflen)
 {
     int code = 0;
     byte *buflim = pdfpsbuf + buflen;
     int arraydepth = 0;
     int stackdepth;
 
     while (pdfpsbuf < buflim && code >= 0) {
         switch (*pdfpsbuf++) {
             case '%':          /* Comment */
                 {
                     while (pdfpsbuf < buflim && *pdfpsbuf != char_EOL && *pdfpsbuf != '\f' &&
                            *pdfpsbuf != char_CR)
                         pdfpsbuf++;
 
-                    if (*pdfpsbuf == char_EOL)
+                    if (pdfpsbuf < buflim && *pdfpsbuf == char_EOL)
                         pdfpsbuf++;
                 }
                 break;
             case '/':          /* name */
                 {
                     byte *n = pdfpsbuf;
                     int len;
 
                     while (pdfpsbuf < buflim && !pdf_ps_end_object((int)*pdfpsbuf))
                         pdfpsbuf++;
                     len = pdfpsbuf - n;
                     code = pdf_ps_stack_push_name(cs, n, len);
                 } break;
             case '(':          /* string */
                 {
                     byte *s = pdfpsbuf;
                     int len;
                     int depth = 1;
 
                     while (pdfpsbuf < buflim && depth > 0) {
                         if (*pdfpsbuf == '(') {
                             depth++;
                         }
                         else if (*pdfpsbuf == ')') {
                             depth--;
                         }
                         pdfpsbuf++;
                     }
                     len = (pdfpsbuf - s) - 1;
                     code = pdf_ps_stack_push_string(cs, s, len);
                 }
                 break;
             case '<':          /* hex string */
                 {
                     byte *s = pdfpsbuf;
                     byte *s2 = s;
                     int len, i;
                     byte hbuf[2];
 
                     if (pdfpsbuf < buflim && *pdfpsbuf == '<') { /* Dict opening "<<" - we don't care */
                         pdfpsbuf++;
                         continue;
                     }
                     while (pdfpsbuf < buflim && *pdfpsbuf != '>')
                         pdfpsbuf++;
                     len = pdfpsbuf - s;
                     while (len % 2)
                         len--;
                     for (i = 0; i < len; i += 2) {
                         hbuf[0] = s[i];
                         hbuf[1] = s[i + 1];
                         *s2++ = (decodehex(hbuf[0]) << 4) | decodehex(hbuf[1]);
                     }
                     pdfpsbuf++; /* move past the trailing '>' */
                     code = pdf_ps_stack_push_string(cs, s, len >> 1);
                 }
                 break;
             case '>': /* For hex strings, this should be handled above */
                 {
                     if (pdfpsbuf < buflim && *pdfpsbuf == '>') { /* Dict closing "<<" - we still don't care */
                         pdfpsbuf++;
                     }
                 }
                break;
             case '[':;         /* begin array */
             case '{':;         /* begin executable array (mainly, FontBBox) */
                 arraydepth++;
                 code = pdf_ps_stack_push_arr_mark(cs);
                 break;
             case ']':          /* end array */
             case '}':          /* end executable array */
                 {
                     pdf_ps_stack_object_t *arr = NULL;
                     int i, size = pdf_ps_stack_count_to_mark(cs, PDF_PS_OBJ_ARR_MARK);
 
                     if (size > 0 && arraydepth > 0) {
                         arr = (pdf_ps_stack_object_t *) gs_alloc_bytes(cs->pdfi_ctx->memory, size * sizeof(pdf_ps_stack_object_t), "pdfi_pscript_interpret(pdf_ps_stack_object_t");
                         if (arr == NULL) {
                             code = gs_note_error(gs_error_VMerror);
                             /* clean up the stack, including the mark object */
                             (void)pdf_ps_stack_pop(cs, size + 1);
                             size = 0;
                         }
                         else {
                             for (i = 0; i < size; i++) {
                                 memcpy(&(arr[(size - 1) - i]), cs->cur, sizeof(*cs->cur));
                                 if (pdf_ps_obj_has_type(cs->cur, PDF_PS_OBJ_ARRAY)) {
                                     pdf_ps_make_null(cs->cur);
                                 }
                                 (void)pdf_ps_stack_pop(cs, 1);
                             }
                             /* And pop the array mark */
                             (void)pdf_ps_stack_pop(cs, 1);
                         }
                     }
                     else {
                         /* And pop the array mark for an emtpy array */
                         (void)pdf_ps_stack_pop(cs, 1);
                     }
                     code = pdf_ps_stack_push_array(cs, arr, size > 0 ? size : 0);
                     arraydepth--;
                     if (arraydepth < 0)
                         arraydepth = 0;
                 }
                 break;
             case '.':
             case '-':
             case '+':
             case '0':
             case '1':
             case '2':
             case '3':
             case '4':
             case '5':
             case '6':
             case '7':
             case '8':
             case '9':{
                     bool is_float = false;
                     int len;
                     byte *n = --pdfpsbuf, *numbuf;
 
                     while (pdfpsbuf < buflim && !pdf_ps_end_number_object((int)*pdfpsbuf)) {
                         if (*pdfpsbuf == '.' || *pdfpsbuf == 'e')
                             is_float = true;
                         pdfpsbuf++;
                     }
                     len = pdfpsbuf - n;
                     if (len == 1 && *n == '-') {
                         /* Not a number, might be an operator */
                         pdfpsbuf = n + 1;
                         goto retry_as_oper;
                     }
                     numbuf = gs_alloc_bytes(cs->pdfi_ctx->memory, len + 1, "ps pdf number buffer");
                     if (numbuf == NULL) {
                         code = gs_note_error(gs_error_VMerror);
                     }
                     else {
                         memcpy(numbuf, n, len);
                         numbuf[len] = '\0';
                         if (is_float) {
                             float f = (float)atof((const char *)numbuf);
 
                             code = pdf_ps_stack_push_float(cs, f);
                         }
                         else {
                             int i = atoi((const char *)numbuf);
 
                             code = pdf_ps_stack_push_int(cs, i);
                         }
                         gs_free_object(cs->pdfi_ctx->memory, numbuf, "ps pdf number buffer");
                     }
                 } break;
             case ' ':
             case '\f':
             case '\t':
             case char_CR:
             case char_EOL:
             case char_NULL:
                 break;
             default:
               retry_as_oper:{
                     byte *n = --pdfpsbuf;
                     int len, i;
                     int (*opfunc)(gs_memory_t *mem, pdf_ps_ctx_t *stack, byte *buf, byte *bufend) = NULL;
                     pdf_ps_oper_list_t *ops = cs->ops;
 
                     while (pdfpsbuf < buflim && !pdf_ps_end_object((int)*pdfpsbuf))
                         pdfpsbuf++;
 
                     if (arraydepth == 0) {
                         len = pdfpsbuf - n;
                         for (i = 0; ops[i].opname != NULL; i++) {
                             if (len == ops[i].opnamelen && !memcmp(n, ops[i].opname, len)) {
                                 opfunc = ops[i].oper;
                                 break;
                             }
                         }
 
                         if (opfunc) {
                             code = (*opfunc) (cs->pdfi_ctx->memory, cs, pdfpsbuf, buflim);
                             if (code > 0) {
                                 pdfpsbuf += code;
                                 code = 0;
                             }
                         }
                     }
                 }
                 break;
         }
     }
     if ((stackdepth = pdf_ps_stack_count(cs)) > 0) {
         pdf_ps_stack_pop(cs, stackdepth);
     }
     return code;
 }
