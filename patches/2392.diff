commit 18909d45977a897cbd921d76d1dde4bf3a466271
Author: Dennis Francis <dennis.francis@collabora.co.uk>
Date:   Thu Jul 6 13:36:57 2017 +0530

    tdf#108921 : Enforce a minimum legend size for pivot charts...
    
    ...proportional to the chart size. This lets a default pivot
    chart maintain its current size even when there are no data points
    which may result from a pivot field filter operation.
    
    Tried to add a test, but could not with a reasonable amount of
    effort.
    
    Some observations I made when tried to create a unit test:
    
    1. If a new chart is created using uno api fresh from a pivot table,
       no legend is created irrespective of whether there is data or not.
    2. Pivot charts with zero data points work fine with this patch, but
       on round trip the chart needs to be explicitly refreshed by
       clicking one of the pivot table's field selectors to make the chart
       show axis/labels etc.
    
    Change-Id: I010ca9093ce94dc216ba06e9d7aedaa412e59401
    Reviewed-on: https://gerrit.libreoffice.org/39620
    Tested-by: Jenkins <ci@libreoffice.org>
    Reviewed-by: Tomaž Vajngerl <quikee@gmail.com>
    Tested-by: Tomaž Vajngerl <quikee@gmail.com>

diff --git a/chart2/source/view/main/VLegend.cxx b/chart2/source/view/main/VLegend.cxx
index 6ded0aae091a..98925974aec6 100644
--- a/chart2/source/view/main/VLegend.cxx
+++ b/chart2/source/view/main/VLegend.cxx
@@ -259,343 +259,348 @@ sal_Int32 lcl_getTextLineHeight( const std::vector< sal_Int32 >& aRowHeights, co
 //returns resulting legend size
 awt::Size lcl_placeLegendEntries(
     std::vector<ViewLegendEntry> & rEntries,
     css::chart::ChartLegendExpansion eExpansion,
     bool bSymbolsLeftSide,
     double fViewFontSize,
     const awt::Size& rMaxSymbolExtent,
     tPropertyValues & rTextProperties,
     const Reference< drawing::XShapes > & xTarget,
     const Reference< lang::XMultiServiceFactory > & xShapeFactory,
     const awt::Size& rRemainingSpace,
-    sal_Int32 nYStartPosition)
+    sal_Int32 nYStartPosition,
+    const awt::Size& rPageSize,
+    bool bIsPivotChart)
 {
     bool bIsCustomSize = (eExpansion == css::chart::ChartLegendExpansion_CUSTOM);
     awt::Size aResultingLegendSize(0,0);
+    // For Pivot charts set the *minimum* legend size as a function of page size.
+    if ( bIsPivotChart )
+        aResultingLegendSize = awt::Size((rPageSize.Width * 13) / 80, (rPageSize.Height * 31) / 90);
     if( bIsCustomSize )
         aResultingLegendSize = awt::Size(rRemainingSpace.Width, rRemainingSpace.Height + nYStartPosition);
 
     // #i109336# Improve auto positioning in chart
     sal_Int32 nXPadding = static_cast< sal_Int32 >( std::max( 100.0, fViewFontSize * 0.33 ) );
     sal_Int32 nXOffset  = static_cast< sal_Int32 >( std::max( 100.0, fViewFontSize * 0.66 ) );
     sal_Int32 nYPadding = static_cast< sal_Int32 >( std::max( 100.0, fViewFontSize * 0.2 ) );
     sal_Int32 nYOffset  = static_cast< sal_Int32 >( std::max( 100.0, fViewFontSize * 0.2 ) );
 
     const sal_Int32 nSymbolToTextDistance = static_cast< sal_Int32 >( std::max( 100.0, fViewFontSize * 0.22 ) );//minimum 1mm
     const sal_Int32 nSymbolPlusDistanceWidth = rMaxSymbolExtent.Width + nSymbolToTextDistance;
     sal_Int32 nMaxTextWidth = rRemainingSpace.Width - (2 * nXPadding) - nSymbolPlusDistanceWidth;
     uno::Any* pFrameWidthAny = PropertyMapper::getValuePointer( rTextProperties.second, rTextProperties.first, "TextMaximumFrameWidth");
     if(pFrameWidthAny)
     {
         if( eExpansion == css::chart::ChartLegendExpansion_HIGH )
         {
             // limit the width of texts to 30% of the total available width
             // #i109336# Improve auto positioning in chart
             nMaxTextWidth = rRemainingSpace.Width * 3 / 10;
         }
         *pFrameWidthAny <<= nMaxTextWidth;
     }
 
     std::vector< Reference< drawing::XShape > > aTextShapes;
     awt::Size aMaxEntryExtent = lcl_createTextShapes( rEntries, xShapeFactory, xTarget, aTextShapes, rTextProperties );
     OSL_ASSERT( aTextShapes.size() == rEntries.size());
 
     sal_Int32 nMaxEntryWidth = nXOffset + nSymbolPlusDistanceWidth + aMaxEntryExtent.Width;
     sal_Int32 nMaxEntryHeight = nYOffset + aMaxEntryExtent.Height;
     sal_Int32 nNumberOfEntries = rEntries.size();
 
     sal_Int32 nNumberOfColumns = 0, nNumberOfRows = 0;
     std::vector< sal_Int32 > aColumnWidths;
     std::vector< sal_Int32 > aRowHeights;
 
     sal_Int32 nTextLineHeight = static_cast< sal_Int32 >( fViewFontSize );
 
     // determine layout depending on LegendExpansion
     if( eExpansion == css::chart::ChartLegendExpansion_CUSTOM )
     {
         sal_Int32 nCurrentRow=0;
         sal_Int32 nCurrentColumn=-1;
         sal_Int32 nMaxColumnCount=-1;
         for( sal_Int32 nN=0; nN<static_cast<sal_Int32>(aTextShapes.size()); nN++ )
         {
             Reference< drawing::XShape > xShape( aTextShapes[nN] );
             if( !xShape.is() )
                 continue;
             awt::Size aSize( xShape->getSize() );
             sal_Int32 nNewWidth = aSize.Width + nSymbolPlusDistanceWidth;
             sal_Int32 nCurrentColumnCount = aColumnWidths.size();
 
             //are we allowed to add a new column?
             if( nMaxColumnCount==-1 || (nCurrentColumn+1) < nMaxColumnCount )
             {
                 //try add a new column
                 nCurrentColumn++;
                 if( nCurrentColumn < nCurrentColumnCount )
                 {
                     //check whether the current column width is sufficient for the new entry
                     if( aColumnWidths[nCurrentColumn]>=nNewWidth )
                     {
                         //all good proceed with next entry
                         continue;
                     }
                 }
                 if( nCurrentColumn < nCurrentColumnCount )
                     aColumnWidths[nCurrentColumn] = std::max( nNewWidth, aColumnWidths[nCurrentColumn] );
                 else
                     aColumnWidths.push_back(nNewWidth);
 
                 //do the columns still fit into the given size?
                 nCurrentColumnCount = aColumnWidths.size();//update count
                 sal_Int32 nSumWidth = 0;
                 for (sal_Int32 nColumn = 0; nColumn < nCurrentColumnCount; nColumn++)
                     nSumWidth += aColumnWidths[nColumn];
 
                 if( nSumWidth <= rRemainingSpace.Width || nCurrentColumnCount==1 )
                 {
                     //all good proceed with next entry
                     continue;
                 }
                 else
                 {
                     //not enough space for the current amount of columns
                     //try again with less columns
                     nMaxColumnCount = nCurrentColumnCount-1;
                     nN=-1;
                     nCurrentRow=0;
                     nCurrentColumn=-1;
                     aColumnWidths.clear();
                 }
             }
             else
             {
                 //add a new row and try the same entry again
                 nCurrentRow++;
                 nCurrentColumn=-1;
                 nN--;
             }
         }
         nNumberOfColumns = aColumnWidths.size();
         nNumberOfRows = nCurrentRow+1;
 
         //check if there is not enough space so that some entries must be removed
         lcl_collectRowHeighs( aRowHeights, nNumberOfRows, nNumberOfColumns, aTextShapes );
         nTextLineHeight = lcl_getTextLineHeight( aRowHeights, nNumberOfRows, fViewFontSize );
         sal_Int32 nSumHeight = 0;
         for (sal_Int32 nRow=0; nRow < nNumberOfRows; nRow++)
             nSumHeight += aRowHeights[nRow];
         sal_Int32 nRemainingSpace = rRemainingSpace.Height - nSumHeight;
 
         if( nRemainingSpace < -100 ) // 1mm tolerance for OOXML interop tdf#90404
         {
             //remove entries that are too big
             for (sal_Int32 nRow = nNumberOfRows; nRow--; )
             {
                 for (sal_Int32 nColumn = nNumberOfColumns; nColumn--; )
                 {
                     sal_Int32 nEntry = (nColumn + nRow * nNumberOfColumns);
                     if( nEntry < static_cast<sal_Int32>(aTextShapes.size()) )
                     {
                         DrawModelWrapper::removeShape( aTextShapes[nEntry] );
                         aTextShapes.pop_back();
                     }
                     if( nEntry < nNumberOfEntries )
                     {
                         DrawModelWrapper::removeShape( rEntries[ nEntry ].aSymbol );
                         rEntries.pop_back();
                         nNumberOfEntries--;
                     }
                 }
                 nSumHeight -= aRowHeights[nRow];
                 aRowHeights.pop_back();
                 nRemainingSpace = rRemainingSpace.Height - nSumHeight;
                 if( nRemainingSpace>=0 )
                     break;
             }
             nNumberOfRows = static_cast<sal_Int32>(aRowHeights.size());
         }
         if( nRemainingSpace >= -100 ) // 1mm tolerance for OOXML interop tdf#90404
         {
             sal_Int32 nNormalSpacingHeight = 2*nYPadding+(nNumberOfRows-1)*nYOffset;
             if( nRemainingSpace < nNormalSpacingHeight )
             {
                 //reduce spacing between the entries
                 nYPadding = nYOffset = nRemainingSpace/(nNumberOfRows+1);
             }
             else
             {
                 //we have some space left that should be spread equally between all rows
                 sal_Int32 nRemainingSingleSpace = (nRemainingSpace-nNormalSpacingHeight)/(nNumberOfRows+1);
                 nYPadding += nRemainingSingleSpace;
                 nYOffset += nRemainingSingleSpace;
             }
         }
 
         //check spacing between columns
         sal_Int32 nSumWidth = 0;
         for (sal_Int32 nColumn = 0; nColumn < nNumberOfColumns; nColumn++)
             nSumWidth += aColumnWidths[nColumn];
         nRemainingSpace = rRemainingSpace.Width - nSumWidth;
         if( nRemainingSpace>=0 )
         {
             sal_Int32 nNormalSpacingWidth = 2*nXPadding+(nNumberOfColumns-1)*nXOffset;
             if( nRemainingSpace < nNormalSpacingWidth )
             {
                 //reduce spacing between the entries
                 nXPadding = nXOffset = nRemainingSpace/(nNumberOfColumns+1);
             }
             else
             {
                 //we have some space left that should be spread equally between all columns
                 sal_Int32 nRemainingSingleSpace = (nRemainingSpace-nNormalSpacingWidth)/(nNumberOfColumns+1);
                 nXPadding += nRemainingSingleSpace;
                 nXOffset += nRemainingSingleSpace;
             }
         }
     }
     else if( eExpansion == css::chart::ChartLegendExpansion_HIGH )
     {
         sal_Int32 nMaxNumberOfRows = nMaxEntryHeight
             ? (rRemainingSpace.Height - 2*nYPadding ) / nMaxEntryHeight
             : 0;
 
         nNumberOfColumns = nMaxNumberOfRows
             ? static_cast< sal_Int32 >(
                 ceil( static_cast< double >( nNumberOfEntries ) /
                       static_cast< double >( nMaxNumberOfRows ) ))
             : 0;
         nNumberOfRows =  nNumberOfColumns
             ? static_cast< sal_Int32 >(
                 ceil( static_cast< double >( nNumberOfEntries ) /
                       static_cast< double >( nNumberOfColumns ) ))
             : 0;
     }
     else if( eExpansion == css::chart::ChartLegendExpansion_WIDE )
     {
         sal_Int32 nMaxNumberOfColumns = nMaxEntryWidth
             ? (rRemainingSpace.Width - 2*nXPadding ) / nMaxEntryWidth
             : 0;
 
         nNumberOfRows = nMaxNumberOfColumns
             ? static_cast< sal_Int32 >(
                 ceil( static_cast< double >( nNumberOfEntries ) /
                       static_cast< double >( nMaxNumberOfColumns ) ))
             : 0;
         nNumberOfColumns = nNumberOfRows
             ? static_cast< sal_Int32 >(
                 ceil( static_cast< double >( nNumberOfEntries ) /
                       static_cast< double >( nNumberOfRows ) ))
             : 0;
     }
     else // css::chart::ChartLegendExpansion_BALANCED
     {
         double fAspect = nMaxEntryHeight
             ? static_cast< double >( nMaxEntryWidth ) / static_cast< double >( nMaxEntryHeight )
             : 0.0;
 
         nNumberOfRows = static_cast< sal_Int32 >(
             ceil( sqrt( static_cast< double >( nNumberOfEntries ) * fAspect )));
         nNumberOfColumns = nNumberOfRows
             ? static_cast< sal_Int32 >(
                 ceil( static_cast< double >( nNumberOfEntries ) /
                       static_cast< double >( nNumberOfRows ) ))
             : 0;
     }
 
     if(nNumberOfRows<=0)
         return aResultingLegendSize;
 
     if( eExpansion != css::chart::ChartLegendExpansion_CUSTOM )
     {
         lcl_collectColumnWidths( aColumnWidths, nNumberOfRows, nNumberOfColumns, aTextShapes, nSymbolPlusDistanceWidth );
         lcl_collectRowHeighs( aRowHeights, nNumberOfRows, nNumberOfColumns, aTextShapes );
         nTextLineHeight = lcl_getTextLineHeight( aRowHeights, nNumberOfRows, fViewFontSize );
     }
 
     sal_Int32 nCurrentXPos = bSymbolsLeftSide ? nXPadding : -nXPadding;
 
     // place entries into column and rows
     sal_Int32 nMaxYPos = 0;
 
     for (sal_Int32 nColumn = 0; nColumn < nNumberOfColumns; ++nColumn)
     {
         sal_Int32 nCurrentYPos = nYPadding + nYStartPosition;
         for (sal_Int32 nRow = 0; nRow < nNumberOfRows; ++nRow)
         {
             sal_Int32 nEntry = (nColumn + nRow * nNumberOfColumns);
             if( nEntry >= nNumberOfEntries )
                 break;
 
             // text shape
             Reference< drawing::XShape > xTextShape( aTextShapes[nEntry] );
             if( xTextShape.is() )
             {
                 awt::Size aTextSize( xTextShape->getSize() );
                 sal_Int32 nTextXPos = nCurrentXPos + nSymbolPlusDistanceWidth;
                 if( !bSymbolsLeftSide )
                     nTextXPos = nCurrentXPos - nSymbolPlusDistanceWidth - aTextSize.Width;
                 xTextShape->setPosition( awt::Point( nTextXPos, nCurrentYPos ));
             }
 
             // symbol
             Reference< drawing::XShape > xSymbol( rEntries[ nEntry ].aSymbol );
             if( xSymbol.is() )
             {
                 awt::Size aSymbolSize( rMaxSymbolExtent );
                 sal_Int32 nSymbolXPos = nCurrentXPos;
                 if( !bSymbolsLeftSide )
                     nSymbolXPos = nCurrentXPos - rMaxSymbolExtent.Width;
                 sal_Int32 nSymbolYPos = nCurrentYPos + ( ( nTextLineHeight - aSymbolSize.Height ) / 2 );
                 xSymbol->setPosition( awt::Point( nSymbolXPos, nSymbolYPos ) );
             }
 
             nCurrentYPos += aRowHeights[ nRow ];
             if( nRow+1 < nNumberOfRows )
                 nCurrentYPos += nYOffset;
             nMaxYPos = std::max( nMaxYPos, nCurrentYPos );
         }
         if( bSymbolsLeftSide )
         {
             nCurrentXPos += aColumnWidths[nColumn];
             if( nColumn+1 < nNumberOfColumns )
                 nCurrentXPos += nXOffset;
         }
         else
         {
             nCurrentXPos -= aColumnWidths[nColumn];
             if( nColumn+1 < nNumberOfColumns )
                 nCurrentXPos -= nXOffset;
         }
     }
 
     if( !bIsCustomSize )
     {
         if( bSymbolsLeftSide )
-            aResultingLegendSize.Width  = nCurrentXPos + nXPadding;
+            aResultingLegendSize.Width  = std::max( aResultingLegendSize.Width, nCurrentXPos + nXPadding );
         else
         {
             sal_Int32 nLegendWidth = -(nCurrentXPos-nXPadding);
-            aResultingLegendSize.Width  = nLegendWidth;
+            aResultingLegendSize.Width  = std::max( aResultingLegendSize.Width, nLegendWidth );
         }
-        aResultingLegendSize.Height = nMaxYPos + nYPadding;
+        aResultingLegendSize.Height = std::max( aResultingLegendSize.Height, nMaxYPos + nYPadding );
     }
 
     if( !bSymbolsLeftSide )
     {
         sal_Int32 nLegendWidth = aResultingLegendSize.Width;
         awt::Point aPos(0,0);
         for( sal_Int32 nEntry=0; nEntry<nNumberOfEntries; nEntry++ )
         {
             Reference< drawing::XShape > xSymbol( rEntries[ nEntry ].aSymbol );
             aPos = xSymbol->getPosition();
             aPos.X += nLegendWidth;
             xSymbol->setPosition( aPos );
             Reference< drawing::XShape > xText( aTextShapes[ nEntry ] );
             aPos = xText->getPosition();
             aPos.X += nLegendWidth;
             xText->setPosition( aPos );
         }
     }
 
     return aResultingLegendSize;
 }
 
 // #i109336# Improve auto positioning in chart
@@ -861,139 +866,142 @@ bool VLegend::isVisible( const Reference< XLegend > & xLegend )
 void VLegend::createShapes(
     const awt::Size & rAvailableSpace,
     const awt::Size & rPageSize )
 {
     if(! (m_xLegend.is() &&
           m_xShapeFactory.is() &&
           m_xTarget.is()))
         return;
 
     try
     {
         //create shape and add to page
         AbstractShapeFactory* pShapeFactory = AbstractShapeFactory::getOrCreateShapeFactory(m_xShapeFactory);
         OUString aLegendParticle( ObjectIdentifier::createParticleForLegend( m_xLegend, mrModel ) );
         m_xShape.set( pShapeFactory->createGroup2D( m_xTarget,
                     ObjectIdentifier::createClassifiedIdentifierForParticle( aLegendParticle )),
                 uno::UNO_QUERY);
 
         // create and insert sub-shapes
         Reference< drawing::XShapes > xLegendContainer( m_xShape, uno::UNO_QUERY );
         if( xLegendContainer.is())
         {
             // for quickly setting properties
             tPropertyValues aLineFillProperties;
             tPropertyValues aTextProperties;
 
             Reference< beans::XPropertySet > xLegendProp( m_xLegend, uno::UNO_QUERY );
             css::chart::ChartLegendExpansion eExpansion = css::chart::ChartLegendExpansion_HIGH;
             awt::Size aLegendSize( rAvailableSpace );
 
             bool bCustom = false;
             LegendPosition eLegendPosition = LegendPosition_CUSTOM;
             if (xLegendProp.is())
             {
                 // get Expansion property
                 xLegendProp->getPropertyValue("Expansion") >>= eExpansion;
                 if( eExpansion == css::chart::ChartLegendExpansion_CUSTOM )
                 {
                     RelativeSize aRelativeSize;
                     if (xLegendProp->getPropertyValue("RelativeSize") >>= aRelativeSize)
                     {
                         aLegendSize.Width = static_cast<sal_Int32>(::rtl::math::approxCeil( aRelativeSize.Primary * rPageSize.Width ));
                         aLegendSize.Height = static_cast<sal_Int32>(::rtl::math::approxCeil( aRelativeSize.Secondary * rPageSize.Height ));
                         bCustom = true;
                     }
                     else
                     {
                         eExpansion = css::chart::ChartLegendExpansion_HIGH;
                     }
                 }
                 xLegendProp->getPropertyValue("AnchorPosition") >>= eLegendPosition;
                 lcl_getProperties( xLegendProp, aLineFillProperties, aTextProperties, rPageSize );
             }
 
             // create entries
             double fViewFontSize = lcl_CalcViewFontSize( xLegendProp, rPageSize );//todo
             // #i109336# Improve auto positioning in chart
             sal_Int32 nSymbolHeight = static_cast< sal_Int32 >( fViewFontSize * 0.6  );
             sal_Int32 nSymbolWidth = nSymbolHeight;
 
             for (LegendEntryProvider* pLegendEntryProvider : m_aLegendEntryProviderList)
             {
                 if (pLegendEntryProvider)
                 {
                     awt::Size aCurrentRatio = pLegendEntryProvider->getPreferredLegendKeyAspectRatio();
                     sal_Int32 nCurrentWidth = aCurrentRatio.Width;
                     if( aCurrentRatio.Height > 0 )
                     {
                         nCurrentWidth = nSymbolHeight* aCurrentRatio.Width/aCurrentRatio.Height;
                     }
                     nSymbolWidth = std::max( nSymbolWidth, nCurrentWidth );
                 }
             }
             awt::Size aMaxSymbolExtent( nSymbolWidth, nSymbolHeight );
 
             std::vector<ViewLegendEntry> aViewEntries;
             for(LegendEntryProvider* pLegendEntryProvider : m_aLegendEntryProviderList)
             {
                 if (pLegendEntryProvider)
                 {
                     std::vector<ViewLegendEntry> aNewEntries = pLegendEntryProvider->createLegendEntries(
                                                                     aMaxSymbolExtent, eExpansion, xLegendProp,
                                                                     xLegendContainer, m_xShapeFactory, m_xContext);
                     aViewEntries.insert( aViewEntries.end(), aNewEntries.begin(), aNewEntries.end() );
                 }
             }
 
             bool bSymbolsLeftSide = lcl_shouldSymbolsBePlacedOnTheLeftSide( xLegendProp, m_nDefaultWritingMode );
 
-            if (!aViewEntries.empty())
+            uno::Reference<chart2::data::XPivotTableDataProvider> xPivotTableDataProvider( mrModel.getDataProvider(), uno::UNO_QUERY );
+            bool bIsPivotChart = xPivotTableDataProvider.is();
+
+            if ( !aViewEntries.empty() || bIsPivotChart )
             {
                 // create buttons
                 long nUsedButtonHeight = 0;
                 bool bPlaceButtonsVertically = (eLegendPosition != LegendPosition_PAGE_START &&
                                                 eLegendPosition != LegendPosition_PAGE_END &&
                                                 eExpansion != css::chart::ChartLegendExpansion_WIDE);
 
                 std::vector<std::shared_ptr<VButton>> aButtons;
                 aButtons = lcl_createButtons(xLegendContainer, m_xShapeFactory, mrModel, bPlaceButtonsVertically, nUsedButtonHeight);
 
                 // A custom size includes the size we used for buttons already, so we need to
                 // subtract that from the size that is available for the legend
                 if (bCustom)
                     aLegendSize.Height -= nUsedButtonHeight;
 
                 // place the legend entries
                 aLegendSize = lcl_placeLegendEntries(aViewEntries, eExpansion, bSymbolsLeftSide, fViewFontSize,
                                                      aMaxSymbolExtent, aTextProperties, xLegendContainer,
-                                                     m_xShapeFactory, aLegendSize, nUsedButtonHeight);
+                                                     m_xShapeFactory, aLegendSize, nUsedButtonHeight, rPageSize, bIsPivotChart);
 
                 uno::Reference<beans::XPropertySet> xModelPage(mrModel.getPageBackground());
 
                 for (std::shared_ptr<VButton> const & pButton : aButtons)
                 {
                     // adjust the width of the buttons if we place them vertically
                     if (bPlaceButtonsVertically)
                         pButton->setSize({aLegendSize.Width - 200, pButton->getSize().Height});
 
                     // create the buttons
                     pButton->createShapes(xModelPage);
                 }
             }
 
             Reference< drawing::XShape > xBorder =
                 pShapeFactory->createRectangle( xLegendContainer,
                         aLegendSize,
                         awt::Point(0,0),
                         aLineFillProperties.first,
                         aLineFillProperties.second, AbstractShapeFactory::Bottom );
 
             //because of this name this border will be used for marking the legend
             AbstractShapeFactory::setShapeName( xBorder, "MarkHandles" );
         }
     }
     catch( const uno::Exception & ex )
     {
         ASSERT_EXCEPTION( ex );
     }
 }
