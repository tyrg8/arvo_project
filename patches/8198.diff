commit 1dd73348e462d12d70f60e0fd8e20dda4b34ca65
Author: jrumbolt <spatialintellect@outlook.com>
Date:   Sat Apr 21 15:00:37 2018 -0400

    RDA: change extension to .dgrda to differentiate from R data (#469)

diff --git a/autotest/gdrivers/rda.py b/autotest/gdrivers/rda.py
index d8bd3bd62f..7e4d4a8142 100755
--- a/autotest/gdrivers/rda.py
+++ b/autotest/gdrivers/rda.py
@@ -371,348 +371,396 @@ def rda_error_metadata():
 def rda_graph_nominal():
 
     if gdaltest.rda_drv is None:
         return 'skip'
     if gdaltest.webserver_port == 0:
         return 'skip'
 
     handler = webserver.SequentialHandler()
     metadata_json = {"imageMetadata": {
         "imageId": "imageId",
         "profileName": "profileName",
         "nativeTileFileFormat": "TIF",
         "tileXOffset": 0,
         "tileYOffset": 0,
         "numXTiles": 2,
         "numYTiles": 2,
         "tileXSize": 256,
         "tileYSize": 256,
         "numBands": 3,
         "dataType": "BYTE",
         "imageHeight": 300,
         "imageWidth": 320,
         "minX": 2,
         "minY": 3,
         "maxX": 322,
         "maxY": 303,
         "minTileX": 0,
         "minTileY": 0,
         "maxTileX": 1,
         "maxTileY": 1,
         "colorInterpretation": "RGB",
         "acquisitionDate": "ACQUISITION_DATE",
         "sensorName": "SENSOR_NAME",
         "sensorPlatformName": "SENSOR_PLATFORM_NAME",
         "groundSampleDistanceMeters": 1.25,
         "cloudCover": 1.2,
         "sunAzimuth": 2.2,
         "sunElevation": 3.2,
         "satAzimuth": 4.2,
         "satElevation": 5.2
     }}
     handler.add('GET', '/rda_api/metadata/foo/bar/metadata.json', 200, {}, json.dumps(metadata_json))
 
     config_options = {
         'GBDX_AUTH_URL': '127.0.0.1:%d/auth_url' % gdaltest.webserver_port,
         'GBDX_RDA_API_URL': '127.0.0.1:%d/rda_api' % gdaltest.webserver_port,
         'GBDX_USERNAME': 'user_name',
         'GBDX_PASSWORD': 'password'
     }
     with webserver.install_http_handler(handler):
         with gdaltest.config_options(config_options):
             ds = gdal.Open('{"graph-id":"foo","node-id":"bar","options":{"delete-on-close":false}}')
     if ds is None:
         gdaltest.post_reason('fail')
         return 'fail'
     if ds.RasterCount != 3:
         gdaltest.post_reason('fail')
         return 'fail'
     if ds.RasterXSize != 320:
         gdaltest.post_reason('fail')
         return 'fail'
     if ds.RasterYSize != 300:
         gdaltest.post_reason('fail')
         return 'fail'
     expected_md = {
         'SENSOR_NAME': 'SENSOR_NAME',
         'CLOUD_COVER': '1.2',
         'SUN_AZIMUTH': '2.2',
         'SAT_AZIMUTH': '4.2',
         'ACQUISITION_DATE': 'ACQUISITION_DATE',
         'SENSOR_PLATFORM_NAME': 'SENSOR_PLATFORM_NAME',
         'SUN_ELEVATION': '3.2',
         'GSD': '1.250 m',
         'SAT_ELEVATION': '5.2'
     }
     got_md = ds.GetMetadata()
     if got_md != expected_md:
         gdaltest.post_reason('fail')
         print(got_md)
         return 'fail'
     if ds.GetRasterBand(1).GetColorInterpretation() != gdal.GCI_RedBand:
         gdaltest.post_reason('fail')
         return 'fail'
 
     if ds.GetProjectionRef() != '':
         gdaltest.post_reason('fail')
         return 'fail'
 
     ds = None
 
+    # File open
+    with webserver.install_http_handler(handler):
+        with gdaltest.config_options(config_options):
+            with open('tmp/rda_test1.dgrda', "w") as fd:
+                fd.write('{"graph-id":"foo","node-id":"bar","options":{"delete-on-close":false}}')
+            ds = gdal.Open('tmp/rda_test1.dgrda')
+    if ds is None:
+        gdaltest.post_reason('fail')
+        return 'fail'
+    if ds.RasterCount != 3:
+        gdaltest.post_reason('fail')
+        return 'fail'
+    if ds.RasterXSize != 320:
+        gdaltest.post_reason('fail')
+        return 'fail'
+    if ds.RasterYSize != 300:
+        gdaltest.post_reason('fail')
+        return 'fail'
+    expected_md = {
+        'SENSOR_NAME': 'SENSOR_NAME',
+        'CLOUD_COVER': '1.2',
+        'SUN_AZIMUTH': '2.2',
+        'SAT_AZIMUTH': '4.2',
+        'ACQUISITION_DATE': 'ACQUISITION_DATE',
+        'SENSOR_PLATFORM_NAME': 'SENSOR_PLATFORM_NAME',
+        'SUN_ELEVATION': '3.2',
+        'GSD': '1.250 m',
+        'SAT_ELEVATION': '5.2'
+    }
+    got_md = ds.GetMetadata()
+    if got_md != expected_md:
+        gdaltest.post_reason('fail')
+        print(got_md)
+        return 'fail'
+    if ds.GetRasterBand(1).GetColorInterpretation() != gdal.GCI_RedBand:
+        gdaltest.post_reason('fail')
+        return 'fail'
+
+    if ds.GetProjectionRef() != '':
+        gdaltest.post_reason('fail')
+        return 'fail'
+
+    try:
+        os.remove('tmp/rda_test1.dgrda')
+    except OSError:
+        pass
+
+    ds = None
     # Retry without any network setup to test caching
     with gdaltest.config_options(config_options):
         ds = gdal.Open('{"graph-id":"foo","node-id":"bar","options":{"delete-on-close":false}}')
     if ds is None:
         gdaltest.post_reason('fail')
         return 'fail'
     if ds.RasterCount != 3:
         gdaltest.post_reason('fail')
         return 'fail'
 
     gdal.RmdirRecursive('/vsimem/cache_dir')
 
     metadata_json["imageGeoreferencing"] = {"spatialReferenceSystemCode": "EPSG:32631", "scaleX": 1.0, "scaleY": 2.0,
                                             "translateX": 123.0, "translateY": 456.0, "shearX": 0.0, "shearY": 0.0}
 
     handler = webserver.SequentialHandler()
     handler.add('POST', '/auth_url', 200, {}, '{"access_token": "token", "expires_in": 3600}')
     handler.add('GET', '/rda_api/metadata/foo/bar/metadata.json', 200, {}, json.dumps(metadata_json))
     with webserver.install_http_handler(handler):
         with gdaltest.config_options(config_options):
             ds = gdal.Open('{"graph-id":"foo","node-id":"bar","options":{"delete-on-close":false}}')
         if ds is None:
             gdaltest.post_reason('fail')
             return 'fail'
         if ds.GetProjectionRef().find('32631') < 0:
             gdaltest.post_reason('fail')
             return 'fail'
 
     got_gt = ds.GetGeoTransform()
     if got_gt != (125.0, 1.0, 0.0, 462.0, 0.0, 2.0):
         gdaltest.post_reason('fail')
         print(got_gt)
         return 'fail'
 
     ds = None
 
     # Retry without any network setup to test caching
     with gdaltest.config_options(config_options):
         ds = gdal.Open('{"graph-id":"foo","node-id":"bar","options":{"delete-on-close":false}}')
     got_gt = ds.GetGeoTransform()
     if got_gt != (125.0, 1.0, 0.0, 462.0, 0.0, 2.0):
         gdaltest.post_reason('fail')
         print(got_gt)
         return 'fail'
 
     gdal.RmdirRecursive('/vsimem/cache_dir')
 
     # RPC should be ignored since there is a valid geotransform
     metadata_json["rpcSensorModel"] = {"spatialReferenceSystem": "EPSG:4326", "upperLeftCorner": {"x": 2.07724378, "y": 48.84065078}, "upperRightCorner": {"x": 2.31489579, "y": 48.84057427}, "lowerRightCorner": {"x": 2.31360304, "y": 48.69084146}, "lowerLeftCorner": {"x": 2.07783336, "y": 48.69170554}, "gsd": 5.641394178943586E-6, "postScaleFactorX": 1.0, "postScaleFactorY": 1.0, "lineOffset": 13313.0, "sampleOffset": 13775.0, "latOffset": 48.7657, "lonOffset": 2.1959, "heightOffset": 151.0, "lineScale": 13314.0, "sampleScale": 13776.0, "latScale": 0.075, "lonScale": 0.1203, "heightScale": 500.0, "lineNumCoefs": [0.003462388, -0.003319885, -1.004173, -5.694582E-4, 0.00138283, 1.973615E-6, 3.606842E-4, -8.287262E-4, -0.001348337, 3.399036E-7, -1.431479E-6, 1.058794E-6, 2.705906E-5, -9.732266E-8, -2.988015E-5, -1.20553E-4, -2.956054E-5, 2.817489E-7, 0.0, -1.663039E-8], "lineDenCoefs": [1.0, 0.001393466, 0.002175939, 3.615903E-4, 1.188453E-5, -5.55041E-7, -2.20758E-6, 1.688344E-5, -6.33621E-5, 2.911688E-5, -2.333141E-8, 1.367653E-7, 1.006995E-6, 8.290656E-8, -7.302754E-7, -1.959288E-4, 2.555922E-8, 2.074273E-8, 6.766787E-7, 2.106776E-8], "sampleNumCoefs": [-0.003627584, 1.015469, -0.001694738, -0.0107359, -0.001958667, 5.325142E-4, -4.003552E-4, 0.003666871, 2.035126E-4, -5.427884E-6, -1.176796E-6, -1.536131E-5, -6.907792E-5, -1.670626E-5, 7.908289E-5, -4.442762E-6, 1.143467E-7, 3.322555E-6, 8.624531E-7, 1.741671E-7], "sampleDenCoefs": [1.0, -3.707032E-5, 0.001978281, -5.804113E-4, -4.497994E-5, -2.659572E-6, 9.73096E-7, -1.250655E-5, 4.714011E-5, -1.697617E-5, -6.041848E-8, 0.0, 2.173017E-7, 5.608078E-8, -2.660194E-7, -2.020556E-7, -6.347383E-8, 1.321956E-8, -8.626535E-8, 1.908747E-8]}
     handler = webserver.SequentialHandler()
     handler.add('POST', '/auth_url', 200, {}, '{"access_token": "token", "expires_in": 3600}')
     handler.add('GET', '/rda_api/metadata/foo/bar/metadata.json', 200, {}, json.dumps(metadata_json))
 
     with webserver.install_http_handler(handler):
         with gdaltest.config_options(config_options):
             ds = gdal.Open('{"graph-id":"foo","node-id":"bar","options":{"delete-on-close":false}}')
         if ds is None:
             gdaltest.post_reason('fail')
             return 'fail'
         if ds.GetMetadata('RPC') != {}:
             gdaltest.post_reason('fail')
             return 'fail'
 
     gdal.RmdirRecursive('/vsimem/cache_dir')
 
     # RPC should be ignored regardless if the profile is georectified_image
     temp_metadata = json.loads(json.dumps(metadata_json))
     del temp_metadata["imageGeoreferencing"]
     temp_metadata["imageMetadata"]["profileName"] = "georectified_image"
     handler = webserver.SequentialHandler()
     handler.add('POST', '/auth_url', 200, {}, '{"access_token": "token", "expires_in": 3600}')
     handler.add('GET', '/rda_api/metadata/foo/bar/metadata.json', 200, {}, json.dumps(temp_metadata))
 
     with webserver.install_http_handler(handler):
         with gdaltest.config_options(config_options):
             ds = gdal.Open('{"graph-id":"foo","node-id":"bar","options":{"delete-on-close":false}}')
         if ds is None:
             gdaltest.post_reason('fail')
             return 'fail'
         if ds.GetMetadata('RPC') != {}:
             gdaltest.post_reason('fail')
             return 'fail'
 
     tile_ds = gdal.GetDriverByName('GTiff').Create('/vsimem/tile_00.tif', 256, 256, 3)
     tile_ds.GetRasterBand(1).Fill(255)
     tile_ds.GetRasterBand(2).Fill(250)
     tile_ds.GetRasterBand(3).Fill(245)
     tile_ds = None
     f = gdal.VSIFOpenL('/vsimem/tile_00.tif', 'rb')
     tile00_data = gdal.VSIFReadL(1, 10000 + 256 * 256 * 3, f)
     gdal.VSIFCloseL(f)
     gdal.Unlink('/vsimem/tile_00.tif')
 
     tile_ds = gdal.GetDriverByName('GTiff').Create('/vsimem/tile_01.tif', 256, 256, 3)
     tile_ds.GetRasterBand(1).Fill(240)
     tile_ds.GetRasterBand(2).Fill(235)
     tile_ds.GetRasterBand(3).Fill(230)
     tile_ds = None
     f = gdal.VSIFOpenL('/vsimem/tile_01.tif', 'rb')
     tile01_data = gdal.VSIFReadL(1, 10000 + 256 * 256 * 3, f)
     gdal.VSIFCloseL(f)
     gdal.Unlink('/vsimem/tile_01.tif')
 
     tile_ds = gdal.GetDriverByName('GTiff').Create('/vsimem/tile_10.tif', 256, 256, 3)
     tile_ds.GetRasterBand(1).Fill(225)
     tile_ds.GetRasterBand(2).Fill(220)
     tile_ds.GetRasterBand(3).Fill(215)
     tile_ds = None
     f = gdal.VSIFOpenL('/vsimem/tile_10.tif', 'rb')
     tile10_data = gdal.VSIFReadL(1, 10000 + 256 * 256 * 3, f)
     gdal.VSIFCloseL(f)
     gdal.Unlink('/vsimem/tile_10.tif')
 
     tile_ds = gdal.GetDriverByName('GTiff').Create('/vsimem/tile_11.tif', 256, 256, 3)
     tile_ds.GetRasterBand(1).Fill(210)
     tile_ds.GetRasterBand(2).Fill(205)
     tile_ds.GetRasterBand(3).Fill(200)
     tile_ds = None
     f = gdal.VSIFOpenL('/vsimem/tile_11.tif', 'rb')
     tile11_data = gdal.VSIFReadL(1, 10000 + 256 * 256 * 3, f)
     gdal.VSIFCloseL(f)
     gdal.Unlink('/vsimem/tile_11.tif')
 
     handler = webserver.SequentialHandler()
     handler.add('GET', '/rda_api/tile/foo/bar/0/0.tif', 200, {}, tile00_data)
     handler.add('GET', '/rda_api/tile/foo/bar/1/0.tif', 200, {}, tile01_data)
     handler.add('GET', '/rda_api/tile/foo/bar/0/1.tif', 200, {}, tile10_data)
     handler.add('GET', '/rda_api/tile/foo/bar/1/1.tif', 200, {}, tile11_data)
     with webserver.install_http_handler(handler):
         cs = [ds.GetRasterBand(i + 1).Checksum() for i in range(3)]
     if cs != [54287, 50451, 21110]:
         gdaltest.post_reason('fail')
         print(cs)
         return 'fail'
 
     # Retry without any network setup to test caching
     with gdaltest.config_options(config_options):
         ds = gdal.Open('{"graph-id":"foo","node-id":"bar","options":{"delete-on-close":false}}')
     cs = [ds.GetRasterBand(i + 1).Checksum() for i in range(3)]
     if cs != [54287, 50451, 21110]:
         gdaltest.post_reason('fail')
         print(cs)
         return 'fail'
 
     data = struct.unpack('B' * (320 * 300 * 3), ds.ReadRaster())
     if data[0] != 255:
         gdaltest.post_reason('fail')
         return 'fail'
 
     if data[0 + 320 * 300] != 250:
         gdaltest.post_reason('fail')
         return 'fail'
 
     if data[0 + 320 * 300 * 2] != 245:
         gdaltest.post_reason('fail')
         return 'fail'
 
     if data[319] != 240:
         gdaltest.post_reason('fail')
         return 'fail'
 
     if data[320 * 299] != 225:
         gdaltest.post_reason('fail')
         return 'fail'
 
     if data[320 * 299 + 319] != 210:
         gdaltest.post_reason('fail')
         return 'fail'
 
     ds = None
 
     gdal.RmdirRecursive('/vsimem/cache_dir')
 
     # Test Dataset::AdviseRead
     handler = webserver.SequentialHandler()
     handler.add('POST', '/auth_url', 200, {}, '{"access_token": "token", "expires_in": 3600}')
     handler.add('GET', '/rda_api/metadata/foo/bar/metadata.json', 200, {}, json.dumps(metadata_json))
     handler.add('GET', '/rda_api/tile/foo/bar/0/0.tif', 200, {}, tile00_data)
     handler.add('GET', '/rda_api/tile/foo/bar/1/0.tif', 200, {}, tile01_data)
     handler.add('GET', '/rda_api/tile/foo/bar/0/1.tif', 200, {}, tile10_data)
     handler.add('GET', '/rda_api/tile/foo/bar/1/1.tif', 200, {}, tile11_data)
     with webserver.install_http_handler(handler):
         with gdaltest.config_options(config_options):
             ds = gdal.Open('{"graph-id":"foo","node-id":"bar","options":{"delete-on-close":false}}')
         ds.AdviseRead(0, 0, 320, 300)
         ds.ReadRaster(0, 0, 1, 1)
     ds = None
 
     gdal.RmdirRecursive('/vsimem/cache_dir')
 
     # Test RasterBand::AdviseRead
     handler = webserver.SequentialHandler()
     handler.add('POST', '/auth_url', 200, {}, '{"access_token": "token", "expires_in": 3600}')
     handler.add('GET', '/rda_api/metadata/foo/bar/metadata.json', 200, {}, json.dumps(metadata_json))
     handler.add('GET', '/rda_api/tile/foo/bar/0/0.tif', 200, {}, tile00_data)
     handler.add('GET', '/rda_api/tile/foo/bar/1/0.tif', 200, {}, tile01_data)
     handler.add('GET', '/rda_api/tile/foo/bar/0/1.tif', 200, {}, tile10_data)
     handler.add('GET', '/rda_api/tile/foo/bar/1/1.tif', 200, {}, tile11_data)
     with webserver.install_http_handler(handler):
         with gdaltest.config_options(config_options):
             ds = gdal.Open('{"graph-id":"foo","node-id":"bar","options":{"delete-on-close":false}}')
         ds.GetRasterBand(1).AdviseRead(0, 0, 320, 300)
         ds.GetRasterBand(1).ReadRaster(0, 0, 1, 1)
     ds = None
 
     gdal.RmdirRecursive('/vsimem/cache_dir')
 
     # Test ReadBlock directly
     handler = webserver.SequentialHandler()
     handler.add('POST', '/auth_url', 200, {}, '{"access_token": "token", "expires_in": 3600}')
     handler.add('GET', '/rda_api/metadata/foo/bar/metadata.json', 200, {}, json.dumps(metadata_json))
     handler.add('GET', '/rda_api/tile/foo/bar/0/0.tif', 200, {}, tile00_data)
     handler.add('GET', '/rda_api/tile/foo/bar/1/0.tif', 200, {}, tile01_data)
     handler.add('GET', '/rda_api/tile/foo/bar/0/1.tif', 200, {}, tile10_data)
     handler.add('GET', '/rda_api/tile/foo/bar/1/1.tif', 200, {}, tile11_data)
     with webserver.install_http_handler(handler):
         with gdaltest.config_options(config_options):
             ds = gdal.Open('{"graph-id":"foo","node-id":"bar","options":{"delete-on-close":false}}')
         data = ds.GetRasterBand(1).ReadBlock(0, 0)
 
     data = struct.unpack('B' * (256 * 256), data)
     if data[0] != 255:
         gdaltest.post_reason('fail')
         return 'fail'
     if data[256 * (256 - 2)] != 225:
         gdaltest.post_reason('fail')
         return 'fail'
 
     # Try IReadBlock() when data for other bands is already cached
     ds.GetRasterBand(1).FlushCache()
     data = ds.GetRasterBand(1).ReadBlock(0, 0)
     data = struct.unpack('B' * (256 * 256), data)
     if data[0] != 255:
         gdaltest.post_reason('fail')
         return 'fail'
 
     gdal.RmdirRecursive('/vsimem/cache_dir')
 
     # Test 502
     handler = webserver.SequentialHandler()
     handler.add('POST', '/auth_url', 200, {}, '{"access_token": "token", "expires_in": 3600}')
     handler.add('GET', '/rda_api/metadata/foo/bar/metadata.json', 200, {}, json.dumps(metadata_json))
     handler.add('GET', '/rda_api/tile/foo/bar/0/0.tif', 502, {}, json.dumps({"Error": "502"}))
 
     with webserver.install_http_handler(handler):
         with gdaltest.config_options(config_options):
             ds = gdal.Open('{"graph-id":"foo","node-id":"bar","options":{"delete-on-close":false}}')
             with gdaltest.error_handler():
                 data = ds.GetRasterBand(1).ReadBlock(0, 0)
                 if data is not None:
                     gdaltest.post_reason('fail')
                     return 'fail'
 
     gdal.RmdirRecursive('/vsimem/cache_dir')
 
     return 'success'
 
 ###############################################################################
diff --git a/gdal/frmts/rda/rdadataset.cpp b/gdal/frmts/rda/rdadataset.cpp
index f7dcfa9e99..eeea24f829 100644
--- a/gdal/frmts/rda/rdadataset.cpp
+++ b/gdal/frmts/rda/rdadataset.cpp
@@ -342,32 +342,32 @@ void GDALRDADataset::CacheFile( const CPLString& osCachedFilename,
 int GDALRDADataset::Identify( GDALOpenInfo* poOpenInfo )
 {
     bool retval = false;
     // if connection string is JSON
     if((strstr(poOpenInfo->pszFilename, "graph-id") != nullptr &&
         strstr(poOpenInfo->pszFilename, "node-id") != nullptr) ||
        strstr(poOpenInfo->pszFilename, "template-id") != nullptr)
     {
         retval = true;
     }
     else if( poOpenInfo->fpL != nullptr )
     {
-        if (EQUAL(CPLGetExtension(poOpenInfo->pszFilename), "RDA"))
+        if (EQUAL(CPLGetExtension(poOpenInfo->pszFilename), "DGRDA"))
         {
             const char* pszHeader = reinterpret_cast<const char*>(
                 poOpenInfo->pabyHeader);
             if( pszHeader != nullptr && STARTS_WITH_CI(pszHeader, "{") &&
                 (strstr(pszHeader,"graph-id") != nullptr ||
                  strstr(pszHeader,"template-id") != nullptr))
             {
                 retval = true;
             }
         }
     }
 
     return retval;
 
 }
 
 /************************************************************************/
 /*                           ReadConfiguration()                        */
 /************************************************************************/
@@ -607,137 +607,137 @@ bool GDALRDADataset::ParseAuthorizationResponse(const CPLString& osAuth)
 bool GDALRDADataset::ParseConnectionString( GDALOpenInfo* poOpenInfo )
 {
     CPLString osConnectionString;
-    if(EQUAL(CPLGetExtension(poOpenInfo->pszFilename), "RDA"))
+    if(EQUAL(CPLGetExtension(poOpenInfo->pszFilename), "DGRDA"))
     {
         CSLUniquePtr papszContent(CSLLoad2( poOpenInfo->pszFilename,
                                             -1, -1, nullptr));
         char** papszIter = papszContent.get();
         if(papszIter != nullptr)
             osConnectionString = *(papszIter);
     }
     else
     {
         osConnectionString = poOpenInfo->pszFilename;
     }
     json_object* poObj = nullptr;
     if( !OGRJSonParse(osConnectionString, &poObj, true) )
     {
         CPLError(CE_Failure, CPLE_AppDefined,
                  "Invalid JSon document as dataset name");
         return false;
     }
     JsonObjectUniquePtr oObj(poObj);
 
     json_object* poGraphId =
         CPL_json_object_object_get(poObj, "graph-id");
 
     if( poGraphId != nullptr &&
          json_object_get_type(poGraphId) == json_type_string)
     {
         m_osType = RDADatasetType::GRAPH;
         m_osGraphId = json_object_get_string(poGraphId);
     }
 
 
 
     json_object* poTemplateId =
             CPL_json_object_object_get(poObj, "template-id");
 
     if( poTemplateId != nullptr &&
         json_object_get_type(poTemplateId) == json_type_string)
     {
         m_osType = RDADatasetType::TEMPLATE;
         m_osTemplateId = json_object_get_string(poTemplateId);
     }
 
     if(m_osType == RDADatasetType::UNDEFINED)
     {
         CPLError(CE_Failure, CPLE_AppDefined,
                  "Missing graph-id or template-id");
         return false;
     }
 
 
     json_object* poNodeId =
         CPL_json_object_object_get(poObj, "node-id");
     if( (poNodeId == nullptr ||
          json_object_get_type(poNodeId) != json_type_string) &&
         m_osType == RDADatasetType::GRAPH )
     {
         CPLError(CE_Failure, CPLE_AppDefined,
                  "Missing node-id");
         return false;
     }
 
     m_osNodeId = (poNodeId != nullptr &&
                   json_object_get_type(poNodeId) == json_type_string)
                  ?  json_object_get_string(poNodeId) :"";
 
     json_object* poDeleteOnClose = json_ex_get_object_by_path(poObj,
                                                 "options.delete-on-close");
     if( poDeleteOnClose &&
         json_object_get_type(poDeleteOnClose) == json_type_boolean )
     {
         m_bDeleteOnClose = CPL_TO_BOOL(
             json_object_get_boolean(poDeleteOnClose));
     }
 
     json_object* poMaxConnections = json_ex_get_object_by_path(poObj,
                                                     "options.max-connections");
     if( poMaxConnections &&
         json_object_get_type(poMaxConnections) == json_type_int )
     {
         MaxCurlConnectionsSet(json_object_get_int(poMaxConnections));
     }
 
     json_object* poEnforceAdviseRead = json_ex_get_object_by_path(poObj,
                                                         "options.advise-read");
     if( poEnforceAdviseRead &&
         json_object_get_type(poEnforceAdviseRead) == json_type_boolean )
     {
         m_bAdviseRead = CPL_TO_BOOL(
                 json_object_get_boolean(poEnforceAdviseRead));
     }
 
     if(m_osType == RDADatasetType::TEMPLATE)
     {
         json_object *poParams = CPL_json_object_object_get(poObj, "params");
 
         if(poParams != nullptr) {
             array_list *res = json_object_get_array(poParams);
             if(res != nullptr) {
                 for (decltype(res->length) i = 0; i < res->length; i++) {
                     json_object *ds = (json_object *) array_list_get_idx(res, i);
                     if (ds != nullptr) {
                         json_object_iter it;
                         it.key = nullptr;
                         it.val = nullptr;
                         it.entry = nullptr;
                         json_object_object_foreachC( ds, it )
                         {
                             if(it.key != nullptr && it.val != nullptr)
                             {
                                 CPLString tkey = it.key;
                                 const char* tval =
                                     json_object_get_string(it.val);
                                 if(tval != nullptr)
                                 {
                                     m_osParams.push_back(std::make_tuple(tkey,
                                                             CPLString(tval)));
                                 }
                             }
 
                         }
                     }
                 }
             }
         }
 
     }
 
     return true;
 }
 
 /************************************************************************/
 /*                             GetHTTPOptions()                         */
 /************************************************************************/
@@ -2125,27 +2125,28 @@ CPLErr GDALRDARasterBand::IReadBlock( int nBlockXOff, int nBlockYOff,
 void GDALRegister_RDA()
 
 {
     if( GDALGetDriverByName( "RDA" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "RDA" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "DigitalGlobe Raster Data Access driver" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
                                "frmt_rda.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "dgrda" );
 
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "  <Option name='MAXCONNECT' type='int' min='1' max='256' "
                         "description='Maximum number of connections'/>"
 "</OpenOptionList>" );
 
     poDriver->pfnIdentify = GDALRDADataset::Identify;
     poDriver->pfnOpen = GDALRDADataset::OpenStatic;
     poDriver->pfnUnloadDriver = GDALRDADriverUnload;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
