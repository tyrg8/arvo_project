commit 1c0e617d802d214b0186f2752b50b8ee2a9e17a6
Author: Luca Deri <deri@ntop.org>
Date:   Thu Sep 10 19:58:31 2020 +0200

    Added buffer check in DGA analysis

diff --git a/src/lib/ndpi_main.c b/src/lib/ndpi_main.c
index 9fcab8cf..13c6ca4a 100644
--- a/src/lib/ndpi_main.c
+++ b/src/lib/ndpi_main.c
@@ -6666,197 +6666,205 @@ static int enough(int a, int b) {
 int ndpi_check_dga_name(struct ndpi_detection_module_struct *ndpi_str,
 			struct ndpi_flow_struct *flow,
 			char *name, u_int8_t is_hostname) {
   int len, rc = 0;
   u_int8_t max_num_char_repetitions = 0, last_char = 0, num_char_repetitions = 0, num_dots = 0;
   u_int8_t max_domain_element_len = 0, curr_domain_element_len = 0, first_element_is_numeric = 1;
 
+  if(!name) return(0);
+
+#ifdef DGA_DEBUG
+  printf("[DGA] %s\n", name);
+#endif
+  
   len = strlen(name);
 
   if(len >= 5) {
     int i, j, num_found = 0, num_impossible = 0, num_bigram_checks = 0, num_digits = 0, num_vowels = 0, num_words = 0;
     char tmp[128], *word, *tok_tmp;
-
-    len = snprintf(tmp, sizeof(tmp)-1, "%s", name);
+    u_int max_tmp_len = sizeof(tmp)-1;
+  
+    len = snprintf(tmp, max_tmp_len, "%s", name);
     if(len < 0) {
 #ifdef DGA_DEBUG
       printf("[DGA] Too short");
 #endif
       return(0);
-    }
+    } else
+      tmp[len < max_tmp_len ? len : max_tmp_len] = '\0';
 
-    for(i=0, j=0; (i<len) && (j<(sizeof(tmp)-1)); i++) {
+    for(i=0, j=0; (i<len) && (j<max_tmp_len); i++) {
       tmp[j] = tolower(name[i]);
 
       if(tmp[j] == '.')
 	num_dots++;
       else if(num_dots == 0) {
 	if(!isdigit(tmp[j]))
 	  first_element_is_numeric = 0;
       }
 	
       if(last_char == tmp[j]) {
 	if(++num_char_repetitions > max_num_char_repetitions)
 	  max_num_char_repetitions = num_char_repetitions;
       } else
 	num_char_repetitions = 1, last_char = tmp[j];
 
       switch(tmp[j]) {
       case '.':
       case '-':
       case '_':
       case '/':
       case ')':
       case '(':
       case ';':
       case ':':
       case '[':
       case ']':
       case ' ':
 	/*
 	  Domain/word separator chars
 
 	  NOTE:
 	  this function is used also to detect other type of issues
 	  such as invalid/suspiciuous user agent
 	*/
 	if(curr_domain_element_len > max_domain_element_len)
 	  max_domain_element_len = curr_domain_element_len;
 
 	curr_domain_element_len = 0;
 	break;
 
       default:
 	curr_domain_element_len++;
 	break;
       }
 
       j++;
     }
 
     if(curr_domain_element_len > max_domain_element_len)
       max_domain_element_len = curr_domain_element_len;
 
 #ifdef DGA_DEBUG
     printf("[DGA] [max_num_char_repetitions: %u][max_domain_element_len: %u]\n",
 	   max_num_char_repetitions, max_domain_element_len);
 #endif
 
     if(
        (is_hostname
 	&& (num_dots > 5)
 	&& (!first_element_is_numeric)
 	&& (strstr(tmp, "in-addr.arpa") == NULL)
 	)
        || (max_num_char_repetitions > 5 /* num or consecutive repeated chars */)
        /*
 	 In case of a name with too many consecutive chars an alert is triggered
 	 This is the case for instance of the wildcard DNS query used by NetBIOS
 	 (ckaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa) and that can be exploited
 	 for reflection attacks
 	 - https://www.akamai.com/uk/en/multimedia/documents/state-of-the-internet/ddos-reflection-netbios-name-server-rpc-portmap-sentinel-udp-threat-advisory.pdf
 	 - http://ubiqx.org/cifs/NetBIOS.html
        */
        || (max_domain_element_len >= 19 /* word too long. Example bbcbedxhgjmdobdprmen.com */)
        ) {
       if(flow) NDPI_SET_BIT(flow->risk, NDPI_SUSPICIOUS_DGA_DOMAIN);
 #ifdef DGA_DEBUG
       printf("[DGA] Found!");
 #endif
       return(1);
     }
 
     tmp[j] = '\0';
     len = j;
 
     for(word = strtok_r(tmp, ".", &tok_tmp); ; word = strtok_r(NULL, ".", &tok_tmp)) {
       if(!word) break;
 
       num_words++;
 
       if(strlen(word) < 3) continue;
 
 #ifdef DGA_DEBUG
       printf("-> %s [%s][len: %u]\n", word, name, (unsigned int)strlen(word));
 #endif
 
       for(i = 0; word[i+1] != '\0'; i++) {
 	if(isdigit(word[i])) {
 	  num_digits++;
 
 	  // if(!isdigit(word[i+1])) num_impossible++;
 
 	  continue;
 	}
 
 	switch(word[i]) {
 	case '_':
 	case '-':
 	case ':':
 	  continue;
 	  break;
 
 	case '.':
 	  continue;
 	  break;
 	}
 
 	switch(word[i]) {
 	case 'a':
 	case 'e':
 	case 'i':
 	case 'o':
 	case 'u':
 	  num_vowels++;
 	  break;
 	}
 
 	if(isdigit(word[i+1])) {
 	  num_digits++;
 	  // num_impossible++;
 	  continue;
 	}
 
 	num_bigram_checks++;
 
 #ifdef DGA_DEBUG
 	printf("-> Checking %c%c\n", word[i], word[i+1]);
 #endif
 
 	if(ndpi_match_bigram(ndpi_str,
 			     &ndpi_str->impossible_bigrams_automa,
 			     &word[i])) {
 #ifdef DGA_DEBUG
 	  printf("IMPOSSIBLE %s\n", &word[i]);
 #endif
 	  num_impossible++;
 	} else if(ndpi_match_bigram(ndpi_str, &ndpi_str->bigrams_automa, &word[i])) {
 	  num_found++;
 	}
       } /* for */
     } /* for */
 
 #ifdef DGA_DEBUG
     printf("[num_found: %u][num_impossible: %u][num_digits: %u][num_bigram_checks: %u][num_vowels: %u/%u]\n",
 	   num_found, num_impossible, num_digits, num_bigram_checks, num_vowels, j-num_vowels);
 #endif
 
     if(num_bigram_checks
        && ((num_found == 0) || ((num_digits > 5) && (num_words <= 3)) || enough(num_found, num_impossible)))
       rc = 1;
 
     if(rc && flow)
       NDPI_SET_BIT(flow->risk, NDPI_SUSPICIOUS_DGA_DOMAIN);
 
 #ifdef DGA_DEBUG
     if(rc)
       printf("DGA %s [num_found: %u][num_impossible: %u]\n",
 	     name, num_found, num_impossible);
 #endif
   }
 
 #ifdef DGA_DEBUG
   printf("[DGA] Result: %u", rc);
 #endif
 
   return(rc);
 }
