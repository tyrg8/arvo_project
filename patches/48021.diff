commit 8a049e9dfc1ab266e6f662195949ac5a060cdea9
Author: John Cupitt <jcupitt@gmail.com>
Date:   Sun Jul 10 19:32:14 2022 +0100

    fix RGBA_ONLY with generic mono
    
    1. Convert MULTIBAND uint/short/etc. as we convert uint8 images. They
       are probably just uint8 that have been cast up in format.
    
    2. Don't check that the image interpretation is a supported colourspace
       before calling vips_colourspace() ... we want to fail with an error
       if it can't be converted, not silently accept the image.

diff --git a/libvips/foreign/foreign.c b/libvips/foreign/foreign.c
index 7597131e3..1d35c9547 100644
--- a/libvips/foreign/foreign.c
+++ b/libvips/foreign/foreign.c
@@ -1326,377 +1326,376 @@ int
 vips__foreign_convert_saveable( VipsImage *in, VipsImage **ready,
 	VipsSaveable saveable, VipsBandFormat *format, VipsCoding *coding,
 	VipsArrayDouble *background )
 {
 	/* in holds a reference to the output of our chain as we build it.
 	 */
 	g_object_ref( in );
 
 	/* For coded images, can this class save the coding we are in now? 
 	 * Nothing to do.
 	 */
 	if( in->Coding != VIPS_CODING_NONE &&
 		coding[in->Coding] ) {
 		*ready = in;
 		return( 0 );
 	}
 
 	/* For uncoded images, if this saver supports ANY bands and this 
 	 * format we have nothing to do.
 	 */
 	if( in->Coding == VIPS_CODING_NONE &&
 	        saveable == VIPS_SAVEABLE_ANY &&
 		format[in->BandFmt] == in->BandFmt ) {
 		*ready = in;
 		return( 0 );
 	}
 
 	/* Otherwise ... we need to decode and then (possibly) recode at the
 	 * end.
 	 */
 
 	/* If this is an VIPS_CODING_LABQ, we can go straight to RGB.
 	 */
 	if( in->Coding == VIPS_CODING_LABQ ) {
 		VipsImage *out;
 
 		if( vips_LabQ2sRGB( in, &out, NULL ) ) {
 			g_object_unref( in );
 			return( -1 );
 		}
 		g_object_unref( in );
 
 		in = out;
 	}
 
 	/* If this is an VIPS_CODING_RAD, we unpack to float. This could be
 	 * scRGB or XYZ. 
 	 */
 	if( in->Coding == VIPS_CODING_RAD ) {
 		VipsImage *out;
 
 		if( vips_rad2float( in, &out, NULL ) ) {
 			g_object_unref( in );
 			return( -1 );
 		}
 		g_object_unref( in );
 
 		in = out;
 	}
 
 	/* If the saver supports RAD, we need to go to scRGB or XYZ. 
 	 */
 	if( coding[VIPS_CODING_RAD] ) {
 		if( in->Type != VIPS_INTERPRETATION_scRGB &&
 			in->Type != VIPS_INTERPRETATION_XYZ ) {
 			VipsImage *out;
 
 			if( vips_colourspace( in, &out, 
 				VIPS_INTERPRETATION_scRGB, NULL ) ) {
 				g_object_unref( in );
 				return( -1 );
 			}
 			g_object_unref( in );
 
 			in = out;
 		}
 	}
 
 	/* If this image is CMYK and the saver is RGB-only, use lcms to try to
 	 * import to XYZ. 
 	 */
 	if( in->Type == VIPS_INTERPRETATION_CMYK &&
 		in->Bands >= 4 &&
 		(saveable == VIPS_SAVEABLE_RGB ||
 		 saveable == VIPS_SAVEABLE_RGBA ||
 		 saveable == VIPS_SAVEABLE_RGBA_ONLY) ) { 
 		VipsImage *out;
 
 		if( vips_icc_import( in, &out, 
 			"pcs", VIPS_PCS_XYZ,
 			"embedded", TRUE,
 			"input_profile", "cmyk",
 			NULL ) ) {
 			g_object_unref( in );
 			return( -1 );
 		}
 		g_object_unref( in );
 
 		in = out;
 	}
 
 	/* If this is something other than CMYK or RAD, and it's not already
 	 * an RGB image, eg. maybe a LAB image, we need to transform 
 	 * to RGB.
 	 */
 	if( !coding[VIPS_CODING_RAD] &&
 		in->Bands >= 3 &&
 		in->Type != VIPS_INTERPRETATION_CMYK &&
 		in->Type != VIPS_INTERPRETATION_sRGB &&
 		in->Type != VIPS_INTERPRETATION_RGB16 &&
 		in->Type != VIPS_INTERPRETATION_scRGB &&
 		vips_colourspace_issupported( in ) &&
 		(saveable == VIPS_SAVEABLE_RGB ||
 		 saveable == VIPS_SAVEABLE_RGBA ||
 		 saveable == VIPS_SAVEABLE_RGBA_ONLY ||
 		 saveable == VIPS_SAVEABLE_RGB_CMYK) ) { 
 		VipsImage *out;
 		VipsInterpretation interpretation;
 
 		/* Do we make RGB or RGB16? We don't want to squash a 16-bit
 		 * RGB down to 8 bits if the saver supports 16. 
 		 */
 		if( vips_band_format_is8bit( format[in->BandFmt] ) )
 			interpretation = VIPS_INTERPRETATION_sRGB;
 		else
 			interpretation = VIPS_INTERPRETATION_RGB16;
 
 		if( vips_colourspace( in, &out, interpretation, NULL ) ) {
 			g_object_unref( in );
 			return( -1 );
 		}
 		g_object_unref( in );
 
 		in = out;
 	}
 
 	/* VIPS_SAVEABLE_RGBA_ONLY does not support mono types ... convert 
 	 * to sRGB. 
 	 */
 	if( !coding[VIPS_CODING_RAD] &&
 		in->Bands < 3 &&
-		vips_colourspace_issupported( in ) &&
 		saveable == VIPS_SAVEABLE_RGBA_ONLY ) { 
 		VipsImage *out;
 		VipsInterpretation interpretation;
 
 		/* Do we make RGB or RGB16? We don't want to squash a 16-bit
 		 * RGB down to 8 bits if the saver supports 16. 
 		 */
 		if( vips_band_format_is8bit( format[in->BandFmt] ) )
 			interpretation = VIPS_INTERPRETATION_sRGB;
 		else
 			interpretation = VIPS_INTERPRETATION_RGB16;
 
 		if( vips_colourspace( in, &out, interpretation, NULL ) ) {
 			g_object_unref( in );
 			return( -1 );
 		}
 		g_object_unref( in );
 
 		in = out;
 	}
 
 	/* Get the bands right. We must do this after all colourspace
 	 * transforms, since they can change the number of bands. 
 	 */
 	if( in->Coding == VIPS_CODING_NONE ) {
 		/* Do we need to flatten out an alpha channel? There needs to
 		 * be an alpha there now, and this writer needs to not support
 		 * alpha.
 		 */
 		if( (in->Bands == 2 ||
 			(in->Bands == 4 && 
 			 in->Type != VIPS_INTERPRETATION_CMYK)) &&
 			(saveable == VIPS_SAVEABLE_MONO ||
 			 saveable == VIPS_SAVEABLE_RGB ||
 			 saveable == VIPS_SAVEABLE_RGB_CMYK) ) {
 			VipsImage *out;
 
 			if( vips_flatten( in, &out, 
 				"background", background,
 				NULL ) ) {
 				g_object_unref( in );
 				return( -1 );
 			}
 			g_object_unref( in );
 
 			in = out;
 		}
 
 		/* Other alpha removal strategies ... just drop the extra
 		 * bands.
 		 */
 
 		else if( in->Bands > 3 && 
 			(saveable == VIPS_SAVEABLE_RGB ||
 			 (saveable == VIPS_SAVEABLE_RGB_CMYK &&
 			  in->Type != VIPS_INTERPRETATION_CMYK)) ) { 
 			VipsImage *out;
 
 			/* Don't let 4 bands though unless the image really is
 			 * a CMYK.
 			 *
 			 * Consider a RGBA png being saved as JPG. We can
 			 * write CMYK jpg, but we mustn't do that for RGBA
 			 * images.
 			 */
 			if( vips_extract_band( in, &out, 0, 
 				"n", 3,
 				NULL ) ) {
 				g_object_unref( in );
 				return( -1 );
 			}
 			g_object_unref( in );
 
 			in = out;
 		}
 		else if( in->Bands > 4 && 
 			((saveable == VIPS_SAVEABLE_RGB_CMYK &&
 			  in->Type == VIPS_INTERPRETATION_CMYK) ||
 			 saveable == VIPS_SAVEABLE_RGBA ||
 			 saveable == VIPS_SAVEABLE_RGBA_ONLY) ) {
 			VipsImage *out;
 
 			if( vips_extract_band( in, &out, 0, 
 				"n", 4,
 				NULL ) ) {
 				g_object_unref( in );
 				return( -1 );
 			}
 			g_object_unref( in );
 
 			in = out;
 		}
 		else if( in->Bands > 1 && 
 			saveable == VIPS_SAVEABLE_MONO ) {
 			VipsImage *out;
 
 			if( vips_extract_band( in, &out, 0, NULL ) ) {
 				g_object_unref( in );
 				return( -1 );
 			}
 			g_object_unref( in );
 
 			in = out;
 		}
 
 		/* Else we have VIPS_SAVEABLE_ANY and we don't chop bands down.
 		 */
 	}
 
 	/* Handle the ushort interpretations.
 	 *
 	 * RGB16 and GREY16 use 0-65535 for black-white. If we have an image
 	 * tagged like this, and it has more than 8 bits (we leave crazy uchar
 	 * images tagged as RGB16 alone), we'll need to get it ready for the
 	 * saver.
 	 */
 	if( (in->Type == VIPS_INTERPRETATION_RGB16 ||
 		 in->Type == VIPS_INTERPRETATION_GREY16) &&
 		!vips_band_format_is8bit( in->BandFmt ) ) {
 		/* If the saver supports ushort, cast to ushort. It may be
 		 * float at the moment, for example.
 		 *
 		 * If the saver does not support ushort, automatically shift
 		 * it down. This is the behaviour we want for saving an RGB16
 		 * image as JPG, for example.
 		 */
 		if( format[VIPS_FORMAT_USHORT] == VIPS_FORMAT_USHORT ) {
 			VipsImage *out;
 
 			if( vips_cast( in, &out, VIPS_FORMAT_USHORT, NULL ) ) {
 				g_object_unref( in );
 				return( -1 );
 			}
 			g_object_unref( in );
 
 			in = out;
 		}
 		else {
 			VipsImage *out;
 
 			if( vips_rshift_const1( in, &out, 8, NULL ) ) { 
 				g_object_unref( in );
 				return( -1 );
 			}
 			g_object_unref( in );
 
 			in = out;
 
 			/* That could have produced an int image ... make sure 
 			 * we are now uchar.
 			 */
 			if( vips_cast( in, &out, VIPS_FORMAT_UCHAR, NULL ) ) {
 				g_object_unref( in );
 				return( -1 );
 			}
 			g_object_unref( in );
 
 			in = out;
 		}
 	}
 
 	/* Cast to the output format.
 	 */
 	{
 		VipsImage *out;
 
 		if( vips_cast( in, &out, format[in->BandFmt], NULL ) ) {
 			g_object_unref( in );
 			return( -1 );
 		}
 		g_object_unref( in );
 
 		in = out;
 	}
 
 	/* Does this class want a coded image? Search the coding table for the
 	 * first one.
 	 */
 	if( coding[VIPS_CODING_NONE] ) {
 		/* Already NONE, nothing to do.
 		 */
 	}
 	else if( coding[VIPS_CODING_LABQ] ) {
 		VipsImage *out;
 
 		if( vips_Lab2LabQ( in, &out, NULL ) ) {
 			g_object_unref( in );
 			return( -1 );
 		}
 		g_object_unref( in );
 
 		in = out;
 	}
 	else if( coding[VIPS_CODING_RAD] ) {
 		VipsImage *out;
 
 		if( vips_float2rad( in, &out, NULL ) ) {
 			g_object_unref( in );
 			return( -1 );
 		}
 		g_object_unref( in );
 
 		in = out;
 	}
 
 	/* Some format libraries, like libpng, will throw a hard error if the 
 	 * profile is inappropriate for this image type. With profiles inherited
 	 * from a source image, this can happen all the time, so we 
 	 * want to silently drop the profile in this case.
 	 */
 	if( vips_image_get_typeof( in, VIPS_META_ICC_NAME ) ) {
 		const void *data;
 		size_t length;
 
 		if( !vips_image_get_blob( in, VIPS_META_ICC_NAME, 
 			&data, &length ) &&
 			!vips_icc_is_compatible_profile( in, data, length ) ) {
 			VipsImage *out;
 
 			if( vips_copy( in, &out, NULL ) ) {
 				g_object_unref( in );
 				return( -1 );
 			}
 			g_object_unref( in );
 
 			in = out;
 
 			vips_image_remove( in, VIPS_META_ICC_NAME );
 		}
 	}
 
 	*ready = in;
 
 	return( 0 );
 }
diff --git a/libvips/iofuncs/header.c b/libvips/iofuncs/header.c
index d11328ea3..8f49bc37e 100644
--- a/libvips/iofuncs/header.c
+++ b/libvips/iofuncs/header.c
@@ -580,87 +580,85 @@ static VipsInterpretation
 vips_image_default_interpretation( const VipsImage *image )
 {
 	switch( image->Coding ) {
 	case VIPS_CODING_LABQ:
 		return( VIPS_INTERPRETATION_LABQ );
 	case VIPS_CODING_RAD:
 		return( VIPS_INTERPRETATION_sRGB );
 	default:
 		break;
 	}
 
 	switch( image->BandFmt ) {
 	case VIPS_FORMAT_UCHAR:
+	case VIPS_FORMAT_SHORT:
+	case VIPS_FORMAT_UINT:
+	case VIPS_FORMAT_INT:
 		switch( image->Bands ) {
 		case 1:
 		case 2:
 			return( VIPS_INTERPRETATION_B_W );
 
 		case 3:
 		case 4:
 			return( VIPS_INTERPRETATION_sRGB );
 
 		default:
 			return( VIPS_INTERPRETATION_MULTIBAND );
 		}
 
 	case VIPS_FORMAT_CHAR:
 		switch( image->Bands ) {
 		case 1:
 			return( VIPS_INTERPRETATION_MATRIX );
 
 		default:
 			return( VIPS_INTERPRETATION_MULTIBAND );
 		}
 
 	case VIPS_FORMAT_USHORT:
 		switch( image->Bands ) {
 		case 1:
 		case 2:
 			return( VIPS_INTERPRETATION_GREY16 );
 
 		case 3:
 		case 4:
 			return( VIPS_INTERPRETATION_RGB16 );
 
 		default:
 			return( VIPS_INTERPRETATION_MULTIBAND );
 		}
 
-	case VIPS_FORMAT_SHORT:
-	case VIPS_FORMAT_UINT:
-	case VIPS_FORMAT_INT:
-		return( VIPS_INTERPRETATION_MULTIBAND );
-
 	case VIPS_FORMAT_FLOAT:
 	case VIPS_FORMAT_DOUBLE:
 		switch( image->Bands ) {
 		case 1:
 		case 2:
 			return( VIPS_INTERPRETATION_B_W );
 
 		case 3:
 		case 4:
 			return( VIPS_INTERPRETATION_scRGB );
 
 		default:
 			return( VIPS_INTERPRETATION_MULTIBAND );
 		}
 
 	case VIPS_FORMAT_COMPLEX:
 	case VIPS_FORMAT_DPCOMPLEX:
 		return( VIPS_INTERPRETATION_FOURIER );
 
 	default:
 		return( VIPS_INTERPRETATION_MULTIBAND );
 	}
 }
 
 /**
  * vips_image_guess_interpretation:
  * @image: image to guess for
  *
  * Return the #VipsInterpretation for an image, guessing a sane value if
  * the set value looks crazy.
  *
  * Returns: a sensible #VipsInterpretation for the image.
  */
