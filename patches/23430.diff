commit 47d6edb7b19a8c868e958c5cc153606f5273f614
Merge: c749a17e2 5ac30c5c1
Author: Julius Pfrommer <jpfr@users.noreply.github.com>
Date:   Fri Jul 10 10:14:37 2020 +0200

    Merge pull request #3778 from jpfr/warn_accesscontrol
    
    feat(plugin): Warn if the default AccessControl plugin is used

diff --git a/plugins/ua_accesscontrol_default.c b/plugins/ua_accesscontrol_default.c
index 57a2c5591..afc07030a 100644
--- a/plugins/ua_accesscontrol_default.c
+++ b/plugins/ua_accesscontrol_default.c
@@ -225,88 +225,94 @@ UA_StatusCode
 UA_AccessControl_default(UA_ServerConfig *config, UA_Boolean allowAnonymous,
                          const UA_ByteString *userTokenPolicyUri,
                          size_t usernamePasswordLoginSize,
                          const UA_UsernamePasswordLogin *usernamePasswordLogin) {
+    UA_LOG_WARNING(&config->logger, UA_LOGCATEGORY_SERVER,
+                   "AccessControl: Unconfigured AccessControl. Users have all permissions.");
     UA_AccessControl *ac = &config->accessControl;
     ac->clear = clear_default;
     ac->activateSession = activateSession_default;
     ac->closeSession = closeSession_default;
     ac->getUserRightsMask = getUserRightsMask_default;
     ac->getUserAccessLevel = getUserAccessLevel_default;
     ac->getUserExecutable = getUserExecutable_default;
     ac->getUserExecutableOnObject = getUserExecutableOnObject_default;
     ac->allowAddNode = allowAddNode_default;
     ac->allowAddReference = allowAddReference_default;
     ac->allowBrowseNode = allowBrowseNode_default;
 
 #ifdef UA_ENABLE_HISTORIZING
     ac->allowHistoryUpdateUpdateData = allowHistoryUpdateUpdateData_default;
     ac->allowHistoryUpdateDeleteRawModified = allowHistoryUpdateDeleteRawModified_default;
 #endif
 
     ac->allowDeleteNode = allowDeleteNode_default;
     ac->allowDeleteReference = allowDeleteReference_default;
 
     AccessControlContext *context = (AccessControlContext*)
             UA_malloc(sizeof(AccessControlContext));
-    if (!context)
+    if(!context)
         return UA_STATUSCODE_BADOUTOFMEMORY;
     memset(context, 0, sizeof(AccessControlContext));
     ac->context = context;
 
     /* Allow anonymous? */
     context->allowAnonymous = allowAnonymous;
+    if(allowAnonymous) {
+        UA_LOG_INFO(&config->logger, UA_LOGCATEGORY_SERVER,
+                    "AccessControl: Anonymous login is enabled");
+    }
 
     /* Copy username/password to the access control plugin */
     if(usernamePasswordLoginSize > 0) {
         context->usernamePasswordLogin = (UA_UsernamePasswordLogin*)
             UA_malloc(usernamePasswordLoginSize * sizeof(UA_UsernamePasswordLogin));
         if(!context->usernamePasswordLogin)
             return UA_STATUSCODE_BADOUTOFMEMORY;
         context->usernamePasswordLoginSize = usernamePasswordLoginSize;
         for(size_t i = 0; i < usernamePasswordLoginSize; i++) {
             UA_String_copy(&usernamePasswordLogin[i].username, &context->usernamePasswordLogin[i].username);
             UA_String_copy(&usernamePasswordLogin[i].password, &context->usernamePasswordLogin[i].password);
         }
     }
 
     /* Set the allowed policies */
     size_t policies = 0;
     if(allowAnonymous)
         policies++;
     if(usernamePasswordLoginSize > 0)
         policies++;
     ac->userTokenPoliciesSize = 0;
     ac->userTokenPolicies = (UA_UserTokenPolicy *)
         UA_Array_new(policies, &UA_TYPES[UA_TYPES_USERTOKENPOLICY]);
     if(!ac->userTokenPolicies)
         return UA_STATUSCODE_BADOUTOFMEMORY;
     ac->userTokenPoliciesSize = policies;
 
     policies = 0;
     if(allowAnonymous) {
         ac->userTokenPolicies[policies].tokenType = UA_USERTOKENTYPE_ANONYMOUS;
         ac->userTokenPolicies[policies].policyId = UA_STRING_ALLOC(ANONYMOUS_POLICY);
         if (!ac->userTokenPolicies[policies].policyId.data)
             return UA_STATUSCODE_BADOUTOFMEMORY;
         policies++;
     }
 
     if(usernamePasswordLoginSize > 0) {
         ac->userTokenPolicies[policies].tokenType = UA_USERTOKENTYPE_USERNAME;
         ac->userTokenPolicies[policies].policyId = UA_STRING_ALLOC(USERNAME_POLICY);
         if(!ac->userTokenPolicies[policies].policyId.data)
             return UA_STATUSCODE_BADOUTOFMEMORY;
 
 #if UA_LOGLEVEL <= 400
         const UA_String noneUri = UA_STRING("http://opcfoundation.org/UA/SecurityPolicy#None");
         if(UA_ByteString_equal(userTokenPolicyUri, &noneUri)) {
             UA_LOG_WARNING(&config->logger, UA_LOGCATEGORY_SERVER,
                            "Username/Password configured, but no encrypting SecurityPolicy. "
                            "This can leak credentials on the network.");
         }
 #endif
         return UA_ByteString_copy(userTokenPolicyUri,
                                   &ac->userTokenPolicies[policies].securityPolicyUri);
     }
     return UA_STATUSCODE_GOOD;
 }
