commit 21380a712bb427670db47a0193d450c35e72856a
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Tue Sep 6 13:34:23 2022 +0100

    oss-fuzz 51011: Bounds check CharString opstack for SEAC opcode.

diff --git a/base/gxtype1.c b/base/gxtype1.c
index 27c44e1c5..b2b593a4c 100644
--- a/base/gxtype1.c
+++ b/base/gxtype1.c
@@ -413,167 +413,172 @@ gs_type1_piece_codes(/*const*/ gs_font_type1 *pfont, /* lgtm[cpp/use-of-goto] */
                 decode_num4(lw, cip, state, encrypted);
                 CS_CHECK_PUSH(csp, cstack);
                 *++csp = int2fixed(lw);
             } else		/* not possible */
                 return_error(gs_error_invalidfont);
             continue;
         }
 #define cnext CLEAR_CSTACK(cstack, csp); goto top
         switch ((char_command) c) {
         default:
             cnext;
             break;
         case c2_shortint:
             {
                 short sint = *cip++;
                 sint = (sint << 8) + *cip++;
                 CS_CHECK_PUSH(csp, cstack);
                 *++csp = int2fixed(sint);
             }
             break;
         case c2_hstemhm:
             hhints += ((csp - cstack) + 1) / 2;
             cnext;
             break;
         case c2_vstemhm:
             vhints += ((csp - cstack) + 1) / 2;
             cnext;
             break;
         case c2_cntrmask:
             vhints += ((csp - cstack) + 1) / 2;
             cip += (vhints + hhints + 7) / 8;
             cnext;
             break;
         case c2_hintmask:
             {
                 if (csp > cstack)
                     vhints += ((csp - cstack) + 1) / 2;
                 cip += (vhints + hhints + 7) / 8;
                 cnext;
             }
             break;
         case c2_callgsubr:
             call_depth++;
             if (csp < &(cstack[0])) {
                 c = pdata->gsubrNumberBias;
             }
             else {
                 c = fixed2int_var(*csp) + pdata->gsubrNumberBias;
             }
             CS_CHECK_IPSTACK(ipsp + 1, ipstack);
             code = pdata->procs.subr_data
                 (pfont, c, true, &ipsp[1].cs_data);
             if (code < 0)
                 return_error(code);
             if (csp >= &(cstack[0])) {
                 --csp;
             }
             ipsp->ip = cip, ipsp->dstate = state, ipsp->ip_end = end;
             ++ipsp;
             cip = ipsp->cs_data.bits.data;
             end = ipsp->cs_data.bits.data + ipsp->cs_data.bits.size;
             goto call;
         case c_callsubr:
             call_depth++;
             if (csp < &(cstack[0])) {
                 c = pdata->subroutineNumberBias;
             }
             else {
                 c = fixed2int_var(*csp) + pdata->subroutineNumberBias;
             }
             CS_CHECK_IPSTACK(ipsp + 1, ipstack);
             code = pdata->procs.subr_data
                 (pfont, c, false, &ipsp[1].cs_data);
             if (code < 0)
                 return_error(code);
             if (csp >= &(cstack[0])) {
                 --csp;
             }
             ipsp->ip = cip, ipsp->dstate = state, ipsp->ip_end = end;
             ++ipsp;
             cip = ipsp->cs_data.bits.data;
             end = ipsp->cs_data.bits.data + ipsp->cs_data.bits.size;
             goto call;
         case c_return:
 c_return:
             if (call_depth == 0)
                 return (gs_note_error(gs_error_invalidfont));
             else
                 call_depth--;
             gs_glyph_data_free(&ipsp->cs_data, "gs_type1_piece_codes");
             CS_CHECK_IPSTACK(ipsp, ipstack);
             --ipsp;
             if (ipsp < ipstack)
                 return (gs_note_error(gs_error_invalidfont));
             cip = ipsp->ip, state = ipsp->dstate, end = ipsp->ip_end;
             goto top;
         case cx_hstem:
             hhints += ((csp - cstack) + 1) / 2;
             cnext;
             break;
         case cx_vstem:
             vhints += ((csp - cstack) + 1) / 2;
             cnext;
             break;
         case c1_hsbw:
             cnext;
         case cx_endchar:
             if (csp < cstack + 3)
                 goto out;	/* not seac */
         do_seac:
             /* This is the payoff for all this code! */
             if (CS_CHECK_CSTACK_BOUNDS(&csp[-1], cstack)) {
                 chars[0] = fixed2int(csp[-1]);
                 chars[1] = fixed2int(csp[0]);
                 return 1;
             }
             else {
                 return_error(gs_error_invalidfont);
             }
         case cx_escape:
             charstring_next(*cip, state, c, encrypted);
             ++cip;
             switch ((char1_extended_command) c) {
             default:
                 goto out;
             case ce1_vstem3:
             case ce1_hstem3:
             case ce1_sbw:
                 cnext;
             case ce1_pop:
                 /*
                  * pop must do nothing, since it is used after
                  * subr# 1 3 callothersubr.
                  */
                 goto top;
             case ce1_seac:
                 goto do_seac;
             case ce1_callothersubr:
-                switch (fixed2int_var(*csp)) {
-                default:
-                    goto out;
-                case 3:
-                    if (csp >= &(cstack[1]))
-                        csp -= 2;
-                    goto top;
-                case 12:
-                case 13:
-                case 14:
-                case 15:
-                case 16:
-                case 17:
-                case 18:
-                    cnext;
+                if (CS_CHECK_CSTACK_BOUNDS(csp, cstack)) {
+                    switch (fixed2int_var(*csp)) {
+                    default:
+                        goto out;
+                    case 3:
+                        if (csp >= &(cstack[1]))
+                            csp -= 2;
+                        goto top;
+                    case 12:
+                    case 13:
+                    case 14:
+                    case 15:
+                    case 16:
+                    case 17:
+                    case 18:
+                        cnext;
+                    }
+                }
+                else {
+                    return_error(gs_error_invalidfont);
                 }
             }
         }
 #undef cnext
     }
  out:
     return 0;
 }
 
 /*
  * Get PIECES and/or NUM_PIECES of a Type 1 glyph.  Sets info->num_pieces
  * and/or stores into info->pieces.  Updates info->members.  This is a
  * single-use procedure broken out only for readability.
  */
