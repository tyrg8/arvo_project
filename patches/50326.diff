commit eba3379360caec1d881d96c5d51ed4282278cd1f
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Thu Aug 18 17:14:22 2022 +0100

    oss-fuzz 50326: Fix and use bounds check
    
    for Type 1/2 charstring executaion state stack. The bounds checking macro was
    incorrect, and wasn't being used in the minimal CharString interpreter used
    by pdfwrite and co.

diff --git a/base/gxtype1.c b/base/gxtype1.c
index d3af50ece..27c44e1c5 100644
--- a/base/gxtype1.c
+++ b/base/gxtype1.c
@@ -1,49 +1,49 @@
-/* Copyright (C) 2001-2021 Artifex Software, Inc.
+/* Copyright (C) 2001-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 
 /* Adobe Type 1 font interpreter support */
 #include "math_.h"
 #include "memory_.h"
 #include "gx.h"
 #include "gserrors.h"
 #include "gsccode.h"
 #include "gsline.h"
 #include "gsstruct.h"
 #include "gxarith.h"
 #include "gxchrout.h"
 #include "gxfixed.h"
 #include "gxgstate.h"
 #include "gxmatrix.h"
 #include "gxcoord.h"
 #include "gxfont.h"
 #include "gxfont1.h"
 #include "gxtype1.h"
 #include "gzpath.h"
 
 /*
  * The routines in this file are used for both Type 1 and Type 2
  * charstring interpreters.
  */
 
 /*
  * Define whether or not to force hints to "big pixel" boundaries
  * when rasterizing at higher resolution.  With the current algorithms,
  * a value of 1 is better for devices without alpha capability,
  * but 0 is better if alpha is available.
  */
 #define FORCE_HINTS_TO_BIG_PIXELS 1
 
 /* Structure descriptor */
@@ -349,228 +349,231 @@ int
 gs_type1_piece_codes(/*const*/ gs_font_type1 *pfont, /* lgtm[cpp/use-of-goto] */
                      const gs_glyph_data_t *pgd, gs_char *chars)
 {
     gs_type1_data *const pdata = &pfont->data;
     /*
      * Decode the CharString looking for seac.  We have to process
      * callsubr, callothersubr, and return operators, but if we see
      * any other operators other than [h]sbw, pop, hint operators,
      * or endchar, we can return immediately.  We have to include
      * endchar because it is an (undocumented) equivalent for seac
      * in Type 2 CharStrings: see the cx_endchar case in
      * gs_type2_interpret in gstype2.c.
      *
      * It's really unfortunate that we have to duplicate so much parsing
      * code, but factoring out the parser from the interpreter would
      * involve more restructuring than we're prepared to do right now.
      */
     bool encrypted = pdata->lenIV >= 0;
     fixed cstack[ostack_size];
     fixed *csp;
     ip_state_t ipstack[ipstack_size + 1];
     ip_state_t *ipsp = &ipstack[0];
     const byte *cip, *end;
     crypt_state state;
     int c, hhints = 0, vhints = 0;
     int code, call_depth = 0;
 
     CLEAR_CSTACK(cstack, csp);
     cip = pgd->bits.data;
     end = pgd->bits.data + pgd->bits.size;
  call:
     state = crypt_charstring_seed;
     if (encrypted) {
         int skip = pdata->lenIV;
 
         /* Skip initial random bytes */
         for (; skip > 0; ++cip, --skip)
             decrypt_skip_next(*cip, state);
     }
  top:
     for (;;) {
         uint c0;
 
         if (cip >= end) {
              /* We used to treat buffer overrun as a simple invalid font, now we assume that
              * there is an implicit endchar/return.
              * Part of bug #693170 where the fonts are invalid (no endchar on some glyphs).
              */
             if (call_depth > 0)
                 goto c_return;
             goto out;
         }
         c0 = *cip++;
 
         charstring_next(c0, state, c, encrypted);
         if (c >= c_num1) {
             /* This is a number, decode it and push it on the stack. */
             if (c < c_pos2_0) {	/* 1-byte number */
                 decode_push_num1(csp, cstack, c);
             } else if (c < cx_num4) {	/* 2-byte number */
                 decode_push_num2(csp, cstack, c, cip, state, encrypted);
             } else if (c == cx_num4) {	/* 4-byte number */
                 long lw;
 
                 decode_num4(lw, cip, state, encrypted);
                 CS_CHECK_PUSH(csp, cstack);
                 *++csp = int2fixed(lw);
             } else		/* not possible */
                 return_error(gs_error_invalidfont);
             continue;
         }
 #define cnext CLEAR_CSTACK(cstack, csp); goto top
         switch ((char_command) c) {
         default:
             cnext;
             break;
         case c2_shortint:
             {
                 short sint = *cip++;
                 sint = (sint << 8) + *cip++;
                 CS_CHECK_PUSH(csp, cstack);
                 *++csp = int2fixed(sint);
             }
             break;
         case c2_hstemhm:
             hhints += ((csp - cstack) + 1) / 2;
             cnext;
             break;
         case c2_vstemhm:
             vhints += ((csp - cstack) + 1) / 2;
             cnext;
             break;
         case c2_cntrmask:
             vhints += ((csp - cstack) + 1) / 2;
             cip += (vhints + hhints + 7) / 8;
             cnext;
             break;
         case c2_hintmask:
             {
                 if (csp > cstack)
                     vhints += ((csp - cstack) + 1) / 2;
                 cip += (vhints + hhints + 7) / 8;
                 cnext;
             }
             break;
         case c2_callgsubr:
             call_depth++;
             if (csp < &(cstack[0])) {
                 c = pdata->gsubrNumberBias;
             }
             else {
                 c = fixed2int_var(*csp) + pdata->gsubrNumberBias;
             }
+            CS_CHECK_IPSTACK(ipsp + 1, ipstack);
             code = pdata->procs.subr_data
                 (pfont, c, true, &ipsp[1].cs_data);
             if (code < 0)
                 return_error(code);
             if (csp >= &(cstack[0])) {
                 --csp;
             }
             ipsp->ip = cip, ipsp->dstate = state, ipsp->ip_end = end;
             ++ipsp;
             cip = ipsp->cs_data.bits.data;
             end = ipsp->cs_data.bits.data + ipsp->cs_data.bits.size;
             goto call;
         case c_callsubr:
             call_depth++;
             if (csp < &(cstack[0])) {
                 c = pdata->subroutineNumberBias;
             }
             else {
                 c = fixed2int_var(*csp) + pdata->subroutineNumberBias;
             }
+            CS_CHECK_IPSTACK(ipsp + 1, ipstack);
             code = pdata->procs.subr_data
                 (pfont, c, false, &ipsp[1].cs_data);
             if (code < 0)
                 return_error(code);
             if (csp >= &(cstack[0])) {
                 --csp;
             }
             ipsp->ip = cip, ipsp->dstate = state, ipsp->ip_end = end;
             ++ipsp;
             cip = ipsp->cs_data.bits.data;
             end = ipsp->cs_data.bits.data + ipsp->cs_data.bits.size;
             goto call;
         case c_return:
 c_return:
             if (call_depth == 0)
                 return (gs_note_error(gs_error_invalidfont));
             else
                 call_depth--;
             gs_glyph_data_free(&ipsp->cs_data, "gs_type1_piece_codes");
+            CS_CHECK_IPSTACK(ipsp, ipstack);
             --ipsp;
             if (ipsp < ipstack)
                 return (gs_note_error(gs_error_invalidfont));
             cip = ipsp->ip, state = ipsp->dstate, end = ipsp->ip_end;
             goto top;
         case cx_hstem:
             hhints += ((csp - cstack) + 1) / 2;
             cnext;
             break;
         case cx_vstem:
             vhints += ((csp - cstack) + 1) / 2;
             cnext;
             break;
         case c1_hsbw:
             cnext;
         case cx_endchar:
             if (csp < cstack + 3)
                 goto out;	/* not seac */
         do_seac:
             /* This is the payoff for all this code! */
             if (CS_CHECK_CSTACK_BOUNDS(&csp[-1], cstack)) {
                 chars[0] = fixed2int(csp[-1]);
                 chars[1] = fixed2int(csp[0]);
                 return 1;
             }
             else {
                 return_error(gs_error_invalidfont);
             }
         case cx_escape:
             charstring_next(*cip, state, c, encrypted);
             ++cip;
             switch ((char1_extended_command) c) {
             default:
                 goto out;
             case ce1_vstem3:
             case ce1_hstem3:
             case ce1_sbw:
                 cnext;
             case ce1_pop:
                 /*
                  * pop must do nothing, since it is used after
                  * subr# 1 3 callothersubr.
                  */
                 goto top;
             case ce1_seac:
                 goto do_seac;
             case ce1_callothersubr:
                 switch (fixed2int_var(*csp)) {
                 default:
                     goto out;
                 case 3:
                     if (csp >= &(cstack[1]))
                         csp -= 2;
                     goto top;
                 case 12:
                 case 13:
                 case 14:
                 case 15:
                 case 16:
                 case 17:
                 case 18:
                     cnext;
                 }
             }
         }
 #undef cnext
     }
  out:
     return 0;
 }
 
 /*
  * Get PIECES and/or NUM_PIECES of a Type 1 glyph.  Sets info->num_pieces
  * and/or stores into info->pieces.  Updates info->members.  This is a
  * single-use procedure broken out only for readability.
  */
diff --git a/base/gxtype1.h b/base/gxtype1.h
index 869113866..0c3823961 100644
--- a/base/gxtype1.h
+++ b/base/gxtype1.h
@@ -1,39 +1,39 @@
-/* Copyright (C) 2001-2021 Artifex Software, Inc.
+/* Copyright (C) 2001-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 
 /* Private Adobe Type 1 / Type 2 charstring interpreter definitions */
 
 #ifndef gxtype1_INCLUDED
 #  define gxtype1_INCLUDED
 
 #include "gscrypt1.h"
 #include "gsgdata.h"
 #include "gstype1.h"
 #include "gxhintn.h"
 #include "gxmatrix.h"
 #include "gspath.h"
 #include "gzpath.h"
 
 /* This file defines the structures for the state of a Type 1 / */
 /* Type 2 charstring interpreter. */
 
 /*
  * Because of oversampling, one pixel in the Type 1 interpreter may
  * correspond to several device pixels.  This is also true of the hint data,
  * since the CTM reflects the transformation to the oversampled space.
  * To help keep the font level hints separated from the character level hints,
  * we store the scaling factor separately with each set of hints.
  */
@@ -152,110 +152,110 @@ extern_st(st_gs_type1_state);
 /* Define a pointer to the charstring interpreter stack. */
 typedef fixed *cs_ptr;
 
 /* Clear the operand stack. */
 /* The cast avoids compiler warning about a "negative subscript." */
 #define CLEAR_CSTACK(cstack, csp)\
   (csp = (cs_ptr)(cstack) - 1)
 
 /* Copy the operand stack out of the saved state. */
 #define INIT_CSTACK(cstack, csp, pcis)\
   BEGIN\
     memset(cstack, 0x00, sizeof(cstack));\
     if ( pcis->os_count == 0 )\
       CLEAR_CSTACK(cstack, csp);\
     else {\
       memcpy(cstack, pcis->ostack, pcis->os_count * sizeof(fixed));\
       csp = &cstack[pcis->os_count - 1];\
     }\
   END
 #define CS_CHECK_CSTACK_BOUNDS(csaddr, cs) \
       (csaddr >= &(cs[0]) && \
         csaddr < &(cs[ostack_size]))
 
 #define CS_CHECK_TRANSIENT_BOUNDS(csaddr, cs) \
       (csaddr >= &(cs[0]) && \
         csaddr < &(cs[32]))         /* size defined in gs_type1_state_s above */
 
 #define CS_CHECK_PUSH(csp, cstack)\
   BEGIN\
     if (csp >= &cstack[countof(cstack)-1])\
       return_error(gs_error_invalidfont);\
   END
 
 #define CS_CHECK_PUSHN(csp, cstack, n)\
   BEGIN\
     if (csp >= &cstack[countof(cstack) - n])\
       return_error(gs_error_invalidfont);\
   END
 
 #define CS_CHECK_POP(csp, cstack)\
   BEGIN\
     if (csp < &cstack[0])\
       return_error(gs_error_invalidfont);\
   END
 
 #define CS_CHECK_IPSTACK(ips, ipstack)\
   BEGIN\
-    if (ips > &ipstack[ipstack_size + 1] \
+    if (ips > &ipstack[ipstack_size] \
         || ips < &ipstack[0])\
       return_error(gs_error_invalidfont);\
   END
 
 /* Decode a 1-byte number. */
 #define decode_num1(var, c)\
   (var = c_value_num1(c))
 #define decode_push_num1(csp, cstack, c)\
   BEGIN\
     CS_CHECK_PUSH(csp, cstack);\
     *++csp = int2fixed(c_value_num1(c));\
   END
 
 /* Decode a 2-byte number. */
 #define decode_num2(var, c, cip, state, encrypted)\
   BEGIN\
     uint c2 = *cip++;\
     int cn = charstring_this(c2, state, encrypted);\
 \
     var = (c < c_neg2_0 ? c_value_pos2(c, 0) + cn :\
            c_value_neg2(c, 0) - cn);\
     charstring_skip_next(c2, state, encrypted);\
   END
 #define decode_push_num2(csp, cstack, c, cip, state, encrypted)\
   BEGIN\
     uint c2 = *cip++;\
     int cn;\
 \
     CS_CHECK_PUSH(csp, cstack);\
     cn = charstring_this(c2, state, encrypted);\
     if ( c < c_neg2_0 )\
       { if_debug2('1', "[1] (%d)+%d\n", c_value_pos2(c, 0), cn);\
         *++csp = int2fixed(c_value_pos2(c, 0) + (int)cn);\
       }\
     else\
       { if_debug2('1', "[1] (%d)-%d\n", c_value_neg2(c, 0), cn);\
         *++csp = int2fixed(c_value_neg2(c, 0) - (int)cn);\
       }\
     charstring_skip_next(c2, state, encrypted);\
   END
 
 /* Decode a 4-byte number, but don't push it, because Type 1 and Type 2 */
 /* charstrings scale it differently. */
 #if ARCH_SIZEOF_LONG > 4
 #  define sign_extend_num4(lw)\
      lw = (lw ^ 0x80000000L) - 0x80000000L
 #else
 #  define sign_extend_num4(lw) DO_NOTHING
 #endif
 #define decode_num4(lw, cip, state, encrypted)\
   BEGIN\
     int i;\
     uint c4;\
 \
     lw = 0;\
     for ( i = 4; --i >= 0; )\
       { charstring_next(*cip, state, c4, encrypted);\
         lw = (lw << 8) + c4;\
         cip++;\
       }\
     sign_extend_num4(lw);\
   END
