commit b7e119beadd56e5d6aefcf4a3edee33dc78c92c6
Author: Marti Maria <marti.maria@littlecms.com>
Date:   Tue Jul 26 08:53:11 2022 +0200

    Check for duplicated tags
    
    If so, discard profile

diff --git a/src/cmscnvrt.c b/src/cmscnvrt.c
index fe25525..abac021 100644
--- a/src/cmscnvrt.c
+++ b/src/cmscnvrt.c
@@ -353,67 +353,67 @@ static
 cmsBool ComputeConversion(cmsUInt32Number i, 
                           cmsHPROFILE hProfiles[],
                           cmsUInt32Number Intent,
                           cmsBool BPC,
                           cmsFloat64Number AdaptationState,
                           cmsMAT3* m, cmsVEC3* off)
 {
 
     int k;
 
     // m  and off are set to identity and this is detected latter on
     _cmsMAT3identity(m);
     _cmsVEC3init(off, 0, 0, 0);
 
     // If intent is abs. colorimetric,
     if (Intent == INTENT_ABSOLUTE_COLORIMETRIC) {
 
         cmsCIEXYZ WhitePointIn, WhitePointOut;
         cmsMAT3 ChromaticAdaptationMatrixIn, ChromaticAdaptationMatrixOut;
 
         _cmsReadMediaWhitePoint(&WhitePointIn,  hProfiles[i-1]);
         _cmsReadCHAD(&ChromaticAdaptationMatrixIn, hProfiles[i-1]);
 
         _cmsReadMediaWhitePoint(&WhitePointOut,  hProfiles[i]);
         _cmsReadCHAD(&ChromaticAdaptationMatrixOut, hProfiles[i]);
 
         if (!ComputeAbsoluteIntent(AdaptationState,
                                   &WhitePointIn,  &ChromaticAdaptationMatrixIn,
                                   &WhitePointOut, &ChromaticAdaptationMatrixOut, m)) return FALSE;
 
     }
     else {
         // Rest of intents may apply BPC.
 
         if (BPC) {
 
-            cmsCIEXYZ BlackPointIn, BlackPointOut;
+            cmsCIEXYZ BlackPointIn = { 0, 0, 0}, BlackPointOut = { 0, 0, 0 };
 
             cmsDetectBlackPoint(&BlackPointIn,  hProfiles[i-1], Intent, 0);
             cmsDetectDestinationBlackPoint(&BlackPointOut, hProfiles[i], Intent, 0);
 
             // If black points are equal, then do nothing
             if (BlackPointIn.X != BlackPointOut.X ||
                 BlackPointIn.Y != BlackPointOut.Y ||
                 BlackPointIn.Z != BlackPointOut.Z)
                     ComputeBlackPointCompensation(&BlackPointIn, &BlackPointOut, m, off);
         }
     }
 
     // Offset should be adjusted because the encoding. We encode XYZ normalized to 0..1.0,
     // to do that, we divide by MAX_ENCODEABLE_XZY. The conversion stage goes XYZ -> XYZ so
     // we have first to convert from encoded to XYZ and then convert back to encoded.
     // y = Mx + Off
     // x = x'c
     // y = M x'c + Off
     // y = y'c; y' = y / c
     // y' = (Mx'c + Off) /c = Mx' + (Off / c)
 
     for (k=0; k < 3; k++) {
         off ->n[k] /= MAX_ENCODEABLE_XYZ;
     }
 
     return TRUE;
 }
 
 
 // Add a conversion stage if needed. If a matrix/offset m is given, it applies to XYZ space
diff --git a/src/cmsio0.c b/src/cmsio0.c
index f02d240..9c07aa1 100644
--- a/src/cmsio0.c
+++ b/src/cmsio0.c
@@ -738,101 +738,114 @@ cmsUInt32Number _validatedVersion(cmsUInt32Number DWord)
 // Read profile header and validate it
 cmsBool _cmsReadHeader(_cmsICCPROFILE* Icc)
 {
     cmsTagEntry Tag;
     cmsICCHeader Header;
     cmsUInt32Number i, j;
     cmsUInt32Number HeaderSize;
     cmsIOHANDLER* io = Icc ->IOhandler;
     cmsUInt32Number TagCount;
 
 
     // Read the header
     if (io -> Read(io, &Header, sizeof(cmsICCHeader), 1) != 1) {
         return FALSE;
     }
 
     // Validate file as an ICC profile
     if (_cmsAdjustEndianess32(Header.magic) != cmsMagicNumber) {
         cmsSignalError(Icc ->ContextID, cmsERROR_BAD_SIGNATURE, "not an ICC profile, invalid signature");
         return FALSE;
     }
 
     // Adjust endianness of the used parameters
     Icc -> DeviceClass     = (cmsProfileClassSignature) _cmsAdjustEndianess32(Header.deviceClass);
     Icc -> ColorSpace      = (cmsColorSpaceSignature)   _cmsAdjustEndianess32(Header.colorSpace);
     Icc -> PCS             = (cmsColorSpaceSignature)   _cmsAdjustEndianess32(Header.pcs);
    
     Icc -> RenderingIntent = _cmsAdjustEndianess32(Header.renderingIntent);
     Icc -> flags           = _cmsAdjustEndianess32(Header.flags);
     Icc -> manufacturer    = _cmsAdjustEndianess32(Header.manufacturer);
     Icc -> model           = _cmsAdjustEndianess32(Header.model);
     Icc -> creator         = _cmsAdjustEndianess32(Header.creator);
     
     _cmsAdjustEndianess64(&Icc -> attributes, &Header.attributes);
     Icc -> Version         = _cmsAdjustEndianess32(_validatedVersion(Header.version));
 
     // Get size as reported in header
     HeaderSize = _cmsAdjustEndianess32(Header.size);
 
     // Make sure HeaderSize is lower than profile size
     if (HeaderSize >= Icc ->IOhandler ->ReportedSize)
             HeaderSize = Icc ->IOhandler ->ReportedSize;
 
 
     // Get creation date/time
     _cmsDecodeDateTimeNumber(&Header.date, &Icc ->Created);
 
     // The profile ID are 32 raw bytes
     memmove(Icc ->ProfileID.ID32, Header.profileID.ID32, 16);
 
 
     // Read tag directory
     if (!_cmsReadUInt32Number(io, &TagCount)) return FALSE;
     if (TagCount > MAX_TABLE_TAG) {
 
         cmsSignalError(Icc ->ContextID, cmsERROR_RANGE, "Too many tags (%d)", TagCount);
         return FALSE;
     }
 
 
     // Read tag directory
     Icc -> TagCount = 0;
     for (i=0; i < TagCount; i++) {
 
         if (!_cmsReadUInt32Number(io, (cmsUInt32Number *) &Tag.sig)) return FALSE;
         if (!_cmsReadUInt32Number(io, &Tag.offset)) return FALSE;
         if (!_cmsReadUInt32Number(io, &Tag.size)) return FALSE;
 
         // Perform some sanity check. Offset + size should fall inside file.
         if (Tag.size == 0 || Tag.offset == 0) continue;
         if (Tag.offset + Tag.size > HeaderSize ||
             Tag.offset + Tag.size < Tag.offset)
                   continue;
 
         Icc -> TagNames[Icc ->TagCount]   = Tag.sig;
         Icc -> TagOffsets[Icc ->TagCount] = Tag.offset;
         Icc -> TagSizes[Icc ->TagCount]   = Tag.size;
 
        // Search for links
         for (j=0; j < Icc ->TagCount; j++) {
-
+           
             if ((Icc ->TagOffsets[j] == Tag.offset) &&
                 (Icc ->TagSizes[j]   == Tag.size)) {
 
-                // Check types. Abort whole profile if a forged link is found
+                // Check types. 
                 if (CompatibleTypes(_cmsGetTagDescriptor(Icc->ContextID, Icc->TagNames[j]),
                                     _cmsGetTagDescriptor(Icc->ContextID, Tag.sig))) {
 
                     Icc->TagLinked[Icc->TagCount] = Icc->TagNames[j];
                 }
             }
 
         }
 
         Icc ->TagCount++;
     }
 
+
+    for (i = 0; i < Icc->TagCount; i++) {
+        for (j = 0; j < Icc->TagCount; j++) {
+
+            // Tags cannot be duplicate
+            if ((i != j) && (Icc->TagNames[i] == Icc->TagNames[j])) {
+                cmsSignalError(Icc->ContextID, cmsERROR_RANGE, "Duplicate tag found");
+                return FALSE;
+            }
+
+        }
+    }
+
     return TRUE;
 }
 
 // Saves profile header
