commit 1567b55b72b8366ce120ed042e03ed5b50d191d7
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Thu Nov 22 14:28:58 2018 +0100

    Set doc on element obtained from freeElems
    
    In commit 8c9daf79, a call to xmlFreeNode was added in
    xmlSAX2StartElementNs. If a node was obtained from the freeElems list,
    make sure to set the doc, otherwise xmlFreeNode wouldn't realize that
    the node name might be in the dictionary, causing an invalid free.
    
    Note that the issue fixed in commit 8c9daf79 requires commit 0ed6addb
    and this one to work properly.
    
    Found by OSS-Fuzz.

diff --git a/SAX2.c b/SAX2.c
index ac3ab19a..7642501a 100644
--- a/SAX2.c
+++ b/SAX2.c
@@ -2208,250 +2208,251 @@ void
 xmlSAX2StartElementNs(void *ctx,
                       const xmlChar *localname,
 		      const xmlChar *prefix,
 		      const xmlChar *URI,
 		      int nb_namespaces,
 		      const xmlChar **namespaces,
 		      int nb_attributes,
 		      int nb_defaulted,
 		      const xmlChar **attributes)
 {
     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
     xmlNodePtr ret;
     xmlNodePtr parent;
     xmlNsPtr last = NULL, ns;
     const xmlChar *uri, *pref;
     xmlChar *lname = NULL;
     int i, j;
 
     if (ctx == NULL) return;
     parent = ctxt->node;
     /*
      * First check on validity:
      */
     if (ctxt->validate && (ctxt->myDoc->extSubset == NULL) &&
         ((ctxt->myDoc->intSubset == NULL) ||
 	 ((ctxt->myDoc->intSubset->notations == NULL) &&
 	  (ctxt->myDoc->intSubset->elements == NULL) &&
 	  (ctxt->myDoc->intSubset->attributes == NULL) &&
 	  (ctxt->myDoc->intSubset->entities == NULL)))) {
 	xmlErrValid(ctxt, XML_DTD_NO_DTD,
 	  "Validation failed: no DTD found !", NULL, NULL);
 	ctxt->validate = 0;
     }
 
     /*
      * Take care of the rare case of an undefined namespace prefix
      */
     if ((prefix != NULL) && (URI == NULL)) {
         if (ctxt->dictNames) {
 	    const xmlChar *fullname;
 
 	    fullname = xmlDictQLookup(ctxt->dict, prefix, localname);
 	    if (fullname != NULL)
 	        localname = fullname;
 	} else {
 	    lname = xmlBuildQName(localname, prefix, NULL, 0);
 	}
     }
     /*
      * allocate the node
      */
     if (ctxt->freeElems != NULL) {
         ret = ctxt->freeElems;
 	ctxt->freeElems = ret->next;
 	ctxt->freeElemsNr--;
 	memset(ret, 0, sizeof(xmlNode));
+        ret->doc = ctxt->myDoc;
 	ret->type = XML_ELEMENT_NODE;
 
 	if (ctxt->dictNames)
 	    ret->name = localname;
 	else {
 	    if (lname == NULL)
 		ret->name = xmlStrdup(localname);
 	    else
 	        ret->name = lname;
 	    if (ret->name == NULL) {
 	        xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElementNs");
 		return;
 	    }
 	}
 	if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))
 	    xmlRegisterNodeDefaultValue(ret);
     } else {
 	if (ctxt->dictNames)
 	    ret = xmlNewDocNodeEatName(ctxt->myDoc, NULL,
 	                               (xmlChar *) localname, NULL);
 	else if (lname == NULL)
 	    ret = xmlNewDocNode(ctxt->myDoc, NULL, localname, NULL);
 	else
 	    ret = xmlNewDocNodeEatName(ctxt->myDoc, NULL,
 	                               (xmlChar *) lname, NULL);
 	if (ret == NULL) {
 	    xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElementNs");
 	    return;
 	}
     }
     if (ctxt->linenumbers) {
 	if (ctxt->input != NULL) {
 	    if (ctxt->input->line < 65535)
 		ret->line = (short) ctxt->input->line;
 	    else
 	        ret->line = 65535;
 	}
     }
 
     if (parent == NULL) {
         xmlAddChild((xmlNodePtr) ctxt->myDoc, (xmlNodePtr) ret);
     }
     /*
      * Build the namespace list
      */
     for (i = 0,j = 0;j < nb_namespaces;j++) {
         pref = namespaces[i++];
 	uri = namespaces[i++];
 	ns = xmlNewNs(NULL, uri, pref);
 	if (ns != NULL) {
 	    if (last == NULL) {
 	        ret->nsDef = last = ns;
 	    } else {
 	        last->next = ns;
 		last = ns;
 	    }
 	    if ((URI != NULL) && (prefix == pref))
 		ret->ns = ns;
 	} else {
             /*
              * any out of memory error would already have been raised
              * but we can't be guaranteed it's the actual error due to the
              * API, best is to skip in this case
              */
 	    continue;
 	}
 #ifdef LIBXML_VALID_ENABLED
 	if ((!ctxt->html) && ctxt->validate && ctxt->wellFormed &&
 	    ctxt->myDoc && ctxt->myDoc->intSubset) {
 	    ctxt->valid &= xmlValidateOneNamespace(&ctxt->vctxt, ctxt->myDoc,
 	                                           ret, prefix, ns, uri);
 	}
 #endif /* LIBXML_VALID_ENABLED */
     }
     ctxt->nodemem = -1;
 
     /*
      * We are parsing a new node.
      */
     if (nodePush(ctxt, ret) < 0) {
         xmlUnlinkNode(ret);
         xmlFreeNode(ret);
         return;
     }
 
     /*
      * Link the child element
      */
     if (parent != NULL) {
         if (parent->type == XML_ELEMENT_NODE) {
 	    xmlAddChild(parent, ret);
 	} else {
 	    xmlAddSibling(parent, ret);
 	}
     }
 
     /*
      * Insert the defaulted attributes from the DTD only if requested:
      */
     if ((nb_defaulted != 0) &&
         ((ctxt->loadsubset & XML_COMPLETE_ATTRS) == 0))
 	nb_attributes -= nb_defaulted;
 
     /*
      * Search the namespace if it wasn't already found
      * Note that, if prefix is NULL, this searches for the default Ns
      */
     if ((URI != NULL) && (ret->ns == NULL)) {
         ret->ns = xmlSearchNs(ctxt->myDoc, parent, prefix);
 	if ((ret->ns == NULL) && (xmlStrEqual(prefix, BAD_CAST "xml"))) {
 	    ret->ns = xmlSearchNs(ctxt->myDoc, ret, prefix);
 	}
 	if (ret->ns == NULL) {
 	    ns = xmlNewNs(ret, NULL, prefix);
 	    if (ns == NULL) {
 
 	        xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElementNs");
 		return;
 	    }
             if (prefix != NULL)
                 xmlNsWarnMsg(ctxt, XML_NS_ERR_UNDEFINED_NAMESPACE,
                              "Namespace prefix %s was not found\n",
                              prefix, NULL);
             else
                 xmlNsWarnMsg(ctxt, XML_NS_ERR_UNDEFINED_NAMESPACE,
                              "Namespace default prefix was not found\n",
                              NULL, NULL);
 	}
     }
 
     /*
      * process all the other attributes
      */
     if (nb_attributes > 0) {
         for (j = 0,i = 0;i < nb_attributes;i++,j+=5) {
 	    /*
 	     * Handle the rare case of an undefined atribute prefix
 	     */
 	    if ((attributes[j+1] != NULL) && (attributes[j+2] == NULL)) {
 		if (ctxt->dictNames) {
 		    const xmlChar *fullname;
 
 		    fullname = xmlDictQLookup(ctxt->dict, attributes[j+1],
 		                              attributes[j]);
 		    if (fullname != NULL) {
 			xmlSAX2AttributeNs(ctxt, fullname, NULL,
 			                   attributes[j+3], attributes[j+4]);
 		        continue;
 		    }
 		} else {
 		    lname = xmlBuildQName(attributes[j], attributes[j+1],
 		                          NULL, 0);
 		    if (lname != NULL) {
 			xmlSAX2AttributeNs(ctxt, lname, NULL,
 			                   attributes[j+3], attributes[j+4]);
 			xmlFree(lname);
 		        continue;
 		    }
 		}
 	    }
 	    xmlSAX2AttributeNs(ctxt, attributes[j], attributes[j+1],
 			       attributes[j+3], attributes[j+4]);
 	}
     }
 
 #ifdef LIBXML_VALID_ENABLED
     /*
      * If it's the Document root, finish the DTD validation and
      * check the document root element for validity
      */
     if ((ctxt->validate) && (ctxt->vctxt.finishDtd == XML_CTXT_FINISH_DTD_0)) {
 	int chk;
 
 	chk = xmlValidateDtdFinal(&ctxt->vctxt, ctxt->myDoc);
 	if (chk <= 0)
 	    ctxt->valid = 0;
 	if (chk < 0)
 	    ctxt->wellFormed = 0;
 	ctxt->valid &= xmlValidateRoot(&ctxt->vctxt, ctxt->myDoc);
 	ctxt->vctxt.finishDtd = XML_CTXT_FINISH_DTD_1;
     }
 #endif /* LIBXML_VALID_ENABLED */
 }
 
 /**
  * xmlSAX2EndElementNs:
  * @ctx:  the user data (XML parser context)
  * @localname:  the local name of the element
  * @prefix:  the element namespace prefix if available
  * @URI:  the element namespace name if available
  *
  * SAX2 callback when an element end has been detected by the parser.
  * It provides the namespace informations for the element.
  */
