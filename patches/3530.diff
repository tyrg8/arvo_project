commit 1771ccd2ae924ad6e2c3ac25f0f599acfcde28d1
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Mon Oct 2 19:28:40 2017 +0300

    SamsungV2Decompressor::decompressRow(): and one more fix...

diff --git a/src/librawspeed/decompressors/SamsungV2Decompressor.cpp b/src/librawspeed/decompressors/SamsungV2Decompressor.cpp
index 5ec06be6..2647be02 100644
--- a/src/librawspeed/decompressors/SamsungV2Decompressor.cpp
+++ b/src/librawspeed/decompressors/SamsungV2Decompressor.cpp
@@ -162,163 +162,162 @@ template <SamsungV2Decompressor::OptFlags optflags>
 void SamsungV2Decompressor::decompressRow(uint32 row) {
   // The format is relatively straightforward. Each line gets encoded as a set
   // of differences from pixels from another line. Pixels are grouped in blocks
   // of 16 (8 green, 8 red or blue). Each block is encoded in three sections.
   // First 1 or 4 bits to specify which reference pixels to use, then a section
   // that specifies for each pixel the number of bits in the difference, then
   // the actual difference bits
 
   // Align pump to 16byte boundary
   const auto line_offset = data.getPosition();
   if ((line_offset & 0xf) != 0)
     data.skipBytes(16 - (line_offset & 0xf));
 
   BitPumpMSB32 pump(data);
 
   auto* img = reinterpret_cast<ushort16*>(mRaw->getData(0, row));
   ushort16* img_up = reinterpret_cast<ushort16*>(
       mRaw->getData(0, std::max(0, static_cast<int>(row) - 1)));
   ushort16* img_up2 = reinterpret_cast<ushort16*>(
       mRaw->getData(0, std::max(0, static_cast<int>(row) - 2)));
 
   // Initialize the motion and diff modes at the start of the line
   uint32 motion = 7;
   // By default we are not scaling values at all
   int32 scale = 0;
 
   uint32 diffBitsMode[3][2] = {{0}};
   for (auto& i : diffBitsMode)
     i[0] = i[1] = (row == 0 || row == 1) ? 7 : 4;
 
   assert(width >= 16);
   assert(width % 16 == 0);
   for (uint32 col = 0; col < width; col += 16) {
     if (!(optflags & OptFlags::QP) && !(col & 63)) {
       static constexpr int32 scalevals[] = {0, -2, 2};
       uint32 i = pump.getBits(2);
       scale = i < 3 ? scale + scalevals[i] : pump.getBits(12);
     }
 
     // First we figure out which reference pixels mode we're in
     if (optflags & OptFlags::MV)
       motion = pump.getBits(1) ? 3 : 7;
     else if (!pump.getBits(1))
       motion = pump.getBits(3);
 
     if ((row == 0 || row == 1) && (motion != 7))
       ThrowRDE("At start of image and motion isn't 7. File corrupted?");
 
     if (motion == 7) {
       // The base case, just set all pixels to the previous ones on the same
       // line If we're at the left edge we just start at the initial value
       for (uint32 i = 0; i < 16; i++)
         img[i] = (col == 0) ? initVal : *(img + i - 2);
     } else {
       // The complex case, we now need to actually lookup one or two lines
       // above
       if (row < 2)
         ThrowRDE(
             "Got a previous line lookup on first two lines. File corrupted?");
 
       static constexpr int32 motionOffset[7] = {-4, -2, -2, 0, 0, 2, 4};
       static constexpr int32 motionDoAverage[7] = {0, 0, 1, 0, 1, 0, 0};
 
       int32 slideOffset = motionOffset[motion];
       int32 doAverage = motionDoAverage[motion];
 
       for (uint32 i = 0; i < 16; i++) {
+        ushort16* line;
         ushort16* refpixel;
 
         if ((row + i) & 0x1) {
           // Red or blue pixels use same color two lines up
-          refpixel = img_up2 + i + slideOffset;
-
-          if (col == 0 && img_up2 > refpixel)
-            ThrowRDE("Bad motion %u at the beginning of the row", motion);
-          if (col + 16 == width &&
-              ((refpixel >= img_up2 + 16) ||
-               (doAverage && (refpixel + 2 >= img_up2 + 16))))
-            ThrowRDE("Bad motion %u at the end of the row", motion);
+          line = img_up2;
+          refpixel = line + i + slideOffset;
         } else {
           // Green pixel N uses Green pixel N from row above
           // (top left or top right)
-          refpixel = img_up + i + slideOffset + (((i % 2) != 0) ? -1 : 1);
-
-          if (col == 0 && img_up > refpixel)
-            ThrowRDE("Bad motion %u at the beginning of the row", motion);
+          line = img_up;
+          refpixel = line + i + slideOffset + (((i % 2) != 0) ? -1 : 1);
         }
 
+        if (col == 0 && line > refpixel)
+          ThrowRDE("Bad motion %u at the beginning of the row", motion);
+        if (col + 16 == width && ((refpixel >= line + 16) ||
+                                  (doAverage && (refpixel + 2 >= line + 16))))
+          ThrowRDE("Bad motion %u at the end of the row", motion);
+
         // In some cases we use as reference interpolation of this pixel and
         // the next
         if (doAverage)
           img[i] = (*refpixel + *(refpixel + 2) + 1) >> 1;
         else
           img[i] = *refpixel;
       }
     }
 
     // Figure out how many difference bits we have to read for each pixel
     uint32 diffBits[4] = {0};
     if (optflags & OptFlags::SKIP || !pump.getBits(1)) {
       uint32 flags[4];
       for (unsigned int& flag : flags)
         flag = pump.getBits(2);
 
       for (uint32 i = 0; i < 4; i++) {
         // The color is 0-Green 1-Blue 2-Red
         uint32 colornum = (row % 2 != 0) ? i >> 1 : ((i >> 1) + 2) % 3;
 
         assert(flags[i] <= 3);
         switch (flags[i]) {
         case 0:
           diffBits[i] = diffBitsMode[colornum][0];
           break;
         case 1:
           diffBits[i] = diffBitsMode[colornum][0] + 1;
           break;
         case 2:
           diffBits[i] = diffBitsMode[colornum][0] - 1;
           break;
         case 3:
           diffBits[i] = pump.getBits(4);
           break;
         default:
           __builtin_unreachable();
         }
 
         diffBitsMode[colornum][0] = diffBitsMode[colornum][1];
         diffBitsMode[colornum][1] = diffBits[i];
 
         if (diffBits[i] > bitDepth + 1)
           ThrowRDE("Too many difference bits. File corrupted?");
       }
     }
 
     // Actually read the differences and write them to the pixels
     for (uint32 i = 0; i < 16; i++) {
       uint32 len = diffBits[i >> 2];
       int32 diff = pump.getBits(len);
 
       // If the first bit is 1 we need to turn this into a negative number
       if (len != 0 && diff >> (len - 1))
         diff -= (1 << len);
 
       ushort16* value = nullptr;
       // Apply the diff to pixels 0 2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
       if (row % 2)
         value = &img[((i & 0x7) << 1) + 1 - (i >> 3)];
       else
         value = &img[((i & 0x7) << 1) + (i >> 3)];
 
       diff = diff * (scale * 2 + 1) + scale;
       *value = clampBits(static_cast<int>(*value) + diff, bits);
     }
 
     img += 16;
     img_up += 16;
     img_up2 += 16;
   }
 
   data.skipBytes(pump.getBufferPosition());
 }
 
 } // namespace rawspeed
