commit 5cdf86d363747a5e0b67165d32ab512ff50d83d2
Author: Alan Modra <amodra@gmail.com>
Date:   Mon Apr 3 12:35:53 2023 +0930

    asan: csky floatformat_to_double uninitialised value
    
            * csky-dis.c (csky_print_operand <OPRND_TYPE_FCONSTANT>): Don't
            access ibytes after read_memory_func error.  Change type of
            ibytes to avoid casts.

diff --git a/opcodes/csky-dis.c b/opcodes/csky-dis.c
index fc7d595ccec..1deea049d7e 100644
--- a/opcodes/csky-dis.c
+++ b/opcodes/csky-dis.c
@@ -301,647 +301,643 @@ static int
 csky_output_operand (char *str, struct operand const *oprnd,
 		     CSKY_INST_TYPE inst, int reloc ATTRIBUTE_UNUSED)
 {
   int ret = 0;;
   int bit = 0;
   int result = 0;
   bfd_vma value;
   int mask = oprnd->mask;
   int max = 0;
   char buf[128];
 
   /* Get operand value with mask.  */
   value = inst & mask;
   for (; mask; mask >>= 1, value >>=1)
     if (mask & 0x1)
       {
 	result |= ((value & 0x1) << bit);
 	max |= (1 << bit);
 	bit++;
       }
   value = result;
 
   /* Here is general instructions that have no reloc.  */
   switch (oprnd->type)
     {
     case OPRND_TYPE_CTRLREG:
 	if (IS_CSKY_V1(mach_flag) && ((value & 0x1f) == 0x1f))
 	  return -1;
 	strcat (str, get_cr_name((value & 0x1f), (value >> 5)));
 	break;
     case OPRND_TYPE_DUMMY_REG:
       mask = dis_info.opinfo->oprnd.oprnds[0].mask;
       value = inst & mask;
       for (; mask; mask >>= 1, value >>=1)
 	if (mask & 0x1)
 	  {
 	    result |= ((value & 0x1) << bit);
 	    bit++;
 	  }
       value = result;
       strcat (str, get_gr_name (value));
       break;
     case OPRND_TYPE_GREG0_7:
     case OPRND_TYPE_GREG0_15:
     case OPRND_TYPE_GREG16_31:
     case OPRND_TYPE_REGnsplr:
     case OPRND_TYPE_AREG:
       strcat (str, get_gr_name (value));
       break;
     case OPRND_TYPE_CPREG:
       sprintf (buf, "cpr%d", (int)value);
       strcat (str, buf);
       break;
     case OPRND_TYPE_FREG:
       sprintf (buf, "fr%d", (int)value);
       strcat (str, buf);
       break;
     case OPRND_TYPE_VREG:
       dis_info.value = value;
       sprintf (buf, "vr%d", (int)value);
       strcat (str, buf);
       break;
     case OPRND_TYPE_CPCREG:
       sprintf (buf, "cpcr%d", (int)value);
       strcat (str, buf);
       break;
     case OPRND_TYPE_CPIDX:
       sprintf (buf, "cp%d", (int)value);
       strcat (str, buf);
       break;
     case OPRND_TYPE_IMM2b_JMPIX:
       value = (value + 2) << 3;
       sprintf (buf, "%d", (int)value);
       strcat (str, buf);
       break;
     case OPRND_TYPE_IMM_LDST:
     case OPRND_TYPE_IMM_FLDST:
       value <<= oprnd->shift;
       sprintf (buf, "0x%x", (unsigned int)value);
       strcat (str, buf);
       break;
     case OPRND_TYPE_IMM7b_LS2:
     case OPRND_TYPE_IMM8b_LS2:
       sprintf (buf, "%d", (int)(value << 2));
       strcat (str, buf);
       ret = 0;
       break;
     case OPRND_TYPE_IMM5b_BMASKI:
       if ((value != 0) && (value > 31 || value < 8))
 	{
 	  ret = -1;
 	  break;
 	}
       sprintf (buf, "%d", (int)value);
       strcat (str, buf);
       ret = 0;
       break;
     case OPRND_TYPE_IMM5b_1_31:
       if (value > 31 || value < 1)
 	{
 	  ret = -1;
 	  break;
 	}
       sprintf (buf, "%d", (int)value);
       strcat (str, buf);
       ret = 0;
       break;
     case OPRND_TYPE_IMM5b_7_31:
       if (value > 31 || value < 7)
 	{
 	  ret = -1;
 	  break;
 	}
       sprintf (buf, "%d", (int)value);
       strcat (str, buf);
       ret = 0;
       break;
     case OPRND_TYPE_IMM5b_VSH:
       {
 	char num[128];
 	value = ((value & 0x1) << 4) | (value >> 1);
 	sprintf (num, "%d", (int)value);
 	strcat (str, num);
 	ret = 0;
 	break;
       }
     case OPRND_TYPE_MSB2SIZE:
     case OPRND_TYPE_LSB2SIZE:
       {
 	static int size;
 	if (oprnd->type == OPRND_TYPE_MSB2SIZE)
 	  size = value;
 	else
 	  {
 	    str[strlen (str) - 2] = '\0';
 	    sprintf (buf, "%d, %d", (int)(size + value), (int)value);
 	    strcat (str, buf);
 	  }
 	break;
       }
     case OPRND_TYPE_IMM1b:
     case OPRND_TYPE_IMM2b:
     case OPRND_TYPE_IMM4b:
     case OPRND_TYPE_IMM5b:
     case OPRND_TYPE_IMM5b_LS:
     case OPRND_TYPE_IMM7b:
     case OPRND_TYPE_IMM8b:
     case OPRND_TYPE_IMM12b:
     case OPRND_TYPE_IMM15b:
     case OPRND_TYPE_IMM16b:
     case OPRND_TYPE_IMM16b_MOVIH:
     case OPRND_TYPE_IMM16b_ORI:
       sprintf (buf, "%d", (int)value);
       strcat (str, buf);
       ret = 0;
       break;
     case OPRND_TYPE_OFF8b:
     case OPRND_TYPE_OFF16b:
       {
 	unsigned char ibytes[4];
 	int shift = oprnd->shift;
 	int status;
 	unsigned int mem_val;
 
 	dis_info.info->stop_vma = 0;
 
 	value = ((dis_info.mem + (value << shift)
 		  + ((IS_CSKY_V1 (mach_flag)) ? 2 : 0))
 		 & 0xfffffffc);
 	status = dis_info.info->read_memory_func (value, ibytes, 4,
 						  dis_info.info);
 	if (status != 0)
 	  {
 	    dis_info.info->memory_error_func (status, dis_info.mem,
 					      dis_info.info);
 	    return -1;
 	  }
 	mem_val = csky_chars_to_number (ibytes, 4);
 	/* Remove [] around literal value to match ABI syntax.  */
 	sprintf (buf, "0x%X", mem_val);
 	strcat (str, buf);
 	/* For jmpi/jsri, we'll try to get a symbol for the target.  */
 	if (dis_info.info->print_address_func && mem_val != 0)
 	  {
 	    dis_info.value = mem_val;
 	    dis_info.need_output_symbol = 1;
 	  }
 	else
 	  {
 	    sprintf (buf, "\t// from address pool at 0x%x",
 		     (unsigned int)value);
 	    strcat (str, buf);
 	  }
 	break;
       }
     case OPRND_TYPE_BLOOP_OFF4b:
     case OPRND_TYPE_BLOOP_OFF12b:
     case OPRND_TYPE_OFF11b:
     case OPRND_TYPE_OFF16b_LSL1:
     case OPRND_TYPE_IMM_OFF18b:
     case OPRND_TYPE_OFF26b:
       {
 	int shift = oprnd->shift;
 	if (value & ((max >> 1) + 1))
 	  value |= ~max;
 	if (is_extern_symbol (dis_info.info, dis_info.mem))
 	  value = 0;
 	else if (IS_CSKY_V1 (mach_flag))
 	  value = dis_info.mem + 2 + (value << shift);
 	else
 	  value = dis_info.mem + (value << shift);
 	dis_info.need_output_symbol = 1;
 	dis_info.value= value;
 	sprintf (buf, "0x%x", (unsigned int)value);
 	strcat (str, buf);
 	break;
       }
     case OPRND_TYPE_CONSTANT:
     case OPRND_TYPE_FCONSTANT:
       {
 	int shift = oprnd->shift;
-	char ibytes[8];
+	bfd_byte ibytes[8];
 	int status;
 	bfd_vma addr;
 	int nbytes;
 
 	dis_info.info->stop_vma = 0;
 	value <<= shift;
 
 	if (IS_CSKY_V1 (mach_flag))
 	  addr = (dis_info.mem + 2 + value) & 0xfffffffc;
 	else
 	  addr = (dis_info.mem + value) & 0xfffffffc;
 
 	if (oprnd->type == OPRND_TYPE_FCONSTANT
 	    && dis_info.opinfo->opcode != CSKYV2_INST_FLRW)
 	  nbytes = 8;
 	else
 	  nbytes = 4;
 
-	status = dis_info.info->read_memory_func (addr, (bfd_byte *)ibytes,
+	status = dis_info.info->read_memory_func (addr, ibytes,
 						  nbytes, dis_info.info);
 	if (status != 0)
 	  /* Address out of bounds.  -> lrw rx, [pc, 0ffset]. */
 	  sprintf (buf, "[pc, %d]\t// from address pool at %x", (int)value,
 		   (unsigned int)addr);
-	else
-	  {
-	    dis_info.value = addr;
-	    value = csky_chars_to_number ((unsigned char *)ibytes, 4);
-	  }
-
-	if (oprnd->type == OPRND_TYPE_FCONSTANT)
+	else if (oprnd->type == OPRND_TYPE_FCONSTANT)
 	  {
 	    double f;
 
 	    if (dis_info.opinfo->opcode == CSKYV2_INST_FLRW)
 	      /* flrws.  */
 	      floatformat_to_double ((dis_info.info->endian == BFD_ENDIAN_BIG
 				      ? &floatformat_ieee_single_big
 				      : &floatformat_ieee_single_little),
 				     ibytes, &f);
 	    else
 	      floatformat_to_double ((dis_info.info->endian == BFD_ENDIAN_BIG
 				      ? &floatformat_ieee_double_big
 				      : &floatformat_ieee_double_little),
 				     ibytes, &f);
 	    sprintf (buf, "%.7g", f);
 	  }
 	else
 	  {
+	    dis_info.value = addr;
 	    dis_info.need_output_symbol = 1;
-	    sprintf (buf, "0x%x", (unsigned int)value);
+	    value = csky_chars_to_number (ibytes, 4);
+	    sprintf (buf, "0x%x", (unsigned int) value);
 	  }
 
 	strcat (str, buf);
 	break;
       }
     case OPRND_TYPE_ELRW_CONSTANT:
       {
 	int shift = oprnd->shift;
 	char ibytes[4];
 	int status;
 	bfd_vma addr;
 	dis_info.info->stop_vma = 0;
 
 	value = 0x80 + ((~value) & 0x7f);
 
 	value = value << shift;
 	addr = (dis_info.mem + value) & 0xfffffffc;
 
 	status = dis_info.info->read_memory_func (addr, (bfd_byte *)ibytes,
 						  4, dis_info.info);
 	if (status != 0)
 	  /* Address out of bounds.  -> lrw rx, [pc, 0ffset]. */
 	  sprintf (buf, "[pc, %d]\t// from address pool at %x", (int) value,
 		   (unsigned int)addr);
 	else
 	  {
 	    dis_info.value = addr;
 	    value = csky_chars_to_number ((unsigned char *)ibytes, 4);
 	    dis_info.need_output_symbol = 1;
 	    sprintf (buf, "0x%x", (unsigned int)value);
 	  }
 
 	strcat (str, buf);
 	break;
       }
     case OPRND_TYPE_SFLOAT:
     case OPRND_TYPE_DFLOAT:
       {
 	/* This is for fmovis/fmovid, which have an internal 13-bit
 	   encoding that they convert to single/double precision
 	   (respectively).  We'll convert the 13-bit encoding to an IEEE
 	   double and then to host double format to print it.
 	   Sign bit: bit 20.
 	   4-bit exponent: bits 19:16, biased by 11.
 	   8-bit mantissa: split between 24:21 and 7:4.  */
 	uint64_t imm4;
 	uint64_t imm8;
 	uint64_t dbnum;
 	unsigned char valbytes[8];
 	double fvalue;
 
 	imm4 = ((inst >> 16) & 0xf);
 	imm4 = (uint64_t)(1023 - (imm4 - 11)) << 52;
 
 	imm8 = (uint64_t)((inst >> 4) & 0xf) << 44;
 	imm8 |= (uint64_t)((inst >> 21) & 0xf) << 48;
 
 	dbnum = (uint64_t)((inst >> 20) & 1) << 63;
 	dbnum |= imm4 | imm8;
 
 	/* Do this a byte at a time so we don't have to
 	   worry about the host's endianness.  */
 	valbytes[0] = dbnum & 0xff;
 	valbytes[1] = (dbnum >> 8) & 0xff;
 	valbytes[2] = (dbnum >> 16) & 0xff;
 	valbytes[3] = (dbnum >> 24) & 0xff;
 	valbytes[4] = (dbnum >> 32) & 0xff;
 	valbytes[5] = (dbnum >> 40) & 0xff;
 	valbytes[6] = (dbnum >> 48) & 0xff;
 	valbytes[7] = (dbnum >> 56) & 0xff;
 
 	floatformat_to_double (&floatformat_ieee_double_little, valbytes,
 			       &fvalue);
 
 	sprintf (buf, "%.7g", fvalue);
 	strcat (str, buf);
 	break;
       }
     case OPRND_TYPE_HFLOAT_FMOVI:
     case OPRND_TYPE_SFLOAT_FMOVI:
       {
 	int imm4;
 	int imm8;
 	imm4 = ((inst >> 16) & 0xf);
 	imm4 = (138 - imm4) << 23;
 
 	imm8 = ((inst >> 8) & 0x3);
 	imm8 |= (((inst >> 20) & 0x3f) << 2);
 	imm8 <<= 15;
 
 	value = ((inst >> 5) & 1) << 31;
 	value |= imm4 | imm8;
 
 	imm4 = 138 - (imm4 >> 23);
 	imm8 >>= 15;
 	if ((inst >> 5) & 1)
 	  {
 	    imm8 = 0 - imm8;
 	  }
 
 	float f = 0;
 	memcpy (&f, &value, sizeof (float));
 	sprintf (buf, "%.7g\t// imm9:%4d, imm4:%2d", f, imm8, imm4);
 	strcat (str, buf);
 
 	break;
       }
 
     case OPRND_TYPE_DFLOAT_FMOVI:
       {
 	uint64_t imm4;
 	uint64_t imm8;
 	uint64_t dvalue;
 	imm4 = ((inst >> 16) & 0xf);
 	imm4 = (1034 - imm4) << 52;
 
 	imm8 = ((inst >> 8) & 0x3);
 	imm8 |= (((inst >> 20) & 0x3f) << 2);
 	imm8 <<= 44;
 
 	dvalue = (((uint64_t)inst >> 5) & 1) << 63;
 	dvalue |= imm4 | imm8;
 
 	imm4 = 1034 - (imm4 >> 52);
 	imm8 >>= 44;
 	if (inst >> 5)
 	  {
 	    imm8 = 0 - imm8;
 	  }
 	double d = 0;
 	memcpy (&d, &dvalue, sizeof (double));
 	sprintf (buf, "%.7g\t// imm9:%4ld, imm4:%2ld", d, (long) imm8, (long) imm4);
 	strcat (str, buf);
 
 	break;
       }
     case OPRND_TYPE_LABEL_WITH_BRACKET:
       sprintf (buf, "[0x%x]", (unsigned int)value);
       strcat (str, buf);
       strcat (str, "\t// the offset is based on .data");
       break;
     case OPRND_TYPE_OIMM3b:
     case OPRND_TYPE_OIMM4b:
     case OPRND_TYPE_OIMM5b:
     case OPRND_TYPE_OIMM5b_IDLY:
     case OPRND_TYPE_OIMM8b:
     case OPRND_TYPE_OIMM12b:
     case OPRND_TYPE_OIMM16b:
     case OPRND_TYPE_OIMM18b:
       value += 1;
       sprintf (buf, "%d", (int)value);
       strcat (str, buf);
       break;
     case OPRND_TYPE_OIMM5b_BMASKI:
       if (value > 32 || value < 16)
 	{
 	  ret = -1;
 	  break;
 	}
       sprintf (buf, "%d", (int)(value + 1));
       strcat (str, buf);
       ret = 0;
       break;
     case OPRND_TYPE_FREGLIST_DASH:
       if (IS_CSKY_V2 (mach_flag))
 	{
 	  int vrx = 0;
 	  int vry = 0;
 	  if (dis_info.isa & CSKY_ISA_FLOAT_7E60
 	      && (strstr (str, "fstm") != NULL
 		  || strstr (str, "fldm") != NULL))
 	    {
 	      vrx = value & 0x1f;
 	      vry = vrx + (value >> 5);
 	    }
 	  else
 	    {
 	      vrx = value & 0xf;
 	      vry = vrx + (value >> 4);
 	    }
 	  sprintf (buf, "fr%d-fr%d", vrx, vry);
 	  strcat (str, buf);
 	}
       break;
     case OPRND_TYPE_REGLIST_DASH:
       if (IS_CSKY_V1 (mach_flag))
 	{
 	  sprintf (buf, "%s-r15", get_gr_name (value));
 	  strcat (str, buf);
 	}
       else
 	{
 	  if ((value & 0x1f) + (value >> 5) > 31)
 	    {
 	      ret = -1;
 	      break;
 	    }
 	  strcat (str, get_gr_name ((value >> 5)));
 	  strcat (str, "-");
 	  strcat (str, get_gr_name ((value & 0x1f) + (value >> 5)));
 	}
       break;
     case OPRND_TYPE_PSR_BITS_LIST:
       {
 	struct psrbit const *bits;
 	int first_oprnd = true;
 	int i = 0;
 	if (IS_CSKY_V1 (mach_flag))
 	  {
 	    if (value == 0)
 	      {
 		strcat (str, "af");
 		break;
 	      }
 	    bits = cskyv1_psr_bits;
 	  }
 	else
 	  bits = cskyv2_psr_bits;
 	while (value != 0 && bits[i].name != NULL)
 	    {
 	      if (value & bits[i].value)
 		{
 		  if (!first_oprnd)
 		    strcat (str, ", ");
 		  strcat (str, bits[i].name);
 		  value &= ~bits[i].value;
 		  first_oprnd = false;
 		}
 	      i++;
 	    }
 	break;
       }
     case OPRND_TYPE_REGbsp:
       if (IS_CSKY_V1 (mach_flag))
 	sprintf(buf, "(%s)", get_gr_name (0));
       else
 	sprintf(buf, "(%s)", get_gr_name (14));
       strcat (str, buf);
       break;
     case OPRND_TYPE_REGsp:
       if (IS_CSKY_V1 (mach_flag))
 	strcat (str, get_gr_name (0));
       else
 	strcat (str, get_gr_name (14));
       break;
     case OPRND_TYPE_REGnr4_r7:
     case OPRND_TYPE_AREG_WITH_BRACKET:
       strcat (str, "(");
       strcat (str, get_gr_name (value));
       strcat (str, ")");
       break;
     case OPRND_TYPE_AREG_WITH_LSHIFT:
       strcat (str, get_gr_name (value >> 5));
       strcat (str, " << ");
       if ((value & 0x1f) == 0x1)
 	strcat (str, "0");
       else if ((value & 0x1f) == 0x2)
 	strcat (str, "1");
       else if ((value & 0x1f) == 0x4)
 	strcat (str, "2");
       else if ((value & 0x1f) == 0x8)
 	strcat (str, "3");
       break;
     case OPRND_TYPE_AREG_WITH_LSHIFT_FPU:
       strcat (str, get_gr_name (value >> 2));
       strcat (str, " << ");
       if ((value & 0x3) == 0x0)
 	strcat (str, "0");
       else if ((value & 0x3) == 0x1)
 	strcat (str, "1");
       else if ((value & 0x3) == 0x2)
 	strcat (str, "2");
       else if ((value & 0x3) == 0x3)
 	strcat (str, "3");
       break;
     case OPRND_TYPE_VREG_WITH_INDEX:
       {
 	unsigned freg_val = value & 0xf;
 	unsigned index_val = (value >> 4) & 0xf;
 	sprintf (buf, "vr%d[%d]", freg_val, index_val);
 	strcat(str, buf);
 	break;
       }
     case OPRND_TYPE_FREG_WITH_INDEX:
       {
 	unsigned freg_val = value & 0xf;
 	unsigned index_val = (value >> 4) & 0xf;
 	sprintf (buf, "fr%d[%d]", freg_val, index_val);
 	strcat(str, buf);
 	break;
       }
     case OPRND_TYPE_REGr4_r7:
       if (IS_CSKY_V1 (mach_flag))
 	{
 	  sprintf (buf, "%s-%s", get_gr_name (4), get_gr_name (7));
 	  strcat (str, buf);
 	}
       break;
     case OPRND_TYPE_CONST1:
       strcat (str, "1");
       break;
     case OPRND_TYPE_REG_r1a:
     case OPRND_TYPE_REG_r1b:
       strcat (str, get_gr_name (1));
       break;
     case OPRND_TYPE_REG_r28:
       strcat (str, get_gr_name (28));
       break;
     case OPRND_TYPE_REGLIST_DASH_COMMA:
       /* 16-bit reglist.  */
       if (value & 0xf)
 	{
 	  strcat (str, get_gr_name (4));
 	  if ((value & 0xf) > 1)
 	    {
 	      strcat (str, "-");
 	      strcat (str, get_gr_name ((value & 0xf) + 3));
 	    }
 	  if (value & ~0xf)
 	    strcat (str, ", ");
 	}
       if (value & 0x10)
 	{
 	  /* r15.  */
 	  strcat (str, get_gr_name (15));
 	  if (value & ~0x1f)
 	    strcat (str, ", ");
 	}
       if (dis_info.opinfo->oprnd.oprnds[0].mask != OPRND_MASK_0_4)
 	{
 	  /* 32bits reglist.  */
 	  value >>= 5;
 	  if (value & 0x3)
 	    {
 	      strcat (str, get_gr_name (16));
 	      if ((value & 0x7) > 1)
 		{
 		  strcat (str, "-");
 		  strcat (str, get_gr_name ((value & 0x7) + 15));
 		}
 	      if (value & ~0x7)
 		strcat (str, ", ");
 	      }
 	  if (value & 0x8)
 	    /* r15.  */
 	    strcat (str, get_gr_name (28));
 	}
       break;
     case OPRND_TYPE_UNCOND10b:
     case OPRND_TYPE_UNCOND16b:
     case OPRND_TYPE_COND10b:
     case OPRND_TYPE_COND16b:
       {
 	int shift = oprnd->shift;
 
 	if (value & ((max >> 1) + 1))
 	  value |= ~max;
 	if (is_extern_symbol (dis_info.info, dis_info.mem))
 	  value = 0;
 	else
 	  value = dis_info.mem + (value << shift);
 	sprintf (buf, "0x%x", (unsigned int)value);
 	strcat (str, buf);
 	dis_info.need_output_symbol = 1;
 	dis_info.value = value;
       }
       break;
 
     default:
       ret = -1;
       break;
     }
   return ret;
 }
