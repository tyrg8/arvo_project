commit b32fbf1ea48a470212110bbf9fae80d4acfeede9
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Tue May 30 11:22:53 2017 +0000

    GDALOpen(): make it FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION friendly
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@38689 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/gcore/gdaldataset.cpp b/gdal/gcore/gdaldataset.cpp
index 269487a983..e1b90f2fdd 100644
--- a/gdal/gcore/gdaldataset.cpp
+++ b/gdal/gcore/gdaldataset.cpp
@@ -2662,351 +2662,366 @@ GDALOpen( const char * pszFilename, GDALAccess eAccess )
 GDALDatasetH CPL_STDCALL GDALOpenEx( const char *pszFilename,
                                      unsigned int nOpenFlags,
                                      const char *const *papszAllowedDrivers,
                                      const char *const *papszOpenOptions,
                                      const char *const *papszSiblingFiles )
 {
     VALIDATE_POINTER1(pszFilename, "GDALOpen", NULL);
 
 /* -------------------------------------------------------------------- */
 /*      In case of shared dataset, first scan the existing list to see  */
 /*      if it could already contain the requested dataset.              */
 /* -------------------------------------------------------------------- */
     if( nOpenFlags & GDAL_OF_SHARED )
     {
         if( nOpenFlags & GDAL_OF_INTERNAL )
         {
             CPLError(CE_Failure, CPLE_IllegalArg,
                      "GDAL_OF_SHARED and GDAL_OF_INTERNAL are exclusive");
             return NULL;
         }
 
         CPLMutexHolderD(&hDLMutex);
 
         if (phSharedDatasetSet != NULL)
         {
             const GIntBig nThisPID = GDALGetResponsiblePIDForCurrentThread();
             SharedDatasetCtxt sStruct;
 
             sStruct.nPID = nThisPID;
             sStruct.pszDescription = const_cast<char *>(pszFilename);
             sStruct.eAccess =
                 (nOpenFlags & GDAL_OF_UPDATE) ? GA_Update : GA_ReadOnly;
             SharedDatasetCtxt *psStruct = static_cast<SharedDatasetCtxt *>(
                 CPLHashSetLookup(phSharedDatasetSet, &sStruct));
             if (psStruct == NULL && (nOpenFlags & GDAL_OF_UPDATE) == 0)
             {
                 sStruct.eAccess = GA_Update;
                 psStruct = static_cast<SharedDatasetCtxt *>(
                     CPLHashSetLookup(phSharedDatasetSet, &sStruct));
             }
             if (psStruct)
             {
                 psStruct->poDS->Reference();
                 return psStruct->poDS;
             }
         }
     }
 
     // If no driver kind is specified, assume all are to be probed.
     if( (nOpenFlags & GDAL_OF_KIND_MASK) == 0 )
         nOpenFlags |= GDAL_OF_KIND_MASK;
 
     GDALDriverManager *poDM = GetGDALDriverManager();
     // CPLLocaleC  oLocaleForcer;
 
     CPLErrorReset();
     VSIErrorReset();
     CPLAssert(NULL != poDM);
 
     // Build GDALOpenInfo just now to avoid useless file stat'ing if a
     // shared dataset was asked before.
     GDALOpenInfo oOpenInfo(pszFilename, nOpenFlags,
                            const_cast<char **>(papszSiblingFiles));
     oOpenInfo.papszAllowedDrivers = papszAllowedDrivers;
 
     // Prevent infinite recursion.
     {
         int *pnRecCount =
             static_cast<int *>(CPLGetTLS(CTLS_GDALDATASET_REC_PROTECT_MAP));
         if( pnRecCount == NULL )
         {
             pnRecCount = static_cast<int *>(CPLMalloc(sizeof(int)));
             *pnRecCount = 0;
             CPLSetTLS(CTLS_GDALDATASET_REC_PROTECT_MAP, pnRecCount, TRUE);
         }
         if( *pnRecCount == 100 )
         {
             CPLError(CE_Failure, CPLE_AppDefined,
                      "GDALOpen() called with too many recursion levels");
             return NULL;
         }
         (*pnRecCount)++;
     }
 
     // Remove leading @ if present.
     char **papszOpenOptionsCleaned =
         CSLDuplicate(const_cast<char **>(papszOpenOptions));
     for(char **papszIter = papszOpenOptionsCleaned; papszIter && *papszIter;
         ++papszIter)
     {
         char *pszOption = *papszIter;
         if( pszOption[0] == '@' )
             memmove(pszOption, pszOption + 1, strlen(pszOption + 1) + 1);
     }
 
     oOpenInfo.papszOpenOptions = papszOpenOptionsCleaned;
 
     for( int iDriver = -1; iDriver < poDM->GetDriverCount(); ++iDriver )
     {
         GDALDriver *poDriver = NULL;
 
         if( iDriver < 0 )
         {
             poDriver = GDALGetAPIPROXYDriver();
         }
         else
         {
             poDriver = poDM->GetDriver(iDriver);
             if (papszAllowedDrivers != NULL &&
                 CSLFindString(papszAllowedDrivers,
                               GDALGetDriverShortName(poDriver)) == -1)
                 continue;
         }
 
         if( (nOpenFlags & GDAL_OF_RASTER) != 0 &&
             (nOpenFlags & GDAL_OF_VECTOR) == 0 &&
             poDriver->GetMetadataItem(GDAL_DCAP_RASTER) == NULL )
             continue;
         if( (nOpenFlags & GDAL_OF_VECTOR) != 0 &&
             (nOpenFlags & GDAL_OF_RASTER) == 0 &&
             poDriver->GetMetadataItem(GDAL_DCAP_VECTOR) == NULL )
             continue;
 
         // Remove general OVERVIEW_LEVEL open options from list before passing
         // it to the driver, if it isn't a driver specific option already.
         char **papszTmpOpenOptions = NULL;
         char **papszTmpOpenOptionsToValidate = NULL;
         char **papszOptionsToValidate = const_cast<char **>(papszOpenOptions);
         if( CSLFetchNameValue(papszOpenOptionsCleaned, "OVERVIEW_LEVEL") !=
                NULL &&
             (poDriver->GetMetadataItem(GDAL_DMD_OPENOPTIONLIST) == NULL ||
              CPLString(poDriver->GetMetadataItem(GDAL_DMD_OPENOPTIONLIST))
                     .ifind("OVERVIEW_LEVEL") == std::string::npos) )
         {
             papszTmpOpenOptions = CSLDuplicate(papszOpenOptionsCleaned);
             papszTmpOpenOptions =
                 CSLSetNameValue(papszTmpOpenOptions, "OVERVIEW_LEVEL", NULL);
             oOpenInfo.papszOpenOptions = papszTmpOpenOptions;
 
             papszOptionsToValidate = CSLDuplicate(papszOptionsToValidate);
             papszOptionsToValidate =
                 CSLSetNameValue(papszOptionsToValidate, "OVERVIEW_LEVEL", NULL);
             papszTmpOpenOptionsToValidate = papszOptionsToValidate;
         }
 
         const bool bIdentifyRes =
             poDriver->pfnIdentify && poDriver->pfnIdentify(&oOpenInfo) > 0;
         if( bIdentifyRes )
         {
             GDALValidateOpenOptions(poDriver, papszOptionsToValidate);
         }
 
+#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
+        const bool bFpAvailableBefore = oOpenInfo.fpL != NULL;
+#endif
+
         GDALDataset *poDS = NULL;
         if ( poDriver->pfnOpen != NULL )
         {
             poDS = poDriver->pfnOpen(&oOpenInfo);
             // If we couldn't determine for sure with Identify() (it returned
             // -1), but Open() managed to open the file, post validate options.
             if( poDS != NULL && poDriver->pfnIdentify && !bIdentifyRes )
                 GDALValidateOpenOptions(poDriver, papszOptionsToValidate);
         }
         else if( poDriver->pfnOpenWithDriverArg != NULL )
         {
             poDS = poDriver->pfnOpenWithDriverArg(poDriver, &oOpenInfo);
         }
         else
         {
             CSLDestroy(papszTmpOpenOptions);
             CSLDestroy(papszTmpOpenOptionsToValidate);
             oOpenInfo.papszOpenOptions = papszOpenOptionsCleaned;
             continue;
         }
 
         CSLDestroy(papszTmpOpenOptions);
         CSLDestroy(papszTmpOpenOptionsToValidate);
         oOpenInfo.papszOpenOptions = papszOpenOptionsCleaned;
 
         if( poDS != NULL )
         {
             poDS->nOpenFlags = nOpenFlags;
 
             if( strlen(poDS->GetDescription()) == 0 )
                 poDS->SetDescription(pszFilename);
 
             if( poDS->poDriver == NULL )
                 poDS->poDriver = poDriver;
 
             if( poDS->papszOpenOptions == NULL )
             {
                 poDS->papszOpenOptions = papszOpenOptionsCleaned;
                 papszOpenOptionsCleaned = NULL;
             }
 
             if( !(nOpenFlags & GDAL_OF_INTERNAL) )
             {
                 if( CPLGetPID() != GDALGetResponsiblePIDForCurrentThread() )
                     CPLDebug("GDAL",
                              "GDALOpen(%s, this=%p) succeeds as "
                              "%s (pid=%d, responsiblePID=%d).",
                              pszFilename, poDS, poDriver->GetDescription(),
                              static_cast<int>(CPLGetPID()),
                              static_cast<int>(
                                  GDALGetResponsiblePIDForCurrentThread()));
                 else
                     CPLDebug("GDAL", "GDALOpen(%s, this=%p) succeeds as %s.",
                              pszFilename, poDS, poDriver->GetDescription());
 
                 poDS->AddToDatasetOpenList();
             }
 
             int *pnRecCount =
                 static_cast<int *>(CPLGetTLS(CTLS_GDALDATASET_REC_PROTECT_MAP));
             if( pnRecCount )
                 (*pnRecCount)--;
 
             if( nOpenFlags & GDAL_OF_SHARED )
             {
                 if (strcmp(pszFilename, poDS->GetDescription()) != 0)
                 {
                     CPLError(CE_Warning, CPLE_NotSupported,
                              "A dataset opened by GDALOpenShared should have "
                              "the same filename (%s) "
                              "and description (%s)",
                              pszFilename, poDS->GetDescription());
                 }
                 else
                 {
                     poDS->MarkAsShared();
                 }
             }
 
             // Deal with generic OVERVIEW_LEVEL open option, unless it is
             // driver specific.
             if( CSLFetchNameValue(papszOpenOptions, "OVERVIEW_LEVEL") != NULL &&
                 (poDriver->GetMetadataItem(GDAL_DMD_OPENOPTIONLIST) == NULL ||
                 CPLString(poDriver->GetMetadataItem(GDAL_DMD_OPENOPTIONLIST))
                         .ifind("OVERVIEW_LEVEL") == std::string::npos) )
             {
                 CPLString osVal(
                     CSLFetchNameValue(papszOpenOptions, "OVERVIEW_LEVEL"));
                 const int nOvrLevel = atoi(osVal);
                 const bool bThisLevelOnly =
                     osVal.ifind("only") != std::string::npos;
                 GDALDataset *poOvrDS = GDALCreateOverviewDataset(
                     poDS, nOvrLevel, bThisLevelOnly);
                 poDS->ReleaseRef();
                 poDS = poOvrDS;
                 if( poDS == NULL )
                 {
                     if( nOpenFlags & GDAL_OF_VERBOSE_ERROR )
                     {
                         CPLError(CE_Failure, CPLE_OpenFailed,
                                  "Cannot open overview level %d of %s",
                                  nOvrLevel, pszFilename);
                     }
                 }
             }
             VSIErrorReset();
 
             CSLDestroy(papszOpenOptionsCleaned);
             return poDS;
         }
 
+#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
+        if( bFpAvailableBefore && oOpenInfo.fpL == NULL )
+        {
+            // In case the file descriptor was "consumed" by a driver
+            // that ultimately failed, re-open it for next drivers.
+            oOpenInfo.fpL = VSIFOpenL(
+                pszFilename,
+                (oOpenInfo.eAccess == GA_Update) ? "r+b" : "rb");
+        }
+#else
         if( CPLGetLastErrorNo() != 0 && CPLGetLastErrorType() > CE_Warning)
         {
             int *pnRecCount =
                 static_cast<int *>(CPLGetTLS(CTLS_GDALDATASET_REC_PROTECT_MAP));
             if( pnRecCount )
                 (*pnRecCount)--;
 
             CSLDestroy(papszOpenOptionsCleaned);
             return NULL;
         }
+#endif
     }
 
     CSLDestroy(papszOpenOptionsCleaned);
 
     if( nOpenFlags & GDAL_OF_VERBOSE_ERROR )
     {
         // Check to see if there was a filesystem error, and report it if so.
         // If not, return a more generic error.
         if(!VSIToCPLError(CE_Failure, CPLE_OpenFailed))
         {
             if( oOpenInfo.bStatOK )
             {
                 CPLError(CE_Failure, CPLE_OpenFailed,
                          "`%s' not recognized as a supported file format.",
                          pszFilename);
             }
             else
             {
                 // If Stat failed and no VSI error was set, assume it is because
                 // the file did not exist on the filesystem.
                 CPLError(CE_Failure, CPLE_OpenFailed,
                          "`%s' does not exist in the file system, "
                          "and is not recognized as a supported dataset name.",
                          pszFilename);
             }
         }
     }
 
     int *pnRecCount =
         static_cast<int *>(CPLGetTLS(CTLS_GDALDATASET_REC_PROTECT_MAP));
     if( pnRecCount )
         (*pnRecCount)--;
 
     return NULL;
 }
 
 /************************************************************************/
 /*                           GDALOpenShared()                           */
 /************************************************************************/
 
 /**
  * \brief Open a raster file as a GDALDataset.
  *
  * This function works the same as GDALOpen(), but allows the sharing of
  * GDALDataset handles for a dataset with other callers to GDALOpenShared().
  *
  * In particular, GDALOpenShared() will first consult its list of currently
  * open and shared GDALDataset's, and if the GetDescription() name for one
  * exactly matches the pszFilename passed to GDALOpenShared() it will be
  * referenced and returned.
  *
  * Starting with GDAL 1.6.0, if GDALOpenShared() is called on the same
  * pszFilename from two different threads, a different GDALDataset object will
  * be returned as it is not safe to use the same dataset from different threads,
  * unless the user does explicitly use mutexes in its code.
  *
  * For drivers supporting the VSI virtual file API, it is possible to open a
  * file in a .zip archive (see VSIInstallZipFileHandler()), in a
  * .tar/.tar.gz/.tgz archive (see VSIInstallTarFileHandler()) or on a HTTP / FTP
  * server (see VSIInstallCurlFileHandler())
  *
  * In some situations (dealing with unverified data), the datasets can be opened
  * in another process through the \ref gdal_api_proxy mechanism.
  *
  * \sa GDALOpen()
  * \sa GDALOpenEx()
  *
  * @param pszFilename the name of the file to access.  In the case of
  * exotic drivers this may not refer to a physical file, but instead contain
  * information for the driver on how to access a dataset.  It should be in
  * UTF-8 encoding.
  *
  * @param eAccess the desired access, either GA_Update or GA_ReadOnly.  Many
  * drivers support only read only access.
  *
  * @return A GDALDatasetH handle or NULL on failure.  For C++ applications
  * this handle can be cast to a GDALDataset *.
  */
