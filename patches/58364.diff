commit 135b37882f57a4883851ccb5be9363795f10fb9b
Author: Eugene Kliuchnikov <eustas.ru@gmail.com>
Date:   Thu Apr 27 10:55:53 2023 +0200

    Fix "Index-out-of-bounds" (#112)
    
    Same reason as in https://github.com/knik0/faad2/pull/111
    
    In some cases result of `program_config_element` is ignored:
    > 14496-4: 5.6.4.1.2.1.3: program_configuration_element()'s in access units shall be ignored
    
    In the meantime, the only check in that method guarantees that number of channels does not exceed the limit.
    
    This change adds check right before configuration is used.

diff --git a/libfaad/syntax.c b/libfaad/syntax.c
index 9e77a3e..7193262 100644
--- a/libfaad/syntax.c
+++ b/libfaad/syntax.c
@@ -325,55 +325,62 @@ static uint8_t program_config_element(program_config *pce, bitfile *ld)
 static void decode_sce_lfe(NeAACDecStruct *hDecoder,
                            NeAACDecFrameInfo *hInfo, bitfile *ld,
                            uint8_t id_syn_ele)
 {
     uint8_t channels = hDecoder->fr_channels;
     uint8_t tag = 0;
 
     /* One or two channels are used;
        exact number will be known after single_lfe_channel_element
     */
     if (channels+2 > MAX_CHANNELS)
     {
         hInfo->error = 12;
         return;
     }
     if (hDecoder->fr_ch_ele+1 > MAX_SYNTAX_ELEMENTS)
     {
         hInfo->error = 13;
         return;
     }
 
     /* for SCE hDecoder->element_output_channels[] is not set here because this
        can become 2 when some form of Parametric Stereo coding is used
     */
 
     if (hDecoder->element_id[hDecoder->fr_ch_ele] != INVALID_ELEMENT_ID &&
         hDecoder->element_id[hDecoder->fr_ch_ele] != id_syn_ele)
     {
         /* element inconsistency */
         hInfo->error = 21;
         return;
     }
 
     /* save the syntax element id */
     hDecoder->element_id[hDecoder->fr_ch_ele] = id_syn_ele;
 
     /* decode the element */
     hInfo->error = single_lfe_channel_element(hDecoder, ld, channels, &tag);
 
     /* map output channels position to internal data channels */
     if (hDecoder->element_output_channels[hDecoder->fr_ch_ele] == 2)
     {
         /* this might be faulty when pce_set is true */
         hDecoder->internal_channel[channels] = channels;
         hDecoder->internal_channel[channels+1] = channels+1;
     } else {
         if (hDecoder->pce_set)
+        {
+            if (hDecoder->pce.channels > MAX_CHANNELS)
+            {
+                hInfo->error = 22;
+                return;
+            }
             hDecoder->internal_channel[hDecoder->pce.sce_channel[tag]] = channels;
-        else
+        } else {
             hDecoder->internal_channel[channels] = channels;
+        }
     }
 
     hDecoder->fr_channels += hDecoder->element_output_channels[hDecoder->fr_ch_ele];
     hDecoder->fr_ch_ele++;
 }
@@ -381,55 +388,60 @@ static void decode_sce_lfe(NeAACDecStruct *hDecoder,
 static void decode_cpe(NeAACDecStruct *hDecoder, NeAACDecFrameInfo *hInfo, bitfile *ld,
                        uint8_t id_syn_ele)
 {
     uint8_t channels = hDecoder->fr_channels;
     uint8_t tag = 0;
 
     if (channels+2 > MAX_CHANNELS)
     {
         hInfo->error = 12;
         return;
     }
     if (hDecoder->fr_ch_ele+1 > MAX_SYNTAX_ELEMENTS)
     {
         hInfo->error = 13;
         return;
     }
+    if (hDecoder->pce_set && (hDecoder->pce.channels > MAX_CHANNELS))
+    {
+        hInfo->error = 22;
+        return;
+    }
 
     /* for CPE the number of output channels is always 2 */
     if (hDecoder->element_output_channels[hDecoder->fr_ch_ele] == 0)
     {
         /* element_output_channels not set yet */
         hDecoder->element_output_channels[hDecoder->fr_ch_ele] = 2;
     } else if (hDecoder->element_output_channels[hDecoder->fr_ch_ele] != 2) {
         /* element inconsistency */
         hInfo->error = 21;
         return;
     }
 
     if (hDecoder->element_id[hDecoder->fr_ch_ele] != INVALID_ELEMENT_ID &&
         hDecoder->element_id[hDecoder->fr_ch_ele] != id_syn_ele)
     {
         /* element inconsistency */
         hInfo->error = 21;
         return;
     }
 
     /* save the syntax element id */
     hDecoder->element_id[hDecoder->fr_ch_ele] = id_syn_ele;
 
     /* decode the element */
     hInfo->error = channel_pair_element(hDecoder, ld, channels, &tag);
 
     /* map output channel position to internal data channels */
     if (hDecoder->pce_set)
     {
         hDecoder->internal_channel[hDecoder->pce.cpe_channel[tag]] = channels;
         hDecoder->internal_channel[hDecoder->pce.cpe_channel[tag]+1] = channels+1;
     } else {
         hDecoder->internal_channel[channels] = channels;
         hDecoder->internal_channel[channels+1] = channels+1;
     }
 
     hDecoder->fr_channels += 2;
     hDecoder->fr_ch_ele++;
 }
