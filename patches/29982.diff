commit 1b91c0e29bc802b515f509d6a0e9396f2318b066
Author: John Stiles <johnstiles@google.com>
Date:   Thu Feb 11 11:43:09 2021 -0500

    Fix use-after-free discovered by the fuzzer.
    
    The optimization which replaces unnecessarily nested constructors is
    creating a new constructor from whole cloth, obliterating the original
    constructor and its arguments. This can invalidate the definition map.
    For now, this is fixed by forcing a rescan when this optimization is
    applied.
    
    Change-Id: I8a46bccf3b6422282eaf95409cd4fa50b8ad3187
    Bug: oss-fuzz:29994
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/369324
    Commit-Queue: John Stiles <johnstiles@google.com>
    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>
    Auto-Submit: John Stiles <johnstiles@google.com>
    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>

diff --git a/src/sksl/SkSLCompiler.cpp b/src/sksl/SkSLCompiler.cpp
index fe119cee6d..6c15890fe8 100644
--- a/src/sksl/SkSLCompiler.cpp
+++ b/src/sksl/SkSLCompiler.cpp
@@ -699,470 +699,469 @@ static void vectorize_right(BasicBlock* b,
 void Compiler::simplifyExpression(DefinitionMap& definitions,
                                   BasicBlock& b,
                                   std::vector<BasicBlock::Node>::iterator* iter,
                                   OptimizationContext* optimizationContext) {
     Expression* expr = (*iter)->expression()->get();
     SkASSERT(expr);
 
     if ((*iter)->fConstantPropagation) {
         std::unique_ptr<Expression> optimized = expr->constantPropagate(*fIRGenerator,
                                                                         definitions);
         if (optimized) {
             optimizationContext->fUpdated = true;
             optimized = fIRGenerator->coerce(std::move(optimized), expr->type());
             SkASSERT(optimized);
             // Remove references within 'expr', add references within 'optimized'
             optimizationContext->fUsage->replace(expr, optimized.get());
             if (!try_replace_expression(&b, iter, &optimized)) {
                 optimizationContext->fNeedsRescan = true;
                 return;
             }
             SkASSERT((*iter)->isExpression());
             expr = (*iter)->expression()->get();
         }
     }
     switch (expr->kind()) {
         case Expression::Kind::kVariableReference: {
             const VariableReference& ref = expr->as<VariableReference>();
             const Variable* var = ref.variable();
             if (ref.refKind() != VariableReference::RefKind::kWrite &&
                 ref.refKind() != VariableReference::RefKind::kPointer &&
                 var->storage() == Variable::Storage::kLocal && !definitions.get(var) &&
                 optimizationContext->fSilences.find(var) == optimizationContext->fSilences.end()) {
                 optimizationContext->fSilences.insert(var);
                 this->error(expr->fOffset,
                             "'" + var->name() + "' has not been assigned");
             }
             break;
         }
         case Expression::Kind::kTernary: {
             TernaryExpression* t = &expr->as<TernaryExpression>();
             if (t->test()->is<BoolLiteral>()) {
                 // ternary has a constant test, replace it with either the true or
                 // false branch
                 if (t->test()->as<BoolLiteral>().value()) {
                     (*iter)->setExpression(std::move(t->ifTrue()), optimizationContext->fUsage);
                 } else {
                     (*iter)->setExpression(std::move(t->ifFalse()), optimizationContext->fUsage);
                 }
                 optimizationContext->fUpdated = true;
                 optimizationContext->fNeedsRescan = true;
             }
             break;
         }
         case Expression::Kind::kBinary: {
             BinaryExpression* bin = &expr->as<BinaryExpression>();
             if (dead_assignment(*bin, optimizationContext->fUsage) || self_assignment(*bin)) {
                 delete_left(&b, iter, optimizationContext);
                 break;
             }
             Expression& left = *bin->left();
             Expression& right = *bin->right();
             const Type& leftType = left.type();
             const Type& rightType = right.type();
             // collapse useless expressions like x * 1 or x + 0
             if ((!leftType.isScalar() && !leftType.isVector()) ||
                 (!rightType.isScalar() && !rightType.isVector())) {
                 break;
             }
             switch (bin->getOperator()) {
                 case Token::Kind::TK_STAR:
                     if (is_constant(left, 1)) {
                         if (leftType.isVector() && rightType.isScalar()) {
                             // float4(1) * x -> float4(x)
                             vectorize_right(&b, iter, optimizationContext);
                         } else {
                             // 1 * x -> x
                             // 1 * float4(x) -> float4(x)
                             // float4(1) * float4(x) -> float4(x)
                             delete_left(&b, iter, optimizationContext);
                         }
                     }
                     else if (is_constant(left, 0)) {
                         if (leftType.isScalar() && rightType.isVector() &&
                             !right.hasSideEffects()) {
                             // 0 * float4(x) -> float4(0)
                             vectorize_left(&b, iter, optimizationContext);
                         } else {
                             // 0 * x -> 0
                             // float4(0) * x -> float4(0)
                             // float4(0) * float4(x) -> float4(0)
                             if (!right.hasSideEffects()) {
                                 delete_right(&b, iter, optimizationContext);
                             }
                         }
                     }
                     else if (is_constant(right, 1)) {
                         if (leftType.isScalar() && rightType.isVector()) {
                             // x * float4(1) -> float4(x)
                             vectorize_left(&b, iter, optimizationContext);
                         } else {
                             // x * 1 -> x
                             // float4(x) * 1 -> float4(x)
                             // float4(x) * float4(1) -> float4(x)
                             delete_right(&b, iter, optimizationContext);
                         }
                     }
                     else if (is_constant(right, 0)) {
                         if (leftType.isVector() && rightType.isScalar() && !left.hasSideEffects()) {
                             // float4(x) * 0 -> float4(0)
                             vectorize_right(&b, iter, optimizationContext);
                         } else {
                             // x * 0 -> 0
                             // x * float4(0) -> float4(0)
                             // float4(x) * float4(0) -> float4(0)
                             if (!left.hasSideEffects()) {
                                 delete_left(&b, iter, optimizationContext);
                             }
                         }
                     }
                     break;
                 case Token::Kind::TK_PLUS:
                     if (is_constant(left, 0)) {
                         if (leftType.isVector() && rightType.isScalar()) {
                             // float4(0) + x -> float4(x)
                             vectorize_right(&b, iter, optimizationContext);
                         } else {
                             // 0 + x -> x
                             // 0 + float4(x) -> float4(x)
                             // float4(0) + float4(x) -> float4(x)
                             delete_left(&b, iter, optimizationContext);
                         }
                     } else if (is_constant(right, 0)) {
                         if (leftType.isScalar() && rightType.isVector()) {
                             // x + float4(0) -> float4(x)
                             vectorize_left(&b, iter, optimizationContext);
                         } else {
                             // x + 0 -> x
                             // float4(x) + 0 -> float4(x)
                             // float4(x) + float4(0) -> float4(x)
                             delete_right(&b, iter, optimizationContext);
                         }
                     }
                     break;
                 case Token::Kind::TK_MINUS:
                     if (is_constant(right, 0)) {
                         if (leftType.isScalar() && rightType.isVector()) {
                             // x - float4(0) -> float4(x)
                             vectorize_left(&b, iter, optimizationContext);
                         } else {
                             // x - 0 -> x
                             // float4(x) - 0 -> float4(x)
                             // float4(x) - float4(0) -> float4(x)
                             delete_right(&b, iter, optimizationContext);
                         }
                     }
                     break;
                 case Token::Kind::TK_SLASH:
                     if (is_constant(right, 1)) {
                         if (leftType.isScalar() && rightType.isVector()) {
                             // x / float4(1) -> float4(x)
                             vectorize_left(&b, iter, optimizationContext);
                         } else {
                             // x / 1 -> x
                             // float4(x) / 1 -> float4(x)
                             // float4(x) / float4(1) -> float4(x)
                             delete_right(&b, iter, optimizationContext);
                         }
                     } else if (is_constant(left, 0)) {
                         if (leftType.isScalar() && rightType.isVector() &&
                             !right.hasSideEffects()) {
                             // 0 / float4(x) -> float4(0)
                             vectorize_left(&b, iter, optimizationContext);
                         } else {
                             // 0 / x -> 0
                             // float4(0) / x -> float4(0)
                             // float4(0) / float4(x) -> float4(0)
                             if (!right.hasSideEffects()) {
                                 delete_right(&b, iter, optimizationContext);
                             }
                         }
                     }
                     break;
                 case Token::Kind::TK_PLUSEQ:
                     if (is_constant(right, 0)) {
                         Analysis::UpdateRefKind(&left, RefKind::kRead);
                         delete_right(&b, iter, optimizationContext);
                     }
                     break;
                 case Token::Kind::TK_MINUSEQ:
                     if (is_constant(right, 0)) {
                         Analysis::UpdateRefKind(&left, RefKind::kRead);
                         delete_right(&b, iter, optimizationContext);
                     }
                     break;
                 case Token::Kind::TK_STAREQ:
                     if (is_constant(right, 1)) {
                         Analysis::UpdateRefKind(&left, RefKind::kRead);
                         delete_right(&b, iter, optimizationContext);
                     }
                     break;
                 case Token::Kind::TK_SLASHEQ:
                     if (is_constant(right, 1)) {
                         Analysis::UpdateRefKind(&left, RefKind::kRead);
                         delete_right(&b, iter, optimizationContext);
                     }
                     break;
                 default:
                     break;
             }
             break;
         }
         case Expression::Kind::kConstructor: {
             // Find constructors embedded inside constructors and flatten them out where possible.
             //   -  float4(float2(1, 2), 3, 4)                -->  float4(1, 2, 3, 4)
             //   -  float4(w, float3(sin(x), cos(y), tan(z))) -->  float4(w, sin(x), cos(y), tan(z))
             // Leave single-argument constructors alone, though. These might be casts or splats.
             Constructor& c = expr->as<Constructor>();
             if (c.type().columns() > 1) {
                 // Inspect each constructor argument to see if it's a candidate for flattening.
                 // Remember matched arguments in a bitfield, "argsToOptimize".
                 int argsToOptimize = 0;
                 int currBit = 1;
                 for (const std::unique_ptr<Expression>& arg : c.arguments()) {
                     if (arg->is<Constructor>()) {
                         Constructor& inner = arg->as<Constructor>();
                         if (inner.arguments().size() > 1 &&
                             inner.type().componentType() == c.type().componentType()) {
                             argsToOptimize |= currBit;
                         }
                     }
                     currBit <<= 1;
                 }
                 if (argsToOptimize) {
                     // We found at least one argument that could be flattened out. Re-walk the
                     // constructor args and flatten the candidates we found during our initial pass.
                     ExpressionArray flattened;
                     flattened.reserve_back(c.type().columns());
                     currBit = 1;
                     for (const std::unique_ptr<Expression>& arg : c.arguments()) {
                         if (argsToOptimize & currBit) {
                             Constructor& inner = arg->as<Constructor>();
                             for (const std::unique_ptr<Expression>& innerArg : inner.arguments()) {
                                 flattened.push_back(innerArg->clone());
                             }
                         } else {
                             flattened.push_back(arg->clone());
                         }
                         currBit <<= 1;
                     }
-                    auto optimized = std::unique_ptr<Expression>(
-                            new Constructor(c.fOffset, &c.type(), std::move(flattened)));
-                    // No fUsage change; no references have been added or removed anywhere.
+                    std::unique_ptr<Expression> replacement(new Constructor(c.fOffset, &c.type(),
+                                                                            std::move(flattened)));
+                    // We're replacing an expression with a cloned version; we'll need a rescan.
+                    // No fUsage change: `float2(float(x), y)` and `float2(x, y)` have equivalent
+                    // reference counts.
+                    try_replace_expression(&b, iter, &replacement);
                     optimizationContext->fUpdated = true;
-                    if (!try_replace_expression(&b, iter, &optimized)) {
-                        optimizationContext->fNeedsRescan = true;
-                        return;
-                    }
-                    SkASSERT((*iter)->isExpression());
+                    optimizationContext->fNeedsRescan = true;
                     break;
                 }
             }
             break;
         }
         case Expression::Kind::kSwizzle: {
             Swizzle& s = expr->as<Swizzle>();
             // Detect identity swizzles like `foo.rgba`.
             if ((int) s.components().size() == s.base()->type().columns()) {
                 bool identity = true;
                 for (int i = 0; i < (int) s.components().size(); ++i) {
                     if (s.components()[i] != i) {
                         identity = false;
                         break;
                     }
                 }
                 if (identity) {
                     optimizationContext->fUpdated = true;
                     // No fUsage change: foo.rgba and foo have equivalent reference counts
                     if (!try_replace_expression(&b, iter, &s.base())) {
                         optimizationContext->fNeedsRescan = true;
                         return;
                     }
                     SkASSERT((*iter)->isExpression());
                     break;
                 }
             }
             // Detect swizzles of swizzles, e.g. replace `foo.argb.r000` with `foo.a000`.
             if (s.base()->is<Swizzle>()) {
                 Swizzle& base = s.base()->as<Swizzle>();
                 ComponentArray final;
                 for (int c : s.components()) {
                     final.push_back(base.components()[c]);
                 }
                 std::unique_ptr<Expression> replacement(new Swizzle(*fContext, base.base()->clone(),
                                                                     final));
                 // We're replacing an expression with a cloned version; we'll need a rescan.
                 // No fUsage change: `foo.gbr.gbr` and `foo.brg` have equivalent reference counts
                 try_replace_expression(&b, iter, &replacement);
                 optimizationContext->fUpdated = true;
                 optimizationContext->fNeedsRescan = true;
                 break;
             }
             // Optimize swizzles of constructors.
             if (s.base()->is<Constructor>()) {
                 Constructor& base = s.base()->as<Constructor>();
                 std::unique_ptr<Expression> replacement;
                 const Type& componentType = base.type().componentType();
                 int swizzleSize = s.components().size();
 
                 // The IR generator has already converted any zero/one swizzle components into
                 // constructors containing zero/one args. Confirm that this is true by checking that
                 // our swizzle components are all `xyzw` (values 0 through 3).
                 SkASSERT(std::all_of(s.components().begin(), s.components().end(),
                                      [](int8_t c) { return c >= 0 && c <= 3; }));
 
                 if (base.arguments().size() == 1 && base.arguments().front()->type().isScalar()) {
                     // `half4(scalar).zyy` can be optimized to `half3(scalar)`. The swizzle
                     // components don't actually matter since all fields are the same.
                     const Expression& argument = *base.arguments().front();
                     const Type& constructorType = componentType.toCompound(*fContext, swizzleSize,
                                                                            /*rows=*/1);
                     replacement = Constructor::SimplifyConversion(constructorType, argument);
                     if (!replacement) {
                         ExpressionArray newArgs;
                         newArgs.push_back(argument.clone());
                         replacement = std::make_unique<Constructor>(base.fOffset, &constructorType,
                                                                     std::move(newArgs));
                     }
 
                     // We're replacing an expression with a cloned version; we'll need a rescan.
                     // There's no fUsage change: `half4(foo).xy` and `half2(foo)` have equivalent
                     // reference counts.
                     try_replace_expression(&b, iter, &replacement);
                     optimizationContext->fUpdated = true;
                     optimizationContext->fNeedsRescan = true;
                     break;
                 }
 
                 // Swizzles can duplicate some elements and discard others, e.g.
                 // `half4(1, 2, 3, 4).xxz` --> `half3(1, 1, 3)`. However, there are constraints:
                 // - Expressions with side effects need to occur exactly once, even if they
                 //   would otherwise be swizzle-eliminated
                 // - Non-trivial expressions should not be repeated, but elimination is OK.
                 //
                 // Look up the argument for the constructor at each index. This is typically simple
                 // but for weird cases like `half4(bar.yz, half2(foo))`, it can be harder than it
                 // seems. This example would result in:
                 //     argMap[0] = {.fArgIndex = 0, .fComponent = 0}   (bar.yz     .x)
                 //     argMap[1] = {.fArgIndex = 0, .fComponent = 1}   (bar.yz     .y)
                 //     argMap[2] = {.fArgIndex = 1, .fComponent = 0}   (half2(foo) .x)
                 //     argMap[3] = {.fArgIndex = 1, .fComponent = 1}   (half2(foo) .y)
                 struct ConstructorArgMap {
                     int8_t fArgIndex;
                     int8_t fComponent;
                 };
 
                 int numConstructorArgs = base.type().columns();
                 ConstructorArgMap argMap[4] = {};
                 int writeIdx = 0;
                 for (int argIdx = 0; argIdx < (int) base.arguments().size(); ++argIdx) {
                     const Expression& expr = *base.arguments()[argIdx];
                     int argWidth = expr.type().columns();
                     for (int componentIdx = 0; componentIdx < argWidth; ++componentIdx) {
                         argMap[writeIdx].fArgIndex = argIdx;
                         argMap[writeIdx].fComponent = componentIdx;
                         ++writeIdx;
                     }
                 }
                 SkASSERT(writeIdx == numConstructorArgs);
 
                 // Count up the number of times each constructor argument is used by the
                 // swizzle.
                 //    `half4(bar.yz, half2(foo)).xwxy` -> { 3, 1 }
                 // - bar.yz    is referenced 3 times, by `.x_xy`
                 // - half(foo) is referenced 1 time,  by `._w__`
                 int8_t exprUsed[4] = {};
                 for (int c : s.components()) {
                     exprUsed[argMap[c].fArgIndex]++;
                 }
 
                 bool safeToOptimize = true;
                 for (int index = 0; index < numConstructorArgs; ++index) {
                     int8_t constructorArgIndex = argMap[index].fArgIndex;
                     const Expression& baseArg = *base.arguments()[constructorArgIndex];
 
                     // Check that non-trivial expressions are not swizzled in more than once.
                     if (exprUsed[constructorArgIndex] > 1 &&
                             !Analysis::IsTrivialExpression(baseArg)) {
                         safeToOptimize = false;
                         break;
                     }
                     // Check that side-effect-bearing expressions are swizzled in exactly once.
                     if (exprUsed[constructorArgIndex] != 1 && baseArg.hasSideEffects()) {
                         safeToOptimize = false;
                         break;
                     }
                 }
 
                 if (safeToOptimize) {
                     struct ReorderedArgument {
                         int8_t fArgIndex;
                         ComponentArray fComponents;
                     };
                     SkSTArray<4, ReorderedArgument> reorderedArgs;
                     for (int c : s.components()) {
                         const ConstructorArgMap& argument = argMap[c];
                         const Expression& baseArg = *base.arguments()[argument.fArgIndex];
 
                         if (baseArg.type().isScalar()) {
                             // This argument is a scalar; add it to the list as-is.
                             SkASSERT(argument.fComponent == 0);
                             reorderedArgs.push_back({argument.fArgIndex,
                                                      ComponentArray{}});
                         } else {
                             // This argument is a component from a vector.
                             SkASSERT(argument.fComponent < baseArg.type().columns());
                             if (reorderedArgs.empty() ||
                                 reorderedArgs.back().fArgIndex != argument.fArgIndex) {
                                 // This can't be combined with the previous argument. Add a new one.
                                 reorderedArgs.push_back({argument.fArgIndex,
                                                          ComponentArray{argument.fComponent}});
                             } else {
                                 // Since we know this argument uses components, it should already
                                 // have at least one component set.
                                 SkASSERT(!reorderedArgs.back().fComponents.empty());
                                 // Build up the current argument with one more component.
                                 reorderedArgs.back().fComponents.push_back(argument.fComponent);
                             }
                         }
                     }
 
                     // Convert our reordered argument list to an actual array of expressions, with
                     // the new order and any new inner swizzles that need to be applied. Note that
                     // we expect followup passes to clean up the inner swizzles.
                     ExpressionArray newArgs;
                     newArgs.reserve_back(swizzleSize);
                     for (const ReorderedArgument& reorderedArg : reorderedArgs) {
                         const Expression& baseArg = *base.arguments()[reorderedArg.fArgIndex];
                         if (reorderedArg.fComponents.empty()) {
                             newArgs.push_back(baseArg.clone());
                         } else {
                             newArgs.push_back(std::make_unique<Swizzle>(*fContext, baseArg.clone(),
                                                                         reorderedArg.fComponents));
                         }
                     }
 
                     // Create a new constructor.
                     replacement = std::make_unique<Constructor>(
                             base.fOffset,
                             &componentType.toCompound(*fContext, swizzleSize, /*rows=*/1),
                             std::move(newArgs));
 
                     // Remove references within 'expr', add references within 'replacement.'
                     optimizationContext->fUsage->replace(expr, replacement.get());
 
                     // We're replacing an expression with a cloned version; we'll need a rescan.
                     try_replace_expression(&b, iter, &replacement);
                     optimizationContext->fUpdated = true;
                     optimizationContext->fNeedsRescan = true;
                 }
                 break;
             }
             break;
         }
         default:
             break;
     }
 }
 
 // Returns true if this statement could potentially execute a break at the current level. We ignore
 // nested loops and switches, since any breaks inside of them will merely break the loop / switch.
