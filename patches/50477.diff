commit eb83e055b855d23802a25d5de6e3c8682f38fb9d
Author: Guy Harris <gharris@sonic.net>
Date:   Sun Sep 4 17:08:17 2022 -0700

    AppleTalk, DSI: get rid of the "command" field.
    
    It's not needed.
    
    Instead, have get_transaction() return the request_val; the caller can
    fetch the command from its "value" member.
    
    While wee're at it, update some of the web reference information for
    DSI.

diff --git a/epan/dissectors/packet-afp.h b/epan/dissectors/packet-afp.h
index 515718542e..b5626a47cc 100644
--- a/epan/dissectors/packet-afp.h
+++ b/epan/dissectors/packet-afp.h
@@ -67,48 +67,46 @@ extern value_string_ext asp_error_vals_ext;
 extern value_string_ext afp_server_addr_type_vals_ext;
 
 /* server flags */
 #define AFPSRVRINFO_COPY         (1<<0)  /* supports copyfile */
 #define AFPSRVRINFO_PASSWD       (1<<1)  /* supports change password */
 #define AFPSRVRINFO_NOSAVEPASSWD (1<<2)  /* don't allow save password */
 #define AFPSRVRINFO_SRVMSGS      (1<<3)  /* supports server messages */
 #define AFPSRVRINFO_SRVSIGNATURE (1<<4)  /* supports server signature */
 #define AFPSRVRINFO_TCPIP        (1<<5)  /* supports tcpip */
 #define AFPSRVRINFO_SRVNOTIFY    (1<<6)  /* supports server notifications */
 #define AFPSRVRINFO_SRVRECONNECT (1<<7)  /* supports reconnect */
 #define AFPSRVRINFO_SRVDIRECTORY (1<<8)  /* supports directory services */
 #define AFPSRVRINFO_SRVUTF8      (1<<9)  /* supports UTF8 names AFP 3.1 */
 #define AFPSRVRINFO_UUID         (1<<10) /* supports UUIDs AFP 3.2 */
 #define AFPSRVRINFO_EXT_SLEEP    (1<<11) /* supports extended sleep, AFP 3.3 */
 #define AFPSRVRINFO_FASTBOZO     (1<<15) /* fast copying */
 
 
 #define AFPSTATUS_MACHOFF     0
 #define AFPSTATUS_VERSOFF     2
 #define AFPSTATUS_UAMSOFF     4
 #define AFPSTATUS_ICONOFF     6
 #define AFPSTATUS_FLAGOFF     8
 #define AFPSTATUS_PRELEN     10
 #define AFPSTATUS_POSTLEN     4
 #define AFPSTATUS_LEN        (AFPSTATUS_PRELEN + AFPSTATUS_POSTLEN)
 
 /*
  * Private data passed from DSI dissector, and the ATP and ASP dissectors,
  * to subdissectors, including the AFP dissector.
  *                              DSI             ATP/ASP
  * atp_asp_dsi_info.reply       dsi.flags       atp.function == 0x80
  * atp_asp_dsi_info.release                     atp.function == 0xc0
- * atp_asp_dsi_info.command     dsi.command     asp.function
  * atp_asp_dsi_info.tid         dsi.requestid   atp.tid
  * atp_asp_dsi_info.code        dsi.code
  */
 struct atp_asp_dsi_info {
 	guint8	reply;			/* 0 query  1 reply */
 	guint8  release;
-	guint16	command;		/* 2  6 write */
 	guint16	tid;			/* request/transaction ID */
 	gint32  code;			/* error code/ offset NU */
 };
 
 /*
  * value_string table for AFP command codes.
  */
diff --git a/epan/dissectors/packet-atalk.c b/epan/dissectors/packet-atalk.c
index 60e8922250..ed0fe434ec 100644
--- a/epan/dissectors/packet-atalk.c
+++ b/epan/dissectors/packet-atalk.c
@@ -1000,37 +1000,33 @@ dissect_pap(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)
 /* -----------------------------
    ASP protocol cf. inside appletalk chap. 11
 */
-static struct atp_asp_dsi_info *
+static asp_request_val *
 get_transaction(tvbuff_t *tvb, packet_info *pinfo, struct atp_asp_dsi_info *atp_asp_dsi_info)
 {
   conversation_t  *conversation;
   asp_request_key  request_key, *new_request_key;
   asp_request_val *request_val;
   guint8           fn;
 
   conversation = find_or_create_conversation(pinfo);
 
   request_key.conversation = conversation->conv_index;
   memcpy(request_key.src, (!atp_asp_dsi_info->reply)?pinfo->src.data:pinfo->dst.data, 4);
   request_key.tid = atp_asp_dsi_info->tid;
 
   request_val = (asp_request_val *) wmem_map_lookup(asp_request_hash, &request_key);
   if (!request_val && !atp_asp_dsi_info->reply )  {
     fn = tvb_get_guint8(tvb, 0);
     new_request_key = wmem_new(wmem_file_scope(), asp_request_key);
     *new_request_key = request_key;
 
     request_val = wmem_new(wmem_file_scope(), asp_request_val);
     request_val->value = fn;
 
     wmem_map_insert(asp_request_hash, new_request_key, request_val);
   }
 
-  if (!request_val)
-    return NULL;
-
-  atp_asp_dsi_info->command = request_val->value;
-  return atp_asp_dsi_info;
+  return request_val;
 }
 
 
@@ -1038,147 +1034,149 @@ static int
 dissect_asp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)
 {
   struct atp_asp_dsi_info *atp_asp_dsi_info;
+  asp_request_val *request_val;
   int             offset   = 0;
   proto_tree     *asp_tree = NULL;
   proto_item     *ti;
   guint8          fn;
 
   /* Reject the packet if data is NULL */
   if (data == NULL)
     return 0;
 
   col_set_str(pinfo->cinfo, COL_PROTOCOL, "ASP");
   col_clear(pinfo->cinfo, COL_INFO);
 
-  atp_asp_dsi_info = get_transaction(tvb, pinfo, (struct atp_asp_dsi_info *)data);
-  if (!atp_asp_dsi_info)
+  atp_asp_dsi_info = (struct atp_asp_dsi_info *)data;
+  request_val = get_transaction(tvb, pinfo, atp_asp_dsi_info);
+  if (!request_val)
      return 0;
 
-  fn = (guint8) atp_asp_dsi_info->command;
+  fn = (guint8) request_val->value;
 
   if (atp_asp_dsi_info->reply)
     col_add_fstr(pinfo->cinfo, COL_INFO, "Reply tid %u",atp_asp_dsi_info->tid);
   else
     col_add_fstr(pinfo->cinfo, COL_INFO, "Function: %s  tid %u",
                  val_to_str_ext(fn, &asp_func_vals_ext, "Unknown (0x%01x)"), atp_asp_dsi_info->tid);
 
   if (tree) {
     ti = proto_tree_add_item(tree, proto_asp, tvb, offset, -1, ENC_NA);
     asp_tree = proto_item_add_subtree(ti, ett_asp);
   }
   if (!atp_asp_dsi_info->reply) {
     tvbuff_t   *new_tvb;
     /* let the called deal with asp_tree == NULL */
 
     proto_tree_add_item(asp_tree, hf_asp_func, tvb, offset, 1, ENC_BIG_ENDIAN);
     offset++;
     switch(fn) {
     case ASPFUNC_OPEN:
       proto_tree_add_item(asp_tree, hf_asp_socket, tvb, offset, 1, ENC_BIG_ENDIAN);
       offset++;
       proto_tree_add_item(asp_tree, hf_asp_version, tvb, offset, 2, ENC_BIG_ENDIAN);
       offset += 2;
       break;
     case ASPFUNC_TICKLE:
     case ASPFUNC_CLOSE:
       proto_tree_add_item(asp_tree, hf_asp_session_id, tvb, offset, 1, ENC_BIG_ENDIAN);
       offset++;
       proto_tree_add_item(asp_tree, hf_asp_zero_value, tvb, offset, 2, ENC_NA);
       offset +=2;
       break;
     case ASPFUNC_STAT:
       proto_tree_add_item(asp_tree, hf_asp_zero_value, tvb, offset, 1, ENC_NA);
       offset++;
       proto_tree_add_item(asp_tree, hf_asp_zero_value, tvb, offset, 2, ENC_NA);
       offset += 2;
       break;
     case ASPFUNC_ATTN:
       proto_tree_add_item(asp_tree, hf_asp_session_id, tvb, offset, 1, ENC_BIG_ENDIAN);
       offset++;
       proto_tree_add_item(asp_tree, hf_asp_attn_code, tvb, offset, 2, ENC_BIG_ENDIAN);
       offset +=2;
       break;
     case ASPFUNC_CMD:
     case ASPFUNC_WRITE:
       proto_item_set_len(asp_tree, 4);
       proto_tree_add_item(asp_tree, hf_asp_session_id, tvb, offset, 1, ENC_BIG_ENDIAN);
       offset++;
       proto_tree_add_item(asp_tree, hf_asp_seq, tvb, offset, 2, ENC_BIG_ENDIAN);
       offset += 2;
       new_tvb = tvb_new_subset_remaining(tvb, offset);
       call_dissector_with_data(afp_handle, new_tvb, pinfo, tree, atp_asp_dsi_info);
       break;
     case ASPFUNC_WRTCONT:
       proto_tree_add_item(asp_tree, hf_asp_session_id, tvb, offset, 1, ENC_BIG_ENDIAN);
       offset++;
       proto_tree_add_item(asp_tree, hf_asp_seq, tvb, offset, 2, ENC_BIG_ENDIAN);
       offset += 2;
       proto_tree_add_item(asp_tree, hf_asp_size, tvb, offset, 2, ENC_BIG_ENDIAN);
       offset += 2;
       break;
     default:
       proto_item_set_len(asp_tree, 4);
       offset += 3;
       call_data_dissector(tvb_new_subset_remaining(tvb, offset), pinfo, tree);
       break;
     }
   }
   else {
     tvbuff_t   *new_tvb;
 
     proto_tree_add_uint(asp_tree, hf_asp_func, tvb, 0, 0, fn);
     switch(fn) {
     case ASPFUNC_OPEN:
       proto_tree_add_item(asp_tree, hf_asp_socket, tvb, offset, 1, ENC_BIG_ENDIAN);
       offset++;
       proto_tree_add_item(asp_tree, hf_asp_session_id, tvb, offset, 1, ENC_BIG_ENDIAN);
       offset++;
       proto_tree_add_item(asp_tree, hf_asp_init_error, tvb, offset, 2, ENC_BIG_ENDIAN);
       offset += 2;
       break;
     case ASPFUNC_CLOSE:
       proto_tree_add_item(asp_tree, hf_asp_zero_value, tvb, offset, 1, ENC_NA);
       offset++;
       proto_tree_add_item(asp_tree, hf_asp_zero_value, tvb, offset, 1, ENC_NA);
       offset++;
       proto_tree_add_item(asp_tree, hf_asp_zero_value, tvb, offset, 2, ENC_NA);
       offset += 2;
       break;
     case ASPFUNC_STAT:
       proto_tree_add_item(asp_tree, hf_asp_zero_value, tvb, offset, 4, ENC_NA);
       offset += 4;
       /* XXX - what if something other than AFP is running atop ASP? */
       new_tvb = tvb_new_subset_remaining(tvb, offset);
       call_dissector(afp_server_status_handle, new_tvb, pinfo, asp_tree);
       break;
     case ASPFUNC_CMD:
     case ASPFUNC_WRITE:
       proto_item_set_len(asp_tree, 4);
       atp_asp_dsi_info->code = tvb_get_ntohl(tvb, offset);
       proto_tree_add_item(asp_tree, hf_asp_error, tvb, offset, 4, ENC_BIG_ENDIAN);
       offset += 4;
       new_tvb = tvb_new_subset_remaining(tvb, offset);
       call_dissector_with_data(afp_handle, new_tvb, pinfo, tree, atp_asp_dsi_info);
       break;
     case ASPFUNC_TICKLE:
     case ASPFUNC_WRTCONT:
       proto_tree_add_item(asp_tree, hf_asp_zero_value, tvb, offset, 4, ENC_NA);
       /* FALL THROUGH */
     case ASPFUNC_ATTN:  /* FIXME capture and spec disagree */
     default:
       proto_item_set_len(asp_tree, 4);
       offset += 4;
       call_data_dissector(tvb_new_subset_remaining(tvb, offset), pinfo, tree);
       break;
     }
   }
   return offset;
 }
 
 /* -----------------------------
    ZIP protocol cf. inside appletalk chap. 8
 */
 /*
  * Structure used to represent a DDP address; gives the layout of the
  * data pointed to by an Appletalk "address" structure.
  */
@@ -1223,77 +1221,79 @@ static int
 dissect_atp_zip(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)
 {
   struct atp_asp_dsi_info *atp_asp_dsi_info;
+  asp_request_val *request_val;
   int             offset = 0;
   proto_tree     *zip_tree;
   proto_tree     *sub_tree;
   proto_item     *ti;
   guint8          fn;
   guint16         count;
   guint8          len;
 
   /* Reject the packet if data is NULL */
   if (data == NULL)
     return 0;
 
   col_set_str(pinfo->cinfo, COL_PROTOCOL, "ZIP");
   col_clear(pinfo->cinfo, COL_INFO);
 
-  atp_asp_dsi_info = get_transaction(tvb, pinfo, (struct atp_asp_dsi_info *)data);
-  if (!atp_asp_dsi_info)
+  atp_asp_dsi_info = (struct atp_asp_dsi_info *)data;
+  request_val = get_transaction(tvb, pinfo, atp_asp_dsi_info);
+  if (!request_val)
      return tvb_reported_length(tvb);
 
-  fn = (guint8) atp_asp_dsi_info->command;
+  fn = (guint8) request_val->value;
 
   if (atp_asp_dsi_info->reply)
     col_add_fstr(pinfo->cinfo, COL_INFO, "Reply tid %u",atp_asp_dsi_info->tid);
   else
     col_add_fstr(pinfo->cinfo, COL_INFO, "Function: %s  tid %u",
                  val_to_str(fn, zip_atp_function_vals, "Unknown (0x%01x)"), atp_asp_dsi_info->tid);
 
   if (!tree)
     return tvb_reported_length(tvb);
 
   ti = proto_tree_add_item(tree, proto_zip, tvb, offset, -1, ENC_NA);
   zip_tree = proto_item_add_subtree(ti, ett_zip);
 
   if (!atp_asp_dsi_info->reply) {
     proto_tree_add_item(zip_tree, hf_zip_atp_function, tvb, offset, 1, ENC_BIG_ENDIAN);
     offset++;
     switch(fn) {
     case 7:     /* start_index = 0 */
     case 8:
     case 9:
       proto_tree_add_item(zip_tree, hf_zip_zero_value, tvb, offset, 1, ENC_NA);
       offset++;
       proto_tree_add_item(zip_tree, hf_zip_start_index, tvb, offset, 2, ENC_BIG_ENDIAN);
       break;
     }
   }
   else {
     guint i;
 
     proto_tree_add_uint(zip_tree, hf_zip_atp_function, tvb, 0, 0, fn);
     switch(fn) {
     case 7:
     case 8:
     case 9:
       proto_tree_add_item(zip_tree, hf_zip_last_flag, tvb, offset, 1, ENC_BIG_ENDIAN);
       offset++;
 
       proto_tree_add_item(zip_tree, hf_zip_zero_value, tvb, offset, 1, ENC_NA);
       offset++;
       count = tvb_get_ntohs(tvb, offset);
       ti = proto_tree_add_item(zip_tree, hf_zip_count, tvb, offset, 2, ENC_BIG_ENDIAN);
       offset += 2;
       sub_tree = proto_item_add_subtree(ti, ett_zip_zones_list);
       for (i = 0; i < count; i++) {
         len = tvb_get_guint8(tvb, offset);
         proto_tree_add_item(sub_tree, hf_zip_zone_name, tvb, offset, 1,ENC_ASCII|ENC_BIG_ENDIAN);
         offset += len +1;
       }
       break;
     }
   }
 
   return tvb_reported_length(tvb);
 }
diff --git a/epan/dissectors/packet-dsi.c b/epan/dissectors/packet-dsi.c
index b355b28189..962eee4fe9 100644
--- a/epan/dissectors/packet-dsi.c
+++ b/epan/dissectors/packet-dsi.c
@@ -25,25 +25,31 @@
 
 http://developer.apple.com/DOCUMENTATION/macos8/pdf/ASAppleTalkFiling2.1_2.2.pdf
 
+  which is no longer available and does not appear to be in the Wayback Machine.
+
   The netatalk source code by Wesley Craig & Adrian Sun
 
   The Data Stream Interface description from
-  http://developer.apple.com/documentation/Networking/Conceptual/AFPClient/AFPClient-6.html
 
-(no longer available, apparently)
+http://developer.apple.com/documentation/Networking/Conceptual/AFPClient/AFPClient-6.html
+
+  which is no longer available, but is archived at
+
+https://web.archive.org/web/20040924082047/http://developer.apple.com/documentation/Networking/Conceptual/AFPClient/AFPClient-6.html
 
   Also, AFP 3.3 documents parts of DSI at:
-  http://developer.apple.com/mac/library/documentation/Networking/Conceptual/AFP/Introduction/Introduction.html
+
+http://developer.apple.com/mac/library/documentation/Networking/Conceptual/AFP/Introduction/Introduction.html
 
  * What a Data Stream Interface packet looks like:
  * 0                               32
  * |-------------------------------|
  * |flags  |command| requestID     |
  * |-------------------------------|
  * |error code/enclosed data offset|
  * |-------------------------------|
  * |total data length              |
  * |-------------------------------|
  * |reserved field                 |
  * |-------------------------------|
  */
@@ -211,98 +217,97 @@ static int
 dissect_dsi_packet(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)
 {
 	proto_tree      *dsi_tree;
 	proto_item	*dsi_ti;
 	guint8		dsi_flags,dsi_command;
 	guint16		dsi_requestid;
 	gint32		dsi_code;
 	guint32		dsi_length;
 	struct		atp_asp_dsi_info atp_asp_dsi_info;
 
 
 	col_set_str(pinfo->cinfo, COL_PROTOCOL, "DSI");
 	col_clear(pinfo->cinfo, COL_INFO);
 
 	dsi_flags = tvb_get_guint8(tvb, 0);
 	dsi_command = tvb_get_guint8(tvb, 1);
 	dsi_requestid = tvb_get_ntohs(tvb, 2);
 	dsi_code = tvb_get_ntohl(tvb, 4);
 	dsi_length = tvb_get_ntohl(tvb, 8);
 
 	col_add_fstr(pinfo->cinfo, COL_INFO, "%s %s (%u)",
 			val_to_str(dsi_flags, flag_vals,
 				   "Unknown flag (0x%02x)"),
 			val_to_str_ext(dsi_command, &func_vals_ext,
 				   "Unknown function (0x%02x)"),
 			dsi_requestid);
 
 	dsi_ti = proto_tree_add_item(tree, proto_dsi, tvb, 0, -1, ENC_NA);
 	dsi_tree = proto_item_add_subtree(dsi_ti, ett_dsi);
 
 	if (tree) {
 		proto_tree_add_uint(dsi_tree, hf_dsi_flags, tvb,
 			0, 1, dsi_flags);
 		proto_tree_add_uint(dsi_tree, hf_dsi_command, tvb,
 			1, 1, dsi_command);
 		proto_tree_add_uint(dsi_tree, hf_dsi_requestid, tvb,
 			2, 2, dsi_requestid);
 		switch (dsi_flags) {
 
 		case DSIFL_REQUEST:
 			proto_tree_add_int(dsi_tree, hf_dsi_offset, tvb,
 				4, 4, dsi_code);
 			break;
 
 		case DSIFL_REPLY:
 			proto_tree_add_int(dsi_tree, hf_dsi_error, tvb,
 				4, 4, dsi_code);
 			break;
 		}
 		proto_tree_add_item(dsi_tree, hf_dsi_length, tvb,
 			8, 4, ENC_BIG_ENDIAN);
 		proto_tree_add_item(dsi_tree, hf_dsi_reserved, tvb,
 			12, 4, ENC_BIG_ENDIAN);
 	}
 
 	switch (dsi_command) {
 	case DSIFUNC_OPEN:
 		if (tree) {
 			dissect_dsi_open_session(tvb, dsi_tree, DSI_BLOCKSIZ, dsi_length);
 		}
 		break;
 	case DSIFUNC_ATTN:
 		if (tree) {
 			dissect_dsi_attention(tvb, dsi_tree, DSI_BLOCKSIZ);
 		}
 		break;
 	case DSIFUNC_STAT:
 		if (tree && (dsi_flags == DSIFL_REPLY)) {
 			tvbuff_t   *new_tvb;
 
 			/* XXX - assumes only AFP runs atop DSI */
 			new_tvb = tvb_new_subset_remaining(tvb, DSI_BLOCKSIZ);
 			call_dissector(afp_server_status_handle, new_tvb, pinfo, dsi_tree);
 		}
 		break;
 	case DSIFUNC_CMD:
 	case DSIFUNC_WRITE:
 		{
 			tvbuff_t   *new_tvb;
 
 			atp_asp_dsi_info.reply = (dsi_flags == DSIFL_REPLY);
-			atp_asp_dsi_info.command = dsi_command;
 			atp_asp_dsi_info.tid = dsi_requestid;
 			atp_asp_dsi_info.code = dsi_code;
 			proto_item_set_len(dsi_ti, DSI_BLOCKSIZ);
 
 			new_tvb = tvb_new_subset_remaining(tvb, DSI_BLOCKSIZ);
 			call_dissector_with_data(afp_handle, new_tvb, pinfo, tree, &atp_asp_dsi_info);
 		}
 		break;
 	default:
 		call_data_dissector(tvb_new_subset_remaining(tvb, DSI_BLOCKSIZ),
 						pinfo, dsi_tree);
 		break;
 	}
 
 	return tvb_captured_length(tvb);
 }
