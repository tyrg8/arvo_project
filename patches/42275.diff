commit 9b9132c715225faa4be288a18d72169bda40513c
Author: Antonio Maiorano <amaiorano@google.com>
Date:   Mon Dec 13 23:36:38 2021 +0000

    Fix OOB access while dumping struct layout for invalid storage class layout
    
    A one letter typo would lead to invalid memory access in the very
    specific case of outputting the layout for a struct within a struct with
    field alignment padding, and the inner struct has more members than the
    outer.
    
    Bug: tint:1344
    Bug: oss-fuzz:72642
    Change-Id: I749e3fb172e78a20ece68b40be1a0a57dc5746f4
    Reviewed-on: https://dawn-review.googlesource.com/c/tint/+/72642
    Reviewed-by: Ben Clayton <bclayton@google.com>
    Reviewed-by: David Neto <dneto@google.com>
    Kokoro: Kokoro <noreply+kokoro@google.com>
    Commit-Queue: Antonio Maiorano <amaiorano@google.com>

diff --git a/src/resolver/resolver_validation.cc b/src/resolver/resolver_validation.cc
index 6921a5154..117eb2568 100644
--- a/src/resolver/resolver_validation.cc
+++ b/src/resolver/resolver_validation.cc
@@ -234,201 +234,202 @@ bool Resolver::ValidateVariableConstructorOrCast(
 bool Resolver::ValidateStorageClassLayout(const sem::Struct* str,
                                           ast::StorageClass sc) {
   // https://gpuweb.github.io/gpuweb/wgsl/#storage-class-layout-constraints
 
   auto is_uniform_struct_or_array = [sc](const sem::Type* ty) {
     return sc == ast::StorageClass::kUniform &&
            ty->IsAnyOf<sem::Array, sem::Struct>();
   };
 
   auto is_uniform_struct = [sc](const sem::Type* ty) {
     return sc == ast::StorageClass::kUniform && ty->Is<sem::Struct>();
   };
 
   auto required_alignment_of = [&](const sem::Type* ty) {
     uint32_t actual_align = ty->Align();
     uint32_t required_align = actual_align;
     if (is_uniform_struct_or_array(ty)) {
       required_align = utils::RoundUp(16u, actual_align);
     }
     return required_align;
   };
 
   auto member_name_of = [this](const sem::StructMember* sm) {
     return builder_->Symbols().NameFor(sm->Declaration()->symbol);
   };
 
   auto type_name_of = [this](const sem::StructMember* sm) {
     return TypeNameOf(sm->Type());
   };
 
   // TODO(amaiorano): Output struct and member decorations so that this output
   // can be copied verbatim back into source
-  auto get_struct_layout_string = [&](const sem::Struct* st) -> std::string {
+  auto get_struct_layout_string = [this, member_name_of, type_name_of](
+                                      const sem::Struct* st) -> std::string {
     std::stringstream ss;
 
     if (st->Members().empty()) {
       TINT_ICE(Resolver, diagnostics_) << "Validation should have ensured that "
                                           "structs have at least one member";
       return {};
     }
     const auto* const last_member = st->Members().back();
     const uint32_t last_member_struct_padding_offset =
         last_member->Offset() + last_member->Size();
 
     // Compute max widths to align output
     const auto offset_w =
         static_cast<int>(::log10(last_member_struct_padding_offset)) + 1;
     const auto size_w = static_cast<int>(::log10(st->Size())) + 1;
     const auto align_w = static_cast<int>(::log10(st->Align())) + 1;
 
     auto print_struct_begin_line = [&](size_t align, size_t size,
                                        std::string struct_name) {
       ss << "/*          " << std::setw(offset_w) << " "
          << "align(" << std::setw(align_w) << align << ") size("
          << std::setw(size_w) << size << ") */ struct " << struct_name
          << " {\n";
     };
 
     auto print_struct_end_line = [&]() {
       ss << "/*                         "
          << std::setw(offset_w + size_w + align_w) << " "
          << "*/ };";
     };
 
     auto print_member_line = [&](size_t offset, size_t align, size_t size,
                                  std::string s) {
       ss << "/* offset(" << std::setw(offset_w) << offset << ") align("
          << std::setw(align_w) << align << ") size(" << std::setw(size_w)
          << size << ") */   " << s << ";\n";
     };
 
     print_struct_begin_line(st->Align(), st->Size(), TypeNameOf(st));
 
     for (size_t i = 0; i < st->Members().size(); ++i) {
       auto* const m = st->Members()[i];
 
       // Output field alignment padding, if any
-      auto* const prev_member = (i == 0) ? nullptr : str->Members()[i - 1];
+      auto* const prev_member = (i == 0) ? nullptr : st->Members()[i - 1];
       if (prev_member) {
         uint32_t padding =
             m->Offset() - (prev_member->Offset() + prev_member->Size());
         if (padding > 0) {
           size_t padding_offset = m->Offset() - padding;
           print_member_line(padding_offset, 1, padding,
                             "// -- implicit field alignment padding --");
         }
       }
 
       // Output member
       std::string member_name = member_name_of(m);
       print_member_line(m->Offset(), m->Align(), m->Size(),
                         member_name_of(m) + " : " + type_name_of(m));
     }
 
     // Output struct size padding, if any
     uint32_t struct_padding = st->Size() - last_member_struct_padding_offset;
     if (struct_padding > 0) {
       print_member_line(last_member_struct_padding_offset, 1, struct_padding,
                         "// -- implicit struct size padding --");
     }
 
     print_struct_end_line();
 
     return ss.str();
   };
 
   if (!ast::IsHostShareable(sc)) {
     return true;
   }
 
   for (size_t i = 0; i < str->Members().size(); ++i) {
     auto* const m = str->Members()[i];
     uint32_t required_align = required_alignment_of(m->Type());
 
     // Validate that member is at a valid byte offset
     if (m->Offset() % required_align != 0) {
       AddError("the offset of a struct member of type '" + type_name_of(m) +
                    "' in storage class '" + ast::ToString(sc) +
                    "' must be a multiple of " + std::to_string(required_align) +
                    " bytes, but '" + member_name_of(m) +
                    "' is currently at offset " + std::to_string(m->Offset()) +
                    ". Consider setting [[align(" +
                    std::to_string(required_align) + ")]] on this member",
                m->Declaration()->source);
 
       AddNote("see layout of struct:\n" + get_struct_layout_string(str),
               str->Declaration()->source);
 
       if (auto* member_str = m->Type()->As<sem::Struct>()) {
         AddNote("and layout of struct member:\n" +
                     get_struct_layout_string(member_str),
                 member_str->Declaration()->source);
       }
 
       return false;
     }
 
     // For uniform buffers, validate that the number of bytes between the
     // previous member of type struct and the current is a multiple of 16 bytes.
     auto* const prev_member = (i == 0) ? nullptr : str->Members()[i - 1];
     if (prev_member && is_uniform_struct(prev_member->Type())) {
       const uint32_t prev_to_curr_offset = m->Offset() - prev_member->Offset();
       if (prev_to_curr_offset % 16 != 0) {
         AddError(
             "uniform storage requires that the number of bytes between the "
             "start of the previous member of type struct and the current "
             "member be a multiple of 16 bytes, but there are currently " +
                 std::to_string(prev_to_curr_offset) + " bytes between '" +
                 member_name_of(prev_member) + "' and '" + member_name_of(m) +
                 "'. Consider setting [[align(16)]] on this member",
             m->Declaration()->source);
 
         AddNote("see layout of struct:\n" + get_struct_layout_string(str),
                 str->Declaration()->source);
 
         auto* prev_member_str = prev_member->Type()->As<sem::Struct>();
         AddNote("and layout of previous member struct:\n" +
                     get_struct_layout_string(prev_member_str),
                 prev_member_str->Declaration()->source);
         return false;
       }
     }
 
     // For uniform buffer array members, validate that array elements are
     // aligned to 16 bytes
     if (auto* arr = m->Type()->As<sem::Array>()) {
       if (sc == ast::StorageClass::kUniform) {
         // We already validated that this array member is itself aligned to 16
         // bytes above, so we only need to validate that stride is a multiple of
         // 16 bytes.
         if (arr->Stride() % 16 != 0) {
           AddError(
               "uniform storage requires that array elements be aligned to 16 "
               "bytes, but array stride of '" +
                   member_name_of(m) + "' is currently " +
                   std::to_string(arr->Stride()) +
                   ". Consider setting [[stride(" +
                   std::to_string(
                       utils::RoundUp(required_align, arr->Stride())) +
                   ")]] on the array type",
               m->Declaration()->type->source);
           AddNote("see layout of struct:\n" + get_struct_layout_string(str),
                   str->Declaration()->source);
           return false;
         }
       }
     }
 
     // If member is struct, recurse
     if (auto* str_member = m->Type()->As<sem::Struct>()) {
       // Cache result of struct + storage class pair
       if (valid_struct_storage_layouts_.emplace(str_member, sc).second) {
         if (!ValidateStorageClassLayout(str_member, sc)) {
           return false;
         }
       }
     }
   }
 
   return true;
 }
diff --git a/src/resolver/storage_class_layout_validation_test.cc b/src/resolver/storage_class_layout_validation_test.cc
index 3ad7d3f1f..467608d2f 100644
--- a/src/resolver/storage_class_layout_validation_test.cc
+++ b/src/resolver/storage_class_layout_validation_test.cc
@@ -263,6 +263,63 @@ TEST_F(ResolverStorageClassLayoutValidationTest,
 22:24 note: see declaration of variable)");
 }
 
+// See https://crbug.com/tint/1344
+TEST_F(ResolverStorageClassLayoutValidationTest,
+       UniformBuffer_MembersOffsetNotMultipleOf16_InnerMoreMembersThanOuter) {
+  // struct Inner {
+  //   a : i32;
+  //   b : i32;
+  //   c : i32;
+  //   [[align(1), size(5)]] scalar : i32;
+  // };
+  //
+  // [[block]]
+  // struct Outer {
+  //   inner : Inner;
+  //   scalar : i32;
+  // };
+  //
+  // [[group(0), binding(0)]]
+  // var<uniform> a : Outer;
+
+  Structure(Source{{12, 34}}, "Inner",
+            {
+                Member("a", ty.i32()),
+                Member("b", ty.i32()),
+                Member("c", ty.i32()),
+                Member("scalar", ty.i32(), {MemberAlign(1), MemberSize(5)}),
+            });
+
+  Structure(Source{{34, 56}}, "Outer",
+            {
+                Member(Source{{56, 78}}, "inner", ty.type_name("Inner")),
+                Member(Source{{78, 90}}, "scalar", ty.i32()),
+            },
+            {StructBlock()});
+
+  Global(Source{{22, 24}}, "a", ty.type_name("Outer"),
+         ast::StorageClass::kUniform, GroupAndBinding(0, 0));
+
+  ASSERT_FALSE(r()->Resolve());
+  EXPECT_EQ(
+      r()->error(),
+      R"(78:90 error: uniform storage requires that the number of bytes between the start of the previous member of type struct and the current member be a multiple of 16 bytes, but there are currently 20 bytes between 'inner' and 'scalar'. Consider setting [[align(16)]] on this member
+34:56 note: see layout of struct:
+/*            align(4) size(24) */ struct Outer {
+/* offset( 0) align(4) size(20) */   inner : Inner;
+/* offset(20) align(4) size( 4) */   scalar : i32;
+/*                              */ };
+12:34 note: and layout of previous member struct:
+/*            align(4) size(20) */ struct Inner {
+/* offset( 0) align(4) size( 4) */   a : i32;
+/* offset( 4) align(4) size( 4) */   b : i32;
+/* offset( 8) align(4) size( 4) */   c : i32;
+/* offset(12) align(1) size( 5) */   scalar : i32;
+/* offset(17) align(1) size( 3) */   // -- implicit struct size padding --;
+/*                              */ };
+22:24 note: see declaration of variable)");
+}
+
 TEST_F(ResolverStorageClassLayoutValidationTest,
        UniformBuffer_MembersOffsetNotMultipleOf16_SuggestedFix) {
   // struct Inner {
