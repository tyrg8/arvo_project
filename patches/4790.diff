commit 7838e0c00a8599cc964cdd19c972ebaeb17bfcbe
Author: Robert Quattlebaum <rquattlebaum@nestlabs.com>
Date:   Wed Feb 28 13:55:37 2018 -0800

    Fix for usage of uninitialized memory
    
    This change addresses a use-of-uninitialized-memory issue discovered by oss-fuzz.
    
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=4616

diff --git a/src/ncp-spinel/SpinelNCPInstance.cpp b/src/ncp-spinel/SpinelNCPInstance.cpp
index b62267f..d9d4adc 100644
--- a/src/ncp-spinel/SpinelNCPInstance.cpp
+++ b/src/ncp-spinel/SpinelNCPInstance.cpp
@@ -2473,648 +2473,686 @@ void
 SpinelNCPInstance::handle_ncp_spinel_value_is(spinel_prop_key_t key, const uint8_t* value_data_ptr, spinel_size_t value_data_len)
 {
 	const uint8_t *original_value_data_ptr = value_data_ptr;
 	spinel_size_t original_value_data_len = value_data_len;
 
 	if (key == SPINEL_PROP_LAST_STATUS) {
 		spinel_status_t status = SPINEL_STATUS_OK;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, "i", &status);
 		syslog(LOG_INFO, "[-NCP-]: Last status (%s, %d)", spinel_status_to_cstr(status), status);
 		if ((status >= SPINEL_STATUS_RESET__BEGIN) && (status <= SPINEL_STATUS_RESET__END)) {
 			syslog(LOG_NOTICE, "[-NCP-]: NCP was reset (%s, %d)", spinel_status_to_cstr(status), status);
 			process_event(EVENT_NCP_RESET, status);
 			if (!mResetIsExpected && (mDriverState == NORMAL_OPERATION)) {
 				wpantund_status_t wstatus = kWPANTUNDStatus_NCP_Reset;
 				switch(status) {
 				case SPINEL_STATUS_RESET_CRASH:
 				case SPINEL_STATUS_RESET_FAULT:
 				case SPINEL_STATUS_RESET_ASSERT:
 				case SPINEL_STATUS_RESET_WATCHDOG:
 				case SPINEL_STATUS_RESET_OTHER:
 					wstatus = kWPANTUNDStatus_NCP_Crashed;
 					break;
 				default:
 					break;
 				}
 				reset_tasks(wstatus);
 			}
 
 			if (mDriverState == NORMAL_OPERATION) {
 				reinitialize_ncp();
 			}
 			mResetIsExpected = false;
 			return;
 		} else if (status == SPINEL_STATUS_INVALID_COMMAND) {
 			syslog(LOG_NOTICE, "[-NCP-]: COMMAND NOT RECOGNIZED");
 		}
 	} else if (key == SPINEL_PROP_NCP_VERSION) {
 		const char* ncp_version = NULL;
 		spinel_ssize_t len = spinel_datatype_unpack(value_data_ptr, value_data_len, "U", &ncp_version);
 		if ((len <= 0) || (ncp_version == NULL)) {
 			syslog(LOG_CRIT, "[-NCP-]: Got a corrupted NCP version");
 			// TODO: Properly handle NCP Misbehavior
 			change_ncp_state(FAULT);
 		} else {
 			set_ncp_version_string(ncp_version);
 		}
 
 	} else if (key == SPINEL_PROP_INTERFACE_TYPE) {
 		unsigned int interface_type = 0;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, "i", &interface_type);
 
 		if (interface_type != SPINEL_PROTOCOL_TYPE_THREAD) {
 			syslog(LOG_CRIT, "[-NCP-]: NCP is using unsupported protocol type (%d)", interface_type);
 			change_ncp_state(FAULT);
 		}
 
 	} else if (key == SPINEL_PROP_PROTOCOL_VERSION) {
 		unsigned int protocol_version_major = 0;
 		unsigned int protocol_version_minor = 0;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, "ii", &protocol_version_major, &protocol_version_minor);
 
 		if (protocol_version_major != SPINEL_PROTOCOL_VERSION_THREAD_MAJOR) {
 			syslog(LOG_CRIT, "[-NCP-]: NCP is using unsupported protocol version (NCP:%d, wpantund:%d)", protocol_version_major, SPINEL_PROTOCOL_VERSION_THREAD_MAJOR);
 			change_ncp_state(FAULT);
 		}
 
 		if (protocol_version_minor != SPINEL_PROTOCOL_VERSION_THREAD_MINOR) {
 			syslog(LOG_WARNING, "[-NCP-]: NCP is using different protocol minor version (NCP:%d, wpantund:%d)", protocol_version_minor, SPINEL_PROTOCOL_VERSION_THREAD_MINOR);
 		}
 
 	} else if (key == SPINEL_PROP_CAPS) {
 		const uint8_t* data_ptr = value_data_ptr;
 		spinel_size_t data_len = value_data_len;
 		std::set<unsigned int> capabilities;
 
 		while(data_len != 0) {
 			unsigned int value = 0;
 			spinel_ssize_t parse_len = spinel_datatype_unpack(data_ptr, data_len, SPINEL_DATATYPE_UINT_PACKED_S, &value);
 			if (parse_len <= 0) {
 				syslog(LOG_WARNING, "[-NCP-]: Capability Parse failure");
 				break;
 			}
 			capabilities.insert(value);
 			syslog(LOG_INFO, "[-NCP-]: Capability (%s, %d)", spinel_capability_to_cstr(value), value);
 
 			data_ptr += parse_len;
 			data_len -= parse_len;
 		}
 
 		if (capabilities != mCapabilities) {
 			mCapabilities = capabilities;
 		}
 
 	} else if (key == SPINEL_PROP_NET_NETWORK_NAME) {
 		const char* value = NULL;
 		spinel_ssize_t len = spinel_datatype_unpack(value_data_ptr, value_data_len, "U", &value);
 
 		if ((len <= 0) || (value == NULL)) {
 			syslog(LOG_CRIT, "[-NCP-]: Got a corrupted NCP version");
 			// TODO: Properly handle NCP Misbehavior
 			change_ncp_state(FAULT);
 		} else {
 			syslog(LOG_INFO, "[-NCP-]: Network name \"%s\"", value);
 			if (mCurrentNetworkInstance.name != value) {
 				mCurrentNetworkInstance.name = value;
 				signal_property_changed(kWPANTUNDProperty_NetworkName, mCurrentNetworkInstance.name);
 			}
 		}
 
 	} else if (key == SPINEL_PROP_IPV6_LL_ADDR) {
 		struct in6_addr *addr = NULL;
 
 		spinel_datatype_unpack(value_data_ptr, value_data_len, "6", &addr);
 		if (addr != NULL) {
 			syslog(LOG_INFO, "[-NCP-]: Link-local IPv6 address \"%s\"", in6_addr_to_string(*addr).c_str());
 		}
 		update_link_local_address(addr);
 
 	} else if (key == SPINEL_PROP_IPV6_ML_ADDR) {
 		struct in6_addr *addr = NULL;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, "6", &addr);
 		if (addr != NULL) {
 			syslog(LOG_INFO, "[-NCP-]: Mesh-local IPv6 address \"%s\"", in6_addr_to_string(*addr).c_str());
 		}
 		update_mesh_local_address(addr);
 
 	} else if (key == SPINEL_PROP_IPV6_ML_PREFIX) {
 		struct in6_addr *addr = NULL;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, "6", &addr);
 		if (addr != NULL) {
 			syslog(LOG_INFO, "[-NCP-]: Mesh-local prefix \"%s\"", (in6_addr_to_string(*addr) + "/64").c_str());
 		}
 		update_mesh_local_prefix(addr);
 
 	} else if (key == SPINEL_PROP_IPV6_ADDRESS_TABLE) {
 		std::map<struct in6_addr, UnicastAddressEntry>::const_iterator iter;
 		std::map<struct in6_addr, UnicastAddressEntry> unicast_addresses(mUnicastAddresses);
 		const struct in6_addr *addr = NULL;
 		int num_address = 0;
 
 		while (value_data_len > 0) {
 			const uint8_t *entry_ptr = NULL;
 			spinel_size_t entry_len = 0;
 			spinel_ssize_t len = 0;
 			len = spinel_datatype_unpack(value_data_ptr, value_data_len, "D.", &entry_ptr, &entry_len);
 			if (len < 1) {
 				break;
 			}
 
 			addr = reinterpret_cast<const struct in6_addr*>(entry_ptr);
 			syslog(LOG_INFO, "[-NCP-]: IPv6 address [%d] \"%s\"", num_address, in6_addr_to_string(*addr).c_str());
 			num_address++;
 			unicast_addresses.erase(*addr);
 			handle_ncp_spinel_value_inserted(key, entry_ptr, entry_len);
 
 			value_data_ptr += len;
 			value_data_len -= len;
 		}
 
 		syslog(LOG_INFO, "[-NCP-]: IPv6 address: Total %d address%s", num_address, (num_address > 1) ? "es" : "");
 
 		// Since this was the whole list, we need to remove the addresses
 		// which originated from NCP that that weren't in the list.
 		for (iter = unicast_addresses.begin(); iter != unicast_addresses.end(); ++iter) {
 			if (iter->second.is_from_ncp()) {
 				unicast_address_was_removed(kOriginThreadNCP, iter->first);
 			}
 		}
 
 	} else if (key == SPINEL_PROP_IPV6_MULTICAST_ADDRESS_TABLE) {
 		std::map<struct in6_addr, MulticastAddressEntry>::const_iterator iter;
 		std::map<struct in6_addr, MulticastAddressEntry> multicast_addresses(mMulticastAddresses);
 		const struct in6_addr *addr = NULL;
 		int num_address = 0;
 
 		while (value_data_len > 0) {
 			const uint8_t *entry_ptr = NULL;
 			spinel_size_t entry_len = 0;
 			spinel_ssize_t len = 0;
 			len = spinel_datatype_unpack(value_data_ptr, value_data_len, "D.", &entry_ptr, &entry_len);
 			if (len < 1) {
 				break;
 			}
 
 			addr = reinterpret_cast<const struct in6_addr*>(entry_ptr);
 			syslog(LOG_INFO, "[-NCP-]: Multicast IPv6 address [%d] \"%s\"", num_address, in6_addr_to_string(*addr).c_str());
 			num_address++;
 			multicast_addresses.erase(*addr);
 			handle_ncp_spinel_value_inserted(key, entry_ptr, entry_len);
 
 			value_data_ptr += len;
 			value_data_len -= len;
 		}
 
 		// Since this was the whole list, we need to remove the addresses
 		// which originated from NCP that that weren't in the list.
 		for (iter = multicast_addresses.begin(); iter != multicast_addresses.end(); ++iter) {
 			if (iter->second.is_from_ncp()) {
 				multicast_address_was_left(kOriginThreadNCP, iter->first);
 			}
 		}
 
 	} else if (key == SPINEL_PROP_HWADDR) {
 		nl::Data hwaddr(value_data_ptr, value_data_len);
 		if (value_data_len == sizeof(mMACHardwareAddress)) {
 			set_mac_hardware_address(value_data_ptr);
 		}
 
 	} else if (key == SPINEL_PROP_MAC_15_4_LADDR) {
 		nl::Data hwaddr(value_data_ptr, value_data_len);
 		if (value_data_len == sizeof(mMACAddress)) {
 			set_mac_address(value_data_ptr);
 		}
 
 	} else if (key == SPINEL_PROP_MAC_15_4_PANID) {
 		uint16_t panid;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT16_S, &panid);
 		syslog(LOG_INFO, "[-NCP-]: PANID 0x%04X", panid);
 		if (panid != mCurrentNetworkInstance.panid) {
 			mCurrentNetworkInstance.panid = panid;
 			signal_property_changed(kWPANTUNDProperty_NetworkPANID, panid);
 		}
 
 	} else if (key == SPINEL_PROP_NET_XPANID) {
 		nl::Data xpanid(value_data_ptr, value_data_len);
 		char cstr_buf[200];
 		encode_data_into_string(value_data_ptr, value_data_len, cstr_buf, sizeof(cstr_buf), 0);
 		syslog(LOG_INFO, "[-NCP-] XPANID 0x%s", cstr_buf);
 
 		if ((value_data_len == 8) && 0 != memcmp(xpanid.data(), mCurrentNetworkInstance.xpanid, 8)) {
 			memcpy(mCurrentNetworkInstance.xpanid, xpanid.data(), 8);
 			signal_property_changed(kWPANTUNDProperty_NetworkXPANID, xpanid);
 		}
 
 	} else if (key == SPINEL_PROP_NET_PSKC) {
 		nl::Data network_pskc(value_data_ptr, value_data_len);
 		if (network_pskc != mNetworkPSKc) {
 			mNetworkPSKc = network_pskc;
 			signal_property_changed(kWPANTUNDProperty_NetworkPSKc, mNetworkPSKc);
 		}
 
 	} else if (key == SPINEL_PROP_NET_MASTER_KEY) {
 		nl::Data network_key(value_data_ptr, value_data_len);
 		if (ncp_state_is_joining_or_joined(get_ncp_state())) {
 			if (network_key != mNetworkKey) {
 				mNetworkKey = network_key;
 				signal_property_changed(kWPANTUNDProperty_NetworkKey, mNetworkKey);
 			}
 		}
 
 	} else if (key == SPINEL_PROP_NET_KEY_SEQUENCE_COUNTER) {
-		uint32_t network_key_index;
-		spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT32_S, &network_key_index);
-		if (network_key_index != mNetworkKeyIndex) {
+		uint32_t network_key_index = 0;
+		spinel_ssize_t ret;
+
+		ret = spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT32_S, &network_key_index);
+
+		__ASSERT_MACROS_check(ret > 0);
+
+		if ((ret > 0) && (network_key_index != mNetworkKeyIndex)) {
 			mNetworkKeyIndex = network_key_index;
 			signal_property_changed(kWPANTUNDProperty_NetworkKeyIndex, mNetworkKeyIndex);
 		}
 
 	} else if (key == SPINEL_PROP_PHY_CHAN) {
-		unsigned int value;
-		spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT_PACKED_S, &value);
-		syslog(LOG_INFO, "[-NCP-]: Channel %d", value);
-		if (value != mCurrentNetworkInstance.channel) {
-			mCurrentNetworkInstance.channel = value;
-			signal_property_changed(kWPANTUNDProperty_NCPChannel, mCurrentNetworkInstance.channel);
+		unsigned int value = 0;
+		spinel_ssize_t ret;
+
+		ret = spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT_PACKED_S, &value);
+
+		__ASSERT_MACROS_check(ret > 0);
+
+		if (ret > 0) {
+			syslog(LOG_INFO, "[-NCP-]: Channel %d", value);
+			if (value != mCurrentNetworkInstance.channel) {
+				mCurrentNetworkInstance.channel = value;
+				signal_property_changed(kWPANTUNDProperty_NCPChannel, mCurrentNetworkInstance.channel);
+			}
 		}
 
 	} else if (key == SPINEL_PROP_PHY_CHAN_SUPPORTED) {
 
-		uint8_t channel;
+		uint8_t channel = 0;
 		spinel_ssize_t len = 0;
 
 		mSupprotedChannels.clear();
 
 		while (value_data_len > 0)
 		{
 			len = spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT8_S, &channel);
+
+			if (len <= 0) {
+				break;
+			}
+
 			mSupprotedChannels.insert(channel);
 
 			value_data_ptr += len;
 			value_data_len -= len;
 		}
 
 	} else if (key == SPINEL_PROP_PHY_TX_POWER) {
-		int8_t value;
-		spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_INT8_S, &value);
-		syslog(LOG_INFO, "[-NCP-]: Tx power %d", value);
-		if (value != mTXPower) {
-			mTXPower = value;
-			signal_property_changed(kWPANTUNDProperty_NCPTXPower, mTXPower);
+		int8_t value = 0;
+		spinel_ssize_t ret;
+
+		ret = spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_INT8_S, &value);
+
+		__ASSERT_MACROS_check(ret > 0);
+
+		if (ret > 0) {
+			syslog(LOG_INFO, "[-NCP-]: Tx power %d", value);
+			if (value != mTXPower) {
+				mTXPower = value;
+				signal_property_changed(kWPANTUNDProperty_NCPTXPower, mTXPower);
+			}
 		}
 
 	} else if (key == SPINEL_PROP_STREAM_DEBUG) {
 		handle_ncp_log(value_data_ptr, value_data_len);
 
 	} else if (key == SPINEL_PROP_NET_ROLE) {
-		uint8_t value;
-		spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT8_S, &value);
-		syslog(LOG_INFO, "[-NCP-]: Net Role \"%s\" (%d)", spinel_net_role_to_cstr(value), value);
+		uint8_t value = 0;
+		spinel_ssize_t ret;
 
-		if (ncp_state_is_joining_or_joined(get_ncp_state())
-		  && (value != SPINEL_NET_ROLE_DETACHED)
-		) {
-			change_ncp_state(ASSOCIATED);
-		}
+		ret = spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT8_S, &value);
 
-		if (value == SPINEL_NET_ROLE_CHILD) {
-			if ((mThreadMode & SPINEL_THREAD_MODE_RX_ON_WHEN_IDLE) != 0) {
-				update_node_type(END_DEVICE);
-			} else {
-				update_node_type(SLEEPY_END_DEVICE);
+		__ASSERT_MACROS_check(ret > 0);
+
+		if (ret > 0) {
+			syslog(LOG_INFO, "[-NCP-]: Net Role \"%s\" (%d)", spinel_net_role_to_cstr(value), value);
+
+			if (ncp_state_is_joining_or_joined(get_ncp_state())
+			  && (value != SPINEL_NET_ROLE_DETACHED)
+			) {
+				change_ncp_state(ASSOCIATED);
 			}
 
-		} else if (value == SPINEL_NET_ROLE_ROUTER) {
-			update_node_type(ROUTER);
+			if (value == SPINEL_NET_ROLE_CHILD) {
+				if ((mThreadMode & SPINEL_THREAD_MODE_RX_ON_WHEN_IDLE) != 0) {
+					update_node_type(END_DEVICE);
+				} else {
+					update_node_type(SLEEPY_END_DEVICE);
+				}
+
+			} else if (value == SPINEL_NET_ROLE_ROUTER) {
+				update_node_type(ROUTER);
 
-		} else if (value == SPINEL_NET_ROLE_LEADER) {
-			update_node_type(LEADER);
+			} else if (value == SPINEL_NET_ROLE_LEADER) {
+				update_node_type(LEADER);
 
-		} else if (value == SPINEL_NET_ROLE_DETACHED) {
-			update_node_type(UNKNOWN);
-			if (ncp_state_is_associated(get_ncp_state())) {
-				change_ncp_state(ISOLATED);
+			} else if (value == SPINEL_NET_ROLE_DETACHED) {
+				update_node_type(UNKNOWN);
+				if (ncp_state_is_associated(get_ncp_state())) {
+					change_ncp_state(ISOLATED);
+				}
 			}
 		}
 
 	} else if (key == SPINEL_PROP_THREAD_MODE) {
-		uint8_t value;
-		spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT8_S, &value);
-		syslog(LOG_INFO, "[-NCP-]: Thread Mode \"%s\" (0x%02x)", thread_mode_to_string(value).c_str(), value);
-		mThreadMode = value;
+		uint8_t value = mThreadMode;
+		spinel_ssize_t ret;
 
-		switch (mNodeType)
-		{
-		case END_DEVICE:
-		case SLEEPY_END_DEVICE:
-			if ((mThreadMode & SPINEL_THREAD_MODE_RX_ON_WHEN_IDLE) != 0) {
-				update_node_type(END_DEVICE);
-			} else {
-				update_node_type(SLEEPY_END_DEVICE);
-			}
-			break;
+		ret = spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT8_S, &value);
 
-		default:
-			break;
+		__ASSERT_MACROS_check(ret > 0);
+
+		if (ret > 0) {
+			syslog(LOG_INFO, "[-NCP-]: Thread Mode \"%s\" (0x%02x)", thread_mode_to_string(value).c_str(), value);
+			mThreadMode = value;
+
+			switch (mNodeType)
+			{
+			case END_DEVICE:
+			case SLEEPY_END_DEVICE:
+				if ((mThreadMode & SPINEL_THREAD_MODE_RX_ON_WHEN_IDLE) != 0) {
+					update_node_type(END_DEVICE);
+				} else {
+					update_node_type(SLEEPY_END_DEVICE);
+				}
+				break;
+
+			default:
+				break;
+			}
 		}
 
 	} else if (key == SPINEL_PROP_NET_SAVED) {
 		bool is_commissioned = false;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_BOOL_S, &is_commissioned);
 		syslog(LOG_INFO, "[-NCP-]: NetSaved (NCP is commissioned?) \"%s\" ", is_commissioned ? "yes" : "no");
 		mIsCommissioned = is_commissioned;
 		if (mIsCommissioned && (get_ncp_state() == OFFLINE)) {
 			change_ncp_state(COMMISSIONED);
 		} else if (!mIsCommissioned && (get_ncp_state() == COMMISSIONED)) {
 			change_ncp_state(OFFLINE);
 		}
 
 	} else if (key == SPINEL_PROP_NET_STACK_UP) {
 		bool is_stack_up = false;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_BOOL_S, &is_stack_up);
 		syslog(LOG_INFO, "[-NCP-]: Stack is %sup", is_stack_up ? "" : "not ");
 
 		if (is_stack_up) {
 			if (!ncp_state_is_joining_or_joined(get_ncp_state())) {
 				change_ncp_state(ASSOCIATING);
 			}
 		} else {
 			if (!ncp_state_is_joining(get_ncp_state())) {
 				change_ncp_state(mIsCommissioned ? COMMISSIONED : OFFLINE);
 			}
 		}
 
 	} else if (key == SPINEL_PROP_NET_IF_UP) {
 		bool is_if_up = false;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_BOOL_S, &is_if_up);
 		syslog(LOG_INFO, "[-NCP-]: Interface is %sup", is_if_up ? "" : "not ");
 
 		if (ncp_state_is_interface_up(get_ncp_state()) && !is_if_up) {
 			change_ncp_state(mIsCommissioned ? COMMISSIONED : OFFLINE);
 		}
 
 	} else if (key == SPINEL_PROP_THREAD_ON_MESH_NETS) {
 		std::map<struct in6_addr, OnMeshPrefixEntry>::const_iterator iter;
 		std::map<struct in6_addr, OnMeshPrefixEntry> on_mesh_prefixes(mOnMeshPrefixes);
 		int num_prefix = 0;
 
 		while (value_data_len > 0) {
 			spinel_ssize_t len = 0;
 			struct in6_addr *prefix = NULL;
 			uint8_t prefix_len = 0;
-			bool stable;
+			bool stable = false;
 			uint8_t flags = 0;
-			bool is_local;
+			bool is_local = false;
 
 			len = spinel_datatype_unpack(value_data_ptr, value_data_len, "t(6CbCb)",
 						&prefix, &prefix_len, &stable, &flags, &is_local);
 
 			if (len < 1) {
 				break;
 			}
 
 			syslog(LOG_INFO, "[-NCP-]: On-mesh net [%d] \"%s/%d\" stable:%s local:%s flags:%s",
 				num_prefix,	in6_addr_to_string(*prefix).c_str(), prefix_len, stable ? "yes" : "no",
 				is_local ? "yes" : "no", on_mesh_prefix_flags_to_string(flags).c_str());
 
 			num_prefix++;
 
 			if (!is_local) {
 				on_mesh_prefixes.erase(*prefix);
 				on_mesh_prefix_was_added(kOriginThreadNCP, *prefix, prefix_len, flags, stable);
 			}
 
 			value_data_ptr += len;
 			value_data_len -= len;
 		}
 
 		// Since this was the whole list, we need to remove any prefixes
 		// which originated from NCP that that weren't in the new list.
 		for (iter = on_mesh_prefixes.begin(); iter != on_mesh_prefixes.end(); ++iter) {
 			if (iter->second.is_from_ncp()) {
 				on_mesh_prefix_was_removed(kOriginThreadNCP, iter->first, iter->second.get_prefix_len());
 			}
 		}
 
 	} else if (key == SPINEL_PROP_THREAD_OFF_MESH_ROUTES) {
 		handle_ncp_spinel_value_is_OFF_MESH_ROUTE(value_data_ptr, value_data_len);
 
 	} else if (key == SPINEL_PROP_THREAD_ASSISTING_PORTS) {
 		bool is_assisting = (value_data_len != 0);
 		uint16_t assisting_port(0);
 
 		if (is_assisting != get_current_network_instance().joinable) {
 			mCurrentNetworkInstance.joinable = is_assisting;
 			signal_property_changed(kWPANTUNDProperty_NestLabs_NetworkAllowingJoin, is_assisting);
 		}
 
 		if (is_assisting) {
 			int i;
 			syslog(LOG_NOTICE, "Network is joinable");
 			while (value_data_len > 0) {
 				i = spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT16_S, &assisting_port);
 				if (i <= 0) {
 					break;
 				}
 				syslog(LOG_NOTICE, "Assisting on port %d", assisting_port);
 				value_data_ptr += i;
 				value_data_len -= i;
 			}
 		} else {
 			syslog(LOG_NOTICE, "Network is not joinable");
 		}
 
 	} else if (key == SPINEL_PROP_JAM_DETECTED) {
 		bool jamDetected = false;
 
 		spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_BOOL_S, &jamDetected);
 		signal_property_changed(kWPANTUNDProperty_JamDetectionStatus, jamDetected);
 
 		if (jamDetected) {
 			syslog(LOG_NOTICE, "Signal jamming is detected");
 		} else {
 			syslog(LOG_NOTICE, "Signal jamming cleared");
 		}
 
 	} else if (key == SPINEL_PROP_STREAM_RAW) {
 		if (mPcapManager.is_enabled()) {
 			const uint8_t* frame_ptr(NULL);
 			unsigned int frame_len(0);
 			const uint8_t* meta_ptr(NULL);
 			unsigned int meta_len(0);
 			spinel_ssize_t ret;
 			PcapPacket packet;
 			uint16_t flags = 0;
 
 			packet.set_timestamp().set_dlt(PCAP_DLT_IEEE802_15_4);
 
 			// Unpack the packet.
 			ret = spinel_datatype_unpack(
 				value_data_ptr,
 				value_data_len,
 				SPINEL_DATATYPE_DATA_WLEN_S SPINEL_DATATYPE_DATA_S,
 				&frame_ptr,
 				&frame_len,
 				&meta_ptr,
 				&meta_len
 			);
 
 			require(ret > 0, bail);
 
 			// Unpack the metadata.
 			ret = spinel_datatype_unpack(
 				meta_ptr,
 				meta_len,
 				SPINEL_DATATYPE_INT8_S     // RSSI/TXPower
 				SPINEL_DATATYPE_INT8_S     // Noise Floor
 				SPINEL_DATATYPE_UINT16_S,  // Flags
 				NULL,   // Ignore RSSI/TXPower
 				NULL,	// Ignore Noise Floor
 				&flags
 			);
 
 			__ASSERT_MACROS_check(ret > 0);
 
 			if ((flags & SPINEL_MD_FLAG_TX) == SPINEL_MD_FLAG_TX)
 			{
 				// Ignore FCS for transmitted packets
 				frame_len -= 2;
 				packet.set_dlt(PCAP_DLT_IEEE802_15_4_NOFCS);
 			}
 
 			mPcapManager.push_packet(
 				packet
 					.append_ppi_field(PCAP_PPI_TYPE_SPINEL, meta_ptr, meta_len)
 					.append_payload(frame_ptr, frame_len)
 			);
 		}
 
 	} else if (key == SPINEL_PROP_THREAD_TMF_PROXY_STREAM) {
 		const uint8_t* frame_ptr(NULL);
 		unsigned int frame_len(0);
-		uint16_t locator;
-		uint16_t port;
+		uint16_t locator = 0;
+		uint16_t port = 0;
 		spinel_ssize_t ret;
 		Data data;
 
 		ret = spinel_datatype_unpack(
 			value_data_ptr,
 			value_data_len,
 			SPINEL_DATATYPE_DATA_S SPINEL_DATATYPE_UINT16_S SPINEL_DATATYPE_UINT16_S,
 			&frame_ptr,
 			&frame_len,
 			&locator,
 			&port
 		);
 
 		__ASSERT_MACROS_check(ret > 0);
 
 		// Analyze the packet to determine if it should be dropped.
 		if ((ret > 0)) {
 			// append frame
 			data.append(frame_ptr, frame_len);
 			// pack the locator in big endian.
 			data.push_back(locator >> 8);
 			data.push_back(locator & 0xff);
 			// pack the port in big endian.
 			data.push_back(port >> 8);
 			data.push_back(port & 0xff);
 			signal_property_changed(kWPANTUNDProperty_TmfProxyStream, data);
 		}
 
 	} else if ((key == SPINEL_PROP_STREAM_NET) || (key == SPINEL_PROP_STREAM_NET_INSECURE)) {
 		const uint8_t* frame_ptr(NULL);
 		unsigned int frame_len(0);
 		spinel_ssize_t ret;
 		uint8_t frame_data_type = FRAME_TYPE_DATA;
 
 		if (SPINEL_PROP_STREAM_NET_INSECURE == key) {
 			frame_data_type = FRAME_TYPE_INSECURE_DATA;
 		}
 
 		ret = spinel_datatype_unpack(
 			value_data_ptr,
 			value_data_len,
 			SPINEL_DATATYPE_DATA_S SPINEL_DATATYPE_DATA_S,
 			&frame_ptr,
 			&frame_len,
 			NULL,
 			NULL
 		);
 
 		__ASSERT_MACROS_check(ret > 0);
 
 		// Analyze the packet to determine if it should be dropped.
 		if ((ret > 0) && should_forward_hostbound_frame(&frame_data_type, frame_ptr, frame_len)) {
 			if (static_cast<bool>(mLegacyInterface) && (frame_data_type == FRAME_TYPE_LEGACY_DATA)) {
 				handle_alt_ipv6_from_ncp(frame_ptr, frame_len);
 			} else {
 				handle_normal_ipv6_from_ncp(frame_ptr, frame_len);
 			}
 		}
 	} else if (key == SPINEL_PROP_THREAD_CHILD_TABLE) {
 		SpinelNCPTaskGetNetworkTopology::Table child_table;
 		SpinelNCPTaskGetNetworkTopology::Table::iterator it;
 		int num_children = 0;
 
 		SpinelNCPTaskGetNetworkTopology::parse_child_table(value_data_ptr, value_data_len, child_table);
 
 		for (it = child_table.begin(); it != child_table.end(); it++)
 		{
 			num_children++;
 			syslog(LOG_INFO, "[-NCP-] Child: %02d %s", num_children, it->get_as_string().c_str());
 		}
 		syslog(LOG_INFO, "[-NCP-] Child: Total %d child%s", num_children, (num_children > 1) ? "ren" : "");
 
 	} else if (key == SPINEL_PROP_THREAD_NEIGHBOR_TABLE) {
 		SpinelNCPTaskGetNetworkTopology::Table neigh_table;
 		SpinelNCPTaskGetNetworkTopology::Table::iterator it;
 		int num_neighbor = 0;
 
 		SpinelNCPTaskGetNetworkTopology::parse_neighbor_table(value_data_ptr, value_data_len, neigh_table);
 
 		for (it = neigh_table.begin(); it != neigh_table.end(); it++)
 		{
 			num_neighbor++;
 			syslog(LOG_INFO, "[-NCP-] Neighbor: %02d %s", num_neighbor, it->get_as_string().c_str());
 		}
 		syslog(LOG_INFO, "[-NCP-] Neighbor: Total %d neighbor%s", num_neighbor, (num_neighbor > 1) ? "s" : "");
 
 	} else if (key == SPINEL_PROP_THREAD_NEIGHBOR_TABLE_ERROR_RATES) {
 		SpinelNCPTaskGetNetworkTopology::Table neigh_table;
 		SpinelNCPTaskGetNetworkTopology::Table::iterator it;
 		int num_neighbor = 0;
 
 		SpinelNCPTaskGetNetworkTopology::prase_neighbor_error_rates_table(value_data_ptr, value_data_len, neigh_table);
 
 		for (it = neigh_table.begin(); it != neigh_table.end(); it++)
 		{
 			num_neighbor++;
 			syslog(LOG_INFO, "[-NCP-] Neighbor: %02d %s", num_neighbor, it->get_as_string().c_str());
 		}
 		syslog(LOG_INFO, "[-NCP-] Neighbor: Total %d neighbor%s", num_neighbor, (num_neighbor > 1) ? "s" : "");
 
 	} else if (key == SPINEL_PROP_THREAD_ROUTER_TABLE) {
 		SpinelNCPTaskGetNetworkTopology::Table router_table;
 		SpinelNCPTaskGetNetworkTopology::Table::iterator it;
 		int num_router = 0;
 
 		SpinelNCPTaskGetNetworkTopology::parse_router_table(value_data_ptr, value_data_len, router_table);
 
 		for (it = router_table.begin(); it != router_table.end(); it++)
 		{
 			num_router++;
 			syslog(LOG_INFO, "[-NCP-] Router: %02d %s", num_router, it->get_as_string().c_str());
 		}
 		syslog(LOG_INFO, "[-NCP-] Router: Total %d router%s", num_router, (num_router > 1) ? "s" : "");
 
 
 	} else if (key == SPINEL_PROP_NET_PARTITION_ID) {
 		uint32_t paritition_id = 0;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT32_S, &paritition_id);
 		syslog(LOG_INFO, "[-NCP-] Partition id: %u (0x%x)", paritition_id, paritition_id);
 
 	} else if (key == SPINEL_PROP_THREAD_LEADER_NETWORK_DATA) {
 		char net_data_cstr_buf[540];
 		encode_data_into_string(value_data_ptr, value_data_len, net_data_cstr_buf, sizeof(net_data_cstr_buf), 0);
 		syslog(LOG_INFO, "[-NCP-] Leader network data: [%s]", net_data_cstr_buf);
 	}
@@ -3246,91 +3284,91 @@ void
 SpinelNCPInstance::handle_ncp_spinel_callback(unsigned int command, const uint8_t* cmd_data_ptr, spinel_size_t cmd_data_len)
 {
 	switch (command) {
 	case SPINEL_CMD_PROP_VALUE_IS:
 		{
-			spinel_prop_key_t key;
+			spinel_prop_key_t key = SPINEL_PROP_LAST_STATUS;
 			uint8_t* value_data_ptr = NULL;
 			spinel_size_t value_data_len = 0;
 			spinel_ssize_t ret;
 
 			ret = spinel_datatype_unpack(cmd_data_ptr, cmd_data_len, "CiiD", NULL, NULL, &key, &value_data_ptr, &value_data_len);
 
 			__ASSERT_MACROS_check(ret != -1);
 
 			if (ret == -1) {
 				return;
 			}
 
 			if (key != SPINEL_PROP_STREAM_DEBUG) {
 				syslog(LOG_INFO, "[NCP->] CMD_PROP_VALUE_IS(%s) tid:%d", spinel_prop_key_to_cstr(key), SPINEL_HEADER_GET_TID(cmd_data_ptr[0]));
 			}
 
 			return handle_ncp_spinel_value_is(key, value_data_ptr, value_data_len);
 		}
 		break;
 
 	case SPINEL_CMD_PROP_VALUE_INSERTED:
 		{
-			spinel_prop_key_t key;
-			uint8_t* value_data_ptr;
-			spinel_size_t value_data_len;
+			spinel_prop_key_t key = SPINEL_PROP_LAST_STATUS;
+			uint8_t* value_data_ptr = NULL;
+			spinel_size_t value_data_len = 0;
 			spinel_ssize_t ret;
 
 			ret = spinel_datatype_unpack(cmd_data_ptr, cmd_data_len, "CiiD", NULL, NULL, &key, &value_data_ptr, &value_data_len);
 
 			__ASSERT_MACROS_check(ret != -1);
 
 			if (ret == -1) {
 				return;
 			}
 
 			syslog(LOG_INFO, "[NCP->] CMD_PROP_VALUE_INSERTED(%s) tid:%d", spinel_prop_key_to_cstr(key), SPINEL_HEADER_GET_TID(cmd_data_ptr[0]));
 
 			return handle_ncp_spinel_value_inserted(key, value_data_ptr, value_data_len);
 		}
 		break;
 
 	case SPINEL_CMD_PROP_VALUE_REMOVED:
 		{
-			spinel_prop_key_t key;
-			uint8_t* value_data_ptr;
-			spinel_size_t value_data_len;
+			spinel_prop_key_t key = SPINEL_PROP_LAST_STATUS;
+			uint8_t* value_data_ptr = NULL;
+			spinel_size_t value_data_len = 0;
 			spinel_ssize_t ret;
 
 			ret = spinel_datatype_unpack(cmd_data_ptr, cmd_data_len, "CiiD", NULL, NULL, &key, &value_data_ptr, &value_data_len);
 
 			__ASSERT_MACROS_check(ret != -1);
 
 			if (ret == -1) {
 				return;
 			}
 
 			syslog(LOG_INFO, "[NCP->] CMD_PROP_VALUE_REMOVED(%s) tid:%d", spinel_prop_key_to_cstr(key), SPINEL_HEADER_GET_TID(cmd_data_ptr[0]));
 
 			return handle_ncp_spinel_value_removed(key, value_data_ptr, value_data_len);
 		}
 		break;
 
 	case SPINEL_CMD_PEEK_RET:
 		{
-			uint32_t address;
-			uint16_t count;
+			uint32_t address = 0;
+			uint16_t count = 0;
 			spinel_ssize_t ret;
 
 			ret = spinel_datatype_unpack(cmd_data_ptr, cmd_data_len, "CiLS", NULL, NULL, &address, &count);
 
 			__ASSERT_MACROS_check(ret != -1);
 
 			if (ret > 0) {
 				syslog(LOG_INFO, "[NCP->] CMD_PEEK_RET(0x%x,%d) tid:%d", address, count, SPINEL_HEADER_GET_TID(cmd_data_ptr[0]));
 			}
 		}
 		break;
 
 
 	default:
 		break;
 	}
 
 	process_event(EVENT_NCP(command), cmd_data_ptr[0], cmd_data_ptr, cmd_data_len);
 }
