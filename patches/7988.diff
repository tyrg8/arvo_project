commit b36fec348256c49819925b46b13a2737bb370665
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Sat Nov 24 21:43:52 2018 -0500

    ...

diff --git a/MagickCore/enhance.c b/MagickCore/enhance.c
index 56497db7d..c2c5de6e7 100644
--- a/MagickCore/enhance.c
+++ b/MagickCore/enhance.c
@@ -608,192 +608,196 @@ static MagickBooleanType CLAHE(const size_t width,const size_t height,
 MagickExport MagickBooleanType CLAHEImage(Image *image,const size_t x_tiles,
   const size_t y_tiles,const size_t number_bins,const double clip_limit,
   ExceptionInfo *exception)
 {
 #define CLAHEImageTag  "CLAHE/Image"
 
   CacheView
     *image_view;
 
   ColorspaceType
     colorspace;
 
   MagickBooleanType
     status;
 
   MagickOffsetType
     progress;
 
   MemoryInfo
     *pixel_cache;
 
   OffsetInfo
     tile;
 
-  ssize_t
-    y;
-
   size_t
     height,
     n,
     width;
 
+  ssize_t
+    y;
+
   unsigned short
     *pixels;
 
   /*
     Allocate and initialize histogram arrays.
   */
   assert(image != (Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",image->filename);
   colorspace=image->colorspace;
   if (TransformImageColorspace(image,LabColorspace,exception) == MagickFalse)
     return(MagickFalse);
   status=MagickTrue;
-  tile.x=(ssize_t) (x_tiles < 2 ? 2 : x_tiles >= MaxCLAHETiles ?
-    MaxCLAHETiles-1 : x_tiles);
-  tile.y=(ssize_t) (y_tiles < 2 ? 2 : y_tiles >= MaxCLAHETiles ?
-    MaxCLAHETiles-1 : y_tiles);
+  tile.x=(ssize_t) (x_tiles < 2 ? 2 : x_tiles >= MaxCLAHETiles ? MaxCLAHETiles-
+    1 : x_tiles);
+  tile.y=(ssize_t) (y_tiles < 2 ? 2 : y_tiles >= MaxCLAHETiles ? MaxCLAHETiles-
+    1 : y_tiles);
   width=((image->columns+tile.x/2)/tile.x)*tile.x;
   height=((image->rows+tile.y/2)/tile.y)*tile.y;
   pixel_cache=AcquireVirtualMemory(width,height*sizeof(*pixels));
   if (pixel_cache == (MemoryInfo *) NULL)
-    ThrowBinaryException(ResourceLimitError,"MemoryAllocationFailed",
-      image->filename);
+    {
+      if (TransformImageColorspace(image,colorspace,exception) == MagickFalse)
+        return(MagickFalse);
+      ThrowBinaryException(ResourceLimitError,"MemoryAllocationFailed",
+        image->filename);
+    }
   pixels=(unsigned short *) GetVirtualMemoryBlob(pixel_cache);
   image_view=AcquireVirtualCacheView(image,exception);
   n=0;
   for (y=0; y < (ssize_t) height; y++)
   {
     register const Quantum
       *magick_restrict p;
 
     register ssize_t
       x;
 
     if (status == MagickFalse)
       continue;
     p=GetCacheViewVirtualPixels(image_view,0,y,width,1,exception);
     if (p == (const Quantum *) NULL)
       {
         status=MagickFalse;
         continue;
       }
     for (x=0; x < (ssize_t) image->columns; x++)
     {
       pixels[n++]=ScaleQuantumToShort(p[0]);
       p+=GetPixelChannels(image);
     }
     if (image->progress_monitor != (MagickProgressMonitor) NULL)
       {
         MagickBooleanType
           proceed;
 
 #if defined(MAGICKCORE_OPENMP_SUPPORT)
         #pragma omp atomic
 #endif
         progress++;
         proceed=SetImageProgress(image,CLAHEImageTag,progress,2*
           GetPixelChannels(image));
         if (proceed == MagickFalse)
           status=MagickFalse;
       }
   }
   image_view=DestroyCacheView(image_view);
   status=CLAHE(width,height,0,65535,(size_t) tile.x,(size_t) tile.y,
     number_bins == 0 ? (size_t) 128 : MagickMin(number_bins,256),clip_limit,
     pixels);
   if (status == MagickFalse)
     (void) ThrowMagickException(exception,GetMagickModule(),
       ResourceLimitError,"MemoryAllocationFailed","`%s'",image->filename);
   image_view=AcquireAuthenticCacheView(image,exception);
   n=0;
   for (y=0; y < (ssize_t) image->rows; y++)
   {
     register Quantum
       *magick_restrict q;
 
     register ssize_t
       x;
 
     if (status == MagickFalse)
       continue;
     q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);
     if (q == (Quantum *) NULL)
       {
         status=MagickFalse;
         continue;
       }
     for (x=0; x < (ssize_t) image->columns; x++)
     {
       q[0]=ScaleShortToQuantum(pixels[n++]);
       q+=GetPixelChannels(image);
     }
     if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)
       status=MagickFalse;
     if (image->progress_monitor != (MagickProgressMonitor) NULL)
       {
         MagickBooleanType
           proceed;
 
 #if defined(MAGICKCORE_OPENMP_SUPPORT)
         #pragma omp atomic
 #endif
         progress++;
         proceed=SetImageProgress(image,CLAHEImageTag,progress,2*
           GetPixelChannels(image));
         if (proceed == MagickFalse)
           status=MagickFalse;
       }
   }
   image_view=DestroyCacheView(image_view);
   pixel_cache=RelinquishVirtualMemory(pixel_cache);
   return(TransformImageColorspace(image,colorspace,exception));
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %     C l u t I m a g e                                                       %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ClutImage() replaces each color value in the given image, by using it as an
 %  index to lookup a replacement color value in a Color Look UP Table in the
 %  form of an image.  The values are extracted along a diagonal of the CLUT
 %  image so either a horizontal or vertial gradient image can be used.
 %
 %  Typically this is used to either re-color a gray-scale image according to a
 %  color gradient in the CLUT image, or to perform a freeform histogram
 %  (level) adjustment according to the (typically gray-scale) gradient in the
 %  CLUT image.
 %
 %  When the 'channel' mask includes the matte/alpha transparency channel but
 %  one image has no such channel it is assumed that that image is a simple
 %  gray-scale image that will effect the alpha channel values, either for
 %  gray-scale coloring (with transparent or semi-transparent colors), or
 %  a histogram adjustment of existing alpha channel values.   If both images
 %  have matte channels, direct and normal indexing is applied, which is rarely
 %  used.
 %
 %  The format of the ClutImage method is:
 %
 %      MagickBooleanType ClutImage(Image *image,Image *clut_image,
 %        const PixelInterpolateMethod method,ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image: the image, which is replaced by indexed CLUT values
 %
 %    o clut_image: the color lookup table image for replacement color values.
 %
 %    o method: the pixel interpolation method.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
