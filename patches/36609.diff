commit c8c0f1b296fd2e132aee0c0355c10550da87029a
Author: Greg Landrum <greg.landrum@gmail.com>
Date:   Fri Aug 6 17:15:24 2021 +0200

    fix a bug with query handling in CXSMARTS (#4389)

diff --git a/Code/GraphMol/SmilesParse/CXSmilesOps.cpp b/Code/GraphMol/SmilesParse/CXSmilesOps.cpp
index 3659d036d..a344c6d05 100644
--- a/Code/GraphMol/SmilesParse/CXSmilesOps.cpp
+++ b/Code/GraphMol/SmilesParse/CXSmilesOps.cpp
@@ -816,49 +816,49 @@ void addquery(Q *qry, std::string symbol, RDKit::RWMol &mol, unsigned int idx) {
   PRECONDITION(qry, "bad query");
   auto *qa = new QueryAtom(0);
   qa->setQuery(qry);
   qa->setNoImplicit(true);
   mol.replaceAtom(idx, qa);
   if (symbol != "") {
     mol.getAtomWithIdx(idx)->setProp(RDKit::common_properties::atomLabel,
                                      symbol);
   }
   delete qa;
 }
 void processCXSmilesLabels(RDKit::RWMol &mol) {
-  for (RDKit::ROMol::AtomIterator atIt = mol.beginAtoms();
-       atIt != mol.endAtoms(); ++atIt) {
+  for (auto atom : mol.atoms()) {
     std::string symb = "";
-    if ((*atIt)->getPropIfPresent(RDKit::common_properties::atomLabel, symb)) {
+    if (atom->getPropIfPresent(RDKit::common_properties::atomLabel, symb)) {
       if (symb == "star_e") {
         /* according to the MDL spec, these match anything, but in MARVIN they
         are "unspecified end groups" for polymers */
-        addquery(makeAtomNullQuery(), symb, mol, (*atIt)->getIdx());
+        addquery(makeAtomNullQuery(), symb, mol, atom->getIdx());
       } else if (symb == "Q_e") {
-        addquery(makeQAtomQuery(), symb, mol, (*atIt)->getIdx());
+        addquery(makeQAtomQuery(), symb, mol, atom->getIdx());
       } else if (symb == "QH_p") {
-        addquery(makeQHAtomQuery(), symb, mol, (*atIt)->getIdx());
+        addquery(makeQHAtomQuery(), symb, mol, atom->getIdx());
       } else if (symb == "AH_p") {  // this seems wrong...
         /* According to the MARVIN Sketch, AH is "any atom, including H" -
         this would be "*" in SMILES - and "A" is "any atom except H".
         The CXSMILES docs say that "A" can be represented normally in SMILES
         and that "AH" needs to be written out as AH_p. I'm going to assume that
         this is a Marvin internal thing and just parse it as they describe it.
         This means that "*" in the SMILES itself needs to be treated
         differently, which we do below. */
-        addquery(makeAHAtomQuery(), symb, mol, (*atIt)->getIdx());
+        addquery(makeAHAtomQuery(), symb, mol, atom->getIdx());
       } else if (symb == "X_p") {
-        addquery(makeXAtomQuery(), symb, mol, (*atIt)->getIdx());
+        addquery(makeXAtomQuery(), symb, mol, atom->getIdx());
       } else if (symb == "XH_p") {
-        addquery(makeXHAtomQuery(), symb, mol, (*atIt)->getIdx());
+        addquery(makeXHAtomQuery(), symb, mol, atom->getIdx());
       } else if (symb == "M_p") {
-        addquery(makeMAtomQuery(), symb, mol, (*atIt)->getIdx());
+        addquery(makeMAtomQuery(), symb, mol, atom->getIdx());
       } else if (symb == "MH_p") {
-        addquery(makeMHAtomQuery(), symb, mol, (*atIt)->getIdx());
+        addquery(makeMHAtomQuery(), symb, mol, atom->getIdx());
       }
-    } else if ((*atIt)->getAtomicNum() == 0 && (*atIt)->getSymbol() == "*") {
-      addquery(makeAAtomQuery(), "", mol, (*atIt)->getIdx());
+    } else if (atom->getAtomicNum() == 0 && !atom->hasQuery() &&
+               atom->getSymbol() == "*") {
+      addquery(makeAAtomQuery(), "", mol, atom->getIdx());
     }
   }
 }
 
 }  // end of anonymous namespace
diff --git a/Code/GraphMol/SmilesParse/catch_tests.cpp b/Code/GraphMol/SmilesParse/catch_tests.cpp
index 44b818ad3..6edbf46e5 100644
--- a/Code/GraphMol/SmilesParse/catch_tests.cpp
+++ b/Code/GraphMol/SmilesParse/catch_tests.cpp
@@ -888,85 +888,106 @@ TEST_CASE(
 TEST_CASE("Github #4319 add CXSMARTS support") {
   // note: the CXSMARTS support uses exactly the same code as the CXSMILES
   // parser/writer. We aren't testing that here since it's tested already with
   // the CXSMILES tests. The goal here is just to make sure that it's being
   // called by default and that we can control its behavior with the
   // SmartsParseParams structure
   SECTION("defaults") {
     auto mol = "CCC |$foo;;bar$|"_smarts;
     REQUIRE(mol);
     REQUIRE(mol->getNumAtoms() == 3);
     CHECK(mol->getAtomWithIdx(0)->getProp<std::string>(
               common_properties::atomLabel) == "foo");
     CHECK(mol->getAtomWithIdx(2)->getProp<std::string>(
               common_properties::atomLabel) == "bar");
     CHECK(!mol->getAtomWithIdx(1)->hasProp(common_properties::atomLabel));
   }
   SECTION("params") {
     std::string sma = "CCC |$foo;;bar$|";
     SmartsParserParams ps;
     const std::unique_ptr<RWMol> mol(SmartsToMol(sma, ps));
     REQUIRE(mol);
     REQUIRE(mol->getNumAtoms() == 3);
     CHECK(mol->getAtomWithIdx(0)->getProp<std::string>(
               common_properties::atomLabel) == "foo");
     CHECK(mol->getAtomWithIdx(2)->getProp<std::string>(
               common_properties::atomLabel) == "bar");
     CHECK(!mol->getAtomWithIdx(1)->hasProp(common_properties::atomLabel));
   }
   SECTION("no cxsmarts") {
     std::string sma = "CCC |$foo;;bar$|";
     SmartsParserParams ps;
     ps.allowCXSMILES = false;
     const std::unique_ptr<RWMol> mol(SmartsToMol(sma, ps));
     REQUIRE(!mol);
   }
   SECTION("name") {
     std::string sma = "CCC foobar";
     SmartsParserParams ps;
     ps.parseName = true;
     const std::unique_ptr<RWMol> mol(SmartsToMol(sma, ps));
     REQUIRE(mol);
     REQUIRE(mol->getProp<std::string>(common_properties::_Name) == "foobar");
   }
   SECTION("writer") {
     auto mol = "CCC |$foo;;bar$|"_smarts;
     REQUIRE(mol);
     REQUIRE(mol->getNumAtoms() == 3);
     CHECK(MolToSmarts(*mol) == "CCC");
     CHECK(MolToCXSmarts(*mol) == "CCC |$foo;;bar$|");
   }
   SECTION("writer, check reordering") {
     auto mol = "CC1.OC1 |$foo;;;bar$|"_smarts;
     REQUIRE(mol);
     REQUIRE(mol->getNumAtoms() == 4);
     CHECK(MolToSmarts(*mol) == "CCCO");
     CHECK(MolToCXSmarts(*mol) == "CCCO |$foo;;bar;$|");
   }
 
   SECTION("parser, confirm enhanced stereo working") {
     auto mol = "[#6][C@]([#8])(F)Cl |&1:1|"_smarts;
     REQUIRE(mol);
     REQUIRE(mol->getNumAtoms() == 5);
     CHECK(MolToSmarts(*mol) == "[#6][C@](-,:[#8])(-,:F)Cl");
     CHECK(MolToCXSmarts(*mol) == "[#6][C@](-,:[#8])(-,:F)Cl |&1:1|");
 
     {
       auto smol = "C[C@](O)(F)Cl |&1:1|"_smiles;
       REQUIRE(smol);
       SubstructMatchParameters sssparams;
       sssparams.useEnhancedStereo = true;
       sssparams.useChirality = true;
       CHECK(SubstructMatch(*smol, *mol, sssparams).size() == 1);
     }
     {
       auto smol = "C[C@](O)(F)Cl |o1:1|"_smiles;
       REQUIRE(smol);
       SubstructMatchParameters sssparams;
       sssparams.useEnhancedStereo = true;
       sssparams.useChirality = true;
       CHECK(SubstructMatch(*smol, *mol, sssparams).empty());
     }
   }
+
+  SECTION("CXSMARTS parsing bug") {
+    {  // no cxsmarts
+      auto mol = "C[C@H]([F,Cl,Br])[C@H](C)[C@@H](C)Br"_smarts;
+      REQUIRE(mol);
+      CHECK(mol->getAtomWithIdx(2)->getQuery()->getDescription() == "AtomOr");
+      CHECK(MolToSmarts(*mol) ==
+            "C[C@&H1](-,:[F,Cl,Br])[C@&H1](-,:C)[C@@&H1](-,:C)Br");
+      CHECK(MolToCXSmarts(*mol) ==
+            "C[C@&H1](-,:[F,Cl,Br])[C@&H1](-,:C)[C@@&H1](-,:C)Br");
+    }
+    {  // make sure that doesn't break anything
+      auto mol = "C[C@H]([F,Cl,Br])[C@H](C)[C@@H](C)Br |a:1,o1:4,5|"_smarts;
+      REQUIRE(mol);
+      CHECK(mol->getAtomWithIdx(2)->getQuery()->getDescription() == "AtomOr");
+      CHECK(MolToSmarts(*mol) ==
+            "C[C@&H1](-,:[F,Cl,Br])[C@&H1](-,:C)[C@@&H1](-,:C)Br");
+      CHECK(MolToCXSmarts(*mol) ==
+            "C[C@&H1](-,:[F,Cl,Br])[C@&H1](-,:C)[C@@&H1](-,:C)Br |a:1,o1:4,5|");
+    }
+  }
 }
 
 TEST_CASE("Github #4233: data groups in CXSMILES neither parsed nor written") {
