commit 7d874e2d3caff57d571cfca28b7919bda9f30c97
Author: Pascal Quantin <pascal@wireshark.org>
Date:   Sun Sep 22 12:08:12 2019 +0200

    RRC: do not use a freed wmem_strbuf structure
    
    Bug: 16067
    Change-Id: Id67445d1769ff60560ac52ba03736055892fd029
    Reviewed-on: https://code.wireshark.org/review/34590
    Petri-Dish: Pascal Quantin <pascal@wireshark.org>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Pascal Quantin <pascal@wireshark.org>

diff --git a/epan/dissectors/asn1/rrc/rrc.cnf b/epan/dissectors/asn1/rrc/rrc.cnf
index 791a76dfa2..058e8e03aa 100644
--- a/epan/dissectors/asn1/rrc/rrc.cnf
+++ b/epan/dissectors/asn1/rrc/rrc.cnf
@@ -176,830 +176,830 @@ HandoverFromUTRANCommand-GSM-r3-IEs/gsm-message/single-GSM-Message single-GSM-Me
 HandoverFromUTRANCommand-GSM-r6-IEs/gsm-message/single-GSM-Message single-GSM-Message-r6
 
 #.END
 
 #.FN_BODY NAS-Message VAL_PTR = &nas_message_tvb
   tvbuff_t *nas_message_tvb=NULL;
 
 %(DEFAULT_BODY)s
 
     if (nas_message_tvb)
         call_dissector(gsm_a_dtap_handle,nas_message_tvb,%(ACTX)s->pinfo, tree);
 
 #.FN_BODY InterRATHandoverInfo/ue-CapabilityContainer/present VAL_PTR = &ue_radio_access_cap_info_tvb
   tvbuff_t *ue_radio_access_cap_info_tvb=NULL;
 
 %(DEFAULT_BODY)s
 
   if (ue_radio_access_cap_info_tvb)
     call_dissector(rrc_ue_radio_access_cap_info_handle,ue_radio_access_cap_info_tvb,%(ACTX)s->pinfo, tree);
 
 #.END
 
 #.FN_BODY ActiveSetUpdate
   col_append_str(actx->pinfo->cinfo, COL_INFO, "ActiveSetUpdate");
 %(DEFAULT_BODY)s
 
 #.FN_BODY ActiveSetUpdateComplete
   col_append_str(actx->pinfo->cinfo, COL_INFO, "ActiveSetUpdateComplete");
 %(DEFAULT_BODY)s
 
 #.FN_BODY ActiveSetUpdateFailure
   col_append_str(actx->pinfo->cinfo, COL_INFO, "ActiveSetUpdateFailure");
 %(DEFAULT_BODY)s
 
 #.FN_BODY AssistanceDataDelivery
   col_append_str(actx->pinfo->cinfo, COL_INFO, "AssistanceDataDelivery");
 %(DEFAULT_BODY)s
 
 #.FN_BODY CellChangeOrderFromUTRAN
   col_append_str(actx->pinfo->cinfo, COL_INFO, "CellChangeOrderFromUTRAN");
 %(DEFAULT_BODY)s
 
 #.FN_BODY CellChangeOrderFromUTRANFailure
   col_append_str(actx->pinfo->cinfo, COL_INFO, "CellChangeOrderFromUTRANFailure");
 %(DEFAULT_BODY)s
 
 #.FN_BODY CellUpdate
   col_append_str(actx->pinfo->cinfo, COL_INFO, "CellUpdate");
 %(DEFAULT_BODY)s
 
 #.FN_BODY CellUpdateFDD-r11
   col_append_str(actx->pinfo->cinfo, COL_INFO, "CellUpdateFDD-r11");
 %(DEFAULT_BODY)s
 
 #.FN_BODY CellUpdateConfirm-CCCH
   fp_info  *fpinf = NULL;
   rlc_info *rlcinf = NULL;
   guint32 u_rnti;
   col_append_str(actx->pinfo->cinfo, COL_INFO, "CellUpdateConfirm-CCCH");
 %(DEFAULT_BODY)s
   if(PINFO_FD_VISITED(actx->pinfo)) {
     return offset;
   }
 
   fpinf = (fp_info *)p_get_proto_data(wmem_file_scope(), actx->pinfo, proto_fp, 0);
   rlcinf = (rlc_info *)p_get_proto_data(wmem_file_scope(), actx->pinfo, proto_umts_rlc, 0);
 
   /*If FP info or RLC info is missing , skip all this*/
   if(fpinf == NULL || rlcinf == NULL){
       return offset;
   }
 
   /* If UE is moving to CELL_DCH we need to map it's U-RNTI to the new CRNC context in NBAP */
   if (private_data_get_rrc_state_indicator(actx) == RRC_UE_STATE_CELL_DCH) {
     u_rnti = private_data_get_current_u_rnti(actx);
     rrc_try_map_urnti_to_crncc(u_rnti, actx);
   }
 
 #.FN_BODY CellUpdateConfirm
   fp_info  *fpinf = NULL;
   rlc_info *rlcinf = NULL;
   guint32 u_rnti;
   col_append_str(actx->pinfo->cinfo, COL_INFO, "CellUpdateConfirm");
 %(DEFAULT_BODY)s
   if(PINFO_FD_VISITED(actx->pinfo)) {
     return offset;
   }
 
   fpinf = (fp_info *)p_get_proto_data(wmem_file_scope(), actx->pinfo, proto_fp, 0);
   rlcinf = (rlc_info *)p_get_proto_data(wmem_file_scope(), actx->pinfo, proto_umts_rlc, 0);
 
   /*If FP info or RLC info is missing , skip all this*/
   if(fpinf == NULL || rlcinf == NULL){
       return offset;
   }
 
   /* If UE is moving to CELL_DCH we need to map it's U-RNTI to the new CRNC context in NBAP */
   if (private_data_get_rrc_state_indicator(actx) == RRC_UE_STATE_CELL_DCH) {
     u_rnti = rlcinf->ueid[fpinf->cur_tb]; /* Hopefully a U-RNTI, might be C-RNTI */
     rrc_try_map_urnti_to_crncc(u_rnti, actx);
   }
 
 #.FN_BODY CounterCheck
   col_append_str(actx->pinfo->cinfo, COL_INFO, "CounterCheck");
 %(DEFAULT_BODY)s
 
 #.FN_BODY CounterCheckResponse
   col_append_str(actx->pinfo->cinfo, COL_INFO, "CounterCheckResponse");
 %(DEFAULT_BODY)s
 
 #.FN_BODY DownlinkDirectTransfer
   col_append_str(actx->pinfo->cinfo, COL_INFO, "DownlinkDirectTransfer");
 %(DEFAULT_BODY)s
 
 #.FN_BODY ETWSPrimaryNotificationWithSecurity
   col_append_str(actx->pinfo->cinfo, COL_INFO, "ETWSPrimaryNotificationWithSecurity");
 %(DEFAULT_BODY)s
 
 #.FN_BODY HandoverToUTRANComplete
   col_append_str(actx->pinfo->cinfo, COL_INFO, "HandoverToUTRANComplete");
 %(DEFAULT_BODY)s
 
 #.FN_BODY InitialDirectTransfer
   col_append_str(actx->pinfo->cinfo, COL_INFO, "InitialDirectTransfer");
 %(DEFAULT_BODY)s
 
 #.FN_BODY HandoverFromUTRANCommand-EUTRA
   col_append_str(actx->pinfo->cinfo, COL_INFO, "HandoverFromUTRANCommand-EUTRA");
 %(DEFAULT_BODY)s
 
 #.FN_BODY HandoverFromUTRANCommand-GERANIu
   col_append_str(actx->pinfo->cinfo, COL_INFO, "HandoverFromUTRANCommand-GERANIu");
 %(DEFAULT_BODY)s
 
 #.FN_BODY HandoverFromUTRANCommand-GSM
   col_append_str(actx->pinfo->cinfo, COL_INFO, "HandoverFromUTRANCommand-GSM");
 %(DEFAULT_BODY)s
 
 #.FN_BODY HandoverFromUTRANCommand-CDMA2000
   col_append_str(actx->pinfo->cinfo, COL_INFO, "HandoverFromUTRANCommand-CDMA2000");
 %(DEFAULT_BODY)s
 
 #.FN_BODY HandoverFromUTRANFailure
   col_append_str(actx->pinfo->cinfo, COL_INFO, "HandoverFromUTRANFailure");
 %(DEFAULT_BODY)s
 
 #.FN_BODY LoggingMeasurementConfiguration
   col_append_str(actx->pinfo->cinfo, COL_INFO, "LoggingMeasurementConfiguration");
 %(DEFAULT_BODY)s
 
 #.FN_BODY MBMSAccessInformation
   col_append_str(actx->pinfo->cinfo, COL_INFO, "MBMSAccessInformation");
 %(DEFAULT_BODY)s
 
 #.FN_BODY MBMSCommonPTMRBInformation
   col_append_str(actx->pinfo->cinfo, COL_INFO, "MBMSCommonPTMRBInformation");
 %(DEFAULT_BODY)s
 
 #.FN_BODY MBMSCurrentCellPTMRBInformation
   col_append_str(actx->pinfo->cinfo, COL_INFO, "MBMSCurrentCellPTMRBInformation");
 %(DEFAULT_BODY)s
 
 #.FN_BODY MBMSGeneralInformation
   col_append_str(actx->pinfo->cinfo, COL_INFO, "MBMSGeneralInformation");
 %(DEFAULT_BODY)s
 
 #.FN_BODY MBMSModificationRequest
   col_append_str(actx->pinfo->cinfo, COL_INFO, "MBMSModificationRequest");
 %(DEFAULT_BODY)s
 
 #.FN_BODY MBMSModifiedServicesInformation
   col_append_str(actx->pinfo->cinfo, COL_INFO, "MBMSModifiedServicesInformation");
 %(DEFAULT_BODY)s
 
 #.FN_BODY MBMSNeighbouringCellPTMRBInformation
   col_append_str(actx->pinfo->cinfo, COL_INFO, "MBMSNeighbouringCellPTMRBInformation");
 %(DEFAULT_BODY)s
 
 #.FN_BODY MBMSSchedulingInformation
   col_append_str(actx->pinfo->cinfo, COL_INFO, "MBMSSchedulingInformation");
 %(DEFAULT_BODY)s
 
 #.FN_BODY MBMSUnmodifiedServicesInformation
   col_append_str(actx->pinfo->cinfo, COL_INFO, "MBMSUnmodifiedServicesInformation");
 %(DEFAULT_BODY)s
 
 #.FN_BODY MeasurementControl
   col_append_str(actx->pinfo->cinfo, COL_INFO, "MeasurementControl");
 %(DEFAULT_BODY)s
 
 #.FN_BODY MeasurementControlFailure
   col_append_str(actx->pinfo->cinfo, COL_INFO, "MeasurementControlFailure");
 %(DEFAULT_BODY)s
 
 #.FN_BODY MeasurementReport
   col_append_str(actx->pinfo->cinfo, COL_INFO, "MeasurementReport");
 %(DEFAULT_BODY)s
 
 #.FN_BODY PagingType1
   col_append_str(actx->pinfo->cinfo, COL_INFO, "PagingType1");
 %(DEFAULT_BODY)s
 
 #.FN_BODY PagingType2
   col_append_str(actx->pinfo->cinfo, COL_INFO, "PagingType2");
 %(DEFAULT_BODY)s
 
 #.FN_BODY PhysicalChannelReconfiguration
   fp_info  *fpinf = NULL;
   rlc_info *rlcinf = NULL;
   guint32 u_rnti;
   col_append_str(actx->pinfo->cinfo, COL_INFO, "PhysicalChannelReconfiguration");
 %(DEFAULT_BODY)s
   if(PINFO_FD_VISITED(actx->pinfo)) {
     return offset;
   }
 
   fpinf = (fp_info *)p_get_proto_data(wmem_file_scope(), actx->pinfo, proto_fp, 0);
   rlcinf = (rlc_info *)p_get_proto_data(wmem_file_scope(), actx->pinfo, proto_umts_rlc, 0);
 
   /*If FP info or RLC info is missing , skip all this*/
   if(fpinf == NULL || rlcinf == NULL){
       return offset;
   }
 
   /* If we receive this message on FACH and UE is moving to CELL_DCH */
   /* we need to map it's U-RNTI to the new CRNC context in NBAP */
   if (fpinf->channel == CHANNEL_FACH_FDD && private_data_get_rrc_state_indicator(actx) == RRC_UE_STATE_CELL_DCH) {
     u_rnti = rlcinf->ueid[fpinf->cur_tb]; /* Hopefully a U-RNTI, might be C-RNTI */
     rrc_try_map_urnti_to_crncc(u_rnti, actx);
   }
 
 #.FN_BODY PhysicalChannelReconfigurationComplete
   col_append_str(actx->pinfo->cinfo, COL_INFO, "PhysicalChannelReconfigurationComplete");
 %(DEFAULT_BODY)s
 
 #.FN_BODY PhysicalChannelReconfigurationFailure
   col_append_str(actx->pinfo->cinfo, COL_INFO, "PhysicalChannelReconfigurationFailure");
 %(DEFAULT_BODY)s
 
 #.FN_BODY PhysicalSharedChannelAllocation
   col_append_str(actx->pinfo->cinfo, COL_INFO, "PhysicalSharedChannelAllocation");
 %(DEFAULT_BODY)s
 
 #.FN_BODY PUSCHCapacityRequest
   col_append_str(actx->pinfo->cinfo, COL_INFO, "PUSCHCapacityRequest");
 %(DEFAULT_BODY)s
 
 #.FN_BODY RadioBearerReconfiguration
   fp_info  *fpinf = NULL;
   rlc_info *rlcinf = NULL;
   guint32 u_rnti;
   col_append_str(actx->pinfo->cinfo, COL_INFO, "RadioBearerReconfiguration");
 %(DEFAULT_BODY)s
   if(PINFO_FD_VISITED(actx->pinfo)) {
     return offset;
   }
 
   fpinf = (fp_info *)p_get_proto_data(wmem_file_scope(), actx->pinfo, proto_fp, 0);
   rlcinf = (rlc_info *)p_get_proto_data(wmem_file_scope(), actx->pinfo, proto_umts_rlc, 0);
 
   /*If FP info or RLC info is missing , skip all this*/
   if(fpinf == NULL || rlcinf == NULL){
       return offset;
   }
 
   /* If we receive this message on FACH and UE is moving to CELL_DCH */
   /* we need to map it's U-RNTI to the new CRNC context in NBAP */
   if (fpinf->channel == CHANNEL_FACH_FDD && private_data_get_rrc_state_indicator(actx) == RRC_UE_STATE_CELL_DCH) {
     u_rnti = rlcinf->ueid[fpinf->cur_tb]; /* Hopefully a U-RNTI, might be C-RNTI */
     rrc_try_map_urnti_to_crncc(u_rnti, actx);
   }
 
 #.FN_BODY RadioBearerReconfigurationComplete
   col_append_str(actx->pinfo->cinfo, COL_INFO, "RadioBearerReconfigurationComplete");
 %(DEFAULT_BODY)s
 
 #.FN_BODY RadioBearerReconfigurationFailure
   col_append_str(actx->pinfo->cinfo, COL_INFO, "RadioBearerReconfigurationFailure");
 %(DEFAULT_BODY)s
 
 #.FN_BODY RadioBearerRelease
   col_append_str(actx->pinfo->cinfo, COL_INFO, "RadioBearerRelease");
 %(DEFAULT_BODY)s
 
 #.FN_BODY RadioBearerReleaseComplete
   col_append_str(actx->pinfo->cinfo, COL_INFO, "RadioBearerReleaseComplete");
 %(DEFAULT_BODY)s
 
 #.FN_BODY RadioBearerReleaseFailure
   col_append_str(actx->pinfo->cinfo, COL_INFO, "RadioBearerReleaseFailure");
 %(DEFAULT_BODY)s
 
 #.FN_BODY RadioBearerSetup
   col_append_str(actx->pinfo->cinfo, COL_INFO, "RadioBearerSetup");
 %(DEFAULT_BODY)s
 
 #.FN_BODY RadioBearerSetupComplete
   col_append_str(actx->pinfo->cinfo, COL_INFO, "RadioBearerSetupComplete");
 %(DEFAULT_BODY)s
 
 #.FN_BODY RadioBearerSetupFailure
   col_append_str(actx->pinfo->cinfo, COL_INFO, "RadioBearerSetupFailure");
 %(DEFAULT_BODY)s
 
 #.FN_BODY RRCConnectionReject
   col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionReject");
 %(DEFAULT_BODY)s
 
 #.FN_BODY RRCConnectionRelease
   col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionRelease");
 %(DEFAULT_BODY)s
 
 #.FN_BODY RRCConnectionRelease-CCCH
   col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionRelease-CCCH");
 %(DEFAULT_BODY)s
 
 #.FN_BODY RRCConnectionReleaseComplete
   col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionReleaseComplete");
 %(DEFAULT_BODY)s
 
 #.FN_BODY RRCConnectionRequest
   col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionRequest");
 %(DEFAULT_BODY)s
 
 #.FN_BODY RRCConnectionSetup
   guint32 new_u_rnti;
   col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionSetup");
 %(DEFAULT_BODY)s
   if (PINFO_FD_VISITED(actx->pinfo)) {
     return offset;
   }
 
   /* Trying to map the U-RNTI assigned to the user to CRNC Context from NBAP*/
   new_u_rnti = private_data_get_new_u_rnti(actx);
   rrc_try_map_urnti_to_crncc(new_u_rnti, actx);
 
 #.FN_BODY RRCConnectionSetupComplete
   col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCConnectionSetupComplete");
 %(DEFAULT_BODY)s
 
 #.FN_BODY RRCStatus
   col_append_str(actx->pinfo->cinfo, COL_INFO, "RRCStatus");
 %(DEFAULT_BODY)s
 
 #.FN_BODY SecurityModeCommand
   fp_info            *fpinf;
   rlc_info           *rlcinf;
   rrc_ciphering_info *ciphering_info = NULL;
   guint8              direction;
   col_append_str(actx->pinfo->cinfo, COL_INFO, "SecurityModeCommand");
 
   fpinf = (fp_info *)p_get_proto_data(wmem_file_scope(), actx->pinfo, proto_fp, 0);
   rlcinf = (rlc_info *)p_get_proto_data(wmem_file_scope(), actx->pinfo, proto_umts_rlc, 0);
 
   /*If FP info or RLC info is missing , skip all this*/
   if(fpinf != NULL && rlcinf != NULL){
     ciphering_info = get_or_create_cipher_info(fpinf, rlcinf);
     private_data_set_ciphering_info(actx, ciphering_info);
   }
 %(DEFAULT_BODY)s
   if( ciphering_info != NULL ){
     direction = P2P_DIR_DL; /* Security Mode Command is from the RNC, direction is always downlink */
     ciphering_info->setup_frame[direction] = actx->pinfo->num;
   }
 
 #.FN_BODY SecurityModeComplete
   fp_info            *fpinf;
   rlc_info           *rlcinf;
   rrc_ciphering_info *ciphering_info = NULL;
   guint8              direction;
   col_append_str(actx->pinfo->cinfo, COL_INFO, "SecurityModeComplete");
 
   fpinf = (fp_info *)p_get_proto_data(wmem_file_scope(), actx->pinfo, proto_fp, 0);
   rlcinf = (rlc_info *)p_get_proto_data(wmem_file_scope(), actx->pinfo, proto_umts_rlc, 0);
 
   /*If FP info or RLC info is missing , skip all this*/
   if(fpinf != NULL || rlcinf != NULL){
     ciphering_info = get_or_create_cipher_info(fpinf, rlcinf);
     private_data_set_ciphering_info(actx, ciphering_info);
   }
 
 %(DEFAULT_BODY)s
   if( ciphering_info != NULL ){
     direction = P2P_DIR_UL; /* Security Mode Complete is from the UE, direction is always uplink */
     ciphering_info->setup_frame[direction] = actx->pinfo->num;
   }
 
 
 #.FN_BODY SecurityModeFailure
   col_append_str(actx->pinfo->cinfo, COL_INFO, "SecurityModeFailure");
 %(DEFAULT_BODY)s
 
 #.FN_BODY SignallingConnectionRelease
   col_append_str(actx->pinfo->cinfo, COL_INFO, "SignallingConnectionRelease");
 %(DEFAULT_BODY)s
 
 #.FN_BODY SignallingConnectionReleaseIndication
   col_append_str(actx->pinfo->cinfo, COL_INFO, "SignallingConnectionReleaseIndication");
 %(DEFAULT_BODY)s
 
 #.FN_BODY SystemInformation-BCH
   col_append_str(actx->pinfo->cinfo, COL_INFO, "SystemInformation-BCH");
 %(DEFAULT_BODY)s
 
 #.FN_BODY SystemInformation-FACH
   col_append_str(actx->pinfo->cinfo, COL_INFO, "SystemInformation-FACH");
 %(DEFAULT_BODY)s
 
 #.FN_BODY SystemInformationChangeIndication
   col_append_str(actx->pinfo->cinfo, COL_INFO, "SystemInformationChangeIndication");
 %(DEFAULT_BODY)s
 
 #.FN_BODY TransportChannelReconfiguration
   fp_info  *fpinf = NULL;
   rlc_info *rlcinf = NULL;
   guint32 u_rnti;
   col_append_str(actx->pinfo->cinfo, COL_INFO, "TransportChannelReconfiguration");
 %(DEFAULT_BODY)s
   if(PINFO_FD_VISITED(actx->pinfo)) {
     return offset;
   }
 
   fpinf = (fp_info *)p_get_proto_data(wmem_file_scope(), actx->pinfo, proto_fp, 0);
   rlcinf = (rlc_info *)p_get_proto_data(wmem_file_scope(), actx->pinfo, proto_umts_rlc, 0);
 
   /*If FP info or RLC info is missing , skip all this*/
   if(fpinf == NULL || rlcinf == NULL){
       return offset;
   }
 
   /* If we receive this message on FACH and UE is moving to CELL_DCH */
   /* we need to map it's U-RNTI to the new CRNC context in NBAP */
   if (fpinf->channel == CHANNEL_FACH_FDD && private_data_get_rrc_state_indicator(actx) == RRC_UE_STATE_CELL_DCH) {
     u_rnti = rlcinf->ueid[fpinf->cur_tb]; /* Hopefully a U-RNTI, might be C-RNTI */
     rrc_try_map_urnti_to_crncc(u_rnti, actx);
   }
 
 #.FN_BODY TransportChannelReconfigurationComplete
   col_append_str(actx->pinfo->cinfo, COL_INFO, "TransportChannelReconfigurationComplete");
 %(DEFAULT_BODY)s
 
 #.FN_BODY TransportChannelReconfigurationFailure
   col_append_str(actx->pinfo->cinfo, COL_INFO, "TransportChannelReconfigurationFailure");
 %(DEFAULT_BODY)s
 
 #.FN_BODY TransportFormatCombinationControl
   col_append_str(actx->pinfo->cinfo, COL_INFO, "TransportFormatCombinationControl");
 %(DEFAULT_BODY)s
 
 #.FN_BODY TransportFormatCombinationControlFailure
   col_append_str(actx->pinfo->cinfo, COL_INFO, "TransportFormatCombinationControlFailure");
 %(DEFAULT_BODY)s
 
 #.FN_BODY UECapabilityEnquiry
   col_append_str(actx->pinfo->cinfo, COL_INFO, "UECapabilityEnquiry");
 %(DEFAULT_BODY)s
 
 #.FN_BODY UECapabilityInformation
   col_append_str(actx->pinfo->cinfo, COL_INFO, "UECapabilityInformation");
 %(DEFAULT_BODY)s
 
 #.FN_BODY UECapabilityInformationConfirm
   col_append_str(actx->pinfo->cinfo, COL_INFO, "UECapabilityInformationConfirm");
 %(DEFAULT_BODY)s
 
 #.FN_BODY UEInformationRequest
   col_append_str(actx->pinfo->cinfo, COL_INFO, "UEInformationRequest");
 %(DEFAULT_BODY)s
 
 #.FN_BODY UEInformationResponse
   col_append_str(actx->pinfo->cinfo, COL_INFO, "UEInformationResponse");
 %(DEFAULT_BODY)s
 
 #.FN_BODY UplinkDirectTransfer
   col_append_str(actx->pinfo->cinfo, COL_INFO, "UplinkDirectTransfer");
 %(DEFAULT_BODY)s
 
 #.FN_BODY UplinkPhysicalChannelControl
   col_append_str(actx->pinfo->cinfo, COL_INFO, "UplinkPhysicalChannelControl");
 %(DEFAULT_BODY)s
 
 #.FN_BODY URAUpdate
   col_append_str(actx->pinfo->cinfo, COL_INFO, "URAUpdate");
 %(DEFAULT_BODY)s
 
 #.FN_BODY URAUpdateConfirm
   col_append_str(actx->pinfo->cinfo, COL_INFO, "URAUpdateConfirm");
 %(DEFAULT_BODY)s
 
 #.FN_BODY URAUpdateConfirm-CCCH
   col_append_str(actx->pinfo->cinfo, COL_INFO, "URAUpdateConfirm-CCCH");
 %(DEFAULT_BODY)s
 
 #.FN_BODY UTRANMobilityInformation
   col_append_str(actx->pinfo->cinfo, COL_INFO, "UTRANMobilityInformation");
 %(DEFAULT_BODY)s
 
 #.FN_BODY UTRANMobilityInformationConfirm
   col_append_str(actx->pinfo->cinfo, COL_INFO, "UTRANMobilityInformationConfirm");
 %(DEFAULT_BODY)s
 
 #.FN_BODY UTRANMobilityInformationFailure
   col_append_str(actx->pinfo->cinfo, COL_INFO, "UTRANMobilityInformationFailure");
 %(DEFAULT_BODY)s
 
 #.FN_BODY TargetRNC-ToSourceRNC-Container/dL-DCCHmessage VAL_PTR = &dl_dcch_message_tvb
   tvbuff_t *dl_dcch_message_tvb=NULL;
 
 %(DEFAULT_BODY)s
 
   if (dl_dcch_message_tvb)
     call_dissector(rrc_dl_dcch_handle,dl_dcch_message_tvb,%(ACTX)s->pinfo, proto_tree_get_root(tree));
 
 #.FN_BODY GSM-MessageList/_item VAL_PTR = &gsm_messagelist_tvb
   tvbuff_t *gsm_messagelist_tvb=NULL;
 
 %(DEFAULT_BODY)s
 
   if (gsm_messagelist_tvb)
     call_dissector(gsm_a_dtap_handle,gsm_messagelist_tvb,actx->pinfo, tree);
 
 #.FN_BODY HandoverFromUTRANCommand-GSM-r3-IEs/gsm-message/single-GSM-Message single-GSM-Message-r3
   tvbuff_t *gsm_message_tvb=NULL;
   guint bits_remaining, whole_octets_remaining;
 
 %(DEFAULT_BODY)s
 
   bits_remaining = 8*tvb_reported_length(tvb) - offset;
   whole_octets_remaining = bits_remaining / 8;
 
   gsm_message_tvb = tvb_new_octet_aligned(tvb, offset, 8*whole_octets_remaining);
 
   if (gsm_message_tvb) {
     add_new_data_source(actx->pinfo,gsm_message_tvb,"GSM Message(aligned)");
     call_dissector(gsm_a_dtap_handle,gsm_message_tvb,actx->pinfo, tree);
   }
 #.FN_BODY HandoverFromUTRANCommand-GSM-r6-IEs/gsm-message/single-GSM-Message single-GSM-Message-r6
   tvbuff_t *gsm_message_tvb=NULL;
   guint bits_remaining, whole_octets_remaining;
 
 %(DEFAULT_BODY)s
 
   bits_remaining = 8*tvb_reported_length(tvb) - offset;
   whole_octets_remaining = bits_remaining / 8;
 
   gsm_message_tvb = tvb_new_octet_aligned(tvb, offset, 8*whole_octets_remaining);
 
   if (gsm_message_tvb) {
     add_new_data_source(actx->pinfo,gsm_message_tvb,"GSM Message(aligned)");
     call_dissector(gsm_a_dtap_handle,gsm_message_tvb,actx->pinfo, tree);
   }
 
 #.FN_BODY GERAN-SystemInfoBlock VAL_PTR = &parameter_tvb
   tvbuff_t *parameter_tvb=NULL;
 
 %(DEFAULT_BODY)s
   if (parameter_tvb){
     guint8 byte = tvb_get_guint8(parameter_tvb, 0);
     if (byte == 0x06) {
       if (gsm_a_dtap_handle) {
         call_dissector(gsm_a_dtap_handle, parameter_tvb, actx->pinfo, tree);
       }
     } else {
       if (gsm_rlcmac_dl_handle) {
         call_dissector(gsm_rlcmac_dl_handle, parameter_tvb, actx->pinfo, tree);
       }
     }
   }
 
 #.FN_BODY GSM-Classmark2 VAL_PTR = &parameter_tvb
   tvbuff_t *parameter_tvb=NULL;
 
 %(DEFAULT_BODY)s
   if (parameter_tvb){
     de_ms_cm_2(parameter_tvb, tree, actx->pinfo, 2, tvb_get_guint8(parameter_tvb,1), NULL, 0);
   }
 
 #.FN_BODY GSM-Classmark3 VAL_PTR = &parameter_tvb
   tvbuff_t *parameter_tvb=NULL;
 
 %(DEFAULT_BODY)s
   if (parameter_tvb){
     de_ms_cm_3(parameter_tvb, tree, actx->pinfo, 0, tvb_reported_length(parameter_tvb), NULL, 0);
   }
 
 #.FN_BODY GSM-MS-RadioAccessCapability VAL_PTR = &parameter_tvb
   tvbuff_t *parameter_tvb=NULL;
 
 %(DEFAULT_BODY)s
   if (parameter_tvb){
     de_gmm_ms_radio_acc_cap(parameter_tvb, tree, actx->pinfo, 0, tvb_reported_length(parameter_tvb), NULL, 0);
   }
 
 #.FN_BODY InterRATHandoverInfoWithInterRATCapabilities-r3-IEs/interRATHandoverInfo VAL_PTR = &parameter_tvb
   tvbuff_t *parameter_tvb=NULL;
 
 %(DEFAULT_BODY)s
   if (parameter_tvb){
     dissect_rrc_InterRATHandoverInfo_PDU(parameter_tvb, actx->pinfo, tree, NULL);
   }
 
 #.FN_BODY EUTRA-RadioAccessCapability/ue-EUTRA-Capability VAL_PTR = &ue_eutra_cap_tvb
   tvbuff_t *ue_eutra_cap_tvb = NULL;
 %(DEFAULT_BODY)s
   if (ue_eutra_cap_tvb && lte_rrc_ue_eutra_cap_handle)
     call_dissector(lte_rrc_ue_eutra_cap_handle, ue_eutra_cap_tvb, actx->pinfo, tree);
 
 #.FN_BODY HandoverFromUTRANCommand-EUTRA-r8-IEs/eutra-Message VAL_PTR = &eutra_message_tvb
   tvbuff_t *eutra_message_tvb = NULL;
 %(DEFAULT_BODY)s
   if (eutra_message_tvb && lte_rrc_dl_dcch_handle)
     call_dissector(lte_rrc_dl_dcch_handle, eutra_message_tvb, actx->pinfo, tree);
 
 #.FN_BODY HandoverFromUTRANCommand-EUTRA-r11-IEs/eutra-Message VAL_PTR = &eutra_message_tvb
   tvbuff_t *eutra_message_tvb = NULL;
 %(DEFAULT_BODY)s
   if (eutra_message_tvb && lte_rrc_dl_dcch_handle)
     call_dissector(lte_rrc_dl_dcch_handle, eutra_message_tvb, actx->pinfo, tree);
 
 #.FN_BODY HandoverFromUtranFailure-v860ext-IEs/eutra-Message VAL_PTR = &eutra_message_tvb
   tvbuff_t *eutra_message_tvb = NULL;
 %(DEFAULT_BODY)s
   if (eutra_message_tvb && lte_rrc_dl_dcch_handle)
     call_dissector(lte_rrc_dl_dcch_handle, eutra_message_tvb, actx->pinfo, tree);
 
 #.FN_BODY MultiModeRAT-Capability-v860ext/eutraFeatureGroupIndicators VAL_PTR = &eutraFeatureGroupIndicators_tvb
   tvbuff_t *eutraFeatureGroupIndicators_tvb=NULL;
 %(DEFAULT_BODY)s
   if(eutraFeatureGroupIndicators_tvb){
     /* Dissect eutraFeatureGroupIndicators */
     proto_tree *subtree;
     gint curr_bit_offset = 0;
     subtree = proto_item_add_subtree(actx->created_item, ett_rrc_eutraFeatureGroupIndicators);
     proto_tree_add_bits_item(subtree, hf_rrc_eutra_feat_group_ind_1, eutraFeatureGroupIndicators_tvb, curr_bit_offset, 1, ENC_BIG_ENDIAN);
     curr_bit_offset++;
     proto_tree_add_bits_item(subtree, hf_rrc_eutra_feat_group_ind_2, eutraFeatureGroupIndicators_tvb, curr_bit_offset, 1, ENC_BIG_ENDIAN);
     curr_bit_offset++;
     proto_tree_add_bits_item(subtree, hf_rrc_eutra_feat_group_ind_3, eutraFeatureGroupIndicators_tvb, curr_bit_offset, 1, ENC_BIG_ENDIAN);
     curr_bit_offset++;
     proto_tree_add_bits_item(subtree, hf_rrc_eutra_feat_group_ind_4, eutraFeatureGroupIndicators_tvb, curr_bit_offset, 1, ENC_BIG_ENDIAN);
     curr_bit_offset++;
 }
 
 #.FN_BODY PLMN-Identity
   wmem_strbuf_t* mcc_mnc_strbuf;
   wmem_strbuf_t* mcc_strbuf;
   guint32 string_len;
   gchar* mcc_mnc_string;
   tvbuff_t* mcc_mnc_tvb;
 
   /* Reset the digits string in the private data struct */
   /* Maximal length: 7 = 3 digits MCC + 3 digits MNC + trailing '\0' */
   mcc_mnc_strbuf = wmem_strbuf_sized_new(actx->pinfo->pool,7,7);
   private_data_set_digits_strbuf(actx, mcc_mnc_strbuf);
   /* Reset parsing failure flag*/
   private_data_set_digits_strbuf_parsing_failed_flag(actx, FALSE);
 %(DEFAULT_BODY)s
   private_data_set_digits_strbuf(actx, NULL);
   /* Check for parsing errors */
   if(private_data_get_digits_strbuf_parsing_failed_flag(actx)) {
     return offset;
   }
 
   /* Extracting the string collected in the strbuf */
   string_len = (guint32)wmem_strbuf_get_len(mcc_mnc_strbuf);
   mcc_mnc_string = wmem_strbuf_finalize(mcc_mnc_strbuf);
 
   if(string_len >= 3)
   {
     /* 3 MCC digits were found, keep for later in case MCC is missing in other PLMN ids*/
     mcc_strbuf = wmem_strbuf_sized_new(actx->pinfo->pool,4,4);
     wmem_strbuf_append_c(mcc_strbuf,mcc_mnc_string[0]);
     wmem_strbuf_append_c(mcc_strbuf,mcc_mnc_string[1]);
     wmem_strbuf_append_c(mcc_strbuf,mcc_mnc_string[2]);
     wmem_strbuf_append_c(mcc_strbuf,'\0');
     private_data_set_last_mcc_strbuf(actx,mcc_strbuf);
   }
 
   /* Creating TVB from extracted string*/
   mcc_mnc_tvb = tvb_new_child_real_data(tvb, (guint8*)mcc_mnc_string, string_len, string_len);
   add_new_data_source(actx->pinfo, mcc_mnc_tvb, "MCC-MNC");
 
   /* Calling E.212 */
   dissect_e212_mcc_mnc_in_utf8_address(mcc_mnc_tvb, actx->pinfo, tree, 0);
 
 #.FN_BODY PLMN-IdentityWithOptionalMCC-r6
   wmem_strbuf_t* mcc_mnc_strbuf;
   wmem_strbuf_t* temp_strbuf;
   wmem_strbuf_t* last_mcc_strbuf;
   guint32 string_len;
   gchar* mcc_mnc_string;
   tvbuff_t* mcc_mnc_tvb;
 
   /* Reset the digits string in the private data struct */
   /* Maximal length: 7 = 3 digits MCC + 3 digits MNC + trailing '\0' */
   mcc_mnc_strbuf = wmem_strbuf_sized_new(actx->pinfo->pool,7,7);
   private_data_set_digits_strbuf(actx, mcc_mnc_strbuf);
   /* Reset parsing failure flag*/
   private_data_set_digits_strbuf_parsing_failed_flag(actx, FALSE);
 %(DEFAULT_BODY)s
   private_data_set_digits_strbuf(actx, NULL);
   /* Check for parsing errors */
   if(private_data_get_digits_strbuf_parsing_failed_flag(actx)) {
     return offset;
   }
 
   /* Extracting the string collected in the strbuf */
   string_len = (guint32)wmem_strbuf_get_len(mcc_mnc_strbuf);
   mcc_mnc_string = wmem_strbuf_finalize(mcc_mnc_strbuf);
   if (string_len > 3) {
       /* 3 MCC digits and at least 1 MNC digit were found, keep MCC for later
          in case it's missing in other PLMN ids*/
     temp_strbuf = wmem_strbuf_sized_new(actx->pinfo->pool,4,4);
     wmem_strbuf_append_c(temp_strbuf,mcc_mnc_string[0]);
     wmem_strbuf_append_c(temp_strbuf,mcc_mnc_string[1]);
     wmem_strbuf_append_c(temp_strbuf,mcc_mnc_string[2]);
     wmem_strbuf_append_c(temp_strbuf,'\0');
     private_data_set_last_mcc_strbuf(actx,temp_strbuf);
   }
   else {
       /* mcc_mnc_strbuf Probably only has 3/2 digits of MNC */
       /* Try to fill MCC form "last MCC" if we have it stored */
       last_mcc_strbuf = private_data_get_last_mcc_strbuf(actx);
       if(last_mcc_strbuf)
       {
         /* Concat MCC and MNC in temp buffer */
         temp_strbuf = wmem_strbuf_sized_new(actx->pinfo->pool,7,7);
         wmem_strbuf_append_printf(temp_strbuf,"%%s",wmem_strbuf_get_str(last_mcc_strbuf));
-        wmem_strbuf_append_printf(temp_strbuf,"%%s",wmem_strbuf_get_str(mcc_mnc_strbuf));
+        wmem_strbuf_append_printf(temp_strbuf,"%%s",mcc_mnc_string);
         /* Update length of recovered MCC-MNC pair */
         string_len = (guint32)wmem_strbuf_get_len(temp_strbuf);
         mcc_mnc_string = wmem_strbuf_finalize(temp_strbuf);
       }
   }
 
   if (string_len >= 5) {
     /* optional MCC was present (or restored above), we can call E.212 dissector */
 
     /* Creating TVB from extracted string*/
     mcc_mnc_tvb = tvb_new_child_real_data(tvb, (guint8*)mcc_mnc_string, string_len, string_len);
     add_new_data_source(actx->pinfo, mcc_mnc_tvb, "MCC-MNC");
 
     /* Calling E.212 */
     dissect_e212_mcc_mnc_in_utf8_address(mcc_mnc_tvb, actx->pinfo, tree, 0);
   }
 
 #.FN_BODY IMSI-GSM-MAP
   wmem_strbuf_t* imsi_strbuf;
   guint32 string_len;
   gchar* imsi_string;
   tvbuff_t* imsi_tvb;
 
   /* Reset the digits string in the private data struct */
   imsi_strbuf = wmem_strbuf_sized_new(actx->pinfo->pool,16,16);
   private_data_set_digits_strbuf(actx, imsi_strbuf);
   /* Reset parsing failure flag*/
   private_data_set_digits_strbuf_parsing_failed_flag(actx, FALSE);
 %(DEFAULT_BODY)s
   private_data_set_digits_strbuf(actx, NULL);
   /* Check for parsing errors */
   if(private_data_get_digits_strbuf_parsing_failed_flag(actx)) {
     return offset;
   }
 
   /* Extracting the string collected in the strbuf */
   string_len = (guint32)wmem_strbuf_get_len(imsi_strbuf);
   imsi_string = wmem_strbuf_finalize(imsi_strbuf);
 
   /* Creating TVB from extracted string*/
   imsi_tvb = tvb_new_child_real_data(tvb, (guint8*)imsi_string, string_len, string_len);
   add_new_data_source(actx->pinfo, imsi_tvb, "IMSI");
 
   /* Calling E.212 */
   dissect_e212_utf8_imsi(imsi_tvb,actx->pinfo,tree,0,string_len);
 
 #.FN_BODY Digit VAL_PTR = &digit
   guint32 digit;
   wmem_strbuf_t* digits_strbuf; /* The string of either an IMSI or a MCC-MNC pair */
 %(DEFAULT_BODY)s
 
   if(private_data_get_digits_strbuf_parsing_failed_flag(actx)) {
     return offset;
   }
 
   digits_strbuf = private_data_get_digits_strbuf(actx);
   if (digits_strbuf) {
     gchar digit_char;
 
     if(digit > 9) {
       private_data_set_digits_strbuf_parsing_failed_flag(actx, TRUE);
       return offset;
     }
 
     /* Converting to the matching gchar */
     digit_char = (gchar)(digit + '0');
 
     /* Appending to the digits string */
     wmem_strbuf_append_c(digits_strbuf, digit_char);
   }
 
 #.FN_BODY RSR-VCC-Info/ims-Information VAL_PTR = &imsInformation_tvb
   tvbuff_t *imsInformation_tvb=NULL;
 %(DEFAULT_BODY)s
   if(imsInformation_tvb){
     /* Dissect ims-Information
        Decoding specified in TS 124 237 V11.4.0 Annex D.5.3.3 ATGW transfer details
      */
     proto_tree *subtree;
     gint curr_offset = 0;
     guint32 atgw_trans_det_cont;
     subtree = proto_item_add_subtree(actx->created_item, ett_rrc_ims_info);
     proto_tree_add_item_ret_uint(subtree, hf_rrc_ims_info_atgw_trans_det_cont_type, imsInformation_tvb, curr_offset, 1, ENC_BIG_ENDIAN, &atgw_trans_det_cont);
     curr_offset++;
     switch (atgw_trans_det_cont) {
       case 0:
         proto_tree_add_item(subtree, hf_rrc_ims_info_atgw_udp_port, imsInformation_tvb, curr_offset, 2, ENC_BIG_ENDIAN);
         curr_offset+=2;
         proto_tree_add_item(subtree, hf_rrc_ims_info_atgw_ipv4, imsInformation_tvb, curr_offset, 4, ENC_BIG_ENDIAN);
         break;
       case 1:
         proto_tree_add_item(subtree, hf_rrc_ims_info_atgw_udp_port, imsInformation_tvb, curr_offset, 2, ENC_BIG_ENDIAN);
         curr_offset+=2;
         proto_tree_add_item(subtree, hf_rrc_ims_info_atgw_ipv6, imsInformation_tvb, curr_offset, 16, ENC_NA);
         break;
       default:
       break;
     }
 }
 
 #.TYPE_ATTR
diff --git a/epan/dissectors/packet-rrc.c b/epan/dissectors/packet-rrc.c
index e113ebb3f3..6422582156 100644
--- a/epan/dissectors/packet-rrc.c
+++ b/epan/dissectors/packet-rrc.c
@@ -135818,68 +135818,68 @@ static int
 dissect_rrc_PLMN_IdentityWithOptionalMCC_r6(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
 #line 862 "./asn1/rrc/rrc.cnf"
   wmem_strbuf_t* mcc_mnc_strbuf;
   wmem_strbuf_t* temp_strbuf;
   wmem_strbuf_t* last_mcc_strbuf;
   guint32 string_len;
   gchar* mcc_mnc_string;
   tvbuff_t* mcc_mnc_tvb;
 
   /* Reset the digits string in the private data struct */
   /* Maximal length: 7 = 3 digits MCC + 3 digits MNC + trailing '\0' */
   mcc_mnc_strbuf = wmem_strbuf_sized_new(actx->pinfo->pool,7,7);
   private_data_set_digits_strbuf(actx, mcc_mnc_strbuf);
   /* Reset parsing failure flag*/
   private_data_set_digits_strbuf_parsing_failed_flag(actx, FALSE);
   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,
                                    ett_rrc_PLMN_IdentityWithOptionalMCC_r6, PLMN_IdentityWithOptionalMCC_r6_sequence);
 
   private_data_set_digits_strbuf(actx, NULL);
   /* Check for parsing errors */
   if(private_data_get_digits_strbuf_parsing_failed_flag(actx)) {
     return offset;
   }
 
   /* Extracting the string collected in the strbuf */
   string_len = (guint32)wmem_strbuf_get_len(mcc_mnc_strbuf);
   mcc_mnc_string = wmem_strbuf_finalize(mcc_mnc_strbuf);
   if (string_len > 3) {
       /* 3 MCC digits and at least 1 MNC digit were found, keep MCC for later
          in case it's missing in other PLMN ids*/
     temp_strbuf = wmem_strbuf_sized_new(actx->pinfo->pool,4,4);
     wmem_strbuf_append_c(temp_strbuf,mcc_mnc_string[0]);
     wmem_strbuf_append_c(temp_strbuf,mcc_mnc_string[1]);
     wmem_strbuf_append_c(temp_strbuf,mcc_mnc_string[2]);
     wmem_strbuf_append_c(temp_strbuf,'\0');
     private_data_set_last_mcc_strbuf(actx,temp_strbuf);
   }
   else {
       /* mcc_mnc_strbuf Probably only has 3/2 digits of MNC */
       /* Try to fill MCC form "last MCC" if we have it stored */
       last_mcc_strbuf = private_data_get_last_mcc_strbuf(actx);
       if(last_mcc_strbuf)
       {
         /* Concat MCC and MNC in temp buffer */
         temp_strbuf = wmem_strbuf_sized_new(actx->pinfo->pool,7,7);
         wmem_strbuf_append_printf(temp_strbuf,"%s",wmem_strbuf_get_str(last_mcc_strbuf));
-        wmem_strbuf_append_printf(temp_strbuf,"%s",wmem_strbuf_get_str(mcc_mnc_strbuf));
+        wmem_strbuf_append_printf(temp_strbuf,"%s",mcc_mnc_string);
         /* Update length of recovered MCC-MNC pair */
         string_len = (guint32)wmem_strbuf_get_len(temp_strbuf);
         mcc_mnc_string = wmem_strbuf_finalize(temp_strbuf);
       }
   }
 
   if (string_len >= 5) {
     /* optional MCC was present (or restored above), we can call E.212 dissector */
 
     /* Creating TVB from extracted string*/
     mcc_mnc_tvb = tvb_new_child_real_data(tvb, (guint8*)mcc_mnc_string, string_len, string_len);
     add_new_data_source(actx->pinfo, mcc_mnc_tvb, "MCC-MNC");
 
     /* Calling E.212 */
     dissect_e212_mcc_mnc_in_utf8_address(mcc_mnc_tvb, actx->pinfo, tree, 0);
   }
 
 
 
   return offset;
 }
