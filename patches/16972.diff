commit 273a43f61fdd07e29f2dd62ab3ee95ff8e29a832
Author: Fraunhofer IIS FDK <audio-fdk@iis.fraunhofer.de>
Date:   Fri Mar 8 15:56:06 2019 +0100

    Discard SBR data in case of unsuccessful SBR header update.
    
    Change-Id: I31ab01476d5a9de273c7adce14a1c29fa0023682

diff --git a/libSBRdec/src/sbrdecoder.cpp b/libSBRdec/src/sbrdecoder.cpp
index 4bc6f69..c827ced 100644
--- a/libSBRdec/src/sbrdecoder.cpp
+++ b/libSBRdec/src/sbrdecoder.cpp
@@ -1,7 +1,7 @@
 /* -----------------------------------------------------------------------------
 Software License for The Fraunhofer FDK AAC Codec Library for Android
 
-© Copyright  1995 - 2018 Fraunhofer-Gesellschaft zur Förderung der angewandten
+© Copyright  1995 - 2019 Fraunhofer-Gesellschaft zur Förderung der angewandten
 Forschung e.V. All rights reserved.
 
  1.    INTRODUCTION
@@ -800,82 +800,81 @@ static SBR_ERROR sbrDecoder_HeaderUpdate(HANDLE_SBRDECODER self,
 INT sbrDecoder_Header(HANDLE_SBRDECODER self, HANDLE_FDK_BITSTREAM hBs,
                       const INT sampleRateIn, const INT sampleRateOut,
                       const INT samplesPerFrame,
                       const AUDIO_OBJECT_TYPE coreCodec,
                       const MP4_ELEMENT_ID elementID, const INT elementIndex,
                       const UCHAR harmonicSBR, const UCHAR stereoConfigIndex,
                       const UCHAR configMode, UCHAR *configChanged,
                       const INT downscaleFactor) {
   SBR_HEADER_STATUS headerStatus;
   HANDLE_SBR_HEADER_DATA hSbrHeader;
   SBR_ERROR sbrError = SBRDEC_OK;
   int headerIndex;
   UINT flagsSaved =
       0; /* flags should not be changed in AC_CM_DET_CFG_CHANGE - mode after
             parsing */
 
   if (self == NULL || elementIndex >= (8)) {
     return SBRDEC_UNSUPPORTED_CONFIG;
   }
 
   if (!sbrDecoder_isCoreCodecValid(coreCodec)) {
     return SBRDEC_UNSUPPORTED_CONFIG;
   }
 
   if (configMode & AC_CM_DET_CFG_CHANGE) {
     flagsSaved = self->flags; /* store */
   }
 
   sbrError = sbrDecoder_InitElement(
       self, sampleRateIn, sampleRateOut, samplesPerFrame, coreCodec, elementID,
       elementIndex, harmonicSBR, stereoConfigIndex, configMode, configChanged,
       downscaleFactor);
 
   if ((sbrError != SBRDEC_OK) || (elementID == ID_LFE)) {
     goto bail;
   }
 
   if (configMode & AC_CM_DET_CFG_CHANGE) {
     hSbrHeader = NULL;
   } else {
     headerIndex = getHeaderSlot(self->pSbrElement[elementIndex]->useFrameSlot,
                                 self->pSbrElement[elementIndex]->useHeaderSlot);
 
     hSbrHeader = &(self->sbrHeader[elementIndex][headerIndex]);
   }
 
   headerStatus = sbrGetHeaderData(hSbrHeader, hBs, self->flags, 0, configMode);
 
   if (coreCodec == AOT_USAC) {
     if (configMode & AC_CM_DET_CFG_CHANGE) {
       self->flags = flagsSaved; /* restore */
     }
     return sbrError;
   }
 
   if (configMode & AC_CM_ALLOC_MEM) {
     SBR_DECODER_ELEMENT *pSbrElement;
 
     pSbrElement = self->pSbrElement[elementIndex];
 
     /* Sanity check */
     if (pSbrElement != NULL) {
       if ((elementID == ID_CPE && pSbrElement->nChannels != 2) ||
           (elementID != ID_CPE && pSbrElement->nChannels != 1)) {
         return SBRDEC_UNSUPPORTED_CONFIG;
       }
       if (headerStatus == HEADER_RESET) {
         sbrError = sbrDecoder_HeaderUpdate(self, hSbrHeader, headerStatus,
                                            pSbrElement->pSbrChannel,
                                            pSbrElement->nChannels);
 
         if (sbrError == SBRDEC_OK) {
           hSbrHeader->syncState = SBR_HEADER;
           hSbrHeader->status |= SBRDEC_HDR_STAT_UPDATE;
+        } else {
+          hSbrHeader->syncState = SBR_NOT_INITIALIZED;
+          hSbrHeader->status = HEADER_ERROR;
         }
-        /* else {
-          Since we already have overwritten the old SBR header the only way out
-        is UPSAMPLING! This will be prepared in the next step.
-        } */
       }
     }
   }
