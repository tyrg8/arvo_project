commit 22fadf7edf95caecb84fa1a9b36deac8314fe801
Merge: a2d07b3e5 cc7d2558f
Author: Stefan Profanter <git@s.profanter.me>
Date:   Mon Oct 14 11:22:31 2019 +0200

    Merge 1.0 into master

diff --git a/deps/mdnsd b/deps/mdnsd
index 0f504efa2..f7f0dd543 160000
--- a/deps/mdnsd
+++ b/deps/mdnsd
@@ -1 +1 @@
-Subproject commit 0f504efa29598c07dcab290ce6118d496c1f1ad1
+Subproject commit f7f0dd543f12fa7bbf2b667cceb287b9c8184b7d
diff --git a/src/ua_types_encoding_json.c b/src/ua_types_encoding_json.c
index 8e129b559..66e0e6734 100644
--- a/src/ua_types_encoding_json.c
+++ b/src/ua_types_encoding_json.c
@@ -2246,55 +2246,58 @@ static status
 searchObjectForKeyRec(const char *searchKey, CtxJson *ctx, 
                       ParseCtx *parseCtx, size_t *resultIndex, UA_UInt16 depth) {
     UA_StatusCode ret = UA_STATUSCODE_BADNOTFOUND;
     
     CHECK_TOKEN_BOUNDS;
     
     if(parseCtx->tokenArray[parseCtx->index].type == JSMN_OBJECT) {
         size_t objectCount = (size_t)parseCtx->tokenArray[parseCtx->index].size;
         parseCtx->index++; /*Object to first Key*/
         
         for(size_t i = 0; i < objectCount; i++) {
             CHECK_TOKEN_BOUNDS;
             if(depth == 0) { /* we search only on first layer */
                 if(jsoneq((char*)ctx->pos, &parseCtx->tokenArray[parseCtx->index], searchKey) == 0) {
                     /*found*/
                     parseCtx->index++; /*We give back a pointer to the value of the searched key!*/
+                    if (parseCtx->index >= parseCtx->tokenCount)
+                        /* We got invalid json. See https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=14620 */
+                        return UA_STATUSCODE_BADOUTOFRANGE;
                     *resultIndex = parseCtx->index;
                     return UA_STATUSCODE_GOOD;
                 }
             }
                
             parseCtx->index++; /* value */
             CHECK_TOKEN_BOUNDS;
             
             if(parseCtx->tokenArray[parseCtx->index].type == JSMN_OBJECT) {
                ret = searchObjectForKeyRec(searchKey, ctx, parseCtx, resultIndex,
                                            (UA_UInt16)(depth + 1));
             } else if(parseCtx->tokenArray[parseCtx->index].type == JSMN_ARRAY) {
                ret = searchObjectForKeyRec(searchKey, ctx, parseCtx, resultIndex,
                                            (UA_UInt16)(depth + 1));
             } else {
                 /* Only Primitive or string */
                 parseCtx->index++;
             }
         }
     } else if(parseCtx->tokenArray[parseCtx->index].type == JSMN_ARRAY) {
         size_t arraySize = (size_t)parseCtx->tokenArray[parseCtx->index].size;
         parseCtx->index++; /*Object to first element*/
         
         for(size_t i = 0; i < arraySize; i++) {
             CHECK_TOKEN_BOUNDS;
             if(parseCtx->tokenArray[parseCtx->index].type == JSMN_OBJECT) {
                ret = searchObjectForKeyRec(searchKey, ctx, parseCtx, resultIndex,
                                            (UA_UInt16)(depth + 1));
             } else if(parseCtx->tokenArray[parseCtx->index].type == JSMN_ARRAY) {
                ret = searchObjectForKeyRec(searchKey, ctx, parseCtx, resultIndex,
                                            (UA_UInt16)(depth + 1));
             } else {
                 /* Only Primitive or string */
                 parseCtx->index++;
             }
         }
     }
     return ret;
 }
diff --git a/tools/nodeset_compiler/backend_open62541_nodes.py b/tools/nodeset_compiler/backend_open62541_nodes.py
index a515e4b0a..3b0f08e0b 100644
--- a/tools/nodeset_compiler/backend_open62541_nodes.py
+++ b/tools/nodeset_compiler/backend_open62541_nodes.py
@@ -254,73 +254,74 @@ def lowerFirstChar(inputString):
 def generateExtensionObjectSubtypeCode(node, parent, nodeset, global_var_code, instanceName=None, isArrayElement=False):
     code = [""]
     codeCleanup = [""]
 
     logger.debug("Building extensionObject for " + str(parent.id))
     logger.debug("Encoding " + str(node.encodingRule))
 
     typeBrowseNode = makeCIdentifier(nodeset.getDataTypeNode(parent.dataType).browseName.name)
     #TODO: review this
     if typeBrowseNode == "NumericRange":
         # in the stack we define a separate structure for the numeric range, but
         # the value itself is just a string
         typeBrowseNode = "String"
 
 
     typeString = "UA_" + typeBrowseNode
     if instanceName is None:
         instanceName = generateNodeValueInstanceName(node, parent, 0)
         code.append("UA_STACKARRAY(" + typeString + ", " + instanceName + ", 1);")
     typeArr = nodeset.getDataTypeNode(parent.dataType).typesArray
     typeString = nodeset.getDataTypeNode(parent.dataType).browseName.name.upper()
     typeArrayString = typeArr + "[" + typeArr + "_" + typeString + "]"
     code.append("UA_init({ref}{instanceName}, &{typeArrayString});".format(ref="&" if isArrayElement else "",
                                                                            instanceName=instanceName,
                                                                            typeArrayString=typeArrayString))
 
     # Assign data to the struct contents
     # Track the encoding rule definition to detect arrays and/or ExtensionObjects
     values = node.value
     if values == None:
         values = []
     for idx,subv in enumerate(values):
         encField = node.encodingRule[idx]
         memberName = lowerFirstChar(encField[0])
 
         # Check if this is an array
         accessor = "." if isArrayElement else "->"
 
         if isinstance(subv, list):
             if len(subv) == 0:
                 continue
             logger.info("ExtensionObject contains array")
             memberName = lowerFirstChar(encField[0])
             encTypeString = "UA_" + subv[0].__class__.__name__
             instanceNameSafe = makeCIdentifier(instanceName)
             code.append("UA_STACKARRAY(" + encTypeString + ", " + instanceNameSafe + "_" + memberName+", {0});".format(len(subv)))
             encTypeArr = nodeset.getDataTypeNode(subv[0].__class__.__name__).typesArray
             encTypeArrayString = encTypeArr + "[" + encTypeArr + "_" + subv[0].__class__.__name__.upper() + "]"
             code.append("UA_init({instanceName}, &{typeArrayString});".format(instanceName=instanceNameSafe + "_" + memberName,
                                                                               typeArrayString=encTypeArrayString))
 
             for subArrayIdx,val in enumerate(subv):
                 code.append(generateNodeValueCode(instanceNameSafe + "_" + memberName + "[" + str(subArrayIdx) + "]" +" = ",
                                                   val, instanceName,instanceName + "_gehtNed_member", global_var_code, asIndirect=False))
+            code.append(instanceName + accessor + memberName + "Size = {0};".format(len(subv)))
             code.append(instanceName + accessor + memberName + " = " + instanceNameSafe+"_"+ memberName+";")
             continue
 
         logger.debug("Encoding of field " + memberName + " is " + str(subv.encodingRule) + "defined by " + str(encField))
         if subv.valueRank is None or subv.valueRank == 0:
             if not subv.isNone():
                 # Some values can be optional
                 valueName = instanceName + accessor + memberName
                 code.append(generateNodeValueCode(valueName + " = " ,
                             subv, instanceName,valueName, global_var_code, asIndirect=False))
         else:
             memberName = lowerFirstChar(encField[0])
             code.append(generateNodeValueCode(instanceName + accessor + memberName + "Size = ", subv,
                                               instanceName,valueName, global_var_code, asIndirect=False))
 
     if not isArrayElement:
         code.append("UA_Variant_setScalar(&attr.value, " + instanceName + ", &" + typeArrayString + ");")
 
     return [code, codeCleanup]
