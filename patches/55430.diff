commit 2866bbea4d0f4ccf79f2088728d55c769efe46cc
Author: Tim Wojtulewicz <tim@corelight.com>
Date:   Fri Jan 27 10:37:24 2023 -0700

    Add a few extra length checks to Teredo::DetectProtocol

diff --git a/src/packet_analysis/protocol/teredo/Teredo.cc b/src/packet_analysis/protocol/teredo/Teredo.cc
index e48aa3a82..be5eb09d7 100644
--- a/src/packet_analysis/protocol/teredo/Teredo.cc
+++ b/src/packet_analysis/protocol/teredo/Teredo.cc
@@ -268,62 +268,68 @@ bool TeredoAnalyzer::AnalyzePacket(size_t len, const uint8_t* data, Packet* pack
 bool TeredoAnalyzer::DetectProtocol(size_t len, const uint8_t* data, Packet* packet)
 	{
 	if ( ! BifConst::Tunnel::enable_teredo )
 		return false;
 
 	// Do some fast checks that must be true before moving to more complicated ones.
 	// Mostly this avoids doing the regex below if we can help it.
-	if ( (len < 40) ||
-	     (((data[0] >> 4) != 6) && ((data[0] != 0x00) || (data[1] != 0x00 && data[1] != 0x01))) )
+	if ( (len < 40) || ((len > 8) && ((data[0] >> 4) != 6) &&
+	                    ((data[0] != 0x00) || (data[1] != 0x00 && data[1] != 0x01))) )
 		return false;
 
 	if ( pattern_re->Match(data, len) )
 		return true;
 
 	uint16_t val = data[1];
 
 	if ( val == 1 )
 		{
 		// If the second byte is 0x01, this is an authentication header. Grab
 		// the length of the client identifier and the length of the
 		// authentication block, and make sure that we have enough data to
 		// include them with an IPv6 header.
 
 		uint8_t client_id_length = data[2];
 		uint8_t auth_length = data[3];
 
+		if ( len < (13 + client_id_length + auth_length) )
+			return false;
+
 		// There's 9 bytes at the end of the header for a nonce value and a
 		// confirmation byte. That plus the 4 bytes we've looked at already
 		// makes 13 bytes.
 		data += 13 + client_id_length + auth_length;
 		len -= 13 + client_id_length + auth_length;
 
 		if ( len < 40 )
 			return false;
 
 		// Get the next two octets after the authentication header, which
 		// should be an origin identification header.
 		val = htons(*(reinterpret_cast<const uint16_t*>(data)));
 		}
 
 	if ( val == 0 )
 		{
+		if ( len < 8 )
+			return false;
+
 		// If the second byte is zero (or we're coming out of an authentication
 		// header), we're in an origin identification header. Skip over it, and
 		// verify there's enough data after it to find an IPv6 header.
 		data += 8;
 		len -= 8;
 
 		if ( len < 40 )
 			return false;
 
 		// Double check that the next byte in the header contains an IPv6
 		// version number.
 		val = data[0] >> 4;
 		if ( val == 6 )
 			return true;
 		}
 
 	return false;
 	}
 
 	} // namespace zeek::packet_analysis::teredo
