commit 95eea7e89d0bf4303f6e30e8148b0fc309517d6b
Author: Sami Boukortt <sboukortt@google.com>
Date:   Thu Jun 17 19:49:58 2021 +0200

    Pass `decoded->extra_channels()` and the corresponding Rects separately to PrepareBlending
    
    This seems less error-prone than keeping pointers to the elements of a
    growing vector.

diff --git a/lib/jxl/blending.cc b/lib/jxl/blending.cc
index 14875ba6..6cf2502b 100644
--- a/lib/jxl/blending.cc
+++ b/lib/jxl/blending.cc
@@ -33,113 +33,115 @@ bool ImageBlender::NeedsBlending(PassesDecoderState* dec_state) {
 Status ImageBlender::PrepareBlending(
     PassesDecoderState* dec_state, FrameOrigin foreground_origin,
     size_t foreground_xsize, size_t foreground_ysize,
     const std::vector<ExtraChannelInfo>* extra_channel_info,
     const ColorEncoding& frame_color_encoding, const Rect& frame_rect,
     Image3F* output, const Rect& output_rect,
-    std::vector<std::pair<ImageF*, Rect>> output_extra_channels) {
+    std::vector<ImageF>* output_extra_channels,
+    std::vector<Rect> output_extra_channels_rects) {
   const PassesSharedState& state = *dec_state->shared;
   info_ = state.frame_header.blending_info;
 
   ec_info_ = &state.frame_header.extra_channel_blending_info;
 
   extra_channel_info_ = extra_channel_info;
   output_ = output;
   output_rect_ = output_rect;
-  output_extra_channels_ = std::move(output_extra_channels);
+  output_extra_channels_ = output_extra_channels;
+  output_extra_channels_rects_ = std::move(output_extra_channels_rects);
 
   size_t image_xsize = state.frame_header.nonserialized_metadata->xsize();
   size_t image_ysize = state.frame_header.nonserialized_metadata->ysize();
 
   // the rect in the canvas that needs to be updated
   cropbox_ = frame_rect;
   // the rect of this frame that overlaps with the canvas
   overlap_ = cropbox_;
   o_ = foreground_origin;
   o_.x0 -= frame_rect.x0();
   o_.y0 -= frame_rect.y0();
   int x0 = (o_.x0 >= 0 ? o_.x0 : 0);
   int y0 = (o_.y0 >= 0 ? o_.y0 : 0);
   int xsize = foreground_xsize;
   if (o_.x0 < 0) xsize += o_.x0;
   int ysize = foreground_ysize;
   if (o_.y0 < 0) ysize += o_.y0;
   xsize = Clamp1(xsize, 0, (int)cropbox_.xsize() - x0);
   ysize = Clamp1(ysize, 0, (int)cropbox_.ysize() - y0);
   cropbox_ = Rect(x0, y0, xsize, ysize);
   x0 = (o_.x0 < 0 ? -o_.x0 : 0);
   y0 = (o_.y0 < 0 ? -o_.y0 : 0);
   overlap_ = Rect(x0, y0, xsize, ysize);
 
   // Image to write to.
   ImageBundle& bg = *state.reference_frames[info_.source].frame;
   if (bg.xsize() == 0 && bg.ysize() == 0) {
     // there is no background, assume it to be all zeroes
     ImageBundle empty(&state.metadata->m);
     Image3F color(image_xsize, image_ysize);
     ZeroFillImage(&color);
     empty.SetFromImage(std::move(color), frame_color_encoding);
-    if (!output_extra_channels_.empty()) {
+    if (!output_extra_channels_->empty()) {
       std::vector<ImageF> ec;
-      for (size_t i = 0; i < output_extra_channels_.size(); ++i) {
+      for (size_t i = 0; i < output_extra_channels_->size(); ++i) {
         ImageF eci(image_xsize, image_ysize);
         ZeroFillImage(&eci);
         ec.push_back(std::move(eci));
       }
       empty.SetExtraChannels(std::move(ec));
     }
     bg = std::move(empty);
   } else if (state.reference_frames[info_.source].ib_is_in_xyb) {
     return JXL_FAILURE(
         "Trying to blend XYB reference frame %i and non-XYB frame",
         info_.source);
   }
 
   if (bg.xsize() < image_xsize || bg.ysize() < image_ysize ||
       bg.origin.x0 != 0 || bg.origin.y0 != 0) {
     return JXL_FAILURE("Trying to use a %zux%zu crop as a background",
                        bg.xsize(), bg.ysize());
   }
   if (state.metadata->m.xyb_encoded) {
     if (!dec_state->output_encoding_info.color_encoding_is_original) {
       return JXL_FAILURE("Blending in unsupported color space");
     }
   }
 
   if (!overlap_.IsInside(Rect(0, 0, foreground_xsize, foreground_ysize))) {
     return JXL_FAILURE("Trying to use a %zux%zu crop as a foreground",
                        foreground_xsize, foreground_ysize);
   }
 
   if (!cropbox_.IsInside(bg)) {
     return JXL_FAILURE(
         "Trying blend %zux%zu to (%zu,%zu), but background is %zux%zu",
         cropbox_.xsize(), cropbox_.ysize(), cropbox_.x0(), cropbox_.y0(),
         bg.xsize(), bg.ysize());
   }
 
   CopyImageTo(frame_rect, *bg.color(), output_rect, output);
   for (size_t i = 0; i < ec_info_->size(); ++i) {
     const auto& eci = (*ec_info_)[i];
     const auto& src = *state.reference_frames[eci.source].frame;
     if (src.xsize() == 0 && src.ysize() == 0) {
-      ZeroFillPlane(output_extra_channels_[i].first,
-                    output_extra_channels_[i].second);
+      ZeroFillPlane(&(*output_extra_channels_)[i],
+                    output_extra_channels_rects_[i]);
     } else {
       if (src.extra_channels()[i].xsize() < image_xsize ||
           src.extra_channels()[i].ysize() < image_ysize || src.origin.x0 != 0 ||
           src.origin.y0 != 0) {
         return JXL_FAILURE(
             "Invalid size %zux%zu or origin %+d%+d for extra channel %zu of "
             "reference frame %zu, expected at least %zux%zu+0+0",
             src.extra_channels()[i].xsize(), src.extra_channels()[i].ysize(),
             static_cast<int>(src.origin.x0), static_cast<int>(src.origin.y0), i,
             static_cast<size_t>(eci.source), image_xsize, image_ysize);
       }
       CopyImageTo(frame_rect, src.extra_channels()[i],
-                  output_extra_channels_[i].second,
-                  output_extra_channels_[i].first);
+                  output_extra_channels_rects_[i],
+                  &(*output_extra_channels_)[i]);
     }
   }
 
   return true;
 }
@@ -147,99 +149,98 @@ Status ImageBlender::PrepareBlending(
 ImageBlender::RectBlender ImageBlender::PrepareRect(
     const Rect& rect, const Image3F& foreground,
     const std::vector<ImageF>& extra_channels, const Rect& input_rect) const {
   JXL_DASSERT(rect.xsize() == input_rect.xsize());
   JXL_DASSERT(rect.ysize() == input_rect.ysize());
   JXL_DASSERT(input_rect.IsInside(foreground));
 
   RectBlender blender(false);
   blender.extra_channel_info_ = extra_channel_info_;
 
   blender.current_overlap_ = rect.Intersection(overlap_);
   if (blender.current_overlap_.xsize() == 0 ||
       blender.current_overlap_.ysize() == 0) {
     blender.done_ = true;
     return blender;
   }
 
   blender.current_cropbox_ =
       Rect(o_.x0 + blender.current_overlap_.x0(),
            o_.y0 + blender.current_overlap_.y0(),
            blender.current_overlap_.xsize(), blender.current_overlap_.ysize());
 
   // Turn current_overlap_ from being relative to the full foreground to being
   // relative to the rect or input_rect.
   blender.current_overlap_ =
       Rect(blender.current_overlap_.x0() - rect.x0(),
            blender.current_overlap_.y0() - rect.y0(),
            blender.current_overlap_.xsize(), blender.current_overlap_.ysize());
 
   // And this one is relative to the `foreground` subimage.
   const Rect input_overlap(blender.current_overlap_.x0() + input_rect.x0(),
                            blender.current_overlap_.y0() + input_rect.y0(),
                            blender.current_overlap_.xsize(),
                            blender.current_overlap_.ysize());
 
   blender.blending_info_.resize(extra_channels.size() + 1);
   auto make_blending = [&](const BlendingInfo& info, PatchBlending* pb) {
     pb->alpha_channel = info.alpha_channel;
     pb->clamp = info.clamp;
     switch (info.mode) {
       case BlendMode::kReplace: {
         pb->mode = PatchBlendMode::kReplace;
         break;
       }
       case BlendMode::kAdd: {
         pb->mode = PatchBlendMode::kAdd;
         break;
       }
       case BlendMode::kMul: {
         pb->mode = PatchBlendMode::kMul;
         break;
       }
       case BlendMode::kBlend: {
         pb->mode = PatchBlendMode::kBlendAbove;
         break;
       }
       case BlendMode::kAlphaWeightedAdd: {
         pb->mode = PatchBlendMode::kAlphaWeightedAddAbove;
         break;
       }
       default: {
         JXL_ABORT("Invalid blend mode");  // should have failed to decode
       }
     }
   };
   make_blending(info_, &blender.blending_info_[0]);
   for (size_t i = 0; i < extra_channels.size(); i++) {
     make_blending((*ec_info_)[i], &blender.blending_info_[1 + i]);
   }
 
   Rect cropbox_row = blender.current_cropbox_.Line(0);
   Rect overlap_row = input_overlap.Line(0);
   const auto num_ptrs = 3 + extra_channels.size();
   blender.fg_ptrs_.reserve(num_ptrs);
   blender.fg_strides_.reserve(num_ptrs);
   blender.bg_ptrs_.reserve(num_ptrs);
   blender.bg_strides_.reserve(num_ptrs);
   for (size_t c = 0; c < 3; c++) {
     blender.fg_ptrs_.push_back(overlap_row.ConstPlaneRow(foreground, c, 0));
     blender.fg_strides_.push_back(foreground.PixelsPerRow());
     blender.bg_ptrs_.push_back(
         cropbox_row.Translate(output_rect_.x0(), output_rect_.y0())
             .PlaneRow(output_, c, 0));
     blender.bg_strides_.push_back(output_->PixelsPerRow());
   }
   for (size_t c = 0; c < extra_channels.size(); c++) {
     blender.fg_ptrs_.push_back(overlap_row.ConstRow(extra_channels[c], 0));
     blender.fg_strides_.push_back(extra_channels[c].PixelsPerRow());
     blender.bg_ptrs_.push_back(
         cropbox_row
-            .Translate(output_extra_channels_[c].second.x0(),
-                       output_extra_channels_[c].second.y0())
-            .Row(output_extra_channels_[c].first, 0));
-    blender.bg_strides_.push_back(
-        output_extra_channels_[c].first->PixelsPerRow());
+            .Translate(output_extra_channels_rects_[c].x0(),
+                       output_extra_channels_rects_[c].y0())
+            .Row(&(*output_extra_channels_)[c], 0));
+    blender.bg_strides_.push_back((*output_extra_channels_)[c].PixelsPerRow());
   }
 
   return blender;
 }
diff --git a/lib/jxl/blending.h b/lib/jxl/blending.h
index 9aea2f5c..5e60b146 100644
--- a/lib/jxl/blending.h
+++ b/lib/jxl/blending.h
@@ -20,70 +20,72 @@ Status PerformBlending(const float* const* bg, const float* const* fg,
 class ImageBlender {
  public:
   class RectBlender {
    public:
     // Does the blending for a given row of the rect passed to
     // ImageBlender::PrepareRect.
     Status DoBlending(size_t y);
 
     // If this returns true, then nothing needs to be done for this rect and
     // DoBlending can be skipped (but does not have to).
     bool done() const { return done_; }
 
    private:
     friend class ImageBlender;
     explicit RectBlender(bool done) : done_(done) {}
 
     bool done_;
     Rect current_overlap_;
     Rect current_cropbox_;
     const std::vector<ExtraChannelInfo>* extra_channel_info_;
     std::vector<const float*> fg_ptrs_;
     std::vector<size_t> fg_strides_;
     std::vector<float*> bg_ptrs_;
     std::vector<size_t> bg_strides_;
     std::vector<const float*> fg_row_ptrs_;
     std::vector<float*> bg_row_ptrs_;
     std::vector<PatchBlending> blending_info_;
   };
 
   static bool NeedsBlending(PassesDecoderState* dec_state);
 
   Status PrepareBlending(
       PassesDecoderState* dec_state, FrameOrigin foreground_origin,
       size_t foreground_xsize, size_t foreground_ysize,
       const std::vector<ExtraChannelInfo>* extra_channel_info,
       const ColorEncoding& frame_color_encoding, const Rect& frame_rect,
       Image3F* output, const Rect& output_rect,
-      std::vector<std::pair<ImageF*, Rect>> output_extra_channels);
+      std::vector<ImageF>* output_extra_channels,
+      std::vector<Rect> output_extra_channels_rects);
   // rect is relative to the full decoded foreground.
   // But foreground here can be a subset of the full foreground, and input_rect
   // indicates where that rect is in that subset. For example, if rect =
   // Rect(10, 10, 20, 20), and foreground is subrect (7, 7, 30, 30) of the full
   // foreground, then input_rect should be (3, 3, 20, 20), because that is where
   // rect is relative to the foreground crop.
   ImageBlender::RectBlender PrepareRect(
       const Rect& rect, const Image3F& foreground,
       const std::vector<ImageF>& extra_channels, const Rect& input_rect) const;
 
   // If this returns true, then it is not necessary to call further methods on
   // this ImageBlender to achieve blending, although it is not forbidden either
   // (those methods will just return immediately in that case).
   bool done() const { return done_; }
 
  private:
   BlendingInfo info_;
   const std::vector<ExtraChannelInfo>* extra_channel_info_;
   // Destination, as well as background before DoBlending is called.
   Image3F* output_;
   Rect output_rect_;
-  std::vector<std::pair<ImageF*, Rect>> output_extra_channels_;
+  std::vector<ImageF>* output_extra_channels_;
+  std::vector<Rect> output_extra_channels_rects_;
   Rect cropbox_;
   Rect overlap_;
   bool done_ = false;
   const std::vector<BlendingInfo>* ec_info_;
   FrameOrigin o_{};
 };
 
 }  // namespace jxl
 
 #endif  // LIB_JXL_BLENDING_H_
diff --git a/lib/jxl/blending_test.cc b/lib/jxl/blending_test.cc
index 7c5d514b..4ce66c2f 100644
--- a/lib/jxl/blending_test.cc
+++ b/lib/jxl/blending_test.cc
@@ -42,57 +42,57 @@ TEST(BlendingTest, Crops) {
 TEST(BlendingTest, Offset) {
   const PaddedBytes background_bytes = ReadTestData("jxl/splines.png");
   CodecInOut background;
   ASSERT_TRUE(SetFromBytes(Span<const uint8_t>(background_bytes), &background));
   const PaddedBytes foreground_bytes =
       ReadTestData("jxl/grayscale_patches.png");
   CodecInOut foreground;
   ASSERT_TRUE(SetFromBytes(Span<const uint8_t>(foreground_bytes), &foreground));
 
   ImageBlender blender;
   CodecMetadata nonserialized_metadata;
   ASSERT_TRUE(
       nonserialized_metadata.size.Set(background.xsize(), background.ysize()));
   PassesSharedState state;
   state.frame_header.blending_info.mode = BlendMode::kReplace;
   state.frame_header.blending_info.source = 0;
   state.frame_header.nonserialized_metadata = &nonserialized_metadata;
   state.metadata = &background.metadata;
   state.reference_frames[0].frame = &background.Main();
   PassesDecoderState dec_state;
   dec_state.shared = &state;
   const FrameOrigin foreground_origin = {-50, -50};
   ImageBundle output(&background.metadata.m);
   output.SetFromImage(Image3F(background.xsize(), background.ysize()),
                       background.Main().c_current());
   ASSERT_TRUE(blender.PrepareBlending(
       &dec_state, foreground_origin, foreground.xsize(), foreground.ysize(),
       &nonserialized_metadata.m.extra_channel_info,
       background.Main().c_current(), Rect(background), output.color(),
-      Rect(*output.color()), {}));
+      Rect(*output.color()), {}, {}));
 
   static constexpr int kStep = 20;
   for (size_t x0 = 0; x0 < foreground.xsize(); x0 += kStep) {
     for (size_t y0 = 0; y0 < foreground.ysize(); y0 += kStep) {
       const Rect rect =
           Rect(x0, y0, kStep, kStep).Intersection(Rect(foreground.Main()));
       Image3F foreground_crop(rect.xsize(), rect.ysize());
       CopyImageTo(rect, *foreground.Main().color(), Rect(foreground_crop),
                   &foreground_crop);
       auto rect_blender =
           blender.PrepareRect(rect, foreground_crop, {}, Rect(foreground_crop));
       for (size_t y = 0; y < rect.ysize(); ++y) {
         ASSERT_TRUE(rect_blender.DoBlending(y));
       }
     }
   }
 
   const PaddedBytes expected_bytes =
       ReadTestData("jxl/blending/grayscale_patches_on_splines.png");
   CodecInOut expected;
   ASSERT_TRUE(SetFromBytes(Span<const uint8_t>(expected_bytes), &expected));
   VerifyRelativeError(*expected.Main().color(), *output.color(), 1. / (2 * 255),
                       0);
 }
 
 }  // namespace
 }  // namespace jxl
diff --git a/lib/jxl/dec_reconstruct.cc b/lib/jxl/dec_reconstruct.cc
index d32cd03a..1a8956bb 100644
--- a/lib/jxl/dec_reconstruct.cc
+++ b/lib/jxl/dec_reconstruct.cc
@@ -1084,156 +1084,157 @@ Status FinalizeImageRect(
 Status FinalizeFrameDecoding(ImageBundle* decoded,
                              PassesDecoderState* dec_state, ThreadPool* pool,
                              bool force_fir, bool skip_blending) {
   const FrameHeader& frame_header = dec_state->shared->frame_header;
   const FrameDimensions& frame_dim = dec_state->shared->frame_dim;
 
   // FinalizeImageRect was not yet run, or we are forcing a run.
   if (!dec_state->EagerFinalizeImageRect() || force_fir) {
     std::vector<Rect> rects_to_process;
     for (size_t y = 0; y < frame_dim.ysize_padded; y += kGroupDim) {
       for (size_t x = 0; x < frame_dim.xsize_padded; x += kGroupDim) {
         Rect rect(x, y, kGroupDim, kGroupDim, frame_dim.xsize_padded,
                   frame_dim.ysize_padded);
         if (rect.xsize() == 0 || rect.ysize() == 0) continue;
         rects_to_process.push_back(rect);
       }
     }
     const auto allocate_storage = [&](size_t num_threads) {
       dec_state->EnsureStorage(num_threads);
       return true;
     };
 
     {
       std::vector<ImageF> ecs;
       const ImageMetadata& metadata = frame_header.nonserialized_metadata->m;
       for (size_t i = 0; i < metadata.num_extra_channels; i++) {
         if (frame_header.extra_channel_upsampling[i] == 1) {
           ecs.push_back(std::move(dec_state->extra_channels[i]));
         } else {
           ecs.emplace_back(frame_dim.xsize_upsampled_padded,
                            frame_dim.ysize_upsampled_padded);
         }
       }
       decoded->SetExtraChannels(std::move(ecs));
     }
 
     std::atomic<bool> apply_features_ok{true};
     auto run_apply_features = [&](size_t rect_id, size_t thread) {
       size_t xstart = PassesDecoderState::kGroupDataXBorder;
       size_t ystart = PassesDecoderState::kGroupDataYBorder;
       for (size_t c = 0; c < 3; c++) {
         Rect rh(rects_to_process[rect_id].x0() >>
                     frame_header.chroma_subsampling.HShift(c),
                 rects_to_process[rect_id].y0() >>
                     frame_header.chroma_subsampling.VShift(c),
                 rects_to_process[rect_id].xsize() >>
                     frame_header.chroma_subsampling.HShift(c),
                 rects_to_process[rect_id].ysize() >>
                     frame_header.chroma_subsampling.VShift(c));
         Rect group_data_rect(xstart, ystart, rh.xsize(), rh.ysize());
         CopyImageToWithPadding(
             rh, dec_state->decoded.Plane(c), dec_state->FinalizeRectPadding(),
             group_data_rect, &dec_state->group_data[thread].Plane(c));
       }
       Rect group_data_rect(xstart, ystart, rects_to_process[rect_id].xsize(),
                            rects_to_process[rect_id].ysize());
       std::vector<std::pair<ImageF*, Rect>> ec_rects;
       ec_rects.reserve(decoded->extra_channels().size());
       for (size_t i = 0; i < decoded->extra_channels().size(); i++) {
         Rect r = ScaleRectForEC(rects_to_process[rect_id], frame_header, i);
         if (frame_header.extra_channel_upsampling[i] != 1) {
           Rect ec_input_rect(kBlockDim, 2, r.xsize(), r.ysize());
           auto eti =
               &dec_state
                    ->ec_temp_images[thread * decoded->extra_channels().size() +
                                     i];
           CopyImageToWithPadding(r, dec_state->extra_channels[i],
                                  /*padding=*/2, ec_input_rect, eti);
           ec_rects.emplace_back(eti, ec_input_rect);
         } else {
           ec_rects.emplace_back(&decoded->extra_channels()[i], r);
         }
       }
       if (!FinalizeImageRect(&dec_state->group_data[thread], group_data_rect,
                              ec_rects, dec_state, thread, decoded,
                              rects_to_process[rect_id])) {
         apply_features_ok = false;
       }
     };
 
     RunOnPool(pool, 0, rects_to_process.size(), allocate_storage,
               run_apply_features, "ApplyFeatures");
 
     if (!apply_features_ok) {
       return JXL_FAILURE("FinalizeImageRect failed");
     }
   }
 
   const size_t xsize = frame_dim.xsize_upsampled;
   const size_t ysize = frame_dim.ysize_upsampled;
 
   decoded->ShrinkTo(xsize, ysize);
   if (dec_state->pre_color_transform_frame.xsize() != 0) {
     dec_state->pre_color_transform_frame.ShrinkTo(xsize, ysize);
   }
 
   if (!skip_blending && ImageBlender::NeedsBlending(dec_state)) {
     if (dec_state->pre_color_transform_frame.xsize() != 0) {
       // Extra channels are going to be modified. Make a copy.
       dec_state->pre_color_transform_ec.clear();
       for (const auto& ec : decoded->extra_channels()) {
         dec_state->pre_color_transform_ec.emplace_back(CopyImage(ec));
       }
     }
     ImageBlender blender;
     ImageBundle foreground = std::move(*decoded);
     decoded->SetFromImage(Image3F(frame_header.nonserialized_metadata->xsize(),
                                   frame_header.nonserialized_metadata->ysize()),
                           foreground.c_current());
-    std::vector<std::pair<ImageF*, Rect>> extra_channels;
-    extra_channels.reserve(foreground.extra_channels().size());
+    std::vector<Rect> extra_channels_rects;
+    decoded->extra_channels().reserve(foreground.extra_channels().size());
+    extra_channels_rects.reserve(foreground.extra_channels().size());
     for (size_t i = 0; i < foreground.extra_channels().size(); ++i) {
       decoded->extra_channels().emplace_back(
           frame_header.nonserialized_metadata->xsize(),
           frame_header.nonserialized_metadata->ysize());
-      extra_channels.emplace_back(&decoded->extra_channels().back(),
-                                  Rect(decoded->extra_channels().back()));
+      extra_channels_rects.emplace_back(decoded->extra_channels().back());
     }
     JXL_RETURN_IF_ERROR(blender.PrepareBlending(
         dec_state, foreground.origin, foreground.xsize(), foreground.ysize(),
         &frame_header.nonserialized_metadata->m.extra_channel_info,
         foreground.c_current(), Rect(*decoded->color()),
-        /*output=*/decoded->color(), Rect(*decoded->color()), extra_channels));
+        /*output=*/decoded->color(), Rect(*decoded->color()),
+        &decoded->extra_channels(), std::move(extra_channels_rects)));
 
     std::vector<Rect> rects_to_process;
     for (size_t y = 0; y < frame_dim.ysize; y += kGroupDim) {
       for (size_t x = 0; x < frame_dim.xsize; x += kGroupDim) {
         Rect rect(x, y, kGroupDim, kGroupDim, frame_dim.xsize, frame_dim.ysize);
         if (rect.xsize() == 0 || rect.ysize() == 0) continue;
         rects_to_process.push_back(rect);
       }
     }
 
     std::atomic<bool> blending_ok{true};
     JXL_RETURN_IF_ERROR(RunOnPool(
         pool, 0, rects_to_process.size(), ThreadPool::SkipInit(),
         [&](size_t i, size_t /*thread*/) {
           const Rect& rect = rects_to_process[i];
           auto rect_blender = blender.PrepareRect(
               rect, *foreground.color(), foreground.extra_channels(), rect);
           for (size_t y = 0; y < rect.ysize(); ++y) {
             if (!rect_blender.DoBlending(y)) {
               blending_ok = false;
               return;
             }
           }
         },
         "Blend"));
     JXL_RETURN_IF_ERROR(blending_ok.load());
   }
 
   return true;
 }
 
 }  // namespace jxl
 #endif  // HWY_ONCE
