commit 4f7cfdbde36917b3b6291492240fc9b128ace1d7
Author: Nathan Moinvaziri <nathan@nathanm.com>
Date:   Sat Jan 23 19:25:37 2021 -0800

    Prevent ASAN 64-bit memory allocation in fuzzers.
    https://oss-fuzz.com/testcase-detail/5005175230169088

diff --git a/tests/fuzz/fuzz_compress_chunk.c b/tests/fuzz/fuzz_compress_chunk.c
index 298acf5e..049393d8 100644
--- a/tests/fuzz/fuzz_compress_chunk.c
+++ b/tests/fuzz/fuzz_compress_chunk.c
@@ -10,53 +10,59 @@ extern "C" {
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   const char *compressors[] = { "blosclz", "lz4", "lz4hc", "snappy", "zlib", "zstd" };
   int level = 9, filter = BLOSC_BITSHUFFLE, cindex = 0, i = 0;
   size_t nbytes, cbytes, blocksize;
   void *output, *input;
 
   blosc_set_nthreads(1);
 
   if (size > 0)
     level = data[0] % (9 + 1);
   if (size > 1)
     filter = data[1] % (BLOSC_BITSHUFFLE + 1);
   if (size > 2)
     cindex = data[2];
 
   /* Find next available compressor */
   while (blosc_set_compressor(compressors[cindex % 6]) == -1 && i < 6) {
     cindex++, i++;
   }
   if (i == 6) {
     /* No compressors available */
     return 0;
   }
 
   if (size > 3 && data[3] % 7 == 0)
     blosc_set_blocksize(4096);
 
   output = malloc(size + 1);
   if (output == NULL)
     return 0;
 
   if (blosc2_compress(level, filter, 1, data, size, output, size) == 0) {
     /* Cannot compress src buffer into dest */
     free(output);
     return 0;
   }
 
   blosc_cbuffer_sizes(output, &nbytes, &cbytes, &blocksize);
 
+  /* Don't allow address sanitizer to allocate more than INT32_MAX */
+  if (cbytes >= INT32_MAX) {
+    free(output);
+    return 0;
+  }
+
   input = malloc(cbytes);
   if (input != NULL) {
     blosc_decompress(output, input, cbytes);
     free(input);
   }
 
   free(output);
 
   return 0;
 }
 
 #ifdef __cplusplus
 }
 #endif
diff --git a/tests/fuzz/fuzz_decompress_frame.c b/tests/fuzz/fuzz_decompress_frame.c
index 7179b1e6..d0af1ee4 100644
--- a/tests/fuzz/fuzz_decompress_frame.c
+++ b/tests/fuzz/fuzz_decompress_frame.c
@@ -11,41 +11,46 @@ extern "C" {
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   const char *compressors[] = { "blosclz", "lz4", "lz4hc", "snappy", "zlib", "zstd" };
   int32_t i = 0, dsize = 0, filter = BLOSC_BITSHUFFLE;
   int32_t nchunk = 0;
 
   blosc_init();
   blosc_set_nthreads(1);
 
   blosc2_dparams dparams = BLOSC2_DPARAMS_DEFAULTS;
   dparams.nthreads = 1;
 
   /* Create a super-chunk backed by an in-memory frame */
   blosc2_schunk* schunk = blosc2_schunk_open_sframe((uint8_t *)data, size);
   if (schunk == NULL) {
     blosc_destroy();
     return 0;
   }
-
+  /* Don't allow address sanitizer to allocate more than INT32_MAX */
+  if (schunk->nbytes >= INT32_MAX) {
+    blosc2_schunk_free(schunk);
+    blosc_destroy();
+    return 0;
+  }
   /* Decompress data */
   uint8_t *uncompressed_data = (uint8_t *)malloc((size_t)schunk->nbytes+1);
   if (uncompressed_data != NULL) {
     for (i = 0, nchunk = 0; nchunk < schunk->nchunks-1; nchunk++) {
       dsize = blosc2_schunk_decompress_chunk(schunk, nchunk, uncompressed_data + i, schunk->chunksize);
       if (dsize < 0) {
         printf("Decompression error.  Error code: %d\n", dsize);
         break;
       }
       i += dsize;
     }
 
     free(uncompressed_data);
   }
 
   blosc2_schunk_free(schunk);
   blosc_destroy();
   return 0;
 }
 
 #ifdef __cplusplus
 }
 #endif
