commit 0ad5c625be27d7a3622dae95e9afe5e66b112d46
Author: Jack Haughton <jack.haughton@argondesign.com>
Date:   Mon Nov 26 13:54:48 2018 +0000

    Set up frame context using next_ref_frame_map
    
    BUG: oss-fuzz:11523
    Change-Id: Idec84e85f39fa6e2205853763002898b6ab1b410

diff --git a/av1/decoder/decodeframe.c b/av1/decoder/decodeframe.c
index d17e605310..f9de80087e 100644
--- a/av1/decoder/decodeframe.c
+++ b/av1/decoder/decodeframe.c
@@ -4714,48 +4714,49 @@ static void generate_next_ref_frame_map(AV1Decoder *const pbi) {
 static void show_existing_frame_reset(AV1Decoder *const pbi,
                                       int existing_frame_idx) {
   AV1_COMMON *const cm = &pbi->common;
   BufferPool *const pool = cm->buffer_pool;
   RefCntBuffer *const frame_bufs = pool->frame_bufs;
 
   assert(cm->show_existing_frame);
 
   cm->current_frame.frame_type = KEY_FRAME;
 
   pbi->refresh_frame_flags = (1 << REF_FRAMES) - 1;
 
   for (int i = 0; i < INTER_REFS_PER_FRAME; ++i) {
     cm->current_frame.frame_refs[i].buf = NULL;
   }
 
   if (pbi->need_resync) {
     reset_ref_frame_map(cm);
     pbi->need_resync = 0;
   }
 
   cm->cur_frame->intra_only = 1;
 
   if (cm->seq_params.frame_id_numbers_present_flag) {
     /* If bitmask is set, update reference frame id values and
        mark frames as valid for reference.
        Note that the displayed frame be valid for referencing
        in order to have been selected.
     */
     int refresh_frame_flags = pbi->refresh_frame_flags;
     int display_frame_id = cm->ref_frame_id[existing_frame_idx];
     for (int i = 0; i < REF_FRAMES; i++) {
       if ((refresh_frame_flags >> i) & 1) {
         cm->ref_frame_id[i] = display_frame_id;
         cm->valid_for_referencing[i] = 1;
       }
     }
   }
 
   cm->refresh_frame_context = REFRESH_FRAME_CONTEXT_DISABLED;
 
   generate_next_ref_frame_map(pbi);
 
   // Reload the adapted CDFs from when we originally coded this keyframe
-  *cm->fc = frame_bufs[cm->ref_frame_map[existing_frame_idx]].frame_context;
+  *cm->fc =
+      frame_bufs[cm->next_ref_frame_map[existing_frame_idx]].frame_context;
 }
 
 static INLINE void reset_frame_buffers(AV1_COMMON *cm) {
