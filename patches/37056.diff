commit ffdd7920cd98b495a42775bb35012ec259e33a46
Author: Todd C. Miller <Todd.Miller@sudo.ws>
Date:   Wed Aug 11 07:45:26 2021 -0600

    resolve_editor: sudoers_gc_remove(editor) before freeing it.

diff --git a/plugins/sudoers/editor.c b/plugins/sudoers/editor.c
index 56b34e7fc..99f179e95 100644
--- a/plugins/sudoers/editor.c
+++ b/plugins/sudoers/editor.c
@@ -129,84 +129,86 @@ static char *
 resolve_editor(const char *ed, size_t edlen, int nfiles, char **files,
     int *argc_out, char ***argv_out, char * const *allowlist)
 {
     char **nargv = NULL, *editor = NULL, *editor_path = NULL;
     const char *tmp, *cp, *ep = NULL;
     const char *edend = ed + edlen;
     struct stat user_editor_sb;
     int nargc;
     debug_decl(resolve_editor, SUDOERS_DEBUG_UTIL);
 
     /*
      * Split editor into an argument vector, including files to edit.
      * The EDITOR and VISUAL environment variables may contain command
      * line args so look for those and alloc space for them too.
      */
     cp = wordsplit(ed, edend, &ep);
     if (cp == NULL)
 	debug_return_str(NULL);
     editor = copy_arg(cp, ep - cp);
     if (editor == NULL)
 	goto oom;
 
     /* If we can't find the editor in the user's PATH, give up. */
     if (find_path(editor, &editor_path, &user_editor_sb, getenv("PATH"), NULL,
 	    0, allowlist) != FOUND) {
+	sudoers_gc_remove(GC_PTR, editor);
 	free(editor);
 	errno = ENOENT;
 	debug_return_str(NULL);
     }
 
     /* Count rest of arguments and allocate editor argv. */
     for (nargc = 1, tmp = ep; wordsplit(NULL, edend, &tmp) != NULL; )
 	nargc++;
     if (nfiles != 0)
 	nargc += nfiles + 1;
     nargv = reallocarray(NULL, nargc + 1, sizeof(char *));
     if (nargv == NULL)
 	goto oom;
     sudoers_gc_add(GC_PTR, nargv);
 
     /* Fill in editor argv (assumes files[] is NULL-terminated). */
     nargv[0] = editor;
     editor = NULL;
     for (nargc = 1; (cp = wordsplit(NULL, edend, &ep)) != NULL; nargc++) {
 	/* Copy string, collapsing chars escaped with a backslash. */
 	nargv[nargc] = copy_arg(cp, ep - cp);
 	if (nargv[nargc] == NULL)
 	    goto oom;
     }
     if (nfiles != 0) {
 	nargv[nargc++] = "--";
 	while (nfiles--)
 	    nargv[nargc++] = *files++;
     }
     nargv[nargc] = NULL;
 
     *argc_out = nargc;
     *argv_out = nargv;
     debug_return_str(editor_path);
 oom:
     sudo_warnx(U_("%s: %s"), __func__, U_("unable to allocate memory"));
+    sudoers_gc_remove(GC_PTR, editor);
     free(editor);
     free(editor_path);
     if (nargv != NULL) {
 	while (nargc--) {
 	    sudoers_gc_remove(GC_PTR, nargv[nargc]);
 	    free(nargv[nargc]);
 	}
 	sudoers_gc_remove(GC_PTR, nargv);
 	free(nargv);
     }
     debug_return_str(NULL);
 }
 
 /*
  * Determine which editor to use based on the SUDO_EDITOR, VISUAL and
  * EDITOR environment variables as well as the editor path in sudoers.
  * If env_error is true, an editor environment variable that cannot be
  * resolved is an error.
  *
  * Returns the path to be executed on success, else NULL.
  * The caller is responsible for freeing the returned editor path
  * as well as the argument vector.
  */
@@ -214,50 +216,51 @@ char *
 find_editor(int nfiles, char **files, int *argc_out, char ***argv_out,
      char * const *allowlist, const char **env_editor, bool env_error)
 {
     char *ev[3], *editor_path = NULL;
     unsigned int i;
     debug_decl(find_editor, SUDOERS_DEBUG_UTIL);
 
     /*
      * If any of SUDO_EDITOR, VISUAL or EDITOR are set, choose the first one.
      */
     *env_editor = NULL;
     ev[0] = "SUDO_EDITOR";
     ev[1] = "VISUAL";
     ev[2] = "EDITOR";
     for (i = 0; i < nitems(ev); i++) {
 	char *editor = getenv(ev[i]);
 
 	if (editor != NULL && *editor != '\0') {
 	    *env_editor = editor;
 	    editor_path = resolve_editor(editor, strlen(editor),
 		nfiles, files, argc_out, argv_out, allowlist);
 	    if (editor_path != NULL)
 		break;
 	    if (errno != ENOENT)
 		debug_return_str(NULL);
 	}
     }
     if (editor_path == NULL) {
 	const char *def_editor_end = def_editor + strlen(def_editor);
 	const char *cp, *ep;
 
 	if (env_error && *env_editor != NULL) {
 	    /* User-specified editor could not be found. */
 	    debug_return_str(NULL);
 	}
 
 	/* def_editor could be a path, split it up, avoiding strtok() */
 	for (cp = sudo_strsplit(def_editor, def_editor_end, ":", &ep);
 	    cp != NULL; cp = sudo_strsplit(NULL, def_editor_end, ":", &ep)) {
 	    editor_path = resolve_editor(cp, (size_t)(ep - cp), nfiles,
 		files, argc_out, argv_out, allowlist);
 	    if (editor_path != NULL)
 		break;
 	    if (errno != ENOENT)
 		debug_return_str(NULL);
 	}
     }
 
+    /* Caller is responsible for freeing editor_path, not g/c'd. */
     debug_return_str(editor_path);
 }
