commit d6d5a7da72dc4d2ff73ad0f335e1c3c4b70735a0
Author: Dirk Lemstra <dirk@lemstra.org>
Date:   Fri Sep 17 10:33:40 2021 +0200

    Added missing call to InitializeMagick.

diff --git a/Magick++/fuzz/encoder_list.cc b/Magick++/fuzz/encoder_list.cc
index b3b42498d..1c54f49ad 100644
--- a/Magick++/fuzz/encoder_list.cc
+++ b/Magick++/fuzz/encoder_list.cc
@@ -1,8 +1,9 @@
 #include <iostream>
 #include <list>
 #include <algorithm>
 
 #include <Magick++/Image.h>
+#include <Magick++/Functions.h>
 #include <Magick++/STL.h>
 
 static std::string getInitializer(const std::string magick_module)
@@ -15,51 +16,53 @@ static std::string getInitializer(const std::string magick_module)
 }
 
 int main() {
+  Magick::InitializeMagick((const char *) NULL);
+
   std::list<Magick::CoderInfo> coderList;
   coderInfoList(&coderList, Magick::CoderInfo::TrueMatch, Magick::CoderInfo::AnyMatch, Magick::CoderInfo::AnyMatch);
 
   std::list<std::string> allowedNames;
   allowedNames.push_back("BGR");
   allowedNames.push_back("BMP");
   allowedNames.push_back("CMYK");
   allowedNames.push_back("DDS");
   allowedNames.push_back("EPT");
   allowedNames.push_back("FAX");
   allowedNames.push_back("HTML");
   allowedNames.push_back("JP2");
   allowedNames.push_back("JPEG");
   allowedNames.push_back("PCD");
   allowedNames.push_back("PCD");
   allowedNames.push_back("PDF");
   allowedNames.push_back("PNG");
   allowedNames.push_back("PS");
   allowedNames.push_back("PS2");
   allowedNames.push_back("PS3");
   allowedNames.push_back("RGB");
   allowedNames.push_back("SVG");
   allowedNames.push_back("TIFF");
   allowedNames.push_back("TXT");
   allowedNames.push_back("YCBCR");
 
   std::list<std::string> excludeList;
   excludeList.push_back("GRADIENT");
   excludeList.push_back("LABEL");
   excludeList.push_back("NULL");
   excludeList.push_back("PATTERN");
   excludeList.push_back("PLASMA");
   excludeList.push_back("SCREENSHOT");
   excludeList.push_back("TXT");
   excludeList.push_back("XC");
 
   for (std::list<Magick::CoderInfo>::iterator it = coderList.begin(); it != coderList.end(); it++)
   {
     std::string module=(*it).module();
     if (std::find(excludeList.begin(), excludeList.end(), module) != excludeList.end())
       continue;
 
     if ((*it).name() == module)
       std::cout << ((*it).isWritable() ? "+" : "-") << module << ":" << getInitializer(module) << std::endl;
     else if (std::find(allowedNames.begin(), allowedNames.end(), module) != allowedNames.end())
       std::cout << ((*it).isWritable() ? "+" : "-") << (*it).name() << ":" << getInitializer(module) << std::endl;
   }
 }
