commit c3e0ad3c549f06fb0dcf99f4e39b7858ff07aff5
Author: Adi (Suissa) Peleg <adip@google.com>
Date:   Wed May 13 15:30:01 2020 -0400

    Fixing order of variables definition in codec_impl fuzz test (#11168)
    
    This happens when Envoy::Http::Http1::StreamEncoderImpl::~StreamEncoderImpl() is called, and readDisable() is called on connection_ which is already destroyed.
    (The connection is passed as a reference to StreamEncoderImpl.)
    
    Signed-off-by: Adi Suissa-Peleg <adip@google.com>

diff --git a/test/common/http/codec_impl_corpus/read_disable b/test/common/http/codec_impl_corpus/read_disable
new file mode 100644
index 0000000000..d0525e6285
--- /dev/null
+++ b/test/common/http/codec_impl_corpus/read_disable
@@ -0,0 +1,25 @@
+actions {
+  new_stream {
+    request_headers {
+      headers {
+        key: ":method"
+        value: "GET"
+      }
+      headers {
+        key: ":path"
+        value: "/"
+      }
+    }
+  }
+}
+actions {
+  client_drain {
+  }
+}
+actions {
+  stream_action {
+    response {
+      read_disable: true
+    }
+  }
+}
diff --git a/test/common/http/codec_impl_fuzz_test.cc b/test/common/http/codec_impl_fuzz_test.cc
index 2beb87908c..7163b53c0d 100644
--- a/test/common/http/codec_impl_fuzz_test.cc
+++ b/test/common/http/codec_impl_fuzz_test.cc
@@ -414,201 +414,202 @@ enum class HttpVersion { Http1, Http2 };
 void codecFuzz(const test::common::http::CodecImplFuzzTestCase& input, HttpVersion http_version) {
   Stats::IsolatedStoreImpl stats_store;
   NiceMock<Network::MockConnection> client_connection;
   const envoy::config::core::v3::Http2ProtocolOptions client_http2_options{
       fromHttp2Settings(input.h2_settings().client())};
   const Http1Settings client_http1settings;
   NiceMock<MockConnectionCallbacks> client_callbacks;
+  NiceMock<Network::MockConnection> server_connection;
+  NiceMock<MockServerConnectionCallbacks> server_callbacks;
   uint32_t max_request_headers_kb = Http::DEFAULT_MAX_REQUEST_HEADERS_KB;
   uint32_t max_request_headers_count = Http::DEFAULT_MAX_HEADERS_COUNT;
   uint32_t max_response_headers_count = Http::DEFAULT_MAX_HEADERS_COUNT;
   const envoy::config::core::v3::HttpProtocolOptions::HeadersWithUnderscoresAction
       headers_with_underscores_action = envoy::config::core::v3::HttpProtocolOptions::ALLOW;
+
   ClientConnectionPtr client;
   ServerConnectionPtr server;
   const bool http2 = http_version == HttpVersion::Http2;
 
   if (http2) {
     client = std::make_unique<Http2::TestClientConnectionImpl>(
         client_connection, client_callbacks, stats_store, client_http2_options,
         max_request_headers_kb, max_response_headers_count,
         Http2::ProdNghttp2SessionFactory::get());
   } else {
     client = std::make_unique<Http1::ClientConnectionImpl>(client_connection, stats_store,
                                                            client_callbacks, client_http1settings,
                                                            max_response_headers_count);
   }
 
-  NiceMock<Network::MockConnection> server_connection;
-  NiceMock<MockServerConnectionCallbacks> server_callbacks;
   if (http2) {
     const envoy::config::core::v3::Http2ProtocolOptions server_http2_options{
         fromHttp2Settings(input.h2_settings().server())};
     server = std::make_unique<Http2::TestServerConnectionImpl>(
         server_connection, server_callbacks, stats_store, server_http2_options,
         max_request_headers_kb, max_request_headers_count, headers_with_underscores_action);
   } else {
     const Http1Settings server_http1settings{fromHttp1Settings(input.h1_settings().server())};
     server = std::make_unique<Http1::ServerConnectionImpl>(
         server_connection, stats_store, server_callbacks, server_http1settings,
         max_request_headers_kb, max_request_headers_count, headers_with_underscores_action);
   }
 
   ReorderBuffer client_write_buf{*server};
   ReorderBuffer server_write_buf{*client};
 
   ON_CALL(client_connection, write(_, _))
       .WillByDefault(Invoke([&](Buffer::Instance& data, bool) -> void {
         ENVOY_LOG_MISC(trace, "client -> server {} bytes", data.length());
         client_write_buf.add(data);
       }));
   ON_CALL(server_connection, write(_, _))
       .WillByDefault(Invoke([&](Buffer::Instance& data, bool) -> void {
         ENVOY_LOG_MISC(trace, "server -> client {} bytes: {}", data.length(), data.toString());
         server_write_buf.add(data);
       }));
 
   // We hold Streams in pending_streams between the request encodeHeaders in the
   // Stream constructor and server newStream() callback, where we learn about
   // the response encoder and can complete Stream initialization.
   std::list<HttpStreamPtr> pending_streams;
   std::list<HttpStreamPtr> streams;
   // For new streams when we aren't expecting one (e.g. as a result of a mutation).
   NiceMock<MockRequestDecoder> orphan_request_decoder;
 
   ON_CALL(server_callbacks, newStream(_, _))
       .WillByDefault(Invoke([&](ResponseEncoder& encoder, bool) -> RequestDecoder& {
         if (pending_streams.empty()) {
           return orphan_request_decoder;
         }
         auto stream_ptr = pending_streams.front()->removeFromList(pending_streams);
         HttpStream* const stream = stream_ptr.get();
         stream_ptr->moveIntoListBack(std::move(stream_ptr), streams);
         stream->response_.response_encoder_ = &encoder;
         encoder.getStream().addCallbacks(stream->response_.stream_callbacks_);
         stream->stream_index_ = streams.size() - 1;
         return stream->request_.request_decoder_;
       }));
 
   auto client_server_buf_drain = [&client_write_buf, &server_write_buf] {
     Http::Status status = Http::okStatus();
     while (!client_write_buf.empty() || !server_write_buf.empty()) {
       status = client_write_buf.drain();
       if (!status.ok()) {
         return status;
       }
       status = server_write_buf.drain();
       if (!status.ok()) {
         return status;
       }
     }
     return status;
   };
 
   // We track whether the connection should be closed for HTTP/1, since stream resets imply
   // connection closes.
   bool should_close_connection = false;
 
   constexpr auto max_actions = 1024;
   bool codec_error = false;
   for (int i = 0; i < std::min(max_actions, input.actions().size()) && !should_close_connection &&
                   !codec_error;
        ++i) {
     const auto& action = input.actions(i);
     ENVOY_LOG_MISC(trace, "action {} with {} streams", action.DebugString(), streams.size());
     switch (action.action_selector_case()) {
     case test::common::http::Action::kNewStream: {
       if (!http2) {
         // HTTP/1 codec needs to have existing streams complete, so make it
         // easier to achieve a successful multi-stream example by flushing.
         if (!client_server_buf_drain().ok()) {
           codec_error = true;
           break;
         }
         // HTTP/1 client codec can only have a single active stream.
         if (!pending_streams.empty() || (!streams.empty() && streams.back()->active())) {
           ENVOY_LOG_MISC(trace, "Skipping new stream as HTTP/1 and already have existing stream");
           continue;
         }
       }
       HttpStreamPtr stream = std::make_unique<HttpStream>(
           *client,
           fromSanitizedHeaders<TestRequestHeaderMapImpl>(action.new_stream().request_headers()),
           action.new_stream().end_stream(), [&should_close_connection, http2]() {
             // HTTP/1 codec has stream reset implying connection close.
             if (!http2) {
               should_close_connection = true;
             }
           });
       stream->moveIntoListBack(std::move(stream), pending_streams);
       break;
     }
     case test::common::http::Action::kStreamAction: {
       const auto& stream_action = action.stream_action();
       if (streams.empty()) {
         break;
       }
       // Index into list of created streams (not HTTP/2 level stream ID).
       const uint32_t stream_id = stream_action.stream_id() % streams.size();
       ENVOY_LOG_MISC(trace, "action for stream index {}", stream_id);
       (*std::next(streams.begin(), stream_id))->streamAction(stream_action);
       break;
     }
     case test::common::http::Action::kMutate: {
       const auto& mutate = action.mutate();
       ReorderBuffer& write_buf = mutate.server() ? server_write_buf : client_write_buf;
       write_buf.mutate(mutate.buffer(), mutate.offset(), mutate.value());
       break;
     }
     case test::common::http::Action::kSwapBuffer: {
       const auto& swap_buffer = action.swap_buffer();
       ReorderBuffer& write_buf = swap_buffer.server() ? server_write_buf : client_write_buf;
       write_buf.swap(swap_buffer.buffer());
       break;
     }
     case test::common::http::Action::kClientDrain: {
       if (!client_write_buf.drain().ok()) {
         codec_error = true;
         break;
       }
       break;
     }
     case test::common::http::Action::kServerDrain: {
       if (!server_write_buf.drain().ok()) {
         codec_error = true;
         break;
       }
       break;
     }
     case test::common::http::Action::kQuiesceDrain: {
       if (!client_server_buf_drain().ok()) {
         codec_error = true;
         break;
       }
       break;
     }
     default:
       // Maybe nothing is set?
       break;
     }
     if (DebugMode && !should_close_connection && !codec_error) {
       if (!client_server_buf_drain().ok()) {
         codec_error = true;
         break;
       }
     }
   }
   // Drain all remaining buffers, unless the connection is effectively closed.
   if (!should_close_connection && !codec_error) {
     if (!client_server_buf_drain().ok()) {
       codec_error = true;
     }
   }
   if (!codec_error && http2) {
     dynamic_cast<Http2::TestClientConnectionImpl&>(*client).goAway();
     dynamic_cast<Http2::TestServerConnectionImpl&>(*server).goAway();
   }
 }
 
 } // namespace
 
 // Fuzz the H1/H2 codec implementations.
