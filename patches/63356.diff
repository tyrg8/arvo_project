commit a5dca1a30b1beda46cff7334b2d68c82b0bbbe59
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Thu Nov 2 16:56:19 2023 +0100

    Handle short compressed data in zip archive entries.
    
    This fixes OSS-fuzz issue 63356.

diff --git a/source/fitz/unzip.c b/source/fitz/unzip.c
index 1fe4e289f..a11d5b5c7 100644
--- a/source/fitz/unzip.c
+++ b/source/fitz/unzip.c
@@ -507,89 +507,89 @@ static fz_stream *open_zip_entry(fz_context *ctx, fz_archive *arch, const char *
 static fz_buffer *read_zip_entry(fz_context *ctx, fz_archive *arch, const char *name)
 {
 	fz_zip_archive *zip = (fz_zip_archive *) arch;
 	fz_stream *file = zip->super.file;
 	fz_buffer *ubuf;
 	unsigned char *cbuf = NULL;
 	int method;
 	z_stream z;
 	int code;
 	uint64_t len;
 	zip_entry *ent;
 
 	fz_var(cbuf);
 
 	ent = lookup_zip_entry(ctx, zip, name);
 	if (!ent)
 		return NULL;
 
 	method = read_zip_entry_header(ctx, zip, ent);
 	ubuf = fz_new_buffer(ctx, ent->usize + 1); /* +1 because many callers will add a terminating zero */
 
 	if (method == 0)
 	{
 		fz_try(ctx)
 		{
 			ubuf->len = fz_read(ctx, file, ubuf->data, ent->usize);
 			if (ubuf->len < (size_t)ent->usize)
 				fz_warn(ctx, "premature end of data in stored zip archive entry");
 		}
 		fz_catch(ctx)
 		{
 			fz_drop_buffer(ctx, ubuf);
 			fz_rethrow(ctx);
 		}
 		return ubuf;
 	}
 	else if (method == 8)
 	{
 		fz_try(ctx)
 		{
 			cbuf = fz_malloc(ctx, ent->csize);
 
-			fz_read(ctx, file, cbuf, ent->csize);
-
 			z.zalloc = fz_zlib_alloc;
 			z.zfree = fz_zlib_free;
 			z.opaque = ctx;
-			z.next_in = cbuf;
-			z.avail_in = ent->csize;
 			z.next_out = ubuf->data;
 			z.avail_out = ent->usize;
+			z.next_in = cbuf;
+			z.avail_in = fz_read(ctx, file, cbuf, ent->csize);
+			if (z.avail_in < ent->csize)
+				fz_warn(ctx, "premature end of compressed data for compressed archive entry");
 
 			code = inflateInit2(&z, -15);
 			if (code != Z_OK)
 			{
 				fz_throw(ctx, FZ_ERROR_GENERIC, "zlib inflateInit2 error: %s", z.msg);
 			}
 			code = inflate(&z, Z_FINISH);
 			if (code != Z_STREAM_END)
 			{
 				inflateEnd(&z);
 				fz_throw(ctx, FZ_ERROR_GENERIC, "zlib inflate error: %s", z.msg);
 			}
 			code = inflateEnd(&z);
 			if (code != Z_OK)
 			{
 				fz_throw(ctx, FZ_ERROR_GENERIC, "zlib inflateEnd error: %s", z.msg);
 			}
 
 			len = ent->usize - z.avail_out;
 			if (len < ent->usize)
 				fz_warn(ctx, "premature end of data in compressed archive entry");
 			ubuf->len = len;
 		}
 		fz_always(ctx)
 		{
 			fz_free(ctx, cbuf);
 		}
 		fz_catch(ctx)
 		{
 			fz_drop_buffer(ctx, ubuf);
 			fz_rethrow(ctx);
 		}
 		return ubuf;
 	}
 
 	fz_drop_buffer(ctx, ubuf);
 	fz_throw(ctx, FZ_ERROR_GENERIC, "unknown zip method: %d", method);
 }
