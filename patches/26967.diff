commit f61f9234eac0cc6729ab15c7f395874c6a65abff
Author: AdamKorcz <adam@adalogics.com>
Date:   Wed Nov 4 13:00:03 2020 +0000

    Removed assignment

diff --git a/prog/fuzzing/adaptmap_fuzzer.cc b/prog/fuzzing/adaptmap_fuzzer.cc
index 15b985c..6c81b70 100644
--- a/prog/fuzzing/adaptmap_fuzzer.cc
+++ b/prog/fuzzing/adaptmap_fuzzer.cc
@@ -4,92 +4,89 @@ extern "C" int
 LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) { 
 	if(size<3) return 0;
 
 	leptSetStdNullHandler();
 
 
 	PIX *pixs_payload = pixReadMemSpix(data, size);
 	if(pixs_payload == NULL) return 0;
 
 	PIX *pix1, *pix2, *pix3, *pix4, *pix5, *return_pix1, *payload_copy;
 
 	pix1 = pixRead("../test8.jpg");
 	payload_copy = pixCopy(NULL, pixs_payload);
 	pixBackgroundNormGrayArray(payload_copy, pix1, 10, 10, 10, 10, 256, 10, 10, &pix2);
 	pixDestroy(&pix1);
 	pixDestroy(&pix2);
 	pixDestroy(&payload_copy);
 
 
 
 	pix1 = pixRead("../test8.jpg");
 	payload_copy = pixCopy(NULL, pixs_payload);
 	pixBackgroundNormGrayArrayMorph(payload_copy, pix1, 6, 5, 256, &pix2);
 	pixDestroy(&pix1);
 	pixDestroy(&pix2);
 	pixDestroy(&payload_copy);
 
 
 	pix1 = pixRead("../test8.jpg");
 	payload_copy = pixCopy(NULL, pixs_payload);
 	return_pix1 = pixBackgroundNormMorph(payload_copy, pix1, 6, 5, 256);
 	pixDestroy(&pix1);
 	pixDestroy(&payload_copy);
 	if(return_pix1!=NULL){
 		pixDestroy(&return_pix1);
 	}
 
 
 	pix1 = pixRead("../test8.jpg");
 	pix2 = pixRead("../test8.jpg");
 	payload_copy = pixCopy(NULL, pixs_payload);
 	pixBackgroundNormRGBArrays(payload_copy, pix1, pix2, 10, 10, 10, 10, 130, 10, 10, &pix3, &pix4, &pix5);
 	pixDestroy(&pix1);
 	pixDestroy(&pix2);
 	pixDestroy(&pix3);
 	pixDestroy(&pix4);
 	pixDestroy(&pix5);
 	pixDestroy(&payload_copy);
 
 
 	pix1 = pixRead("../test8.jpg");
 	payload_copy = pixCopy(NULL, pixs_payload);
 	pixBackgroundNormRGBArraysMorph(payload_copy, pix1, 6, 33, 130, &pix2, &pix3, &pix4);
 	pixDestroy(&pix1);
 	pixDestroy(&pix2);
 	pixDestroy(&pix3);
 	pixDestroy(&pix4);
 	pixDestroy(&payload_copy);
 
 
 	pix1 = pixRead("../test8.jpg");
 	payload_copy = pixCopy(NULL, pixs_payload);
-	return_pix1 = pixContrastNorm(payload_copy, pix1, 10, 10, 3, 0, 0);
+	pixContrastNorm(payload_copy, pix1, 10, 10, 3, 0, 0);
 	pixDestroy(&pix1);
 	pixDestroy(&payload_copy);
-	if(return_pix1!=NULL){
-		pixDestroy(&return_pix1);
-	}
 
 
 	pix1 = pixRead("../test8.jpg");
 	payload_copy = pixCopy(NULL, pixs_payload);
 	return_pix1 = pixGlobalNormNoSatRGB(payload_copy, pix1, 3, 3, 3, 2, 0.9);
 	pixDestroy(&pix1);
 	pixDestroy(&payload_copy);
 	if(return_pix1!=NULL){
 		pixDestroy(&return_pix1);
 	}
 
 
 	payload_copy = pixCopy(NULL, pixs_payload);
 	pixThresholdSpreadNorm(payload_copy, L_SOBEL_EDGE, 10, 0, 0, 0.7, -25, 255, 10, &pix1, &pix2, &pix3);
 	pixDestroy(&pix1);
 	pixDestroy(&pix2);
 	pixDestroy(&pix3);
 	pixDestroy(&payload_copy);
 
 	pixDestroy(&pixs_payload);
 
 
 	return 0;
 }
