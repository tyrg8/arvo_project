commit 906108bb691a35828cc4e09fcba904d08c24d458
Author: Frank Morgner <frankmorgner@gmail.com>
Date:   Thu Feb 20 10:46:23 2020 +0100

    dnie: fixed length checking of uncompressed data
    
    fixes https://oss-fuzz.com/testcase-detail/5632848910614528

diff --git a/src/libopensc/card-dnie.c b/src/libopensc/card-dnie.c
index 110b3a83..164ae15c 100644
--- a/src/libopensc/card-dnie.c
+++ b/src/libopensc/card-dnie.c
@@ -906,80 +906,79 @@ static int dnie_finish(struct sc_card *card)
 /**
  * Uncompress data if in compressed format.
  *
  * @param card pointer to sc_card_t structure
  * @param from buffer to get data from
  * @param len pointer to buffer length
  * @return uncompressed or original buffer; len points to new buffer length
  *        on error return null
  */
 static u8 *dnie_uncompress(sc_card_t * card, u8 * from, size_t *len)
 {
 	u8 *upt = from;
 #ifdef ENABLE_ZLIB
 	int res = SC_SUCCESS;
 	size_t uncompressed = 0L;
 	size_t compressed = 0L;
 
 	if (!card || !card->ctx || !from || !len)
 		return NULL;
 	LOG_FUNC_CALLED(card->ctx);
 
 	/* if data size not enough for compression header assume uncompressed */
 	if (*len < 8)
 		goto compress_exit;
 	/* evaluate compressed an uncompressed sizes (little endian format) */
 	uncompressed = lebytes2ulong(from);
 	compressed = lebytes2ulong(from + 4);
 	/* if compressed size doesn't match data length assume not compressed */
 	if (compressed != (*len) - 8)
 		goto compress_exit;
 	/* if compressed size greater than uncompressed, assume uncompressed data */
 	if (uncompressed < compressed)
 		goto compress_exit;
 
 	sc_log(card->ctx, "Data seems to be compressed. calling uncompress");
 	/* ok: data seems to be compressed */
 	upt = calloc(uncompressed, sizeof(u8));
 	if (!upt) {
 		sc_log(card->ctx, "alloc() for uncompressed buffer failed");
 		return NULL;
 	}
+	*len = uncompressed;
 	res = sc_decompress(upt,	/* try to uncompress by calling sc_xx routine */
-			    (size_t *) & uncompressed,
+			    len,
 			    from + 8, (size_t) compressed, COMPRESSION_ZLIB);
-	/* TODO: check that returned uncompressed size matches expected */
 	if (res != SC_SUCCESS) {
 		sc_log(card->ctx, "Uncompress() failed or data not compressed");
 		goto compress_exit;	/* assume not need uncompression */
 	}
 	/* Done; update buffer len and return pt to uncompressed data */
-	*len = uncompressed;
 	sc_log_hex(card->ctx, "Compressed data", from + 8, compressed);
 	sc_log_hex(card->ctx, "Uncompressed data", upt, uncompressed);
  compress_exit:
 
 #endif
 
 	sc_log(card->ctx, "uncompress: returning with%s de-compression ",
 	       (upt == from) ? "out" : "");
 	return upt;
 }
 
 /**
  * Fill file cache for read_binary() operation.
  *
  * Fill a temporary buffer by mean of consecutive calls to read_binary()
  * until card sends eof
  *
  * DNIe card stores user certificates in compressed format. so we need
  * some way to detect and uncompress on-the-fly compressed files, to
  * let read_binary() work transparently. 
  * This is the main goal of this routine: create an in-memory buffer 
  * for read_binary operation, filling this buffer on first read_binary() 
  * call, and uncompress data if compression detected. Further 
  * read_binary() calls then make use of cached data, instead
  * of accessing the card
  *
  * @param card Pointer to card structure
  * @return SC_SUCCESS if OK; else error code
  */
