commit d9c14b2b12a3313c78bbfa808e12ed242b7f0adc
Author: madamantis-leviathan <94181631+madamantis-leviathan@users.noreply.github.com>
Date:   Tue Mar 7 17:03:27 2023 +0100

    Remove functions that are no longer available from the source (#154)

diff --git a/fuzz/fuzz_dnames.c b/fuzz/fuzz_dnames.c
index 214e1a97..9e166511 100644
--- a/fuzz/fuzz_dnames.c
+++ b/fuzz/fuzz_dnames.c
@@ -28,169 +28,160 @@ limitations under the License.
 /*
  * A fuzzer that simulates a small part of the simplereader.c example.
  */
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   char filename[256];
   sprintf(filename, "/tmp/libfuzzer.%d", getpid());
 
   FILE *fp = fopen(filename, "wb");
   if (!fp) {
     return 0;
   }
   fwrite(data, size, 1, fp);
   fclose(fp);
 
   Dwarf_Debug dbg = 0;
   int res = DW_DLV_ERROR;
   Dwarf_Error error;
   Dwarf_Handler errhand = 0;
   Dwarf_Ptr errarg = 0;
   int regtabrulecount = 0;
   int curopt = 0;
 
   int fd = open(filename, O_RDONLY | O_BINARY);
   if (fd < 0) {
     exit(EXIT_FAILURE);
   }
 
   res = dwarf_init_b(fd, DW_GROUPNUMBER_ANY, errhand, errarg, &dbg, &error);
 
   if (res != DW_DLV_OK) {
     dwarf_dealloc_error(dbg, error);
   } else {
 
     Dwarf_Dnames_Head dnames_h;
     Dwarf_Off dw_offset_of_next_table = 0;
     res = dwarf_dnames_header(dbg, 0, &dnames_h, &dw_offset_of_next_table,
                               &error);
 
     if (res != DW_DLV_OK) {
       dwarf_dealloc_dnames(dnames_h);
       dwarf_finish(dbg);
       close(fd);
       unlink(filename);
       return 0;
     }
 
     Dwarf_Unsigned dw_index = 1;
     Dwarf_Unsigned dw_abbrev_offset, dw_abbrev_code, dw_abbrev_tag;
     Dwarf_Unsigned dw_array_size = 256;
     Dwarf_Half *dw_idxattr_array;
     Dwarf_Half *dw_form_array;
     Dwarf_Unsigned dw_idxattr_count;
 
     res = dwarf_dnames_abbrevtable(
         dnames_h, dw_index, &dw_abbrev_offset, &dw_abbrev_code, &dw_abbrev_tag,
         dw_array_size, dw_idxattr_array, dw_form_array, &dw_idxattr_count);
     if (res == DW_DLV_NO_ENTRY) {
     }
 
     Dwarf_Unsigned dw_comp_unit_count;
     Dwarf_Unsigned dw_local_type_unit_count;
     Dwarf_Unsigned dw_foreign_type_unit_count;
     Dwarf_Unsigned dw_bucket_count;
     Dwarf_Unsigned dw_name_count;
     Dwarf_Unsigned dw_abbrev_table_size;
     Dwarf_Unsigned dw_entry_pool_size;
     Dwarf_Unsigned dw_augmentation_string_size;
     char *dw_augmentation_string;
     Dwarf_Unsigned dw_section_size;
     Dwarf_Half dw_table_version;
     Dwarf_Half dw_offset_size;
     res = dwarf_dnames_sizes(
         dnames_h, &dw_comp_unit_count, &dw_local_type_unit_count,
         &dw_foreign_type_unit_count, &dw_bucket_count, &dw_name_count,
         &dw_abbrev_table_size, &dw_entry_pool_size,
         &dw_augmentation_string_size, &dw_augmentation_string, &dw_section_size,
         &dw_table_version, &dw_offset_size, &error);
     if (res != DW_DLV_OK) {
       dwarf_dealloc_dnames(dnames_h);
       dwarf_finish(dbg);
       close(fd);
       unlink(filename);
       return 0;
     }
 
     Dwarf_Unsigned dw_header_offset;
     Dwarf_Unsigned dw_cu_table_offset;
     Dwarf_Unsigned dw_tu_local_offset;
     Dwarf_Unsigned dw_foreign_tu_offset;
     Dwarf_Unsigned dw_bucket_offset;
     Dwarf_Unsigned dw_hashes_offset;
     Dwarf_Unsigned dw_stringoffsets_offset;
     Dwarf_Unsigned dw_entryoffsets_offset;
     Dwarf_Unsigned dw_abbrev_table_offset;
     Dwarf_Unsigned dw_entry_pool_offset;
     res = dwarf_dnames_offsets(
         dnames_h, &dw_header_offset, &dw_cu_table_offset, &dw_tu_local_offset,
         &dw_foreign_tu_offset, &dw_bucket_offset, &dw_hashes_offset,
         &dw_stringoffsets_offset, &dw_entryoffsets_offset,
         &dw_abbrev_table_offset, &dw_entry_pool_offset, &error);
     if (res != DW_DLV_OK) {
       dwarf_dealloc_dnames(dnames_h);
       dwarf_finish(dbg);
       close(fd);
       unlink(filename);
       return 0;
     }
 
     Dwarf_Unsigned dw_offset;
     Dwarf_Sig8 dw_sig;
     res = dwarf_dnames_cu_table(dnames_h, "cu", 0, &dw_offset, &dw_sig, &error);
     if (res != DW_DLV_OK) {
       dwarf_dealloc_dnames(dnames_h);
       dwarf_finish(dbg);
       close(fd);
       unlink(filename);
       return 0;
     }
 
     dw_index = 0;
     Dwarf_Unsigned dw_indexcount;
     res = dwarf_dnames_bucket(dnames_h, 0, &dw_index, &dw_indexcount, &error);
     if (res != DW_DLV_OK) {
       dwarf_dealloc_dnames(dnames_h);
       dwarf_finish(dbg);
       close(fd);
       unlink(filename);
       return 0;
     }
 
     Dwarf_Unsigned dw_bucket_number;
     Dwarf_Unsigned dw_hash_value;
     Dwarf_Unsigned dw_offset_to_debug_str;
     char *dw_ptrtostr;
     Dwarf_Unsigned dw_offset_in_entrypool;
     Dwarf_Unsigned dw_abbrev_number;
     Dwarf_Half abbrev_tg;
     dw_array_size = 10;
     Dwarf_Half idxattr_array[10];
     Dwarf_Half form_array[10];
     res = dwarf_dnames_name(
         dnames_h, 1, &dw_bucket_number, &dw_hash_value, &dw_offset_to_debug_str,
         &dw_ptrtostr, &dw_offset_in_entrypool, &dw_abbrev_number, &abbrev_tg,
         dw_array_size, idxattr_array, form_array, &dw_idxattr_count, &error);
     if (res != DW_DLV_OK) {
       dwarf_dealloc_dnames(dnames_h);
       dwarf_finish(dbg);
       close(fd);
       unlink(filename);
       return 0;
     }
-    Dwarf_Half dw_tag;
-    Dwarf_Unsigned dw_index_of_abbrev, dw_number_of_attr_form_entries;
-    dwarf_dnames_abbrev_by_code(dnames_h, dw_abbrev_number, &dw_tag,
-                                &dw_index_of_abbrev,
-                                &dw_number_of_attr_form_entries);
-
-    Dwarf_Unsigned dw_idx_attr, dw_form;
-    dwarf_dnames_abbrev_form_by_index(dnames_h, 0, 0, &dw_idx_attr, &dw_form,
-                                      &error);
 
     dwarf_dealloc_dnames(dnames_h);
   }
 
   dwarf_finish(dbg);
   close(fd);
   unlink(filename);
   return 0;
 }
