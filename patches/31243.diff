commit a6532157d61f5608a8988749732c8a87d1392061
Author: Dan Bloomberg <dan.bloomberg@gmail.com>
Date:   Mon Feb 22 11:31:53 2021 -0800

    Oss-fuzz issue 31243, uninitialized data in zlib compression
    Unable to reproduce.
    May be due to uninitialized pad bits in pixGetRasterData(), where d < 8,
    so these are now initialized before generating the packed data array.

diff --git a/src/pix2.c b/src/pix2.c
index 89f39e5..cf6a302 100644
--- a/src/pix2.c
+++ b/src/pix2.c
@@ -3300,74 +3300,76 @@ l_uint8   *line, *data;  /* packed data in returned array */
 l_uint32  *rline, *rdata;  /* data in pix raster */
 
     PROCNAME("pixGetRasterData");
 
     if (pdata) *pdata = NULL;
     if (pnbytes) *pnbytes = 0;
     if (!pdata || !pnbytes)
         return ERROR_INT("&data and &nbytes not both defined", procName, 1);
     if (!pixs)
         return ERROR_INT("pixs not defined", procName, 1);
     pixGetDimensions(pixs, &w, &h, &d);
     if (d != 1 && d != 2 && d != 4 && d != 8 && d != 16 && d != 32)
         return ERROR_INT("depth not in {1,2,4,8,16,32}", procName, 1);
+
+    pixSetPadBits(pixs, 0);
     rdata = pixGetData(pixs);
     wpl = pixGetWpl(pixs);
     if (d == 1)
         databpl = (w + 7) / 8;
     else if (d == 2)
         databpl = (w + 3) / 4;
     else if (d == 4)
         databpl = (w + 1) / 2;
     else if (d == 8 || d == 16)
         databpl = w * (d / 8);
     else  /* d == 32 bpp rgb */
         databpl = 3 * w;
     if ((data = (l_uint8 *)LEPT_CALLOC((size_t)databpl * h, sizeof(l_uint8)))
             == NULL)
         return ERROR_INT("data not allocated", procName, 1);
     *pdata = data;
     *pnbytes = (size_t)databpl * h;
 
     for (i = 0; i < h; i++) {
          rline = rdata + i * wpl;
          line = data + i * databpl;
          if (d <= 8) {
              for (j = 0; j < databpl; j++)
                   line[j] = GET_DATA_BYTE(rline, j);
          } else if (d == 16) {
              for (j = 0; j < w; j++)
                   line[2 * j] = GET_DATA_TWO_BYTES(rline, j);
          } else {  /* d == 32 bpp rgb */
              for (j = 0; j < w; j++) {
                   extractRGBValues(rline[j], &rval, &gval, &bval);
                   *(line + 3 * j) = rval;
                   *(line + 3 * j + 1) = gval;
                   *(line + 3 * j + 2) = bval;
              }
          }
     }
 
     return 0;
 }
 
 
 /*-------------------------------------------------------------*
  *                Infer resolution from image size             *
  *-------------------------------------------------------------*/
 /*!
  * \brief   pixInferResolution()
  *
  * \param[in]    pix
  * \param[in]    longside    assumed max dimension, in inches
  * \param[out]   pres        resolution (ppi)
  * \return  0 if OK, 1 on error
  *
  * <pre>
  * Notes:
  *      (1) This finds the resolution, assuming that the longest side
  *          of the image is %longside.  On error, returns 300 ppi.
  *      (2) This is useful for computing resolution for generating pdfs,
  *          when the images are scanned from pages of known size.
  *          There, %longside is typically about 11.0.
  * </pre>
  */
