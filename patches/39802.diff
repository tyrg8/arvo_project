commit 66898d8208d158d95a27f1a76078a29bd1e08d7e
Author: Liviu Chircu <liviu@opensips.org>
Date:   Tue Sep 20 17:21:40 2022 +0300

    parse_msg(): Fix out-of-bounds read edge-case (OSS-Fuzz)
    
    Also add a unit test suite for parse_msg().
    
    Severity: low
    Fixes OSS-Fuzz#39802

diff --git a/parser/parse_hname2.c b/parser/parse_hname2.c
index 4f003b110..32c9fdad7 100644
--- a/parser/parse_hname2.c
+++ b/parser/parse_hname2.c
@@ -180,117 +180,117 @@ static inline char* skip_ws(char* p, char *end)
 char* parse_hname2(char* begin, char* end, struct hdr_field* hdr)
 {
 	register char* p;
 	register unsigned int val;
 
 	if ((end - begin) < 4) {
 		hdr->type = HDR_ERROR_T;
 		return begin;
 	}
 
 	p = begin;
 
 	val = LOWER_DWORD(READ(p));
 	hdr->name.s = begin;
 
 	switch(val) {
 
 		FIRST_QUATERNIONS;
 		/* fall through */
 
 		default:
 			switch(LOWER_BYTE(*p)) {
 				case 't':
 					switch(LOWER_BYTE(*(p + 1))) {
 						case 'o':
 							p += 2;
 							hdr->type = HDR_TO_T;
 							hdr->name.len = 2;
 							goto dc_cont;
 						case ' ':
 						case '\t':
 							p += 2;
 							hdr->type = HDR_TO_T;
 							hdr->name.len = 1;
 							goto dc_end;
 						case ':':
 							hdr->type = HDR_TO_T;
 							hdr->name.len = 1;
 							return (p + 2);
 					}
 					break;
 				case 'v': PARSE_COMPACT(HDR_VIA_T);           break;
 				case 'f': PARSE_COMPACT(HDR_FROM_T);          break;
 				case 'i': PARSE_COMPACT(HDR_CALLID_T);        break;
 				case 'm': PARSE_COMPACT(HDR_CONTACT_T);       break;
 				case 'l': PARSE_COMPACT(HDR_CONTENTLENGTH_T); break;
 				case 'k': PARSE_COMPACT(HDR_SUPPORTED_T);     break;
 				case 'c': PARSE_COMPACT(HDR_CONTENTTYPE_T);   break;
 				case 'o': PARSE_COMPACT(HDR_EVENT_T);         break;
 				case 'x': PARSE_COMPACT(HDR_SESSION_EXPIRES_T); break;
 			}
 			goto other;
 	}
 	/* the above swtich will never continue here */
 
 
  dc_end:
 	/* HDR name entirely found, consume WS till colon */
 	/* overflow during the "switch-case" parsing ? */
 	if (p>=end)
 		goto error;
 	p = skip_ws(p, end);
-	if (*p != ':')
+	if (p >= end || *p != ':')
 		goto error;
 	/* hdr type, name should be already set at this point */
 	return (p+1);
 	/*done*/
 
 
  dc_cont:
 	/* HDR name partially found, see what's next */
 	/* overflow during the "switch-case" parsing ? */
 	if (p>=end)
 		goto error;
 	/* hdr type, name should be already set at this point (for partial finding) */
 	switch (*p) {
 		case ':' :
 			return (p+1);
 		case ' ':
 		case '\t':
 			/* consume spaces to the end of name */
 			p = skip_ws( p+1, end);
-			if (*p != ':')
+			if (p >= end || *p != ':')
 				goto error;
 			return (p+1);
 		/* default: it seems the hdr name continues, fall to "other" */
 	}
 
 
  other:
 	/* Unknown header type */
 	hdr->type = HDR_OTHER_T;
 	/* if overflow during the "switch-case" parsing, the "while" will
 	 * exit and we will fall in the "error" section */
 	while ( p < end ) {
 		switch (*p) {
 			case ':' :
 				hdr->name.len = p - hdr->name.s;
 				return (p + 1);
 			case ' ' :
 			case '\t':
 				hdr->name.len = p - hdr->name.s;
 				p = skip_ws(p+1, end);
-				if (*p != ':')
+				if (p >= end || *p != ':')
 					goto error;
 				return (p+1);
 		}
 		p++;
 	}
 
  error:
 	/* No colon found, error.. */
 	hdr->type = HDR_ERROR_T;
 	hdr->name.s = 0;
 	hdr->name.len = 0;
 	return 0;
 }
diff --git a/parser/test/test_parser.c b/parser/test/test_parser.c
index 49b310b6f..30105c4de 100644
--- a/parser/test/test_parser.c
+++ b/parser/test/test_parser.c
@@ -143,10 +143,40 @@ void test_parse_uri(void)
 	ok(str_match(&u.pn_purr_val, const_str("t")), "puri-43");
 }
 
+static const struct tts {
+	const unsigned char tmsg[32];
+	int tres;
+} tset[] = {
+	{
+		/* test for read overflows on EoH parsing */
+		{'e', ' ', 255, 255, 255, 255, ' ', ' ', ' ', ' ', ' ', 255, '\n', 255, 255, ' ', ' '},
+		-1,
+	},
+
+	{{0}, 0},
+};
+
+void test_parse_msg(void)
+{
+	int i;
+
+	for (i = 0; tset[i].tmsg[0]; i++) {
+		struct sip_msg msg;
+
+		memset(&msg, 0, sizeof msg);
+		msg.buf = (char *)tset[i].tmsg;
+		msg.len = strlen(msg.buf);
+
+		ok(parse_msg(msg.buf, msg.len, &msg) == tset[i].tres, "parse-msg-0");
+	}
+}
+
+
 void test_parser(void)
 {
+	test_parse_uri();
+	test_parse_msg();
 	test_parse_qop_val();
 	test_parse_fcaps();
-	test_parse_uri();
 	test_parse_authenticate_body();
 }
