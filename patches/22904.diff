commit 187250bda910463f5a3f718b2c7a537102e68005
Author: Dan Bloomberg <dan.bloomberg@gmail.com>
Date:   Fri Jun 5 11:58:40 2020 -0700

    Issue 23091 and 23092 in oss-fuzz: divide by zero and uninitialized value
    * Also changed enhance_fuzzer to use Spix input.

diff --git a/prog/fuzzing/enhance_fuzzer.cc b/prog/fuzzing/enhance_fuzzer.cc
index e9a22b2..33dbf9f 100644
--- a/prog/fuzzing/enhance_fuzzer.cc
+++ b/prog/fuzzing/enhance_fuzzer.cc
@@ -10,24 +10,24 @@ extern "C" int
 LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
 {
         if(size<3) return 0;
         PIX *pix, *pix0, *pix1, *pix2, *pix3, *pix4;
 
         leptSetStdNullHandler();
 
-        pix = pixReadMem(data, size);
-        if(pix==NULL) return 0;
+        pix = pixReadMemSpix(data, size);
+        if (pix == NULL) return 0;
         
         pix0 = pixModifyHue(NULL, pix, 0.01 + 0.05 * 1);
         pix1 = pixModifySaturation(NULL, pix, -0.9 + 0.1 * 1);
         pix2 = pixMosaicColorShiftRGB(pix, -0.1, 0.0, 0.0, 0.0999, 1);
         pix3 = pixMultConstantColor(pix, 0.7, 0.4, 1.3);
         pix4 = pixUnsharpMasking(pix, 3, 0.01 + 0.15 * 1);
 
         pixDestroy(&pix);
         pixDestroy(&pix0);
         pixDestroy(&pix1);
         pixDestroy(&pix2);
         pixDestroy(&pix3);
         pixDestroy(&pix4);
         return 0;	
 }
diff --git a/src/readbarcode.c b/src/readbarcode.c
index 77c6774..71257be 100644
--- a/src/readbarcode.c
+++ b/src/readbarcode.c
@@ -856,143 +856,145 @@ numaQuantizeCrossingsByWidth(NUMA       *nas,
                              l_float32   binfract,
                              NUMA      **pnaehist,
                              NUMA      **pnaohist,
                              l_int32     debugflag)
 {
-l_int32    i, n, ned, nod, iw, width;
+l_int32    i, n, ret, ned, nod, iw, width;
 l_float32  val, minsize, maxsize, factor;
 GPLOT     *gplot;
 NUMA      *naedist, *naodist, *naehist, *naohist, *naecent, *naocent;
 NUMA      *naerange, *naorange, *naelut, *naolut, *nad;
 
     PROCNAME("numaQuantizeCrossingsByWidth");
 
     if (!nas)
         return (NUMA *)ERROR_PTR("nas not defined", procName, NULL);
     n = numaGetCount(nas);
     if (n < 2)
         return (NUMA *)ERROR_PTR("n < 2", procName, NULL);
     if (binfract <= 0.0)
         return (NUMA *)ERROR_PTR("binfract <= 0.0", procName, NULL);
 
         /* Get even and odd crossing distances */
-    numaGetCrossingDistances(nas, &naedist, &naodist, &minsize, &maxsize);
+    ret = numaGetCrossingDistances(nas, &naedist, &naodist, &minsize, &maxsize);
+    if (ret)
+        return (NUMA *)ERROR_PTR("crossing data not found", procName, NULL);
 
         /* Bin the spans in units of binfract * minsize.  These
          * units are convenient because they scale to make at least
          * 1/binfract bins in the smallest span (width).  We want this
          * number to be large enough to clearly separate the
          * widths, but small enough so that the histogram peaks
          * have very few if any holes (zeroes) within them.  */
     naehist = numaMakeHistogramClipped(naedist, binfract * minsize,
                                        (1.25 / binfract) * maxsize);
     naohist = numaMakeHistogramClipped(naodist, binfract * minsize,
                                        (1.25 / binfract) * maxsize);
 
     if (debugflag) {
         lept_mkdir("lept/barcode");
         gplot = gplotCreate("/tmp/lept/barcode/histw", GPLOT_PNG,
                             "Raw width histogram", "Width", "Number");
         gplotAddPlot(gplot, NULL, naehist, GPLOT_LINES, "plot black");
         gplotAddPlot(gplot, NULL, naohist, GPLOT_LINES, "plot white");
         gplotMakeOutput(gplot);
         gplotDestroy(&gplot);
     }
 
         /* Compute the peak ranges, still in units of binfract * minsize.  */
     naerange = numaLocatePeakRanges(naehist, 1.0 / binfract,
                                     1.0 / binfract, 0.0);
     naorange = numaLocatePeakRanges(naohist, 1.0 / binfract,
                                     1.0 / binfract, 0.0);
 
         /* Find the centroid values of each peak */
     naecent = numaGetPeakCentroids(naehist, naerange);
     naocent = numaGetPeakCentroids(naohist, naorange);
 
         /* Generate the lookup tables that map from the bar width, in
          * units of (binfract * minsize), to the integerized barcode
          * units (1, 2, 3, 4), which are the output integer widths
          * between transitions. */
     naelut = numaGetPeakWidthLUT(naerange, naecent);
     naolut = numaGetPeakWidthLUT(naorange, naocent);
 
         /* Get the widths.  Because the LUT accepts our funny units,
          * we first must convert the pixel widths to these units,
          * which is what 'factor' does. */
     nad = numaCreate(0);
     ned = numaGetCount(naedist);
     nod = numaGetCount(naodist);
     if (nod != ned - 1)
         L_WARNING("ned != nod + 1\n", procName);
     factor = 1.0 / (binfract * minsize);  /* for converting units */
     for (i = 0; i < ned - 1; i++) {
         numaGetFValue(naedist, i, &val);
         width = (l_int32)(factor * val);
         numaGetIValue(naelut, width, &iw);
         numaAddNumber(nad, iw);
 /*        lept_stderr("even: val = %7.3f, width = %d, iw = %d\n",
                       val, width, iw); */
         numaGetFValue(naodist, i, &val);
         width = (l_int32)(factor * val);
         numaGetIValue(naolut, width, &iw);
         numaAddNumber(nad, iw);
 /*        lept_stderr("odd: val = %7.3f, width = %d, iw = %d\n",
                       val, width, iw); */
     }
     numaGetFValue(naedist, ned - 1, &val);
     width = (l_int32)(factor * val);
     numaGetIValue(naelut, width, &iw);
     numaAddNumber(nad, iw);
 
     if (debugflag) {
         lept_stderr(" ---- Black bar widths (pixels) ------ \n");
         numaWriteStderr(naedist);
         lept_stderr(" ---- Histogram of black bar widths ------ \n");
         numaWriteStderr(naehist);
         lept_stderr(" ---- Peak ranges in black bar histogram bins --- \n");
         numaWriteStderr(naerange);
         lept_stderr(" ---- Peak black bar centroid width values ------ \n");
         numaWriteStderr(naecent);
         lept_stderr(" ---- Black bar lookup table ------ \n");
         numaWriteStderr(naelut);
         lept_stderr(" ---- White bar widths (pixels) ------ \n");
         numaWriteStderr(naodist);
         lept_stderr(" ---- Histogram of white bar widths ------ \n");
         numaWriteStderr(naohist);
         lept_stderr(" ---- Peak ranges in white bar histogram bins --- \n");
         numaWriteStderr(naorange);
         lept_stderr(" ---- Peak white bar centroid width values ------ \n");
         numaWriteStderr(naocent);
         lept_stderr(" ---- White bar lookup table ------ \n");
         numaWriteStderr(naolut);
     }
 
     numaDestroy(&naedist);
     numaDestroy(&naodist);
     numaDestroy(&naerange);
     numaDestroy(&naorange);
     numaDestroy(&naecent);
     numaDestroy(&naocent);
     numaDestroy(&naelut);
     numaDestroy(&naolut);
     if (pnaehist)
         *pnaehist = naehist;
     else
         numaDestroy(&naehist);
     if (pnaohist)
         *pnaohist = naohist;
     else
         numaDestroy(&naohist);
     return nad;
 }
 
 
 /*!
  * \brief   numaGetCrossingDistances()
  *
  * \param[in]    nas        numa of crossing locations
  * \param[out]   pnaedist   [optional] even distances between crossings
  * \param[out]   pnaodist   [optional] odd distances between crossings
  * \param[out]   pmindist   [optional] min distance between crossings
  * \param[out]   pmaxdist   [optional] max distance between crossings
  * \return  0 if OK, 1 on error
  */
diff --git a/src/readfile.c b/src/readfile.c
index f37bf12..51e58bf 100644
--- a/src/readfile.c
+++ b/src/readfile.c
@@ -620,47 +620,47 @@ l_uint8  firstbytes[13];
 l_int32  format;
 
     PROCNAME("findFileFormatStream");
 
     if (!pformat)
         return ERROR_INT("&format not defined", procName, 1);
     *pformat = IFF_UNKNOWN;
     if (!fp)
         return ERROR_INT("stream not defined", procName, 1);
 
     rewind(fp);
     if (fnbytesInFile(fp) < 12)
         return ERROR_INT("truncated file", procName, 1);
 
     if (fread(&firstbytes, 1, 12, fp) != 12)
         return ERROR_INT("failed to read first 12 bytes of file", procName, 1);
-    firstbytes[12] = '\0';
+    firstbytes[12] = 0;
     rewind(fp);
 
     findFileFormatBuffer(firstbytes, &format);
     if (format == IFF_TIFF) {
         findTiffCompression(fp, &format);
         rewind(fp);
     }
     *pformat = format;
     if (format == IFF_UNKNOWN)
         return 1;
     else
         return 0;
 }
 
 
 /*!
  * \brief   findFileFormatBuffer()
  *
  * \param[in]    buf       byte buffer at least 12 bytes in size; we can't check
  * \param[out]   pformat   found format
  * \return  0 if OK, 1 on error or if format is not recognized
  *
  * <pre>
  * Notes:
  *      (1) This determines the file format from the first 12 bytes in
  *          the compressed data stream, which are stored in memory.
  *      (2) For tiff files, this returns IFF_TIFF.  The specific tiff
  *          compression is then determined using findTiffCompression().
  * </pre>
  */
