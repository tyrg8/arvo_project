commit ce20459e162175710d8ef56118fc34edabfdce5e
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Tue Feb 15 09:00:17 2022 -0800

    x86: Add has_sib to struct instr_info
    
    Add has_sib to struct instr_info and use SIB info only if ins->has_sib
    is true.
    
            PR binutils/28892
            * i386-dis.c (instr_info): Add has_sib.
            (get_sib): Set has_sib.
            (OP_E_memory): Replace havesib with ins->has_sib.
            (OP_VEX): Use ins->sib.index only if ins->has_sib is true.

diff --git a/opcodes/i386-dis.c b/opcodes/i386-dis.c
index 862bd80b1bc..a30bda0633b 100644
--- a/opcodes/i386-dis.c
+++ b/opcodes/i386-dis.c
@@ -142,149 +142,150 @@ enum x86_64_isa
 struct instr_info
 {
   enum address_mode address_mode;
 
   /* Flags for the prefixes for the current instruction.  See below.  */
   int prefixes;
 
   /* REX prefix the current instruction.  See below.  */
   unsigned char rex;
   /* Bits of REX we've already used.  */
   unsigned char rex_used;
 
   bool need_modrm;
   bool need_vex;
+  bool has_sib;
 
   /* Flags for ins->prefixes which we somehow handled when printing the
      current instruction.  */
   int used_prefixes;
 
   /* Flags for EVEX bits which we somehow handled when printing the
      current instruction.  */
   int evex_used;
 
   char obuf[100];
   char *obufp;
   char *mnemonicendp;
   char scratchbuf[100];
   unsigned char *start_codep;
   unsigned char *insn_codep;
   unsigned char *codep;
   unsigned char *end_codep;
   int last_lock_prefix;
   int last_repz_prefix;
   int last_repnz_prefix;
   int last_data_prefix;
   int last_addr_prefix;
   int last_rex_prefix;
   int last_seg_prefix;
   int fwait_prefix;
   /* The active segment register prefix.  */
   int active_seg_prefix;
 
 #define MAX_CODE_LENGTH 15
   /* We can up to 14 ins->prefixes since the maximum instruction length is
      15bytes.  */
   int all_prefixes[MAX_CODE_LENGTH - 1];
   disassemble_info *info;
 
   struct
   {
     int mod;
     int reg;
     int rm;
   }
   modrm;
 
   struct
   {
     int scale;
     int index;
     int base;
   }
   sib;
 
   struct
   {
     int register_specifier;
     int length;
     int prefix;
     int mask_register_specifier;
     int ll;
     bool w;
     bool evex;
     bool r;
     bool v;
     bool zeroing;
     bool b;
     bool no_broadcast;
   }
   vex;
 
   /* Remember if the current op is a jump instruction.  */
   bool op_is_jump;
 
   bool two_source_ops;
 
   unsigned char op_ad;
   signed char op_index[MAX_OPERANDS];
   char op_out[MAX_OPERANDS][100];
   bfd_vma op_address[MAX_OPERANDS];
   bfd_vma op_riprel[MAX_OPERANDS];
   bfd_vma start_pc;
 
   /* On the 386's of 1988, the maximum length of an instruction is 15 bytes.
    *   (see topic "Redundant ins->prefixes" in the "Differences from 8086"
    *   section of the "Virtual 8086 Mode" chapter.)
    * 'pc' should be the address of this instruction, it will
    *   be used to print the target address if this is a relative jump or call
    * The function returns the length of this instruction in bytes.
    */
   char intel_syntax;
   bool intel_mnemonic;
   char open_char;
   char close_char;
   char separator_char;
   char scale_char;
 
   enum x86_64_isa isa64;
 
 };
 
 /* Mark parts used in the REX prefix.  When we are testing for
    empty prefix (for 8bit register REX extension), just mask it
    out.  Otherwise test for REX bit is excuse for existence of REX
    only in case value is nonzero.  */
 #define USED_REX(value)					\
   {							\
     if (value)						\
       {							\
 	if ((ins->rex & value))				\
 	  ins->rex_used |= (value) | REX_OPCODE;	\
       }							\
     else						\
       ins->rex_used |= REX_OPCODE;			\
   }
 
 
 #define EVEX_b_used 1
 
 /* Flags stored in PREFIXES.  */
 #define PREFIX_REPZ 1
 #define PREFIX_REPNZ 2
 #define PREFIX_LOCK 4
 #define PREFIX_CS 8
 #define PREFIX_SS 0x10
 #define PREFIX_DS 0x20
 #define PREFIX_ES 0x40
 #define PREFIX_FS 0x80
 #define PREFIX_GS 0x100
 #define PREFIX_DATA 0x200
 #define PREFIX_ADDR 0x400
 #define PREFIX_FWAIT 0x800
 
 /* Make sure that bytes from INFO->PRIVATE_DATA->BUFFER (inclusive)
    to ADDR (exclusive) are valid.  Returns 1 for success, longjmps
    on error.  */
 #define FETCH_DATA(info, addr) \
   ((addr) <= ((struct dis_private *) (info->private_data))->max_fetched \
    ? 1 : fetch_data ((info), (addr)))
@@ -9282,17 +9283,20 @@ static void
 get_sib (instr_info *ins, int sizeflag)
 {
   /* If modrm.mod == 3, operand must be register.  */
   if (ins->need_modrm
       && ((sizeflag & AFLAG) || ins->address_mode == mode_64bit)
       && ins->modrm.mod != 3
       && ins->modrm.rm == 4)
     {
       FETCH_DATA (ins->info, ins->codep + 2);
       ins->sib.index = (ins->codep[1] >> 3) & 7;
       ins->sib.scale = (ins->codep[1] >> 6) & 3;
       ins->sib.base = ins->codep[1] & 7;
+      ins->has_sib = true;
     }
+  else
+    ins->has_sib = false;
 }
 
 /* Like oappend (below), but S is a string starting with '%'.
    In Intel syntax, the '%' is elided.  */
@@ -11287,542 +11291,539 @@ static void
 OP_E_memory (instr_info *ins, int bytemode, int sizeflag)
 {
   bfd_vma disp = 0;
   int add = (ins->rex & REX_B) ? 8 : 0;
   int riprel = 0;
   int shift;
 
   if (ins->vex.evex)
     {
       switch (bytemode)
 	{
 	case dw_mode:
 	case w_mode:
 	case w_swap_mode:
 	  shift = 1;
 	  break;
 	case db_mode:
 	case b_mode:
 	  shift = 0;
 	  break;
 	case dq_mode:
 	  if (ins->address_mode != mode_64bit)
 	    {
 	case d_mode:
 	case d_swap_mode:
 	      shift = 2;
 	      break;
 	    }
 	    /* fall through */
 	case vex_vsib_d_w_dq_mode:
 	case vex_vsib_q_w_dq_mode:
 	case evex_x_gscat_mode:
 	  shift = ins->vex.w ? 3 : 2;
 	  break;
 	case xh_mode:
 	case evex_half_bcst_xmmqh_mode:
 	case evex_half_bcst_xmmqdh_mode:
 	  if (ins->vex.b)
 	    {
 	      shift = ins->vex.w ? 2 : 1;
 	      break;
 	    }
 	  /* Fall through.  */
 	case x_mode:
 	case evex_half_bcst_xmmq_mode:
 	  if (ins->vex.b)
 	    {
 	      shift = ins->vex.w ? 3 : 2;
 	      break;
 	    }
 	  /* Fall through.  */
 	case xmmqd_mode:
 	case xmmdw_mode:
 	case xmmq_mode:
 	case ymmq_mode:
 	case evex_x_nobcst_mode:
 	case x_swap_mode:
 	  switch (ins->vex.length)
 	    {
 	    case 128:
 	      shift = 4;
 	      break;
 	    case 256:
 	      shift = 5;
 	      break;
 	    case 512:
 	      shift = 6;
 	      break;
 	    default:
 	      abort ();
 	    }
 	  /* Make necessary corrections to shift for modes that need it.  */
 	  if (bytemode == xmmq_mode
 	      || bytemode == evex_half_bcst_xmmqh_mode
 	      || bytemode == evex_half_bcst_xmmq_mode
 	      || (bytemode == ymmq_mode && ins->vex.length == 128))
 	    shift -= 1;
 	  else if (bytemode == xmmqd_mode
 	           || bytemode == evex_half_bcst_xmmqdh_mode)
 	    shift -= 2;
 	  else if (bytemode == xmmdw_mode)
 	    shift -= 3;
 	  break;
 	case ymm_mode:
 	  shift = 5;
 	  break;
 	case xmm_mode:
 	  shift = 4;
 	  break;
 	case q_mode:
 	case q_swap_mode:
 	  shift = 3;
 	  break;
 	case bw_unit_mode:
 	  shift = ins->vex.w ? 1 : 0;
 	  break;
 	default:
 	  abort ();
 	}
     }
   else
     shift = 0;
 
   USED_REX (REX_B);
   if (ins->intel_syntax)
     intel_operand_size (ins, bytemode, sizeflag);
   append_seg (ins);
 
   if ((sizeflag & AFLAG) || ins->address_mode == mode_64bit)
     {
       /* 32/64 bit address mode */
       int havedisp;
-      int havesib;
       int havebase;
       int needindex;
       int needaddr32;
       int base, rbase;
       int vindex = 0;
       int scale = 0;
       int addr32flag = !((sizeflag & AFLAG)
 			 || bytemode == v_bnd_mode
 			 || bytemode == v_bndmk_mode
 			 || bytemode == bnd_mode
 			 || bytemode == bnd_swap_mode);
       bool check_gather = false;
       const char *const *indexes = NULL;
 
-      havesib = 0;
       havebase = 1;
       base = ins->modrm.rm;
 
       if (base == 4)
 	{
-	  havesib = 1;
 	  vindex = ins->sib.index;
 	  USED_REX (REX_X);
 	  if (ins->rex & REX_X)
 	    vindex += 8;
 	  switch (bytemode)
 	    {
 	    case vex_vsib_d_w_dq_mode:
 	    case vex_vsib_q_w_dq_mode:
 	      if (!ins->need_vex)
 		abort ();
 	      if (ins->vex.evex)
 		{
 		  if (!ins->vex.v)
 		    vindex += 16;
 		  check_gather = ins->obufp == ins->op_out[1];
 		}
 
 	      switch (ins->vex.length)
 		{
 		case 128:
 		  indexes = att_names_xmm;
 		  break;
 		case 256:
 		  if (!ins->vex.w
 		      || bytemode == vex_vsib_q_w_dq_mode)
 		    indexes = att_names_ymm;
 		  else
 		    indexes = att_names_xmm;
 		  break;
 		case 512:
 		  if (!ins->vex.w
 		      || bytemode == vex_vsib_q_w_dq_mode)
 		    indexes = att_names_zmm;
 		  else
 		    indexes = att_names_ymm;
 		  break;
 		default:
 		  abort ();
 		}
 	      break;
 	    default:
 	      if (vindex != 4)
 		indexes = ins->address_mode == mode_64bit && !addr32flag
 			  ? att_names64 : att_names32;
 	      break;
 	    }
 	  scale = ins->sib.scale;
 	  base = ins->sib.base;
 	  ins->codep++;
 	}
       else
 	{
 	  /* Check for mandatory SIB.  */
 	  if (bytemode == vex_vsib_d_w_dq_mode
 	      || bytemode == vex_vsib_q_w_dq_mode
 	      || bytemode == vex_sibmem_mode)
 	    {
 	      oappend (ins, "(bad)");
 	      return;
 	    }
 	}
       rbase = base + add;
 
       switch (ins->modrm.mod)
 	{
 	case 0:
 	  if (base == 5)
 	    {
 	      havebase = 0;
-	      if (ins->address_mode == mode_64bit && !havesib)
+	      if (ins->address_mode == mode_64bit && !ins->has_sib)
 		riprel = 1;
 	      disp = get32s (ins);
 	      if (riprel && bytemode == v_bndmk_mode)
 		{
 		  oappend (ins, "(bad)");
 		  return;
 		}
 	    }
 	  break;
 	case 1:
 	  FETCH_DATA (ins->info, ins->codep + 1);
 	  disp = *ins->codep++;
 	  if ((disp & 0x80) != 0)
 	    disp -= 0x100;
 	  if (ins->vex.evex && shift > 0)
 	    disp <<= shift;
 	  break;
 	case 2:
 	  disp = get32s (ins);
 	  break;
 	}
 
       needindex = 0;
       needaddr32 = 0;
-      if (havesib
+      if (ins->has_sib
 	  && !havebase
 	  && !indexes
 	  && ins->address_mode != mode_16bit)
 	{
 	  if (ins->address_mode == mode_64bit)
 	    {
 	      if (addr32flag)
 		{
 		  /* Without base nor index registers, zero-extend the
 		     lower 32-bit displacement to 64 bits.  */
 		  disp = (unsigned int) disp;
 		  needindex = 1;
 		}
 	      needaddr32 = 1;
 	    }
 	  else
 	    {
 	      /* In 32-bit mode, we need index register to tell [offset]
 		 from [eiz*1 + offset].  */
 	      needindex = 1;
 	    }
 	}
 
       havedisp = (havebase
 		  || needindex
-		  || (havesib && (indexes || scale != 0)));
+		  || (ins->has_sib && (indexes || scale != 0)));
 
       if (!ins->intel_syntax)
 	if (ins->modrm.mod != 0 || base == 5)
 	  {
 	    if (havedisp || riprel)
 	      print_displacement (ins, ins->scratchbuf, disp);
 	    else
 	      print_operand_value (ins, ins->scratchbuf, 1, disp);
 	    oappend (ins, ins->scratchbuf);
 	    if (riprel)
 	      {
 		set_op (ins, disp, 1);
 		oappend (ins, !addr32flag ? "(%rip)" : "(%eip)");
 	      }
 	  }
 
       if ((havebase || indexes || needindex || needaddr32 || riprel)
 	  && (ins->address_mode != mode_64bit
 	      || ((bytemode != v_bnd_mode)
 		  && (bytemode != v_bndmk_mode)
 		  && (bytemode != bnd_mode)
 		  && (bytemode != bnd_swap_mode))))
 	ins->used_prefixes |= PREFIX_ADDR;
 
       if (havedisp || (ins->intel_syntax && riprel))
 	{
 	  *ins->obufp++ = ins->open_char;
 	  if (ins->intel_syntax && riprel)
 	    {
 	      set_op (ins, disp, 1);
 	      oappend (ins, !addr32flag ? "rip" : "eip");
 	    }
 	  *ins->obufp = '\0';
 	  if (havebase)
 	    oappend_maybe_intel (ins,
 				 (ins->address_mode == mode_64bit && !addr32flag
 				  ? att_names64 : att_names32)[rbase]);
-	  if (havesib)
+	  if (ins->has_sib)
 	    {
 	      /* ESP/RSP won't allow index.  If base isn't ESP/RSP,
 		 print index to tell base + index from base.  */
 	      if (scale != 0
 		  || needindex
 		  || indexes
 		  || (havebase && base != ESP_REG_NUM))
 		{
 		  if (!ins->intel_syntax || havebase)
 		    {
 		      *ins->obufp++ = ins->separator_char;
 		      *ins->obufp = '\0';
 		    }
 		  if (indexes)
 		    {
 		      if (ins->address_mode == mode_64bit || vindex < 16)
 			oappend_maybe_intel (ins, indexes[vindex]);
 		      else
 			oappend (ins, "(bad)");
 		    }
 		  else
 		    oappend_maybe_intel (ins,
 					 ins->address_mode == mode_64bit
 					 && !addr32flag ? att_index64
 							: att_index32);
 
 		  *ins->obufp++ = ins->scale_char;
 		  *ins->obufp = '\0';
 		  sprintf (ins->scratchbuf, "%d", 1 << scale);
 		  oappend (ins, ins->scratchbuf);
 		}
 	    }
 	  if (ins->intel_syntax
 	      && (disp || ins->modrm.mod != 0 || base == 5))
 	    {
 	      if (!havedisp || (bfd_signed_vma) disp >= 0)
 		{
 		  *ins->obufp++ = '+';
 		  *ins->obufp = '\0';
 		}
 	      else if (ins->modrm.mod != 1 && disp != -disp)
 		{
 		  *ins->obufp++ = '-';
 		  *ins->obufp = '\0';
 		  disp = - (bfd_signed_vma) disp;
 		}
 
 	      if (havedisp)
 		print_displacement (ins, ins->scratchbuf, disp);
 	      else
 		print_operand_value (ins, ins->scratchbuf, 1, disp);
 	      oappend (ins, ins->scratchbuf);
 	    }
 
 	  *ins->obufp++ = ins->close_char;
 	  *ins->obufp = '\0';
 
 	  if (check_gather)
 	    {
 	      /* Both XMM/YMM/ZMM registers must be distinct.  */
 	      int modrm_reg = ins->modrm.reg;
 
 	      if (ins->rex & REX_R)
 	        modrm_reg += 8;
 	      if (!ins->vex.r)
 	        modrm_reg += 16;
 	      if (vindex == modrm_reg)
 		oappend (ins, "/(bad)");
 	    }
 	}
       else if (ins->intel_syntax)
 	{
 	  if (ins->modrm.mod != 0 || base == 5)
 	    {
 	      if (!ins->active_seg_prefix)
 		{
 		  oappend_maybe_intel (ins, att_names_seg[ds_reg - es_reg]);
 		  oappend (ins, ":");
 		}
 	      print_operand_value (ins, ins->scratchbuf, 1, disp);
 	      oappend (ins, ins->scratchbuf);
 	    }
 	}
     }
   else if (bytemode == v_bnd_mode
 	   || bytemode == v_bndmk_mode
 	   || bytemode == bnd_mode
 	   || bytemode == bnd_swap_mode
 	   || bytemode == vex_vsib_d_w_dq_mode
 	   || bytemode == vex_vsib_q_w_dq_mode)
     {
       oappend (ins, "(bad)");
       return;
     }
   else
     {
       /* 16 bit address mode */
       ins->used_prefixes |= ins->prefixes & PREFIX_ADDR;
       switch (ins->modrm.mod)
 	{
 	case 0:
 	  if (ins->modrm.rm == 6)
 	    {
 	      disp = get16 (ins);
 	      if ((disp & 0x8000) != 0)
 		disp -= 0x10000;
 	    }
 	  break;
 	case 1:
 	  FETCH_DATA (ins->info, ins->codep + 1);
 	  disp = *ins->codep++;
 	  if ((disp & 0x80) != 0)
 	    disp -= 0x100;
 	  if (ins->vex.evex && shift > 0)
 	    disp <<= shift;
 	  break;
 	case 2:
 	  disp = get16 (ins);
 	  if ((disp & 0x8000) != 0)
 	    disp -= 0x10000;
 	  break;
 	}
 
       if (!ins->intel_syntax)
 	if (ins->modrm.mod != 0 || ins->modrm.rm == 6)
 	  {
 	    print_displacement (ins, ins->scratchbuf, disp);
 	    oappend (ins, ins->scratchbuf);
 	  }
 
       if (ins->modrm.mod != 0 || ins->modrm.rm != 6)
 	{
 	  *ins->obufp++ = ins->open_char;
 	  *ins->obufp = '\0';
 	  oappend (ins,
 		   (ins->intel_syntax ? intel_index16
 				      : att_index16)[ins->modrm.rm]);
 	  if (ins->intel_syntax
 	      && (disp || ins->modrm.mod != 0 || ins->modrm.rm == 6))
 	    {
 	      if ((bfd_signed_vma) disp >= 0)
 		{
 		  *ins->obufp++ = '+';
 		  *ins->obufp = '\0';
 		}
 	      else if (ins->modrm.mod != 1)
 		{
 		  *ins->obufp++ = '-';
 		  *ins->obufp = '\0';
 		  disp = - (bfd_signed_vma) disp;
 		}
 
 	      print_displacement (ins, ins->scratchbuf, disp);
 	      oappend (ins, ins->scratchbuf);
 	    }
 
 	  *ins->obufp++ = ins->close_char;
 	  *ins->obufp = '\0';
 	}
       else if (ins->intel_syntax)
 	{
 	  if (!ins->active_seg_prefix)
 	    {
 	      oappend_maybe_intel (ins, att_names_seg[ds_reg - es_reg]);
 	      oappend (ins, ":");
 	    }
 	  print_operand_value (ins, ins->scratchbuf, 1, disp & 0xffff);
 	  oappend (ins, ins->scratchbuf);
 	}
     }
   if (ins->vex.b)
     {
       ins->evex_used |= EVEX_b_used;
 
       /* Broadcast can only ever be valid for memory sources.  */
       if (ins->obufp == ins->op_out[0])
 	ins->vex.no_broadcast = true;
 
       if (!ins->vex.no_broadcast)
 	{
 	  if (bytemode == xh_mode)
 	    {
 	      if (ins->vex.w)
 		oappend (ins, "{bad}");
 	      else
 		{
 		  switch (ins->vex.length)
 		    {
 		    case 128:
 		      oappend (ins, "{1to8}");
 		      break;
 		    case 256:
 		      oappend (ins, "{1to16}");
 		      break;
 		    case 512:
 		      oappend (ins, "{1to32}");
 		      break;
 		    default:
 		      abort ();
 		    }
 		}
 	    }
 	  else if (bytemode == q_mode
 		   || bytemode == ymmq_mode)
 	    ins->vex.no_broadcast = true;
 	  else if (ins->vex.w
 		   || bytemode == evex_half_bcst_xmmqdh_mode
 		   || bytemode == evex_half_bcst_xmmq_mode)
 	    {
 	      switch (ins->vex.length)
 		{
 		case 128:
 		  oappend (ins, "{1to2}");
 		  break;
 		case 256:
 		  oappend (ins, "{1to4}");
 		  break;
 		case 512:
 		  oappend (ins, "{1to8}");
 		  break;
 		default:
 		  abort ();
 		}
 	    }
 	  else if (bytemode == x_mode
 		   || bytemode == evex_half_bcst_xmmqh_mode)
 	    {
 	      switch (ins->vex.length)
 		{
 		case 128:
 		  oappend (ins, "{1to4}");
 		  break;
 		case 256:
 		  oappend (ins, "{1to8}");
 		  break;
 		case 512:
 		  oappend (ins, "{1to16}");
 		  break;
 		default:
 		  abort ();
 		}
 	    }
 	  else
 	    ins->vex.no_broadcast = true;
 	}
       if (ins->vex.no_broadcast)
 	oappend (ins, "{bad}");
     }
 }
@@ -13147,148 +13148,148 @@ static void
 OP_VEX (instr_info *ins, int bytemode, int sizeflag ATTRIBUTE_UNUSED)
 {
   int reg, modrm_reg, sib_index = -1;
   const char *const *names;
 
   if (!ins->need_vex)
     abort ();
 
   reg = ins->vex.register_specifier;
   ins->vex.register_specifier = 0;
   if (ins->address_mode != mode_64bit)
     {
       if (ins->vex.evex && !ins->vex.v)
 	{
 	  oappend (ins, "(bad)");
 	  return;
 	}
 
       reg &= 7;
     }
   else if (ins->vex.evex && !ins->vex.v)
     reg += 16;
 
   switch (bytemode)
     {
     case scalar_mode:
       oappend_maybe_intel (ins, att_names_xmm[reg]);
       return;
 
     case vex_vsib_d_w_dq_mode:
     case vex_vsib_q_w_dq_mode:
       /* This must be the 3rd operand.  */
       if (ins->obufp != ins->op_out[2])
 	abort ();
       if (ins->vex.length == 128
 	  || (bytemode != vex_vsib_d_w_dq_mode
 	      && !ins->vex.w))
 	oappend_maybe_intel (ins, att_names_xmm[reg]);
       else
 	oappend_maybe_intel (ins, att_names_ymm[reg]);
 
       /* All 3 XMM/YMM registers must be distinct.  */
       modrm_reg = ins->modrm.reg;
       if (ins->rex & REX_R)
 	modrm_reg += 8;
 
-      if (ins->modrm.rm == 4)
+      if (ins->has_sib && ins->modrm.rm == 4)
 	{
 	  sib_index = ins->sib.index;
 	  if (ins->rex & REX_X)
 	    sib_index += 8;
 	}
 
       if (reg == modrm_reg || reg == sib_index)
 	strcpy (ins->obufp, "/(bad)");
       if (modrm_reg == sib_index || modrm_reg == reg)
 	strcat (ins->op_out[0], "/(bad)");
       if (sib_index == modrm_reg || sib_index == reg)
 	strcat (ins->op_out[1], "/(bad)");
 
       return;
 
     case tmm_mode:
       /* All 3 TMM registers must be distinct.  */
       if (reg >= 8)
 	oappend (ins, "(bad)");
       else
 	{
 	  /* This must be the 3rd operand.  */
 	  if (ins->obufp != ins->op_out[2])
 	    abort ();
 	  oappend_maybe_intel (ins, att_names_tmm[reg]);
 	  if (reg == ins->modrm.reg || reg == ins->modrm.rm)
 	    strcpy (ins->obufp, "/(bad)");
 	}
 
       if (ins->modrm.reg == ins->modrm.rm || ins->modrm.reg == reg
 	  || ins->modrm.rm == reg)
 	{
 	  if (ins->modrm.reg <= 8
 	      && (ins->modrm.reg == ins->modrm.rm || ins->modrm.reg == reg))
 	    strcat (ins->op_out[0], "/(bad)");
 	  if (ins->modrm.rm <= 8
 	      && (ins->modrm.rm == ins->modrm.reg || ins->modrm.rm == reg))
 	    strcat (ins->op_out[1], "/(bad)");
 	}
 
       return;
     }
 
   switch (ins->vex.length)
     {
     case 128:
       switch (bytemode)
 	{
 	case x_mode:
 	  names = att_names_xmm;
 	  break;
 	case dq_mode:
 	  if (ins->rex & REX_W)
 	    names = att_names64;
 	  else
 	    names = att_names32;
 	  break;
 	case mask_bd_mode:
 	case mask_mode:
 	  if (reg > 0x7)
 	    {
 	      oappend (ins, "(bad)");
 	      return;
 	    }
 	  names = att_names_mask;
 	  break;
 	default:
 	  abort ();
 	  return;
 	}
       break;
     case 256:
       switch (bytemode)
 	{
 	case x_mode:
 	  names = att_names_ymm;
 	  break;
 	case mask_bd_mode:
 	case mask_mode:
 	  if (reg > 0x7)
 	    {
 	      oappend (ins, "(bad)");
 	      return;
 	    }
 	  names = att_names_mask;
 	  break;
 	default:
 	  /* See PR binutils/20893 for a reproducer.  */
 	  oappend (ins, "(bad)");
 	  return;
 	}
       break;
     case 512:
       names = att_names_zmm;
       break;
     default:
       abort ();
       break;
     }
   oappend_maybe_intel (ins, names[reg]);
 }
