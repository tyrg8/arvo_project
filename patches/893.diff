commit 6c401a7bdc4e0f5340203b9885e368cb96986aa1
Author: Caolán McNamara <caolanm@redhat.com>
Date:   Sat Mar 18 12:47:02 2017 +0000

    ofz#893 limit para depth to max legal ppt level
    
    Change-Id: Ie7c287964b126d143a0eeb14be53addc7c34b87f
    Reviewed-on: https://gerrit.libreoffice.org/35402
    Tested-by: Jenkins <ci@libreoffice.org>
    Reviewed-by: Caolán McNamara <caolanm@redhat.com>
    Tested-by: Caolán McNamara <caolanm@redhat.com>

diff --git a/filter/source/msfilter/svdfppt.cxx b/filter/source/msfilter/svdfppt.cxx
index 088b01766a26..dfd8148bf699 100644
--- a/filter/source/msfilter/svdfppt.cxx
+++ b/filter/source/msfilter/svdfppt.cxx
@@ -5824,16 +5824,27 @@ SvxFieldItem* PPTPortionObj::GetTextField()
     return nullptr;
 }
 
+namespace
+{
+    sal_uInt16 sanitizeForMaxPPTLevels(sal_uInt16 nDepth)
+    {
+        if (nDepth >= nMaxPPTLevels)
+        {
+            SAL_WARN("filter.ms", "Para Style Sheet depth " << nDepth << " but " << nMaxPPTLevels - 1 << " is max possible");
+            nDepth = nMaxPPTLevels - 1;
+        }
+        return nDepth;
+    }
+}
+
 PPTParagraphObj::PPTParagraphObj( const PPTStyleSheet& rStyleSheet, TSS_Type nInstance, sal_uInt16 nDepth ) :
     PPTNumberFormatCreator  ( nullptr ),
     mrStyleSheet            ( rStyleSheet ),
     mnInstance              ( nInstance ),
     mbTab                   ( true ),      // style sheets always have to get the right tabulator setting
     mnCurrentObject         ( 0 )
 {
-    if ( nDepth > 4 )
-        nDepth = 4;
-    pParaSet->mnDepth = nDepth;
+    pParaSet->mnDepth = sanitizeForMaxPPTLevels(nDepth);
 }
 
 PPTParagraphObj::PPTParagraphObj( PPTStyleTextPropReader& rPropReader,
@@ -5886,19 +5897,21 @@ void PPTParagraphObj::AppendPortion( PPTPortionObj& rPPTPortion )
 void PPTParagraphObj::UpdateBulletRelSize( sal_uInt32& nBulletRelSize ) const
 {
     if ( nBulletRelSize > 0x7fff )      // a negative value is the absolute bullet height
     {
         sal_uInt16 nFontHeight = 0;
         if (!m_PortionList.empty())
         {
             PPTPortionObj const& rPortion = *m_PortionList.front();
             if (rPortion.mpImplPPTCharPropSet->mnAttrSet & (1 << PPT_CharAttr_FontHeight))
             {
                 nFontHeight = rPortion.mpImplPPTCharPropSet->mnFontHeight;
             }
         }
         // if we do not have a hard attributed fontheight, the fontheight is taken from the style
         if ( !nFontHeight )
-            nFontHeight = mrStyleSheet.mpCharSheet[ mnInstance ]->maCharLevel[ pParaSet->mnDepth ].mnFontHeight;
+        {
+            nFontHeight = mrStyleSheet.mpCharSheet[ mnInstance ]->maCharLevel[sanitizeForMaxPPTLevels(pParaSet->mnDepth)].mnFontHeight;
+        }
         nBulletRelSize = nFontHeight ? ((-((sal_Int16)nBulletRelSize)) * 100 ) / nFontHeight : 100;
     }
 }
@@ -5906,271 +5919,265 @@ void PPTParagraphObj::UpdateBulletRelSize( sal_uInt32& nBulletRelSize ) const
 bool PPTParagraphObj::GetAttrib( sal_uInt32 nAttr, sal_uInt32& rRetValue, TSS_Type nDestinationInstance )
 {
     sal_uInt32  nMask = 1 << nAttr;
     rRetValue = 0;
 
     if ( nAttr > 21 )
     {
         OSL_FAIL( "SJ:PPTParagraphObj::GetAttrib - attribute does not exist" );
         return false;
     }
 
     bool bIsHardAttribute = ( ( pParaSet->mnAttrSet & nMask ) != 0 );
 
-    sal_uInt16 nDepth = pParaSet->mnDepth;
-
-    if (nDepth >= nMaxPPTLevels)
-    {
-        SAL_WARN("filter.ms", "Para Style Sheet depth " << nDepth << " but " << nMaxPPTLevels - 1 << " is max possible");
-        nDepth = nMaxPPTLevels - 1;
-    }
+    sal_uInt16 nDepth = sanitizeForMaxPPTLevels(pParaSet->mnDepth);
 
     if ( bIsHardAttribute )
     {
         if ( nAttr == PPT_ParaAttr_BulletColor )
         {
             bool bHardBulletColor;
             if ( pParaSet->mnAttrSet & ( 1 << PPT_ParaAttr_BuHardColor ) )
                 bHardBulletColor = pParaSet->mpArry[ PPT_ParaAttr_BuHardColor ] != 0;
             else
                 bHardBulletColor = ( mrStyleSheet.mpParaSheet[ mnInstance ]->maParaLevel[nDepth].mnBuFlags
                                         & ( 1 << PPT_ParaAttr_BuHardColor ) ) != 0;
             if ( bHardBulletColor )
                 rRetValue = pParaSet->mnBulletColor;
             else
             {
                 rRetValue = PPT_COLSCHEME_TEXT_UND_ZEILEN;
                 if ((nDestinationInstance != TSS_Type::Unknown) && !m_PortionList.empty())
                 {
                     PPTPortionObj const& rPortion = *m_PortionList.front();
                     if (rPortion.mpImplPPTCharPropSet->mnAttrSet & (1 << PPT_CharAttr_FontColor))
                     {
                         rRetValue = rPortion.mpImplPPTCharPropSet->mnColor;
                     }
                     else
                     {
                         rRetValue = mrStyleSheet.mpCharSheet[ nDestinationInstance ]->maCharLevel[nDepth].mnFontColor;
                     }
                 }
             }
         }
         else if ( nAttr == PPT_ParaAttr_BulletFont )
         {
             bool bHardBuFont;
             if ( pParaSet->mnAttrSet & ( 1 << PPT_ParaAttr_BuHardFont ) )
                 bHardBuFont = pParaSet->mpArry[ PPT_ParaAttr_BuHardFont ] != 0;
             else
                 bHardBuFont = ( mrStyleSheet.mpParaSheet[ mnInstance ]->maParaLevel[nDepth].mnBuFlags
                                         & ( 1 << PPT_ParaAttr_BuHardFont ) ) != 0;
             if ( bHardBuFont )
                 rRetValue = pParaSet->mpArry[ PPT_ParaAttr_BulletFont ];
             else
             {
                 // it is the font used which assigned to the first character of the following text
                 rRetValue = 0;
                 if ((nDestinationInstance != TSS_Type::Unknown) && !m_PortionList.empty())
                 {
                     PPTPortionObj const& rPortion = *m_PortionList.front();
                     if (rPortion.mpImplPPTCharPropSet->mnAttrSet & ( 1 << PPT_CharAttr_Font ) )
                     {
                         rRetValue = rPortion.mpImplPPTCharPropSet->mnFont;
                     }
                     else
                     {
                         rRetValue = mrStyleSheet.mpCharSheet[ nDestinationInstance ]->maCharLevel[nDepth].mnFont;
                     }
                 }
             }
         }
         else
             rRetValue = pParaSet->mpArry[ nAttr ];
     }
     else
     {
         const PPTParaLevel& rParaLevel = mrStyleSheet.mpParaSheet[ mnInstance ]->maParaLevel[nDepth];
 
         PPTParaLevel* pParaLevel = nullptr;
         if ( ( nDestinationInstance == TSS_Type::Unknown )
             || ( nDepth && ( ( mnInstance == TSS_Type::Subtitle ) || ( mnInstance == TSS_Type::TextInShape ) ) ) )
             bIsHardAttribute = true;
         else if ( nDestinationInstance != mnInstance )
             pParaLevel = &mrStyleSheet.mpParaSheet[ nDestinationInstance ]->maParaLevel[nDepth];
         switch ( nAttr )
         {
             case PPT_ParaAttr_BulletOn :
             {
                 rRetValue = rParaLevel.mnBuFlags & ( 1 << PPT_ParaAttr_BulletOn );
                 if ( pParaLevel )
                 {
                     if ( rRetValue != ( (sal_uInt32)pParaLevel->mnBuFlags & ( 1 << PPT_ParaAttr_BulletOn ) ) )
                         bIsHardAttribute = true;
                 }
             }
             break;
             case PPT_ParaAttr_BuHardFont :
             case PPT_ParaAttr_BuHardColor :
             case PPT_ParaAttr_BuHardHeight :
                 OSL_FAIL( "SJ:PPTParagraphObj::GetAttrib - this attribute does not make sense" );
             break;
             case PPT_ParaAttr_BulletChar :
             {
                 rRetValue = rParaLevel.mnBulletChar;
                 if ( pParaLevel && ( rRetValue != pParaLevel->mnBulletChar ) )
                     bIsHardAttribute = true;
             }
             break;
             case PPT_ParaAttr_BulletFont :
             {
                 bool bHardBuFont;
                 if ( pParaSet->mnAttrSet & ( 1 << PPT_ParaAttr_BuHardFont ) )
                     bHardBuFont = pParaSet->mpArry[ PPT_ParaAttr_BuHardFont ] != 0;
                 else
                     bHardBuFont = ( rParaLevel.mnBuFlags & ( 1 << PPT_ParaAttr_BuHardFont ) ) != 0;
                 if ( bHardBuFont )
                 {
                     rRetValue = rParaLevel.mnBulletFont;
                     if ( pParaLevel && ( rRetValue != pParaLevel->mnBulletFont ) )
                         bIsHardAttribute = true;
                 }
                 else
                 {
                     if (!m_PortionList.empty())
                     {
                         PPTPortionObj const& rPortion = *m_PortionList.front();
                         bIsHardAttribute = rPortion.GetAttrib(
                             PPT_CharAttr_Font, rRetValue, nDestinationInstance);
                     }
                     else
                     {
                         rRetValue = mrStyleSheet.mpCharSheet[ mnInstance ]->maCharLevel[nDepth].mnFont;
                         bIsHardAttribute = true;
                     }
                 }
             }
             break;
             case PPT_ParaAttr_BulletHeight :
             {
                 rRetValue = rParaLevel.mnBulletHeight;
                 if ( pParaLevel && ( rRetValue != pParaLevel->mnBulletHeight ) )
                     bIsHardAttribute = true;
             }
             break;
             case PPT_ParaAttr_BulletColor :
             {
                 bool bHardBulletColor;
                 if ( pParaSet->mnAttrSet & ( 1 << PPT_ParaAttr_BuHardColor ) )
                     bHardBulletColor = pParaSet->mpArry[ PPT_ParaAttr_BuHardColor ] != 0;
                 else
                     bHardBulletColor = ( rParaLevel.mnBuFlags & ( 1 << PPT_ParaAttr_BuHardColor ) ) != 0;
                 if ( bHardBulletColor )
                 {
                     rRetValue = rParaLevel.mnBulletColor;
                     if ( pParaLevel && ( rRetValue != pParaLevel->mnBulletColor ) )
                         bIsHardAttribute = true;
                 }
                 else
                 {
                     if (!m_PortionList.empty())
                     {
                         PPTPortionObj const& rPortion = *m_PortionList.front();
                         if (rPortion.mbIsHyperlink )
                         {
                             if( rPortion.mbHardHylinkOrigColor )
                                 rRetValue = rPortion.mnHylinkOrigColor;
                             else
                                 rRetValue = mrStyleSheet.mpCharSheet[ mnInstance ]->maCharLevel[nDepth].mnFontColor;
                             bIsHardAttribute = true;
                         }
                         else
                         {
                             bIsHardAttribute = rPortion.GetAttrib( PPT_CharAttr_FontColor, rRetValue, nDestinationInstance );
                         }
                     }
                     else
                     {
                         rRetValue = mrStyleSheet.mpCharSheet[ mnInstance ]->maCharLevel[nDepth].mnFontColor;
                         bIsHardAttribute = true;
                     }
                 }
             }
             break;
             case PPT_ParaAttr_Adjust :
             {
                 rRetValue = rParaLevel.mnAdjust;
                 if ( pParaLevel && ( rRetValue != pParaLevel->mnAdjust ) )
                     bIsHardAttribute = true;
             }
             break;
             case PPT_ParaAttr_LineFeed :
             {
                 rRetValue = rParaLevel.mnLineFeed;
                 if ( pParaLevel && ( rRetValue != pParaLevel->mnLineFeed ) )
                     bIsHardAttribute = true;
             }
             break;
             case PPT_ParaAttr_UpperDist :
             {
                 rRetValue = rParaLevel.mnUpperDist;
                 if ( pParaLevel && ( rRetValue != pParaLevel->mnUpperDist ) )
                     bIsHardAttribute = true;
             }
             break;
             case PPT_ParaAttr_LowerDist :
             {
                 rRetValue = rParaLevel.mnLowerDist;
                 if ( pParaLevel && ( rRetValue != pParaLevel->mnLowerDist ) )
                     bIsHardAttribute = true;
             }
             break;
             case PPT_ParaAttr_TextOfs :
             {
                 rRetValue = rParaLevel.mnTextOfs;
                 if ( pParaLevel && ( rRetValue != pParaLevel->mnTextOfs ) )
                     bIsHardAttribute = true;
             }
             break;
             case PPT_ParaAttr_BulletOfs :
             {
                 rRetValue = rParaLevel.mnBulletOfs;
                 if ( pParaLevel && ( rRetValue != pParaLevel->mnBulletOfs ) )
                     bIsHardAttribute = true;
             }
             break;
             case PPT_ParaAttr_DefaultTab :
             {
                 rRetValue = rParaLevel.mnDefaultTab;
                 if ( pParaLevel && ( rRetValue != pParaLevel->mnDefaultTab ) )
                     bIsHardAttribute = true;
             }
             break;
             case PPT_ParaAttr_AsianLB_1 :
             {
                 rRetValue = rParaLevel.mnAsianLineBreak & 1;
                 if ( pParaLevel && ( rRetValue != ( (sal_uInt32)pParaLevel->mnAsianLineBreak & 1 ) ) )
                     bIsHardAttribute = true;
             }
             break;
             case PPT_ParaAttr_AsianLB_2 :
             {
                 rRetValue = ( rParaLevel.mnAsianLineBreak >> 1 ) & 1;
                 if ( pParaLevel && ( rRetValue != ( ( (sal_uInt32)pParaLevel->mnAsianLineBreak >> 1 ) & 1 ) ) )
                     bIsHardAttribute = true;
             }
             break;
             case PPT_ParaAttr_AsianLB_3 :
             {
                 rRetValue = ( rParaLevel.mnAsianLineBreak >> 2 ) & 1;
                 if ( pParaLevel && ( rRetValue != ( ( (sal_uInt32)pParaLevel->mnAsianLineBreak >> 2 ) & 1 ) ) )
                     bIsHardAttribute = true;
             }
             break;
             case PPT_ParaAttr_BiDi :
             {
                 rRetValue = rParaLevel.mnBiDi;
                 if ( pParaLevel && ( rRetValue != pParaLevel->mnBiDi ) )
                     bIsHardAttribute = true;
             }
             break;
         }
     }
     return bIsHardAttribute;
 }
@@ -6178,206 +6185,205 @@ bool PPTParagraphObj::GetAttrib( sal_uInt32 nAttr, sal_uInt32& rRetValue, TSS_Ty
 void PPTParagraphObj::ApplyTo( SfxItemSet& rSet,  boost::optional< sal_Int16 >& rStartNumbering, SdrPowerPointImport& rManager, TSS_Type nDestinationInstance, const PPTParagraphObj* /*pPrev*/)
 {
     sal_Int16   nVal2;
     sal_uInt32  nVal, nUpperDist, nLowerDist;
     TSS_Type    nInstance = nDestinationInstance != TSS_Type::Unknown ? nDestinationInstance : mnInstance;
 
     if ( ( nDestinationInstance != TSS_Type::Unknown ) || ( pParaSet->mnDepth <= 1 ) )
     {
         SvxNumBulletItem* pNumBulletItem = mrStyleSheet.mpNumBulletItem[ nInstance ];
         if ( pNumBulletItem )
         {
             SvxNumberFormat aNumberFormat( SVX_NUM_NUMBER_NONE );
             if ( GetNumberFormat( rManager, aNumberFormat, this, nDestinationInstance, rStartNumbering ) )
             {
                 if ( aNumberFormat.GetNumberingType() == SVX_NUM_NUMBER_NONE )
                 {
                     aNumberFormat.SetAbsLSpace( 0 );
                     aNumberFormat.SetFirstLineOffset( 0 );
                     aNumberFormat.SetCharTextDistance( 0 );
                     aNumberFormat.SetFirstLineIndent( 0 );
                     aNumberFormat.SetIndentAt( 0 );
                 }
                 SvxNumBulletItem aNewNumBulletItem( *pNumBulletItem );
                 SvxNumRule* pRule = aNewNumBulletItem.GetNumRule();
                 if ( pRule )
                 {
                     pRule->SetLevel( pParaSet->mnDepth, aNumberFormat );
-                    sal_uInt16 i, n;
-                    for ( i = 0; i < pRule->GetLevelCount(); i++ )
+                    for (sal_uInt16 i = 0; i < pRule->GetLevelCount(); ++i)
                     {
                         if ( i != pParaSet->mnDepth )
                         {
-                            n = i > 4 ? 4 : i;
+                            sal_uInt16 n = sanitizeForMaxPPTLevels(i);
 
                             SvxNumberFormat aNumberFormat2( pRule->GetLevel( i ) );
                             const PPTParaLevel& rParaLevel = mrStyleSheet.mpParaSheet[ nInstance ]->maParaLevel[ n ];
                             const PPTCharLevel& rCharLevel = mrStyleSheet.mpCharSheet[ nInstance ]->maCharLevel[ n ];
                             sal_uInt32 nColor;
                             if ( rParaLevel.mnBuFlags & ( 1 << PPT_ParaAttr_BuHardColor ) )
                                 nColor = rParaLevel.mnBulletColor;
                             else
                                 nColor = rCharLevel.mnFontColor;
                             aNumberFormat2.SetBulletColor( rManager.MSO_TEXT_CLR_ToColor( nColor ) );
                             pRule->SetLevel( i, aNumberFormat2 );
                         }
                     }
                     rSet.Put( aNewNumBulletItem );
                 }
             }
         }
     }
 
     sal_uInt32 nIsBullet2, _nTextOfs, _nBulletOfs;
     GetAttrib(PPT_ParaAttr_BulletOn, nIsBullet2, nDestinationInstance);
     GetAttrib(PPT_ParaAttr_TextOfs, _nTextOfs, nDestinationInstance);
     GetAttrib(PPT_ParaAttr_BulletOfs, _nBulletOfs, nDestinationInstance);
     if ( !nIsBullet2 )
     {
         SvxLRSpaceItem aLRSpaceItem( EE_PARA_LRSPACE );
         sal_uInt16 nAbsLSpace = (sal_uInt16)( ( _nTextOfs * 2540 ) / 576 );
         sal_uInt16 nFirstLineOffset = nAbsLSpace - (sal_uInt16)( ( _nBulletOfs * 2540 ) / 576 );
         aLRSpaceItem.SetLeft( nAbsLSpace );
         aLRSpaceItem.SetTextFirstLineOfstValue( -nFirstLineOffset );
         rSet.Put( aLRSpaceItem );
     }
     else
     {
         SvxLRSpaceItem aLRSpaceItem( EE_PARA_LRSPACE );
         aLRSpaceItem.SetLeft( 0 );
         aLRSpaceItem.SetTextFirstLineOfstValue( 0 );
         rSet.Put( aLRSpaceItem );
     }
     if ( GetAttrib( PPT_ParaAttr_Adjust, nVal, nDestinationInstance ) )
     {
         if ( nVal <= 3 )
         {   // paragraph adjustment
             static SvxAdjust const aAdj[ 4 ] = { SvxAdjust::Left, SvxAdjust::Center, SvxAdjust::Right, SvxAdjust::Block };
             rSet.Put( SvxAdjustItem( aAdj[ nVal ], EE_PARA_JUST ) );
         }
     }
 
     if ( GetAttrib( PPT_ParaAttr_AsianLB_1, nVal, nDestinationInstance ) )
         rSet.Put(SvxForbiddenRuleItem(nVal != 0, EE_PARA_FORBIDDENRULES));
     if ( GetAttrib( PPT_ParaAttr_AsianLB_3, nVal, nDestinationInstance ) )
         rSet.Put(SvxHangingPunctuationItem(nVal != 0, EE_PARA_HANGINGPUNCTUATION));
 
     if ( GetAttrib( PPT_ParaAttr_BiDi, nVal, nDestinationInstance ) )
         rSet.Put( SvxFrameDirectionItem( nVal == 1 ? SvxFrameDirection::Horizontal_RL_TB : SvxFrameDirection::Horizontal_LR_TB, EE_PARA_WRITINGDIR ) );
 
     // LineSpacing
     PPTPortionObj* pPortion = First();
     bool bIsHardAttribute = GetAttrib( PPT_ParaAttr_LineFeed, nVal, nDestinationInstance );
     nVal2 = (sal_Int16)nVal;
     sal_uInt32 nFont = sal_uInt32();
     if ( pPortion && pPortion->GetAttrib( PPT_CharAttr_Font, nFont, nDestinationInstance ) )
         bIsHardAttribute = true;
 
     if ( bIsHardAttribute )
     {
         if ( pPortion && ( nVal2 > 200 ) )
         {
             sal_uInt32 nFontHeight;
             pPortion->GetAttrib( PPT_CharAttr_FontHeight, nFontHeight, nDestinationInstance );
             nVal2 = -(sal_Int16)( ( nFontHeight * nVal * 8 ) / 100 );
         }
         SdrTextFixedCellHeightItem aHeightItem(true);
         aHeightItem.SetWhich(SDRATTR_TEXT_USEFIXEDCELLHEIGHT);
         rSet.Put( aHeightItem );
         SvxLineSpacingItem aItem( 200, EE_PARA_SBL );
         if ( nVal2 <= 0 ) {
             aItem.SetLineHeight( (sal_uInt16)( rManager.ScalePoint( -nVal2 ) / 8 ) );
             aItem.SetLineSpaceRule( SvxLineSpaceRule::Fix );
             aItem.SetInterLineSpaceRule(SvxInterLineSpaceRule::Off);
         } else
         {
             sal_uInt8 nPropLineSpace = (sal_uInt8)nVal2;
             aItem.SetPropLineSpace( nPropLineSpace );
             aItem.SetLineSpaceRule( SvxLineSpaceRule::Auto );
         }
         rSet.Put( aItem );
     }
 
     // Paragraph Spacing
     bIsHardAttribute = ( (sal_uInt32)GetAttrib( PPT_ParaAttr_UpperDist, nUpperDist, nDestinationInstance ) +
         (sal_uInt32)GetAttrib( PPT_ParaAttr_LowerDist, nLowerDist, nDestinationInstance ) ) != 0;
     if ( ( nUpperDist > 0 ) || ( nLowerDist > 0 ) )
     {
         if (!m_PortionList.empty())
         {
             sal_uInt32 nFontHeight = 0;
             m_PortionList.back()->GetAttrib(
                     PPT_CharAttr_FontHeight, nFontHeight, nDestinationInstance);
             if ( ((sal_Int16)nUpperDist) > 0 )
                 nUpperDist = - (sal_Int16)( ( nFontHeight * nUpperDist * 100 ) / 1000 );
             if ( ((sal_Int16)nLowerDist) > 0 )
                 nLowerDist = - (sal_Int16)( ( nFontHeight * nLowerDist * 100 ) / 1000 );
         }
         bIsHardAttribute = true;
     }
     if ( bIsHardAttribute )
     {
         SvxULSpaceItem aULSpaceItem( EE_PARA_ULSPACE );
         nVal2 = (sal_Int16)nUpperDist;
         if ( nVal2 <= 0 )
             aULSpaceItem.SetUpper( (sal_uInt16)(((sal_uInt32) - nVal2 * 2540 ) / ( 72 * 8 ) ) );
         else
         {
             aULSpaceItem.SetUpperValue( 0 );
             aULSpaceItem.SetPropUpper( (sal_uInt16)nUpperDist == 100 ? 101 : (sal_uInt16)nUpperDist );
         }
         nVal2 = (sal_Int16)nLowerDist;
         if ( nVal2 <= 0 )
             aULSpaceItem.SetLower( (sal_uInt16)(((sal_uInt32) - nVal2 * 2540 ) / ( 72 * 8 ) ) );
         else
         {
             aULSpaceItem.SetLowerValue( 0 );
             aULSpaceItem.SetPropLower( (sal_uInt16)nLowerDist == 100 ? 101 : (sal_uInt16)nLowerDist );
         }
         rSet.Put( aULSpaceItem );
     }
 
     if ( mbTab )    // makes it sense to apply tabsettings
     {
         sal_uInt32 i, nDefaultTab, nTab, nTextOfs2 = 0;
         sal_uInt32 nLatestManTab = 0;
         GetAttrib( PPT_ParaAttr_TextOfs, nTextOfs2, nDestinationInstance );
         GetAttrib( PPT_ParaAttr_BulletOfs, nTab, nDestinationInstance );
         GetAttrib( PPT_ParaAttr_BulletOn, i, nDestinationInstance );
         GetAttrib( PPT_ParaAttr_DefaultTab, nDefaultTab, nDestinationInstance );
         SvxTabStopItem aTabItem( 0, 0, SvxTabAdjust::Default, EE_PARA_TABS );
         if ( GetTabCount() )
         {
             //paragraph offset = MIN(first_line_offset, hanging_offset)
             sal_uInt32 nParaOffset = std::min(nTextOfs2, nTab);
             for ( i = 0; i < GetTabCount(); i++ )
             {
                 SvxTabAdjust eTabAdjust;
                 nTab = GetTabOffsetByIndex( (sal_uInt16)i );
                 switch( GetTabStyleByIndex( (sal_uInt16)i ) )
                 {
                     case 1 :    eTabAdjust = SvxTabAdjust::Center; break;
                     case 2 :    eTabAdjust = SvxTabAdjust::Right; break;
                     case 3 :    eTabAdjust = SvxTabAdjust::Decimal; break;
                     default :   eTabAdjust = SvxTabAdjust::Left;
                 }
                 if ( nTab > nParaOffset )//If tab stop greater than paragraph offset
                     aTabItem.Insert( SvxTabStop( ( ( (long( nTab - nTextOfs2 )) * 2540 ) / 576 ), eTabAdjust ) );
             }
             nLatestManTab = nTab;
         }
         if ( nIsBullet2 == 0 )
             aTabItem.Insert( SvxTabStop( (sal_uInt16)0 ) );
         if ( nDefaultTab )
         {
             nTab = ( nTextOfs2 > nLatestManTab ) ? nTextOfs2 : nLatestManTab;
             nTab /= nDefaultTab;
             nTab = nDefaultTab * ( 1 + nTab );
             for ( i = 0; ( i < 20 ) && ( nTab < 0x1b00 ); i++ )
             {
                 aTabItem.Insert( SvxTabStop( (sal_uInt16)( ( ( nTab - nTextOfs2 ) * 2540 ) / 576 ) ) );
                 nTab += nDefaultTab;
             }
         }
         rSet.Put( aTabItem );
     }
 }
