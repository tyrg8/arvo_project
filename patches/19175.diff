commit 239842b821763a2afc62d859a186f673ba09b171
Author: Luca Deri <deri@ntop.org>
Date:   Sun Dec 8 23:47:04 2019 +0100

    Major kerberos rework

diff --git a/example/reader_util.c b/example/reader_util.c
index 2352369e..cf3c8247 100644
--- a/example/reader_util.c
+++ b/example/reader_util.c
@@ -941,113 +941,116 @@ static u_int8_t is_ndpi_proto(struct ndpi_flow_info *flow, u_int16_t id) {
 void process_ndpi_collected_info(struct ndpi_workflow * workflow, struct ndpi_flow_info *flow) {
   if(!flow->ndpi_flow) return;
 
   snprintf(flow->host_server_name, sizeof(flow->host_server_name), "%s",
 	   flow->ndpi_flow->host_server_name);
 
   if(is_ndpi_proto(flow, NDPI_PROTOCOL_DHCP)) {
     snprintf(flow->dhcp_fingerprint, sizeof(flow->dhcp_fingerprint), "%s", flow->ndpi_flow->protos.dhcp.fingerprint);
   } else if(is_ndpi_proto(flow, NDPI_PROTOCOL_BITTORRENT)) {
     u_int i, j, n = 0;
 
     for(i=0, j = 0; j < sizeof(flow->bittorent_hash)-1; i++) {
       sprintf(&flow->bittorent_hash[j], "%02x",
 	      flow->ndpi_flow->protos.bittorrent.hash[i]);
 
       j += 2, n += flow->ndpi_flow->protos.bittorrent.hash[i];
     }
 
     if(n == 0) flow->bittorent_hash[0] = '\0';
   }
   /* MDNS */
   else if(is_ndpi_proto(flow, NDPI_PROTOCOL_MDNS)) {
     snprintf(flow->info, sizeof(flow->info), "%s", flow->ndpi_flow->protos.mdns.answer);
   }
   /* UBNTAC2 */
   else if(is_ndpi_proto(flow, NDPI_PROTOCOL_UBNTAC2)) {
     snprintf(flow->info, sizeof(flow->info), "%s", flow->ndpi_flow->protos.ubntac2.version);
   }
   /* FTP */
   else if((is_ndpi_proto(flow, NDPI_PROTOCOL_FTP_CONTROL))
 	  || /* IMAP */ is_ndpi_proto(flow, NDPI_PROTOCOL_MAIL_IMAP)
 	  || /* POP */  is_ndpi_proto(flow, NDPI_PROTOCOL_MAIL_POP)
 	  || /* SMTP */ is_ndpi_proto(flow, NDPI_PROTOCOL_MAIL_SMTP)) {
     if(flow->ndpi_flow->protos.ftp_imap_pop_smtp.username[0] != '\0')
       snprintf(flow->info, sizeof(flow->info), "User: %s][Pwd: %s%s",
 	       flow->ndpi_flow->protos.ftp_imap_pop_smtp.username,
 	       flow->ndpi_flow->protos.ftp_imap_pop_smtp.password,
 	       flow->ndpi_flow->protos.ftp_imap_pop_smtp.auth_failed ? "][Auth Failed" : "");
   }
   /* KERBEROS */
   else if(is_ndpi_proto(flow, NDPI_PROTOCOL_KERBEROS)) {
     if((flow->ndpi_flow->protos.kerberos.hostname[0] != '\0')
        || (flow->ndpi_flow->protos.kerberos.username[0] != '\0')) {
-      snprintf(flow->info, sizeof(flow->info), "%s%s (%s)",
+      snprintf(flow->info, sizeof(flow->info), "%s%s%s%s",
+	       flow->ndpi_flow->protos.kerberos.domain /* = realm */,
+	       flow->ndpi_flow->protos.kerberos.domain[0] != '\0' ? "\\" : "",
 	       flow->ndpi_flow->protos.kerberos.hostname,
-	       flow->ndpi_flow->protos.kerberos.username,
+	       flow->ndpi_flow->protos.kerberos.username);
+    } else if(flow->ndpi_flow->protos.kerberos.domain[0] != '\0')
+      snprintf(flow->info, sizeof(flow->info), "%s",
 	       flow->ndpi_flow->protos.kerberos.domain);
-    }
   }
   /* HTTP */
   else if((flow->detected_protocol.master_protocol == NDPI_PROTOCOL_HTTP)
 	  || is_ndpi_proto(flow, NDPI_PROTOCOL_HTTP)) {
     if(flow->ndpi_flow->http.url != NULL) {
       snprintf(flow->http.url, sizeof(flow->http.url), "%s", flow->ndpi_flow->http.url);
       flow->http.response_status_code = flow->ndpi_flow->http.response_status_code;
       snprintf(flow->http.content_type, sizeof(flow->http.content_type), "%s", flow->ndpi_flow->http.content_type ? flow->ndpi_flow->http.content_type : "");
       snprintf(flow->http.user_agent, sizeof(flow->http.user_agent), "%s", flow->ndpi_flow->http.user_agent ? flow->ndpi_flow->http.user_agent : "");
     }
   } else if(is_ndpi_proto(flow, NDPI_PROTOCOL_TELNET)) {
     snprintf(flow->telnet.username, sizeof(flow->telnet.username), "%s", flow->ndpi_flow->protos.telnet.username);
     snprintf(flow->telnet.password, sizeof(flow->telnet.password), "%s", flow->ndpi_flow->protos.telnet.password);
   } else if(is_ndpi_proto(flow, NDPI_PROTOCOL_SSH)) {
     snprintf(flow->ssh_tls.client_info, sizeof(flow->ssh_tls.client_info), "%s",
 	     flow->ndpi_flow->protos.ssh.client_signature);
     snprintf(flow->ssh_tls.server_info, sizeof(flow->ssh_tls.server_info), "%s",
 	     flow->ndpi_flow->protos.ssh.server_signature);
     snprintf(flow->ssh_tls.client_hassh, sizeof(flow->ssh_tls.client_hassh), "%s",
 	     flow->ndpi_flow->protos.ssh.hassh_client);
     snprintf(flow->ssh_tls.server_hassh, sizeof(flow->ssh_tls.server_hassh), "%s",
 	     flow->ndpi_flow->protos.ssh.hassh_server);
   }
   /* TLS */
   else if((is_ndpi_proto(flow, NDPI_PROTOCOL_TLS))
 	  || (flow->detected_protocol.master_protocol == NDPI_PROTOCOL_TLS)
 	  || (flow->ndpi_flow->protos.stun_ssl.ssl.ja3_client[0] != '\0')
     ) {
     flow->ssh_tls.ssl_version = flow->ndpi_flow->protos.stun_ssl.ssl.ssl_version;
     snprintf(flow->ssh_tls.client_info, sizeof(flow->ssh_tls.client_info), "%s",
 	     flow->ndpi_flow->protos.stun_ssl.ssl.client_certificate);
     snprintf(flow->ssh_tls.server_info, sizeof(flow->ssh_tls.server_info), "%s",
 	     flow->ndpi_flow->protos.stun_ssl.ssl.server_certificate);
     snprintf(flow->ssh_tls.server_organization, sizeof(flow->ssh_tls.server_organization), "%s",
 	     flow->ndpi_flow->protos.stun_ssl.ssl.server_organization);
     flow->ssh_tls.notBefore = flow->ndpi_flow->protos.stun_ssl.ssl.notBefore;
     flow->ssh_tls.notAfter = flow->ndpi_flow->protos.stun_ssl.ssl.notAfter;
     snprintf(flow->ssh_tls.ja3_client, sizeof(flow->ssh_tls.ja3_client), "%s",
 	     flow->ndpi_flow->protos.stun_ssl.ssl.ja3_client);
     snprintf(flow->ssh_tls.ja3_server, sizeof(flow->ssh_tls.ja3_server), "%s",
 	     flow->ndpi_flow->protos.stun_ssl.ssl.ja3_server);
     flow->ssh_tls.server_unsafe_cipher = flow->ndpi_flow->protos.stun_ssl.ssl.server_unsafe_cipher;
     flow->ssh_tls.server_cipher = flow->ndpi_flow->protos.stun_ssl.ssl.server_cipher;
     memcpy(flow->ssh_tls.sha1_cert_fingerprint,
 	   flow->ndpi_flow->l4.tcp.tls_sha1_certificate_fingerprint, 20);
   }  
 
   if(flow->detection_completed && (!flow->check_extra_packets)) {
     if(is_ndpi_proto(flow, NDPI_PROTOCOL_UNKNOWN)) {
       if(workflow->__flow_giveup_callback != NULL)
 	workflow->__flow_giveup_callback(workflow, flow, workflow->__flow_giveup_udata);
     } else {
       if(workflow->__flow_detected_callback != NULL)
 	workflow->__flow_detected_callback(workflow, flow, workflow->__flow_detected_udata);
     }
 
     ndpi_free_flow_info_half(flow);
   }
 }
 
 /* ****************************************************** */
 
 /**
  * @brief Clear entropy stats if it meets prereq.
  */
@@ -1068,211 +1071,211 @@ ndpi_clear_entropy_stats(struct ndpi_flow_info *flow) {
    @Note: ipsize = header->len - ip_offset ; rawsize = header->len
 */
 static struct ndpi_proto packet_processing(struct ndpi_workflow * workflow,
 					   const u_int64_t time,
 					   u_int16_t vlan_id,
 					   ndpi_packet_tunnel tunnel_type,
 					   const struct ndpi_iphdr *iph,
 					   struct ndpi_ipv6hdr *iph6,
 					   u_int16_t ip_offset,
 					   u_int16_t ipsize, u_int16_t rawsize,
 					   const struct pcap_pkthdr *header,
 					   const u_char *packet,
                                            struct timeval when) {
   struct ndpi_id_struct *src, *dst;
   struct ndpi_flow_info *flow = NULL;
   struct ndpi_flow_struct *ndpi_flow = NULL;
   u_int8_t proto;
   struct ndpi_tcphdr *tcph = NULL;
   struct ndpi_udphdr *udph = NULL;
   u_int16_t sport, dport, payload_len = 0;
   u_int8_t *payload;
   u_int8_t src_to_dst_direction = 1;
   u_int8_t begin_or_end_tcp = 0;
   struct ndpi_proto nproto = { NDPI_PROTOCOL_UNKNOWN, NDPI_PROTOCOL_UNKNOWN };
 
   if(iph)
     flow = get_ndpi_flow_info(workflow, IPVERSION, vlan_id,
 			      tunnel_type, iph, NULL,
 			      ip_offset, ipsize,
 			      ntohs(iph->tot_len) - (iph->ihl * 4),
 			      &tcph, &udph, &sport, &dport,
 			      &src, &dst, &proto,
 			      &payload, &payload_len, &src_to_dst_direction, when);
   else
     flow = get_ndpi_flow_info6(workflow, vlan_id,
 			       tunnel_type, iph6, ip_offset,
 			       &tcph, &udph, &sport, &dport,
 			       &src, &dst, &proto,
 			       &payload, &payload_len, &src_to_dst_direction, when);
 
   if(flow != NULL) {
     struct timeval tdiff;
 
     workflow->stats.ip_packet_count++;
     workflow->stats.total_wire_bytes += rawsize + 24 /* CRC etc */,
       workflow->stats.total_ip_bytes += rawsize;
     ndpi_flow = flow->ndpi_flow;
 
     if((tcph != NULL) && (tcph->fin || tcph->rst || tcph->syn))
       begin_or_end_tcp = 1;
 
     if(flow->entropy.flow_last_pkt_time.tv_sec) {
       ndpi_timer_sub(&when, &flow->entropy.flow_last_pkt_time, &tdiff);
     
       if(flow->iat_flow) {
 	u_int32_t ms = ndpi_timeval_to_milliseconds(tdiff);
 
 	if(ms > 0)
 	  ndpi_data_add_value(flow->iat_flow, ms);
       }
     }
     memcpy(&flow->entropy.flow_last_pkt_time, &when, sizeof(when));
 
     if(src_to_dst_direction) {
       if(flow->entropy.src2dst_last_pkt_time.tv_sec) {
 	ndpi_timer_sub(&when, &flow->entropy.src2dst_last_pkt_time, &tdiff);
 
 	if(flow->iat_c_to_s) {
 	  u_int32_t ms = ndpi_timeval_to_milliseconds(tdiff);
 
 	  ndpi_data_add_value(flow->iat_c_to_s, ms);
 	}
       }
 
       ndpi_data_add_value(flow->pktlen_c_to_s, rawsize);
       flow->src2dst_packets++, flow->src2dst_bytes += rawsize, flow->src2dst_goodput_bytes += payload_len;
       memcpy(&flow->entropy.src2dst_last_pkt_time, &when, sizeof(when));
     } else {
       if(flow->entropy.dst2src_last_pkt_time.tv_sec && (!begin_or_end_tcp)) {
 	ndpi_timer_sub(&when, &flow->entropy.dst2src_last_pkt_time, &tdiff);
 
 	if(flow->iat_s_to_c) {
 	  u_int32_t ms = ndpi_timeval_to_milliseconds(tdiff);
 
 	  ndpi_data_add_value(flow->iat_s_to_c, ms);
 	}
       }
 
       ndpi_data_add_value(flow->pktlen_s_to_c, rawsize);
       flow->dst2src_packets++, flow->dst2src_bytes += rawsize, flow->dst2src_goodput_bytes += payload_len;
       memcpy(&flow->entropy.dst2src_last_pkt_time, &when, sizeof(when));
     }
 
     if(enable_payload_analyzer && (payload_len > 0))
       ndpi_payload_analyzer(flow, src_to_dst_direction,
 			    payload, payload_len,
 			    workflow->stats.ip_packet_count);
 
     if(enable_joy_stats) {
       /* Update BD, distribution and mean. */
       ndpi_flow_update_byte_count(flow, payload, payload_len, src_to_dst_direction);
       ndpi_flow_update_byte_dist_mean_var(flow, payload, payload_len, src_to_dst_direction);
       /* Update SPLT scores for first 32 packets. */
       if((flow->entropy.src2dst_pkt_count+flow->entropy.dst2src_pkt_count) <= max_num_packets_per_flow) {
         if(flow->bidirectional)
           flow->entropy.score = ndpi_classify(flow->entropy.src2dst_pkt_len, flow->entropy.src2dst_pkt_time,
-				     flow->entropy.dst2src_pkt_len, flow->entropy.dst2src_pkt_time,
-				     flow->entropy.src2dst_start, flow->entropy.dst2src_start,
-				     max_num_packets_per_flow, flow->src_port, flow->dst_port,
-				     flow->src2dst_packets, flow->dst2src_packets,
-				     flow->entropy.src2dst_opackets, flow->entropy.dst2src_opackets,
-				     flow->entropy.src2dst_l4_bytes, flow->entropy.dst2src_l4_bytes, 1,
-				     flow->entropy.src2dst_byte_count, flow->entropy.dst2src_byte_count);
-       else
-         flow->entropy.score = ndpi_classify(flow->entropy.src2dst_pkt_len, flow->entropy.src2dst_pkt_time,
-				     NULL, NULL, flow->entropy.src2dst_start, flow->entropy.src2dst_start,
-				     max_num_packets_per_flow, flow->src_port, flow->dst_port,
-				     flow->src2dst_packets, 0,
-				     flow->entropy.src2dst_opackets, 0,
-				     flow->entropy.src2dst_l4_bytes, 0, 1,
-				     flow->entropy.src2dst_byte_count, NULL);
+					      flow->entropy.dst2src_pkt_len, flow->entropy.dst2src_pkt_time,
+					      flow->entropy.src2dst_start, flow->entropy.dst2src_start,
+					      max_num_packets_per_flow, flow->src_port, flow->dst_port,
+					      flow->src2dst_packets, flow->dst2src_packets,
+					      flow->entropy.src2dst_opackets, flow->entropy.dst2src_opackets,
+					      flow->entropy.src2dst_l4_bytes, flow->entropy.dst2src_l4_bytes, 1,
+					      flow->entropy.src2dst_byte_count, flow->entropy.dst2src_byte_count);
+	else
+	  flow->entropy.score = ndpi_classify(flow->entropy.src2dst_pkt_len, flow->entropy.src2dst_pkt_time,
+					      NULL, NULL, flow->entropy.src2dst_start, flow->entropy.src2dst_start,
+					      max_num_packets_per_flow, flow->src_port, flow->dst_port,
+					      flow->src2dst_packets, 0,
+					      flow->entropy.src2dst_opackets, 0,
+					      flow->entropy.src2dst_l4_bytes, 0, 1,
+					      flow->entropy.src2dst_byte_count, NULL);
       }
     }
 
     if(flow->first_seen == 0)
       flow->first_seen = time;
 
     flow->last_seen = time;
 
     /* Copy packets entropy if num packets count == 10 */
     ndpi_clear_entropy_stats(flow);
 
     if(!flow->has_human_readeable_strings) {
       u_int8_t skip = 0;
 
       if((proto == IPPROTO_TCP)
 	 && (
 	   is_ndpi_proto(flow, NDPI_PROTOCOL_TLS)
 	   || (flow->detected_protocol.master_protocol == NDPI_PROTOCOL_TLS)
 	   || is_ndpi_proto(flow, NDPI_PROTOCOL_SSH)
 	   || (flow->detected_protocol.master_protocol == NDPI_PROTOCOL_SSH))
 	) {
 	if((flow->src2dst_packets+flow->dst2src_packets) < 10 /* MIN_NUM_ENCRYPT_SKIP_PACKETS */)
 	  skip = 1;
       }
 
       if(!skip) {
 	if(ndpi_has_human_readeable_string(workflow->ndpi_struct, (char*)packet, header->caplen,
 					   human_readeable_string_len,
 					   flow->human_readeable_string_buffer,
 					   sizeof(flow->human_readeable_string_buffer)) == 1)
 	  flow->has_human_readeable_strings = 1;
       }
     } else {
       if((proto == IPPROTO_TCP)
 	 && (
 	   is_ndpi_proto(flow, NDPI_PROTOCOL_TLS)
 	   || (flow->detected_protocol.master_protocol == NDPI_PROTOCOL_TLS)
 	   || is_ndpi_proto(flow, NDPI_PROTOCOL_SSH)
 	   || (flow->detected_protocol.master_protocol == NDPI_PROTOCOL_SSH))
 	 )
 	flow->has_human_readeable_strings = 0;
     }
   } else { // flow is NULL
     workflow->stats.total_discarded_bytes++;
     return(nproto);
   }
 
   if(!flow->detection_completed) {
     u_int enough_packets =
       (((proto == IPPROTO_UDP) && ((flow->src2dst_packets + flow->dst2src_packets) > max_num_udp_dissected_pkts))
        || ((proto == IPPROTO_TCP) && ((flow->src2dst_packets + flow->dst2src_packets) > max_num_tcp_dissected_pkts))) ? 1 : 0;
     
 #if 0
     printf("%s()\n", __FUNCTION__);  
 #endif
   
     flow->detected_protocol = ndpi_detection_process_packet(workflow->ndpi_struct, ndpi_flow,
 							    iph ? (uint8_t *)iph : (uint8_t *)iph6,
 							    ipsize, time, src, dst);
 
     if(enough_packets || (flow->detected_protocol.app_protocol != NDPI_PROTOCOL_UNKNOWN)) {
       if((!enough_packets)
 	 && ndpi_extra_dissection_possible(workflow->ndpi_struct, ndpi_flow))
 	; /* Wait for certificate fingerprint */
       else {
 	/* New protocol detected or give up */
 	flow->detection_completed = 1;
 
 #if 0
 	/* Check if we should keep checking extra packets */
 	if(ndpi_flow && ndpi_flow->check_extra_packets)
 	  flow->check_extra_packets = 1;
 #endif
 	
 	if(flow->detected_protocol.app_protocol == NDPI_PROTOCOL_UNKNOWN) {
 	  u_int8_t proto_guessed;
 	  
 	  flow->detected_protocol = ndpi_detection_giveup(workflow->ndpi_struct, flow->ndpi_flow,
 							  enable_protocol_guess, &proto_guessed);
 	}
 	
 	process_ndpi_collected_info(workflow, flow);
       }
     }
   }
 
   return(flow->detected_protocol);
 }
 
 /* ****************************************************** */
diff --git a/src/include/ndpi_typedefs.h b/src/include/ndpi_typedefs.h
index 82a45046..b8c3b40b 100644
--- a/src/include/ndpi_typedefs.h
+++ b/src/include/ndpi_typedefs.h
@@ -1136,230 +1136,231 @@ typedef enum {
 struct ndpi_flow_struct {
   u_int16_t detected_protocol_stack[NDPI_PROTOCOL_SIZE];
 #ifndef WIN32
   __attribute__ ((__packed__))
 #endif
   u_int16_t protocol_stack_info;
 
   /* init parameter, internal used to set up timestamp,... */
   u_int16_t guessed_protocol_id, guessed_host_protocol_id, guessed_category, guessed_header_category;
   u_int8_t l4_proto, protocol_id_already_guessed:1, host_already_guessed:1,
     init_finished:1, setup_packet_direction:1, packet_direction:1, check_extra_packets:1;
 
   /*
     if ndpi_struct->direction_detect_disable == 1
     tcp sequence number connection tracking
   */
   u_int32_t next_tcp_seq_nr[2];
 
   u_int8_t max_extra_packets_to_check;
   u_int8_t num_extra_packets_checked;
   u_int8_t num_processed_pkts; /* <= WARNING it can wrap but we do expect people to giveup earlier */
 
   int (*extra_packets_func) (struct ndpi_detection_module_struct *, struct ndpi_flow_struct *flow);
 
   /*
     the tcp / udp / other l4 value union
     used to reduce the number of bytes for tcp or udp protocol states
   */
   union {
     struct ndpi_flow_tcp_struct tcp;
     struct ndpi_flow_udp_struct udp;
   } l4;
 
   /*
     Pointer to src or dst that identifies the
     server of this connection
   */
   struct ndpi_id_struct *server_id;
   /* HTTP host or DNS query */
   u_char host_server_name[256];
 
   /*
     This structure below will not not stay inside the protos
     structure below as HTTP is used by many subprotocols
     such as FaceBook, Google... so it is hard to know
     when to use it or not. Thus we leave it outside for the
     time being.
   */
   struct {
     ndpi_http_method method;
     char *url, *content_type, *user_agent;
     u_int8_t num_request_headers, num_response_headers;
     u_int8_t request_version; /* 0=1.0 and 1=1.1. Create an enum for this? */
     u_int16_t response_status_code; /* 200, 404, etc. */
   } http;
 
   union {
     /* the only fields useful for nDPI and ntopng */
     struct {
       u_int8_t num_queries, num_answers, reply_code, is_query;
       u_int16_t query_type, query_class, rsp_type;
       ndpi_ip_addr_t rsp_addr; /* The first address in a DNS response packet */
     } dns;
 
     struct {
       u_int8_t request_code;
       u_int8_t version;
     } ntp;
 
     struct {
-      
-      char hostname[24], domain[24], username[24];
+      char *pktbuf;
+      u_int16_t pktbuf_maxlen, pktbuf_currlen;
+      char hostname[48], domain[48], username[48];
     } kerberos;
 
     struct {
       struct {
 	u_int16_t ssl_version;
 	char client_certificate[64], server_certificate[64], server_organization[64];
 	u_int32_t notBefore, notAfter;
 	char ja3_client[33], ja3_server[33];
 	u_int16_t server_cipher;
 	ndpi_cipher_weakness server_unsafe_cipher;
       } ssl;
 
       struct {
 	u_int8_t num_udp_pkts, num_processed_pkts, num_binding_requests;
       } stun;
 
       /* We can have STUN over SSL/TLS thus they need to live together */
     } stun_ssl;
 
     struct {
       char client_signature[48], server_signature[48];
       char hassh_client[33], hassh_server[33];
     } ssh;
 
     struct {
       u_int8_t last_one_byte_pkt, last_byte;
     } imo;
     
     struct {
       u_int8_t username_detected:1, username_found:1,
 	password_detected:1, password_found:1,
 	skip_next:1, _pad:3;
       u_int8_t character_id;
       char username[32], password[32];
     } telnet;
     
     struct {
       char answer[96];
     } mdns;
 
     struct {
       char version[32];
     } ubntac2;
 
     struct {
       /* Via HTTP User-Agent */
       u_char detected_os[32];
       /* Via HTTP X-Forwarded-For */
       u_char nat_ip[24];
     } http;
 
     struct {
       u_int8_t auth_found:1, auth_failed:1, _pad:5;
       char username[16], password[16];
     } ftp_imap_pop_smtp;
   
     struct {
       /* Bittorrent hash */
       u_char hash[20];
     } bittorrent;
 
     struct {
       char fingerprint[48];
       char class_ident[48];
     } dhcp;
   } protos;
 
   /*** ALL protocol specific 64 bit variables here ***/
 
   /* protocols which have marked a connection as this connection cannot be protocol XXX, multiple u_int64_t */
   NDPI_PROTOCOL_BITMASK excluded_protocol_bitmask;
 
   ndpi_protocol_category_t category;
 
   /* NDPI_PROTOCOL_REDIS */
   u_int8_t redis_s2d_first_char, redis_d2s_first_char;
 
   u_int16_t packet_counter;		      // can be 0 - 65000
   u_int16_t packet_direction_counter[2];
   u_int16_t byte_counter[2];
   /* NDPI_PROTOCOL_BITTORRENT */
   u_int8_t bittorrent_stage;		      // can be 0 - 255
 
   /* NDPI_PROTOCOL_DIRECTCONNECT */
   u_int8_t directconnect_stage:2;	      // 0 - 1
 
   /* NDPI_PROTOCOL_YAHOO */
   u_int8_t sip_yahoo_voice:1;
 
   /* NDPI_PROTOCOL_HTTP */
   u_int8_t http_detected:1;
 
   /* NDPI_PROTOCOL_RTSP */
   u_int8_t rtsprdt_stage:2, rtsp_control_flow:1;
 
   /* NDPI_PROTOCOL_YAHOO */
   u_int8_t yahoo_detection_finished:2;
 
   /* NDPI_PROTOCOL_ZATTOO */
   u_int8_t zattoo_stage:3;
 
   /* NDPI_PROTOCOL_QQ */
   u_int8_t qq_stage:3;
 
   /* NDPI_PROTOCOL_THUNDER */
   u_int8_t thunder_stage:2;		        // 0 - 3
 
   /* NDPI_PROTOCOL_OSCAR */
   u_int8_t oscar_ssl_voice_stage:3, oscar_video_voice:1;
 
   /* NDPI_PROTOCOL_FLORENSIA */
   u_int8_t florensia_stage:1;
 
   /* NDPI_PROTOCOL_SOCKS */
   u_int8_t socks5_stage:2, socks4_stage:2;      // 0 - 3
 
   /* NDPI_PROTOCOL_EDONKEY */
   u_int8_t edonkey_stage:2;	                // 0 - 3
 
   /* NDPI_PROTOCOL_FTP_CONTROL */
   u_int8_t ftp_control_stage:2;
 
   /* NDPI_PROTOCOL_RTMP */
   u_int8_t rtmp_stage:2;
 
   /* NDPI_PROTOCOL_PANDO */
   u_int8_t pando_stage:3;
 
   /* NDPI_PROTOCOL_STEAM */
   u_int16_t steam_stage:3, steam_stage1:3, steam_stage2:2, steam_stage3:2;
 
   /* NDPI_PROTOCOL_PPLIVE */
   u_int8_t pplive_stage1:3, pplive_stage2:2, pplive_stage3:2;
 
   /* NDPI_PROTOCOL_STARCRAFT */
   u_int8_t starcraft_udp_stage : 3;	// 0-7
 
   /* NDPI_PROTOCOL_OPENVPN */
   u_int8_t ovpn_session_id[8];
   u_int8_t ovpn_counter;
 
   /* NDPI_PROTOCOL_TINC */
   u_int8_t tinc_state;
   struct tinc_cache_entry tinc_cache_entry;
 
   /* NDPI_PROTOCOL_CSGO */
   u_int8_t csgo_strid[18],csgo_state,csgo_s2;
   u_int32_t csgo_id2;
 
   /* NDPI_PROTOCOL_1KXUN || NDPI_PROTOCOL_IQIYI */
   u_int16_t kxun_counter, iqiyi_counter;
 
   /* internal structures to save functions calls */
   struct ndpi_packet_struct packet;
   struct ndpi_flow_struct *flow;
   struct ndpi_id_struct *src;
   struct ndpi_id_struct *dst;
 };
diff --git a/src/lib/ndpi_main.c b/src/lib/ndpi_main.c
index 40bf9ae2..a2a7e593 100644
--- a/src/lib/ndpi_main.c
+++ b/src/lib/ndpi_main.c
@@ -6372,16 +6372,17 @@ int ndpi_match_bigram(struct ndpi_detection_module_struct *ndpi_str,
 void ndpi_free_flow(struct ndpi_flow_struct *flow) {
   if(flow) {
   if(flow->http.url)            ndpi_free(flow->http.url);
     if(flow->http.content_type) ndpi_free(flow->http.content_type);
     if(flow->http.user_agent)   ndpi_free(flow->http.user_agent);
-
+    if(flow->protos.kerberos.pktbuf) ndpi_free(flow->protos.kerberos.pktbuf);
+  
     if(flow->l4_proto == IPPROTO_TCP) {
       if(flow->l4.tcp.tls_srv_cert_fingerprint_ctx)
 	ndpi_free(flow->l4.tcp.tls_srv_cert_fingerprint_ctx);
     }
 
     ndpi_free(flow);
   }
 }
 
 /* ****************************************************** */
diff --git a/src/lib/protocols/kerberos.c b/src/lib/protocols/kerberos.c
index 53399560..ae33d525 100644
--- a/src/lib/protocols/kerberos.c
+++ b/src/lib/protocols/kerberos.c
@@ -1,34 +1,34 @@
 /*
  * kerberos.c
  *
  * Copyright (C) 2011-19 - ntop.org
  * Copyright (C) 2009-2011 by ipoque GmbH
  *
  * This file is part of nDPI, an open source deep packet inspection
  * library based on the OpenDPI and PACE technology by ipoque GmbH
  *
  * nDPI is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * nDPI is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.
  *
  * You should have received a copy of the GNU Lesser General Public License
  * along with nDPI.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
 
 #include "ndpi_protocol_ids.h"
 
 #define NDPI_CURRENT_PROTO NDPI_PROTOCOL_KERBEROS
 
 #include "ndpi_api.h"
 
-/* #define KERBEROS_DEBUG 1 */
+//#define KERBEROS_DEBUG 1
 
 static void ndpi_int_kerberos_add_connection(struct ndpi_detection_module_struct *ndpi_struct,
 					     struct ndpi_flow_struct *flow) {
@@ -41,177 +41,351 @@ static void ndpi_int_kerberos_add_connection(struct ndpi_detection_module_struct
 void ndpi_search_kerberos(struct ndpi_detection_module_struct *ndpi_struct,
 			  struct ndpi_flow_struct *flow) {
   struct ndpi_packet_struct *packet = &flow->packet;
+#ifdef KERBEROS_DEBUG
+  u_int16_t sport = packet->tcp ? ntohs(packet->tcp->source) : ntohs(packet->udp->source);
+  u_int16_t dport = packet->tcp ? ntohs(packet->tcp->dest) : ntohs(packet->udp->dest);
+#endif
 
   NDPI_LOG_DBG(ndpi_struct, "search KERBEROS\n");
 
+#ifdef KERBEROS_DEBUG
+  printf("\n[Kerberos] Process packet [len: %u]\n", packet->payload_packet_len);
+#endif
+    
+  if(flow->protos.kerberos.pktbuf != NULL) {
+    u_int missing = flow->protos.kerberos.pktbuf_maxlen - flow->protos.kerberos.pktbuf_currlen;
+
+    if(packet->payload_packet_len <= missing) {
+      memcpy(&flow->protos.kerberos.pktbuf[flow->protos.kerberos.pktbuf_currlen], packet->payload, packet->payload_packet_len);
+      flow->protos.kerberos.pktbuf_currlen += packet->payload_packet_len;
+
+      if(flow->protos.kerberos.pktbuf_currlen == flow->protos.kerberos.pktbuf_maxlen) {
+	packet->payload = (u_int8_t *)flow->protos.kerberos.pktbuf;
+	packet->payload_packet_len = flow->protos.kerberos.pktbuf_currlen;
+#ifdef KERBEROS_DEBUG
+	printf("[Kerberos] Packet is now full: processing\n");
+#endif
+      } else {
+#ifdef KERBEROS_DEBUG
+	printf("[Kerberos] Missing %u bytes: skipping\n",
+	       flow->protos.kerberos.pktbuf_maxlen - flow->protos.kerberos.pktbuf_currlen);
+#endif
+
+	return;
+      }
+    }
+  }
+
   /* I have observed 0a,0c,0d,0e at packet->payload[19/21], maybe there are other possibilities */
   if(packet->payload_packet_len >= 4) {
-    u_int32_t kerberos_len = ntohl(get_u_int32_t(packet->payload, 0));
-    u_int32_t expected_len = packet->payload_packet_len - 4;
+    u_int32_t kerberos_len, expected_len;
+    u_int16_t base_offset = 0;
+
+    if(packet->tcp) {
+      kerberos_len = ntohl(get_u_int32_t(packet->payload, 0)),
+	expected_len = packet->payload_packet_len - 4;
+      base_offset = 4;
+    } else
+      base_offset = 0, kerberos_len = expected_len = packet->payload_packet_len;
 
-    if(kerberos_len < 1514) {
+#ifdef KERBEROS_DEBUG
+    printf("[Kerberos] [Kerberos len: %u][expected_len: %u]\n", kerberos_len, expected_len);
+#endif
+
+    if(kerberos_len < 12000) {
       /*
 	Kerberos packets might be too long for a TCP packet
 	so it could be split across two packets. Instead of
 	rebuilding the stream we use a heuristic approach
       */
-      if(kerberos_len >= expected_len) {
+      if(kerberos_len > expected_len) {
+	if(packet->tcp) {
+	  flow->protos.kerberos.pktbuf = (char*)ndpi_malloc(kerberos_len+4);
+	  if(flow->protos.kerberos.pktbuf != NULL) {
+	    flow->protos.kerberos.pktbuf_maxlen = kerberos_len+4;
+	    memcpy(flow->protos.kerberos.pktbuf, packet->payload, packet->payload_packet_len);
+	    flow->protos.kerberos.pktbuf_currlen = packet->payload_packet_len;
+	  }
+	}
+	
+	return;
+      } else if(kerberos_len == expected_len) {
 	if(packet->payload_packet_len > 128) {
-	  u_int16_t koffset;
+	  u_int16_t koffset, i;
 
-	  if(packet->payload[14] == 0x05) /* PVNO */
-	    koffset = 19;
-	  else
-	    koffset = 21;
+	  for(i=8; i<16; i++)
+	    if((packet->payload[base_offset+i] == 0x03)
+	       && (packet->payload[base_offset+i+1] == 0x02)
+	       && (packet->payload[base_offset+i+2] == 0x01)
+	       && (packet->payload[base_offset+i+3] != 0x05)
+	       )
+	      break;
+
+	  koffset = base_offset + i + 3;
 
-	  if((packet->payload[koffset] == 0x0a || packet->payload[koffset] == 0x0c || packet->payload[koffset] == 0x0d || packet->payload[koffset] == 0x0e)) {
 #ifdef KERBEROS_DEBUG
-	    printf("[Kerberos] Packet found\n");
+	  printf("[Kerberos] [msg-type: 0x%02X/%u][koffset: %u]\n",
+		 packet->payload[koffset], packet->payload[koffset], koffset);
+#endif
+
+	  if(((packet->payload[koffset] == 0x0A)
+	      || (packet->payload[koffset] == 0x0C)
+	      || (packet->payload[koffset] == 0x0D)
+	      || (packet->payload[koffset] == 0x0E))) {
+	    u_int16_t koffsetp, body_offset, pad_len;
+	    u_int8_t msg_type = packet->payload[koffset];
+
+#ifdef KERBEROS_DEBUG
+	    printf("[Kerberos] Packet found 0x%02X/%u\n", msg_type, msg_type);
+#endif
+	    if(msg_type != 0x0d) /* TGS-REP */ {
+	      /* Process only on requests */
+	      if(packet->payload[koffset+1] == 0xA3) {
+		if(packet->payload[koffset+3] == 0x30)
+		  pad_len = packet->payload[koffset+4];
+		else {
+		  /* Long pad */
+		  pad_len = packet->payload[koffset+2];
+		  for(i=3; i<10; i++) if(packet->payload[koffset+i] == pad_len) break;
+
+		  pad_len = (packet->payload[koffset+i+1] << 8) + packet->payload[koffset+i+2];
+		  koffset += i-2;
+		}
+	      } else
+		pad_len = 0;
+
+#ifdef KERBEROS_DEBUG
+	      printf("pad_len=0x%02X/%u\n", pad_len, pad_len);
+#endif
+
+	      if(pad_len > 0) {
+		koffsetp = koffset + 2;
+		for(i=0; i<4; i++) if(packet->payload[koffsetp] != 0x30) koffsetp++; /* ASN.1 */
+#ifdef KERBEROS_DEBUG
+		printf("koffsetp=%u [%02X %02X] [byte 0 must be 0x30]\n", koffsetp, packet->payload[koffsetp], packet->payload[koffsetp+1]);
+#endif
+	      } else
+		koffsetp = koffset;
+
+	      body_offset = koffsetp + 1 + pad_len;
+
+	      for(i=0; i<10; i++) if(packet->payload[body_offset] != 0x05) body_offset++; /* ASN.1 */
+#ifdef KERBEROS_DEBUG
+	      printf("body_offset=%u [%02X %02X] [byte 0 must be 0x05]\n", body_offset, packet->payload[body_offset], packet->payload[body_offset+1]);
+#endif
+	    }
+	    
+	    if(msg_type == 0x0A) /* AS-REQ */ {
+#ifdef KERBEROS_DEBUG
+	      printf("[Kerberos] Processing AS-REQ\n");
 #endif
 
-	    if(packet->payload[koffset] == 0x0a) /* AS-REQ */ {
-	      u_int16_t koffsetp, pad_data_len, body_offset;
-	      
-	      koffsetp = koffset + 4;
-	      pad_data_len = packet->payload[koffsetp];	      
-	      body_offset  = pad_data_len + koffsetp;
 
 	      if(body_offset < packet->payload_packet_len) {
-		u_int name_offset = body_offset + 30;
+		u_int16_t name_offset;
+
+		name_offset = body_offset + 13;
+		for(i=0; i<10; i++) if(packet->payload[name_offset] != 0x1b) name_offset++; /* ASN.1 */
+
+#ifdef KERBEROS_DEBUG
+		printf("name_offset=%u [%02X %02X] [byte 0 must be 0x1b]\n", name_offset, packet->payload[name_offset], packet->payload[name_offset+1]);
+#endif
 
 		if(name_offset < packet->payload_packet_len) {
-		  u_int cname_len = packet->payload[name_offset];
+		  u_int cname_len;
+
+		  name_offset += 1;
+		  if(packet->payload[name_offset+1] < ' ') /* Isn't printable ? */
+		    name_offset++;
+
+		  if(packet->payload[name_offset+1] == 0x1b)
+		    name_offset += 2;
+		  
+		  cname_len = packet->payload[name_offset];
 
 		  if((cname_len+name_offset) < packet->payload_packet_len) {
-		    u_int realm_len, realm_offset = cname_len + name_offset + 4, i;
-		    char cname_str[24];
+		    u_int realm_len, realm_offset, i;
+		    char cname_str[48];
+		    u_int8_t num_cname = 0;
 
-		    if(cname_len > sizeof(cname_str)-1)
-		      cname_len = sizeof(cname_str)-1;
+		    while(++num_cname <= 2) {
+		      if(cname_len > sizeof(cname_str)-1)
+			cname_len = sizeof(cname_str)-1;
 
-		    strncpy(cname_str, (char*)&packet->payload[name_offset+1], cname_len);
-		    cname_str[cname_len] = '\0';
-		    for(i=0; i<cname_len; i++) cname_str[i] = tolower(cname_str[i]);
+		      strncpy(cname_str, (char*)&packet->payload[name_offset+1], cname_len);
+		      cname_str[cname_len] = '\0';
+		      for(i=0; i<cname_len; i++) cname_str[i] = tolower(cname_str[i]);
 
 #ifdef KERBEROS_DEBUG
-		    printf("[Kerberos Cname][len: %u][%s]\n", cname_len, cname_str);
+		      printf("[AS-REQ][s/dport: %u/%u][Kerberos Cname][len: %u][%s]\n",
+			     sport, dport, cname_len, cname_str);
 #endif
 
+		      if(((strcmp(cname_str, "host") == 0) || (strcmp(cname_str, "ldap") == 0)) && (packet->payload[name_offset+1+cname_len] == 0x1b)) {
+			name_offset += cname_len + 2;
+			cname_len = packet->payload[name_offset];
+		      } else
+			break;
+		    }
+
+		    realm_offset = cname_len + name_offset + 3;
+
 		    /* if cname does not end with a $ then it's a username */
 		    if(cname_len && cname_str[cname_len-1] == '$') {
 		      cname_str[cname_len-1] = '\0';
 		      snprintf(flow->protos.kerberos.hostname, sizeof(flow->protos.kerberos.hostname), "%s", cname_str);
 		    } else
 		      snprintf(flow->protos.kerberos.username, sizeof(flow->protos.kerberos.username), "%s", cname_str);
 
+		    for(i=0; i<10; i++) if(packet->payload[realm_offset] != 0x1b) name_offset++; /* ASN.1 */
+#ifdef KERBEROS_DEBUG
+		    printf("realm_offset=%u [%02X %02X] [byte 0 must be 0x1b]\n", realm_offset, packet->payload[realm_offset], packet->payload[realm_offset+1]);
+#endif
+		    realm_offset += 1;
+		    //if(num_cname == 2) realm_offset++;
 		    realm_len = packet->payload[realm_offset];
 
 		    if((realm_offset+realm_len) < packet->payload_packet_len) {
-		      char realm_str[24];
+		      char realm_str[48];
 
 		      if(realm_len > sizeof(realm_str)-1)
 			realm_len = sizeof(realm_str);
 
-		      strncpy(realm_str, (char*)&packet->payload[realm_offset+1], realm_len);
+		      realm_offset += 1;
+
+		      strncpy(realm_str, (char*)&packet->payload[realm_offset], realm_len);
 		      realm_str[realm_len] = '\0';
 		      for(i=0; i<realm_len; i++) realm_str[i] = tolower(realm_str[i]);
 
 #ifdef KERBEROS_DEBUG
-		      printf("[Kerberos Realm][len: %u][%s]\n", realm_len, realm_str);
+		      printf("[AS-REQ][Kerberos Realm][len: %u][%s]\n", realm_len, realm_str);
 #endif
 		      snprintf(flow->protos.kerberos.domain, sizeof(flow->protos.kerberos.domain), "%s", realm_str);
 		    }
 		  }
 		}
-	      }
-	    } else if(packet->payload[koffset] == 0x0c) /* TGS-REQ */ {
-	      u_int16_t koffsetp, pad_data_len, body_offset;
-
-	      koffsetp = koffset + 3;
-	      pad_data_len = ntohs(*((u_int16_t*)&packet->payload[koffsetp]));
-	      body_offset = pad_data_len + koffsetp + 4;
+	      } 
+	    } else if(msg_type == 0x0c) /* TGS-REQ */ {
+#ifdef KERBEROS_DEBUG
+	      printf("[Kerberos] Processing TGS-REQ\n");
+#endif
 
 	      if(body_offset < packet->payload_packet_len) {
-		u_int name_offset = body_offset + 14;
+		u_int name_offset, padding_offset = body_offset + 4;
+
+		name_offset = padding_offset;
+		for(i=0; i<10; i++) if(packet->payload[name_offset] != 0x1b) name_offset++; /* ASN.1 */
+
+#ifdef KERBEROS_DEBUG
+		printf("name_offset=%u [%02X %02X] [byte 0 must be 0x1b]\n", name_offset, packet->payload[name_offset], packet->payload[name_offset+1]);
+#endif
 
 		if(name_offset < packet->payload_packet_len) {
-		  u_int realm_len = packet->payload[name_offset];
+		  u_int realm_len;
+
+		  name_offset++;
+		  realm_len = packet->payload[name_offset];
 
 		  if((realm_len+name_offset) < packet->payload_packet_len) {
 		    u_int i;
-		    char realm_str[24];
+		    char realm_str[48];
 
 		    if(realm_len > sizeof(realm_str)-1)
 		      realm_len = sizeof(realm_str)-1;
 
-		    strncpy(realm_str, (char*)&packet->payload[name_offset+1], realm_len);
+		    name_offset += 1;
+
+		    strncpy(realm_str, (char*)&packet->payload[name_offset], realm_len);
 		    realm_str[realm_len] = '\0';
 		    for(i=0; i<realm_len; i++) realm_str[i] = tolower(realm_str[i]);
 
 #ifdef KERBEROS_DEBUG
-		    printf("[Kerberos Realm][len: %u][%s]\n", realm_len, realm_str);
+		    printf("[TGS-REQ][s/dport: %u/%u][Kerberos Realm][len: %u][%s]\n", sport, dport, realm_len, realm_str);
 #endif
 		    snprintf(flow->protos.kerberos.domain, sizeof(flow->protos.kerberos.domain), "%s", realm_str);
+
+		    /* If necessary we can decode sname */
+
+		    if(flow->protos.kerberos.pktbuf) ndpi_free(flow->protos.kerberos.pktbuf);
+		    flow->protos.kerberos.pktbuf = NULL;
 		  }
 		}
 	      }
 
+	      if(packet->udp)
+		ndpi_int_kerberos_add_connection(ndpi_struct, flow);
+
 	      /* We set the protocol in the response */
+	      if(flow->protos.kerberos.pktbuf != NULL) {
+		free(flow->protos.kerberos.pktbuf);
+		flow->protos.kerberos.pktbuf = NULL;
+	      }
+	      
 	      return;
-	    } else if(packet->payload[koffset] == 0x0d) /* TGS-RES */ {
+	    } else if(msg_type == 0x0d) /* TGS-REP */ {
 	      u_int16_t koffsetp, pad_data_len, cname_offset;
+	      
+#ifdef KERBEROS_DEBUG
+	      printf("[Kerberos] Processing TGS-REP\n");
+#endif
 
 	      koffsetp = koffset + 4;
 	      pad_data_len = packet->payload[koffsetp];
 	      /* Skip realm already filled in request */
 	      cname_offset = pad_data_len + koffsetp + 15;
 
 	      if(cname_offset < packet->payload_packet_len) {
 		u_int8_t cname_len = packet->payload[cname_offset];
 
 		if((cname_offset+cname_offset) < packet->payload_packet_len) {
-		  char cname_str[24];
+		  char cname_str[48];
 		  u_int i;
-		  
+
 		  if(cname_len > sizeof(cname_str)-1)
 		    cname_len = sizeof(cname_str)-1;
-		  
+
 		  strncpy(cname_str, (char*)&packet->payload[cname_offset+1], cname_len);
 		  cname_str[cname_len] = '\0';
 		  for(i=0; i<cname_len; i++) cname_str[i] = tolower(cname_str[i]);
-		  
+
 #ifdef KERBEROS_DEBUG
-		  printf("[Kerberos Cname][len: %u][%s]\n", cname_len, cname_str);
+		  printf("[TGS-REP][s/dport: %u/%u][Kerberos Cname][len: %u][%s]\n",
+			 sport, dport, cname_len, cname_str);
 #endif
-		  
+
 		  if(cname_len && cname_str[cname_len-1] == '$') {
 		    cname_str[cname_len-1] = '\0';
 		    snprintf(flow->protos.kerberos.hostname, sizeof(flow->protos.kerberos.hostname), "%s", cname_str);
 		  } else
 		    snprintf(flow->protos.kerberos.username, sizeof(flow->protos.kerberos.username), "%s", cname_str);
 
 		  ndpi_int_kerberos_add_connection(ndpi_struct, flow);
 		}
 	      }
 	    }
-	    
+
 	    return;
 	  }
 
 	  if(packet->payload_packet_len > 21 &&
 	     packet->payload[16] == 0x05 &&
 	     (packet->payload[21] == 0x0a ||
 	      packet->payload[21] == 0x0c || packet->payload[21] == 0x0d || packet->payload[21] == 0x0e)) {
 	    ndpi_int_kerberos_add_connection(ndpi_struct, flow);
 	    return;
 	  }
 	}
       }
     } else {
+#ifdef KERBEROS_DEBUG
+      printf("[Kerberos][s/dport: %u/%u] Skipping packet: too long [kerberos_len: %u]\n",
+	     sport, dport, kerberos_len);
+#endif
+
       if(flow->protos.kerberos.domain[0] != '\0')
 	return;
     }
   }
 
   NDPI_EXCLUDE_PROTO(ndpi_struct, flow);
 }
@@ -220,11 +394,11 @@ void ndpi_search_kerberos(struct ndpi_detection_module_struct *ndpi_struct,
 void init_kerberos_dissector(struct ndpi_detection_module_struct *ndpi_struct,
 			     u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask) {
   ndpi_set_bitmask_protocol_detection("Kerberos", ndpi_struct, detection_bitmask, *id,
 				      NDPI_PROTOCOL_KERBEROS,
 				      ndpi_search_kerberos,
-				      NDPI_SELECTION_BITMASK_PROTOCOL_V4_V6_TCP_WITH_PAYLOAD_WITHOUT_RETRANSMISSION,
+				      NDPI_SELECTION_BITMASK_PROTOCOL_V4_V6_TCP_OR_UDP_WITH_PAYLOAD_WITHOUT_RETRANSMISSION,
 				      SAVE_DETECTION_BITMASK_AS_UNKNOWN,
 				      ADD_TO_DETECTION_BITMASK);
 
   *id += 1;
 }
