commit ec2e4544819b2ef0ecd297ba331d4f2172b77245
Author: Chen Huitao <h980501427@163.com>
Date:   Tue Jan 14 10:08:58 2020 +0800

    fix some oss-fuzz (#1188)
    
    * fix oss-fuzz 10419.
    
    * fix oss-fuzz 10427.
    
    * fix oss-fuzz 10421.
    
    * fix oss-fuzz 10422.
    
    * fix oss-fuzz 10425.
    
    * fix oss-fuzz 10426.
    
    * fix oss-fuzz 10426.
    
    * fix oss-fuzz 10422.
    
    * fix oss-fuzz  10426.
    
    * fix oss-fuzz 10456.
    
    * fix oss-fuzz 10428.
    
    * fix oss-fuzz 10429.
    
    * fix oss-fuzz 10431.
    
    * fix oss-fuzz 10435.
    
    * fix oss-fuzz 10430.
    
    * fix oss-fuzz 10436.
    
    * remove unused var.
    
    * fix oss-fuzz 10449.
    
    * fix oss-fuzz 10452.
    
    * fix oss-fuzz 11792.
    
    * fix oss-fuzz 10457.
    
    * fix oss-fuzz 11737.
    
    * fix oss-fuzz 10458.
    
    * fix oss-fuzz 10565.
    
    * fix oss-fuzz 11651.
    
    * fix oss-fuzz 10497.
    
    * fix oss-fuzz 10515.
    
    * fix oss-fuzz 10586.
    
    * fix oss-fuzz 10597.
    
    * fiz oss-fuzz 11721.
    
    * fix oss-fuzz 10718.
    
    * fix oss-fuzz 15610.
    
    * fix oss-fuzz 10512.
    
    * fix oss-fuzz 10545.
    
    * fix oss-fuzz 10598.
    
    * fix oss-fuzz 11112.
    
    * fix oss-fuzz 11589.
    
    * fix oss-fuzz 10674.
    
    * git fix oss-fuzz 19610.
    
    * fix oss-fuzz 19848.
    
    * fix oss-fuzz 19851.
    
    * fix oss-fuzz 19852.
    
    * fix oss-fuzz 10878.
    
    * fix oss-fuzz 11655.
    
    * fix oss-fuzz 19849.
    
    * fix oss-fuzz 11765.
    
    * fix oss-fuzz 10337.
    
    * fix oss-fuzz 10575.
    
    * fix oss-fuzz 19877.
    
    * fix oss-fuzz 19895.
    
    * fix oss-fuzz 19896.
    
    * fix oss-fuzz 19897.
    
    * remove verbose fprintf output.
    
    * fix oss-fuzz 19943.
    
    * fix oss-fuzz 20026.
    
    * fix oss-fuzz 20027.
    
    * fix oss-fuzz 19967.
    
    * fix oss-fuzz 19946.

diff --git a/qemu/fpu/softfloat-macros.h b/qemu/fpu/softfloat-macros.h
index 2e3c967d..2892b4fe 100644
--- a/qemu/fpu/softfloat-macros.h
+++ b/qemu/fpu/softfloat-macros.h
@@ -299,18 +299,18 @@ static inline void
 static inline void
  shortShift128Left(
      uint64_t a0, uint64_t a1, int_fast16_t count, uint64_t *z0Ptr, uint64_t *z1Ptr)
 {
 
-    *z1Ptr = a1<<count;
+    *z1Ptr = a1<<(count & 0x3f);
     *z0Ptr =
-        ( count == 0 ) ? a0 : ( a0<<count ) | ( a1>>( ( - count ) & 63 ) );
+        ( count == 0 ) ? a0 : ( a0<<(count & 0x3f) ) | ( a1>>( ( - count ) & 63 ) );
 
 }
 
 /*----------------------------------------------------------------------------
 | Shifts the 192-bit value formed by concatenating `a0', `a1', and `a2' left
 | by the number of bits given in `count'.  Any bits shifted off are lost.
 | The value of `count' must be less than 64.  The result is broken into three
 | 64-bit pieces which are stored at the locations pointed to by `z0Ptr',
 | `z1Ptr', and `z2Ptr'.
 *----------------------------------------------------------------------------*/
diff --git a/qemu/target-arm/neon_helper.c b/qemu/target-arm/neon_helper.c
index f2c05cb4..1426decd 100644
--- a/qemu/target-arm/neon_helper.c
+++ b/qemu/target-arm/neon_helper.c
@@ -829,50 +829,50 @@ NEON_VOP_ENV(qshl_u32, neon_u32, 1)
 uint64_t HELPER(neon_qshl_u64)(CPUARMState *env, uint64_t val, uint64_t shiftop)
 {
     int8_t shift = (int8_t)shiftop;
     if (shift >= 64) {
         if (val) {
             val = ~(uint64_t)0;
             SET_QC();
         }
     } else if (shift <= -64) {
         val = 0;
     } else if (shift < 0) {
         val >>= -shift;
     } else {
         uint64_t tmp = val;
         val <<= shift;
         if ((val >> shift) != tmp) {
             SET_QC();
             val = ~(uint64_t)0;
         }
     }
     return val;
 }
 
 #define NEON_FN(dest, src1, src2) do { \
     int8_t tmp; \
     tmp = (int8_t)src2; \
     if (tmp >= (ssize_t)sizeof(src1) * 8) { \
         if (src1) { \
             SET_QC(); \
             dest = (uint32_t)(1 << (sizeof(src1) * 8 - 1)); \
             if (src1 > 0) { \
                 dest--; \
             } \
         } else { \
             dest = src1; \
         } \
     } else if (tmp <= -(ssize_t)sizeof(src1) * 8) { \
         dest = src1 >> 31; \
     } else if (tmp < 0) { \
         dest = src1 >> -tmp; \
     } else { \
-        dest = src1 << tmp; \
+        dest = (uint32_t)src1 << tmp; \
         if ((dest >> tmp) != src1) { \
             SET_QC(); \
             dest = (uint32_t)(1 << (sizeof(src1) * 8 - 1)); \
             if (src1 > 0) { \
                 dest--; \
             } \
         } \
     }} while (0)
@@ -1170,7 +1170,7 @@ NEON_VOP(sub_u8, neon_u8, 4)
 NEON_VOP(sub_u16, neon_u16, 2)
 #undef NEON_FN
 
-#define NEON_FN(dest, src1, src2) dest = src1 * src2
+#define NEON_FN(dest, src1, src2) dest = (int64_t)src1 * src2
 NEON_VOP(mul_u8, neon_u8, 4)
 NEON_VOP(mul_u16, neon_u16, 2)
 #undef NEON_FN
diff --git a/qemu/target-arm/translate.c b/qemu/target-arm/translate.c
index db7aec59..31f0327a 100644
--- a/qemu/target-arm/translate.c
+++ b/qemu/target-arm/translate.c
@@ -122,18 +122,18 @@ static inline void store_cpu_offset(TCGContext *tcg_ctx, TCGv_i32 var, int offse
 /* Set a variable to the value of a CPU register.  */
 static void load_reg_var(DisasContext *s, TCGv_i32 var, int reg)
 {
     TCGContext *tcg_ctx = s->uc->tcg_ctx;
     if (reg == 15) {
         uint32_t addr;
         /* normally, since we updated PC, we need only to add one insn */
         if (s->thumb)
             addr = (long)s->pc + 2;
         else
             addr = (long)s->pc + 4;
         tcg_gen_movi_i32(tcg_ctx, var, addr);
     } else {
-        tcg_gen_mov_i32(tcg_ctx, var, tcg_ctx->cpu_R[(reg & 0x0f)]);
+        tcg_gen_mov_i32(tcg_ctx, var, tcg_ctx->cpu_R[reg & 0x0f]);
     }
 }
 
 /* Create a new temporary and set it to the value of a CPU register.  */
@@ -148,21 +148,21 @@ static inline TCGv_i32 load_reg(DisasContext *s, int reg)
 /* Set a CPU register.  The source must be a temporary and will be
    marked as dead.  */
 static void store_reg(DisasContext *s, int reg, TCGv_i32 var)
 {
     TCGContext *tcg_ctx = s->uc->tcg_ctx;
     if (reg == 15) {
         tcg_gen_andi_i32(tcg_ctx, var, var, ~1);
         s->is_jmp = DISAS_JUMP;
     }
-    tcg_gen_mov_i32(tcg_ctx, tcg_ctx->cpu_R[reg], var);
+    tcg_gen_mov_i32(tcg_ctx, tcg_ctx->cpu_R[reg & 0x0f], var);
     tcg_temp_free_i32(tcg_ctx, var);
 }
 
 /* Value extensions.  */
 #define gen_uxtb(var) tcg_gen_ext8u_i32(tcg_ctx, var, var)
 #define gen_uxth(var) tcg_gen_ext16u_i32(tcg_ctx, var, var)
 #define gen_sxtb(var) tcg_gen_ext8s_i32(tcg_ctx, var, var)
 #define gen_sxth(var) tcg_gen_ext16s_i32(tcg_ctx, var, var)
 
 #define gen_sxtb16(var) gen_helper_sxtb16(tcg_ctx, var, var)
 #define gen_uxtb16(var) gen_helper_uxtb16(tcg_ctx, var, var)
diff --git a/qemu/target-i386/ops_sse.h b/qemu/target-i386/ops_sse.h
index 5c0301d8..2b009c71 100644
--- a/qemu/target-i386/ops_sse.h
+++ b/qemu/target-i386/ops_sse.h
@@ -870,13 +870,13 @@ void helper_extrq_i(CPUX86State *env, XMMReg *d, int index, int length)
 static inline uint64_t helper_insertq(uint64_t src, int shift, int len)
 {
     uint64_t mask;
 
     if (len == 0) {
         mask = ~0ULL;
     } else {
         mask = (1ULL << (len & 0x3f)) - 1;
     }
-    return (src & ~(mask << shift)) | ((src & mask) << shift);
+    return (src & ~(mask << (shift & 0x3f))) | ((src & mask) << (shift & 0x3f));
 }
 
 void helper_insertq_r(CPUX86State *env, XMMReg *d, XMMReg *s)
diff --git a/qemu/target-mips/cpu.h b/qemu/target-mips/cpu.h
index 819b9447..df4ec2b5 100644
--- a/qemu/target-mips/cpu.h
+++ b/qemu/target-mips/cpu.h
@@ -98,37 +98,37 @@ typedef struct CPUMIPSFPUContext CPUMIPSFPUContext;
 struct CPUMIPSFPUContext {
     /* Floating point registers */
     fpr_t fpr[32];
     float_status fp_status;
     /* fpu implementation/revision register (fir) */
     uint32_t fcr0;
 #define FCR0_UFRP 28
 #define FCR0_F64 22
 #define FCR0_L 21
 #define FCR0_W 20
 #define FCR0_3D 19
 #define FCR0_PS 18
 #define FCR0_D 17
 #define FCR0_S 16
 #define FCR0_PRID 8
 #define FCR0_REV 0
     /* fcsr */
     uint32_t fcr31;
-#define SET_FP_COND(num,env)     do { ((env).fcr31) |= ((num) ? ((int)(1U << ((num) + 24))) : (1 << 23)); } while(0)
-#define CLEAR_FP_COND(num,env)   do { ((env).fcr31) &= ~((num) ? ((int)(1U << ((num) + 24))) : (1 << 23)); } while(0)
+#define SET_FP_COND(num,env)     do { ((env).fcr31) |= ((num) ? ((int)(1U << (((num) + 24) & 0x1f))) : (1 << 23)); } while(0)
+#define CLEAR_FP_COND(num,env)   do { ((env).fcr31) &= ~((num) ? ((int)(1U << (((num) + 24) & 0x1f))) : (1 << 23)); } while(0)
 #define GET_FP_COND(env)         ((((env).fcr31 >> 24) & 0xfe) | (((env).fcr31 >> 23) & 0x1))
 #define GET_FP_CAUSE(reg)        (((reg) >> 12) & 0x3f)
 #define GET_FP_ENABLE(reg)       (((reg) >>  7) & 0x1f)
 #define GET_FP_FLAGS(reg)        (((reg) >>  2) & 0x1f)
 #define SET_FP_CAUSE(reg,v)      do { (reg) = ((reg) & ~(0x3f << 12)) | ((v & 0x3f) << 12); } while(0)
 #define SET_FP_ENABLE(reg,v)     do { (reg) = ((reg) & ~(0x1f <<  7)) | ((v & 0x1f) << 7); } while(0)
 #define SET_FP_FLAGS(reg,v)      do { (reg) = ((reg) & ~(0x1f <<  2)) | ((v & 0x1f) << 2); } while(0)
 #define UPDATE_FP_FLAGS(reg,v)   do { (reg) |= ((v & 0x1f) << 2); } while(0)
 #define FP_INEXACT        1
 #define FP_UNDERFLOW      2
 #define FP_OVERFLOW       4
 #define FP_DIV0           8
 #define FP_INVALID        16
 #define FP_UNIMPLEMENTED  32
 };
 
 #define NB_MMU_MODES 3
