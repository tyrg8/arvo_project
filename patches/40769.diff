commit 2f52e2afc068b801880021334a41f16a18fa4bc2
Author: Andrii Nakryiko <andrii@kernel.org>
Date:   Wed Nov 3 10:32:10 2021 -0700

    libbpf: Improve sanity checking during BTF fix up
    
    If BTF is corrupted DATASEC's variable type ID might be incorrect.
    Prevent this easy to detect situation with extra NULL check.
    Reported by oss-fuzz project.
    
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Yonghong Song <yhs@fb.com>
    Link: https://lore.kernel.org/bpf/20211103173213.1376990-3-andrii@kernel.org

diff --git a/src/libbpf.c b/src/libbpf.c
index 71f5a00..f836a19 100644
--- a/src/libbpf.c
+++ b/src/libbpf.c
@@ -2724,56 +2724,55 @@ static int compare_vsi_off(const void *_a, const void *_b)
 static int btf_fixup_datasec(struct bpf_object *obj, struct btf *btf,
 			     struct btf_type *t)
 {
 	__u32 size = 0, off = 0, i, vars = btf_vlen(t);
 	const char *name = btf__name_by_offset(btf, t->name_off);
 	const struct btf_type *t_var;
 	struct btf_var_secinfo *vsi;
 	const struct btf_var *var;
 	int ret;
 
 	if (!name) {
 		pr_debug("No name found in string section for DATASEC kind.\n");
 		return -ENOENT;
 	}
 
 	/* .extern datasec size and var offsets were set correctly during
 	 * extern collection step, so just skip straight to sorting variables
 	 */
 	if (t->size)
 		goto sort_vars;
 
 	ret = find_elf_sec_sz(obj, name, &size);
 	if (ret || !size || (t->size && t->size != size)) {
 		pr_debug("Invalid size for section %s: %u bytes\n", name, size);
 		return -ENOENT;
 	}
 
 	t->size = size;
 
 	for (i = 0, vsi = btf_var_secinfos(t); i < vars; i++, vsi++) {
 		t_var = btf__type_by_id(btf, vsi->type);
-		var = btf_var(t_var);
-
-		if (!btf_is_var(t_var)) {
+		if (!t_var || !btf_is_var(t_var)) {
 			pr_debug("Non-VAR type seen in section %s\n", name);
 			return -EINVAL;
 		}
 
+		var = btf_var(t_var);
 		if (var->linkage == BTF_VAR_STATIC)
 			continue;
 
 		name = btf__name_by_offset(btf, t_var->name_off);
 		if (!name) {
 			pr_debug("No name found in string section for VAR kind\n");
 			return -ENOENT;
 		}
 
 		ret = find_elf_var_offset(obj, name, &off);
 		if (ret) {
 			pr_debug("No offset found in symbol table for VAR %s\n",
 				 name);
 			return -ENOENT;
 		}
 
 		vsi->offset = off;
 	}
