commit c1954838b6fff4a0375f68483e283ab10e0a42bb
Author: Jonathan Hui <jonhui@nestlabs.com>
Date:   Tue May 29 09:45:44 2018 -0700

    [router-table] validate num routers when processing Route TLV (#2744)
    
    Credit to OSS-Fuzz.

diff --git a/src/core/thread/router_table.cpp b/src/core/thread/router_table.cpp
index b9bbc1386..2eb60eba7 100644
--- a/src/core/thread/router_table.cpp
+++ b/src/core/thread/router_table.cpp
@@ -109,83 +109,83 @@ bool RouterTable::IsAllocated(uint8_t aRouterId) const
 void RouterTable::UpdateAllocation(void)
 {
     uint8_t indexMap[Mle::kMaxRouterId + 1];
 
     mActiveRouterCount = 0;
 
     // build index map
     for (uint8_t i = 0; i <= Mle::kMaxRouterId; i++)
     {
-        if (IsAllocated(i))
+        if (IsAllocated(i) && mActiveRouterCount < Mle::kMaxRouters)
         {
             indexMap[i] = mActiveRouterCount++;
         }
         else
         {
             indexMap[i] = Mle::kInvalidRouterId;
         }
     }
 
     // shift entries forward
     for (int i = Mle::kMaxRouters - 2; i >= 0; i--)
     {
         uint8_t routerId = mRouters[i].GetRouterId();
         uint8_t newIndex;
 
         if (routerId > Mle::kMaxRouterId || indexMap[routerId] == Mle::kInvalidRouterId)
         {
             continue;
         }
 
         newIndex = indexMap[routerId];
 
         if (newIndex > i)
         {
             mRouters[newIndex] = mRouters[i];
         }
     }
 
     // shift entries backward
     for (uint8_t i = 1; i < Mle::kMaxRouters; i++)
     {
         uint8_t routerId = mRouters[i].GetRouterId();
         uint8_t newIndex;
 
         if (routerId > Mle::kMaxRouterId || indexMap[routerId] == Mle::kInvalidRouterId)
         {
             continue;
         }
 
         newIndex = indexMap[routerId];
 
         if (newIndex < i)
         {
             mRouters[newIndex] = mRouters[i];
         }
     }
 
     // fix replaced entries
     for (uint8_t i = 0; i <= Mle::kMaxRouterId; i++)
     {
         uint8_t index = indexMap[i];
 
         if (index != Mle::kInvalidRouterId)
         {
             Router &router = mRouters[index];
 
             if (router.GetRouterId() != i)
             {
                 memset(&router, 0, sizeof(router));
                 router.SetRloc16(Mle::Mle::GetRloc16(i));
                 router.SetNextHop(Mle::kInvalidRouterId);
             }
         }
     }
 
     // clear unused entries
     for (uint8_t i = mActiveRouterCount; i < Mle::kMaxRouters; i++)
     {
         Router &router = mRouters[i];
         memset(&router, 0, sizeof(router));
         router.SetRloc16(0xffff);
     }
 }
