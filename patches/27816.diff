commit d482b4279323f70cc645a7651ace41d19de6b327
Merge: 9cba9d29 87795911
Author: Francesc Alted <francesc@blosc.org>
Date:   Sat Jan 2 12:40:35 2021 +0100

    Merge pull request #181 from nmoinvaz/fixes/invalid-trailer-offset
    
    Fixed ASAN heap-buffer-overflow when reading trailer from frame with invalid offset.

diff --git a/blosc/frame.c b/blosc/frame.c
index 87ca55a0..bc68d525 100644
--- a/blosc/frame.c
+++ b/blosc/frame.c
@@ -908,64 +908,68 @@ int frame_update_header(blosc2_frame* frame, blosc2_schunk* schunk, bool new) {
 /* Get the (compressed) usermeta chunk out of a frame */
 int32_t frame_get_usermeta(blosc2_frame* frame, uint8_t** usermeta) {
   int32_t header_len;
   int64_t frame_len;
   int64_t nbytes;
   int64_t cbytes;
   int32_t chunksize;
   int32_t nchunks;
   int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes, &chunksize, &nchunks,
                             NULL, NULL, NULL, NULL, NULL);
   if (ret < 0) {
     BLOSC_TRACE_ERROR("Unable to get the header info from frame.");
     return -1;
   }
   int64_t trailer_offset = get_trailer_offset(frame, header_len, cbytes);
   if (trailer_offset < 0) {
     BLOSC_TRACE_ERROR("Unable to get the trailer offset from frame.");
     return -1;
   }
+  if (trailer_offset + FRAME_TRAILER_USERMETA_LEN_OFFSET > frame_len) {
+    BLOSC_TRACE_ERROR("Invalid trailer offset exceeds frame length.");
+    return -1;
+  }
 
   // Get the size of usermeta (inside the trailer)
   int32_t usermeta_len_network;
   if (frame->sdata != NULL) {
     memcpy(&usermeta_len_network, frame->sdata + trailer_offset + FRAME_TRAILER_USERMETA_LEN_OFFSET, sizeof(int32_t));
   } else {
     FILE* fp = fopen(frame->fname, "rb");
     fseek(fp, trailer_offset + FRAME_TRAILER_USERMETA_LEN_OFFSET, SEEK_SET);
     size_t rbytes = fread(&usermeta_len_network, 1, sizeof(int32_t), fp);
     fclose(fp);
     if (rbytes != sizeof(int32_t)) {
       BLOSC_TRACE_ERROR("Cannot access the usermeta_len out of the fileframe.");
       return -1;
     }
   }
   int32_t usermeta_len;
   swap_store(&usermeta_len, &usermeta_len_network, sizeof(int32_t));
 
   if (usermeta_len < 0) {
     BLOSC_TRACE_ERROR("Invalid usermeta length.");
     return -1;
   }
   if (usermeta_len == 0) {
     *usermeta = NULL;
     return 0;
   }
 
   *usermeta = malloc(usermeta_len);
   if (frame->sdata != NULL) {
     memcpy(*usermeta, frame->sdata + trailer_offset + FRAME_TRAILER_USERMETA_OFFSET, usermeta_len);
   }
   else {
     FILE* fp = fopen(frame->fname, "rb+");
     fseek(fp, trailer_offset + FRAME_TRAILER_USERMETA_OFFSET, SEEK_SET);
     size_t rbytes = fread(*usermeta, 1, usermeta_len, fp);
     fclose(fp);
     if (rbytes != (size_t)usermeta_len) {
       BLOSC_TRACE_ERROR("Cannot read the complete usermeta chunk in frame. %ld != %ld.",
               (long)rbytes, (long)usermeta_len);
       return -1;
     }
   }
 
   return usermeta_len;
 }
