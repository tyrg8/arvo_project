commit 08efc1491525624dc5f5ebf0e450227524a7db4f
Author: Wan-Teh Chang <wtc@google.com>
Date:   Mon Mar 4 17:11:12 2024 -0800

    Check data_end before advancing the data pointer
    
    get_ls_tile_buffers() should check data_end before advancing the data
    pointer.
    
    Bug: oss-fuzz:67059
    Bug: oss-fuzz:67162
    Bug: oss-fuzz:67184
    Bug: oss-fuzz:67216
    Bug: chromium:327719168
    Change-Id: Ib6582c2b3319234e6b7177bebb2798c7a9c239a4

diff --git a/av1/decoder/decodeframe.c b/av1/decoder/decodeframe.c
index 19644f35e6..4e3fc45a52 100644
--- a/av1/decoder/decodeframe.c
+++ b/av1/decoder/decodeframe.c
@@ -2260,89 +2260,97 @@ static AOM_INLINE void get_ls_tile_buffer(
 // Returns the end of the last tile buffer
 // (tile_buffers[cm->tiles.rows - 1][cm->tiles.cols - 1]).
 static const uint8_t *get_ls_tile_buffers(
     AV1Decoder *pbi, const uint8_t *data, const uint8_t *data_end,
     TileBufferDec (*const tile_buffers)[MAX_TILE_COLS]) {
   AV1_COMMON *const cm = &pbi->common;
   const int tile_cols = cm->tiles.cols;
   const int tile_rows = cm->tiles.rows;
   const int have_tiles = tile_cols * tile_rows > 1;
   const uint8_t *raw_data_end;  // The end of the last tile buffer
 
   if (!have_tiles) {
     const size_t tile_size = data_end - data;
     tile_buffers[0][0].data = data;
     tile_buffers[0][0].size = tile_size;
     raw_data_end = NULL;
   } else {
     // We locate only the tile buffers that are required, which are the ones
     // specified by pbi->dec_tile_col and pbi->dec_tile_row. Also, we always
     // need the last (bottom right) tile buffer, as we need to know where the
     // end of the compressed frame buffer is for proper superframe decoding.
 
     const uint8_t *tile_col_data_end[MAX_TILE_COLS] = { NULL };
     const uint8_t *const data_start = data;
 
     const int dec_tile_row = AOMMIN(pbi->dec_tile_row, tile_rows);
     const int single_row = pbi->dec_tile_row >= 0;
     const int tile_rows_start = single_row ? dec_tile_row : 0;
     const int tile_rows_end = single_row ? tile_rows_start + 1 : tile_rows;
     const int dec_tile_col = AOMMIN(pbi->dec_tile_col, tile_cols);
     const int single_col = pbi->dec_tile_col >= 0;
     const int tile_cols_start = single_col ? dec_tile_col : 0;
     const int tile_cols_end = single_col ? tile_cols_start + 1 : tile_cols;
 
     const int tile_col_size_bytes = pbi->tile_col_size_bytes;
     const int tile_size_bytes = pbi->tile_size_bytes;
     int tile_width, tile_height;
     av1_get_uniform_tile_size(cm, &tile_width, &tile_height);
     const int tile_copy_mode =
         ((AOMMAX(tile_width, tile_height) << MI_SIZE_LOG2) <= 256) ? 1 : 0;
     // Read tile column sizes for all columns (we need the last tile buffer)
     for (int c = 0; c < tile_cols; ++c) {
       const int is_last = c == tile_cols - 1;
       size_t tile_col_size;
 
       if (!is_last) {
+        if (tile_col_size_bytes > data_end - data) {
+          aom_internal_error(&pbi->error, AOM_CODEC_CORRUPT_FRAME,
+                             "Not enough data to read tile_col_size");
+        }
         tile_col_size = mem_get_varsize(data, tile_col_size_bytes);
         data += tile_col_size_bytes;
+        if (tile_col_size > (size_t)(data_end - data)) {
+          aom_internal_error(&pbi->error, AOM_CODEC_CORRUPT_FRAME,
+                             "tile_col_data_end[%d] is out of bound", c);
+        }
         tile_col_data_end[c] = data + tile_col_size;
       } else {
         tile_col_size = data_end - data;
         tile_col_data_end[c] = data_end;
       }
       data += tile_col_size;
     }
 
     data = data_start;
 
     // Read the required tile sizes.
     for (int c = tile_cols_start; c < tile_cols_end; ++c) {
       const int is_last = c == tile_cols - 1;
 
       if (c > 0) data = tile_col_data_end[c - 1];
 
       if (!is_last) data += tile_col_size_bytes;
 
       // Get the whole of the last column, otherwise stop at the required tile.
       for (int r = 0; r < (is_last ? tile_rows : tile_rows_end); ++r) {
         get_ls_tile_buffer(tile_col_data_end[c], &pbi->error, &data,
                            tile_buffers, tile_size_bytes, c, r, tile_copy_mode);
       }
     }
 
     // If we have not read the last column, then read it to get the last tile.
     if (tile_cols_end != tile_cols) {
       const int c = tile_cols - 1;
 
       data = tile_col_data_end[c - 1];
 
       for (int r = 0; r < tile_rows; ++r) {
         get_ls_tile_buffer(tile_col_data_end[c], &pbi->error, &data,
                            tile_buffers, tile_size_bytes, c, r, tile_copy_mode);
       }
     }
     raw_data_end = data;
   }
   return raw_data_end;
 }
 #endif  // EXT_TILE_DEBUG
