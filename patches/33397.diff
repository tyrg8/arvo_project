commit 12a5277ec0977af493530b704a5a16e28f734788
Author: Steven Massey <soundandform@gmail.com>
Date:   Sat Apr 17 14:25:47 2021 -0700

    patching up

diff --git a/source/m3_compile.c b/source/m3_compile.c
index c34865c..dde77d6 100644
--- a/source/m3_compile.c
+++ b/source/m3_compile.c
@@ -227,32 +227,31 @@ void  MarkSlotAllocated  (IM3Compilation o, u16 i_slot)
 M3Result  AllocateSlotsWithinRange  (IM3Compilation o, u16 * o_slot, u8 i_type, u16 i_startSlot, u16 i_endSlot)
 {
     M3Result result = m3Err_functionStackOverflow;
 
     u16 numSlots = GetTypeNumSlots (i_type);
     u16 searchOffset = numSlots - 1;
 
-//    if (d_m3Use32BitSlots)
-        AlignSlotToType (& i_startSlot, i_type);
+	AlignSlotToType (& i_startSlot, i_type);
 
     // search for 1 or 2 consecutive slots in the execution stack
     u16 i = i_startSlot;
     while (i + searchOffset < i_endSlot)
     {
         if (o->m3Slots [i] == 0 and o->m3Slots [i + searchOffset] == 0)
         {
             MarkSlotAllocated (o, i);
 
             if (numSlots == 2)
                 MarkSlotAllocated (o, i + 1);
 
             * o_slot = i;
             result = m3Err_none;
             break;
         }
 
         // keep 2-slot allocations even-aligned
         i += numSlots;
     }
 
     return result;
 }
@@ -270,6 +269,8 @@ M3Result  AllocateConstantSlots  (IM3Compilation o, u16 * o_slot, u8 i_type)
 }
 
 
+// TOQUE: this usage count system could be eliminated. real world code doesn't frequently trigger it.  just copy to multiple
+// unique slots.
 M3Result  IncrementSlotUsageCount  (IM3Compilation o, u16 i_slot)
 {                                                                                       d_m3Assert (i_slot < d_m3MaxFunctionSlots);
     M3Result result = m3Err_none;                                                       d_m3Assert (o->m3Slots [i_slot] > 0);
@@ -688,10 +689,10 @@ bool  IsStackPolymorphic  (IM3Compilation o)
 }
 
 
-void  SetStackPolymorphic  (IM3Compilation o)
+M3Result  SetStackPolymorphic  (IM3Compilation o)
 {
-    UnwindBlockStack (o);                                       m3log (compile, "stack set polymorphic");
-    o->block.isPolymorphic = true;
+	o->block.isPolymorphic = true;								m3log (compile, "stack set polymorphic");
+	return UnwindBlockStack (o);
 }
 
 
@@ -1012,16 +1013,16 @@ M3Result  ResolveBlockResults  (IM3Compilation o, IM3CompilationScope i_targetBl
 		if (IsFpType (GetStackTopType (o)))
 		{
 _           (CopyStackTopToRegister (o, false));
 			--endIndex;
 		}
 		
 		u16 tempSlot = GetMaxUsedSlotPlusOne (o);
 		AlignSlotToType (& tempSlot, c_m3Type_i64);
 		
-		MoveStackSlotsR (o, i_targetBlock->topSlot, stackTop - (numResults - 1), endIndex, c_slotUnused, tempSlot);
+_		(MoveStackSlotsR (o, i_targetBlock->topSlot, stackTop - (numResults - 1), endIndex, c_slotUnused, tempSlot));
 		
 		if (d_m3LogWasmStack) dump_type_stack (o);
 	}
     
     _catch: return result;
 }
@@ -1150,7 +1151,7 @@ _	(ReturnValues (o, NULL));
 
 _   (EmitOp (o, op_Return));
 
-	SetStackPolymorphic (o);
+_	(SetStackPolymorphic (o));
 
     _catch: return result;
 }
@@ -1424,24 +1425,24 @@ _           (PopType (o, c_m3Type_i32));
 _       (EmitOp (o, op));
         EmitPointer (o, scope->pc);
     }
     else // forward branch
     {
         pc_t * jumpTo = NULL;
         
         if (i_opcode == c_waOp_branchIf)
         {
             // OPTZ: need a flipped BranchIf without ResolveBlockResults prologue
             // when no stack results
             
             IM3Operation op = IsStackTopInRegister (o) ? op_BranchIfPrologue_r : op_BranchIfPrologue_s;
 
-    _       (EmitOp (o, op));
-            EmitSlotNumOfStackTopAndPop (o); // condition
+_			(EmitOp (o, op));
+_           (EmitSlotNumOfStackTopAndPop (o)); // condition
             
             // this is continuation point, if the branch isn't taken
             jumpTo = (pc_t *) ReservePointer (o);
         }
 		
 //		if (not IsStackPolymorphic (o))
 		
 			if (scope->depth == 0)
@@ -1453,12 +1454,13 @@ _          		(ResolveBlockResults (o, scope, false));
 _				(EmitPatchingBranch (o, scope));
 			}
 		
         if (jumpTo)
         {
             * jumpTo = GetPC (o);
         }
-        else SetStackPolymorphic (o);
+        else
+_			(SetStackPolymorphic (o));
     }
 
     _catch: return result;
 }
@@ -1518,15 +1520,15 @@ _           (ResolveBlockResults (o, scope, false));
 _           (EmitPatchingBranch (o, scope));
         }
         
         ReleaseCompilationCodePage (o);     // FIX: continueOpPage can get lost if thrown
         o->page = savedPage;
 
         EmitPointer (o, startPC);
     }
 
-    SetStackPolymorphic (o);
+_  	(SetStackPolymorphic (o));
 
     }
 
     _catch: return result;
 }
@@ -1942,12 +1944,12 @@ M3Result  Compile_Unreachable  (IM3Compilation o, m3opcode_t i_opcode)
 _   (AddTrapRecord (o));
 
 _   (EmitOp (o, op_Unreachable));
-    SetStackPolymorphic (o);
+_   (SetStackPolymorphic (o));
 
     _catch:
     return result;
 }
 
 
 // OPTZ: currently all stack slot indices take up a full word, but
 // dual stack source operands could be packed together
