commit fe1f613b7510272f493f3dc4e291e6928347ae95
Merge: ebb7b173b0 5459ed4c2f
Author: Dmitry Stogov <dmitry@zend.com>
Date:   Mon Dec 6 13:09:26 2021 +0300

    Merge branch 'PHP-8.1'
    
    * PHP-8.1:
      Fix use after free because of data clobbering by user error handler

diff --git a/Zend/tests/falsetoarray_002.phpt b/Zend/tests/falsetoarray_002.phpt
new file mode 100644
index 0000000000..c01b799545
--- /dev/null
+++ b/Zend/tests/falsetoarray_002.phpt
@@ -0,0 +1,15 @@
+--TEST--
+Autovivification of false to array with data clobbering by error handler
+--FILE--
+<?php
+set_error_handler(function($code, $msg) {
+    echo "Err: $msg\n";
+    $GLOBALS['a']='';
+});
+$a=[!'a'];
+$a[0][$d]='b';
+var_dump($a);
+?>
+--EXPECT--
+Err: Automatic conversion of false to array is deprecated
+string(0) ""
diff --git a/Zend/zend_execute.c b/Zend/zend_execute.c
index 8375ff2ac5..fe87b92406 100644
--- a/Zend/zend_execute.c
+++ b/Zend/zend_execute.c
@@ -2338,124 +2338,135 @@ static zend_never_inline zval* ZEND_FASTCALL zend_fetch_dimension_address_inner_
 static zend_always_inline void zend_fetch_dimension_address(zval *result, zval *container, zval *dim, int dim_type, int type EXECUTE_DATA_DC)
 {
 	zval *retval;
 
 	if (EXPECTED(Z_TYPE_P(container) == IS_ARRAY)) {
 try_array:
 		SEPARATE_ARRAY(container);
 fetch_from_array:
 		if (dim == NULL) {
 			retval = zend_hash_next_index_insert(Z_ARRVAL_P(container), &EG(uninitialized_zval));
 			if (UNEXPECTED(retval == NULL)) {
 				zend_cannot_add_element();
 				ZVAL_UNDEF(result);
 				return;
 			}
 		} else {
 			retval = zend_fetch_dimension_address_inner(Z_ARRVAL_P(container), dim, dim_type, type EXECUTE_DATA_CC);
 			if (UNEXPECTED(!retval)) {
 				/* This may fail without throwing if the array was modified while throwing an
 				 * undefined index error. */
 				ZVAL_NULL(result);
 				return;
 			}
 		}
 		ZVAL_INDIRECT(result, retval);
 		return;
 	} else if (EXPECTED(Z_TYPE_P(container) == IS_REFERENCE)) {
 		zend_reference *ref = Z_REF_P(container);
 		container = Z_REFVAL_P(container);
 		if (EXPECTED(Z_TYPE_P(container) == IS_ARRAY)) {
 			goto try_array;
 		} else if (EXPECTED(Z_TYPE_P(container) <= IS_FALSE)) {
 			if (type != BP_VAR_UNSET) {
 				if (ZEND_REF_HAS_TYPE_SOURCES(ref)) {
 					if (UNEXPECTED(!zend_verify_ref_array_assignable(ref))) {
 						ZVAL_UNDEF(result);
 						return;
 					}
 				}
 				array_init(container);
 				goto fetch_from_array;
 			} else {
 				goto return_null;
 			}
 		}
 	}
 	if (UNEXPECTED(Z_TYPE_P(container) == IS_STRING)) {
 		if (dim == NULL) {
 			zend_use_new_element_for_string();
 		} else {
 			zend_check_string_offset(dim, type EXECUTE_DATA_CC);
 			zend_wrong_string_offset_error();
 		}
 		ZVAL_UNDEF(result);
 	} else if (EXPECTED(Z_TYPE_P(container) == IS_OBJECT)) {
 		if (ZEND_CONST_COND(dim_type == IS_CV, dim != NULL) && UNEXPECTED(Z_TYPE_P(dim) == IS_UNDEF)) {
 			zend_object *obj = Z_OBJ_P(container);
 			GC_ADDREF(obj);
 			dim = ZVAL_UNDEFINED_OP2();
 			if (UNEXPECTED(GC_DELREF(obj) == 0)) {
 				zend_objects_store_del(obj);
 				ZVAL_NULL(result);
 				return;
 			}
 		} else if (dim_type == IS_CONST && Z_EXTRA_P(dim) == ZEND_EXTRA_VALUE) {
 			dim++;
 		}
 		retval = Z_OBJ_HT_P(container)->read_dimension(Z_OBJ_P(container), dim, type, result);
 
 		if (UNEXPECTED(retval == &EG(uninitialized_zval))) {
 			zend_class_entry *ce = Z_OBJCE_P(container);
 
 			ZVAL_NULL(result);
 			zend_error(E_NOTICE, "Indirect modification of overloaded element of %s has no effect", ZSTR_VAL(ce->name));
 		} else if (EXPECTED(retval && Z_TYPE_P(retval) != IS_UNDEF)) {
 			if (!Z_ISREF_P(retval)) {
 				if (result != retval) {
 					ZVAL_COPY(result, retval);
 					retval = result;
 				}
 				if (Z_TYPE_P(retval) != IS_OBJECT) {
 					zend_class_entry *ce = Z_OBJCE_P(container);
 					zend_error(E_NOTICE, "Indirect modification of overloaded element of %s has no effect", ZSTR_VAL(ce->name));
 				}
 			} else if (UNEXPECTED(Z_REFCOUNT_P(retval) == 1)) {
 				ZVAL_UNREF(retval);
 			}
 			if (result != retval) {
 				ZVAL_INDIRECT(result, retval);
 			}
 		} else {
 			ZEND_ASSERT(EG(exception) && "read_dimension() returned NULL without exception");
 			ZVAL_UNDEF(result);
 		}
 	} else {
 		if (EXPECTED(Z_TYPE_P(container) <= IS_FALSE)) {
 			if (type != BP_VAR_W && UNEXPECTED(Z_TYPE_P(container) == IS_UNDEF)) {
 				ZVAL_UNDEFINED_OP1();
 			}
-			if (Z_TYPE_P(container) == IS_FALSE) {
-				zend_false_to_array_deprecated();
-			}
 			if (type != BP_VAR_UNSET) {
-				array_init(container);
+				HashTable *ht = zend_new_array(0);
+				zend_uchar old_type = Z_TYPE_P(container);
+
+				ZVAL_ARR(container, ht);
+				if (UNEXPECTED(old_type == IS_FALSE)) {
+					GC_ADDREF(ht);
+					zend_false_to_array_deprecated();
+					if (UNEXPECTED(GC_DELREF(ht) == 0)) {
+						zend_array_destroy(ht);
+						goto return_null;
+					}
+				}
 				goto fetch_from_array;
 			} else {
+				if (UNEXPECTED(Z_TYPE_P(container) == IS_FALSE)) {
+					zend_false_to_array_deprecated();
+				}
 return_null:
 				/* for read-mode only */
 				if (ZEND_CONST_COND(dim_type == IS_CV, dim != NULL) && UNEXPECTED(Z_TYPE_P(dim) == IS_UNDEF)) {
 					ZVAL_UNDEFINED_OP2();
 				}
 				ZVAL_NULL(result);
 			}
 		} else {
 			if (type == BP_VAR_UNSET) {
 				zend_throw_error(NULL, "Cannot unset offset in a non-array variable");
 				ZVAL_UNDEF(result);
 			} else {
 				zend_use_scalar_as_array();
 				ZVAL_UNDEF(result);
 			}
 		}
 	}
 }
diff --git a/Zend/zend_vm_def.h b/Zend/zend_vm_def.h
index 46c78e2bd5..32a3008544 100644
--- a/Zend/zend_vm_def.h
+++ b/Zend/zend_vm_def.h
@@ -1159,72 +1159,82 @@ ZEND_VM_C_LABEL(assign_dim_op_array):
 		SEPARATE_ARRAY(container);
 ZEND_VM_C_LABEL(assign_dim_op_new_array):
 		dim = GET_OP2_ZVAL_PTR_UNDEF(BP_VAR_R);
 		if (OP2_TYPE == IS_UNUSED) {
 			var_ptr = zend_hash_next_index_insert(Z_ARRVAL_P(container), &EG(uninitialized_zval));
 			if (UNEXPECTED(!var_ptr)) {
 				zend_cannot_add_element();
 				ZEND_VM_C_GOTO(assign_dim_op_ret_null);
 			}
 		} else {
 			if (OP2_TYPE == IS_CONST) {
 				var_ptr = zend_fetch_dimension_address_inner_RW_CONST(Z_ARRVAL_P(container), dim EXECUTE_DATA_CC);
 			} else {
 				var_ptr = zend_fetch_dimension_address_inner_RW(Z_ARRVAL_P(container), dim EXECUTE_DATA_CC);
 			}
 			if (UNEXPECTED(!var_ptr)) {
 				ZEND_VM_C_GOTO(assign_dim_op_ret_null);
 			}
 		}
 
 		value = get_op_data_zval_ptr_r((opline+1)->op1_type, (opline+1)->op1);
 
 		do {
 			if (OP2_TYPE != IS_UNUSED && UNEXPECTED(Z_ISREF_P(var_ptr))) {
 				zend_reference *ref = Z_REF_P(var_ptr);
 				var_ptr = Z_REFVAL_P(var_ptr);
 				if (UNEXPECTED(ZEND_REF_HAS_TYPE_SOURCES(ref))) {
 					zend_binary_assign_op_typed_ref(ref, value OPLINE_CC EXECUTE_DATA_CC);
 					break;
 				}
 			}
 			zend_binary_op(var_ptr, var_ptr, value OPLINE_CC);
 		} while (0);
 
 		if (UNEXPECTED(RETURN_VALUE_USED(opline))) {
 			ZVAL_COPY(EX_VAR(opline->result.var), var_ptr);
 		}
 		FREE_OP((opline+1)->op1_type, (opline+1)->op1.var);
 	} else {
 		if (EXPECTED(Z_ISREF_P(container))) {
 			container = Z_REFVAL_P(container);
 			if (EXPECTED(Z_TYPE_P(container) == IS_ARRAY)) {
 				ZEND_VM_C_GOTO(assign_dim_op_array);
 			}
 		}
 
 		if (EXPECTED(Z_TYPE_P(container) == IS_OBJECT)) {
 			dim = GET_OP2_ZVAL_PTR_UNDEF(BP_VAR_R);
 			if (OP2_TYPE == IS_CV && UNEXPECTED(Z_ISUNDEF_P(dim))) {
 				zend_object *obj = Z_OBJ_P(container);
 				GC_ADDREF(obj);
 				dim = ZVAL_UNDEFINED_OP2();
 				if (UNEXPECTED(GC_DELREF(obj) == 0)) {
 					zend_objects_store_del(obj);
 					ZEND_VM_C_GOTO(assign_dim_op_ret_null);
 				}
 			} else if (OP2_TYPE == IS_CONST && Z_EXTRA_P(dim) == ZEND_EXTRA_VALUE) {
 				dim++;
 			}
 			zend_binary_assign_op_obj_dim(container, dim OPLINE_CC EXECUTE_DATA_CC);
 		} else if (EXPECTED(Z_TYPE_P(container) <= IS_FALSE)) {
+			HashTable *ht;
+			zend_uchar old_type;
+
 			if (OP1_TYPE == IS_CV && UNEXPECTED(Z_TYPE_INFO_P(container) == IS_UNDEF)) {
 				ZVAL_UNDEFINED_OP1();
 			}
-			if (Z_TYPE_P(container) == IS_FALSE) {
+			ht = zend_new_array(8);
+			old_type = Z_TYPE_P(container);
+			ZVAL_ARR(container, ht);
+			if (UNEXPECTED(old_type == IS_FALSE)) {
+				GC_ADDREF(ht);
 				zend_false_to_array_deprecated();
+				if (UNEXPECTED(GC_DELREF(ht) == 0)) {
+					zend_array_destroy(ht);
+					ZEND_VM_C_GOTO(assign_dim_op_ret_null);
+				}
 			}
-			ZVAL_ARR(container, zend_new_array(8));
 			ZEND_VM_C_GOTO(assign_dim_op_new_array);
 		} else {
 			dim = GET_OP2_ZVAL_PTR(BP_VAR_R);
 			zend_binary_assign_op_dim_slow(container, dim OPLINE_CC EXECUTE_DATA_CC);
@@ -2544,111 +2554,118 @@ ZEND_VM_HANDLER(23, ZEND_ASSIGN_DIM, VAR|CV, CONST|TMPVAR|UNUSED|NEXT|CV, SPEC(O
 	if (EXPECTED(Z_TYPE_P(object_ptr) == IS_ARRAY)) {
 ZEND_VM_C_LABEL(try_assign_dim_array):
 		SEPARATE_ARRAY(object_ptr);
 		if (OP2_TYPE == IS_UNUSED) {
 			value = GET_OP_DATA_ZVAL_PTR(BP_VAR_R);
 			if (OP_DATA_TYPE == IS_CV || OP_DATA_TYPE == IS_VAR) {
 				ZVAL_DEREF(value);
 			}
 			value = zend_hash_next_index_insert(Z_ARRVAL_P(object_ptr), value);
 			if (UNEXPECTED(value == NULL)) {
 				zend_cannot_add_element();
 				ZEND_VM_C_GOTO(assign_dim_error);
 			} else if (OP_DATA_TYPE == IS_CV) {
 				if (Z_REFCOUNTED_P(value)) {
 					Z_ADDREF_P(value);
 				}
 			} else if (OP_DATA_TYPE == IS_VAR) {
 				zval *free_op_data = EX_VAR((opline+1)->op1.var);
 				if (Z_ISREF_P(free_op_data)) {
 					if (Z_REFCOUNTED_P(value)) {
 						Z_ADDREF_P(value);
 					}
 					zval_ptr_dtor_nogc(free_op_data);
 				}
 			} else if (OP_DATA_TYPE == IS_CONST) {
 				if (UNEXPECTED(Z_REFCOUNTED_P(value))) {
 					Z_ADDREF_P(value);
 				}
 			}
 		} else {
 			dim = GET_OP2_ZVAL_PTR_UNDEF(BP_VAR_R);
 			if (OP2_TYPE == IS_CONST) {
 				variable_ptr = zend_fetch_dimension_address_inner_W_CONST(Z_ARRVAL_P(object_ptr), dim EXECUTE_DATA_CC);
 			} else {
 				variable_ptr = zend_fetch_dimension_address_inner_W(Z_ARRVAL_P(object_ptr), dim EXECUTE_DATA_CC);
 			}
 			if (UNEXPECTED(variable_ptr == NULL)) {
 				ZEND_VM_C_GOTO(assign_dim_error);
 			}
 			value = GET_OP_DATA_ZVAL_PTR(BP_VAR_R);
 			value = zend_assign_to_variable(variable_ptr, value, OP_DATA_TYPE, EX_USES_STRICT_TYPES());
 		}
 		if (UNEXPECTED(RETURN_VALUE_USED(opline))) {
 			ZVAL_COPY(EX_VAR(opline->result.var), value);
 		}
 	} else {
 		if (EXPECTED(Z_ISREF_P(object_ptr))) {
 			object_ptr = Z_REFVAL_P(object_ptr);
 			if (EXPECTED(Z_TYPE_P(object_ptr) == IS_ARRAY)) {
 				ZEND_VM_C_GOTO(try_assign_dim_array);
 			}
 		}
 		if (EXPECTED(Z_TYPE_P(object_ptr) == IS_OBJECT)) {
 			dim = GET_OP2_ZVAL_PTR_UNDEF(BP_VAR_R);
 			if (OP2_TYPE == IS_CV && UNEXPECTED(Z_ISUNDEF_P(dim))) {
 				zend_object *obj = Z_OBJ_P(object_ptr);
 				GC_ADDREF(obj);
 				dim = ZVAL_UNDEFINED_OP2();
 				if (UNEXPECTED(GC_DELREF(obj) == 0)) {
 					zend_objects_store_del(obj);
 					ZEND_VM_C_GOTO(assign_dim_error);
 				}
 			} else if (OP2_TYPE == IS_CONST && Z_EXTRA_P(dim) == ZEND_EXTRA_VALUE) {
 				dim++;
 			}
 
 			value = GET_OP_DATA_ZVAL_PTR_UNDEF(BP_VAR_R);
 			if (OP_DATA_TYPE == IS_CV && UNEXPECTED(Z_ISUNDEF_P(value))) {
 				zend_object *obj = Z_OBJ_P(object_ptr);
 				GC_ADDREF(obj);
 				value = zval_undefined_cv((opline+1)->op1.var EXECUTE_DATA_CC);
 				if (UNEXPECTED(GC_DELREF(obj) == 0)) {
 					zend_objects_store_del(obj);
 					ZEND_VM_C_GOTO(assign_dim_error);
 				}
 			} else if (OP_DATA_TYPE & (IS_CV|IS_VAR)) {
 				ZVAL_DEREF(value);
 			}
 
 			zend_assign_to_object_dim(object_ptr, dim, value OPLINE_CC EXECUTE_DATA_CC);
 
 			FREE_OP_DATA();
 		} else if (EXPECTED(Z_TYPE_P(object_ptr) == IS_STRING)) {
 			if (OP2_TYPE == IS_UNUSED) {
 				zend_use_new_element_for_string();
 				FREE_OP_DATA();
 				UNDEF_RESULT();
 			} else {
 				dim = GET_OP2_ZVAL_PTR_UNDEF(BP_VAR_R);
 				value = GET_OP_DATA_ZVAL_PTR_UNDEF(BP_VAR_R);
 				zend_assign_to_string_offset(object_ptr, dim, value OPLINE_CC EXECUTE_DATA_CC);
 				FREE_OP_DATA();
 			}
 		} else if (EXPECTED(Z_TYPE_P(object_ptr) <= IS_FALSE)) {
-			if (Z_TYPE_P(object_ptr) == IS_FALSE) {
-				zend_false_to_array_deprecated();
-			}
-
 			if (Z_ISREF_P(orig_object_ptr)
 			 && ZEND_REF_HAS_TYPE_SOURCES(Z_REF_P(orig_object_ptr))
 			 && !zend_verify_ref_array_assignable(Z_REF_P(orig_object_ptr))) {
 				dim = GET_OP2_ZVAL_PTR(BP_VAR_R);
 				FREE_OP_DATA();
 				UNDEF_RESULT();
 			} else {
-				ZVAL_ARR(object_ptr, zend_new_array(8));
+				HashTable *ht = zend_new_array(8);
+				zend_uchar old_type = Z_TYPE_P(object_ptr);
+
+				ZVAL_ARR(object_ptr, ht);
+				if (UNEXPECTED(old_type == IS_FALSE)) {
+					GC_ADDREF(ht);
+					zend_false_to_array_deprecated();
+					if (UNEXPECTED(GC_DELREF(ht) == 0)) {
+						zend_array_destroy(ht);
+						ZEND_VM_C_GOTO(assign_dim_error);
+					}
+				}
 				ZEND_VM_C_GOTO(try_assign_dim_array);
 			}
 		} else {
 			zend_use_scalar_as_array();
 			dim = GET_OP2_ZVAL_PTR(BP_VAR_R);
diff --git a/Zend/zend_vm_execute.h b/Zend/zend_vm_execute.h
index 9e25236043..899c3069f0 100644
Binary files a/Zend/zend_vm_execute.h and b/Zend/zend_vm_execute.h differ
diff --git a/ext/opcache/jit/zend_jit_helpers.c b/ext/opcache/jit/zend_jit_helpers.c
index ec47aa6ef7..2758538504 100644
--- a/ext/opcache/jit/zend_jit_helpers.c
+++ b/ext/opcache/jit/zend_jit_helpers.c
@@ -1099,85 +1099,91 @@ static zend_never_inline void zend_assign_to_string_offset(zval *str, zval *dim,
 static zend_always_inline void ZEND_FASTCALL zend_jit_fetch_dim_obj_helper(zval *object_ptr, zval *dim, zval *result, int type)
 {
 	zval *retval;
 
 	if (EXPECTED(Z_TYPE_P(object_ptr) == IS_OBJECT)) {
 		zend_object *obj = Z_OBJ_P(object_ptr);
 
 		if (dim && UNEXPECTED(Z_ISUNDEF_P(dim))) {
 			const zend_op *opline = EG(current_execute_data)->opline;
 			GC_ADDREF(obj);
 			zend_jit_undefined_op_helper(opline->op2.var);
 			dim = &EG(uninitialized_zval);
 			if (UNEXPECTED(GC_DELREF(obj) == 0)) {
 				zend_objects_store_del(obj);
 				ZVAL_NULL(result);
 				return;
 			}
 		}
 
 		retval = obj->handlers->read_dimension(obj, dim, type, result);
 		if (UNEXPECTED(retval == &EG(uninitialized_zval))) {
 			zend_class_entry *ce = obj->ce;
 
 			ZVAL_NULL(result);
 			zend_error(E_NOTICE, "Indirect modification of overloaded element of %s has no effect", ZSTR_VAL(ce->name));
 		} else if (EXPECTED(retval && Z_TYPE_P(retval) != IS_UNDEF)) {
 			if (!Z_ISREF_P(retval)) {
 				if (result != retval) {
 					ZVAL_COPY(result, retval);
 					retval = result;
 				}
 				if (Z_TYPE_P(retval) != IS_OBJECT) {
 					zend_class_entry *ce = obj->ce;
 					zend_error(E_NOTICE, "Indirect modification of overloaded element of %s has no effect", ZSTR_VAL(ce->name));
 				}
 			} else if (UNEXPECTED(Z_REFCOUNT_P(retval) == 1)) {
 				ZVAL_UNREF(retval);
 			}
 			if (result != retval) {
 				ZVAL_INDIRECT(result, retval);
 			}
 		} else {
 			ZEND_ASSERT(EG(exception) && "read_dimension() returned NULL without exception");
 			ZVAL_UNDEF(result);
 		}
 	} else if (EXPECTED(Z_TYPE_P(object_ptr) == IS_STRING)) {
 		if (!dim) {
 			zend_throw_error(NULL, "[] operator not supported for strings");
 		} else {
 			if (UNEXPECTED(Z_TYPE_P(dim) != IS_LONG)) {
 				zend_check_string_offset(dim/*, BP_VAR_RW*/);
 			}
 			zend_wrong_string_offset_error();
 		}
 		ZVAL_UNDEF(result);
 	} else if (Z_TYPE_P(object_ptr) == IS_FALSE) {
-		zend_false_to_array_deprecated();
 		zend_array *arr = zend_new_array(0);
 		ZVAL_ARR(object_ptr, arr);
+		GC_ADDREF(arr);
+		zend_false_to_array_deprecated();
+		if (UNEXPECTED(GC_DELREF(arr) == 0)) {
+			zend_array_destroy(arr);
+			ZVAL_NULL(result);
+			return;
+		}
 		zval *var;
 		if (dim) {
 			if (type == BP_VAR_W) {
 				var = zend_jit_fetch_dim_w_helper(arr, dim);
 			} else {
 				ZEND_ASSERT(type == BP_VAR_RW);
 				var = zend_jit_fetch_dim_rw_helper(arr, dim);
 			}
 		} else {
 			var = zend_hash_next_index_insert_new(arr, &EG(uninitialized_zval));
 		}
 		if (var) {
 			ZVAL_INDIRECT(result, var);
 		} else {
 			ZVAL_UNDEF(result);
 		}
 	} else {
 		if (type == BP_VAR_UNSET) {
 			zend_throw_error(NULL, "Cannot unset offset in a non-array variable");
 			ZVAL_UNDEF(result);
 		} else {
 			zend_throw_error(NULL, "Cannot use a scalar value as an array");
 			ZVAL_UNDEF(result);
 		}
 	}
 }
@@ -1200,93 +1206,100 @@ static void ZEND_FASTCALL zend_jit_fetch_dim_obj_rw_helper(zval *object_ptr, zva
 static void ZEND_FASTCALL zend_jit_assign_dim_helper(zval *object_ptr, zval *dim, zval *value, zval *result)
 {
 	if (EXPECTED(Z_TYPE_P(object_ptr) == IS_OBJECT)) {
 		zend_object *obj = Z_OBJ_P(object_ptr);
 
 		if (dim && UNEXPECTED(Z_TYPE_P(dim) == IS_UNDEF)) {
 			const zend_op *opline = EG(current_execute_data)->opline;
 			GC_ADDREF(obj);
 			zend_jit_undefined_op_helper(opline->op2.var);
 			dim = &EG(uninitialized_zval);
 			if (UNEXPECTED(GC_DELREF(obj) == 0)) {
 				zend_objects_store_del(obj);
 				if (result) {
 					ZVAL_NULL(result);
 				}
 				return;
 			}
 		}
 
 		if (UNEXPECTED(Z_TYPE_P(value) == IS_UNDEF)) {
 			const zend_op *op_data = EG(current_execute_data)->opline + 1;
 			ZEND_ASSERT(op_data->opcode == ZEND_OP_DATA && op_data->op1_type == IS_CV);
 			GC_ADDREF(obj);
 			zend_jit_undefined_op_helper(op_data->op1.var);
 			value = &EG(uninitialized_zval);
 			if (UNEXPECTED(GC_DELREF(obj) == 0)) {
 				zend_objects_store_del(obj);
 				if (result) {
 					ZVAL_NULL(result);
 				}
 				return;
 			}
 		} else {
 			ZVAL_DEREF(value);
 		}
 
 		Z_OBJ_HT_P(object_ptr)->write_dimension(obj, dim, value);
 		if (result) {
 			if (EXPECTED(!EG(exception))) {
 				ZVAL_COPY(result, value);
 			} else {
 				ZVAL_UNDEF(result);
 			}
 		}
 		return;
 	} else if (EXPECTED(Z_TYPE_P(object_ptr) == IS_STRING) && EXPECTED(dim != NULL)) {
 		zend_assign_to_string_offset(object_ptr, dim, value, result);
 		return;
 	}
 
-	if (dim && UNEXPECTED(Z_TYPE_P(dim) == IS_UNDEF)) {
-		const zend_op *opline = EG(current_execute_data)->opline;
-		zend_jit_undefined_op_helper(opline->op2.var);
-		dim = &EG(uninitialized_zval);
-	}
-
 	if (UNEXPECTED(Z_TYPE_P(value) == IS_UNDEF)) {
 		const zend_op *op_data = EG(current_execute_data)->opline + 1;
 		ZEND_ASSERT(op_data->opcode == ZEND_OP_DATA && op_data->op1_type == IS_CV);
 		zend_jit_undefined_op_helper(op_data->op1.var);
 		value = &EG(uninitialized_zval);
 	}
 
 	if (EXPECTED(Z_TYPE_P(object_ptr) == IS_STRING)) {
 		zend_throw_error(NULL, "[] operator not supported for strings");
 		if (result) {
 			ZVAL_UNDEF(result);
 		}
 	} else if (Z_TYPE_P(object_ptr) == IS_FALSE) {
-		zend_false_to_array_deprecated();
 		zend_array *arr = zend_new_array(0);
 		ZVAL_ARR(object_ptr, arr);
+		GC_ADDREF(arr);
+		zend_false_to_array_deprecated();
+		if (UNEXPECTED(GC_DELREF(arr) == 0)) {
+			zend_array_destroy(arr);
+			if (result) {
+				ZVAL_NULL(result);
+			}
+			return;
+		}
 		zval *var = dim
 			? zend_jit_fetch_dim_w_helper(arr, dim)
 			: zend_hash_next_index_insert_new(arr, &EG(uninitialized_zval));
 		if (!var) {
 			if (result) {
 				ZVAL_UNDEF(result);
 			}
 			return;
 		}
 
 		ZVAL_COPY_DEREF(var, value);
 		if (result) {
 			ZVAL_COPY(result, var);
 		}
 	} else {
+		if (dim && UNEXPECTED(Z_TYPE_P(dim) == IS_UNDEF)) {
+			const zend_op *opline = EG(current_execute_data)->opline;
+			zend_jit_undefined_op_helper(opline->op2.var);
+			dim = &EG(uninitialized_zval);
+		}
 		zend_throw_error(NULL, "Cannot use a scalar value as an array");
 		if (result) {
 			ZVAL_UNDEF(result);
 		}
 	}
 }
@@ -1294,57 +1307,62 @@ static void ZEND_FASTCALL zend_jit_assign_dim_helper(zval *object_ptr, zval *dim
 static void ZEND_FASTCALL zend_jit_assign_dim_op_helper(zval *container, zval *dim, zval *value, binary_op_type binary_op)
 {
 	if (EXPECTED(Z_TYPE_P(container) == IS_OBJECT)) {
 		zend_object *obj = Z_OBJ_P(container);
 		zval *z;
 		zval rv, res;
 
 		if (dim && UNEXPECTED(Z_ISUNDEF_P(dim))) {
 			const zend_op *opline = EG(current_execute_data)->opline;
 			GC_ADDREF(obj);
 			zend_jit_undefined_op_helper(opline->op2.var);
 			dim = &EG(uninitialized_zval);
 			if (UNEXPECTED(GC_DELREF(obj) == 0)) {
 				zend_objects_store_del(obj);
 //???			if (retval) {
 //???				ZVAL_NULL(retval);
 //???			}
 				return;
 			}
 		}
 
 		z = obj->handlers->read_dimension(obj, dim, BP_VAR_R, &rv);
 		if (z != NULL) {
 
 			if (binary_op(&res, Z_ISREF_P(z) ? Z_REFVAL_P(z) : z, value) == SUCCESS) {
 				obj->handlers->write_dimension(obj, dim, &res);
 			}
 			if (z == &rv) {
 				zval_ptr_dtor(&rv);
 			}
 			zval_ptr_dtor(&res);
 		} else {
 			zend_error(E_WARNING, "Attempt to assign property of non-object");
 		}
 	} else if (UNEXPECTED(Z_TYPE_P(container) == IS_STRING)) {
 		if (!dim) {
 			zend_throw_error(NULL, "[] operator not supported for strings");
 		} else {
 			if (UNEXPECTED(Z_TYPE_P(dim) != IS_LONG)) {
 				zend_check_string_offset(dim/*, BP_VAR_RW*/);
 			}
 			zend_wrong_string_offset_error();
 		}
 	} else if (Z_TYPE_P(container) == IS_FALSE) {
-		zend_false_to_array_deprecated();
 		zend_array *arr = zend_new_array(0);
 		ZVAL_ARR(container, arr);
+		GC_ADDREF(arr);
+		zend_false_to_array_deprecated();
+		if (UNEXPECTED(GC_DELREF(arr) == 0)) {
+			zend_array_destroy(arr);
+			return;
+		}
 		zval *var = dim
 			? zend_jit_fetch_dim_rw_helper(arr, dim)
 			: zend_hash_next_index_insert_new(arr, &EG(uninitialized_zval));
 		if (var) {
 			binary_op(var, var, value);
 		}
 	} else {
 		zend_throw_error(NULL, "Cannot use a scalar value as an array");
 	}
 }
