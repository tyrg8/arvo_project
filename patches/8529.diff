commit 4ea7ac960d9ecb6a407d0e660312f5701d3dcd49
Author: Albert Astals Cid <aacid@kde.org>
Date:   Fri May 25 16:35:49 2018 +0200

    SplashFTFont::getGlyphPath: early return if textScale == 0
    
    fixes oss-fuzz/8529

diff --git a/splash/SplashFTFont.cc b/splash/SplashFTFont.cc
index 0b2b6afe..1f1c6ada 100644
--- a/splash/SplashFTFont.cc
+++ b/splash/SplashFTFont.cc
@@ -397,50 +397,54 @@ struct SplashFTFontPath {
 SplashPath *SplashFTFont::getGlyphPath(int c) {
   static FT_Outline_Funcs outlineFuncs = {
 #if FREETYPE_MINOR <= 1
     (int (*)(FT_Vector *, void *))&glyphPathMoveTo,
     (int (*)(FT_Vector *, void *))&glyphPathLineTo,
     (int (*)(FT_Vector *, FT_Vector *, void *))&glyphPathConicTo,
     (int (*)(FT_Vector *, FT_Vector *, FT_Vector *, void *))&glyphPathCubicTo,
 #else
     &glyphPathMoveTo,
     &glyphPathLineTo,
     &glyphPathConicTo,
     &glyphPathCubicTo,
 #endif
     0, 0
   };
   SplashFTFontFile *ff;
   SplashFTFontPath path;
   FT_GlyphSlot slot;
   FT_UInt gid;
   FT_Glyph glyph;
 
+  if (unlikely(textScale == 0)) {
+    return nullptr;
+  }
+
   ff = (SplashFTFontFile *)fontFile;
   ff->face->size = sizeObj;
   FT_Set_Transform(ff->face, &textMatrix, nullptr);
   slot = ff->face->glyph;
   if (ff->codeToGID && c < ff->codeToGIDLen && c >= 0) {
     gid = ff->codeToGID[c];
   } else {
     gid = (FT_UInt)c;
   }
   if (FT_Load_Glyph(ff->face, gid, getFTLoadFlags(ff->type1, ff->trueType, aa, enableFreeTypeHinting, enableSlightHinting))) {
     return nullptr;
   }
   if (FT_Get_Glyph(slot, &glyph)) {
     return nullptr;
   }
   if (FT_Outline_Check(&((FT_OutlineGlyph)glyph)->outline)) {
     return nullptr;
   }
   path.path = new SplashPath();
   path.textScale = textScale;
   path.needClose = gFalse;
   FT_Outline_Decompose(&((FT_OutlineGlyph)glyph)->outline,
 		       &outlineFuncs, &path);
   if (path.needClose) {
     path.path->close();
   }
   FT_Done_Glyph(glyph);
   return path.path;
 }
