commit f2d7c57c71a0810b25fc2bead63c5ab35e5d0284
Author: Dirk Farin <dirk.farin@gmail.com>
Date:   Tue Apr 18 23:49:15 2023 +0200

    fix out-of-bounds read (oss-fuzz Issue 58150)

diff --git a/libheif/region.cc b/libheif/region.cc
index 4c3fccc..417fade 100644
--- a/libheif/region.cc
+++ b/libheif/region.cc
@@ -28,76 +28,81 @@
 Error RegionItem::parse(const std::vector<uint8_t>& data)
 {
   if (data.size() < 8) {
     return Error(heif_error_Invalid_input, heif_suberror_Invalid_region_data,
                  "Less than 8 bytes of data");
   }
 
   uint8_t version = data[0];
   (void) version; // version is unused
 
   uint8_t flags = data[1];
   int field_size = ((flags & 1) ? 32 : 16);
 
   unsigned int dataOffset;
   if (field_size == 32) {
     if (data.size() < 12) {
       return Error(heif_error_Invalid_input, heif_suberror_Invalid_region_data,
                    "Region data incomplete");
     }
     reference_width =
         ((data[2] << 24) | (data[3] << 16) | (data[4] << 8) | (data[5]));
 
     reference_height =
         ((data[6] << 24) | (data[7] << 16) | (data[8] << 8) | (data[9]));
     dataOffset = 10;
   }
   else {
     reference_width = ((data[2] << 8) | (data[3]));
     reference_height = ((data[4] << 8) | (data[5]));
     dataOffset = 6;
   }
 
   uint8_t region_count = data[dataOffset];
   dataOffset += 1;
   for (int i = 0; i < region_count; i++) {
+    if (data.size() <= dataOffset) {
+      return Error(heif_error_Invalid_input, heif_suberror_Invalid_region_data,
+                   "Region data incomplete");
+    }
+
     uint8_t geometry_type = data[dataOffset];
     dataOffset += 1;
 
     std::shared_ptr<RegionGeometry> region;
 
     if (geometry_type == 0) {
       region = std::make_shared<RegionGeometry_Point>();
     }
     else if (geometry_type == 1) {
       region = std::make_shared<RegionGeometry_Rectangle>();
     }
     else if (geometry_type == 2) {
       region = std::make_shared<RegionGeometry_Ellipse>();
     }
     else if (geometry_type == 3) {
       auto polygon = std::make_shared<RegionGeometry_Polygon>();
       polygon->closed = true;
       region = polygon;
     }
     else if (geometry_type == 6) {
       auto polygon = std::make_shared<RegionGeometry_Polygon>();
       polygon->closed = false;
       region = polygon;
     }
     else {
       //     // TODO: this isn't going to work - we can only exit here.
       //   std::cout << "ignoring unsupported region geometry type: "
       //             << (int)geometry_type << std::endl;
 
       continue;
     }
 
     Error error = region->parse(data, field_size, &dataOffset);
     if (error) {
       return error;
     }
 
     mRegions.push_back(region);
   }
   return Error::Ok;
 }
