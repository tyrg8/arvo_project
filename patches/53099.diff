commit f4e873e493b87fbc1bbc5f40065a2bbcc2437f35
Author: Alex <aleksandrosansan@gmail.com>
Date:   Thu Jun 1 03:46:25 2023 +0200

    Fix out of bounds memory read in pcpp::SomeIpSdLayer::SomeIpSdLayer (#1143)

diff --git a/Packet++/header/SomeIpSdLayer.h b/Packet++/header/SomeIpSdLayer.h
index 2cf24162..551cacc0 100644
--- a/Packet++/header/SomeIpSdLayer.h
+++ b/Packet++/header/SomeIpSdLayer.h
@@ -621,113 +621,121 @@ class SomeIpSdLayer : public SomeIpLayer
 {
 public:
 	friend class SomeIpSdEntry;
 
 	typedef SomeIpSdEntry* EntryPtr;
 	typedef std::vector<EntryPtr> EntriesVec;
 	typedef SomeIpSdOption* OptionPtr;
 	typedef std::vector<OptionPtr> OptionsVec;
 
 	/**
 	 * A constructor that creates the layer from an existing packet raw data
 	 * @param[in] data A pointer to the raw data
 	 * @param[in] dataLen Size of the data in bytes
 	 * @param[in] prevLayer A pointer to the previous layer
 	 * @param[in] packet A pointer to the Packet instance where layer will be stored in
 	 */
 	SomeIpSdLayer(uint8_t *data, size_t dataLen, Layer *prevLayer, Packet *packet);
 
 	/**
 	 * Construct a new SomeIpSdLayer object
 	 * @param[in] serviceID Service ID
 	 * @param[in] methodID Method ID
 	 * @param[in] clientID Client ID
 	 * @param[in] sessionID Session ID
 	 * @param[in] interfaceVersion Interface Version
 	 * @param[in] type Type of the message
 	 * @param[in] returnCode Return Code
 	 * @param[in] flags Flags that shall be used in the header
 	 */
 	SomeIpSdLayer(uint16_t serviceID, uint16_t methodID, uint16_t clientID, uint16_t sessionID,
 				  uint8_t interfaceVersion, MsgType type, uint8_t returnCode, uint8_t flags);
 
 	/**
 	 * Destroy the layer object
 	 */
 	~SomeIpSdLayer() {}
 
 	/**
 	 * Checks if given port is a SOME/IP-SD protocol port
 	 * @param[in] port Port to check
 	 * @return true if SOME/IP-SD protocol port, false if not
 	 */
 	static bool isSomeIpSdPort(uint16_t port) { return port == 30490; }
 
+	/**
+	* The static method makes validation of input data
+	* @param[in] data The pointer to the beginning of byte stream of IP packet
+	* @param[in] dataLen The length of byte stream
+	* @return True if the data is valid and can represent the packet
+	*/
+	static bool isDataValid(const uint8_t* data, size_t dataLen);
+
 	/**
 	 * Get the Flags of the layer
 	 * @return uint8_t Flags
 	 */
 	uint8_t getFlags() const;
 
 	/**
 	 * Set the Flags of the layer
 	 * @param[in] flags Flags to set
 	 */
 	void setFlags(uint8_t flags);
 
 	/**
 	 * Get the number of entries in this layer
 	 * @return uint32_t
 	 */
 	uint32_t getNumEntries() const;
 
 	/**
 	 * Get the number of options in this layer
 	 * @return uint32_t
 	 */
 	uint32_t getNumOptions() const;
 
 	/**
 	 * Get the Entries from this layer
 	 * @return EntriesVec Vector holding pointers to the options
 	 */
 	const EntriesVec getEntries() const;
 
 	/**
 	 * Get the Options from this layer
 	 * @return OptionsVec Vector holding pointers to the options
 	 */
 	const OptionsVec getOptions() const;
 
 	/**
 	 * Get the Options from a specific Entry
 	 * @param[in] index Index of the Entry, starting with 0.
 	 * @return OptionsVec Vector holding pointers to the options
 	 */
 	const OptionsVec getOptionsFromEntry(uint32_t index) const;
 
 	/**
 	 * Adds a given entry to the layer and returns the index of the entry
 	 * @param[in] entry Pointer to the entry that shall be added to the layer
 	 * @return uint32_t Returns the index of the entry starting with 0
 	 */
 	uint32_t addEntry(const SomeIpSdEntry &entry);
 
 	/**
 	 * Adds an option to an entry that has already been added to the layer by using addEntry(). The option
 	 * is also added to the layer itself. If the option cannot by assigned to the entry, the option is not
 	 * copied into the layer.
 	 * @param[in] indexEntry Index of the entry where the option shall be added. First Entry has index 0
 	 * @param[in] option Pointer to the option that shall be added
 	 * @return True if the option could be assigned to the entry and was copied into the layer, false otherwise
 	 */
 	bool addOptionTo(uint32_t indexEntry, const SomeIpSdOption &option);
 
 	/**
 	 * Does nothing for this layer
 	 */
 	void computeCalculateFields() {};
 
 	/**
 	 * @return The string representation of the SOME/IP-SD layer
 	 */
 	std::string toString() const;
@@ -735,35 +743,36 @@ public:
 private:
 	/**
 	 * @struct someipsdhdr
 	 * Represents an SOME/IP-SD protocol header
 	 */
 #pragma pack(push, 1)
 	struct someipsdhdr : someiphdr
 	{
 		/** Flags (8 bit) */
 		uint8_t flags;
 		/** Reserved1 field (Bits 0-7 of 24-bits reserved field) */
 		uint8_t reserved1;
 		/** Reserved2 field (Bits 8-15 of 24-bits reserved field) */
 		uint8_t reserved2;
 		/** Reserved3 field (Bits 16-23 of 24-bits reserved field) */
 		uint8_t reserved3;
 	};
 #pragma pack(pop)
 
 	uint32_t m_NumOptions;
 
 	uint32_t countOptions();
 	uint32_t findOption(const SomeIpSdOption &option);
 	void addOption(const SomeIpSdOption &option);
 	bool addOptionIndex(uint32_t indexEntry, uint32_t indexOffset);
 	OptionPtr parseOption(SomeIpSdOption::OptionType type, size_t offset) const;
 
+	static size_t getLenEntries(const uint8_t* data);
 	size_t getLenEntries() const;
 	size_t getLenOptions() const;
 	void setLenEntries(uint32_t length);
 	void setLenOptions(uint32_t length);
 };
 
 } // namespace pcpp
 #endif /* PACKETPP_SOMEIPSD_LAYER */
diff --git a/Packet++/src/SomeIpLayer.cpp b/Packet++/src/SomeIpLayer.cpp
index bcf002e6..f97c006a 100644
--- a/Packet++/src/SomeIpLayer.cpp
+++ b/Packet++/src/SomeIpLayer.cpp
@@ -47,48 +47,48 @@ SomeIpLayer::SomeIpLayer(uint16_t serviceID, uint16_t methodID, uint16_t clientI
 Layer* SomeIpLayer::parseSomeIpLayer(uint8_t *data, size_t dataLen, Layer* prevLayer, Packet* packet)
 {
 	/* Ideas taken from wireshark some ip dissector */
 	const size_t headerLen = sizeof(someiphdr);
 	if (dataLen < headerLen)
 		return new PayloadLayer(data, dataLen, prevLayer, packet);
 
 	uint32_t lengthBE = 0;
 	memcpy(&lengthBE, data + sizeof(uint32_t), sizeof(uint32_t)); // length field in SOME/IP header
 	uint32_t length = be32toh(lengthBE);
 	if ((length < 8) || (length > dataLen - 8))
 		return new PayloadLayer(data, dataLen, prevLayer, packet);
 
 	if (data[12] != SOMEIP_PROTOCOL_VERSION)
 		return new PayloadLayer(data, dataLen, prevLayer, packet);
 
 	someiphdr *hdr = (someiphdr *)data;
 
 	switch (static_cast<MsgType>(hdr->msgType & ~(uint8_t)MsgType::TP_REQUEST))
 	{
 	case MsgType::REQUEST:
 	case MsgType::REQUEST_ACK:
 	case MsgType::REQUEST_NO_RETURN:
 	case MsgType::REQUEST_NO_RETURN_ACK:
 	case MsgType::NOTIFICATION:
 	case MsgType::NOTIFICATION_ACK:
 	case MsgType::RESPONSE:
 	case MsgType::RESPONSE_ACK:
 	case MsgType::ERRORS:
 	case MsgType::ERROR_ACK:
 		break;
 	default:
 		return new PayloadLayer(data, dataLen, prevLayer, packet);
 	}
 
-	if (be16toh(hdr->serviceID) == 0xFFFF && be16toh(hdr->methodID) == 0x8100)
+	if (be16toh(hdr->serviceID) == 0xFFFF && be16toh(hdr->methodID) == 0x8100 && SomeIpSdLayer::isDataValid(data, dataLen))
 	{
 		return new SomeIpSdLayer(data, dataLen, prevLayer, packet);
 	}
 	else if ((hdr->msgType & (uint8_t)SomeIpLayer::MsgType::TP_REQUEST) != 0)
 	{
 		return new SomeIpTpLayer(data, dataLen, prevLayer, packet);
 	}
 	else
 	{
 		return new SomeIpLayer(data, dataLen, prevLayer, packet);
 	}
 }
diff --git a/Packet++/src/SomeIpSdLayer.cpp b/Packet++/src/SomeIpSdLayer.cpp
index de21de8a..2f599dc6 100644
--- a/Packet++/src/SomeIpSdLayer.cpp
+++ b/Packet++/src/SomeIpSdLayer.cpp
@@ -631,6 +631,16 @@ uint32_t SomeIpSdLayer::addEntry(const SomeIpSdEntry &entry)
 	return getNumEntries() - 1;
 }
 
+bool SomeIpSdLayer::isDataValid(const uint8_t* data, size_t dataLen)
+{
+	if (!data || dataLen < sizeof(someipsdhdr) + sizeof(uint32_t) || dataLen < sizeof(someipsdhdr) + sizeof(uint32_t) + getLenEntries(data))
+	{
+		return false;
+	}
+
+	return true;
+}
+
 uint32_t SomeIpSdLayer::countOptions()
 {
 	size_t offsetOption = sizeof(someipsdhdr) + sizeof(uint32_t) + getLenEntries() + sizeof(uint32_t);
@@ -768,7 +778,12 @@ SomeIpSdLayer::OptionPtr SomeIpSdLayer::parseOption(SomeIpSdOption::OptionType t
 
 size_t SomeIpSdLayer::getLenEntries() const
 {
-	return be32toh(*((uint32_t *)(m_Data + sizeof(someipsdhdr))));
+	return getLenEntries(m_Data);
+}
+
+size_t SomeIpSdLayer::getLenEntries(const uint8_t* data)
+{
+	return be32toh(*((uint32_t *)(data + sizeof(someipsdhdr))));
 }
 
 size_t SomeIpSdLayer::getLenOptions() const
