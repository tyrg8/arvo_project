commit 05b133fc8a3a7ee927d0d54a2232a74edd3602b7
Merge: cdf13cc6c09 e3f5230822a
Author: Alexey Milovidov <milovidov@clickhouse.com>
Date:   Sun Nov 6 22:30:09 2022 +0100

    Merge pull request #42980 from evillique/fix-parser-2
    
    Fix a bug in CAST function parser

diff --git a/src/Parsers/ExpressionListParsers.cpp b/src/Parsers/ExpressionListParsers.cpp
index c362340d013..2a41196c15d 100644
--- a/src/Parsers/ExpressionListParsers.cpp
+++ b/src/Parsers/ExpressionListParsers.cpp
@@ -1111,98 +1111,101 @@ class CastLayer : public Layer
 {
 public:
     CastLayer() : Layer(/*allow_alias*/ true, /*allow_alias_without_as_keyword*/ true) {}
 
     bool parse(IParser::Pos & pos, Expected & expected, Action & action) override
     {
         /// CAST(x [AS alias1], T [AS alias2]) or CAST(x [AS alias1] AS T)
         ///
         /// 0. Parse all the cases (-> 1)
         /// 1. Parse closing token (finished)
 
         ParserKeyword as_keyword_parser("AS");
         ASTPtr alias;
 
         /// expr AS type
         if (state == 0)
         {
             ASTPtr type_node;
 
             if (as_keyword_parser.ignore(pos, expected))
             {
                 auto old_pos = pos;
 
                 if (ParserIdentifier().parse(pos, alias, expected) &&
                     as_keyword_parser.ignore(pos, expected) &&
                     ParserDataType().parse(pos, type_node, expected) &&
                     ParserToken(TokenType::ClosingRoundBracket).ignore(pos, expected))
                 {
                     if (!insertAlias(alias))
                         return false;
 
                     if (!mergeElement())
                         return false;
 
                     elements = {createFunctionCast(elements[0], type_node)};
                     finished = true;
                     return true;
                 }
 
                 pos = old_pos;
 
                 if (ParserIdentifier().parse(pos, alias, expected) &&
                     ParserToken(TokenType::Comma).ignore(pos, expected))
                 {
                     action = Action::OPERAND;
                     if (!insertAlias(alias))
                         return false;
 
                     if (!mergeElement())
                         return false;
 
                     state = 1;
                     return true;
                 }
 
                 pos = old_pos;
 
                 if (ParserDataType().parse(pos, type_node, expected) &&
                     ParserToken(TokenType::ClosingRoundBracket).ignore(pos, expected))
                 {
                     if (!mergeElement())
                         return false;
 
                     elements = {createFunctionCast(elements[0], type_node)};
                     finished = true;
                     return true;
                 }
 
                 return false;
             }
 
             if (ParserToken(TokenType::Comma).ignore(pos, expected))
             {
                 action = Action::OPERAND;
 
                 if (!mergeElement())
                     return false;
 
                 state = 1;
                 return true;
             }
         }
         if (state == 1)
         {
             if (ParserToken(TokenType::ClosingRoundBracket).ignore(pos, expected))
             {
                 if (!mergeElement())
                     return false;
 
+                if (elements.size() != 2)
+                    return false;
+
                 elements = {makeASTFunction("CAST", elements[0], elements[1])};
                 finished = true;
                 return true;
             }
         }
 
         return true;
     }
 };
@@ -1406,10 +1409,10 @@ public:
 protected:
     bool getResultImpl(ASTPtr & node) override
     {
-        if (state == 2)
+        if (state == 2 && elements.size() == 2)
             std::swap(elements[1], elements[0]);
 
         node = makeASTFunction("position", std::move(elements));
         return true;
     }
 };
diff --git a/tests/queries/0_stateless/02476_fix_cast_parser_bug.reference b/tests/queries/0_stateless/02476_fix_cast_parser_bug.reference
new file mode 100644
index 00000000000..e69de29bb2d
diff --git a/tests/queries/0_stateless/02476_fix_cast_parser_bug.sql b/tests/queries/0_stateless/02476_fix_cast_parser_bug.sql
new file mode 100644
index 00000000000..6b01b3a8c0b
--- /dev/null
+++ b/tests/queries/0_stateless/02476_fix_cast_parser_bug.sql
@@ -0,0 +1 @@
+SELECT CAST(a, b -> c) ++; -- { clientError SYNTAX_ERROR }
