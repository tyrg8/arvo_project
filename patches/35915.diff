commit f7341664b1f3cc6e14586d5396d04003e8ad646a
Author: Ann Priestman <apriestman@basistech.com>
Date:   Thu Sep 16 09:50:40 2021 -0400

    Update hfs_dent.c

diff --git a/tsk/fs/hfs_dent.c b/tsk/fs/hfs_dent.c
index 2395c4f83..17bde096b 100644
--- a/tsk/fs/hfs_dent.c
+++ b/tsk/fs/hfs_dent.c
@@ -200,195 +200,195 @@ static uint8_t
 hfs_dir_open_meta_cb(HFS_INFO * hfs, int8_t level_type,
     const hfs_btree_key_cat * cur_key, int cur_keylen, size_t nodesize,
     TSK_OFF_T key_off, void *ptr)
 {
     HFS_DIR_OPEN_META_INFO *info = (HFS_DIR_OPEN_META_INFO *) ptr;
     TSK_FS_INFO *fs = &hfs->fs_info;
 
     if (tsk_verbose)
         fprintf(stderr,
             "hfs_dir_open_meta_cb: want %" PRIu32 " vs got %" PRIu32
             " (%s node)\n", info->cnid, tsk_getu32(hfs->fs_info.endian,
                 cur_key->parent_cnid),
             (level_type == HFS_BT_NODE_TYPE_IDX) ? "Index" : "Leaf");
 
     if (level_type == HFS_BT_NODE_TYPE_IDX) {
         if (tsk_getu32(hfs->fs_info.endian,
                 cur_key->parent_cnid) < info->cnid) {
             return HFS_BTREE_CB_IDX_LT;
         }
         else {
             return HFS_BTREE_CB_IDX_EQGT;
         }
     }
     else {
         uint8_t *rec_buf = (uint8_t *) cur_key;
         uint16_t rec_type;
         size_t rec_off2;
 
         if (tsk_getu32(hfs->fs_info.endian,
                 cur_key->parent_cnid) < info->cnid) {
             return HFS_BTREE_CB_LEAF_GO;
         }
         else if (tsk_getu32(hfs->fs_info.endian,
                 cur_key->parent_cnid) > info->cnid) {
             return HFS_BTREE_CB_LEAF_STOP;
         }
 	// Need at least 2 bytes for key_len
         if (cur_keylen < 2) {
             tsk_error_set_errno(TSK_ERR_FS_GENFS);
             tsk_error_set_errstr("hfs_dir_open_meta: cur_keylen value out of bounds");
             return HFS_BTREE_CB_ERR;
         }
         rec_off2 = 2 + tsk_getu16(hfs->fs_info.endian, cur_key->key_len);
 
         if ((nodesize < 2) || (rec_off2 >= nodesize - 2)) {
             tsk_error_set_errno(TSK_ERR_FS_GENFS);
             tsk_error_set_errstr("hfs_dir_open_meta: nodesize value out of bounds");
             return HFS_BTREE_CB_ERR;
         }
         rec_type = tsk_getu16(hfs->fs_info.endian, &rec_buf[rec_off2]);
 
         // Catalog entry is for a file
         if (rec_type == HFS_FILE_THREAD) {
             tsk_error_set_errno(TSK_ERR_FS_GENFS);
             tsk_error_set_errstr("hfs_dir_open_meta: Entry"
                 " is a file, not a folder");
             return HFS_BTREE_CB_ERR;
         }
 
         /* This will link the folder to its parent, which is the ".." entry */
         else if (rec_type == HFS_FOLDER_THREAD) {
             hfs_thread *thread = (hfs_thread *) & rec_buf[rec_off2];
             strcpy(info->fs_name->name, "..");
             info->fs_name->meta_addr =
                 tsk_getu32(hfs->fs_info.endian, thread->parent_cnid);
             info->fs_name->type = TSK_FS_NAME_TYPE_DIR;
             info->fs_name->flags = TSK_FS_NAME_FLAG_ALLOC;
         }
 
         /* This is a folder in the folder */
         else if (rec_type == HFS_FOLDER_RECORD) {
-            if ((nodesize < sizeof(hfs_folder)) || (rec_off2 >= nodesize - sizeof(hfs_folder))) {
+            if ((nodesize < sizeof(hfs_folder)) || (rec_off2 > nodesize - sizeof(hfs_folder))) {
                 tsk_error_set_errno(TSK_ERR_FS_GENFS);
                 tsk_error_set_errstr("hfs_dir_open_meta: nodesize value out of bounds");
                 return HFS_BTREE_CB_ERR;
             }
             hfs_folder *folder = (hfs_folder *) & rec_buf[rec_off2];
 
             info->fs_name->meta_addr =
                 tsk_getu32(hfs->fs_info.endian, folder->std.cnid);
             info->fs_name->type = TSK_FS_NAME_TYPE_DIR;
             info->fs_name->flags = TSK_FS_NAME_FLAG_ALLOC;
 
             // Make sure there is enough space in cur_key for the name 
             // (name is unicode so each characters is two bytes; 6 bytes
             // of non-name characters)
             const int32_t nameLength =
                 tsk_getu16(hfs->fs_info.endian, cur_key->name.length);
 
             if (2*nameLength > tsk_getu16(hfs->fs_info.endian, cur_key->key_len) - 6) {
                 error_returned
                 ("hfs_dir_open_meta_cb: name length is too long");
                 return HFS_BTREE_CB_ERR;
             }
             if (hfs_UTF16toUTF8(fs, (uint8_t *) cur_key->name.unicode,
                     nameLength, info->fs_name->name, HFS_MAXNAMLEN + 1,
                     HFS_U16U8_FLAG_REPLACE_SLASH)) {
                 return HFS_BTREE_CB_ERR;
             }
         }
 
         /* This is a normal file in the folder */
         else if (rec_type == HFS_FILE_RECORD) {
             if ((nodesize < sizeof(hfs_file)) || (rec_off2 >= nodesize - sizeof(hfs_file))) {
                 tsk_error_set_errno(TSK_ERR_FS_GENFS);
                 tsk_error_set_errstr("hfs_dir_open_meta: nodesize value out of bounds");
                 return HFS_BTREE_CB_ERR;
             }
             hfs_file *file = (hfs_file *) & rec_buf[rec_off2];
             // This could be a hard link.  We need to test this CNID, and follow it if necessary.
             unsigned char is_err;
             TSK_INUM_T file_cnid =
                 tsk_getu32(hfs->fs_info.endian, file->std.cnid);
             TSK_INUM_T target_cnid =
                 hfs_follow_hard_link(hfs, file, &is_err);
             if (is_err > 1) {
                 error_returned
                     ("hfs_dir_open_meta_cb: trying to follow a possible hard link in the directory");
                 return HFS_BTREE_CB_ERR;
             }
             if (target_cnid != file_cnid) {
                 HFS_ENTRY entry;
                 uint8_t lkup;   // lookup result
 
                 // This is a hard link.  We need to fill in the name->type and name->meta_addr from the target
                 info->fs_name->meta_addr = target_cnid;
                 // get the Catalog entry for the target CNID
 
                 lkup = hfs_cat_file_lookup(hfs, target_cnid, &entry,
                     FALSE);
                 if (lkup != 0) {
                     error_returned
                         ("hfs_dir_open_meta_cb: retrieving the catalog entry for the target of a hard link");
                     return HFS_BTREE_CB_ERR;
                 }
                 info->fs_name->type =
                     hfsmode2tsknametype(tsk_getu16(hfs->fs_info.endian,
                         entry.cat.std.perm.mode));
             }
             else {
                 // This is NOT a hard link.
                 info->fs_name->meta_addr =
                     tsk_getu32(hfs->fs_info.endian, file->std.cnid);
                 info->fs_name->type =
                     hfsmode2tsknametype(tsk_getu16(hfs->fs_info.endian,
                         file->std.perm.mode));
             }
             info->fs_name->flags = TSK_FS_NAME_FLAG_ALLOC;
 
             // Make sure there is enough space in cur_key for the name 
             // (name is unicode so each characters is two bytes; 6 bytes
             // of non-name characters)
             const int32_t nameLength =
                 tsk_getu16(hfs->fs_info.endian, cur_key->name.length);
             if (2*nameLength > tsk_getu16(hfs->fs_info.endian, cur_key->key_len) - 6) {
                 error_returned
                 ("hfs_dir_open_meta_cb: name length is too long");
                 return HFS_BTREE_CB_ERR;
             }
             if (hfs_UTF16toUTF8(fs, (uint8_t *) cur_key->name.unicode,
                     nameLength, info->fs_name->name, HFS_MAXNAMLEN + 1,
                     HFS_U16U8_FLAG_REPLACE_SLASH)) {
                 return HFS_BTREE_CB_ERR;
             }
         }
         else {
             tsk_error_set_errno(TSK_ERR_FS_GENFS);
             // @@@ MAY NEED TO IMPROVE BELOW MESSAGE
             tsk_error_set_errstr
                 ("hfs_dir_open_meta: Unknown record type %d in leaf node",
                 rec_type);
             return HFS_BTREE_CB_ERR;
         }
 
         if (tsk_fs_dir_add(info->fs_dir, info->fs_name)) {
             return HFS_BTREE_CB_ERR;
         }
         return HFS_BTREE_CB_LEAF_GO;
     }
 }
 
 /** \internal
 * Process a directory and load up FS_DIR with the entries. If a pointer to
 * an already allocated FS_DIR structure is given, it will be cleared.  If no existing
 * FS_DIR structure is passed (i.e. NULL), then a new one will be created. If the return
 * value is error or corruption, then the FS_DIR structure could
 * have entries (depending on when the error occurred).
 *
 * @param a_fs File system to analyze
 * @param a_fs_dir Pointer to FS_DIR pointer. Can contain an already allocated
 * structure or a new structure.
 * @param a_addr Address of directory to process.
 * @param recursion_depth Recursion depth to limit the number of self-calls
 * @returns error, corruption, ok etc.
 */
