commit 25a8d72c9aa1a71f5e1d5d8d1ab3eeb193548ce2
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Sun Feb 11 11:43:09 2018 -0500

    ...

diff --git a/PerlMagick/quantum/quantum.xs.in b/PerlMagick/quantum/quantum.xs.in
index 1e70c9aaf..a982bf1f3 100644
--- a/PerlMagick/quantum/quantum.xs.in
+++ b/PerlMagick/quantum/quantum.xs.in
@@ -3971,156 +3971,156 @@ void
 EvaluateImages(ref,...)
   Image::Magick::@MAGICK_ABI_SUFFIX@ ref = NO_INIT
   ALIAS:
     EvaluateImages   = 1
     evaluateimages   = 2
   PPCODE:
   {
     AV
       *av;
 
-    ,...char
+    char
       *attribute,
       *p;
 
     ExceptionInfo
       *exception;
 
     HV
       *hv;
 
     Image
       *image;
 
     MagickEvaluateOperator
       op;
 
     register ssize_t
       i;
 
     struct PackageInfo
       *info;
 
     SV
       *perl_exception,
       *reference,
       *rv,
       *sv;
 
     PERL_UNUSED_VAR(ref);
     PERL_UNUSED_VAR(ix);
     exception=AcquireExceptionInfo();
     perl_exception=newSVpv("",0);
     sv=NULL;
     if (sv_isobject(ST(0)) == 0)
       {
         ThrowPerlException(exception,OptionError,"ReferenceIsNotMyType",
           PackageName);
         goto PerlException;
       }
     reference=SvRV(ST(0));
     hv=SvSTASH(reference);
     image=SetupList(aTHX_ reference,&info,(SV ***) NULL,exception);
     if (image == (Image *) NULL)
       {
         ThrowPerlException(exception,OptionError,"NoImagesDefined",
           PackageName);
         goto PerlException;
       }
     op=MeanEvaluateOperator;
     if (items == 2)
       {
         ssize_t
           in;
 
         in=ParseCommandOption(MagickEvaluateOptions,MagickFalse,(char *)
           SvPV(ST(1),na));
         if (in < 0)
           {
             ThrowPerlException(exception,OptionError,"UnrecognizedType",
               SvPV(ST(1),na));
             return;
           }
         op=(MagickEvaluateOperator) in;
       }
     else
       for (i=2; i < items; i+=2)
       {
         attribute=(char *) SvPV(ST(i-1),na);
         switch (*attribute)
         {
           case 'O':
           case 'o':
           {
             if (LocaleCompare(attribute,"operator") == 0)
               {
                 ssize_t
                   in;
 
                 in=!SvPOK(ST(i)) ? SvIV(ST(i)) : ParseCommandOption(
                   MagickEvaluateOptions,MagickFalse,SvPV(ST(i),na));
                 if (in < 0)
                   {
                     ThrowPerlException(exception,OptionError,"UnrecognizedType",
                       SvPV(ST(i),na));
                     return;
                   }
                 op=(MagickEvaluateOperator) in;
                 break;
               }
             ThrowPerlException(exception,OptionError,"UnrecognizedAttribute",
               attribute);
             break;
           }
           default:
           {
             ThrowPerlException(exception,OptionError,"UnrecognizedAttribute",
               attribute);
             break;
           }
         }
       }
     image=EvaluateImages(image,op,exception);
     if (image == (Image *) NULL)
       goto PerlException;
     /*
       Create blessed Perl array for the returned image.
     */
     av=newAV();
     ST(0)=sv_2mortal(sv_bless(newRV((SV *) av),hv));
     SvREFCNT_dec(av);
     AddImageToRegistry(sv,image);
     rv=newRV(sv);
     av_push(av,sv_bless(rv,hv));
     SvREFCNT_dec(sv);
     info=GetPackageInfo(aTHX_ (void *) av,info,exception);
     (void) FormatLocaleString(info->image_info->filename,MagickPathExtent,
       "evaluate-%.*s",(int) (MagickPathExtent-9),
       ((p=strrchr(image->filename,'/')) ? p+1 : image->filename));
     (void) CopyMagickString(image->filename,info->image_info->filename,
       MagickPathExtent);
     SetImageInfo(info->image_info,0,exception);
     exception=DestroyExceptionInfo(exception);
     SvREFCNT_dec(perl_exception);
     XSRETURN(1);
 
   PerlException:
     InheritPerlException(exception,perl_exception);
     exception=DestroyExceptionInfo(exception);
     sv_setiv(perl_exception,(IV) SvCUR(perl_exception) != 0);
     SvPOK_on(perl_exception);
     ST(0)=sv_2mortal(perl_exception);
     XSRETURN(1);
   }
 
 #
 ###############################################################################
 #                                                                             #
 #                                                                             #
 #                                                                             #
 #   F e a t u r e s                                                           #
 #                                                                             #
 #                                                                             #
 #                                                                             #
 ###############################################################################
 #
 #
