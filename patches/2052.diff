commit 1d7a1679162b4879e624483e95e5874d1d0334c7
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Sat Jun 3 09:43:11 2017 +0000

    NTF: prevent stack buffer overflow. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=2052. Credit to OSS Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@38829 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/ogr/ogrsf_frmts/ntf/ntf.h b/gdal/ogr/ogrsf_frmts/ntf/ntf.h
index 3e84f31a9d..4666d3fa41 100644
--- a/gdal/ogr/ogrsf_frmts/ntf/ntf.h
+++ b/gdal/ogr/ogrsf_frmts/ntf/ntf.h
@@ -207,169 +207,169 @@ typedef int (*NTFRecordGrouper)(NTFFileReader *, NTFRecord **, NTFRecord *);
 class NTFFileReader
 {
     char             *pszFilename;
     OGRNTFDataSource *poDS;
 
     VSILFILE         *fp;
 
     // feature class list.
     int               nFCCount;
     char            **papszFCNum;
     char            **papszFCName;
 
     // attribute definitions
     int               nAttCount;
     NTFAttDesc       *pasAttDesc;
 
     char             *pszTileName;
     int               nCoordWidth;
     int               nZWidth;
     int               nNTFLevel;
 
     double            dfXYMult;
     double            dfZMult;
 
     double            dfXOrigin;
     double            dfYOrigin;
 
     double            dfTileXSize;
     double            dfTileYSize;
 
     double            dfScale;
     double            dfPaperToGround;
 
     vsi_l_offset      nStartPos;
     vsi_l_offset      nPreSavedPos;
     vsi_l_offset      nPostSavedPos;
     NTFRecord        *poSavedRecord;
 
     long              nSavedFeatureId;
     long              nBaseFeatureId;
     long              nFeatureCount;
 
     NTFRecord         *apoCGroup[MAX_REC_GROUP+1];
 
     char             *pszProduct;
     char             *pszPVName;
     int               nProduct;
 
     void              EstablishLayers();
 
     void              ClearCGroup();
     void              ClearDefs();
 
     OGRNTFLayer       *apoTypeTranslation[100];
 
     NTFRecordGrouper  pfnRecordGrouper;
 
     int               anIndexSize[100];
     NTFRecord         **apapoRecordIndex[100];
     int               bIndexBuilt;
     int               bIndexNeeded;
 
     void              EstablishRasterAccess();
     int               nRasterXSize;
     int               nRasterYSize;
     int               nRasterDataType;
     double            adfGeoTransform[6];
 
     OGRNTFRasterLayer *poRasterLayer;
 
     vsi_l_offset     *panColumnOffset;
 
     int               bCacheLines;
     int               nLineCacheSize;
     OGRGeometry     **papoLineCache;
     
     void              AddToIndexGroup( NTFRecord * poRecord );
 
   public:
     explicit           NTFFileReader( OGRNTFDataSource * );
                       ~NTFFileReader();
 
     int               Open( const char * pszFilename = NULL );
     void              Close();
     VSILFILE         *GetFP() { return fp; }
     void              GetFPPos( vsi_l_offset *pnPos, long * pnFeatureId);
     int               SetFPPos( vsi_l_offset nPos, long nFeatureId );
     void              Reset();
     void              SetBaseFID( long nFeatureId );
 
     OGRGeometry      *ProcessGeometry( NTFRecord *, int * = NULL );
     OGRGeometry      *ProcessGeometry3D( NTFRecord *, int * = NULL );
     static int               ProcessAttDesc( NTFRecord *, NTFAttDesc * );
     int               ProcessAttRec( NTFRecord *, int *, char ***, char ***);
     int               ProcessAttRecGroup( NTFRecord **, char ***, char ***);
 
     NTFAttDesc       *GetAttDesc( const char * );
 
     void              ApplyAttributeValues( OGRFeature *, NTFRecord **, ... );
 
     int               ApplyAttributeValue( OGRFeature *, int, const char *,
                                            char **, char ** );
 
     int               ProcessAttValue( const char *pszValType,
                                        const char *pszRawValue,
-                                       char **ppszAttName,
-                                       char **ppszAttValue,
-                                       char **ppszCodeDesc );
+                                       const char **ppszAttName,
+                                       const char **ppszAttValue,
+                                       const char **ppszCodeDesc );
 
     int               TestForLayer( OGRNTFLayer * );
     OGRFeature       *ReadOGRFeature( OGRNTFLayer * = NULL );
     NTFRecord       **ReadRecordGroup();
     NTFRecord        *ReadRecord();
     void              SaveRecord( NTFRecord * );
 
     void              DumpReadable( FILE * );
 
     int               GetXYLen() { return nCoordWidth; }
     double            GetXYMult() { return dfXYMult; }
     double            GetXOrigin() { return dfXOrigin; }
     double            GetYOrigin() { return dfYOrigin; }
     double            GetZMult() { return dfZMult; }
     const char       *GetTileName() { return pszTileName; }
     const char       *GetFilename() { return pszFilename; }
     int               GetNTFLevel() { return nNTFLevel; }
     const char       *GetProduct() { return pszProduct; }
     const char       *GetPVName() { return pszPVName; }
     int               GetProductId() { return nProduct; }
     double            GetScale() { return dfScale; }
     double            GetPaperToGround() { return dfPaperToGround; }
 
     int               GetFCCount() { return nFCCount; }
     int               GetFeatureClass( int, char **, char ** );
 
     void              OverrideTileName( const char * );
 
     // Generic file index
     void              IndexFile();
     void              FreshenIndex();
     void              DestroyIndex();
     NTFRecord        *GetIndexedRecord( int, int );
     NTFRecord       **GetNextIndexedRecordGroup( NTFRecord ** );
 
     // Line geometry cache
     OGRGeometry      *CacheGetByGeomId( int );
     void              CacheAddByGeomId( int, OGRGeometry * );
     void              CacheClean();
     void              CacheLineGeometryInGroup( NTFRecord ** );
 
     int               FormPolygonFromCache( OGRFeature * );
 
     // just for use of OGRNTFDatasource
     void              EstablishLayer( const char *, OGRwkbGeometryType,
                                       NTFFeatureTranslator, int,
                                       NTFGenericClass *, ... );
 
     // Raster related
     int               IsRasterProduct();
     int               GetRasterXSize() { return nRasterXSize; }
     int               GetRasterYSize() { return nRasterYSize; }
     int               GetRasterDataType() { return nRasterDataType; }
     double           *GetGeoTransform() { return adfGeoTransform; }
     CPLErr            ReadRasterColumn( int, float * );
 
 };
 
 /************************************************************************/
 /*                             OGRNTFLayer                              */
 /************************************************************************/
diff --git a/gdal/ogr/ogrsf_frmts/ntf/ntf_generic.cpp b/gdal/ogr/ogrsf_frmts/ntf/ntf_generic.cpp
index 4d86e8151f..f47b48c2da 100644
--- a/gdal/ogr/ogrsf_frmts/ntf/ntf_generic.cpp
+++ b/gdal/ogr/ogrsf_frmts/ntf/ntf_generic.cpp
@@ -287,73 +287,73 @@ void OGRNTFDataSource::WorkupGeneric( NTFFileReader * poReader )
 static void AddGenericAttributes( NTFFileReader * poReader,
                                   NTFRecord **papoGroup,
                                   OGRFeature * poFeature )
 
 {
     char **papszTypes = NULL;
     char **papszValues = NULL;
 
     if( !poReader->ProcessAttRecGroup( papoGroup, &papszTypes, &papszValues ) )
         return;
 
     for( int iAtt = 0; papszTypes != NULL && papszTypes[iAtt] != NULL; iAtt++ )
     {
         int iField = 0;
 
         if( EQUAL(papszTypes[iAtt],"TX") )
             iField = poFeature->GetFieldIndex("TEXT");
         else if( EQUAL(papszTypes[iAtt],"FC") )
             iField = poFeature->GetFieldIndex("FEAT_CODE");
         else
             iField = poFeature->GetFieldIndex(papszTypes[iAtt]);
 
         if( iField == -1 )
             continue;
 
         poReader->ApplyAttributeValue( poFeature, iField, papszTypes[iAtt],
                                        papszTypes, papszValues );
 
 /* -------------------------------------------------------------------- */
 /*      Do we have a corresponding list field we should be              */
 /*      accumulating this into?                                         */
 /* -------------------------------------------------------------------- */
         char szListName[128] = {};
 
         snprintf( szListName, sizeof(szListName), "%s_LIST",
                  poFeature->GetFieldDefnRef(iField)->GetNameRef() );
         const int iListField = poFeature->GetFieldIndex( szListName );
 
 /* -------------------------------------------------------------------- */
 /*      Yes, so perform processing similar to ApplyAttributeValue(),    */
 /*      and append to list value.                                       */
 /* -------------------------------------------------------------------- */
         if( iListField != -1 )
         {
-            char *pszAttLongName = NULL;
-            char *pszAttValue = NULL;
-            char *pszCodeDesc = NULL;
+            const char *pszAttLongName = NULL;
+            const char *pszAttValue = NULL;
+            const char *pszCodeDesc = NULL;
 
             poReader->ProcessAttValue( papszTypes[iAtt], papszValues[iAtt],
                                        &pszAttLongName, &pszAttValue,
                                        &pszCodeDesc );
 
             if( poFeature->IsFieldSetAndNotNull( iListField ) )
             {
                 poFeature->SetField( iListField,
                     CPLSPrintf( "%s,%s",
                                 poFeature->GetFieldAsString( iListField ),
                                 pszAttValue ) );
             }
             else
             {
                 poFeature->SetField( iListField, pszAttValue );
             }
         }
     }
 
     CSLDestroy( papszTypes );
     CSLDestroy( papszValues );
 }
 
 /************************************************************************/
 /*                        TranslateGenericNode()                        */
 /************************************************************************/
@@ -609,53 +609,53 @@ static OGRFeature *TranslateGenericName( NTFFileReader *poReader,
 static OGRFeature *TranslateGenericPoint( NTFFileReader *poReader,
                                           OGRNTFLayer *poLayer,
                                           NTFRecord **papoGroup )
 
 {
     if( CSLCount((char **) papoGroup) < 2
         || papoGroup[0]->GetType() != NRT_POINTREC
         || (papoGroup[1]->GetType() != NRT_GEOMETRY
             && papoGroup[1]->GetType() != NRT_GEOMETRY3D) )
     {
         return NULL;
     }
 
     OGRFeature  *poFeature = new OGRFeature( poLayer->GetLayerDefn() );
 
     // POINT_ID
     poFeature->SetField( "POINT_ID", atoi(papoGroup[0]->GetField( 3, 8 )) );
 
     // Geometry
     poFeature->SetGeometryDirectly(poReader->ProcessGeometry(papoGroup[1]));
     poFeature->SetField( "GEOM_ID", papoGroup[1]->GetField(3,8) );
 
     // ATTREC Attributes
     AddGenericAttributes( poReader, papoGroup, poFeature );
 
     // Handle singular attribute in pre-level 3 POINTREC.
     if( poReader->GetNTFLevel() < 3 )
     {
         char    szValType[3];
 
         snprintf( szValType, sizeof(szValType), "%s", papoGroup[0]->GetField(9,10) );
         if( !EQUAL(szValType,"  ") )
         {
-            char *pszProcessedValue = NULL;
+            const char *pszProcessedValue = NULL;
 
             if( poReader->ProcessAttValue(szValType,
                                           papoGroup[0]->GetField(11,16),
                                           NULL, &pszProcessedValue, NULL ) )
                 poFeature->SetField(szValType, pszProcessedValue);
         }
 
         if( !EQUAL(papoGroup[0]->GetField(17,20),"    ") )
         {
             poFeature->SetField("FEAT_CODE",papoGroup[0]->GetField(17,20));
         }
     }
 
     return poFeature;
 }
 
 /************************************************************************/
 /*                        TranslateGenericLine()                        */
 /************************************************************************/
@@ -663,51 +663,51 @@ static OGRFeature *TranslateGenericPoint( NTFFileReader *poReader,
 static OGRFeature *TranslateGenericLine( NTFFileReader *poReader,
                                          OGRNTFLayer *poLayer,
                                          NTFRecord **papoGroup )
 
 {
     if( CSLCount((char **) papoGroup) < 2
         || papoGroup[0]->GetType() != NRT_LINEREC
         || (papoGroup[1]->GetType() != NRT_GEOMETRY
             && papoGroup[1]->GetType() != NRT_GEOMETRY3D) )
         return NULL;
 
     OGRFeature  *poFeature = new OGRFeature( poLayer->GetLayerDefn() );
 
     // LINE_ID
     poFeature->SetField( "LINE_ID", atoi(papoGroup[0]->GetField( 3, 8 )) );
 
     // Geometry
     poFeature->SetGeometryDirectly(poReader->ProcessGeometry(papoGroup[1]));
     poFeature->SetField( "GEOM_ID", papoGroup[1]->GetField(3,8) );
 
     // ATTREC Attributes
     AddGenericAttributes( poReader, papoGroup, poFeature );
 
     // Handle singular attribute in pre-level 3 LINEREC.
     if( poReader->GetNTFLevel() < 3 )
     {
         char szValType[3] = {};
 
         snprintf( szValType, sizeof(szValType), "%s", papoGroup[0]->GetField(9,10) );
         if( !EQUAL(szValType,"  ") )
         {
-            char *pszProcessedValue = NULL;
+            const char *pszProcessedValue = NULL;
 
             if( poReader->ProcessAttValue(szValType,
                                           papoGroup[0]->GetField(11,16),
                                           NULL, &pszProcessedValue, NULL ) )
                 poFeature->SetField(szValType, pszProcessedValue);
         }
 
         if( !EQUAL(papoGroup[0]->GetField(17,20),"    ") )
         {
             poFeature->SetField("FEAT_CODE",papoGroup[0]->GetField(17,20));
         }
     }
 
     return poFeature;
 }
 
 /************************************************************************/
 /*                        TranslateGenericPoly()                        */
 /************************************************************************/
diff --git a/gdal/ogr/ogrsf_frmts/ntf/ntffilereader.cpp b/gdal/ogr/ogrsf_frmts/ntf/ntffilereader.cpp
index a868724436..37295e2d7f 100644
--- a/gdal/ogr/ogrsf_frmts/ntf/ntffilereader.cpp
+++ b/gdal/ogr/ogrsf_frmts/ntf/ntffilereader.cpp
@@ -961,114 +961,122 @@ int NTFFileReader::ProcessAttRec( NTFRecord * poRecord,
 NTFAttDesc * NTFFileReader::GetAttDesc( const char * pszType )
 
 {
     for( int i = 0; i < nAttCount; i++ )
     {
         if( EQUALN(pszType, pasAttDesc[i].val_type, 2) )
             return pasAttDesc + i;
     }
 
     return NULL;
 }
 
 /************************************************************************/
 /*                          ProcessAttValue()                           */
 /*                                                                      */
 /*      Take an attribute type/value pair and transform into a          */
 /*      meaningful attribute name, and value.  The source can be an     */
 /*      ATTREC or the VAL_TYPE/VALUE pair of a POINTREC or LINEREC.     */
 /*      The name is transformed from the two character short form to    */
 /*      the long user name.  The value will be transformed from         */
 /*      fixed point (with the decimal implicit) to fixed point with     */
 /*      an explicit decimal point if it has a "R" format.               */
+/*      Note: the returned *ppszAttValue has a very short lifetime      */
+/*      and should immediately be used. Further calls to                */
+/*      ProcessAttValue or CPLSPrintf() will invalidate it.             */
 /************************************************************************/
 
 int NTFFileReader::ProcessAttValue( const char *pszValType,
                                     const char *pszRawValue,
-                                    char **ppszAttName,
-                                    char **ppszAttValue,
-                                    char **ppszCodeDesc )
+                                    const char **ppszAttName,
+                                    const char **ppszAttValue,
+                                    const char **ppszCodeDesc )
 
 {
 /* -------------------------------------------------------------------- */
 /*      Find the ATTDESC for this attribute, and assign return name value.*/
 /* -------------------------------------------------------------------- */
     NTFAttDesc *psAttDesc = GetAttDesc(pszValType);
 
     if( psAttDesc == NULL )
         return FALSE;
 
     if( ppszAttName != NULL )
         *ppszAttName = psAttDesc->att_name;
 
 /* -------------------------------------------------------------------- */
 /*      Extract the value.  If it is formatted as fixed point real      */
 /*      we reprocess it to insert the decimal point.                    */
 /* -------------------------------------------------------------------- */
     if( psAttDesc->finter[0] == 'R' )
     {
         const char *pszDecimalPortion = NULL; // Used after for.
 
         for( pszDecimalPortion = psAttDesc->finter;
              *pszDecimalPortion != ',' && *pszDecimalPortion != '\0';
              pszDecimalPortion++ ) {}
+        if( *pszDecimalPortion == '\0' )
+        {
+            *ppszAttValue = "";
+        }
+        else
+        {
+            const int nWidth = static_cast<int>(strlen(pszRawValue));
+            const int nPrecision = atoi(pszDecimalPortion+1);
+            if( nPrecision < 0 || nPrecision >= nWidth )
+            {
+                *ppszAttValue = "";
+            }
+            else
+            {
+                CPLString osResult(pszRawValue);
+                osResult.resize(nWidth - nPrecision);
+                osResult += ".";
+                osResult += pszRawValue+nWidth-nPrecision;
 
-        const int nWidth = static_cast<int>(strlen(pszRawValue));
-        const int nPrecision = atoi(pszDecimalPortion+1);
-
-        // TODO(schwehr): Why static?
-        static char szRealString[30] = {};
-        strncpy( szRealString, pszRawValue, nWidth - nPrecision );
-        szRealString[nWidth-nPrecision] = '.';
-        strcpy( szRealString+nWidth-nPrecision+1,
-                pszRawValue+nWidth-nPrecision );
-
-        *ppszAttValue = szRealString;
+                *ppszAttValue = CPLSPrintf("%s", osResult.c_str());
+            }
+        }
     }
 
 /* -------------------------------------------------------------------- */
 /*      If it is an integer, we just reformat to get rid of leading     */
 /*      zeros.                                                          */
 /* -------------------------------------------------------------------- */
     else if( psAttDesc->finter[0] == 'I' )
     {
-        // TODO(schwehr): Why static?
-        static char szIntString[30]; // FIXME thread unsafe
-
-        snprintf( szIntString, sizeof(szIntString), "%d", atoi(pszRawValue) );
-
-        *ppszAttValue = szIntString;
+        *ppszAttValue = CPLSPrintf("%d", atoi(pszRawValue) );
     }
 
 /* -------------------------------------------------------------------- */
 /*      Otherwise we take the value directly.                           */
 /* -------------------------------------------------------------------- */
     else
     {
-        *ppszAttValue = (char *) pszRawValue;
+        *ppszAttValue = pszRawValue;
     }
 
 /* -------------------------------------------------------------------- */
 /*      Handle processing code values into code descriptions, if        */
 /*      applicable.                                                     */
 /* -------------------------------------------------------------------- */
     if( ppszCodeDesc == NULL )
     {
     }
     else if( psAttDesc->poCodeList != NULL )
     {
-        *ppszCodeDesc = (char *)psAttDesc->poCodeList->Lookup( *ppszAttValue );
+        *ppszCodeDesc = psAttDesc->poCodeList->Lookup( *ppszAttValue );
     }
     else
     {
         *ppszCodeDesc = NULL;
     }
 
     return TRUE;
 }
 
 /************************************************************************/
 /*                        ApplyAttributeValues()                        */
 /*                                                                      */
 /*      Apply a series of attribute values to a feature from generic    */
 /*      attribute records.                                              */
 /************************************************************************/
@@ -1121,53 +1129,53 @@ void NTFFileReader::ApplyAttributeValues( OGRFeature * poFeature,
 int NTFFileReader::ApplyAttributeValue( OGRFeature * poFeature, int iField,
                                         const char * pszAttName,
                                         char ** papszTypes,
                                         char ** papszValues )
 
 {
 /* -------------------------------------------------------------------- */
 /*      Find the requested attribute in the name/value pair             */
 /*      provided.  If not found that's fine, just return with           */
 /*      notification.                                                   */
 /* -------------------------------------------------------------------- */
     const int iValue = CSLFindString( papszTypes, pszAttName );
     if( iValue < 0 )
         return FALSE;
 
     CPLAssert(papszValues != NULL);
 /* -------------------------------------------------------------------- */
 /*      Process the attribute value ... this really only has a          */
 /*      useful effect for real numbers.                                 */
 /* -------------------------------------------------------------------- */
-    char *pszAttLongName = NULL;
-    char *pszAttValue = NULL;
-    char *pszCodeDesc = NULL;
+    const char *pszAttLongName = NULL;
+    const char *pszAttValue = NULL;
+    const char *pszCodeDesc = NULL;
 
     if( !ProcessAttValue( pszAttName, papszValues[iValue],
                           &pszAttLongName, &pszAttValue, &pszCodeDesc ) )
         return FALSE;
 
 /* -------------------------------------------------------------------- */
 /*      Apply the value to the field using the simple set string        */
 /*      method.  Leave it to the OGRFeature::SetField() method to       */
 /*      take care of translation to other types.                        */
 /* -------------------------------------------------------------------- */
     poFeature->SetField( iField, pszAttValue );
 
 /* -------------------------------------------------------------------- */
 /*      Apply the code description if we found one.                     */
 /* -------------------------------------------------------------------- */
     if( pszCodeDesc != NULL )
     {
         char    szDescFieldName[256];
 
         snprintf( szDescFieldName, sizeof(szDescFieldName), "%s_DESC",
                  poFeature->GetDefnRef()->GetFieldDefn(iField)->GetNameRef() );
         poFeature->SetField( szDescFieldName, pszCodeDesc );
     }
 
     return TRUE;
 }
 
 /************************************************************************/
 /*                             SaveRecord()                             */
 /************************************************************************/
