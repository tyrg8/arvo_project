commit 0d5d7852f1dfee64aade1ff31eebf7427841d531
Author: Michael Vrhel <michael.vrhel@artifex.com>
Date:   Wed Jan 5 11:35:18 2022 -0800

    Add device ICC profile into psd file resources

diff --git a/devices/gdevpsd.c b/devices/gdevpsd.c
index dca203ccf..d526a1434 100644
--- a/devices/gdevpsd.c
+++ b/devices/gdevpsd.c
@@ -949,137 +949,167 @@ get_sep_name(gx_devn_prn_device *pdev, int n)
 }
 
 int
-psd_write_header(psd_write_ctx *xc, gx_devn_prn_device *pdev)
+psd_write_header(psd_write_ctx* xc, gx_devn_prn_device* pdev)
 {
     int code = 0;
     int num_channels = xc->num_channels;
     int bpc = pdev->devn_params.bitspercomponent;
     int chan_idx;
     int chan_names_len = 0;
     int sep_num;
-    const devn_separation_name *separation_name;
+    const devn_separation_name* separation_name;
+    cmm_dev_profile_t* profile_struct;
+    cmm_profile_t* dev_profile;
+    int profile_resource_size;
 
-    psd_write(xc, (const byte *)"8BPS", 4); /* Signature */
+    psd_write(xc, (const byte*)"8BPS", 4); /* Signature */
     psd_write_16(xc, 1); /* Version - Always equal to 1*/
     /* Reserved 6 Bytes - Must be zero */
     psd_write_32(xc, 0);
     psd_write_16(xc, 0);
     psd_write_16(xc, (bits16)num_channels); /* Channels (2 Bytes) - Supported range is 1 to 56 */
     psd_write_32(xc, xc->height); /* Rows */
     psd_write_32(xc, xc->width); /* Columns */
     psd_write_16(xc, bpc); /* Depth - 1, 8 and 16 */
     /* Modes: Bitmap=0, Grayscale=1, RGB=3, CMYK=4 MultiChannel=7 Lab=9 */
-    psd_write_16(xc, (bits16) xc->base_num_channels);  /* We use 1, 3 or 4. */
+    psd_write_16(xc, (bits16)xc->base_num_channels);  /* We use 1, 3 or 4. */
 
-    /* Color Mode Data */
-    psd_write_32(xc, 0); 	/* No color mode data */
+    /* Color Mode Data.  Only used for indexed and duotone */
+    psd_write_32(xc, 0);
+
+    /* Resources */
 
-    /* Image Resources */
+    /* ICC profile */
+    code = dev_proc(pdev, get_profile)((gx_device*)pdev, &profile_struct);
+    if (code < 0) {
+        dev_profile = NULL;
+        profile_resource_size = 0;
+    } else {
+        dev_profile = profile_struct->device_profile[GS_DEFAULT_DEVICE_PROFILE];
+
+        /* Resource has to be padded to even size */
+        profile_resource_size = dev_profile->buffer_size + dev_profile->buffer_size % 2;
+    }
 
-    /* Channel Names */
+    /* Channel Names size computation */
     for (chan_idx = NUM_CMYK_COMPONENTS; chan_idx < xc->num_channels; chan_idx++) {
         fixed_colorant_name n = pdev->devn_params.std_colorant_names[chan_idx];
         if (n == NULL)
             break;
         chan_names_len += strlen(n) + 1;
     }
     for (; chan_idx < xc->num_channels; chan_idx++) {
         sep_num = xc->chnl_to_orig_sep[chan_idx] - NUM_CMYK_COMPONENTS;
         separation_name = &(pdev->devn_params.separations.names[sep_num]);
         chan_names_len += (separation_name->size + 1);
     }
+
+    /* Length of resource section */
     psd_write_32(xc, 12 + (chan_names_len + (chan_names_len % 2))
                         + (12 + (14 * (xc->num_channels - xc->base_num_channels)))
-                        + 28);
+                        + (profile_resource_size ? (12 + profile_resource_size) : 0) + 28);
+
+    /* Channel names resource */
     psd_write(xc, (const byte *)"8BIM", 4);
     psd_write_16(xc, 1006); /* 0x03EE */
     psd_write_16(xc, 0); /* PString */
     psd_write_32(xc, chan_names_len + (chan_names_len % 2));
     for (chan_idx = NUM_CMYK_COMPONENTS; chan_idx < xc->num_channels; chan_idx++) {
         int len;
         fixed_colorant_name n = pdev->devn_params.std_colorant_names[chan_idx];
         if (n == NULL)
             break;
         len = strlen(n);
         psd_write_8(xc, (byte)len);
         psd_write(xc, (const byte *)n, len);
     }
     for (; chan_idx < xc->num_channels; chan_idx++) {
         sep_num = xc->chnl_to_orig_sep[chan_idx] - NUM_CMYK_COMPONENTS;
         separation_name = &(pdev->devn_params.separations.names[sep_num]);
         psd_write_8(xc, (byte) separation_name->size);
         psd_write(xc, separation_name->data, separation_name->size);
     }
     if (chan_names_len % 2)
         psd_write_8(xc, 0); /* pad */
 
-    /* DisplayInfo - Colors for each spot channels */
+    /* DisplayInfo - Colors for each spot channels resource*/
     psd_write(xc, (const byte *)"8BIM", 4);
     psd_write_16(xc, 1007); /* 0x03EF */
     psd_write_16(xc, 0); /* PString */
     psd_write_32(xc, 14 * (xc->num_channels - xc->base_num_channels)); /* Length */
     for (chan_idx = NUM_CMYK_COMPONENTS; chan_idx < xc->num_channels; chan_idx++) {
         sep_num = xc->chnl_to_orig_sep[chan_idx] - NUM_CMYK_COMPONENTS;
         psd_write_16(xc, 02); /* CMYK */
         /* PhotoShop stores all component values as if they were additive. */
         if (pdev->equiv_cmyk_colors.color[sep_num].color_info_valid) {
 #define convert_color(component) ((bits16)((65535 * ((double)\
     (frac_1 - pdev->equiv_cmyk_colors.color[sep_num].component)) / frac_1)))
             psd_write_16(xc, convert_color(c)); /* Cyan */
             psd_write_16(xc, convert_color(m)); /* Magenta */
             psd_write_16(xc, convert_color(y)); /* Yellow */
             psd_write_16(xc, convert_color(k)); /* Black */
 #undef convert_color
         } else {
             /* This is a bit of a hack, introduced for the psdcmykog device
              * so that we get a reasonable approximation for the colors out
              * even when used without the appropriate profile. */
             fixed_colorant_name sepname = get_sep_name(pdev, chan_idx);
             if (sepname && !strcmp(sepname, "Artifex Orange")) {
                 psd_write_16(xc, 0xfbde); /* Cyan */
                 psd_write_16(xc, 0x7376); /* Magenta */
                 psd_write_16(xc, 0x0000); /* Yellow */
                 psd_write_16(xc, 0xffff); /* Black */
             } else if (sepname && !strcmp(sepname, "Artifex Green")) {
                 psd_write_16(xc, 0x0000); /* Cyan */
                 psd_write_16(xc, 0xe33d); /* Magenta */
                 psd_write_16(xc, 0x0000); /* Yellow */
                 psd_write_16(xc, 0xf8c8); /* Black */
             } else {
                 /* Else set C = M = Y = 0, K = 1 */
                 psd_write_16(xc, 65535); /* Cyan */
                 psd_write_16(xc, 65535); /* Magenta */
                 psd_write_16(xc, 65535); /* Yellow */
                 psd_write_16(xc, 0); /* Black */
             }
         }
         psd_write_16(xc, 0); /* Opacity 0 to 100 */
         psd_write_8(xc, 2); /* Don't know */
         psd_write_8(xc, 0); /* Padding - Always Zero */
     }
 
-    /* Image resolution */
+    /* Image resolution resource */
     psd_write(xc, (const byte *)"8BIM", 4);
     psd_write_16(xc, 1005); /* 0x03ED */
     psd_write_16(xc, 0); /* PString */
     psd_write_32(xc, 16); /* Length */
                 /* Resolution is specified as a fixed 16.16 bits */
     psd_write_32(xc, (int) (pdev->HWResolution[0] * 0x10000 * xc->width / pdev->width + 0.5));
     psd_write_16(xc, 1);	/* width:  1 --> resolution is pixels per inch */
     psd_write_16(xc, 1);	/* width:  1 --> resolution is pixels per inch */
     psd_write_32(xc, (int) (pdev->HWResolution[1] * 0x10000 * xc->height / pdev->height + 0.5));
     psd_write_16(xc, 1);	/* height:  1 --> resolution is pixels per inch */
     psd_write_16(xc, 1);	/* height:  1 --> resolution is pixels per inch */
 
+    /* ICC Profile resource */
+    if (profile_resource_size) {
+        psd_write(xc, (const byte*)"8BIM", 4);
+        psd_write_16(xc, 1039); /* 0x040F */
+        psd_write_16(xc, 0);    /* PString */
+        psd_write_32(xc, profile_resource_size);
+        psd_write(xc, dev_profile->buffer, dev_profile->buffer_size);
+        if (dev_profile->buffer_size % 2)
+            psd_write_8(xc, 0);
+    }
+
     /* Layer and Mask information */
     psd_write_32(xc, 0); 	/* No layer or mask information */
 
     /* Compression: 0=None, 1=RLE/PackBits, 2=Deflate 3=Defalte+Prediction */
     psd_write_16(xc, 0);
 
     return code;
 }
 
 /*
  * Close device and clean up ICC structures.
  */
