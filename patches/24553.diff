commit 97b8e41997160f2113e1e6fcde230ccb857167af
Author: Kim Kulling <kimkulling@users.noreply.github.com>
Date:   Fri Nov 12 09:56:45 2021 +0100

    Fix formatting

diff --git a/code/Common/RemoveComments.cpp b/code/Common/RemoveComments.cpp
index 2de9666de..e9e2a6ade 100644
--- a/code/Common/RemoveComments.cpp
+++ b/code/Common/RemoveComments.cpp
@@ -4,7 +4,6 @@ Open Asset Import Library (assimp)
 
 Copyright (c) 2006-2021, assimp team
 
-
 All rights reserved.
 
 Redistribution and use of this software in source and binary forms,
@@ -37,85 +36,86 @@ THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 ----------------------------------------------------------------------
 */
 
-/** @file  RemoveComments.cpp
+/** 
+ *  @file  RemoveComments.cpp
  *  @brief Defines the CommentRemover utility class
  */
 
 #include <assimp/RemoveComments.h>
 #include <assimp/ParsingUtils.h>
 
-namespace Assimp    {
+namespace Assimp {
 
 // ------------------------------------------------------------------------------------------------
 // Remove line comments from a file
-void CommentRemover::RemoveLineComments(const char* szComment,
-    char* szBuffer, char chReplacement /* = ' ' */)
-{
+void CommentRemover::RemoveLineComments(const char* szComment, char* szBuffer, char chReplacement /* = ' ' */) {
     // validate parameters
     ai_assert(nullptr != szComment);
     ai_assert(nullptr != szBuffer);
     ai_assert(*szComment);
 
     size_t len = strlen(szComment);
     const size_t lenBuffer = strlen(szBuffer);
     if (len > lenBuffer) {
         len = lenBuffer;
     }
 
     for(size_t i = 0; i < lenBuffer; i++) {
         // skip over quotes
         if (szBuffer[i] == '\"' || szBuffer[i] == '\'')
             while (++i < lenBuffer && szBuffer[i] != '\"' && szBuffer[i] != '\'');
 
         if(lenBuffer - i < len) {
             break;
         }
 
         if (!strncmp(szBuffer + i,szComment,len)) {
-            while (i < lenBuffer && !IsLineEnd(szBuffer[i]))
+            while (i < lenBuffer && !IsLineEnd(szBuffer[i])) {
                 szBuffer[i++] = chReplacement;
+            }
         }
     }
 }
 
 // ------------------------------------------------------------------------------------------------
 // Remove multi-line comments from a file
 void CommentRemover::RemoveMultiLineComments(const char* szCommentStart,
-    const char* szCommentEnd,char* szBuffer,
-    char chReplacement)
-{
+        const char* szCommentEnd,char* szBuffer,
+        char chReplacement) {
     // validate parameters
     ai_assert(nullptr != szCommentStart);
     ai_assert(nullptr != szCommentEnd);
     ai_assert(nullptr != szBuffer);
     ai_assert(*szCommentStart);
     ai_assert(*szCommentEnd);
 
     const size_t len  = strlen(szCommentEnd);
     const size_t len2 = strlen(szCommentStart);
 
     while (*szBuffer)   {
         // skip over quotes
-        if (*szBuffer == '\"' || *szBuffer == '\'')
+        if (*szBuffer == '\"' || *szBuffer == '\'') {
             while (*szBuffer++ && *szBuffer != '\"' && *szBuffer != '\'');
+        }
 
         if (!strncmp(szBuffer,szCommentStart,len2))  {
             while (*szBuffer) {
                 if (!::strncmp(szBuffer,szCommentEnd,len)) {
-                    for (unsigned int i = 0; i < len;++i)
+                    for (unsigned int i = 0; i < len;++i) {
                         *szBuffer++ = chReplacement;
+                    }
 
                     break;
                 }
-            *szBuffer++ = chReplacement;
+                *szBuffer++ = chReplacement;
             }
             continue;
         }
         ++szBuffer;
     }
 }
 
 } // !! Assimp
