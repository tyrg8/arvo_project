commit e1dbfc17c5305eef8f021c1baa703151bffc1490
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Sun Jan 30 09:17:56 2022 -0800

    Load debug section only when dumping debug sections
    
    Don't load debug sections if we aren't dumping any debug sections.
    
            PR binutils/28843
            * objdump.c (dump_any_debugging): New.
            (load_debug_section): Return false if dump_any_debugging isn't
            set.
            (main): Set dump_any_debugging when dumping any debug sections.
            * readelf (dump_any_debugging): New.
            (parse_args): Set dump_any_debugging when dumping any debug
            sections.
            (load_debug_section): Return false if dump_any_debugging isn't
            set.

diff --git a/binutils/objdump.c b/binutils/objdump.c
index 08a0fe521d8..24e91869bfd 100644
--- a/binutils/objdump.c
+++ b/binutils/objdump.c
@@ -131,6 +131,7 @@ static bool color_output = false;	/* --visualize-jumps=color.  */
 static bool extended_color_output = false; /* --visualize-jumps=extended-color.  */
 static int process_links = false;       /* --process-links.  */
 
+static int dump_any_debugging;
 static int demangle_flags = DMGL_ANSI | DMGL_PARAMS;
 
 /* A structure to record the sections mentioned in -j switches.  */
@@ -3847,34 +3848,37 @@ bool
 load_debug_section (enum dwarf_section_display_enum debug, void *file)
 {
   struct dwarf_section *section = &debug_displays [debug].section;
   bfd *abfd = (bfd *) file;
   asection *sec;
   const char *name;
 
+  if (!dump_any_debugging)
+    return false;
+
   /* If it is already loaded, do nothing.  */
   if (section->start != NULL)
     {
       if (streq (section->filename, bfd_get_filename (abfd)))
 	return true;
     }
   /* Locate the debug section.  */
   name = section->uncompressed_name;
   sec = bfd_get_section_by_name (abfd, name);
   if (sec == NULL)
     {
       name = section->compressed_name;
       if (*name)
 	sec = bfd_get_section_by_name (abfd, name);
     }
   if (sec == NULL)
     {
       name = section->xcoff_name;
       if (*name)
 	sec = bfd_get_section_by_name (abfd, name);
     }
   if (sec == NULL)
     return false;
 
   section->name = name;
   return load_specific_debug_section (debug, sec, file);
 }
@@ -5349,365 +5353,369 @@ int
 main (int argc, char **argv)
 {
   int c;
   char *target = default_target;
   bool seenflag = false;
 
 #ifdef HAVE_LC_MESSAGES
   setlocale (LC_MESSAGES, "");
 #endif
   setlocale (LC_CTYPE, "");
 
   bindtextdomain (PACKAGE, LOCALEDIR);
   textdomain (PACKAGE);
 
   program_name = *argv;
   xmalloc_set_program_name (program_name);
   bfd_set_error_program_name (program_name);
 
   START_PROGRESS (program_name, 0);
 
   expandargv (&argc, &argv);
 
   if (bfd_init () != BFD_INIT_MAGIC)
     fatal (_("fatal error: libbfd ABI mismatch"));
   set_default_bfd_target ();
 
   while ((c = getopt_long (argc, argv,
 			   "CDE:FGHI:LM:P:RSTU:VW::ab:defghij:lm:prstvwxz",
 			   long_options, (int *) 0))
 	 != EOF)
     {
       switch (c)
 	{
 	case 0:
 	  break;		/* We've been given a long option.  */
 	case 'm':
 	  machine = optarg;
 	  break;
 	case 'M':
 	  {
 	    char *options;
 	    if (disassembler_options)
 	      /* Ignore potential memory leak for now.  */
 	      options = concat (disassembler_options, ",",
 				optarg, (const char *) NULL);
 	    else
 	      options = optarg;
 	    disassembler_options = remove_whitespace_and_extra_commas (options);
 	  }
 	  break;
 	case 'j':
 	  add_only (optarg);
 	  break;
 	case 'F':
 	  display_file_offsets = true;
 	  break;
 	case 'l':
 	  with_line_numbers = true;
 	  break;
 	case 'b':
 	  target = optarg;
 	  break;
 	case 'C':
 	  do_demangle = true;
 	  if (optarg != NULL)
 	    {
 	      enum demangling_styles style;
 
 	      style = cplus_demangle_name_to_style (optarg);
 	      if (style == unknown_demangling)
 		fatal (_("unknown demangling style `%s'"),
 		       optarg);
 
 	      cplus_demangle_set_style (style);
 	    }
 	  break;
 	case OPTION_RECURSE_LIMIT:
 	  demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;
 	  break;
 	case OPTION_NO_RECURSE_LIMIT:
 	  demangle_flags |= DMGL_NO_RECURSE_LIMIT;
 	  break;
 	case 'w':
 	  do_wide = wide_output = true;
 	  break;
 	case OPTION_ADJUST_VMA:
 	  adjust_section_vma = parse_vma (optarg, "--adjust-vma");
 	  break;
 	case OPTION_START_ADDRESS:
 	  start_address = parse_vma (optarg, "--start-address");
 	  if ((stop_address != (bfd_vma) -1) && stop_address <= start_address)
 	    fatal (_("error: the start address should be before the end address"));
 	  break;
 	case OPTION_STOP_ADDRESS:
 	  stop_address = parse_vma (optarg, "--stop-address");
 	  if ((start_address != (bfd_vma) -1) && stop_address <= start_address)
 	    fatal (_("error: the stop address should be after the start address"));
 	  break;
 	case OPTION_PREFIX:
 	  prefix = optarg;
 	  prefix_length = strlen (prefix);
 	  /* Remove an unnecessary trailing '/' */
 	  while (IS_DIR_SEPARATOR (prefix[prefix_length - 1]))
 	    prefix_length--;
 	  break;
 	case OPTION_PREFIX_STRIP:
 	  prefix_strip = atoi (optarg);
 	  if (prefix_strip < 0)
 	    fatal (_("error: prefix strip must be non-negative"));
 	  break;
 	case OPTION_INSN_WIDTH:
 	  insn_width = strtoul (optarg, NULL, 0);
 	  if (insn_width <= 0)
 	    fatal (_("error: instruction width must be positive"));
 	  break;
 	case OPTION_INLINES:
 	  unwind_inlines = true;
 	  break;
 	case OPTION_VISUALIZE_JUMPS:
 	  visualize_jumps = true;
 	  color_output = false;
 	  extended_color_output = false;
 	  if (optarg != NULL)
 	    {
 	      if (streq (optarg, "color"))
 		color_output = true;
 	      else if (streq (optarg, "extended-color"))
 		{
 		  color_output = true;
 		  extended_color_output = true;
 		}
 	      else if (streq (optarg, "off"))
 		visualize_jumps = false;
 	      else
 		nonfatal (_("unrecognized argument to --visualize-option"));
 	    }
 	  break;
 	case 'E':
 	  if (strcmp (optarg, "B") == 0)
 	    endian = BFD_ENDIAN_BIG;
 	  else if (strcmp (optarg, "L") == 0)
 	    endian = BFD_ENDIAN_LITTLE;
 	  else
 	    {
 	      nonfatal (_("unrecognized -E option"));
 	      usage (stderr, 1);
 	    }
 	  break;
 	case OPTION_ENDIAN:
 	  if (strncmp (optarg, "big", strlen (optarg)) == 0)
 	    endian = BFD_ENDIAN_BIG;
 	  else if (strncmp (optarg, "little", strlen (optarg)) == 0)
 	    endian = BFD_ENDIAN_LITTLE;
 	  else
 	    {
 	      non_fatal (_("unrecognized --endian type `%s'"), optarg);
 	      exit_status = 1;
 	      usage (stderr, 1);
 	    }
 	  break;
 
 	case 'f':
 	  dump_file_header = true;
 	  seenflag = true;
 	  break;
 	case 'i':
 	  formats_info = true;
 	  seenflag = true;
 	  break;
 	case 'I':
 	  add_include_path (optarg);
 	  break;
 	case 'p':
 	  dump_private_headers = true;
 	  seenflag = true;
 	  break;
 	case 'P':
 	  dump_private_options = optarg;
 	  seenflag = true;
 	  break;
 	case 'x':
 	  dump_private_headers = true;
 	  dump_symtab = true;
 	  dump_reloc_info = true;
 	  dump_file_header = true;
 	  dump_ar_hdrs = true;
 	  dump_section_headers = true;
 	  seenflag = true;
 	  break;
 	case 't':
 	  dump_symtab = true;
 	  seenflag = true;
 	  break;
 	case 'T':
 	  dump_dynamic_symtab = true;
 	  seenflag = true;
 	  break;
 	case 'd':
 	  disassemble = true;
 	  seenflag = true;
 	  disasm_sym = optarg;
 	  break;
 	case 'z':
 	  disassemble_zeroes = true;
 	  break;
 	case 'D':
 	  disassemble = true;
 	  disassemble_all = true;
 	  seenflag = true;
 	  break;
 	case 'S':
 	  disassemble = true;
 	  with_source_code = true;
 	  seenflag = true;
 	  break;
 	case OPTION_SOURCE_COMMENT:
 	  disassemble = true;
 	  with_source_code = true;
 	  seenflag = true;
 	  if (optarg)
 	    source_comment = xstrdup (sanitize_string (optarg));
 	  else
 	    source_comment = xstrdup ("# ");
 	  break;
 	case 'g':
 	  dump_debugging = 1;
 	  seenflag = true;
 	  break;
 	case 'e':
 	  dump_debugging = 1;
 	  dump_debugging_tags = 1;
 	  do_demangle = true;
 	  seenflag = true;
 	  break;
 	case 'L':
 	  process_links = true;
 	  do_follow_links = true;
 	  break;
 	case 'W':
 	  dump_dwarf_section_info = true;
 	  seenflag = true;
 	  if (optarg)
 	    dwarf_select_sections_by_letters (optarg);
 	  else
 	    dwarf_select_sections_all ();
 	  break;
 	case OPTION_DWARF:
 	  dump_dwarf_section_info = true;
 	  seenflag = true;
 	  if (optarg)
 	    dwarf_select_sections_by_names (optarg);
 	  else
 	    dwarf_select_sections_all ();
 	  break;
 	case OPTION_DWARF_DEPTH:
 	  {
 	    char *cp;
 	    dwarf_cutoff_level = strtoul (optarg, & cp, 0);
 	  }
 	  break;
 	case OPTION_DWARF_START:
 	  {
 	    char *cp;
 	    dwarf_start_die = strtoul (optarg, & cp, 0);
 	    suppress_bfd_header = 1;
 	  }
 	  break;
 	case OPTION_DWARF_CHECK:
 	  dwarf_check = true;
 	  break;
 #ifdef ENABLE_LIBCTF
 	case OPTION_CTF:
 	  dump_ctf_section_info = true;
 	  if (optarg)
 	    dump_ctf_section_name = xstrdup (optarg);
 	  seenflag = true;
 	  break;
 	case OPTION_CTF_PARENT:
 	  dump_ctf_parent_name = xstrdup (optarg);
 	  break;
 #endif
 	case 'G':
 	  dump_stab_section_info = true;
 	  seenflag = true;
 	  break;
 	case 's':
 	  dump_section_contents = true;
 	  seenflag = true;
 	  break;
 	case 'r':
 	  dump_reloc_info = true;
 	  seenflag = true;
 	  break;
 	case 'R':
 	  dump_dynamic_reloc_info = true;
 	  seenflag = true;
 	  break;
 	case 'a':
 	  dump_ar_hdrs = true;
 	  seenflag = true;
 	  break;
 	case 'h':
 	  dump_section_headers = true;
 	  seenflag = true;
 	  break;
 	case 'v':
 	case 'V':
 	  show_version = true;
 	  seenflag = true;
 	  break;
 
 	case 'U':
 	  if (streq (optarg, "default") || streq (optarg, "d"))
 	    unicode_display = unicode_default;
 	  else if (streq (optarg, "locale") || streq (optarg, "l"))
 	    unicode_display = unicode_locale;
 	  else if (streq (optarg, "escape") || streq (optarg, "e"))
 	    unicode_display = unicode_escape;
 	  else if (streq (optarg, "invalid") || streq (optarg, "i"))
 	    unicode_display = unicode_invalid;
 	  else if (streq (optarg, "hex") || streq (optarg, "x"))
 	    unicode_display = unicode_hex;
 	  else if (streq (optarg, "highlight") || streq (optarg, "h"))
 	    unicode_display = unicode_highlight;
 	  else
 	    fatal (_("invalid argument to -U/--unicode: %s"), optarg);
 	  break;
 
 	case 'H':
 	  usage (stdout, 0);
 	  /* No need to set seenflag or to break - usage() does not return.  */
 	default:
 	  usage (stderr, 1);
 	}
     }
 
   if (show_version)
     print_version ("objdump");
 
   if (!seenflag)
     usage (stderr, 2);
 
+  dump_any_debugging = (dump_debugging
+			|| dump_dwarf_section_info
+			|| process_links);
+
   if (formats_info)
     exit_status = display_info ();
   else
     {
       if (optind == argc)
 	display_file ("a.out", target, true);
       else
 	for (; optind < argc;)
 	  {
 	    display_file (argv[optind], target, optind == argc - 1);
 	    optind++;
 	  }
     }
 
   free_only_list ();
   free (dump_ctf_section_name);
   free (dump_ctf_parent_name);
   free ((void *) source_comment);
 
   END_PROGRESS (program_name);
 
   return exit_status;
 }
diff --git a/binutils/readelf.c b/binutils/readelf.c
index b45683cd571..e56e9b56393 100644
--- a/binutils/readelf.c
+++ b/binutils/readelf.c
@@ -239,6 +239,7 @@ static bool decompress_dumps = false;
 static bool do_not_show_symbol_truncation = false;
 static bool do_demangle = false;	/* Pretty print C++ symbol names.  */
 static bool process_links = false;
+static bool dump_any_debugging = false;
 static int demangle_flags = DMGL_ANSI | DMGL_PARAMS;
 static int sym_base = 0;
 
@@ -5246,277 +5247,280 @@ static void
 parse_args (struct dump_data *dumpdata, int argc, char ** argv)
 {
   int c;
 
   if (argc < 2)
     usage (stderr);
 
   while ((c = getopt_long
 	  (argc, argv, "ACDHILNPR:STU:VWacdeghi:lnp:rstuvw::x:z", options, NULL)) != EOF)
     {
       switch (c)
 	{
 	case 0:
 	  /* Long options.  */
 	  break;
 	case 'H':
 	  usage (stdout);
 	  break;
 
 	case 'a':
 	  do_syms = true;
 	  do_reloc = true;
 	  do_unwind = true;
 	  do_dynamic = true;
 	  do_header = true;
 	  do_sections = true;
 	  do_section_groups = true;
 	  do_segments = true;
 	  do_version = true;
 	  do_histogram = true;
 	  do_arch = true;
 	  do_notes = true;
 	  break;
 
 	case 'g':
 	  do_section_groups = true;
 	  break;
 	case 't':
 	case 'N':
 	  do_sections = true;
 	  do_section_details = true;
 	  break;
 	case 'e':
 	  do_header = true;
 	  do_sections = true;
 	  do_segments = true;
 	  break;
 	case 'A':
 	  do_arch = true;
 	  break;
 	case 'D':
 	  do_using_dynamic = true;
 	  break;
 	case 'r':
 	  do_reloc = true;
 	  break;
 	case 'u':
 	  do_unwind = true;
 	  break;
 	case 'h':
 	  do_header = true;
 	  break;
 	case 'l':
 	  do_segments = true;
 	  break;
 	case 's':
 	  do_syms = true;
 	  break;
 	case 'S':
 	  do_sections = true;
 	  break;
 	case 'd':
 	  do_dynamic = true;
 	  break;
 	case 'I':
 	  do_histogram = true;
 	  break;
 	case 'n':
 	  do_notes = true;
 	  break;
 	case 'c':
 	  do_archive_index = true;
 	  break;
 	case 'L':
 	  do_checks = true;
 	  break;
 	case 'P':
 	  process_links = true;
 	  do_follow_links = true;
+	  dump_any_debugging = true;
 	  break;
 	case 'x':
 	  request_dump (dumpdata, HEX_DUMP);
 	  break;
 	case 'p':
 	  request_dump (dumpdata, STRING_DUMP);
 	  break;
 	case 'R':
 	  request_dump (dumpdata, RELOC_DUMP);
 	  break;
 	case 'z':
 	  decompress_dumps = true;
 	  break;
 	case 'w':
 	  do_dump = true;
+	  dump_any_debugging = true;
 	  if (optarg == NULL)
 	    {
 	      do_debugging = true;
 	      dwarf_select_sections_all ();
 	    }
 	  else
 	    {
 	      do_debugging = false;
 	      dwarf_select_sections_by_letters (optarg);
 	    }
 	  break;
 	case OPTION_DEBUG_DUMP:
 	  do_dump = true;
+	  dump_any_debugging = true;
 	  if (optarg == NULL)
 	    {
 	      do_debugging = true;
 	      dwarf_select_sections_all ();
 	    }
 	  else
 	    {
 	      do_debugging = false;
 	      dwarf_select_sections_by_names (optarg);
 	    }
 	  break;
 	case OPTION_DWARF_DEPTH:
 	  {
 	    char *cp;
 
 	    dwarf_cutoff_level = strtoul (optarg, & cp, 0);
 	  }
 	  break;
 	case OPTION_DWARF_START:
 	  {
 	    char *cp;
 
 	    dwarf_start_die = strtoul (optarg, & cp, 0);
 	  }
 	  break;
 	case OPTION_DWARF_CHECK:
 	  dwarf_check = true;
 	  break;
 	case OPTION_CTF_DUMP:
 	  do_ctf = true;
 	  request_dump (dumpdata, CTF_DUMP);
 	  break;
 	case OPTION_CTF_SYMBOLS:
 	  free (dump_ctf_symtab_name);
 	  dump_ctf_symtab_name = strdup (optarg);
 	  break;
 	case OPTION_CTF_STRINGS:
 	  free (dump_ctf_strtab_name);
 	  dump_ctf_strtab_name = strdup (optarg);
 	  break;
 	case OPTION_CTF_PARENT:
 	  free (dump_ctf_parent_name);
 	  dump_ctf_parent_name = strdup (optarg);
 	  break;
 	case OPTION_DYN_SYMS:
 	  do_dyn_syms = true;
 	  break;
 	case OPTION_LTO_SYMS:
 	  do_lto_syms = true;
 	  break;
 #ifdef SUPPORT_DISASSEMBLY
 	case 'i':
 	  request_dump (dumpdata, DISASS_DUMP);
 	  break;
 #endif
 	case 'v':
 	  print_version (program_name);
 	  break;
 	case 'V':
 	  do_version = true;
 	  break;
 	case 'W':
 	  do_wide = true;
 	  break;
 	case 'T':
 	  do_not_show_symbol_truncation = true;
 	  break;
 	case 'C':
 	  do_demangle = true;
 	  if (optarg != NULL)
 	    {
 	      enum demangling_styles style;
 
 	      style = cplus_demangle_name_to_style (optarg);
 	      if (style == unknown_demangling)
 		error (_("unknown demangling style `%s'"), optarg);
 
 	      cplus_demangle_set_style (style);
 	    }
 	  break;
 	case OPTION_NO_DEMANGLING:
 	  do_demangle = false;
 	  break;
 	case OPTION_RECURSE_LIMIT:
 	  demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;
 	  break;
 	case OPTION_NO_RECURSE_LIMIT:
 	  demangle_flags |= DMGL_NO_RECURSE_LIMIT;
 	  break;
 	case OPTION_WITH_SYMBOL_VERSIONS:
 	  /* Ignored for backward compatibility.  */
 	  break;
 
 	case 'U':
 	  if (optarg == NULL)
 	    error (_("Missing arg to -U/--unicode")); /* Can this happen ?  */
 	  else if (streq (optarg, "default") || streq (optarg, "d"))
 	    unicode_display = unicode_default;
 	  else if (streq (optarg, "locale") || streq (optarg, "l"))
 	    unicode_display = unicode_locale;
 	  else if (streq (optarg, "escape") || streq (optarg, "e"))
 	    unicode_display = unicode_escape;
 	  else if (streq (optarg, "invalid") || streq (optarg, "i"))
 	    unicode_display = unicode_invalid;
 	  else if (streq (optarg, "hex") || streq (optarg, "x"))
 	    unicode_display = unicode_hex;
 	  else if (streq (optarg, "highlight") || streq (optarg, "h"))
 	    unicode_display = unicode_highlight;
 	  else
 	    error (_("invalid argument to -U/--unicode: %s"), optarg);
 	  break;
 
 	case OPTION_SYM_BASE:
 	  sym_base = 0;
 	  if (optarg != NULL)
 	    {
 	      sym_base = strtoul (optarg, NULL, 0);
 	      switch (sym_base)
 		{
 		  case 0:
 		  case 8:
 		  case 10:
 		  case 16:
 		    break;
 
 		  default:
 		    sym_base = 0;
 		    break;
 		}
 	    }
 	  break;
 
 	default:
 	  /* xgettext:c-format */
 	  error (_("Invalid option '-%c'\n"), c);
 	  /* Fall through.  */
 	case '?':
 	  usage (stderr);
 	}
     }
 
   if (!do_dynamic && !do_syms && !do_reloc && !do_unwind && !do_sections
       && !do_segments && !do_header && !do_dump && !do_version
       && !do_histogram && !do_debugging && !do_arch && !do_notes
       && !do_section_groups && !do_archive_index
       && !do_dyn_syms && !do_lto_syms)
     {
       if (do_checks)
 	{
 	  check_all = true;
 	  do_dynamic = do_syms = do_reloc = do_unwind = do_sections = true;
 	  do_segments = do_header = do_dump = do_version = true;
 	  do_histogram = do_debugging = do_arch = do_notes = true;
 	  do_section_groups = do_archive_index = do_dyn_syms = true;
 	  do_lto_syms = true;
 	}
       else
 	usage (stderr);
     }
 }
@@ -15910,51 +15914,54 @@ bool
 load_debug_section (enum dwarf_section_display_enum debug, void * data)
 {
   struct dwarf_section * section = &debug_displays [debug].section;
   Elf_Internal_Shdr * sec;
   Filedata * filedata = (Filedata *) data;
 
+  if (!dump_any_debugging)
+    return false;
+
   /* Without section headers we cannot find any sections.  */
   if (filedata->section_headers == NULL)
     return false;
 
   if (filedata->string_table == NULL
       && filedata->file_header.e_shstrndx != SHN_UNDEF
       && filedata->file_header.e_shstrndx < filedata->file_header.e_shnum)
     {
       Elf_Internal_Shdr * strs;
 
       /* Read in the string table, so that we have section names to scan.  */
       strs = filedata->section_headers + filedata->file_header.e_shstrndx;
 
       if (strs != NULL && strs->sh_size != 0)
 	{
 	  filedata->string_table
 	    = (char *) get_data (NULL, filedata, strs->sh_offset,
 				 1, strs->sh_size, _("string table"));
 
 	  filedata->string_table_length
 	    = filedata->string_table != NULL ? strs->sh_size : 0;
 	}
     }
 
   /* Locate the debug section.  */
   sec = find_section_in_set (filedata, section->uncompressed_name, section_subset);
   if (sec != NULL)
     section->name = section->uncompressed_name;
   else
     {
       sec = find_section_in_set (filedata, section->compressed_name, section_subset);
       if (sec != NULL)
 	section->name = section->compressed_name;
     }
   if (sec == NULL)
     return false;
 
   /* If we're loading from a subset of sections, and we've loaded
      a section matching this name before, it's likely that it's a
      different one.  */
   if (section_subset != NULL)
     free_debug_section (debug);
 
   return load_specific_debug_section (debug, sec, data);
 }
