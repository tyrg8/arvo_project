commit 601356f1d2881b57945de8c22349d8758927f76a
Author: Remi Collet <remi@remirepo.net>
Date:   Wed Jun 23 16:42:15 2021 +0200

    fix memory corruption in ConcatenateStringInfo

diff --git a/MagickCore/string.c b/MagickCore/string.c
index dccef76a2..691d55034 100644
--- a/MagickCore/string.c
+++ b/MagickCore/string.c
@@ -466,104 +466,104 @@ MagickExport MagickBooleanType ConcatenateString(
   assert(destination != (char **) NULL);
   if (source == (const char *) NULL)
     return(MagickTrue);
   if (*destination == (char *) NULL)
     {
       *destination=AcquireString(source);
       return(MagickTrue);
     }
   destination_length=strlen(*destination);
   source_length=strlen(source);
   length=destination_length;
   if (~length < source_length)
     ThrowFatalException(ResourceLimitFatalError,"UnableToConcatenateString");
   length+=source_length;
   if (~length < MagickPathExtent)
     ThrowFatalException(ResourceLimitFatalError,"UnableToConcatenateString");
   *destination=(char *) ResizeQuantumMemory(*destination,
     OverAllocateMemory(length+MagickPathExtent),sizeof(**destination));
   if (*destination == (char *) NULL)
     ThrowFatalException(ResourceLimitFatalError,"UnableToConcatenateString");
   if (source_length != 0)
     (void) memcpy((*destination)+destination_length,source,source_length);
   (*destination)[length]='\0';
   return(MagickTrue);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   C o n c a t e n a t e S t r i n g I n f o                                 %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ConcatenateStringInfo() concatenates the source string to the destination
 %  string.
 %
 %  The format of the ConcatenateStringInfo method is:
 %
 %      void ConcatenateStringInfo(StringInfo *string_info,
 %        const StringInfo *source)
 %
 %  A description of each parameter follows:
 %
 %    o string_info: the string info.
 %
 %    o source: the source string.
 %
 */
 MagickExport void ConcatenateStringInfo(StringInfo *string_info,
   const StringInfo *source)
 {
   size_t
     length;
 
   assert(string_info != (StringInfo *) NULL);
   assert(string_info->signature == MagickCoreSignature);
   assert(source != (const StringInfo *) NULL);
   length=string_info->length;
   if (~length < source->length)
     ThrowFatalException(ResourceLimitFatalError,"UnableToConcatenateString");
   length+=source->length;
   if (~length < MagickPathExtent)
     ThrowFatalException(ResourceLimitFatalError,"MemoryAllocationFailed");
-  string_info->length=length;
   if (string_info->datum == (unsigned char *) NULL)
     string_info->datum=(unsigned char *) AcquireQuantumMemory(length+
       MagickPathExtent,sizeof(*string_info->datum));
   else
     string_info->datum=(unsigned char *) ResizeQuantumMemory(
       string_info->datum,OverAllocateMemory(length+MagickPathExtent),
       sizeof(*string_info->datum));
   if (string_info->datum == (unsigned char *) NULL)
     ThrowFatalException(ResourceLimitFatalError,"MemoryAllocationFailed");
-  (void) memcpy(string_info->datum+length,source->datum,source->length);
+  (void) memcpy(string_info->datum+string_info->length,source->datum,source->length);
+  string_info->length=length;
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   C o n f i g u r e F i l e T o S t r i n g I n f o                         %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ConfigureFileToStringInfo() returns the contents of a configure file as a
 %  string.
 %
 %  The format of the ConfigureFileToStringInfo method is:
 %
 %      StringInfo *ConfigureFileToStringInfo(const char *filename)
 %        ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o filename: the filename.
 %
 */
