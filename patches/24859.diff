commit 678d03cc8a9c665ba989b098a9be903ede72f554
Author: Karel Zak <kzak@redhat.com>
Date:   Thu Aug 13 13:48:28 2020 +0200

    libfdisk: (script) fix possible memory leaks
    
    Signed-off-by: Karel Zak <kzak@redhat.com>

diff --git a/libfdisk/src/script.c b/libfdisk/src/script.c
index 4d9835f59..74ff43b73 100644
--- a/libfdisk/src/script.c
+++ b/libfdisk/src/script.c
@@ -562,135 +562,136 @@ static void fput_var_separator(int *nvars, FILE *f)
 static int write_file_json(struct fdisk_script *dp, FILE *f)
 {
 	struct list_head *h;
 	struct fdisk_partition *pa;
 	struct fdisk_iter itr;
 	const char *devname = NULL;
 	int ct = 0, indent = 0;
 
 	assert(dp);
 	assert(f);
 
 	DBG(SCRIPT, ul_debugobj(dp, "writing json dump to file"));
 
 	fputs("{\n", f);
 
 	fput_indent(indent, f);
 	fputs("\"partitiontable\": {\n", f);
 	indent++;
 
 	/* script headers */
 	list_for_each(h, &dp->headers) {
 		struct fdisk_scriptheader *fi = list_entry(h, struct fdisk_scriptheader, headers);
 		const char *name = fi->name;
 		int num = 0;
 
 		if (strcmp(name, "first-lba") == 0) {
 			name = "firstlba";
 			num = 1;
 		} else if (strcmp(name, "last-lba") == 0) {
 			name = "lastlba";
 			num = 1;
 		} else if (strcmp(name, "sector-size") == 0) {
 			name = "sectorsize";
 			num = 1;
 		} else if (strcmp(name, "label-id") == 0)
 			name = "id";
 
 		fput_indent(indent, f);
 		fputs_quoted_json_lower(name, f);
 		fputs(":", f);
 		if (!num)
 			fputs_quoted_json(fi->data, f);
 		else
 			fputs(fi->data, f);
 
 		if (!dp->table && fi == list_last_entry(&dp->headers, struct fdisk_scriptheader, headers))
 			fputc('\n', f);
 		else
 			fputs(",\n", f);
 
 		if (strcmp(name, "device") == 0)
 			devname = fi->data;
 	}
 
 
 	if (!dp->table || fdisk_table_is_empty(dp->table)) {
 		DBG(SCRIPT, ul_debugobj(dp, "script table empty"));
 		goto done;
 	}
 
 	DBG(SCRIPT, ul_debugobj(dp, "%zu entries", fdisk_table_get_nents(dp->table)));
 
 	fput_indent(indent, f);
 	fputs("\"partitions\": [\n", f);
 	indent++;
 
 	fdisk_reset_iter(&itr, FDISK_ITER_FORWARD);
 	while (fdisk_table_next_partition(dp->table, &itr, &pa) == 0) {
 		char *p = NULL;
 		int nvars = 0;
 
 		ct++;
 		fput_indent(indent, f);
 		fputc('{', f);
 		if (devname)
 			p = fdisk_partname(devname, pa->partno + 1);
 		if (p) {
 			DBG(SCRIPT, ul_debugobj(dp, "write %s entry", p));
 			fputs("\"node\":", f);
 			fputs_quoted_json(p, f);
 			nvars++;
+			free(p);
 		}
 
 		if (fdisk_partition_has_start(pa)) {
 			fput_var_separator(&nvars, f);
 			fprintf(f, "\"start\":%ju", (uintmax_t)pa->start);
 		}
 		if (fdisk_partition_has_size(pa)) {
 			fput_var_separator(&nvars, f);
 			fprintf(f, "\"size\":%ju", (uintmax_t)pa->size);
 		}
 		if (pa->type && fdisk_parttype_get_string(pa->type)) {
 			fput_var_separator(&nvars, f);
 			fputs("\"type\":", f);
 			fputs_quoted_json(fdisk_parttype_get_string(pa->type), f);
 		} else if (pa->type) {
 			fput_var_separator(&nvars, f);
 			fprintf(f, "\"type\":\"%x\"", fdisk_parttype_get_code(pa->type));
 		}
 
 		if (pa->uuid) {
 			fput_var_separator(&nvars, f);
 			fputs("\"uuid\":", f);
 			fputs_quoted_json(pa->uuid, f);
 		}
 		if (pa->name && *pa->name) {
 			fput_var_separator(&nvars, f);
 			fputs("\"name\":", f),
 			fputs_quoted_json(pa->name, f);
 		}
 
 		/* for MBR attr=80 means bootable */
 		if (pa->attrs) {
 			struct fdisk_label *lb = script_get_label(dp);
 
 			if (!lb || fdisk_label_get_type(lb) != FDISK_DISKLABEL_DOS) {
 				fput_var_separator(&nvars, f);
 				fputs("\"attrs\":", f);
 				fputs_quoted_json(pa->attrs, f);
 			}
 		}
 		if (fdisk_partition_is_bootable(pa)) {
 			fput_var_separator(&nvars, f);
 			fprintf(f, "\"bootable\":true");
 		}
 
 		if ((size_t)ct < fdisk_table_get_nents(dp->table))
 			fputs("},\n", f);
 		else
 			fputs("}\n", f);
 	}
 
 	indent--;
 	fput_indent(indent, f);
 	fputs("]\n", f);
@@ -706,83 +707,84 @@ done:
 static int write_file_sfdisk(struct fdisk_script *dp, FILE *f)
 {
 	struct list_head *h;
 	struct fdisk_partition *pa;
 	struct fdisk_iter itr;
 	const char *devname = NULL;
 
 	assert(dp);
 	assert(f);
 
 	DBG(SCRIPT, ul_debugobj(dp, "writing sfdisk-like script to file"));
 
 	/* script headers */
 	list_for_each(h, &dp->headers) {
 		struct fdisk_scriptheader *fi = list_entry(h, struct fdisk_scriptheader, headers);
 		fprintf(f, "%s: %s\n", fi->name, fi->data);
 		if (strcmp(fi->name, "device") == 0)
 			devname = fi->data;
 	}
 
 	if (!dp->table || fdisk_table_is_empty(dp->table)) {
 		DBG(SCRIPT, ul_debugobj(dp, "script table empty"));
 		return 0;
 	}
 
 	DBG(SCRIPT, ul_debugobj(dp, "%zu entries", fdisk_table_get_nents(dp->table)));
 
 	fputc('\n', f);
 
 	fdisk_reset_iter(&itr, FDISK_ITER_FORWARD);
 	while (fdisk_table_next_partition(dp->table, &itr, &pa) == 0) {
 		char *p = NULL;
 
 		if (devname)
 			p = fdisk_partname(devname, pa->partno + 1);
 		if (p) {
 			DBG(SCRIPT, ul_debugobj(dp, "write %s entry", p));
 			fprintf(f, "%s :", p);
+			free(p);
 		} else
 			fprintf(f, "%zu :", pa->partno + 1);
 
 		if (fdisk_partition_has_start(pa))
 			fprintf(f, " start=%12ju", (uintmax_t)pa->start);
 		if (fdisk_partition_has_size(pa))
 			fprintf(f, ", size=%12ju", (uintmax_t)pa->size);
 
 		if (pa->type && fdisk_parttype_get_string(pa->type))
 			fprintf(f, ", type=%s", fdisk_parttype_get_string(pa->type));
 		else if (pa->type)
 			fprintf(f, ", type=%x", fdisk_parttype_get_code(pa->type));
 
 		if (pa->uuid)
 			fprintf(f, ", uuid=%s", pa->uuid);
 		if (pa->name && *pa->name) {
 			fputs(", name=", f);
 			fputs_quoted(pa->name, f);
 		}
 
 		/* for MBR attr=80 means bootable */
 		if (pa->attrs) {
 			struct fdisk_label *lb = script_get_label(dp);
 
 			if (!lb || fdisk_label_get_type(lb) != FDISK_DISKLABEL_DOS)
 				fprintf(f, ", attrs=\"%s\"", pa->attrs);
 		}
 		if (fdisk_partition_is_bootable(pa))
 			fprintf(f, ", bootable");
 		fputc('\n', f);
 	}
 
 	DBG(SCRIPT, ul_debugobj(dp, "write script done"));
 	return 0;
 }
 
 /**
  * fdisk_script_write_file:
  * @dp: script
  * @f: output file
  *
  * Writes script @dp to the file @f.
  *
  * Returns: 0 on success, <0 on error.
  */
@@ -987,276 +989,283 @@ static int partno_from_devname(char *s)
 /* dump format
  * <device>: start=<num>, size=<num>, type=<string>, ...
  */
 static int parse_line_nameval(struct fdisk_script *dp, char *s)
 {
 	char *p, *x;
 	struct fdisk_partition *pa;
 	int rc = 0;
 	uint64_t num;
 	int pno;
 
 	assert(dp);
 	assert(s);
 	assert(dp->table);
 
 	DBG(SCRIPT, ul_debugobj(dp, "   parse script line: '%s'", s));
 
 	pa = fdisk_new_partition();
 	if (!pa)
 		return -ENOMEM;
 
 	fdisk_partition_start_follow_default(pa, 1);
 	fdisk_partition_end_follow_default(pa, 1);
 	fdisk_partition_partno_follow_default(pa, 1);
 
 	/* set partno */
 	p = strchr(s, ':');
 	x = strchr(s, '=');
 	if (p && (!x || p < x)) {
 		*p = '\0';
 		p++;
 
 		pno = partno_from_devname(s);
 		if (pno >= 0) {
 			fdisk_partition_partno_follow_default(pa, 0);
 			fdisk_partition_set_partno(pa, pno);
 		}
 	} else
 		p = s;
 
 	while (rc == 0 && p && *p) {
 
 		DBG(SCRIPT, ul_debugobj(dp, " parsing '%s'", p));
 		p = (char *) skip_blank(p);
 
 		if (!strncasecmp(p, "start=", 6)) {
 			int pow = 0;
 			p += 6;
 			rc = next_number(&p, &num, &pow);
 			if (!rc) {
 				if (pow) {	/* specified as <num><suffix> */
 					if (!dp->cxt->sector_size) {
 						rc = -EINVAL;
 						break;
 					}
 					num /= dp->cxt->sector_size;
 				}
 				fdisk_partition_set_start(pa, num);
 				fdisk_partition_start_follow_default(pa, 0);
 			}
 		} else if (!strncasecmp(p, "size=", 5)) {
 			int pow = 0;
 
 			p += 5;
 			rc = next_number(&p, &num, &pow);
 			if (!rc) {
 				if (pow) {	/* specified as <num><suffix> */
 					if (!dp->cxt->sector_size) {
 						rc = -EINVAL;
 						break;
 					}
 					num /= dp->cxt->sector_size;
 				} else		/* specified as number of sectors */
 					fdisk_partition_size_explicit(pa, 1);
 				fdisk_partition_set_size(pa, num);
 				fdisk_partition_end_follow_default(pa, 0);
 			}
 
 		} else if (!strncasecmp(p, "bootable", 8)) {
 			/* we use next_token() to skip possible extra space */
 			char *tk = next_token(&p);
 			if (tk && strcasecmp(tk, "bootable") == 0)
 				pa->boot = 1;
 			else
 				rc = -EINVAL;
 
 		} else if (!strncasecmp(p, "attrs=", 6)) {
 			p += 6;
+			free(pa->attrs);
 			rc = next_string(&p, &pa->attrs);
 
 		} else if (!strncasecmp(p, "uuid=", 5)) {
 			p += 5;
+			free(pa->uuid);
 			rc = next_string(&p, &pa->uuid);
 
 		} else if (!strncasecmp(p, "name=", 5)) {
 			p += 5;
+			free(pa->name);
 			rc = next_string(&p, &pa->name);
 			if (!rc)
 				unhexmangle_string(pa->name);
 
 		} else if (!strncasecmp(p, "type=", 5) ||
 			   !strncasecmp(p, "Id=", 3)) {		/* backward compatibility */
 			char *type = NULL;
 
 			fdisk_unref_parttype(pa->type);
 			pa->type = NULL;
 
 			p += ((*p == 'I' || *p == 'i') ? 3 : 5); /* "Id=", "type=" */
 
 			rc = next_string(&p, &type);
 			if (rc == 0) {
 				pa->type = fdisk_label_advparse_parttype(script_get_label(dp),
 					type, FDISK_SCRIPT_PARTTYPE_PARSE_FLAGS);
 				if (!pa->type)
 					rc = -EINVAL;
 			}
 			free(type);
 		} else {
 			DBG(SCRIPT, ul_debugobj(dp, "script parse error: unknown field '%s'", p));
 			rc = -EINVAL;
 			break;
 		}
 	}
 
 	if (!rc)
 		rc = fdisk_table_add_partition(dp->table, pa);
 	if (rc)
 		DBG(SCRIPT, ul_debugobj(dp, "script parse error: [rc=%d]", rc));
 
 	fdisk_unref_partition(pa);
 	return rc;
 }
 
 #define TK_PLUS		1
 #define TK_MINUS	-1
 
 #define alone_sign(_sign, _p)	(_sign && (*_p == '\0' || isblank(*_p)))
 
 /* simple format:
  * <start>, <size>, <type>, <bootable>, ...
  */
 static int parse_line_valcommas(struct fdisk_script *dp, char *s)
 {
 	int rc = 0;
-	char *p = s, *str;
+	char *p = s;
 	struct fdisk_partition *pa;
 	enum { ITEM_START, ITEM_SIZE, ITEM_TYPE, ITEM_BOOTABLE };
 	int item = -1;
 
 	assert(dp);
 	assert(s);
 	assert(dp->table);
 
 	pa = fdisk_new_partition();
 	if (!pa)
 		return -ENOMEM;
 
 	fdisk_partition_start_follow_default(pa, 1);
 	fdisk_partition_end_follow_default(pa, 1);
 	fdisk_partition_partno_follow_default(pa, 1);
 
 	while (rc == 0 && p && *p) {
 		uint64_t num;
 		char *begin;
 		int sign = 0;
 
 		p = (char *) skip_blank(p);
 		item++;
 
 		if (item != ITEM_BOOTABLE) {
 			sign = *p == '-' ? TK_MINUS : *p == '+' ? TK_PLUS : 0;
 			if (sign)
 				p++;
 		}
 
 		DBG(SCRIPT, ul_debugobj(dp, " parsing item %d ('%s')", item, p));
 		begin = p;
 
 		switch (item) {
 		case ITEM_START:
 			if (*p == ',' || *p == ';' || alone_sign(sign, p))
 				fdisk_partition_start_follow_default(pa, 1);
 			else {
 				int pow = 0;
 
 				rc = next_number(&p, &num, &pow);
 				if (!rc) {
 					if (pow) {	/* specified as <num><suffix> */
 						if (!dp->cxt->sector_size) {
 							rc = -EINVAL;
 							break;
 						}
 						num /= dp->cxt->sector_size;
 					}
 					fdisk_partition_set_start(pa, num);
 					pa->movestart = sign == TK_MINUS ? FDISK_MOVE_DOWN :
 							sign == TK_PLUS  ? FDISK_MOVE_UP :
 							FDISK_MOVE_NONE;
 				}
 				fdisk_partition_start_follow_default(pa, 0);
 			}
 			break;
 		case ITEM_SIZE:
 			if (*p == ',' || *p == ';' || alone_sign(sign, p)) {
 				fdisk_partition_end_follow_default(pa, 1);
 				if (sign == TK_PLUS)
 					/* '+' alone means use all possible space, '-' alone means nothing */
 					pa->resize = FDISK_RESIZE_ENLARGE;
 			} else {
 				int pow = 0;
 				rc = next_number(&p, &num, &pow);
 				if (!rc) {
 					if (pow) { /* specified as <size><suffix> */
 						if (!dp->cxt->sector_size) {
 							rc = -EINVAL;
 							break;
 						}
 						num /= dp->cxt->sector_size;
 					} else	 /* specified as number of sectors */
 						fdisk_partition_size_explicit(pa, 1);
 					fdisk_partition_set_size(pa, num);
 					pa->resize = sign == TK_MINUS ? FDISK_RESIZE_REDUCE :
 						     sign == TK_PLUS  ? FDISK_RESIZE_ENLARGE :
 							FDISK_RESIZE_NONE;
 				}
 				fdisk_partition_end_follow_default(pa, 0);
 			}
 			break;
 		case ITEM_TYPE:
+		{
+			char *str = NULL;
+
 			if (*p == ',' || *p == ';' || alone_sign(sign, p))
 				break;	/* use default type */
 
 			rc = next_string(&p, &str);
 			if (rc)
 				break;
 
 			fdisk_unref_parttype(pa->type);
 			pa->type = fdisk_label_advparse_parttype(script_get_label(dp),
 						str, FDISK_SCRIPT_PARTTYPE_PARSE_FLAGS);
 			free(str);
 			if (!pa->type)
 				rc = -EINVAL;
 			break;
+		}
 		case ITEM_BOOTABLE:
 			if (*p == ',' || *p == ';')
 				break;
 			else {
 				char *tk = next_token(&p);
 				if (tk && *tk == '*' && *(tk + 1) == '\0')
 					pa->boot = 1;
 				else if (tk && *tk == '-' && *(tk + 1) == '\0')
 					pa->boot = 0;
 				else if (tk && *tk == '+' && *(tk + 1) == '\0')
 					pa->boot = 1;
 				else
 					rc = -EINVAL;
 			}
 			break;
 		default:
 			break;
 		}
 
 		if (begin == p)
 			p++;
 	}
 
 	if (!rc)
 		rc = fdisk_table_add_partition(dp->table, pa);
 	if (rc)
 		DBG(SCRIPT, ul_debugobj(dp, "script parse error: [rc=%d]", rc));
 
 	fdisk_unref_partition(pa);
 	return rc;
 }
 
 /* modifies @s ! */
