commit 1bf8fa2f1f67a4f72d14c53bc4242e38e46ab475
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Fri Jul 8 14:22:21 2022 -0600

    [>64k:layout:(Chain)Context] Implement format 4
    
    Implements rest of https://github.com/be-fonts/boring-expansion-spec/issues/34
    
    Subset does NOT lower format.

diff --git a/src/hb-ot-layout-gsubgpos.hh b/src/hb-ot-layout-gsubgpos.hh
index 24a688e24..cbbd80efa 100644
--- a/src/hb-ot-layout-gsubgpos.hh
+++ b/src/hb-ot-layout-gsubgpos.hh
@@ -2600,32 +2600,34 @@ struct ContextFormat3
 struct Context
 {
   template <typename context_t, typename ...Ts>
   typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const
   {
     TRACE_DISPATCH (this, u.format);
     if (unlikely (!c->may_dispatch (this, &u.format))) return_trace (c->no_dispatch_return_value ());
     switch (u.format) {
     case 1: return_trace (c->dispatch (u.format1, std::forward<Ts> (ds)...));
     case 2: return_trace (c->dispatch (u.format2, std::forward<Ts> (ds)...));
     case 3: return_trace (c->dispatch (u.format3, std::forward<Ts> (ds)...));
 #ifndef HB_NO_BORING_EXPANSION
+    case 4: return_trace (c->dispatch (u.format4, std::forward<Ts> (ds)...));
     case 5: return_trace (c->dispatch (u.format5, std::forward<Ts> (ds)...));
 #endif
     default:return_trace (c->default_return_value ());
     }
   }
 
   protected:
   union {
   HBUINT16			format;		/* Format identifier */
   ContextFormat1_4<SmallTypes>	format1;
   ContextFormat2_5<SmallTypes>	format2;
   ContextFormat3		format3;
 #ifndef HB_NO_BORING_EXPANSION
+  ContextFormat1_4<MediumTypes>	format4;
   ContextFormat2_5<MediumTypes>	format5;
 #endif
   } u;
 };
 
 
 /* Chaining Contextual lookups */
@@ -3772,29 +3774,31 @@ struct ChainContextFormat3
 struct ChainContext
 {
   template <typename context_t, typename ...Ts>
   typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const
   {
     TRACE_DISPATCH (this, u.format);
     if (unlikely (!c->may_dispatch (this, &u.format))) return_trace (c->no_dispatch_return_value ());
     switch (u.format) {
     case 1: return_trace (c->dispatch (u.format1, std::forward<Ts> (ds)...));
     case 2: return_trace (c->dispatch (u.format2, std::forward<Ts> (ds)...));
     case 3: return_trace (c->dispatch (u.format3, std::forward<Ts> (ds)...));
 #ifndef HB_NO_BORING_EXPANSION
+    case 4: return_trace (c->dispatch (u.format4, std::forward<Ts> (ds)...));
     case 5: return_trace (c->dispatch (u.format5, std::forward<Ts> (ds)...));
 #endif
     default:return_trace (c->default_return_value ());
     }
   }
 
   protected:
   union {
   HBUINT16				format;	/* Format identifier */
   ChainContextFormat1_4<SmallTypes>	format1;
   ChainContextFormat2_5<SmallTypes>	format2;
   ChainContextFormat3			format3;
 #ifndef HB_NO_BORING_EXPANSION
+  ChainContextFormat1_4<MediumTypes>	format4;
   ChainContextFormat2_5<MediumTypes>	format5;
 #endif
   } u;
 };
