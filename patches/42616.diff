commit f6506e9d48c7abf82f711df87383af90b9797969
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Mon Dec 20 09:25:25 2021 +0000

    OSS-fuzz #42616 - fix off-by-one check on xref limit
    
    The Size of the xref includes object 0, so we need to check the stream
    object number against the size of the xref - 1.

diff --git a/pdf/pdf_deref.c b/pdf/pdf_deref.c
index c285d17b8..bc5bf76ac 100644
--- a/pdf/pdf_deref.c
+++ b/pdf/pdf_deref.c
@@ -548,230 +548,230 @@ static int pdfi_read_object(pdf_context *ctx, pdf_c_stream *s, gs_offset_t strea
 static int pdfi_deref_compressed(pdf_context *ctx, uint64_t obj, uint64_t gen, pdf_obj **object,
                                  const xref_entry *entry)
 {
     int code = 0;
     xref_entry *compressed_entry;
     pdf_c_stream *compressed_stream = NULL;
     pdf_c_stream *SubFile_stream = NULL;
     pdf_c_stream *Object_stream = NULL;
     char Buffer[256];
     int i = 0, object_length = 0;
     int64_t num_entries, found_object;
     int64_t Length;
     gs_offset_t offset = 0;
     pdf_stream *compressed_object = NULL;
     pdf_dict *compressed_sdict = NULL; /* alias */
     pdf_name *Type = NULL;
     pdf_obj *temp_obj;
 
-    if (entry->u.compressed.compressed_stream_num > ctx->xref_table->xref_size)
+    if (entry->u.compressed.compressed_stream_num > ctx->xref_table->xref_size - 1)
         return_error(gs_error_undefined);
 
     compressed_entry = &ctx->xref_table->xref[entry->u.compressed.compressed_stream_num];
 
     if (ctx->args.pdfdebug) {
         dmprintf1(ctx->memory, "%% Reading compressed object (%"PRIi64" 0 obj)", obj);
         dmprintf1(ctx->memory, " from ObjStm with object number %"PRIi64"\n", compressed_entry->object_num);
     }
 
     if (compressed_entry->cache == NULL) {
 #if CACHE_STATISTICS
         ctx->compressed_misses++;
 #endif
         code = pdfi_seek(ctx, ctx->main_stream, compressed_entry->u.uncompressed.offset, SEEK_SET);
         if (code < 0)
             goto exit;
 
         code = pdfi_read_object(ctx, ctx->main_stream, 0);
         if (code < 0)
             goto exit;
 
         if ((ctx->stack_top[-1])->type != PDF_STREAM) {
             pdfi_pop(ctx, 1);
             code = gs_note_error(gs_error_typecheck);
             goto exit;
         }
         if (ctx->stack_top[-1]->object_num != compressed_entry->object_num) {
             pdfi_pop(ctx, 1);
             /* Same error (undefined) as when we read an uncompressed object with the wrong number */
             code = gs_note_error(gs_error_undefined);
             goto exit;
         }
         compressed_object = (pdf_stream *)ctx->stack_top[-1];
         pdfi_countup(compressed_object);
         pdfi_pop(ctx, 1);
         code = pdfi_add_to_cache(ctx, (pdf_obj *)compressed_object);
         if (code < 0)
             goto exit;
     } else {
 #if CACHE_STATISTICS
         ctx->compressed_hits++;
 #endif
         compressed_object = (pdf_stream *)compressed_entry->cache->o;
         pdfi_countup(compressed_object);
         pdfi_promote_cache_entry(ctx, compressed_entry->cache);
     }
     code = pdfi_dict_from_obj(ctx, (pdf_obj *)compressed_object, &compressed_sdict);
     if (code < 0)
         return code;
 
     /* Check its an ObjStm ! */
     code = pdfi_dict_get_type(ctx, compressed_sdict, "Type", PDF_NAME, (pdf_obj **)&Type);
     if (code < 0)
         goto exit;
 
     if (!pdfi_name_is(Type, "ObjStm")){
         code = gs_note_error(gs_error_syntaxerror);
         goto exit;
     }
 
     /* Need to check the /N entry to see if the object is actually in this stream! */
     code = pdfi_dict_get_int(ctx, compressed_sdict, "N", &num_entries);
     if (code < 0)
         goto exit;
 
     if (num_entries < 0 || num_entries > ctx->xref_table->xref_size) {
         code = gs_note_error(gs_error_rangecheck);
         goto exit;
     }
 
     code = pdfi_seek(ctx, ctx->main_stream, pdfi_stream_offset(ctx, compressed_object), SEEK_SET);
     if (code < 0)
         goto exit;
 
     code = pdfi_dict_get_int(ctx, compressed_sdict, "Length", &Length);
     if (code < 0)
         goto exit;
 
     code = pdfi_apply_SubFileDecode_filter(ctx, Length, NULL, ctx->main_stream, &SubFile_stream, false);
     if (code < 0)
         goto exit;
 
     code = pdfi_filter(ctx, compressed_object, SubFile_stream, &compressed_stream, false);
     if (code < 0)
         goto exit;
 
     for (i=0;i < num_entries;i++)
         {
             code = pdfi_read_token(ctx, compressed_stream, obj, gen);
             if (code < 0)
                 goto exit;
             if (code == 0) {
                 code = gs_note_error(gs_error_syntaxerror);
                 goto exit;
             }
             temp_obj = ctx->stack_top[-1];
             if (temp_obj->type != PDF_INT) {
                 code = gs_note_error(gs_error_typecheck);
                 pdfi_pop(ctx, 1);
                 goto exit;
             }
             found_object = ((pdf_num *)temp_obj)->value.i;
             pdfi_pop(ctx, 1);
             code = pdfi_read_token(ctx, compressed_stream, obj, gen);
             if (code < 0)
                 goto exit;
             if (code == 0) {
                 code = gs_note_error(gs_error_syntaxerror);
                 goto exit;
             }
             temp_obj = ctx->stack_top[-1];
             if (temp_obj->type != PDF_INT) {
                 pdfi_pop(ctx, 1);
                 code = gs_note_error(gs_error_typecheck);
                 goto exit;
             }
             if (i == entry->u.compressed.object_index) {
                 if (found_object != obj) {
                     pdfi_pop(ctx, 1);
                     code = gs_note_error(gs_error_undefined);
                     goto exit;
                 }
                 offset = ((pdf_num *)temp_obj)->value.i;
             }
             if (i == entry->u.compressed.object_index + 1)
                 object_length = ((pdf_num *)temp_obj)->value.i - offset;
             pdfi_pop(ctx, 1);
         }
 
     /* Skip to the offset of the object we want to read */
     for (i=0;i < offset;i++)
         {
             code = pdfi_read_bytes(ctx, (byte *)&Buffer[0], 1, 1, compressed_stream);
             if (code <= 0) {
                 code = gs_note_error(gs_error_ioerror);
                 goto exit;
             }
         }
 
     /* If object_length is not 0, then we want to apply a SubFileDecode filter to limit
      * the number of bytes we read to the declared size of the object (difference between
      * the offsets of the object we want to read, and the next object). If it is 0 then
      * we're reading the last object in the stream, so we just rely on the SubFileDecode
      * we set up when we created compressed_stream to limit the bytes to the length of
      * that stream.
      */
     if (object_length > 0) {
         code = pdfi_apply_SubFileDecode_filter(ctx, object_length, NULL, compressed_stream, &Object_stream, false);
         if (code < 0)
             goto exit;
     } else {
         Object_stream = compressed_stream;
     }
 
     code = pdfi_read_token(ctx, Object_stream, obj, gen);
     if (code < 0)
         goto exit;
     if (code == 0) {
         code = gs_note_error(gs_error_syntaxerror);
         goto exit;
     }
     if (ctx->stack_top[-1]->type == PDF_ARRAY_MARK || ctx->stack_top[-1]->type == PDF_DICT_MARK) {
         int start_depth = pdfi_count_stack(ctx);
 
         /* Need to read all the elements from COS objects */
         do {
             code = pdfi_read_token(ctx, Object_stream, obj, gen);
             if (code < 0)
                 goto exit;
             if (code == 0) {
                 code = gs_note_error(gs_error_syntaxerror);
                 goto exit;
             }
             if (compressed_stream->eof == true) {
                 code = gs_note_error(gs_error_ioerror);
                 goto exit;
             }
         }while ((ctx->stack_top[-1]->type != PDF_ARRAY && ctx->stack_top[-1]->type != PDF_DICT) || pdfi_count_stack(ctx) > start_depth);
     }
 
     *object = ctx->stack_top[-1];
     /* For compressed objects we don't get a 'obj gen obj' sequence which is what sets
      * the object number for uncompressed objects. So we need to do that here.
      */
     (*object)->indirect_num = (*object)->object_num = obj;
     (*object)->indirect_gen = (*object)->generation_num = gen;
     pdfi_countup(*object);
     pdfi_pop(ctx, 1);
 
     code = pdfi_add_to_cache(ctx, *object);
     if (code < 0) {
         pdfi_countdown(*object);
         goto exit;
     }
 
  exit:
     if (Object_stream)
         pdfi_close_file(ctx, Object_stream);
     if (Object_stream != compressed_stream)
         if (compressed_stream)
             pdfi_close_file(ctx, compressed_stream);
     if (SubFile_stream)
         pdfi_close_file(ctx, SubFile_stream);
     pdfi_countdown(compressed_object);
     pdfi_countdown(Type);
     return code;
 }
 
 /* pdf_dereference returns an object with a reference count of at least 1, this represents the
  * reference being held by the caller (in **object) when we return from this function.
  */
