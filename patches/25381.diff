commit 03fca626a95130ab80f86adada54b29d27242759
Author: Alex Hultman <alexhultman@gmail.com>
Date:   Sun Sep 6 13:05:13 2020 +0200

    Fix overflow of triggered topics

diff --git a/src/TopicTree.h b/src/TopicTree.h
index 0b945b3..80dd180 100644
--- a/src/TopicTree.h
+++ b/src/TopicTree.h
@@ -68,114 +68,120 @@ struct TopicTree {
 private:
     std::function<int(Subscriber *, std::pair<std::string_view, std::string_view>)> cb;
 
     Topic *root = new Topic;
 
     /* Global messageId for deduplication of overlapping topics and ordering between topics */
     unsigned int messageId = 0;
 
     /* The triggered topics */
     Topic *triggeredTopics[64];
     int numTriggeredTopics = 0;
     Subscriber *min = (Subscriber *) UINTPTR_MAX;
 
     /* Cull or trim unused Topic nodes from leaf to root */
     void trimTree(Topic *topic) {
         repeat:
         if (!topic->subs.size() && !topic->children.size() && !topic->terminatingWildcardChild && !topic->wildcardChild) {
             Topic *parent = topic->parent;
 
             if (topic->length == 1) {
                 if (topic->name[0] == '#') {
                     parent->terminatingWildcardChild = nullptr;
                 } else if (topic->name[0] == '+') {
                     parent->wildcardChild = nullptr;
                 }
             }
             /* Erase us from our parents set (wildcards also live here) */
             parent->children.erase(std::string_view(topic->name, topic->length));
 
             /* If this node is triggered, make sure to remove it from the triggered list */
             if (topic->triggered) {
                 Topic *tmp[64];
                 int length = 0;
                 for (int i = 0; i < numTriggeredTopics; i++) {
                     if (triggeredTopics[i] != topic) {
                         tmp[length++] = triggeredTopics[i];
                     }
                 }
 
                 for (int i = 0; i < length; i++) {
                     triggeredTopics[i] = tmp[i];
                 }
                 numTriggeredTopics = length;
             }
 
             /* Free various memory for the node */
             delete [] topic->name;
             delete topic;
 
             if (parent != root) {
                 topic = parent;
                 goto repeat;
                 //trimTree(parent);
             }
         }
     }
 
     /* Should be getData and commit? */
     void publish(Topic *iterator, size_t start, size_t stop, std::string_view topic, std::pair<std::string_view, std::string_view> message) {
-        /* If we already have 64 triggered topics make sure to drain it here */
-        if (numTriggeredTopics == 64) {
-            drain();
-        }
 
         /* Iterate over all segments in given topic */
         for (; stop != std::string::npos; start = stop + 1) {
             stop = topic.find('/', start);
             std::string_view segment = topic.substr(start, stop - start);
 
             /* It is very important to disallow wildcards when publishing.
              * We will not catch EVERY misuse this lazy way, but enough to hinder
              * explosive recursion.
              * Terminating wildcards MAY still get triggered along the way, if for
              * instace the error is found late while iterating the topic segments. */
             if (segment.length() == 1) {
                 if (segment[0] == '+' || segment[0] == '#') {
                     return;
                 }
             }
 
             /* Do we have a terminating wildcard child? */
             if (iterator->terminatingWildcardChild) {
                 iterator->terminatingWildcardChild->messages[messageId] = message;
 
                 /* Add this topic to triggered */
                 if (!iterator->terminatingWildcardChild->triggered) {
+                    /* If we already have 64 triggered topics make sure to drain it here */
+                    if (numTriggeredTopics == 64) {
+                        drain();
+                    }
+
                     triggeredTopics[numTriggeredTopics++] = iterator->terminatingWildcardChild;
                     iterator->terminatingWildcardChild->triggered = true;
                 }
             }
 
             /* Do we have a wildcard child? */
             if (iterator->wildcardChild) {
                 publish(iterator->wildcardChild, stop + 1, stop, topic, message);
             }
 
             std::map<std::string_view, Topic *>::iterator it = iterator->children.find(segment);
             if (it == iterator->children.end()) {
                 /* Stop trying to match by exact string */
                 return;
             }
 
             iterator = it->second;
         }
 
         /* If we went all the way we matched exactly */
         iterator->messages[messageId] = message;
 
         /* Add this topic to triggered */
         if (!iterator->triggered) {
+            /* If we already have 64 triggered topics make sure to drain it here */
+            if (numTriggeredTopics == 64) {
+                drain();
+            }
+
             triggeredTopics[numTriggeredTopics++] = iterator;
             iterator->triggered = true;
         }
     }
