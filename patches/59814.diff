commit 94e5a84d1f05fe905e91a41e8a17e29437c3c15e
Author: Dirk Farin <dirk.farin@gmail.com>
Date:   Thu Oct 12 22:06:22 2023 +0200

    check for integer overflow in color_conversion_fuzzer (should fix Clusterfuzz issue 59814). Bug is in fuzzer code, not in library.

diff --git a/fuzzing/color_conversion_fuzzer.cc b/fuzzing/color_conversion_fuzzer.cc
index 9ce9bd5..2901d6f 100644
--- a/fuzzing/color_conversion_fuzzer.cc
+++ b/fuzzing/color_conversion_fuzzer.cc
@@ -60,22 +60,25 @@ static bool is_valid_colorspace(uint8_t colorspace)
 static bool read_plane(BitstreamRange* range,
                        std::shared_ptr<HeifPixelImage> image, heif_channel channel,
                        int width, int height, int bit_depth)
 {
   if (width <= 0 || height <= 0) {
     return false;
   }
-  if (!range->prepare_read(static_cast<uint64_t>(width) * height)) {
+  if (std::numeric_limits<size_t>::max()/width/height == 0) {
+    return false;
+  }
+  if (!range->prepare_read(static_cast<size_t>(width) * height)) {
     return false;
   }
   if (!image->add_plane(channel, width, height, bit_depth)) {
     return false;
   }
   int stride;
   uint8_t* plane = image->get_plane(channel, &stride);
   assert(stride >= width);
   auto stream = range->get_istream();
   for (int y = 0; y < height; y++, plane += stride) {
     assert(stream->read(plane, width));
   }
   return true;
 }
@@ -83,22 +86,25 @@ static bool read_plane(BitstreamRange* range,
 static bool read_plane_interleaved(BitstreamRange* range,
                                    std::shared_ptr<HeifPixelImage> image, heif_channel channel,
                                    int width, int height, int bit_depth, int comps)
 {
   if (width <= 0 || height <= 0) {
     return false;
   }
-  if (!range->prepare_read(static_cast<uint64_t>(width) * height * comps)) {
+  if (std::numeric_limits<size_t>::max()/width/height/comps == 0) {
+    return false;
+  }
+  if (!range->prepare_read(static_cast<size_t>(width) * height * comps)) {
     return false;
   }
   if (!image->add_plane(channel, width, height, bit_depth)) {
     return false;
   }
   int stride;
   uint8_t* plane = image->get_plane(channel, &stride);
   assert(stride >= width * comps);
   auto stream = range->get_istream();
   for (int y = 0; y < height; y++, plane += stride) {
     assert(stream->read(plane, width * comps));
   }
   return true;
 }
