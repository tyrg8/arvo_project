commit 1d8d9605e251d1b51281efe5ef8db07640e49203
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Thu Aug 18 11:25:15 2022 +0100

    GhostPDF - reference counting fix
    
    The file from OSS-fuzz 50321 has an Annotation with a /Parent which is
    an integer, this was causing us to count down the reference too many
    times and free the object while it was still in the cache, leading to
    a seg fault.

diff --git a/pdf/pdf_annot.c b/pdf/pdf_annot.c
index 42cf76d64..7102837b6 100644
--- a/pdf/pdf_annot.c
+++ b/pdf/pdf_annot.c
@@ -3631,100 +3631,99 @@ static int pdfi_annot_render_Widget(pdf_context *ctx, pdf_dict *annot)
 /* Draws a thing of type /Widget */
 static int pdfi_annot_draw_Widget(pdf_context *ctx, pdf_dict *annot, pdf_obj *NormAP, bool *render_done)
 {
     int code = 0;
     bool found_T = false;
     bool found_FT = false, known = false;
     pdf_obj *T = NULL;
     pdf_obj *FT = NULL;
     pdf_dict *Parent = NULL;
     pdf_dict *currdict = NULL;
 
     /* From pdf_draw.ps/drawwidget:
   % Acrobat doesn't draw Widget annotations unles they have both /FT
   % (which is defined as required) and /T keys present. Annoyingly
   % these can either be inherited from the Form Definition Field
   % dictionary (via the AcroForm tree) or present directly in the
   % annotation, so we need to check the annotation to make sure its
   % a Widget, then follow any /Parent key up to the root node
   % extracting and storing any FT or T keys as we go (we only care if
   % these are present, their value is immaterial). If after all that
   % both keys are not present, then we don't draw the annotation.
     */
 
     /* TODO: See top part of pdf_draw.ps/drawwidget
      * check for /FT and /T and stuff
      */
     currdict = annot;
     pdfi_countup(currdict);
     while (true) {
         code = pdfi_dict_knownget(ctx, currdict, "T", &T);
         if (code < 0) goto exit;
         if (code > 0) {
             found_T = true;
             if (found_FT)
                 break;
         }
         code = pdfi_dict_knownget(ctx, currdict, "FT", &FT);
         if (code < 0) goto exit;
         if (code > 0) {
             found_FT = true;
             if (found_T)
                 break;
         }
         /* Check for Parent. Do not store the dereferenced Parent back to the dictionary
          * as this can cause circular references.
          */
         code = pdfi_dict_known(ctx, currdict, "Parent", &known);
         if (code >= 0 && known == true)
         {
             code = pdfi_dict_get_no_store_R(ctx, currdict, "Parent", (pdf_obj **)&Parent);
             if (code < 0)
                 goto exit;
             if (pdfi_type_of(Parent) != PDF_DICT) {
                 if (pdfi_type_of(Parent) == PDF_INDIRECT) {
                     pdf_indirect_ref *o = (pdf_indirect_ref *)Parent;
 
                     code = pdfi_dereference(ctx, o->ref_object_num, o->ref_generation_num, (pdf_obj **)&Parent);
                     pdfi_countdown(o);
                     if (code < 0)
                         break;
                 } else {
-                    pdfi_countdown(Parent);
                     break;
                 }
             }
             pdfi_countdown(currdict);
             currdict = Parent;
             pdfi_countup(currdict);
         } else
             break;
     }
 
     code = 0;
     if (!found_T || !found_FT) {
         *render_done = true;
         dmprintf(ctx->memory, "**** Warning: A Widget annotation dictionary lacks either the FT or T key.\n");
         dmprintf(ctx->memory, "              Acrobat ignores such annoataions, annotation will not be rendered.\n");
         dmprintf(ctx->memory, "              Output may not be as expected.\n");
         goto exit;
     }
 
     if (NormAP) {
         /* Let caller render it */
         *render_done = false;
         goto exit;
     }
 
     /* No AP, try to render the Widget ourselves */
     code = pdfi_annot_render_Widget(ctx, annot);
     *render_done = true;
 
  exit:
     pdfi_countdown(T);
     pdfi_countdown(FT);
     pdfi_countdown(Parent);
     pdfi_countdown(currdict);
     return code;
 }
 
 /* Handle Annotations that are not implemented */
