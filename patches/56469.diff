commit 9054d993d2b035c78e61b54a8bd5515bb494e042
Author: Robin Watts <Robin.Watts@artifex.com>
Date:   Wed Mar 1 11:09:16 2023 +0000

    Change forward page map to be a list of object references.
    
    Currently, the forward page map is a list of object numbers.
    This means that when we pdf_lookup_page_obj, we resolve the
    object to get a borrowed ref (the xref reference) to the
    required object.
    
    Unfortunately, a lot of code that calls this assumes that
    we'll get a borrowed reference to an indirection object that
    points to the page object (i.e. they want a page ref, not the
    page object).
    
    To fix that, we move the array to be object references (as
    loaded from the Page tree, so indirection objects) rather than
    object numbers.
    
    This should fix the problem where PyMuPDF's xref member for
    the Page object was always returning 0.

diff --git a/include/mupdf/pdf/document.h b/include/mupdf/pdf/document.h
index d1b47686c..8b6fc2ae0 100644
--- a/include/mupdf/pdf/document.h
+++ b/include/mupdf/pdf/document.h
@@ -399,107 +399,107 @@ typedef struct
 struct pdf_document
 {
 	fz_document super;
 
 	fz_stream *file;
 
 	int version;
 	int64_t startxref;
 	int64_t file_size;
 	pdf_crypt *crypt;
 	pdf_ocg_descriptor *ocg;
 	fz_colorspace *oi;
 
 	int max_xref_len;
 	int num_xref_sections;
 	int saved_num_xref_sections;
 	int num_incremental_sections;
 	int xref_base;
 	int disallow_new_increments;
 
 	/* The local_xref is only active, if local_xref_nesting >= 0 */
 	pdf_xref *local_xref;
 	int local_xref_nesting;
 
 	pdf_xref *xref_sections;
 	pdf_xref *saved_xref_sections;
 	int *xref_index;
 	int save_in_progress;
 	int last_xref_was_old_style;
 	int has_linearization_object;
 
 	int map_page_count;
 	pdf_rev_page_map *rev_page_map;
-	int *fwd_page_map;
+	pdf_obj **fwd_page_map;
 	int page_tree_broken;
 
 	int repair_attempted;
 	int repair_in_progress;
 	int non_structural_change; /* True if we are modifying the document in a way that does not change the (page) structure */
 
 	/* State indicating which file parsing method we are using */
 	int file_reading_linearly;
 	int64_t file_length;
 
 	int linear_page_count;
 	pdf_obj *linear_obj; /* Linearized object (if used) */
 	pdf_obj **linear_page_refs; /* Page objects for linear loading */
 	int linear_page1_obj_num;
 
 	/* The state for the pdf_progressive_advance parser */
 	int64_t linear_pos;
 	int linear_page_num;
 
 	int hint_object_offset;
 	int hint_object_length;
 	int hints_loaded; /* Set to 1 after the hints loading has completed,
 			   * whether successful or not! */
 	/* Page n references shared object references:
 	 *   hint_shared_ref[i]
 	 * where
 	 *      i = s to e-1
 	 *	s = hint_page[n]->index
 	 *	e = hint_page[n+1]->index
 	 * Shared object reference r accesses objects:
 	 *   rs to re-1
 	 * where
 	 *   rs = hint_shared[r]->number
 	 *   re = hint_shared[r]->count + rs
 	 * These are guaranteed to lie within the region starting at
 	 * hint_shared[r]->offset of length hint_shared[r]->length
 	 */
 	pdf_hint_page *hint_page;
 	int *hint_shared_ref;
 	pdf_hint_shared *hint_shared;
 	int hint_obj_offsets_max;
 	int64_t *hint_obj_offsets;
 
 	int resources_localised;
 
 	pdf_lexbuf_large lexbuf;
 
 	pdf_js *js;
 
 	int recalculate;
 	int redacted;
 	int resynth_required;
 
 	pdf_doc_event_cb *event_cb;
 	pdf_free_doc_event_data_cb *free_event_data_cb;
 	void *event_cb_data;
 
 	int num_type3_fonts;
 	int max_type3_fonts;
 	fz_font **type3_fonts;
 
 	struct {
 		fz_hash_table *fonts;
 	} resources;
 
 	int orphans_max;
 	int orphans_count;
 	pdf_obj **orphans;
 
 	fz_xml_doc *xfa;
 
 	pdf_journal *journal;
 };
diff --git a/source/pdf/pdf-page.c b/source/pdf/pdf-page.c
index 7647a5e98..6d56c8c1d 100644
--- a/source/pdf/pdf-page.c
+++ b/source/pdf/pdf-page.c
@@ -48,28 +48,28 @@ static int
 pdf_load_page_tree_imp(fz_context *ctx, pdf_document *doc, pdf_obj *node, int idx, pdf_cycle_list *cycle_up)
 {
 	pdf_cycle_list cycle;
 	pdf_obj *type = pdf_dict_get(ctx, node, PDF_NAME(Type));
 	if (pdf_name_eq(ctx, type, PDF_NAME(Pages)))
 	{
 		pdf_obj *kids = pdf_dict_get(ctx, node, PDF_NAME(Kids));
 		int i, n = pdf_array_len(ctx, kids);
 		if (pdf_cycle(ctx, &cycle, cycle_up, node))
 			fz_throw(ctx, FZ_ERROR_GENERIC, "cycle in page tree");
 		for (i = 0; i < n; ++i)
 			idx = pdf_load_page_tree_imp(ctx, doc, pdf_array_get(ctx, kids, i), idx, &cycle);
 	}
 	else if (pdf_name_eq(ctx, type, PDF_NAME(Page)))
 	{
 		if (idx >= doc->map_page_count)
 			fz_throw(ctx, FZ_ERROR_GENERIC, "too many kids in page tree");
 		doc->rev_page_map[idx].page = idx;
 		doc->rev_page_map[idx].object = pdf_to_num(ctx, node);
-		doc->fwd_page_map[idx] = doc->rev_page_map[idx].object;
+		doc->fwd_page_map[idx] = pdf_keep_obj(ctx, node);
 		++idx;
 	}
 	else
 	{
 		fz_throw(ctx, FZ_ERROR_GENERIC, "non-page object in page tree");
 	}
 	return idx;
 }
@@ -88,29 +88,39 @@ pdf_load_page_tree(fz_context *ctx, pdf_document *doc)
 	/* Noop now. */
 }
 
+void
+pdf_drop_page_tree_internal(fz_context *ctx, pdf_document *doc)
+{
+	int i;
+	fz_free(ctx, doc->rev_page_map);
+	doc->rev_page_map = NULL;
+	for (i = 0; i < doc->map_page_count; i++)
+		pdf_drop_obj(ctx, doc->fwd_page_map[i]);
+	fz_free(ctx, doc->fwd_page_map);
+	doc->fwd_page_map = NULL;
+	doc->map_page_count = 0;
+}
+
 static void
 pdf_load_page_tree_internal(fz_context *ctx, pdf_document *doc)
 {
 	/* Check we're not already loaded. */
 	if (doc->fwd_page_map != NULL)
 		return;
 
 	/* At this point we're trusting that only 1 thread should be doing
 	 * stuff that hits the document at a time. */
 	fz_try(ctx)
 	{
 		doc->map_page_count = pdf_count_pages(ctx, doc);
-		doc->rev_page_map = Memento_label(fz_malloc_array(ctx, doc->map_page_count, pdf_rev_page_map), "pdf_rev_page_map");
-		doc->fwd_page_map = Memento_label(fz_malloc_array(ctx, doc->map_page_count, int), "pdf_fwd_page_map");
+		doc->rev_page_map = Memento_label(fz_calloc(ctx, doc->map_page_count, sizeof(pdf_rev_page_map)), "pdf_rev_page_map");
+		doc->fwd_page_map = Memento_label(fz_calloc(ctx, doc->map_page_count, sizeof(pdf_obj *)), "pdf_fwd_page_map");
 		pdf_load_page_tree_imp(ctx, doc, pdf_dict_getp(ctx, pdf_trailer(ctx, doc), "Root/Pages"), 0, NULL);
 		qsort(doc->rev_page_map, doc->map_page_count, sizeof *doc->rev_page_map, cmp_rev_page_map);
 	}
 	fz_catch(ctx)
 	{
-		fz_free(ctx, doc->rev_page_map);
-		doc->rev_page_map = NULL;
-		fz_free(ctx, doc->fwd_page_map);
-		doc->fwd_page_map = NULL;
+		pdf_drop_page_tree_internal(ctx, doc);
 		fz_rethrow(ctx);
 	}
 }
@@ -121,18 +131,6 @@ pdf_drop_page_tree(fz_context *ctx, pdf_document *doc)
 	/* Historical entry point. Now does nothing. We drop 'just in time'. */
 }
 
-void
-pdf_drop_page_tree_internal(fz_context *ctx, pdf_document *doc)
-{
-	/* At this point we're trusting that only 1 thread should be doing
-	 * stuff that hits the document at a time. */
-	fz_free(ctx, doc->rev_page_map);
-	doc->rev_page_map = NULL;
-	fz_free(ctx, doc->fwd_page_map);
-	doc->fwd_page_map = NULL;
-	doc->map_page_count = 0;
-}
-
 static pdf_obj *
 pdf_lookup_page_loc_imp(fz_context *ctx, pdf_document *doc, pdf_obj *node, int *skip, pdf_obj **parentp, int *indexp)
 {
@@ -232,31 +230,23 @@ pdf_obj *
 pdf_lookup_page_obj(fz_context *ctx, pdf_document *doc, int needle)
 {
 	if (doc->fwd_page_map == NULL && !doc->page_tree_broken)
 	{
 		fz_try(ctx)
 			pdf_load_page_tree_internal(ctx, doc);
 		fz_catch(ctx)
 		{
 			doc->page_tree_broken = 1;
 			fz_warn(ctx, "Page tree load failed. Falling back to slow lookup");
 		}
 	}
 
-	/* If we have a fwd_page_map then look it up. If the index in that map is 0 then
-	 * maybe it was direct page object rather than a reference. This is illegal, but
-	 * we've seen it in tests_private/pdf/sumatra/page_no_indirect_reference.pdf so
-	 * we might as well cope. */
 	if (doc->fwd_page_map)
 	{
 		if (needle < 0 || needle >= doc->map_page_count)
 			fz_throw(ctx, FZ_ERROR_GENERIC, "cannot find page %d in page tree", needle+1);
-		if (doc->fwd_page_map[needle] != 0)
-		{
-			pdf_obj *pageobj = pdf_load_object(ctx, doc, doc->fwd_page_map[needle]);
-			pdf_drop_obj(ctx, pageobj);
-			return pageobj;
-		}
+		if (doc->fwd_page_map[needle] != NULL)
+			return doc->fwd_page_map[needle];
 	}
 
 	return pdf_lookup_page_loc(ctx, doc, needle, NULL, NULL);
 }
