commit c7ca521bc85b57d41d3ad4963c13fc0100481084
Author: DRC <information@libjpeg-turbo.org>
Date:   Sat Nov 28 06:38:27 2020 -0600

    Fix uninitialized read in decompress_smooth_data()
    
    Regression introduced by 42825b68d570fb07fe820ac62ad91017e61e9a25
    
    Referring to the discussion in #459, the OSS-Fuzz test case
    https://github.com/libjpeg-turbo/libjpeg-turbo/files/5597075/clusterfuzz-testcase-minimized-pngsave_buffer_fuzzer-5728375846731776.txt
    created a situation in which
      cinfo->output_iMCU_row > cinfo->master->last_good_iMCU_row
    but
      cinfo->input_scan_number == 1
    thus causing decompress_smooth_data() to read from
    prev_coef_bits_latch[], which was uninitialized.  I was unable to create
    the same situation with a real JPEG image.

diff --git a/ChangeLog.md b/ChangeLog.md
index 9084bee0..d312f27f 100644
--- a/ChangeLog.md
+++ b/ChangeLog.md
@@ -7,10 +7,14 @@
 decompress certain progressive JPEG images with one or more component planes of
 width 8 or less caused a buffer overrun.
 
+2. Fixed a regression introduced by 2.1 beta1[6(b)] whereby attempting to
+decompress a specially-crafted malformed progressive JPEG image caused the
+block smoothing algorithm to read from uninitialized memory.
+
 
 2.0.90 (2.1 beta1)
 ==================
 
 ### Significant changes relative to 2.0.6:
 
 1. The build system, x86-64 SIMD extensions, and accelerated Huffman codec now
diff --git a/jdcoefct.c b/jdcoefct.c
index a3c6d4e8..15e6cded 100644
--- a/jdcoefct.c
+++ b/jdcoefct.c
@@ -359,65 +359,67 @@ LOCAL(boolean)
 smoothing_ok(j_decompress_ptr cinfo)
 {
   my_coef_ptr coef = (my_coef_ptr)cinfo->coef;
   boolean smoothing_useful = FALSE;
   int ci, coefi;
   jpeg_component_info *compptr;
   JQUANT_TBL *qtable;
   int *coef_bits, *prev_coef_bits;
   int *coef_bits_latch, *prev_coef_bits_latch;
 
   if (!cinfo->progressive_mode || cinfo->coef_bits == NULL)
     return FALSE;
 
   /* Allocate latch area if not already done */
   if (coef->coef_bits_latch == NULL)
     coef->coef_bits_latch = (int *)
       (*cinfo->mem->alloc_small) ((j_common_ptr)cinfo, JPOOL_IMAGE,
                                   cinfo->num_components * 2 *
                                   (SAVED_COEFS * sizeof(int)));
   coef_bits_latch = coef->coef_bits_latch;
   prev_coef_bits_latch =
     &coef->coef_bits_latch[cinfo->num_components * SAVED_COEFS];
 
   for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
        ci++, compptr++) {
     /* All components' quantization values must already be latched. */
     if ((qtable = compptr->quant_table) == NULL)
       return FALSE;
     /* Verify DC & first 9 AC quantizers are nonzero to avoid zero-divide. */
     if (qtable->quantval[0] == 0 ||
         qtable->quantval[Q01_POS] == 0 ||
         qtable->quantval[Q10_POS] == 0 ||
         qtable->quantval[Q20_POS] == 0 ||
         qtable->quantval[Q11_POS] == 0 ||
         qtable->quantval[Q02_POS] == 0 ||
         qtable->quantval[Q03_POS] == 0 ||
         qtable->quantval[Q12_POS] == 0 ||
         qtable->quantval[Q21_POS] == 0 ||
         qtable->quantval[Q30_POS] == 0)
       return FALSE;
     /* DC values must be at least partly known for all components. */
     coef_bits = cinfo->coef_bits[ci];
     prev_coef_bits = cinfo->coef_bits[ci + cinfo->num_components];
     if (coef_bits[0] < 0)
       return FALSE;
     coef_bits_latch[0] = coef_bits[0];
     /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
     for (coefi = 1; coefi < SAVED_COEFS; coefi++) {
       if (cinfo->input_scan_number > 1)
         prev_coef_bits_latch[coefi] = prev_coef_bits[coefi];
+      else
+        prev_coef_bits_latch[coefi] = -1;
       coef_bits_latch[coefi] = coef_bits[coefi];
       if (coef_bits[coefi] != 0)
         smoothing_useful = TRUE;
     }
     coef_bits_latch += SAVED_COEFS;
     prev_coef_bits_latch += SAVED_COEFS;
   }
 
   return smoothing_useful;
 }
 
 
 /*
  * Variant of decompress_data for use when doing block smoothing.
  */
