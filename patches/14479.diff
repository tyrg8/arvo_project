commit f19f0b8169c3daa60e37b0293a2d4be8b768e5cc
Author: Abtin Keshavarzian <abtink@google.com>
Date:   Tue Apr 30 18:01:58 2019 -0700

    Initialize pointer/len variable in handle_ncp_spinel_value_is_SERVICES (#407)

diff --git a/src/ncp-spinel/SpinelNCPInstance.cpp b/src/ncp-spinel/SpinelNCPInstance.cpp
index 641bd7f..bdf1eaf 100644
--- a/src/ncp-spinel/SpinelNCPInstance.cpp
+++ b/src/ncp-spinel/SpinelNCPInstance.cpp
@@ -1289,72 +1289,72 @@ static int
 unpack_server_leader_services_as_any(const uint8_t *data_in, spinel_size_t data_len, boost::any& value, bool as_val_map)
 {
 	int ret = kWPANTUNDStatus_Ok;
 	spinel_ssize_t len;
 	uint8_t service_id;
 	uint32_t enterprise_number;
 	const uint8_t *service_data;
 	spinel_size_t service_data_len;
 	bool stable;
 	const uint8_t *server_data;
 	spinel_size_t server_data_len;
 	uint16_t rloc16;
 	int num_service = 0;
 	char c_string[500];
-	
+
 	std::list<ValueMap> result_as_val_map_list;
 	std::list<std::string> result_as_string_list;
 
 	while (data_len > 0) {
 		len = spinel_datatype_unpack(
 			data_in,
 			data_len,
 			SPINEL_DATATYPE_STRUCT_S(
 				SPINEL_DATATYPE_UINT8_S		// Service ID
 				SPINEL_DATATYPE_UINT32_S    // Enterprise Number
 				SPINEL_DATATYPE_DATA_WLEN_S // Service Data
 				SPINEL_DATATYPE_BOOL_S      // stable
 				SPINEL_DATATYPE_DATA_WLEN_S // Server Data
 				SPINEL_DATATYPE_UINT16_S    // RLOC
 			),
 			&service_id,
 			&enterprise_number,
 			&service_data,
 			&service_data_len,
 			&stable,
 			&server_data,
 			&server_data_len,
 			&rloc16
 		);
 
 		if (len <= 0) {
 			break;
 		}
 
 		if (as_val_map) {
 			ValueMap result_as_val_map;
 			result_as_val_map[kWPANTUNDValueMapKey_Service_ServiceId] = service_id;
 			result_as_val_map[kWPANTUNDValueMapKey_Service_EnterpriseNumber] = enterprise_number;
 			result_as_val_map[kWPANTUNDValueMapKey_Service_ServiceData] = Data(service_data, service_data_len);
 			result_as_val_map[kWPANTUNDValueMapKey_Service_Stable] = stable;
 			result_as_val_map[kWPANTUNDValueMapKey_Service_ServerData] = Data(server_data, server_data_len);
 			result_as_val_map[kWPANTUNDValueMapKey_Service_RLOC16] = rloc16;
 			result_as_val_map_list.push_back(result_as_val_map);
 		} else {
 			snprintf(c_string, sizeof(c_string), "ServiceId:%01x, EnterpriseNumber:%u, Stable:%d, RLOC16:%04x", service_id, enterprise_number, stable, rloc16);
 			result_as_string_list.push_back(std::string(c_string));
 		}
 
 		num_service++;
 
 		data_in += len;
 		data_len -= len;
 	}
 
 	if (as_val_map) {
 		value = result_as_val_map_list;
 	} else {
 		value = result_as_string_list;
 	}
 
 	return ret;
 }
@@ -4169,65 +4169,65 @@ void
 SpinelNCPInstance::handle_ncp_spinel_value_is_SERVICES(const uint8_t* value_data_ptr, spinel_size_t value_data_len)
 {
 	uint32_t enterprise_number;
-	const uint8_t *service_data_ptr;
-	spinel_size_t service_data_len;
+	const uint8_t *service_data_ptr = NULL;
+	spinel_size_t service_data_len = 0;
 	bool stable;
-	const uint8_t *server_data_ptr;
-	spinel_size_t server_data_len;
+	const uint8_t *server_data_ptr = NULL;
+	spinel_size_t server_data_len = 0;
 	uint16_t rloc16;
 	int num_services = 0;
 	spinel_ssize_t len;
 
 	std::vector<ServiceEntry> entries(mServiceEntries);
 	std::vector<ServiceEntry>::iterator iter;
 
 	while (value_data_len > 0) {
 		len = spinel_datatype_unpack(
 			value_data_ptr,
 			value_data_len,
 			SPINEL_DATATYPE_STRUCT_S(
 				SPINEL_DATATYPE_UINT32_S    // Enterprise Number
 				SPINEL_DATATYPE_DATA_WLEN_S // Service Data
 				SPINEL_DATATYPE_BOOL_S      // stable
 				SPINEL_DATATYPE_DATA_WLEN_S // Server Data
 				SPINEL_DATATYPE_UINT16_S    // RLOC
 			),
 			&enterprise_number,
 			&service_data_ptr,
 			&service_data_len,
 			&stable,
 			&server_data_ptr,
 			&server_data_len,
 			&rloc16
 		);
 
 		if (len <= 0) {
 			break;
 		}
 
 		syslog(LOG_INFO, "[-NCP-]: Service [%d] enterprise_number:%u stable:%d RLOC16:%04x",
 			num_services, enterprise_number, stable, rloc16);
-		
+
 		Data service_data(service_data_ptr, service_data_len);
 		Data server_data(server_data_ptr, server_data_len);
 
 		ServiceEntry entry(kOriginThreadNCP, enterprise_number, service_data, stable, server_data);
 
 		iter = std::find(entries.begin(), entries.end(), entry);
 		if (iter != entries.end()) {
 			entries.erase(iter);
 		}
 
 		service_was_added(kOriginThreadNCP, enterprise_number, service_data, stable, server_data);
-	
+
 		value_data_ptr += len;
 		value_data_len -= len;
 		num_services += 1;
 	}
 
 	for (iter = entries.begin(); iter != entries.end(); ++iter) {
 		if (iter->is_from_ncp()) {
 			service_was_removed(kOriginThreadNCP, iter->get_enterprise_number(), iter->get_service_data());
 		}
 	}
 }
@@ -4236,826 +4236,826 @@ void
 SpinelNCPInstance::handle_ncp_spinel_value_is(spinel_prop_key_t key, const uint8_t* value_data_ptr, spinel_size_t value_data_len)
 {
 	const uint8_t *original_value_data_ptr = value_data_ptr;
 	spinel_size_t original_value_data_len = value_data_len;
 
 	if (key == SPINEL_PROP_LAST_STATUS) {
 		spinel_status_t status = SPINEL_STATUS_OK;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, "i", &status);
 		syslog(LOG_INFO, "[-NCP-]: Last status (%s, %d)", spinel_status_to_cstr(status), status);
 		if ((status >= SPINEL_STATUS_RESET__BEGIN) && (status <= SPINEL_STATUS_RESET__END)) {
 			syslog(LOG_NOTICE, "[-NCP-]: NCP was reset (%s, %d)", spinel_status_to_cstr(status), status);
 			process_event(EVENT_NCP_RESET, status);
 			if (!mResetIsExpected && (mDriverState == NORMAL_OPERATION)) {
 				wpantund_status_t wstatus = kWPANTUNDStatus_NCP_Reset;
 				switch(status) {
 				case SPINEL_STATUS_RESET_CRASH:
 				case SPINEL_STATUS_RESET_FAULT:
 				case SPINEL_STATUS_RESET_ASSERT:
 				case SPINEL_STATUS_RESET_WATCHDOG:
 				case SPINEL_STATUS_RESET_OTHER:
 					wstatus = kWPANTUNDStatus_NCP_Crashed;
 					break;
 				default:
 					break;
 				}
 				reset_tasks(wstatus);
 			}
 
 			if (mDriverState == NORMAL_OPERATION) {
 				reinitialize_ncp();
 			}
 			mResetIsExpected = false;
 			return;
 		} else if ((status >= SPINEL_STATUS_JOIN__BEGIN) && (status <= SPINEL_STATUS_JOIN__END)) {
 			if (status == SPINEL_STATUS_JOIN_SUCCESS) {
 				change_ncp_state(COMMISSIONED);
 			}
 			else {
 				change_ncp_state(CREDENTIALS_NEEDED);
 			}
 		} else if (status == SPINEL_STATUS_INVALID_COMMAND) {
 			syslog(LOG_NOTICE, "[-NCP-]: COMMAND NOT RECOGNIZED");
 		}
 	} else if (key == SPINEL_PROP_NCP_VERSION) {
 		const char* ncp_version = NULL;
 		spinel_ssize_t len = spinel_datatype_unpack(value_data_ptr, value_data_len, "U", &ncp_version);
 		if ((len <= 0) || (ncp_version == NULL)) {
 			syslog(LOG_CRIT, "[-NCP-]: Got a corrupted NCP version");
 			// TODO: Properly handle NCP Misbehavior
 			change_ncp_state(FAULT);
 		} else {
 			set_ncp_version_string(ncp_version);
 		}
 
 	} else if (key == SPINEL_PROP_INTERFACE_TYPE) {
 		unsigned int interface_type = 0;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, "i", &interface_type);
 
 		if (interface_type != SPINEL_PROTOCOL_TYPE_THREAD) {
 			syslog(LOG_CRIT, "[-NCP-]: NCP is using unsupported protocol type (%d)", interface_type);
 			change_ncp_state(FAULT);
 		}
 
 	} else if (key == SPINEL_PROP_PROTOCOL_VERSION) {
 		unsigned int protocol_version_major = 0;
 		unsigned int protocol_version_minor = 0;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, "ii", &protocol_version_major, &protocol_version_minor);
 
 		if (protocol_version_major != SPINEL_PROTOCOL_VERSION_THREAD_MAJOR) {
 			syslog(LOG_CRIT, "[-NCP-]: NCP is using unsupported protocol version (NCP:%d, wpantund:%d)", protocol_version_major, SPINEL_PROTOCOL_VERSION_THREAD_MAJOR);
 			change_ncp_state(FAULT);
 		}
 
 		if (protocol_version_minor != SPINEL_PROTOCOL_VERSION_THREAD_MINOR) {
 			syslog(LOG_WARNING, "[-NCP-]: NCP is using different protocol minor version (NCP:%d, wpantund:%d)", protocol_version_minor, SPINEL_PROTOCOL_VERSION_THREAD_MINOR);
 		}
 
 	} else if (key == SPINEL_PROP_CAPS) {
 		const uint8_t* data_ptr = value_data_ptr;
 		spinel_size_t data_len = value_data_len;
 		std::set<unsigned int> capabilities;
 
 		while(data_len != 0) {
 			unsigned int value = 0;
 			spinel_ssize_t parse_len = spinel_datatype_unpack(data_ptr, data_len, SPINEL_DATATYPE_UINT_PACKED_S, &value);
 			if (parse_len <= 0) {
 				syslog(LOG_WARNING, "[-NCP-]: Capability Parse failure");
 				break;
 			}
 			capabilities.insert(value);
 			syslog(LOG_INFO, "[-NCP-]: Capability (%s, %d)", spinel_capability_to_cstr(value), value);
 
 			data_ptr += parse_len;
 			data_len -= parse_len;
 		}
 
 		if (capabilities != mCapabilities) {
 			mCapabilities = capabilities;
 		}
 
 	} else if (key == SPINEL_PROP_NET_NETWORK_NAME) {
 		const char* value = NULL;
 		spinel_ssize_t len = spinel_datatype_unpack(value_data_ptr, value_data_len, "U", &value);
 
 		if ((len <= 0) || (value == NULL)) {
 			syslog(LOG_CRIT, "[-NCP-]: Got a corrupted NCP version");
 			// TODO: Properly handle NCP Misbehavior
 			change_ncp_state(FAULT);
 		} else {
 			syslog(LOG_INFO, "[-NCP-]: Network name \"%s\"", value);
 			if (mCurrentNetworkInstance.name != value) {
 				mCurrentNetworkInstance.name = value;
 				signal_property_changed(kWPANTUNDProperty_NetworkName, mCurrentNetworkInstance.name);
 			}
 		}
 
 	} else if (key == SPINEL_PROP_MCU_POWER_STATE) {
 		uint8_t power_state = 0;
 		spinel_ssize_t len = 0;
 
 		len  = spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT8_S, &power_state);
 
 		if (len > 0) {
 			syslog(LOG_INFO, "[-NCP-]: MCU power state \"%s\" (%d)",
 				spinel_mcu_power_state_to_cstr(static_cast<spinel_mcu_power_state_t>(power_state)), power_state);
 
 			switch (get_ncp_state()) {
 			case OFFLINE:
 			case COMMISSIONED:
 				if (power_state == SPINEL_MCU_POWER_STATE_LOW_POWER) {
 					change_ncp_state(DEEP_SLEEP);
 				}
 				break;
 
 			case DEEP_SLEEP:
 				if (power_state == SPINEL_MCU_POWER_STATE_ON) {
 					change_ncp_state(mIsCommissioned ? COMMISSIONED : OFFLINE);
 				}
 				break;
 
 			default:
 				break;
 			}
 		}
 
 	} else if (key == SPINEL_PROP_IPV6_LL_ADDR) {
 		struct in6_addr *addr = NULL;
 
 		spinel_datatype_unpack(value_data_ptr, value_data_len, "6", &addr);
 		if (addr != NULL) {
 			syslog(LOG_INFO, "[-NCP-]: Link-local IPv6 address \"%s\"", in6_addr_to_string(*addr).c_str());
 		}
 		update_link_local_address(addr);
 
 	} else if (key == SPINEL_PROP_IPV6_ML_ADDR) {
 		struct in6_addr *addr = NULL;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, "6", &addr);
 		if (addr != NULL) {
 			syslog(LOG_INFO, "[-NCP-]: Mesh-local IPv6 address \"%s\"", in6_addr_to_string(*addr).c_str());
 		}
 		update_mesh_local_address(addr);
 
 	} else if (key == SPINEL_PROP_IPV6_ML_PREFIX) {
 		struct in6_addr *addr = NULL;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, "6", &addr);
 		if (addr != NULL) {
 			syslog(LOG_INFO, "[-NCP-]: Mesh-local prefix \"%s\"", (in6_addr_to_string(*addr) + "/64").c_str());
 		}
 		update_mesh_local_prefix(addr);
 
 	} else if (key == SPINEL_PROP_IPV6_ADDRESS_TABLE) {
 		std::map<struct in6_addr, UnicastAddressEntry>::const_iterator iter;
 		std::map<struct in6_addr, UnicastAddressEntry> unicast_addresses(mUnicastAddresses);
 		const struct in6_addr *addr = NULL;
 		int num_address = 0;
 
 		while (value_data_len > 0) {
 			const uint8_t *entry_ptr = NULL;
 			spinel_size_t entry_len = 0;
 			spinel_ssize_t len = 0;
 			len = spinel_datatype_unpack(value_data_ptr, value_data_len, "D.", &entry_ptr, &entry_len);
 			if (len < 1) {
 				break;
 			}
 
 			addr = reinterpret_cast<const struct in6_addr*>(entry_ptr);
 			syslog(LOG_INFO, "[-NCP-]: IPv6 address [%d] \"%s\"", num_address, in6_addr_to_string(*addr).c_str());
 			num_address++;
 			unicast_addresses.erase(*addr);
 			handle_ncp_spinel_value_inserted(key, entry_ptr, entry_len);
 
 			value_data_ptr += len;
 			value_data_len -= len;
 		}
 
 		syslog(LOG_INFO, "[-NCP-]: IPv6 address: Total %d address%s", num_address, (num_address > 1) ? "es" : "");
 
 		// Since this was the whole list, we need to remove the addresses
 		// which originated from NCP that that weren't in the list.
 		for (iter = unicast_addresses.begin(); iter != unicast_addresses.end(); ++iter) {
 			if (iter->second.is_from_ncp()) {
 				unicast_address_was_removed(kOriginThreadNCP, iter->first);
 			}
 		}
 
 	} else if (key == SPINEL_PROP_IPV6_MULTICAST_ADDRESS_TABLE) {
 		std::map<struct in6_addr, MulticastAddressEntry>::const_iterator iter;
 		std::map<struct in6_addr, MulticastAddressEntry> multicast_addresses(mMulticastAddresses);
 		const struct in6_addr *addr = NULL;
 		int num_address = 0;
 
 		while (value_data_len > 0) {
 			const uint8_t *entry_ptr = NULL;
 			spinel_size_t entry_len = 0;
 			spinel_ssize_t len = 0;
 			len = spinel_datatype_unpack(value_data_ptr, value_data_len, "D.", &entry_ptr, &entry_len);
 			if (len < 1) {
 				break;
 			}
 
 			addr = reinterpret_cast<const struct in6_addr*>(entry_ptr);
 			syslog(LOG_INFO, "[-NCP-]: Multicast IPv6 address [%d] \"%s\"", num_address, in6_addr_to_string(*addr).c_str());
 			num_address++;
 			multicast_addresses.erase(*addr);
 			handle_ncp_spinel_value_inserted(key, entry_ptr, entry_len);
 
 			value_data_ptr += len;
 			value_data_len -= len;
 		}
 
 		// Since this was the whole list, we need to remove the addresses
 		// which originated from NCP that that weren't in the list.
 		for (iter = multicast_addresses.begin(); iter != multicast_addresses.end(); ++iter) {
 			if (iter->second.is_from_ncp()) {
 				multicast_address_was_left(kOriginThreadNCP, iter->first);
 			}
 		}
 
 	} else if (key == SPINEL_PROP_HWADDR) {
 		nl::Data hwaddr(value_data_ptr, value_data_len);
 		if (value_data_len == sizeof(mMACHardwareAddress)) {
 			set_mac_hardware_address(value_data_ptr);
 		}
 
 	} else if (key == SPINEL_PROP_MAC_15_4_LADDR) {
 		nl::Data hwaddr(value_data_ptr, value_data_len);
 		if (value_data_len == sizeof(mMACAddress)) {
 			set_mac_address(value_data_ptr);
 		}
 
 	} else if (key == SPINEL_PROP_MAC_15_4_PANID) {
 		uint16_t panid;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT16_S, &panid);
 		syslog(LOG_INFO, "[-NCP-]: PANID 0x%04X", panid);
 		if (panid != mCurrentNetworkInstance.panid) {
 			mCurrentNetworkInstance.panid = panid;
 			signal_property_changed(kWPANTUNDProperty_NetworkPANID, panid);
 		}
 
 	} else if (key == SPINEL_PROP_NET_XPANID) {
 		nl::Data xpanid(value_data_ptr, value_data_len);
 		char cstr_buf[200];
 		encode_data_into_string(value_data_ptr, value_data_len, cstr_buf, sizeof(cstr_buf), 0);
 		syslog(LOG_INFO, "[-NCP-] XPANID 0x%s", cstr_buf);
 
 		if ((value_data_len == 8) && 0 != memcmp(xpanid.data(), mCurrentNetworkInstance.xpanid, 8)) {
 			memcpy(mCurrentNetworkInstance.xpanid, xpanid.data(), 8);
 			signal_property_changed(kWPANTUNDProperty_NetworkXPANID, xpanid);
 		}
 
 	} else if (key == SPINEL_PROP_NET_PSKC) {
 		nl::Data network_pskc(value_data_ptr, value_data_len);
 		if (network_pskc != mNetworkPSKc) {
 			mNetworkPSKc = network_pskc;
 			signal_property_changed(kWPANTUNDProperty_NetworkPSKc, mNetworkPSKc);
 		}
 
 	} else if (key == SPINEL_PROP_NET_MASTER_KEY) {
 		nl::Data network_key(value_data_ptr, value_data_len);
 		if (ncp_state_is_joining_or_joined(get_ncp_state())) {
 			if (network_key != mNetworkKey) {
 				mNetworkKey = network_key;
 				signal_property_changed(kWPANTUNDProperty_NetworkKey, mNetworkKey);
 			}
 		}
 
 	} else if (key == SPINEL_PROP_NET_KEY_SEQUENCE_COUNTER) {
 		uint32_t network_key_index = 0;
 		spinel_ssize_t ret;
 
 		ret = spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT32_S, &network_key_index);
 
 		__ASSERT_MACROS_check(ret > 0);
 
 		if ((ret > 0) && (network_key_index != mNetworkKeyIndex)) {
 			mNetworkKeyIndex = network_key_index;
 			signal_property_changed(kWPANTUNDProperty_NetworkKeyIndex, mNetworkKeyIndex);
 		}
 
 	} else if (key == SPINEL_PROP_PHY_CHAN) {
 		unsigned int value = 0;
 		spinel_ssize_t ret;
 
 		ret = spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT_PACKED_S, &value);
 
 		__ASSERT_MACROS_check(ret > 0);
 
 		if (ret > 0) {
 			syslog(LOG_INFO, "[-NCP-]: Channel %d", value);
 			if (value != mCurrentNetworkInstance.channel) {
 				mCurrentNetworkInstance.channel = value;
 				signal_property_changed(kWPANTUNDProperty_NCPChannel, mCurrentNetworkInstance.channel);
 			}
 		}
 
 	} else if (key == SPINEL_PROP_PHY_CHAN_SUPPORTED) {
 		boost::any mask_value;
 		int ret = unpack_channel_mask(value_data_ptr, value_data_len, mask_value);
 
 		if (ret == kWPANTUNDStatus_Ok) {
 			mSupportedChannelMask = any_to_int(mask_value);
 			syslog(LOG_INFO, "[-NCP-]: Supported Channel Mask 0x%x", mSupportedChannelMask);
 		}
 
 	} else if (key == SPINEL_PROP_PHY_CHAN_PREFERRED) {
 		boost::any mask_value;
 		int ret = unpack_channel_mask(value_data_ptr, value_data_len, mask_value);
 
 		if (ret == kWPANTUNDStatus_Ok) {
 			mPreferredChannelMask = any_to_int(mask_value);
 			syslog(LOG_INFO, "[-NCP-]: Preferred Channel Mask 0x%x", mPreferredChannelMask);
 		}
 
 	} else if (key == SPINEL_PROP_PHY_TX_POWER) {
 		int8_t value = 0;
 		spinel_ssize_t ret;
 
 		ret = spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_INT8_S, &value);
 
 		__ASSERT_MACROS_check(ret > 0);
 
 		if (ret > 0) {
 			syslog(LOG_INFO, "[-NCP-]: Tx power %d", value);
 			if (value != mTXPower) {
 				mTXPower = value;
 				signal_property_changed(kWPANTUNDProperty_NCPTXPower, mTXPower);
 			}
 		}
 
 	} else if (key == SPINEL_PROP_STREAM_DEBUG) {
 		handle_ncp_debug_stream(value_data_ptr, value_data_len);
 
 	} else if (key == SPINEL_PROP_STREAM_LOG) {
 		handle_ncp_log_stream(value_data_ptr, value_data_len);
 
 	} else if (key == SPINEL_PROP_NET_ROLE) {
 		uint8_t value = 0;
 		spinel_ssize_t ret;
 
 		ret = spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT8_S, &value);
 
 		__ASSERT_MACROS_check(ret > 0);
 
 		if (ret > 0) {
 			syslog(LOG_INFO, "[-NCP-]: Net Role \"%s\" (%d)", spinel_net_role_to_cstr(value), value);
 
 			if (ncp_state_is_joining_or_joined(get_ncp_state())
 			  && (value != SPINEL_NET_ROLE_DETACHED)
 			) {
 				change_ncp_state(ASSOCIATED);
 			}
 
 			if (value == SPINEL_NET_ROLE_CHILD) {
 				if ((mThreadMode & SPINEL_THREAD_MODE_RX_ON_WHEN_IDLE) != 0) {
 					update_node_type(END_DEVICE);
 				} else {
 					update_node_type(SLEEPY_END_DEVICE);
 				}
 
 			} else if (value == SPINEL_NET_ROLE_ROUTER) {
 				update_node_type(ROUTER);
 
 			} else if (value == SPINEL_NET_ROLE_LEADER) {
 				update_node_type(LEADER);
 
 			} else if (value == SPINEL_NET_ROLE_DETACHED) {
 				update_node_type(UNKNOWN);
 				if (ncp_state_is_associated(get_ncp_state())) {
 					change_ncp_state(ISOLATED);
 				}
 			}
 		}
 
 	} else if (key == SPINEL_PROP_THREAD_MODE) {
 		uint8_t value = mThreadMode;
 		spinel_ssize_t ret;
 
 		ret = spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT8_S, &value);
 
 		__ASSERT_MACROS_check(ret > 0);
 
 		if (ret > 0) {
 			syslog(LOG_INFO, "[-NCP-]: Thread Mode \"%s\" (0x%02x)", thread_mode_to_string(value).c_str(), value);
 			mThreadMode = value;
 
 			switch (get_ncp_state())
 			{
 			case ISOLATED:
 				if ((mThreadMode & SPINEL_THREAD_MODE_RX_ON_WHEN_IDLE) != 0) {
 					change_ncp_state(ASSOCIATING);
 				}
 				break;
 
 			case ASSOCIATING:
 				if (mIsCommissioned && ((mThreadMode & SPINEL_THREAD_MODE_RX_ON_WHEN_IDLE) == 0)) {
 					change_ncp_state(ISOLATED);
 				}
 				break;
 
 			default:
 				break;
 			}
 
 			switch (mNodeType)
 			{
 			case END_DEVICE:
 			case SLEEPY_END_DEVICE:
 				if ((mThreadMode & SPINEL_THREAD_MODE_RX_ON_WHEN_IDLE) != 0) {
 					update_node_type(END_DEVICE);
 				} else {
 					update_node_type(SLEEPY_END_DEVICE);
 				}
 				break;
 
 			default:
 				break;
 			}
 		}
 
 	} else if (key == SPINEL_PROP_NET_SAVED) {
 		bool is_commissioned = false;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_BOOL_S, &is_commissioned);
 		syslog(LOG_INFO, "[-NCP-]: NetSaved (NCP is commissioned?) \"%s\" ", is_commissioned ? "yes" : "no");
 		mIsCommissioned = is_commissioned;
 		if (mIsCommissioned && (get_ncp_state() == OFFLINE)) {
 			change_ncp_state(COMMISSIONED);
 		} else if (!mIsCommissioned && (get_ncp_state() == COMMISSIONED)) {
 			change_ncp_state(OFFLINE);
 		}
 
 	} else if (key == SPINEL_PROP_NET_STACK_UP) {
 		bool is_stack_up = false;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_BOOL_S, &is_stack_up);
 		syslog(LOG_INFO, "[-NCP-]: Stack is %sup", is_stack_up ? "" : "not ");
 
 		if (is_stack_up) {
 			if (!ncp_state_is_joining_or_joined(get_ncp_state())) {
 				if (mIsCommissioned && ((mThreadMode & SPINEL_THREAD_MODE_RX_ON_WHEN_IDLE) == 0)) {
 					change_ncp_state(ISOLATED);
 				} else {
 					change_ncp_state(ASSOCIATING);
 				}
 			}
 		} else {
 			if (!ncp_state_is_joining(get_ncp_state())) {
 				change_ncp_state(mIsCommissioned ? COMMISSIONED : OFFLINE);
 			}
 		}
 
 	} else if (key == SPINEL_PROP_NET_IF_UP) {
 		bool is_if_up = false;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_BOOL_S, &is_if_up);
 		syslog(LOG_INFO, "[-NCP-]: Interface is %sup", is_if_up ? "" : "not ");
 
 		if (ncp_state_is_interface_up(get_ncp_state()) && !is_if_up) {
 			change_ncp_state(mIsCommissioned ? COMMISSIONED : OFFLINE);
 		}
 
 	} else if (key == SPINEL_PROP_MESHCOP_COMMISSIONER_STATE) {
 		boost::any value;
 		int status;
 		status = unpack_commissioner_state(value_data_ptr, value_data_len, value);
 		if (status == kWPANTUNDStatus_Ok) {
 			syslog(LOG_INFO, "[-NCP-]: Thread Commissioner state is \"%s\"", any_to_string(value).c_str());
 		}
 
 	} else if (key == SPINEL_PROP_THREAD_ON_MESH_NETS) {
 		handle_ncp_spinel_value_is_ON_MESH_NETS(value_data_ptr, value_data_len);
 
 	} else if (key == SPINEL_PROP_THREAD_OFF_MESH_ROUTES) {
 		handle_ncp_spinel_value_is_OFF_MESH_ROUTES(value_data_ptr, value_data_len);
-	
+
 	} else if (key == SPINEL_PROP_SERVER_SERVICES) {
 		handle_ncp_spinel_value_is_SERVICES(value_data_ptr, value_data_len);
 
 	} else if (key == SPINEL_PROP_THREAD_ASSISTING_PORTS) {
 		bool is_assisting = (value_data_len != 0);
 		uint16_t assisting_port(0);
 
 		if (is_assisting != get_current_network_instance().joinable) {
 			mCurrentNetworkInstance.joinable = is_assisting;
 			signal_property_changed(kWPANTUNDProperty_NestLabs_NetworkAllowingJoin, is_assisting);
 		}
 
 		if (is_assisting) {
 			int i;
 			syslog(LOG_NOTICE, "Network is joinable");
 			while (value_data_len > 0) {
 				i = spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT16_S, &assisting_port);
 				if (i <= 0) {
 					break;
 				}
 				syslog(LOG_NOTICE, "Assisting on port %d", assisting_port);
 				value_data_ptr += i;
 				value_data_len -= i;
 			}
 		} else {
 			syslog(LOG_NOTICE, "Network is not joinable");
 		}
 
 	} else if (key == SPINEL_PROP_JAM_DETECTED) {
 		bool jamDetected = false;
 
 		spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_BOOL_S, &jamDetected);
 		signal_property_changed(kWPANTUNDProperty_JamDetectionStatus, jamDetected);
 
 		if (jamDetected) {
 			syslog(LOG_NOTICE, "Signal jamming is detected");
 		} else {
 			syslog(LOG_NOTICE, "Signal jamming cleared");
 		}
 
 	} else if (key == SPINEL_PROP_CHANNEL_MANAGER_NEW_CHANNEL) {
 		uint8_t new_channel = 0;
 		spinel_ssize_t len;
 
 		len = spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT8_S, &new_channel);
 
 		if ((len >= 0) && (new_channel != mChannelManagerNewChannel)) {
 			mChannelManagerNewChannel = new_channel;
 			signal_property_changed(kWPANTUNDProperty_ChannelManagerNewChannel, new_channel);
 			syslog(LOG_INFO, "[-NCP-]: ChannelManager about to switch to new channel %d", new_channel);
 		}
 
 	} else if (key == SPINEL_PROP_STREAM_RAW) {
 		if (mPcapManager.is_enabled()) {
 			const uint8_t* frame_ptr(NULL);
 			unsigned int frame_len(0);
 			const uint8_t* meta_ptr(NULL);
 			unsigned int meta_len(0);
 			spinel_ssize_t ret;
 			PcapPacket packet;
 			uint16_t flags = 0;
 
 			packet.set_timestamp().set_dlt(PCAP_DLT_IEEE802_15_4);
 
 			// Unpack the packet.
 			ret = spinel_datatype_unpack(
 				value_data_ptr,
 				value_data_len,
 				SPINEL_DATATYPE_DATA_WLEN_S SPINEL_DATATYPE_DATA_S,
 				&frame_ptr,
 				&frame_len,
 				&meta_ptr,
 				&meta_len
 			);
 
 			require(ret > 0, bail);
 
 			// Unpack the metadata.
 			ret = spinel_datatype_unpack(
 				meta_ptr,
 				meta_len,
 				SPINEL_DATATYPE_INT8_S     // RSSI/TXPower
 				SPINEL_DATATYPE_INT8_S     // Noise Floor
 				SPINEL_DATATYPE_UINT16_S,  // Flags
 				NULL,   // Ignore RSSI/TXPower
 				NULL,	// Ignore Noise Floor
 				&flags
 			);
 
 			__ASSERT_MACROS_check(ret > 0);
 
 			if ((flags & SPINEL_MD_FLAG_TX) == SPINEL_MD_FLAG_TX)
 			{
 				// Ignore FCS for transmitted packets
 				frame_len -= 2;
 				packet.set_dlt(PCAP_DLT_IEEE802_15_4_NOFCS);
 			}
 
 			mPcapManager.push_packet(
 				packet
 					.append_ppi_field(PCAP_PPI_TYPE_SPINEL, meta_ptr, meta_len)
 					.append_payload(frame_ptr, frame_len)
 			);
 		}
 
 	} else if (key == SPINEL_PROP_THREAD_TMF_PROXY_STREAM) {
 		const uint8_t* frame_ptr(NULL);
 		unsigned int frame_len(0);
 		uint16_t locator = 0;
 		uint16_t port = 0;
 		spinel_ssize_t ret;
 		Data data;
 
 		ret = spinel_datatype_unpack(
 			value_data_ptr,
 			value_data_len,
 			SPINEL_DATATYPE_DATA_S SPINEL_DATATYPE_UINT16_S SPINEL_DATATYPE_UINT16_S,
 			&frame_ptr,
 			&frame_len,
 			&locator,
 			&port
 		);
 
 		__ASSERT_MACROS_check(ret > 0);
 
 		// Analyze the packet to determine if it should be dropped.
 		if ((ret > 0)) {
 			// append frame
 			data.append(frame_ptr, frame_len);
 			// pack the locator in big endian.
 			data.push_back(locator >> 8);
 			data.push_back(locator & 0xff);
 			// pack the port in big endian.
 			data.push_back(port >> 8);
 			data.push_back(port & 0xff);
 			signal_property_changed(kWPANTUNDProperty_TmfProxyStream, data);
 		}
 
 	} else if (key == SPINEL_PROP_THREAD_UDP_FORWARD_STREAM) {
 		const uint8_t* frame_ptr(NULL);
 		unsigned int frame_len(0);
 		uint16_t peer_port = 0;
 		in6_addr *peer_addr;
 		uint16_t sock_port = 0;
 		spinel_ssize_t ret;
 		Data data;
 
 		ret = spinel_datatype_unpack(
 			value_data_ptr,
 			value_data_len,
 			SPINEL_DATATYPE_DATA_S
 			SPINEL_DATATYPE_UINT16_S    // Peer port
 			SPINEL_DATATYPE_IPv6ADDR_S  // Peer address
 			SPINEL_DATATYPE_UINT16_S,   // Sock port
 			&frame_ptr,
 			&frame_len,
 			&peer_port,
 			&peer_addr,
 			&sock_port
 		);
 
 		__ASSERT_MACROS_check(ret > 0);
 
 		// Analyze the packet to determine if it should be dropped.
 		if (ret > 0) {
 			// append frame
 			data.append(frame_ptr, frame_len);
 			// pack the locator in big endian.
 			data.push_back(peer_port >> 8);
 			data.push_back(peer_port & 0xff);
 			data.append(peer_addr->s6_addr, sizeof(*peer_addr));
 			// pack the port in big endian.
 			data.push_back(sock_port >> 8);
 			data.push_back(sock_port & 0xff);
 			signal_property_changed(kWPANTUNDProperty_UdpForwardStream, data);
 		}
 
 	} else if ((key == SPINEL_PROP_STREAM_NET) || (key == SPINEL_PROP_STREAM_NET_INSECURE)) {
 		const uint8_t* frame_ptr(NULL);
 		unsigned int frame_len(0);
 		spinel_ssize_t ret;
 		uint8_t frame_data_type = FRAME_TYPE_DATA;
 
 		if (SPINEL_PROP_STREAM_NET_INSECURE == key) {
 			frame_data_type = FRAME_TYPE_INSECURE_DATA;
 		}
 
 		ret = spinel_datatype_unpack(
 			value_data_ptr,
 			value_data_len,
 			SPINEL_DATATYPE_DATA_S SPINEL_DATATYPE_DATA_S,
 			&frame_ptr,
 			&frame_len,
 			NULL,
 			NULL
 		);
 
 		__ASSERT_MACROS_check(ret > 0);
 
 		// Analyze the packet to determine if it should be dropped.
 		if ((ret > 0) && should_forward_hostbound_frame(&frame_data_type, frame_ptr, frame_len)) {
 			if (static_cast<bool>(mLegacyInterface) && (frame_data_type == FRAME_TYPE_LEGACY_DATA)) {
 				handle_alt_ipv6_from_ncp(frame_ptr, frame_len);
 			} else {
 				handle_normal_ipv6_from_ncp(frame_ptr, frame_len);
 			}
 		}
 	} else if (key == SPINEL_PROP_THREAD_CHILD_TABLE) {
 		SpinelNCPTaskGetNetworkTopology::Table child_table;
 		SpinelNCPTaskGetNetworkTopology::Table::iterator it;
 		int num_children = 0;
 
 		SpinelNCPTaskGetNetworkTopology::parse_child_table(value_data_ptr, value_data_len, child_table);
 
 		for (it = child_table.begin(); it != child_table.end(); it++)
 		{
 			num_children++;
 			syslog(LOG_INFO, "[-NCP-] Child: %02d %s", num_children, it->get_as_string().c_str());
 		}
 		syslog(LOG_INFO, "[-NCP-] Child: Total %d child%s", num_children, (num_children > 1) ? "ren" : "");
 
 	} else if (key == SPINEL_PROP_THREAD_NEIGHBOR_TABLE) {
 		SpinelNCPTaskGetNetworkTopology::Table neigh_table;
 		SpinelNCPTaskGetNetworkTopology::Table::iterator it;
 		int num_neighbor = 0;
 
 		SpinelNCPTaskGetNetworkTopology::parse_neighbor_table(value_data_ptr, value_data_len, neigh_table);
 
 		for (it = neigh_table.begin(); it != neigh_table.end(); it++)
 		{
 			num_neighbor++;
 			syslog(LOG_INFO, "[-NCP-] Neighbor: %02d %s", num_neighbor, it->get_as_string().c_str());
 		}
 		syslog(LOG_INFO, "[-NCP-] Neighbor: Total %d neighbor%s", num_neighbor, (num_neighbor > 1) ? "s" : "");
 
 	} else if (key == SPINEL_PROP_THREAD_NEIGHBOR_TABLE_ERROR_RATES) {
 		SpinelNCPTaskGetNetworkTopology::Table neigh_table;
 		SpinelNCPTaskGetNetworkTopology::Table::iterator it;
 		int num_neighbor = 0;
 
 		SpinelNCPTaskGetNetworkTopology::prase_neighbor_error_rates_table(value_data_ptr, value_data_len, neigh_table);
 
 		for (it = neigh_table.begin(); it != neigh_table.end(); it++)
 		{
 			num_neighbor++;
 			syslog(LOG_INFO, "[-NCP-] Neighbor: %02d %s", num_neighbor, it->get_as_string().c_str());
 		}
 		syslog(LOG_INFO, "[-NCP-] Neighbor: Total %d neighbor%s", num_neighbor, (num_neighbor > 1) ? "s" : "");
 
 	} else if (key == SPINEL_PROP_THREAD_ROUTER_TABLE) {
 		SpinelNCPTaskGetNetworkTopology::Table router_table;
 		SpinelNCPTaskGetNetworkTopology::Table::iterator it;
 		int num_router = 0;
 
 		SpinelNCPTaskGetNetworkTopology::parse_router_table(value_data_ptr, value_data_len, router_table);
 
 		for (it = router_table.begin(); it != router_table.end(); it++)
 		{
 			num_router++;
 			syslog(LOG_INFO, "[-NCP-] Router: %02d %s", num_router, it->get_as_string().c_str());
 		}
 		syslog(LOG_INFO, "[-NCP-] Router: Total %d router%s", num_router, (num_router > 1) ? "s" : "");
 
 
 	} else if (key == SPINEL_PROP_THREAD_ADDRESS_CACHE_TABLE) {
 		boost::any value;
 		if ((unpack_address_cache_table(value_data_ptr, value_data_len, value, false) == kWPANTUNDStatus_Ok)
 			&& (value.type() == typeid(std::list<std::string>))
 		) {
 			std::list<std::string> list = boost::any_cast<std::list<std::string> >(value);
 			int num_entries = 0;
 
 			for (std::list<std::string>::iterator it = list.begin(); it != list.end(); it++) {
 				num_entries++;
 				syslog(LOG_INFO, "[-NCP-] AddressCache: %02d %s", num_entries, it->c_str());
 			}
 			syslog(LOG_INFO, "[-NCP-] AddressCache: Total %d entr%s", num_entries, (num_entries > 1) ? "ies" : "y");
 		}
 
 	} else if (key == SPINEL_PROP_NET_PARTITION_ID) {
 		uint32_t paritition_id = 0;
 		spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UINT32_S, &paritition_id);
 		syslog(LOG_INFO, "[-NCP-] Partition id: %u (0x%x)", paritition_id, paritition_id);
 
 	} else if (key == SPINEL_PROP_THREAD_LEADER_NETWORK_DATA) {
 		char net_data_cstr_buf[540];
 		encode_data_into_string(value_data_ptr, value_data_len, net_data_cstr_buf, sizeof(net_data_cstr_buf), 0);
 		syslog(LOG_INFO, "[-NCP-] Leader network data: [%s]", net_data_cstr_buf);
 
 	} else if (key == SPINEL_PROP_RCP_VERSION) {
 		const char *rcp_version = NULL;
 		spinel_ssize_t len;
 
 		len = spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_UTF8_S, &rcp_version);
 
 		if (len > 0) {
 			mRcpVersion = std::string(rcp_version);
 			syslog(LOG_NOTICE, "[-NCP-]: RCP is running \"%s\"", rcp_version);
 		}
 
 	} else if (key == SPINEL_PROP_SLAAC_ENABLED) {
 		bool enabled;
 		spinel_ssize_t len;
 
 		len = spinel_datatype_unpack(value_data_ptr, value_data_len, SPINEL_DATATYPE_BOOL_S, &enabled);
 
 		if (len > 0) {
 			syslog(LOG_NOTICE, "[-NCP-]: SLAAC %sabled", enabled ? "en" : "dis");
 			mNCPHandlesSLAAC = enabled;
 		}
 
 	} else if (key == SPINEL_PROP_MESHCOP_JOINER_STATE) {
 		boost::any value;
 
 		if (unpack_meshcop_joiner_state(value_data_ptr, value_data_len, value) == kWPANTUNDStatus_Ok) {
 			syslog(LOG_NOTICE, "[-NCP-]: Joiner state \"%s\"", any_to_string(value).c_str());
 		}
 
 	} else if (key == SPINEL_PROP_THREAD_NETWORK_TIME) {
 		ValueMap result;
 		std::string result_as_string;
 
 		if (unpack_thread_network_time_as_valmap(value_data_ptr, value_data_len, result) == kWPANTUNDStatus_Ok) {
 			if (unpack_thread_network_time_as_string(value_data_ptr, value_data_len, result_as_string) == kWPANTUNDStatus_Ok) {
 				syslog(LOG_INFO, "[-NCP-]: Network time update: %s", result_as_string.c_str());
 			} else {
 				syslog(LOG_WARNING, "[-NCP-]: Failed to extract network time update for logging");
 			}
 
 			handle_network_time_update(result);
 		} else {
 			syslog(LOG_WARNING, "[-NCP-]: Failed to unpack network time update");
 		}
 	}
@@ -5413,36 +5413,36 @@ SpinelNCPInstance::remove_multicast_address_on_ncp(const struct in6_addr &addr,
 }
 
 void
-SpinelNCPInstance::add_service_on_ncp(uint32_t enterprise_number, const Data& service_data, bool stable, 
+SpinelNCPInstance::add_service_on_ncp(uint32_t enterprise_number, const Data& service_data, bool stable,
 	const Data& server_data, CallbackWithStatus cb)
 {
 	SpinelNCPTaskSendCommand::Factory factory(this);
 
 	syslog(LOG_NOTICE, "Adding service with enterprise number:%u to NCP", enterprise_number);
 
 	if (mCapabilities.count(SPINEL_CAP_THREAD_SERVICE) > 0) {
 		factory.set_lock_property(SPINEL_PROP_SERVER_ALLOW_LOCAL_DATA_CHANGE);
 		factory.set_callback(cb);
 
 		factory.add_command(SpinelPackData(
 			SPINEL_FRAME_PACK_CMD_PROP_VALUE_INSERT(
 				SPINEL_DATATYPE_UINT32_S    // Enterprise Number
 				SPINEL_DATATYPE_DATA_WLEN_S // Service Data
 				SPINEL_DATATYPE_BOOL_S      // stable
 				SPINEL_DATATYPE_DATA_WLEN_S // Server Data
 			),
 			SPINEL_PROP_SERVER_SERVICES,
 			enterprise_number,
 			service_data.data(),
 			service_data.size(),
 			stable,
 			server_data.data(),
 			server_data.size()
 		));
 
 		start_new_task(factory.finish());
 	} else {
 		syslog(LOG_ERR, "%s capability not supported", spinel_capability_to_cstr(SPINEL_CAP_THREAD_SERVICE));
 		cb(kWPANTUNDStatus_FeatureNotSupported);
 	}
 }
