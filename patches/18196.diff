commit 92ea05adb2478c64be571aff6fe00130fd29c252
Author: James Bonfield <jkb@sanger.ac.uk>
Date:   Mon Oct 14 11:23:28 2019 +0100

    Bug fix a read-beyond-buffer bug in VCF code.
    
    The VCF write code only checked the upper range of z->key, not
    noticing it's signed.
    
    Credit to OSS-Fuzz
    Fixes oss-fuzz id 18196

diff --git a/vcf.c b/vcf.c
index c2228312..e02fd24d 100644
--- a/vcf.c
+++ b/vcf.c
@@ -2798,104 +2798,105 @@ int bcf_unpack(bcf1_t *b, int which)
 int vcf_format(const bcf_hdr_t *h, const bcf1_t *v, kstring_t *s)
 {
     int i;
     bcf_unpack((bcf1_t*)v, BCF_UN_ALL);
     kputs(h->id[BCF_DT_CTG][v->rid].key, s); // CHROM
     kputc('\t', s); kputll(v->pos + 1, s); // POS
     kputc('\t', s); kputs(v->d.id ? v->d.id : ".", s); // ID
     kputc('\t', s); // REF
     if (v->n_allele > 0) kputs(v->d.allele[0], s);
     else kputc('.', s);
     kputc('\t', s); // ALT
     if (v->n_allele > 1) {
         for (i = 1; i < v->n_allele; ++i) {
             if (i > 1) kputc(',', s);
             kputs(v->d.allele[i], s);
         }
     } else kputc('.', s);
     kputc('\t', s); // QUAL
     if ( bcf_float_is_missing(v->qual) ) kputc('.', s); // QUAL
     else kputd(v->qual, s);
     kputc('\t', s); // FILTER
     if (v->d.n_flt) {
         for (i = 0; i < v->d.n_flt; ++i) {
             if (i) kputc(';', s);
             kputs(h->id[BCF_DT_ID][v->d.flt[i]].key, s);
         }
     } else kputc('.', s);
     kputc('\t', s); // INFO
     if (v->n_info) {
         int first = 1;
         for (i = 0; i < v->n_info; ++i) {
             bcf_info_t *z = &v->d.info[i];
             if ( !z->vptr ) continue;
             if ( !first ) kputc(';', s);
             first = 0;
-            if (z->key >= h->n[BCF_DT_ID]) {
-                hts_log_error("Invalid BCF, the INFO index is too large");
+            if (z->key < 0 || z->key >= h->n[BCF_DT_ID]) {
+                hts_log_error("Invalid BCF, the INFO index %d is %s",
+                              z->key, z->key < 0 ? "negative" : "too large");
                 errno = EINVAL;
                 return -1;
             }
             kputs(h->id[BCF_DT_ID][z->key].key, s);
             if (z->len <= 0) continue;
             kputc('=', s);
             if (z->len == 1)
             {
                 switch (z->type)
                 {
                     case BCF_BT_INT8:  if ( z->v1.i==bcf_int8_missing ) kputc('.', s); else kputw(z->v1.i, s); break;
                     case BCF_BT_INT16: if ( z->v1.i==bcf_int16_missing ) kputc('.', s); else kputw(z->v1.i, s); break;
                     case BCF_BT_INT32: if ( z->v1.i==bcf_int32_missing ) kputc('.', s); else kputw(z->v1.i, s); break;
                     case BCF_BT_INT64: if ( z->v1.i==bcf_int64_missing ) kputc('.', s); else kputll(z->v1.i, s); break;
                     case BCF_BT_FLOAT: if ( bcf_float_is_missing(z->v1.f) ) kputc('.', s); else kputd(z->v1.f, s); break;
                     case BCF_BT_CHAR:  kputc(z->v1.i, s); break;
                     default: hts_log_error("Unexpected type %d", z->type); exit(1); break;
                 }
             }
             else bcf_fmt_array(s, z->len, z->type, z->vptr);
         }
         if ( first ) kputc('.', s);
     } else kputc('.', s);
     // FORMAT and individual information
     if (v->n_sample)
     {
         int i,j;
         if ( v->n_fmt)
         {
             int gt_i = -1;
             bcf_fmt_t *fmt = v->d.fmt;
             int first = 1;
             for (i = 0; i < (int)v->n_fmt; ++i) {
                 if ( !fmt[i].p ) continue;
                 kputc(!first ? ':' : '\t', s); first = 0;
                 if ( fmt[i].id<0 ) //!bcf_hdr_idinfo_exists(h,BCF_HL_FMT,fmt[i].id) )
                 {
                     hts_log_error("Invalid BCF, the FORMAT tag id=%d not present in the header", fmt[i].id);
                     abort();
                 }
                 kputs(h->id[BCF_DT_ID][fmt[i].id].key, s);
                 if (strcmp(h->id[BCF_DT_ID][fmt[i].id].key, "GT") == 0) gt_i = i;
             }
             if ( first ) kputs("\t.", s);
             for (j = 0; j < v->n_sample; ++j) {
                 kputc('\t', s);
                 first = 1;
                 for (i = 0; i < (int)v->n_fmt; ++i) {
                     bcf_fmt_t *f = &fmt[i];
                     if ( !f->p ) continue;
                     if (!first) kputc(':', s);
                     first = 0;
                     if (gt_i == i)
                         bcf_format_gt(f,j,s);
                     else
                         bcf_fmt_array(s, f->n, f->type, f->p + j * f->size);
                 }
                 if ( first ) kputc('.', s);
             }
         }
         else
             for (j=0; j<=v->n_sample; j++)
                 kputs("\t.", s);
     }
     kputc('\n', s);
     return 0;
 }
