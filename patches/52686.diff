commit 39910654d3010fc1d199754c962979592293ebd6
Author: Gerald Combs <gerald@wireshark.org>
Date:   Mon Oct 24 09:53:43 2022 -0700

    IEEE 802.11: Fix SCIDX string handling
    
    Appending to a string using snprintf inside a loop can be problematic
    because you have to ensure that your start offset stays within the
    bounds of your buffer and that your size (which is unsigned) doesn't
    overflow. Switch to a wmem_strbuf.
    
    Fixes #18527

diff --git a/epan/dissectors/packet-ieee80211.c b/epan/dissectors/packet-ieee80211.c
index 45bd1efb00..133855aa36 100644
--- a/epan/dissectors/packet-ieee80211.c
+++ b/epan/dissectors/packet-ieee80211.c
@@ -15163,54 +15163,51 @@ he_get_bits(tvbuff_t *tvb, int bit_offset, int bit_len)
 }
 
 static int
-dissect_he_feedback_matrix(proto_tree *tree, tvbuff_t *tvb, int offset,
+dissect_he_feedback_matrix(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, int offset,
                            int bit_offset, int scidx, int nr, int nc,
                            int phi_bits, int psi_bits)
 {
   int ri, ci;
   int start_bit_offset = bit_offset;
   int start_offset = offset;
-  int str_offset = 0;
-  char angles[512];
+  wmem_strbuf_t *angles = wmem_strbuf_new_label(pinfo->pool);
 
   if (nc == nr)  /* If they are the same, reduce Nc by one */
     nc -= 1;
 
   /*
- *    * Figure out how many bits we need
- *       */
+   * Figure out how many bits we need
+   */
   for (ci = 1; ci <= nc; ci++) {
     for (ri = ci; ri < nr; ri++) {
       bit_offset += phi_bits;
     }
     for (ri = ci + 1; ri <= nr; ri++) {
       bit_offset += psi_bits;
     }
   }
 
-  str_offset = snprintf(angles, sizeof(angles), "%d", scidx);
+  wmem_strbuf_append_printf(angles, "%d", scidx);
   /* Reset to the start bit offset */
   bit_offset = start_bit_offset;
 
   for (ci = 1; ci <= nc; ci++) {
     for (ri = ci; ri < nr; ri++) {
       int angle = he_get_bits(tvb, bit_offset, phi_bits);
-      str_offset += snprintf(angles + str_offset, sizeof(angles) - str_offset,
-                             ", φ%d%d:%d", ri, ci, angle);
+      wmem_strbuf_append_printf(angles, ", φ%d%d:%d", ri, ci, angle);
       bit_offset += phi_bits;
     }
     for (ri = ci + 1; ri <= nr; ri++) {
       int angle = he_get_bits(tvb, bit_offset, psi_bits);
-      str_offset += snprintf(angles + str_offset, sizeof(angles) - str_offset,
-                             ", ψ%d%d:%d", ri, ci, angle);
+      wmem_strbuf_append_printf(angles, ", ψ%d%d:%d", ri, ci, angle);
       bit_offset += psi_bits;
     }
   }
 
   /* Update this */
   proto_tree_add_string(tree, hf_ieee80211_he_compressed_beamform_scidx,
                 tvb, offset, ((start_bit_offset + 7) / 8) - start_offset,
-                angles);
+                wmem_strbuf_finalize(angles));
 
   return bit_offset;
 }
@@ -15238,99 +15235,99 @@ static guint
 dissect_compressed_beamforming_and_cqi(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, int offset)
 {
   int byte_count = 0;
   guint64 mimo_cntl = tvb_get_letoh40(tvb, offset);
   int nc = 0, nr = 0, i;
   int bw, grouping, codebook, feedback, bit_offset, scidx;
   int phi_bits = 0, psi_bits = 0;
   proto_tree *snr_tree = NULL, *feedback_tree = NULL;
   int start_offset;
   int ru_start_index, ru_end_index;
 
   nc = (int)((mimo_cntl & 0x07) + 1);
   nr = (int)(((mimo_cntl >> 3) & 0x07) + 1);
   bw = (int)((mimo_cntl >> 6) & 0x03);
   grouping = (int)((mimo_cntl >> 8) & 0x01);
   codebook = (int)((mimo_cntl >> 9) & 0x01);
   feedback = (int)((mimo_cntl >> 10) & 0x03);
   ru_start_index = (int)((mimo_cntl >> 16) & 0x7F);
   ru_end_index = (int)((mimo_cntl >> 23) & 0x7F);
 
   proto_tree_add_bitmask_with_flags(tree, tvb, offset,
     hf_ieee80211_he_mimo_control_field, ett_ff_he_mimo_control,
     he_mimo_control_headers, ENC_LITTLE_ENDIAN,
     BMT_NO_APPEND);
   offset += 5;
 
   snr_tree = proto_tree_add_subtree(tree, tvb, offset, nc,
                 ett_ff_he_mimo_beamforming_report_snr, NULL,
                 "Average Signal to Noise Ratio");
 
   for (i = 0; i < nc; i++) {
     gint8 snr = tvb_get_gint8(tvb, offset);
 
     proto_tree_add_int_format(snr_tree,
         hf_ieee80211_he_compressed_beamforming_report_snr, tvb, offset, 1,
         snr, "Stream %d: %s%0.2fdB (0x%02x)", i, (snr == 127 ? ">=" :
                                                   (snr == -128 ? "<=" : "")),
                                              (float)((float)88 + snr)/4,
                                              (guint8)snr);
     offset++;
   }
 
   /*
    * The rest of the data consists of the compressed beamforming matrices, one
    * for each SCIDX per group. Each matrix consists of phi and psi angles
    * encoded using the number of bits specified using the codebook field.
    *
    * The matrices contain a number entries related to Nr -1 & Nc except when
    * Nr == Nc, and then it is Nr -1 x Nc -1, with Nr - 1 phi angles, Nc - 1
    * psi angles, Nr - 2 phi angles, Nc - 2 psi angles ...
    */
   if (feedback == 0) {  /* SU */
     if (codebook == 0) {
       psi_bits = 2; phi_bits = 4;
     } else {
       psi_bits = 4; phi_bits = 6;
     }
   } else if (feedback == 1) { /* MU */
     if (grouping == 1) {
       psi_bits = 9; phi_bits = 7;
     } else {
       if (codebook == 0) {
         psi_bits = 5; phi_bits = 7;
       } else {
         psi_bits = 7; phi_bits = 9;
       }
     }
   }  /* DO something about CQI etc. */
 
   feedback_tree = proto_tree_add_subtree(tree, tvb, offset, -1,
                         ett_ff_he_mimo_feedback_matrices, NULL,
                         "Feedback Matrices");
 
   start_offset = offset;
   bit_offset = offset * 8;
   scidx = SCIDX_END_SENTINAL;
   while ((scidx = next_he_scidx(scidx, bw, grouping, feedback,
           ru_start_index, ru_end_index)) != (int)SCIDX_END_SENTINAL) {
     int prev_bit_offset = bit_offset;
-    bit_offset = dissect_he_feedback_matrix(feedback_tree, tvb, offset,
+    bit_offset = dissect_he_feedback_matrix(feedback_tree, tvb, pinfo, offset,
                         bit_offset, scidx, nr, nc, phi_bits, psi_bits);
     if (bit_offset <= prev_bit_offset) {
       expert_add_info(pinfo, tree, &ei_ieee80211_bad_length);
       break;
     }
 
     offset = bit_offset / 8;
   }
 
   offset = (bit_offset + 7) / 8;
   proto_item_set_len(feedback_tree, offset - start_offset);
 
   /* Sometimes the FCS is in the buffer as well ... */
   byte_count = tvb_reported_length_remaining(tvb, offset);
   if (byte_count > 0)
     offset += byte_count; /* Should fix the real problem */
 
   return offset;
 }
