commit a152753aa929deda21b797f93848c369a68b9465
Author: Dario Lombardo <lomato@gmail.com>
Date:   Fri Mar 15 09:02:14 2019 +0100

    rtps: fix format in val_to_str().
    
    Add a more explanatory message as well.
    
    Bug: 15606
    Change-Id: Ia462113e108c9e3fa0cbb0f0a8fb33a6ec3a0673
    Reviewed-on: https://code.wireshark.org/review/32419
    Petri-Dish: Dario Lombardo <lomato@gmail.com>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Anders Broman <a.broman58@gmail.com>

diff --git a/epan/dissectors/packet-rtps.c b/epan/dissectors/packet-rtps.c
index 04c25b495e..295fe09c1d 100644
--- a/epan/dissectors/packet-rtps.c
+++ b/epan/dissectors/packet-rtps.c
@@ -4386,595 +4386,595 @@ static gint rtps_util_add_rti_service_request(proto_tree * tree, packet_info *pi
 static gboolean dissect_parameter_sequence_rti_dds(proto_tree *rtps_parameter_tree, packet_info *pinfo, tvbuff_t *tvb,
   proto_item *parameter_item, proto_item * param_len_item, gint offset,
   const guint encoding, int param_length, guint16 parameter, gboolean is_inline_qos, guint vendor_id) {
 
   switch(parameter) {
 
   case PID_DATA_TAGS:
       ENSURE_LENGTH(4);
       rtps_util_add_data_tags(rtps_parameter_tree, tvb, offset, encoding, param_length);
       break;
 
   case PID_SAMPLE_SIGNATURE:
       ENSURE_LENGTH(16);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_sample_signature_epoch, tvb,
                   offset, 8, encoding);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_sample_signature_nonce, tvb,
                   offset+8, 4, encoding);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_sample_signature_length, tvb,
                   offset+12, 4, encoding);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_sample_signature_signature, tvb,
                   offset+16, param_length-16, ENC_NA);
       break;
 
     case PID_ENABLE_AUTHENTICATION:
       ENSURE_LENGTH(4);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_enable_authentication, tvb,
             offset, 4, ENC_NA);
       break;
 
     case PID_ENABLE_ENCRYPTION:
       ENSURE_LENGTH(1);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_enable_encryption, tvb,
               offset, 1, ENC_NA);
       break;
 
     case PID_ENDPOINT_SECURITY_INFO: {
       guint32 flags;
       ENSURE_LENGTH(8);
       flags = tvb_get_guint32(tvb, offset, encoding);
       proto_tree_add_bitmask_value(rtps_parameter_tree, tvb, offset,
               hf_rtps_param_endpoint_security_attributes_mask, ett_rtps_flags,
               ENDPOINT_SECURITY_INFO_FLAGS, flags);
       flags = tvb_get_guint32(tvb, offset, encoding);
       proto_tree_add_bitmask_value(rtps_parameter_tree, tvb, offset,
               hf_rtps_param_plugin_endpoint_security_attributes_mask, ett_rtps_flags,
               PLUGIN_ENDPOINT_SECURITY_INFO_FLAGS, flags);
       break;
     }
 
     case PID_PARTICIPANT_SECURITY_INFO: {
       guint32 flags;
       ENSURE_LENGTH(8);
       flags = tvb_get_guint32(tvb, offset, encoding);
       proto_tree_add_bitmask_value(rtps_parameter_tree, tvb, offset,
               hf_rtps_param_participant_security_attributes_mask, ett_rtps_flags,
               PARTICIPANT_SECURITY_INFO_FLAGS, flags);
       flags = tvb_get_guint32(tvb, offset, encoding);
       proto_tree_add_bitmask_value(rtps_parameter_tree, tvb, offset,
               hf_rtps_param_plugin_participant_security_attributes_mask, ett_rtps_flags,
               PLUGIN_PARTICIPANT_SECURITY_INFO_FLAGS, flags);
       break;
     }
 
     case PID_VENDOR_BUILTIN_ENDPOINT_SET: {
       guint32 flags;
       ENSURE_LENGTH(4);
       flags = tvb_get_guint32(tvb, offset, encoding);
       proto_tree_add_bitmask_value(rtps_parameter_tree, tvb, offset,
                 hf_rtps_param_vendor_builtin_endpoint_set_flags, ett_rtps_flags,
                 VENDOR_BUILTIN_ENDPOINT_FLAGS, flags);
       break;
     }
   /* 0...2...........7...............15.............23...............31
    * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    * |    Unsigned long classId                                      |
    * +---------------+---------------+---------------+---------------+
    * |    Unsigned long uncompressedSerializedLength                 |
    * +---------------+---------------+---------------+---------------+
    * |    byteSeq compressedSerializedTypeObject                     |
    * +---------------+---------------+---------------+---------------+
    * classId:
    *  value(0) RTI_OSAPI_COMPRESSION_CLASS_ID_NONE
    *  value(1) RTI_OSAPI_COMPRESSION_CLASS_ID_ZLIB
    *  value(2) RTI_OSAPI_COMPRESSION_CLASS_ID_BZIP2
    *  value(-1) RTI_OSAPI_COMPRESSION_CLASS_ID_AUTO
    */
     case PID_TYPE_OBJECT_LB: {
       ENSURE_LENGTH(8);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_compression_plugin_class_id, tvb, offset, 4, encoding);
       offset += 4;
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_uncompressed_serialized_length, tvb, offset, 4, encoding);
       offset += 8;
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_compressed_serialized_type_object, tvb, offset, param_length - 8, encoding);
       break;
     }
 
     case PID_ENDPOINT_SECURITY_ATTRIBUTES: {
       guint32 flags;
       ENSURE_LENGTH(4);
       flags = tvb_get_guint32(tvb, offset, encoding);
       proto_tree_add_bitmask_value(rtps_parameter_tree, tvb, offset,
         hf_rtps_param_endpoint_security_attributes, ett_rtps_flags,
       ENDPOINT_SECURITY_ATTRIBUTES, flags);
       break;
     }
 
     case PID_TOPIC_QUERY_PUBLICATION: {
       ENSURE_LENGTH(8);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_topic_query_publication_enable,
                       tvb, offset, 1, encoding);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_topic_query_publication_sessions,
                       tvb, offset+4, 4, encoding);
       break;
     }
 
     case PID_ENDPOINT_PROPERTY_CHANGE_EPOCH: {
       ENSURE_LENGTH(8);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_endpoint_property_change_epoch,
               tvb, offset, 8, encoding);
       break;
     }
 
     case PID_TOPIC_QUERY_GUID:
       if (is_inline_qos) {
         ENSURE_LENGTH(16);
         rtps_util_add_generic_guid_v2(rtps_parameter_tree, tvb, offset,
                       hf_rtps_endpoint_guid, hf_rtps_param_host_id, hf_rtps_param_app_id,
                       hf_rtps_param_instance_id, hf_rtps_param_entity, hf_rtps_param_entity_key,
                       hf_rtps_param_hf_entity_kind, NULL);
       }
       break;
 
     case PID_REACHABILITY_LEASE_DURATION:
       ENSURE_LENGTH(8);
       rtps_util_add_timestamp_sec_and_fraction(rtps_parameter_tree, tvb, offset, encoding,
                            hf_rtps_participant_lease_duration);
     break;
     /* 0...2...........7...............15.............23...............31
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | PID_DEFAULT_MULTICAST_LOCATOR |            0x0018             |
     * +---------------+---------------+---------------+---------------+
     * |    long              kind                                     |
     * +---------------+---------------+---------------+---------------+
     * |    long              port                                     |
     * +---------------+---------------+---------------+---------------+
     * | ipv6addr[0]   | ipv6addr[1]   | ipv6addr[2]   | ipv6addr[3]   |
     * +---------------+---------------+---------------+---------------+
     * | ipv6addr[4]   | ipv6addr[5]   | ipv6addr[6]   | ipv6addr[7]   |
     * +---------------+---------------+---------------+---------------+
     * | ipv6addr[8]   | ipv6addr[9]   | ipv6addr[10]  | ipv6addr[11]  |
     * +---------------+---------------+---------------+---------------+
     * | ipv6addr[12]  | ipv6addr[13]  | ipv6addr[14]  | ipv6addr[15]  |
     * +---------------+---------------+---------------+---------------+
     */
     case PID_DEFAULT_MULTICAST_LOCATOR: {
       ENSURE_LENGTH(24);
       rtps_util_add_locator_t(rtps_parameter_tree, pinfo, tvb, offset, encoding, "locator");
       break;
     }
 
     case PID_RELATED_SOURCE_GUID: {
       ENSURE_LENGTH(16);
       /* PID_RELATED_SOURCE_GUID */
       rtps_util_add_generic_guid_v2(rtps_parameter_tree, tvb, offset,
                   hf_rtps_endpoint_guid, hf_rtps_param_host_id, hf_rtps_param_app_id,
                   hf_rtps_param_instance_id, hf_rtps_param_entity, hf_rtps_param_entity_key,
                   hf_rtps_param_hf_entity_kind, NULL);
       break;
     }
     /* 0...2...........7...............15.............23...............31
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | PID_TRANSPORT_INFO_LIST       |            length             |
     * +---------------+---------------+---------------+---------------+
     * |    unsigned long     Seq.Length                               |
     * +---------------+---------------+---------------+---------------+
     * |                              ...                              |
     * |                      TransportInfo 1                          |
     * |                              ...                              |
     * +---------------+---------------+---------------+---------------+
     * |                              ...                              |
     * |                      TransportInfo 2                          |
     * |                              ...                              |
     * +---------------+---------------+---------------+---------------+
     * |                              ...                              |
     * |                      TransportInfo n                          |
     * |                              ...                              |
     * +---------------+---------------+---------------+---------------+
     *
     * IDL:
     *    struct TRANSPORT_INFO {
     *        long classid;
     *        long messageSizeMax;
     *    };
     *
     *    struct TRANSPORT_INFO_LIST {
     *        Sequence<TRANSPORT_INFO> TransportInfoList;
     *    };
     *
     */
     /* PID_RELATED_READER_GUID and PID_TRANSPORT_INFO_LIST have the same value */
     case PID_TRANSPORT_INFO_LIST: {
       if (is_inline_qos) {
         ENSURE_LENGTH(16);
         /* PID_RELATED_READER_GUID */
         rtps_util_add_generic_guid_v2(rtps_parameter_tree, tvb, offset,
                       hf_rtps_endpoint_guid, hf_rtps_param_host_id, hf_rtps_param_app_id,
                       hf_rtps_param_instance_id, hf_rtps_param_entity, hf_rtps_param_entity_key,
                       hf_rtps_param_hf_entity_kind, NULL);
       } else {
         ENSURE_LENGTH(4);
         {
           int i;
           guint32 temp_offset;
           guint32 seq_size = tvb_get_guint32(tvb, offset, encoding);
           if (seq_size > 0) {
             temp_offset = offset+4; /* move to first transportInfo */
             i = 1;
             while(seq_size-- > 0) {
               rtps_util_add_transport_info(rtps_parameter_tree, tvb, temp_offset, encoding, i);
               temp_offset += 8;
               ++i;
             }
           }
         }
       }
       break;
     }
 
     /* PID_DIRECT_COMMUNICATION and PID_SOURCE_GUID have the same value */
     case PID_DIRECT_COMMUNICATION: {
       if (is_inline_qos) {
         ENSURE_LENGTH(16);
         /* PID_SOURCE_GUID */
         rtps_util_add_generic_guid_v2(rtps_parameter_tree, tvb, offset,
           hf_rtps_endpoint_guid, hf_rtps_param_host_id, hf_rtps_param_app_id,
           hf_rtps_param_instance_id, hf_rtps_param_entity, hf_rtps_param_entity_key,
           hf_rtps_param_hf_entity_kind, NULL);
       } else {
         proto_tree_add_item(rtps_parameter_tree, hf_rtps_direct_communication, tvb, offset, 1, ENC_NA );
       }
       break;
     }
 
     /* Product Version Version 5.3.1 and earlier
     * 0...2...........7...............15.............23...............31
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | PID_TYPE_CONSISTENCY_KIND     |            length             |
     * +---------------+---------------+---------------+---------------+
     * | unsigned short value Kind     | = =  u n u s e d  = = = = = = |
     * +---------------+---------------+---------------+---------------+
     *
     * Product Version 5.3.3 and later
     * 0...2...........7...............15.............23...............31
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | PID_TYPE_CONSISTENCY_KIND     |            length             |
     * +---------------+---------------+---------------+---------------+
     * | unsigned short value Kind     | Boolean ISeqB | Boolean IStrB |
     * +---------------+---------------+---------------+---------------+
     * | Boolean IMemN | Boolean PTypW | Boolean FtypV | Boolean IEnLN |
     * +---------------+---------------+---------------+---------------+
     * ISeqB = Ignore Sequence Names
     * IStrB = Ignore String names
     * IMemN = Ignore Member Names
     * PTypW = Prevent Type Widening
     * FtypV = Force Type Validation
     * IEnLN = Ignore Enum Literal Names
     */
     case PID_TYPE_CONSISTENCY: {
       if (param_length !=4 && param_length !=8) {
         expert_add_info_format(pinfo, rtps_parameter_tree,
           &pid_type_csonsistency_invalid_size,
           "PID_TYPE_CONSISTENCY invalid size. It has a size of %d bytes. Expected %d or %d bytes.",
           param_length, 4, 8);
         break;
       }
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_type_consistency_kind, tvb, offset, 2, encoding);
       /* Parameter size can be used as a discriminator between product versions. */
       if (param_length == 8) {
           offset += 2;
           proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_ignore_sequence_bounds,
             tvb, offset, 1, encoding);
           proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_ignore_string_bounds,
             tvb, offset + 1, 1, encoding);
           proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_ignore_member_names,
             tvb, offset + 2, 1, encoding);
           proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_prevent_type_widening,
             tvb, offset + 3, 1, encoding);
           proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_force_type_validation,
             tvb, offset + 4, 1, encoding);
           proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_ignore_enum_literal_names,
             tvb, offset + 5, 1, encoding);
       }
       break;
     }
 
    /* 0...2...........7...............15.............23...............31
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | PID_DATA_REPRESENTATION       |             length            |
     * +---------------+---------------+---------------+---------------+
     * | uint32 SequenceSize                                           |
     * +---------------+---------------+---------------+---------------+
     * | uint16 DataRepresentationId[0]| uint16 DataRepresentationId[1]|
     * +---------------+-------------------------------+---------------+
     * | ...                           | uint16 DataRepresentationId[N]|
     * +---------------+---------------+---------------+---------------+
     */
     case PID_DATA_REPRESENTATION: {
       proto_tree *data_representation_seq_subtree;
       proto_item *item;
       guint value;
       guint item_offset;
       guint seq_size;
       guint counter = 0;
 
       seq_size = tvb_get_guint32(tvb, offset, encoding);
       data_representation_seq_subtree = proto_tree_add_subtree_format(rtps_parameter_tree, tvb, offset,
         param_length, ett_rtps_data_representation, &item, "Data Representation Sequence[%d]", seq_size);
       item_offset = offset + 4;
       for (; counter < seq_size; ++counter) {
         value = tvb_get_guint16(tvb, item_offset, encoding);
         proto_tree_add_uint_format(data_representation_seq_subtree, hf_rtps_param_data_representation,
           tvb, item_offset, 2, value, "[%d]: %s (0x%X)", counter,
-          val_to_str(value, data_representation_kind_vals, "%s"),
+          val_to_str(value, data_representation_kind_vals, "Unknown data representation value: %u"),
           value);
         item_offset += 2;
       }
       break;
     }
 
     /* ==================================================================
     * Here are all the deprecated items.
     */
 
     /* 0...2...........7...............15.............23...............31
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | PID_PRODUCT_VERSION           |            length             |
     * +---------------+---------------+---------------+---------------+
     * | uint8 major   | uint8 minor   | uint8 release |uint8 revision |
     * +---------------+---------------+---------------+---------------+
     */
     case PID_PRODUCT_VERSION: {
       ENSURE_LENGTH(4);
       rtps_util_add_product_version(rtps_parameter_tree, tvb, offset, vendor_id);
       break;
     }
 
     /* 0...2...........7...............15.............23...............31
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | PID_PLUGIN_PROMISCUITY_KIND   |            length             |
     * +---------------+---------------+---------------+---------------+
     * | short  value                  |                               |
     * +---------------+---------------+---------------+---------------+
     */
     case PID_PLUGIN_PROMISCUITY_KIND: {
       ENSURE_LENGTH(4);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_plugin_promiscuity_kind, tvb, offset, 4, encoding);
       break;
     }
     /* 0...2...........7...............15.............23...............31
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | PID_ENTITY_VIRTUAL_GUID       |            length             |
     * +---------------+---------------+---------------+---------------+
     * |                                                               |
     * +-                                                             -+
     * |    octet[12] guidPrefix                                       |
     * +-                                                             -+
     * |                                                               |
     * +---------------+---------------+---------------+---------------+
     * |    octet[4]  entityId                                         |
     * +---------------+---------------+---------------+---------------+
     */
 
     case PID_ENTITY_VIRTUAL_GUID: {
       ENSURE_LENGTH(16);
       rtps_util_add_guid_prefix_v2(rtps_parameter_tree, tvb, offset,
         hf_rtps_sm_guid_prefix, hf_rtps_sm_host_id, hf_rtps_sm_app_id,
         hf_rtps_sm_instance_id, 0);
       rtps_util_add_entity_id(rtps_parameter_tree, tvb, offset+12,
         hf_rtps_sm_entity_id, hf_rtps_sm_entity_id_key, hf_rtps_sm_entity_id_kind,
         ett_rtps_entity, "virtualGUIDSuffix", NULL);
       break;
     }
 
 
     /* 0...2...........7...............15.............23...............31
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | PID_SERVICE_KIND              |            length             |
     * +---------------+---------------+---------------+---------------+
     * | long    value                                                 |
     * +---------------+---------------+---------------+---------------+
     */
     case PID_SERVICE_KIND: {
       ENSURE_LENGTH(4);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_service_kind, tvb, offset, 4, encoding);
       break;
     }
 
 
     case PID_ROLE_NAME: {
       rtps_util_add_string(rtps_parameter_tree, tvb, offset, hf_rtps_param_role_name, encoding);
       break;
     }
 
 
     case PID_ACK_KIND: {
       ENSURE_LENGTH(4);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_acknowledgment_kind, tvb, offset, 4, encoding);
       break;
     }
 
     /* 0...2...........7...............15.............23...............31
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | PID_PEER_HOST_EPOCH           |            length             |
     * +---------------+---------------+---------------+---------------+
     * | unsigned long   epoch                                         |
     * +---------------+---------------+---------------+---------------+
     */
     case PID_PEER_HOST_EPOCH: {
       ENSURE_LENGTH(4);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_peer_host_epoch, tvb, offset, 4, encoding);
       break;
     }
 
     /* 0...2...........7...............15.............23...............31
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | PID_DOMAIN_ID|PID_RTI_DOMAIN_ID|           length             |
     * +---------------+---------------+---------------+---------------+
     * | long   domain_id                                              |
     * +---------------+---------------+---------------+---------------+
     */
 
     case PID_RTI_DOMAIN_ID:
     case PID_DOMAIN_ID: {
       if (is_inline_qos) { /* PID_RELATED_ORIGINAL_WRITER_INFO */
         ENSURE_LENGTH(16);
         rtps_util_add_guid_prefix_v2(rtps_parameter_tree, tvb, offset, hf_rtps_sm_guid_prefix,
                     hf_rtps_sm_host_id, hf_rtps_sm_app_id, hf_rtps_sm_instance_id, 0);
         rtps_util_add_entity_id(rtps_parameter_tree, tvb, offset+12, hf_rtps_sm_entity_id,
                     hf_rtps_sm_entity_id_key, hf_rtps_sm_entity_id_kind, ett_rtps_entity,
                     "virtualGUIDSuffix", NULL);
         /* Sequence number */
         rtps_util_add_seq_number(rtps_parameter_tree, tvb, offset+16,
                             encoding, "virtualSeqNumber");
       } else {
       ENSURE_LENGTH(4);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_domain_id, tvb, offset, 4, encoding);
       }
       break;
     }
 
      /* 0...2...........7...............15.............23...............31
      * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      * | PID_DOMAIN_TAG                |            length             |
      * +---------------+---------------+---------------+---------------+
      * | long domain_tag.Length                                        |
      * +---------------+---------------+---------------+---------------+
      * | string domain_tag                                             |
      * | ...                                                           |
      * +---------------+---------------+---------------+---------------+
      */
     case PID_DOMAIN_TAG: {
        ENSURE_LENGTH(4);
        rtps_util_add_string(rtps_parameter_tree, tvb, offset, hf_rtps_domain_tag, encoding);
        break;
     }
 
     case PID_EXTENDED: {
       ENSURE_LENGTH(8);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_extended_parameter, tvb, offset, 4, encoding);
       offset += 4;
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_param_extended_pid_length, tvb, offset, 4, encoding);
       break;
     }
 
     case PID_TYPE_OBJECT: {
       rtps_util_add_typeobject(rtps_parameter_tree, pinfo, tvb,
               offset, encoding, param_length);
       break;
     }
 
     /* 0...2...........7...............15.............23...............31
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | PID_TYPECODE_RTPS2            |            length             |
     * +---------------+---------------+---------------+---------------+
     * |                                                               |
     * +                    Type code description                      +
     * |                                                               |
     * +---------------+---------------+---------------+---------------+
     */
     case PID_TYPECODE:
     case PID_TYPECODE_RTPS2: {
       rtps_util_add_typecode(rtps_parameter_tree,
         tvb,
         offset,
         encoding,
         0,      /* indent level */
         0,      /* isPointer */
         -1,     /* bitfield */
         0,      /* isKey */
         offset,
         NULL,   /* name */
         -1,      /* not a seq field */
         NULL,   /* not an array */
         0);     /* ndds 4.0 hack: init to false */
       break;
     }
 
     /* 0...2...........7...............15.............23...............31
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | PID_DISABLE_POSITIVE_ACKS     |            length             |
     * +---------------+---------------+---------------+---------------+
     * | boolean value | = = = = = = = =  u n u s e d  = = = = = = = = |
     * +---------------+---------------+---------------+---------------+
     */
     case PID_DISABLE_POSITIVE_ACKS: {
       ENSURE_LENGTH(1);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_disable_positive_ack, tvb, offset, 1, ENC_NA );
       break;
     }
 
     /* 0...2...........7...............15.............23...............31
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | PID_EXPECTS_VIRTUAL_HB     |            length                |
     * +---------------+---------------+---------------+---------------+
     * | boolean value | = = = = = = = =  u n u s e d  = = = = = = = = |
     * +---------------+---------------+---------------+---------------+
     */
     case PID_EXPECTS_VIRTUAL_HB: {
       ENSURE_LENGTH(1);
       proto_tree_add_item(rtps_parameter_tree, hf_rtps_expects_virtual_heartbeat, tvb, offset, 1, ENC_NA );
       break;
     }
 
     /* 0...2...........7...............15.............23...............31
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | PID_LOCATOR_FILTER_LIST       |            length             |
     * +---------------+---------------+---------------+---------------+
     * | unsigned long number_of_channels                              |
     * +---------------+---------------+---------------+---------------+
     * |                                                               |
     * ~ String filter_name                                            ~
     * |                                                               |
     * +---------------+---------------+---------------+---------------+
     * |                                                               |
     * ~ LocatorList                                                   ~ <----------+
     * |                                                               |    Repeat  |
     * +---------------+---------------+---------------+---------------+    For each|
     * |                                                               |    Channel |
     * ~ String filter_expression                                      ~            |
     * |                                                               |            |
     * +---------------+---------------+---------------+---------------+ <----------+
     */
     case PID_LOCATOR_FILTER_LIST: {
       gint32 number_of_channels, ch;
       proto_tree *channel_tree;
       proto_item *ti_channel;
       char temp_buff[20];
       gint old_offset;
       guint32 off = offset;
 
       ENSURE_LENGTH(4);
       proto_tree_add_item_ret_int(rtps_parameter_tree, hf_rtps_locator_filter_list_num_channels, tvb, off, 4, encoding, &number_of_channels );
       proto_item_append_text(parameter_item, " (%d channels)", number_of_channels );
       off += 4;
 
       if (number_of_channels == 0) {
         /* Do not dissect the rest */
         break;
       }
 
       /* filter name */
       off = rtps_util_add_string(rtps_parameter_tree, tvb, off, hf_rtps_locator_filter_list_filter_name, encoding);
 
       /* Foreach channel... */
       for (ch = 0; ch < number_of_channels; ++ch) {
         g_snprintf(temp_buff, 20, "Channel[%u]", ch);
         old_offset = off;
         channel_tree = proto_tree_add_subtree_format(rtps_parameter_tree, tvb, off, 0, ett_rtps_locator_filter_channel, &ti_channel, "Channel[%u]", ch);
 
         off = rtps_util_add_multichannel_locator_list(channel_tree, pinfo, tvb, off, temp_buff, encoding);
         /* Filter expression */
         off = rtps_util_add_string(rtps_parameter_tree, tvb, off, hf_rtps_locator_filter_list_filter_exp, encoding);
 
         /* Now we know the length of the channel data, set the length */
         proto_item_set_len(ti_channel, (off - old_offset));
       } /* End of for each channel */
       break;
     }/* End of case PID_LOCATOR_FILTER_LIST */
 
     default: {
       return FALSE;
     }
   }/* End of switch for parameters for vendor RTI */
   return TRUE;
 }
