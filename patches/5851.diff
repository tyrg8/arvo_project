commit 79ef217ff11ad37e45946bb17ab1d4f3311066c7
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Wed Jan 31 19:01:06 2018 -0500

    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=5851

diff --git a/coders/mat.c b/coders/mat.c
index b5a227d12..7194c6efa 100644
--- a/coders/mat.c
+++ b/coders/mat.c
@@ -587,224 +587,225 @@ UnlinkFile:
 static Image *ReadMATImageV4(const ImageInfo *image_info,Image *image,
   ExceptionInfo *exception)
 {
   typedef struct {
     unsigned char Type[4];
     unsigned int nRows;
     unsigned int nCols;
     unsigned int imagf;
     unsigned int nameLen;
   } MAT4_HDR;
 
   long
     ldblk;
 
   EndianType
     endian;
 
   Image
     *rotated_image;
 
   MagickBooleanType
     status;
 
   MAT4_HDR
     HDR;
 
   QuantumInfo
     *quantum_info;
 
   QuantumFormatType
     format_type;
 
   register ssize_t
     i;
 
   ssize_t
     count,
     y;
 
   unsigned char
     *pixels;
 
   unsigned int
     depth;
 
 
   quantum_info=(QuantumInfo *) NULL;
   (void) SeekBlob(image,0,SEEK_SET);
   while (EOFBlob(image) == MagickFalse)
   {
     /*
      Object parser loop.
     */
     ldblk=ReadBlobLSBLong(image);
     if ((ldblk > 9999) || (ldblk < 0))
       break;
     HDR.Type[3]=ldblk % 10; ldblk /= 10;  /* T digit */
     HDR.Type[2]=ldblk % 10; ldblk /= 10;  /* P digit */
     HDR.Type[1]=ldblk % 10; ldblk /= 10;  /* O digit */
     HDR.Type[0]=ldblk;        /* M digit */
     if (HDR.Type[3] != 0)
       break;  /* Data format */
     if (HDR.Type[2] != 0)
       break;  /* Always 0 */
     if (HDR.Type[0] == 0)
       {
         HDR.nRows=ReadBlobLSBLong(image);
         HDR.nCols=ReadBlobLSBLong(image);
         HDR.imagf=ReadBlobLSBLong(image);
         HDR.nameLen=ReadBlobLSBLong(image);
         endian=LSBEndian;
       }
     else
       {
         HDR.nRows=ReadBlobMSBLong(image);
         HDR.nCols=ReadBlobMSBLong(image);
         HDR.imagf=ReadBlobMSBLong(image);
         HDR.nameLen=ReadBlobMSBLong(image);
         endian=MSBEndian;
       }
     if ((HDR.imagf != 0) && (HDR.imagf != 1))
       break;
     if (HDR.nameLen > 0xFFFF)
       return((Image *) NULL);
     for (i=0; i < (ssize_t) HDR.nameLen; i++)
     {
       int
         byte;
 
       /*
         Skip matrix name.
       */
       byte=ReadBlobByte(image);
       if (byte == EOF)
         {
           ThrowFileException(exception,CorruptImageError,"UnexpectedEndOfFile",
             image->filename);
           break;
         }
     }
     image->columns=(size_t) HDR.nRows;
     image->rows=(size_t) HDR.nCols;
     SetImageColorspace(image,GRAYColorspace,exception);
     if (image_info->ping != MagickFalse)
       {
         Swap(image->columns,image->rows);
         if(HDR.imagf==1) ldblk *= 2;
         SeekBlob(image, HDR.nCols*ldblk, SEEK_CUR);
         goto skip_reading_current;
       }
     status=SetImageExtent(image,image->columns,image->rows,exception);
     if (status == MagickFalse)
       return((Image *) NULL);
+    (void) SetImageBackgroundColor(image,exception);
     quantum_info=AcquireQuantumInfo(image_info,image);
     if (quantum_info == (QuantumInfo *) NULL)
       return((Image *) NULL);
     switch(HDR.Type[1])
     {
       case 0:
         format_type=FloatingPointQuantumFormat;
         depth=64;
         break;
       case 1:
         format_type=FloatingPointQuantumFormat;
         depth=32;
         break;
       case 2:
         format_type=UnsignedQuantumFormat;
         depth=16;
         break;
       case 3:
         format_type=SignedQuantumFormat;
         depth=16;
         break;
       case 4:
         format_type=UnsignedQuantumFormat;
         depth=8;
         break;
       default:
         format_type=UnsignedQuantumFormat;
         depth=8;
         break;
     }
     image->depth=depth;
     if (HDR.Type[0] != 0)
       SetQuantumEndian(image,quantum_info,MSBEndian);
     status=SetQuantumFormat(image,quantum_info,format_type);
     status=SetQuantumDepth(image,quantum_info,depth);
     status=SetQuantumEndian(image,quantum_info,endian);
     SetQuantumScale(quantum_info,1.0);
     pixels=(unsigned char *) GetQuantumPixels(quantum_info);
     for (y=0; y < (ssize_t) image->rows; y++)
     {
       register Quantum
         *magick_restrict q;
 
       count=ReadBlob(image,depth/8*image->columns,(char *) pixels);
       if (count == -1)
         break;
       q=QueueAuthenticPixels(image,0,image->rows-y-1,image->columns,1,
         exception);
       if (q == (Quantum *) NULL)
         break;
       (void) ImportQuantumPixels(image,(CacheView *) NULL,quantum_info,
         GrayQuantum,pixels,exception);
       if ((HDR.Type[1] == 2) || (HDR.Type[1] == 3))
         FixSignedValues(image,q,(int) image->columns);
       if (SyncAuthenticPixels(image,exception) == MagickFalse)
         break;
       if (image->previous == (Image *) NULL)
         {
           status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,
             image->rows);
           if (status == MagickFalse)
             break;
         }
     }
     if (HDR.imagf == 1)
       for (y=0; y < (ssize_t) image->rows; y++)
       {
         /*
           Read complex pixels.
         */
         count=ReadBlob(image,depth/8*image->columns,(char *) pixels);
         if (count == -1)
           break;
         if (HDR.Type[1] == 0)
           InsertComplexDoubleRow(image,(double *) pixels,y,0,0,exception);
         else
           InsertComplexFloatRow(image,(float *) pixels,y,0,0,exception);
       }
     if (quantum_info != (QuantumInfo *) NULL)
       quantum_info=DestroyQuantumInfo(quantum_info);
     if (EOFBlob(image) != MagickFalse)
       {
         ThrowFileException(exception,CorruptImageError,"UnexpectedEndOfFile",
           image->filename);
         break;
       }
     rotated_image=RotateImage(image,90.0,exception);
     if (rotated_image != (Image *) NULL)
       {
         void
           *blob;
         
         rotated_image->page.x=0;
         rotated_image->page.y=0;
         blob = rotated_image->blob;
         rotated_image->blob = image->blob;
         rotated_image->colors = image->colors;
         image->blob = (BlobInfo *) blob;
         AppendImageToList(&image,rotated_image);
         DeleteImageFromList(&image->previous);
         image = rotated_image;
       }
     /*
       Proceed to next image.
     */
     if (image_info->number_scenes != 0)
       if (image->scene >= (image_info->scene+image_info->number_scenes-1))
         break;
     /*
       Allocate next image structure.
     */
@@ -1147,93 +1148,94 @@ DisableMSCWarning(4127)
         if (sizeof(double) != 8)
 RestoreMSCWarning
           ThrowReaderException(CoderError, "IncompatibleSizeOfDouble");
         if (MATLAB_HDR.StructureFlag & FLAG_COMPLEX)
   {                         /* complex double type cell */
   }
         ldblk = (ssize_t) (8 * MATLAB_HDR.SizeX);
         break;
       default:
         if ((image != image2) && (image2 != (Image *) NULL))
           image2=DestroyImage(image2);
         if (clone_info)
           clone_info=DestroyImageInfo(clone_info);
         ThrowReaderException(CoderError, "UnsupportedCellTypeInTheMatrix");
     }
     (void) sample_size;
     image->columns = MATLAB_HDR.SizeX;
     image->rows = MATLAB_HDR.SizeY;
     one=1;
     image->colors = one << image->depth;
     if (image->columns == 0 || image->rows == 0)
       goto MATLAB_KO;
     if((unsigned long)ldblk*MATLAB_HDR.SizeY > MATLAB_HDR.ObjectSize)
       goto MATLAB_KO;
     /* Image is gray when no complex flag is set and 2D Matrix */
     if ((MATLAB_HDR.DimFlag == 8) &&
         ((MATLAB_HDR.StructureFlag & FLAG_COMPLEX) == 0))
       {
         image->type=GrayscaleType;
         SetImageColorspace(image,GRAYColorspace,exception);
       }
 
 
     /*
       If ping is true, then only set image size and colors without
       reading any image data.
     */
     if (image_info->ping)
     {
       size_t temp = image->columns;
       image->columns = image->rows;
       image->rows = temp;
       goto done_reading; /* !!!!!! BAD  !!!! */
     }
     status=SetImageExtent(image,image->columns,image->rows,exception);
     if (status == MagickFalse)
       {
         if ((image != image2) && (image2 != (Image *) NULL))
           image2=DestroyImage(image2);
         return(DestroyImageList(image));
       }
+    (void) SetImageBackgroundColor(image,exception);
     quantum_info=AcquireQuantumInfo(clone_info,image);
     if (quantum_info == (QuantumInfo *) NULL)
       ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
 
   /* ----- Load raster data ----- */
     BImgBuff = (unsigned char *) AcquireQuantumMemory((size_t) (ldblk),sizeof(double));    /* Ldblk was set in the check phase */
     if (BImgBuff == NULL)
       ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
     (void) ResetMagickMemory(BImgBuff,0,ldblk*sizeof(double));
 
     MinVal = 0;
     MaxVal = 0;
     if (CellType==miDOUBLE || CellType==miSINGLE)        /* Find Min and Max Values for floats */
     {
       CalcMinMax(image2, image_info->endian,  MATLAB_HDR.SizeX, MATLAB_HDR.SizeY, CellType, ldblk, BImgBuff, &quantum_info->minimum, &quantum_info->maximum);
     }
 
     /* Main loop for reading all scanlines */
     if(z==1) z=0; /* read grey scanlines */
     /* else read color scanlines */
     do
     {
       for (i = 0; i < (ssize_t) MATLAB_HDR.SizeY; i++)
       {
         q=GetAuthenticPixels(image,0,MATLAB_HDR.SizeY-i-1,image->columns,1,exception);
         if (q == (Quantum *) NULL)
   {
     if (logging) (void)LogMagickEvent(CoderEvent,GetMagickModule(),
               "  MAT set image pixels returns unexpected NULL on a row %u.", (unsigned)(MATLAB_HDR.SizeY-i-1));
     goto done_reading;    /* Skip image rotation, when cannot set image pixels    */
   }
         if(ReadBlob(image2,ldblk,(unsigned char *)BImgBuff) != (ssize_t) ldblk)
   {
     if (logging) (void)LogMagickEvent(CoderEvent,GetMagickModule(),
              "  MAT cannot read scanrow %u from a file.", (unsigned)(MATLAB_HDR.SizeY-i-1));
     goto ExitLoop;
   }
         if((CellType==miINT8 || CellType==miUINT8) && (MATLAB_HDR.StructureFlag & FLAG_LOGICAL))
         {
           FixLogical((unsigned char *)BImgBuff,ldblk);
           if(ImportQuantumPixels(image,(CacheView *) NULL,quantum_info,z2qtype[z],BImgBuff,exception) <= 0)
     {
