commit 812c6a02e850f220668184cfd5eefce896ee69fa
Author: Robert Femmer <114982872+robertfemmer@users.noreply.github.com>
Date:   Wed Jan 11 21:02:30 2023 +0100

    mongo proxy bson: fix OOB read in removeString (#24730)
    
    Signed-off-by: Robert Femmer <robert.femmer@x41-dsec.de>

diff --git a/source/extensions/filters/network/mongo_proxy/bson_impl.cc b/source/extensions/filters/network/mongo_proxy/bson_impl.cc
index bcf47011b2..8ea6cf0283 100644
--- a/source/extensions/filters/network/mongo_proxy/bson_impl.cc
+++ b/source/extensions/filters/network/mongo_proxy/bson_impl.cc
@@ -94,11 +94,14 @@ int64_t BufferHelper::removeInt64(Buffer::Instance& data) {
 std::string BufferHelper::removeString(Buffer::Instance& data) {
   int32_t length = removeInt32(data);
   if (static_cast<uint32_t>(length) > data.length()) {
     throw EnvoyException("invalid buffer size");
   }
 
   char* start = reinterpret_cast<char*>(data.linearize(length));
-  std::string ret(start);
+  // The BSON spec encodes both strings and C style strings with an additional
+  // null byte, however strings may contain embedded null bytes, therefore the
+  // constructor needs to be given the length of the string explicitly.
+  std::string ret(start, length > 0 ? length - 1 : 0);
   data.drain(length);
   return ret;
 }
diff --git a/test/extensions/filters/network/mongo_proxy/bson_impl_test.cc b/test/extensions/filters/network/mongo_proxy/bson_impl_test.cc
index 5be44b7e64..39cbcea77b 100644
--- a/test/extensions/filters/network/mongo_proxy/bson_impl_test.cc
+++ b/test/extensions/filters/network/mongo_proxy/bson_impl_test.cc
@@ -60,32 +60,49 @@ TEST(BsonImplTest, DocumentSizeUnderflow) {
 TEST(BufferHelperTest, InvalidSize) {
   {
     Buffer::OwnedImpl buffer;
     EXPECT_THROW(BufferHelper::peekInt32(buffer), EnvoyException);
     EXPECT_THROW(BufferHelper::removeByte(buffer), EnvoyException);
     EXPECT_THROW(BufferHelper::removeBytes(buffer, nullptr, 1), EnvoyException);
     EXPECT_THROW(BufferHelper::removeCString(buffer), EnvoyException);
     EXPECT_THROW(BufferHelper::removeDouble(buffer), EnvoyException);
     EXPECT_THROW(BufferHelper::removeInt64(buffer), EnvoyException);
     EXPECT_THROW(BufferHelper::removeString(buffer), EnvoyException);
   }
 
   {
     Buffer::OwnedImpl buffer;
     BufferHelper::writeInt32(buffer, 4);
     EXPECT_THROW(BufferHelper::removeString(buffer), EnvoyException);
   }
 
   {
     Buffer::OwnedImpl buffer;
     BufferHelper::writeInt32(buffer, 4);
     uint8_t dummy = 0;
     buffer.add(&dummy, sizeof(dummy));
     EXPECT_THROW(BufferHelper::removeBinary(buffer), EnvoyException);
   }
 }
 
+TEST(BsonImplTest, StringContainsNullBytes) {
+  std::string s("hello\0world", 11);
+  Buffer::OwnedImpl buffer;
+  BufferHelper::writeString(buffer, s);
+  EXPECT_TRUE(BufferHelper::removeString(buffer) == s);
+}
+
+TEST(BsonImplTest, StringSizeObserved) {
+  char s[] = "helloworld";
+  Buffer::OwnedImpl buffer;
+
+  std::string hello("hello");
+  BufferHelper::writeInt32(buffer, hello.size() + 1);
+  buffer.add(s, sizeof(s));
+  EXPECT_TRUE(BufferHelper::removeString(buffer) == hello);
+}
+
 } // namespace Bson
 } // namespace MongoProxy
 } // namespace NetworkFilters
 } // namespace Extensions
 } // namespace Envoy
