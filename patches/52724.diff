commit 8a67a26104a70b666c5e209a5fb3b0733cfbb3d8
Author: Yukihiro "Matz" Matsumoto <matz@ruby.or.jp>
Date:   Thu Oct 27 16:32:05 2022 +0900

    mruby-pack/pack.c (unpack): check if the given length is positive.
    
    To avoid out-of-bound array access.

diff --git a/mrbgems/mruby-pack/src/pack.c b/mrbgems/mruby-pack/src/pack.c
index eb00c41b2..de667362f 100644
--- a/mrbgems/mruby-pack/src/pack.c
+++ b/mrbgems/mruby-pack/src/pack.c
@@ -704,35 +704,44 @@ pack_str(mrb_state *mrb, mrb_value src, mrb_value dst, mrb_int didx, int count,
   return (int)(dptr - dptr0);
 }
 
+#define CHECK_UNPACK_LEN(mrb, slen, ary) do {\
+  if ((slen) <= 0) {\
+    mrb_ary_push(mrb, ary, mrb_str_new(mrb, 0, 0));\
+    return 0;\
+  }\
+} while (0)
+
 static int
 unpack_str(mrb_state *mrb, const void *src, int slen, mrb_value ary, int count, unsigned int flags)
 {
+  CHECK_UNPACK_LEN(mrb, slen, ary);
+
   mrb_value dst;
   const char *cp, *sptr;
   int copylen;
 
   sptr = (const char *)src;
   if (count != -1 && count < slen)  {
     slen = count;
   }
   copylen = slen;
 
   if (slen >= 0 && flags & PACK_FLAG_Z) {  /* "Z" */
     if ((cp = (const char *)memchr(sptr, '\0', slen)) != NULL) {
       copylen = (int)(cp - sptr);
       if (count == -1) {
         slen = copylen + 1;
       }
     }
   }
   else if (!(flags & PACK_FLAG_a)) {  /* "A" */
     while (copylen > 0 && (sptr[copylen - 1] == '\0' || ISSPACE(sptr[copylen - 1]))) {
       copylen--;
     }
   }
 
   if (copylen < 0) copylen = 0;
   dst = mrb_str_new(mrb, sptr, (mrb_int)copylen);
   mrb_ary_push(mrb, ary, dst);
   return slen;
 }
@@ -788,46 +797,48 @@ pack_hex(mrb_state *mrb, mrb_value src, mrb_value dst, mrb_int didx, int count,
 static int
 unpack_hex(mrb_state *mrb, const void *src, int slen, mrb_value ary, int count, unsigned int flags)
 {
+  CHECK_UNPACK_LEN(mrb, slen, ary);
+
   mrb_value dst;
   int a, ashift, b, bshift;
   const char *sptr, *sptr0;
   char *dptr, *dptr0;
   const char hexadecimal[] = "0123456789abcdef";
 
   if (flags & PACK_FLAG_LSB) {
     ashift = 0;
     bshift = 4;
   } else {
     ashift = 4;
     bshift = 0;
   }
 
   sptr = (const char *)src;
 
   if (count == -1)
     count = slen * 2;
 
   dst = mrb_str_new(mrb, NULL, count);
   dptr = RSTRING_PTR(dst);
 
   sptr0 = sptr;
   dptr0 = dptr;
   while (slen > 0 && count > 0) {
     a = (*sptr >> ashift) & 0x0f;
     b = (*sptr >> bshift) & 0x0f;
     sptr++;
     slen--;
 
     *dptr++ = hexadecimal[a];
     count--;
 
     if (count > 0) {
       *dptr++ = hexadecimal[b];
       count--;
     }
   }
 
   dst = mrb_str_resize(mrb, dst, (mrb_int)(dptr - dptr0));
   mrb_ary_push(mrb, ary, dst);
   return (int)(sptr - sptr0);
 }
@@ -901,49 +912,51 @@ pack_base64(mrb_state *mrb, mrb_value src, mrb_value dst, mrb_int didx, int coun
 static int
 unpack_base64(mrb_state *mrb, const void *src, int slen, mrb_value ary)
 {
+  CHECK_UNPACK_LEN(mrb, slen, ary);
+
   mrb_value dst;
   int dlen;
   unsigned long l;
   int i, padding;
   unsigned char c, ch[4];
   const char *sptr, *sptr0;
   char *dptr, *dptr0;
 
   sptr0 = sptr = (const char *)src;
 
   dlen = slen / 4 * 3;  /* an estimated value - may be shorter */
   dst = mrb_str_new(mrb, NULL, dlen);
   dptr0 = dptr = RSTRING_PTR(dst);
 
   padding = 0;
   while (slen >= 4) {
     for (i = 0; i < 4; i++) {
       do {
         if (slen-- == 0)
           goto done;
         c = *sptr++;
         if (c >= sizeof(base64_dec_tab))
           continue;
         ch[i] = base64_dec_tab[c];
         if (ch[i] == PACK_BASE64_PADDING) {
           ch[i] = 0;
           padding++;
         }
       } while (c >= sizeof(base64_dec_tab) || ch[i] == PACK_BASE64_IGNORE);
     }
 
     l = (ch[0] << 18) + (ch[1] << 12) + (ch[2] << 6) + ch[3];
 
     if (padding == 0) {
       *dptr++ = (l >> 16) & 0xff;
       *dptr++ = (l >> 8) & 0xff;
       *dptr++ = l & 0xff;
     } else if (padding == 1) {
       *dptr++ = (l >> 16) & 0xff;
       *dptr++ = (l >> 8) & 0xff;
       break;
     } else {
       *dptr++ = (l >> 16) & 0xff;
       break;
     }
   }
@@ -1018,32 +1031,34 @@ pack_qenc(mrb_state *mrb, mrb_value src, mrb_value dst, mrb_int didx, int count)
 static int
 unpack_qenc(mrb_state *mrb, const void *src, int slen, mrb_value ary)
 {
+  CHECK_UNPACK_LEN(mrb, slen, ary);
+
   mrb_value buf = mrb_str_new(mrb, 0, slen);
   const char *s = (const char*)src, *ss = s;
   const char *send = s + slen;
   char *ptr = RSTRING_PTR(buf);
   int c1, c2;
 
   while (s < send) {
     if (*s == '=') {
       if (++s == send) break;
       if (s+1 < send && *s == '\r' && *(s+1) == '\n')
         s++;
       if (*s != '\n') {
         if ((c1 = hex2int(*s)) == -1) break;
         if (++s == send) break;
         if ((c2 = hex2int(*s)) == -1) break;
         *ptr++ = (char)(c1 << 4 | c2);
       }
     }
     else {
       *ptr++ = *s;
     }
     s++;
     ss = s;
   }
   buf = mrb_str_resize(mrb, buf, (mrb_int)(ptr - RSTRING_PTR(buf)));
   mrb_str_cat(mrb, buf, ss, send-ss);
   mrb_ary_push(mrb, ary, buf);
   return slen;
 }
