commit e13c8162656665f9ec1c76a033cae5b011b8c658
Author: James Carter <jwcart2@gmail.com>
Date:   Thu Apr 8 13:24:29 2021 -0400

    libsepol/cil: Fix out-of-bound read of file context pattern ending with "\"
    
    Based on patch by Nicolas Iooss, who writes:
      OSS-Fuzz found a Heap-buffer-overflow in the CIL compiler when trying
      to compile the following policy:
    
        (sid SID)
        (sidorder(SID))
        (filecon "\" any ())
        (filecon "" any ())
    
      When cil_post_fc_fill_data() processes "\", it goes beyond the NUL
      terminator of the string. Fix this by returning when '\0' is read
      after a backslash.
    
    To be consistent with the function compute_diffdata() in
    refpolicy/support/fc_sort.py, also increment str_len in this case.
    
    Fixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28484
    Reported-by: Nicolas Iooss <nicolas.iooss@m4x.org>
    Signed-off-by: James Carter <jwcart2@gmail.com>

diff --git a/libsepol/cil/src/cil_post.c b/libsepol/cil/src/cil_post.c
index d2ecbd43..fd4758dc 100644
--- a/libsepol/cil/src/cil_post.c
+++ b/libsepol/cil/src/cil_post.c
@@ -166,34 +166,41 @@ static int cil_verify_is_list(struct cil_list *list, enum cil_flavor flavor)
 static void cil_post_fc_fill_data(struct fc_data *fc, const char *path)
 {
 	size_t c = 0;
 	fc->meta = 0;
 	fc->stem_len = 0;
 	fc->str_len = 0;
 	
 	while (path[c] != '\0') {
 		switch (path[c]) {
 		case '.':
 		case '^':
 		case '$':
 		case '?':
 		case '*':
 		case '+':
 		case '|':
 		case '[':
 		case '(':
 		case '{':
 			fc->meta = 1;
 			break;
 		case '\\':
 			c++;
+			if (path[c] == '\0') {
+				if (!fc->meta) {
+					fc->stem_len++;
+				}
+				fc->str_len++;
+				return;
+			}
 			/* FALLTHRU */
 		default:
 			if (!fc->meta) {
 				fc->stem_len++;
 			}
 			break;
 		}
 		fc->str_len++;
 		c++;
 	}
 }
