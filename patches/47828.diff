commit 82cb2524323d4f6eeb2adae3451f31754e271126
Author: Alan Modra <amodra@gmail.com>
Date:   Thu Jun 9 19:53:44 2022 +0930

    gas dwarf2dbg.c tidy
    
    Make it a little more obvious that remap_debug_filename returns an
    allocated string (that should be freed) by returning a char * rather
    than const char *.  Free a few missed cases in dwarf2dbg.c, and free
    other memory allocated in dwarf2dbg.c.  Also remove static
    initialisation of variables and initialise in dwarf2_init instead,
    in order to ensure gas state is saner for oss-fuzz.
    
            * remap.c (remap_debug_filename): Remove const from return.
            * as.h (remap_debug_filename): Update prototype.
            * config/obj-elf.c (obj_elf_ident): Simplify free of
            remap_debug_filename output.
            * stabs.c (stabs_generate_asm_file): Likewise.
            * dwarf2dbg.c (dirs, dirs_in_use, dirs_allocated, current): Don't
            initialise statically..
            (dwarf2_init): ..do so here, along with most other static vars.
            (assign_file_to_slot): Don't set files_allocated until we
            succeed in allocating memory.
            (purge_generated_debug): Add bool param, free more stuff if true.
            (dwarf2_directive_filename): Adjust purge_generated_debug call.
            (process_entries): Don't free line_entry here..
            (dwarf2_cleanup): ..do so here instead, new function.
            (dwarf2_finish): Call dwarf2_cleanup.  When chaining together
            subseg line entries, unhook entries from old subseg list.
            (dwarf2_directive_loc): Free remap_debug_filename string.
            (out_dir_and_file_list): Likewise.
            (out_debug_str): Likewise.

diff --git a/gas/as.h b/gas/as.h
index 135abc8f23d..470a2e52891 100644
--- a/gas/as.h
+++ b/gas/as.h
@@ -487,7 +487,7 @@ void   register_dependency (const char *);
 void   print_dependencies (void);
 segT   subseg_get (const char *, int);
 
-const char *remap_debug_filename (const char *);
+char *remap_debug_filename (const char *);
 void add_debug_prefix_map (const char *);
 
 static inline char *
diff --git a/gas/config/obj-elf.c b/gas/config/obj-elf.c
index c02d26ba453..b76853053d5 100644
--- a/gas/config/obj-elf.c
+++ b/gas/config/obj-elf.c
@@ -2495,28 +2495,28 @@ obj_elf_ident (int ignore ATTRIBUTE_UNUSED)
 void
 obj_elf_init_stab_section (segT seg)
 {
-  const char *file;
+  char *file;
   char *p;
   char *stabstr_name;
   unsigned int stroff;
 
   /* Force the section to align to a longword boundary.  Without this,
      UnixWare ar crashes.  */
   bfd_set_section_alignment (seg, 2);
 
   /* Make space for this first symbol.  */
   p = frag_more (12);
   /* Zero it out.  */
   memset (p, 0, 12);
   file = remap_debug_filename (as_where (NULL));
   stabstr_name = concat (segment_name (seg), "str", (char *) NULL);
   stroff = get_stab_string_offset (file, stabstr_name, true);
   know (stroff == 1 || (stroff == 0 && file[0] == '\0'));
   md_number_to_chars (p, stroff, 4);
   seg_info (seg)->stabu.p = p;
-  xfree ((char *) file);
+  free (file);
 }
 
 #endif
 
 /* Fill in the counts in the first entry in a .stabs section.  */
diff --git a/gas/dwarf2dbg.c b/gas/dwarf2dbg.c
index b4b252970c1..868ec79ee2c 100644
--- a/gas/dwarf2dbg.c
+++ b/gas/dwarf2dbg.c
@@ -209,10 +209,10 @@ static unsigned int files_in_use;
 static unsigned int files_allocated;
 
 /* Table of directories used by .debug_line.  */
-static char **       dirs = NULL;
-static unsigned int  dirs_in_use = 0;
-static unsigned int  dirs_allocated = 0;
+static char **       dirs;
+static unsigned int  dirs_in_use;
+static unsigned int  dirs_allocated;
 
 /* TRUE when we've seen a .loc directive recently.  Used to avoid
    doing work when there's nothing to do.  Will be reset by
    dwarf2_consume_line_info.  */
@@ -228,12 +228,7 @@ static bool dwarf2_any_loc_directive_seen;
 bool dwarf2_loc_mark_labels;
 
 /* Current location as indicated by the most recent .loc directive.  */
-static struct dwarf2_line_info current =
-{
-  1, 1, 0, 0,
-  DWARF2_LINE_DEFAULT_IS_STMT ? DWARF2_FLAG_IS_STMT : 0,
-  0, { NULL }
-};
+static struct dwarf2_line_info current;
 
 /* This symbol is used to recognize view number forced resets in loc
    lists.  */
@@ -682,35 +677,36 @@ static bool
 assign_file_to_slot (unsigned int i, const char *file, unsigned int dir)
 {
   if (i >= files_allocated)
     {
-      unsigned int old = files_allocated;
+      unsigned int want = i + 32;
 
-      files_allocated = i + 32;
       /* Catch wraparound.  */
-      if (files_allocated < old
-	  || files_allocated < i
-	  || files_allocated > UINT_MAX / sizeof (struct file_entry))
+      if (want < files_allocated
+	  || want < i
+	  || want > UINT_MAX / sizeof (struct file_entry))
 	{
 	  as_bad (_("file number %u is too big"), i);
 	  return false;
 	}
 
-      files = XRESIZEVEC (struct file_entry, files, files_allocated);
-      memset (files + old, 0, (i + 32 - old) * sizeof (struct file_entry));
+      files = XRESIZEVEC (struct file_entry, files, want);
+      memset (files + files_allocated, 0,
+	      (want - files_allocated) * sizeof (struct file_entry));
+      files_allocated = want;
     }
 
   files[i].filename = file;
   files[i].dir = dir;
   memset (files[i].md5, 0, NUM_MD5_BYTES);
 
   if (files_in_use < i + 1)
     files_in_use = i + 1;
 
   return true;
 }
 
 /* Get a .debug_line file number for PATHNAME.  If there is a
    directory component to PATHNAME, then this will be stored
    in the directory table, if it is not already present.
    Returns the slot number allocated to that filename or -1
    if there was a problem.  */
@@ -780,49 +776,60 @@ static void
 do_allocate_filenum (struct line_entry *e)
 {
   do
     {
       if (e->loc.filenum == -1u)
 	{
 	  e->loc.filenum = allocate_filenum (e->loc.u.filename);
 	  e->loc.u.view = NULL;
 	}
       e = e->next;
     }
   while (e);
 }
 
 /* Remove any generated line entries.  These don't live comfortably
-   with compiler generated line info.  */
+   with compiler generated line info.  If THELOT then remove
+   everything, freeing all list entries we have created.  */
 
 static void
-purge_generated_debug (void)
+purge_generated_debug (bool thelot)
 {
-  struct line_seg *s;
+  struct line_seg *s, *nexts;
 
-  for (s = all_segs; s; s = s->next)
+  for (s = all_segs; s; s = nexts)
     {
-      struct line_subseg *lss;
+      struct line_subseg *lss, *nextlss;
 
-      for (lss = s->head; lss; lss = lss->next)
+      for (lss = s->head; lss; lss = nextlss)
 	{
 	  struct line_entry *e, *next;
 
 	  for (e = lss->head; e; e = next)
 	    {
-	      know (e->loc.filenum == -1u);
+	      if (!thelot)
+		know (e->loc.filenum == -1u);
 	      next = e->next;
 	      free (e);
 	    }
 
 	  lss->head = NULL;
 	  lss->ptail = &lss->head;
 	  lss->pmove_tail = &lss->head;
+	  nextlss = lss->next;
+	  if (thelot)
+	    free (lss);
+	}
+      nexts = s->next;
+      if (thelot)
+	{
+	  seg_info (s->seg)->dwarf2_line_seg = NULL;
+	  free (s);
 	}
     }
 }
 
 /* Allocate slot NUM in the .debug_line file table to FILENAME.
    If DIRNAME is not NULL or there is a directory component to FILENAME
    then this will be stored in the directory table, if not already present.
    if WITH_MD5 is TRUE then there is a md5 value in generic_bignum.
    Returns TRUE if allocation succeeded, FALSE otherwise.  */
@@ -1139,89 +1146,89 @@ char *
 dwarf2_directive_filename (void)
 {
   bool with_md5 = false;
   valueT num;
   char *filename;
   const char * dirname = NULL;
   int filename_len;
 
   /* Continue to accept a bare string and pass it off.  */
   SKIP_WHITESPACE ();
   if (*input_line_pointer == '"')
     {
       s_file (0);
       return NULL;
     }
 
   num = get_absolute_expression ();
 
   if ((offsetT) num < 1)
     {
       if (num == 0 && dwarf_level < 5)
 	dwarf_level = 5;
       if ((offsetT) num < 0 || DWARF2_LINE_VERSION < 5)
 	{
 	  as_bad (_("file number less than one"));
 	  ignore_rest_of_line ();
 	  return NULL;
 	}
     }
 
   /* FIXME: Should we allow ".file <N>\n" as an expression meaning
      "switch back to the already allocated file <N> as the current
      file" ?  */
 
   filename = demand_copy_C_string (&filename_len);
   if (filename == NULL)
     /* demand_copy_C_string will have already generated an error message.  */
     return NULL;
 
   /* For DWARF-5 support we also accept:
      .file <NUM> ["<dir>"] "<file>" [md5 <NUM>]  */
   if (DWARF2_LINE_VERSION > 4)
     {
       SKIP_WHITESPACE ();
       if (*input_line_pointer == '"')
 	{
 	  dirname = filename;
 	  filename = demand_copy_C_string (&filename_len);
 	  SKIP_WHITESPACE ();
 	}
 
       if (startswith (input_line_pointer, "md5"))
 	{
 	  input_line_pointer += 3;
 	  SKIP_WHITESPACE ();
 
 	  expressionS exp;
 	  expression_and_evaluate (& exp);
 	  if (exp.X_op != O_big)
 	    as_bad (_("md5 value too small or not a constant"));
 	  else
 	    with_md5 = true;
 	}
     }
 
   demand_empty_rest_of_line ();
 
   /* A .file directive implies compiler generated debug information is
      being supplied.  Turn off gas generated debug info.  */
   if (debug_type == DEBUG_DWARF2)
-    purge_generated_debug ();
+    purge_generated_debug (false);
   debug_type = DEBUG_NONE;
 
   if (num != (unsigned int) num
       || num >= (size_t) -1 / sizeof (struct file_entry) - 32)
     {
       as_bad (_("file number %lu is too big"), (unsigned long) num);
       return NULL;
     }
 
   if (! allocate_filename_to_slot (dirname, filename, (unsigned int) num,
 				   with_md5))
     return NULL;
 
   return filename;
 }
 
 /* Calls dwarf2_directive_filename, but discards its result.
    Used in pseudo-op tables where the function result is ignored.  */
@@ -1236,196 +1243,198 @@ void
 dwarf2_directive_loc (int dummy ATTRIBUTE_UNUSED)
 {
   offsetT filenum, line;
 
   /* If we see two .loc directives in a row, force the first one to be
      output now.  */
   if (dwarf2_loc_directive_seen)
     dwarf2_emit_insn (0);
 
   filenum = get_absolute_expression ();
   SKIP_WHITESPACE ();
   line = get_absolute_expression ();
 
   if (filenum < 1)
     {
       if (filenum == 0 && dwarf_level < 5)
 	dwarf_level = 5;
       if (filenum < 0 || DWARF2_LINE_VERSION < 5)
 	{
 	  as_bad (_("file number less than one"));
 	  return;
 	}
     }
 
   if ((valueT) filenum >= files_in_use || files[filenum].filename == NULL)
     {
       as_bad (_("unassigned file number %ld"), (long) filenum);
       return;
     }
 
   /* debug_type will be turned off by dwarf2_directive_filename, and
      if we don't have a dwarf style .file then files_in_use will be
      zero and the above error will trigger.  */
   gas_assert (debug_type == DEBUG_NONE);
 
   current.filenum = filenum;
   current.line = line;
   current.discriminator = 0;
 
 #ifndef NO_LISTING
   if (listing)
     {
       if (files[filenum].dir)
 	{
 	  size_t dir_len = strlen (dirs[files[filenum].dir]);
 	  size_t file_len = strlen (files[filenum].filename);
 	  char *cp = XNEWVEC (char, dir_len + 1 + file_len + 1);
 
 	  memcpy (cp, dirs[files[filenum].dir], dir_len);
 	  INSERT_DIR_SEPARATOR (cp, dir_len);
 	  memcpy (cp + dir_len + 1, files[filenum].filename, file_len);
 	  cp[dir_len + file_len + 1] = '\0';
 	  listing_source_file (cp);
 	  free (cp);
 	}
       else
 	listing_source_file (files[filenum].filename);
       listing_source_line (line);
     }
 #endif
 
   SKIP_WHITESPACE ();
   if (ISDIGIT (*input_line_pointer))
     {
       current.column = get_absolute_expression ();
       SKIP_WHITESPACE ();
     }
 
   while (ISALPHA (*input_line_pointer))
     {
       char *p, c;
       offsetT value;
 
       c = get_symbol_name (& p);
 
       if (strcmp (p, "basic_block") == 0)
 	{
 	  current.flags |= DWARF2_FLAG_BASIC_BLOCK;
 	  *input_line_pointer = c;
 	}
       else if (strcmp (p, "prologue_end") == 0)
 	{
 	  current.flags |= DWARF2_FLAG_PROLOGUE_END;
 	  *input_line_pointer = c;
 	}
       else if (strcmp (p, "epilogue_begin") == 0)
 	{
 	  current.flags |= DWARF2_FLAG_EPILOGUE_BEGIN;
 	  *input_line_pointer = c;
 	}
       else if (strcmp (p, "is_stmt") == 0)
 	{
 	  (void) restore_line_pointer (c);
 	  value = get_absolute_expression ();
 	  if (value == 0)
 	    current.flags &= ~DWARF2_FLAG_IS_STMT;
 	  else if (value == 1)
 	    current.flags |= DWARF2_FLAG_IS_STMT;
 	  else
 	    {
 	      as_bad (_("is_stmt value not 0 or 1"));
 	      return;
 	    }
 	}
       else if (strcmp (p, "isa") == 0)
 	{
 	  (void) restore_line_pointer (c);
 	  value = get_absolute_expression ();
 	  if (value >= 0)
 	    current.isa = value;
 	  else
 	    {
 	      as_bad (_("isa number less than zero"));
 	      return;
 	    }
 	}
       else if (strcmp (p, "discriminator") == 0)
 	{
 	  (void) restore_line_pointer (c);
 	  value = get_absolute_expression ();
 	  if (value >= 0)
 	    current.discriminator = value;
 	  else
 	    {
 	      as_bad (_("discriminator less than zero"));
 	      return;
 	    }
 	}
       else if (strcmp (p, "view") == 0)
 	{
 	  symbolS *sym;
 
 	  (void) restore_line_pointer (c);
 	  SKIP_WHITESPACE ();
 
 	  if (ISDIGIT (*input_line_pointer)
 	      || *input_line_pointer == '-')
 	    {
 	      bool force_reset = *input_line_pointer == '-';
 
 	      value = get_absolute_expression ();
 	      if (value != 0)
 		{
 		  as_bad (_("numeric view can only be asserted to zero"));
 		  return;
 		}
 	      if (force_reset && force_reset_view)
 		sym = force_reset_view;
 	      else
 		{
 		  sym = symbol_temp_new (absolute_section, &zero_address_frag,
 					 value);
 		  if (force_reset)
 		    force_reset_view = sym;
 		}
 	    }
 	  else
 	    {
 	      char *name = read_symbol_name ();
 
 	      if (!name)
 		return;
 	      sym = symbol_find_or_make (name);
+	      free (name);
 	      if (S_IS_DEFINED (sym) || symbol_equated_p (sym))
 		{
 		  if (S_IS_VOLATILE (sym))
 		    sym = symbol_clone (sym, 1);
 		  else if (!S_CAN_BE_REDEFINED (sym))
 		    {
-		      as_bad (_("symbol `%s' is already defined"), name);
+		      as_bad (_("symbol `%s' is already defined"),
+			      S_GET_NAME (sym));
 		      return;
 		    }
 		}
 	      S_SET_SEGMENT (sym, undefined_section);
 	      S_SET_VALUE (sym, 0);
 	      symbol_set_frag (sym, &zero_address_frag);
 	    }
 	  current.u.view = sym;
 	}
       else
 	{
 	  as_bad (_("unknown .loc sub-directive `%s'"), p);
 	  (void) restore_line_pointer (c);
 	  return;
 	}
 
       SKIP_WHITESPACE_AFTER_NAME ();
     }
 
   demand_empty_rest_of_line ();
   dwarf2_any_loc_directive_seen = dwarf2_loc_directive_seen = true;
 
   /* If we were given a view id, emit the row right away.  */
   if (current.u.view)
     dwarf2_emit_insn (0);
 }
@@ -1963,146 +1972,143 @@ static void
 process_entries (segT seg, struct line_entry *e)
 {
   unsigned filenum = 1;
   unsigned line = 1;
   unsigned column = 0;
   unsigned isa = 0;
   unsigned flags = DWARF2_LINE_DEFAULT_IS_STMT ? DWARF2_FLAG_IS_STMT : 0;
   fragS *last_frag = NULL, *frag;
   addressT last_frag_ofs = 0, frag_ofs;
   symbolS *last_lab = NULL, *lab;
-  struct line_entry *next;
 
   if (flag_dwarf_sections)
     {
       char * name;
       const char * sec_name;
 
       /* Switch to the relevant sub-section before we start to emit
 	 the line number table.
 
 	 FIXME: These sub-sections do not have a normal Line Number
 	 Program Header, thus strictly speaking they are not valid
 	 DWARF sections.  Unfortunately the DWARF standard assumes
 	 a one-to-one relationship between compilation units and
 	 line number tables.  Thus we have to have a .debug_line
 	 section, as well as our sub-sections, and we have to ensure
 	 that all of the sub-sections are merged into a proper
 	 .debug_line section before a debugger sees them.  */
 
       sec_name = bfd_section_name (seg);
       if (strcmp (sec_name, ".text") != 0)
 	{
 	  name = concat (".debug_line", sec_name, (char *) NULL);
 	  subseg_set (subseg_get (name, false), 0);
 	}
       else
 	/* Don't create a .debug_line.text section -
 	   that is redundant.  Instead just switch back to the
 	   normal .debug_line section.  */
 	subseg_set (subseg_get (".debug_line", false), 0);
     }
 
   do
     {
       int line_delta;
 
       if (filenum != e->loc.filenum)
 	{
 	  filenum = e->loc.filenum;
 	  out_opcode (DW_LNS_set_file);
 	  out_uleb128 (filenum);
 	}
 
       if (column != e->loc.column)
 	{
 	  column = e->loc.column;
 	  out_opcode (DW_LNS_set_column);
 	  out_uleb128 (column);
 	}
 
       if (e->loc.discriminator != 0)
 	{
 	  out_opcode (DW_LNS_extended_op);
 	  out_leb128 (1 + sizeof_leb128 (e->loc.discriminator, 0));
 	  out_opcode (DW_LNE_set_discriminator);
 	  out_uleb128 (e->loc.discriminator);
 	}
 
       if (isa != e->loc.isa)
 	{
 	  isa = e->loc.isa;
 	  out_opcode (DW_LNS_set_isa);
 	  out_uleb128 (isa);
 	}
 
       if ((e->loc.flags ^ flags) & DWARF2_FLAG_IS_STMT)
 	{
 	  flags = e->loc.flags;
 	  out_opcode (DW_LNS_negate_stmt);
 	}
 
       if (e->loc.flags & DWARF2_FLAG_BASIC_BLOCK)
 	out_opcode (DW_LNS_set_basic_block);
 
       if (e->loc.flags & DWARF2_FLAG_PROLOGUE_END)
 	out_opcode (DW_LNS_set_prologue_end);
 
       if (e->loc.flags & DWARF2_FLAG_EPILOGUE_BEGIN)
 	out_opcode (DW_LNS_set_epilogue_begin);
 
       /* Don't try to optimize away redundant entries; gdb wants two
 	 entries for a function where the code starts on the same line as
 	 the {, and there's no way to identify that case here.  Trust gcc
 	 to optimize appropriately.  */
       line_delta = e->loc.line - line;
       lab = e->label;
       frag = symbol_get_frag (lab);
       frag_ofs = S_GET_VALUE (lab);
 
       if (last_frag == NULL
 	  || (e->loc.u.view == force_reset_view && force_reset_view
 	      /* If we're going to reset the view, but we know we're
 		 advancing the PC, we don't have to force with
 		 set_address.  We know we do when we're at the same
 		 address of the same frag, and we know we might when
 		 we're in the beginning of a frag, and we were at the
 		 end of the previous frag.  */
 	      && (frag == last_frag
 		  ? (last_frag_ofs == frag_ofs)
 		  : (frag_ofs == 0
 		     && ((offsetT)last_frag_ofs
 			 >= get_frag_fix (last_frag, seg))))))
 	{
 	  out_set_addr (lab);
 	  out_inc_line_addr (line_delta, 0);
 	}
       else if (frag == last_frag && ! DWARF2_USE_FIXED_ADVANCE_PC)
 	out_inc_line_addr (line_delta, frag_ofs - last_frag_ofs);
       else
 	relax_inc_line_addr (line_delta, lab, last_lab);
 
       line = e->loc.line;
       last_lab = lab;
       last_frag = frag;
       last_frag_ofs = frag_ofs;
 
-      next = e->next;
-      free (e);
-      e = next;
+      e = e->next;
     }
   while (e);
 
   /* Emit a DW_LNE_end_sequence for the end of the section.  */
   frag = last_frag_for_seg (seg);
   frag_ofs = get_frag_fix (frag, seg);
   if (frag == last_frag && ! DWARF2_USE_FIXED_ADVANCE_PC)
     out_inc_line_addr (INT_MAX, frag_ofs - last_frag_ofs);
   else
     {
       lab = symbol_temp_new (seg, frag, frag_ofs);
       relax_inc_line_addr (INT_MAX, lab, last_lab);
     }
 }
 
 /* Switch to LINE_STR_SEG and output the given STR.  Return the
    symbol pointing to the new string in the section.  */
@@ -2132,232 +2138,234 @@ static void
 out_dir_and_file_list (segT line_seg, int sizeof_offset)
 {
   size_t size;
-  const char *dir;
+  char *dir;
   char *cp;
   unsigned int i, j;
   bool emit_md5 = false;
   bool emit_timestamps = true;
   bool emit_filesize = true;
   segT line_str_seg = NULL;
   symbolS *line_strp, *file0_strp = NULL;
 
   /* Output the Directory Table.  */
   if (DWARF2_LINE_VERSION >= 5)
     {
       /* We only have one column in the directory table.  */
       out_byte (1);
 
       /* Describe the purpose and format of the column.  */
       out_uleb128 (DW_LNCT_path);
       /* Store these strings in the .debug_line_str section so they
 	 can be shared.  */
       out_uleb128 (DW_FORM_line_strp);
 
       /* Now state how many rows there are in the table.  We need at
 	 least 1 if there is one or more file names to store the
 	 "working directory".  */
       if (dirs_in_use == 0 && files_in_use > 0)
 	out_uleb128 (1);
       else
 	out_uleb128 (dirs_in_use);
     }
       
   /* Emit directory list.  */
   if (DWARF2_LINE_VERSION >= 5 && (dirs_in_use > 0 || files_in_use > 0))
     {
       line_str_seg = subseg_new (".debug_line_str", 0);
       bfd_set_section_flags (line_str_seg,
 			     SEC_READONLY | SEC_DEBUGGING | SEC_OCTETS
 			     | SEC_MERGE | SEC_STRINGS);
       line_str_seg->entsize = 1;
 
       /* DWARF5 uses slot zero, but that is only set explicitly
 	 using a .file 0 directive.  Otherwise use pwd as main file
 	 directory.  */
       if (dirs_in_use > 0 && dirs[0] != NULL)
 	dir = remap_debug_filename (dirs[0]);
       else
 	dir = remap_debug_filename (getpwd ());
 
       line_strp = add_line_strp (line_str_seg, dir);
+      free (dir);
       subseg_set (line_seg, 0);
       TC_DWARF2_EMIT_OFFSET (line_strp, sizeof_offset);
     }
   for (i = 1; i < dirs_in_use; ++i)
     {
       dir = remap_debug_filename (dirs[i]);
       if (DWARF2_LINE_VERSION < 5)
 	{
 	  size = strlen (dir) + 1;
 	  cp = frag_more (size);
 	  memcpy (cp, dir, size);
 	}
       else
 	{
 	  line_strp = add_line_strp (line_str_seg, dir);
 	  subseg_set (line_seg, 0);
 	  TC_DWARF2_EMIT_OFFSET (line_strp, sizeof_offset);
 	}
+      free (dir);
     }
 
   if (DWARF2_LINE_VERSION < 5)
     /* Terminate it.  */
     out_byte ('\0');
 
   /* Output the File Name Table.  */
   if (DWARF2_LINE_VERSION >= 5)
     {
       unsigned int columns = 4;
 
       if (((unsigned long) DWARF2_FILE_TIME_NAME ("", "")) == -1UL)
 	{
 	  emit_timestamps = false;
 	  -- columns;
 	}
 
       if (DWARF2_FILE_SIZE_NAME ("", "") == -1)
 	{
 	  emit_filesize = false;
 	  -- columns;
 	}
 
       for (i = 0; i < files_in_use; ++i)
 	if (files[i].md5[0] != 0)
 	  break;
       if (i < files_in_use)
 	{
 	  emit_md5 = true;
 	  ++ columns;
 	}
       
       /* The number of format entries to follow.  */
       out_byte (columns);
       /* The format of the file name.  */
       out_uleb128 (DW_LNCT_path);
       /* Store these strings in the .debug_line_str section so they
 	 can be shared.  */
       out_uleb128 (DW_FORM_line_strp);
 
       /* The format of the directory index.  */
       out_uleb128 (DW_LNCT_directory_index);
       out_uleb128 (DW_FORM_udata);
 
       if (emit_timestamps)
 	{
 	  /* The format of the timestamp.  */
 	  out_uleb128 (DW_LNCT_timestamp);
 	  out_uleb128 (DW_FORM_udata);
 	}
 
       if (emit_filesize)
 	{
 	  /* The format of the file size.  */
 	  out_uleb128 (DW_LNCT_size);
 	  out_uleb128 (DW_FORM_udata);
 	}
 
       if (emit_md5)
 	{
 	  /* The format of the MD5 sum.  */
 	  out_uleb128 (DW_LNCT_MD5);
 	  out_uleb128 (DW_FORM_data16);
 	}
 
       /* The number of entries in the table.  */
       out_uleb128 (files_in_use);
    }
       
   for (i = DWARF2_LINE_VERSION > 4 ? 0 : 1; i < files_in_use; ++i)
     {
       const char *fullfilename;
 
       if (files[i].filename == NULL)
 	{
 	  if (DWARF2_LINE_VERSION < 5 || i != 0)
 	    {
 	      as_bad (_("unassigned file number %ld"), (long) i);
 	      continue;
 	    }
 	  /* DWARF5 uses slot zero, but that is only set explicitly using
 	     a .file 0 directive.  If that isn't used, but file 1 is, then
 	     use that as main file name.  */
 	  if (files_in_use > 1 && files[1].filename != NULL)
 	    {
 	      files[0].filename = files[1].filename;
 	      files[0].dir = files[1].dir;
 	      if (emit_md5)
 		for (j = 0; j < NUM_MD5_BYTES; ++j)
 		  files[0].md5[j] = files[1].md5[j];
 	    }
 	  else
 	    files[0].filename = "";
 	}
 
       fullfilename = DWARF2_FILE_NAME (files[i].filename,
 				       files[i].dir ? dirs [files [i].dir] : "");
       if (DWARF2_LINE_VERSION < 5)
 	{
 	  size = strlen (fullfilename) + 1;
 	  cp = frag_more (size);
 	  memcpy (cp, fullfilename, size);
 	}
       else
 	{
 	  if (!file0_strp)
 	    line_strp = add_line_strp (line_str_seg, fullfilename);
 	  else
 	    line_strp = file0_strp;
 	  subseg_set (line_seg, 0);
 	  TC_DWARF2_EMIT_OFFSET (line_strp, sizeof_offset);
 	  if (i == 0 && files_in_use > 1
 	      && files[0].filename == files[1].filename)
 	    file0_strp = line_strp;
 	  else
 	    file0_strp = NULL;
 	}
 
       /* Directory number.  */
       out_uleb128 (files[i].dir);
 
       /* Output the last modification timestamp.  */
       if (emit_timestamps)
 	{
 	  offsetT timestamp;
 
 	  timestamp = DWARF2_FILE_TIME_NAME (files[i].filename,
 					     files[i].dir ? dirs [files [i].dir] : "");
 	  if (timestamp == -1)
 	    timestamp = 0;
 	  out_uleb128 (timestamp);
 	}
 
       /* Output the filesize.  */
       if (emit_filesize)
 	{
 	  offsetT filesize;
 	  filesize = DWARF2_FILE_SIZE_NAME (files[i].filename,
 					    files[i].dir ? dirs [files [i].dir] : "");
 	  if (filesize == -1)
 	    filesize = 0;
 	  out_uleb128 (filesize);
 	}
 
       /* Output the md5 sum.  */
       if (emit_md5)
 	{
 	  int b;
 
 	  for (b = 0; b < NUM_MD5_BYTES; b++)
 	    out_byte (files[i].md5[b]);
 	}
     }
 
   if (DWARF2_LINE_VERSION < 5)
     /* Terminate filename list.  */
     out_byte (0);
 }
 
 /* Switch to SEC and output a header length field.  Return the size of
    offsets used in SEC.  The caller must set EXPR->X_add_symbol value
    to the end of the section.  EXPR->X_add_number will be set to the
    negative size of the header.  */
@@ -2950,51 +2958,51 @@ static void
 out_debug_str (segT str_seg, symbolS **name_sym, symbolS **comp_dir_sym,
 	       symbolS **producer_sym)
 {
   char producer[128];
-  const char *comp_dir;
-  const char *dirname;
   char *p;
   int len;
   int first_file = DWARF2_LINE_VERSION > 4 ? 0 : 1;
 
   subseg_set (str_seg, 0);
 
   /* DW_AT_name.  We don't have the actual file name that was present
      on the command line, so assume files[first_file] is the main input file.
      We're not supposed to get called unless at least one line number
      entry was emitted, so this should always be defined.  */
   *name_sym = symbol_temp_new_now_octets ();
   if (files_in_use == 0)
     abort ();
   if (files[first_file].dir)
     {
-      dirname = remap_debug_filename (dirs[files[first_file].dir]);
+      char *dirname = remap_debug_filename (dirs[files[first_file].dir]);
       len = strlen (dirname);
 #ifdef TE_VMS
       /* Already has trailing slash.  */
       p = frag_more (len);
       memcpy (p, dirname, len);
 #else
       p = frag_more (len + 1);
       memcpy (p, dirname, len);
       INSERT_DIR_SEPARATOR (p, len);
 #endif
+      free (dirname);
     }
   len = strlen (files[first_file].filename) + 1;
   p = frag_more (len);
   memcpy (p, files[first_file].filename, len);
 
   /* DW_AT_comp_dir */
   *comp_dir_sym = symbol_temp_new_now_octets ();
-  comp_dir = remap_debug_filename (getpwd ());
+  char *comp_dir = remap_debug_filename (getpwd ());
   len = strlen (comp_dir) + 1;
   p = frag_more (len);
   memcpy (p, comp_dir, len);
+  free (comp_dir);
 
   /* DW_AT_producer */
   *producer_sym = symbol_temp_new_now_octets ();
   sprintf (producer, "GNU AS %s", VERSION);
   len = strlen (producer) + 1;
   p = frag_more (len);
   memcpy (p, producer, len);
 }
@@ -3002,25 +3010,52 @@ out_debug_str (segT str_seg, symbolS **name_sym, symbolS **comp_dir_sym,
 void
 dwarf2_init (void)
 {
+  all_segs = NULL;
   last_seg_ptr = &all_segs;
+  files = NULL;
+  files_in_use = 0;
+  files_allocated = 0;
+  dirs = NULL;
+  dirs_in_use = 0;
+  dirs_allocated = 0;
+  dwarf2_loc_directive_seen = false;
+  dwarf2_any_loc_directive_seen = false;
+  dwarf2_loc_mark_labels = false;
+  current.filenum = 1;
+  current.line = 1;
+  current.column = 0;
+  current.isa = 0;
+  current.flags = DWARF2_LINE_DEFAULT_IS_STMT ? DWARF2_FLAG_IS_STMT : 0;
+  current.discriminator = 0;
+  current.u.view = NULL;
+  force_reset_view = NULL;
+  view_assert_failed = NULL;
 
   /* Select the default CIE version to produce here.  The global
      starts with a value of -1 and will be modified to a valid value
      either by the user providing a command line option, or some
      targets will select their own default in md_after_parse_args.  If
      we get here and the global still contains -1 then it is up to us
      to pick a sane default.  The default we choose is 1, this is the
      CIE version gas has produced for a long time, and there seems no
      reason to change it yet.  */
   if (flag_dwarf_cie_version == -1)
     flag_dwarf_cie_version = 1;
 }
 
+static void
+dwarf2_cleanup (void)
+{
+  purge_generated_debug (true);
+  free (files);
+  free (dirs);
+}
+
 /* Finish the dwarf2 debug sections.  We emit .debug.line if there
    were any .file/.loc directives, or --gdwarf2 was given, and if the
    file has a non-empty .debug_info section and an empty .debug_line
    section.  If we emit .debug_line, and the .debug_info section is
    empty, we also emit .debug_info, .debug_aranges and .debug_abbrev.
    ALL_SEGS will be non-null if there were any .file/.loc directives,
    or --gdwarf2 was given and there were any located instructions
    emitted.  */
@@ -3029,139 +3064,144 @@ void
 dwarf2_finish (void)
 {
   segT line_seg;
   struct line_seg *s;
   segT info_seg;
   int emit_other_sections = 0;
   int empty_debug_line = 0;
 
   info_seg = bfd_get_section_by_name (stdoutput, ".debug_info");
   emit_other_sections = info_seg == NULL || !seg_not_empty_p (info_seg);
 
   line_seg = bfd_get_section_by_name (stdoutput, ".debug_line");
   empty_debug_line = line_seg == NULL || !seg_not_empty_p (line_seg);
 
   /* We can't construct a new debug_line section if we already have one.
      Give an error if we have seen any .loc, otherwise trust the user
      knows what they are doing and want to generate the .debug_line
      (and all other debug sections) themselves.  */
   if (all_segs && !empty_debug_line && dwarf2_any_loc_directive_seen)
     as_fatal ("duplicate .debug_line sections");
 
   if ((!all_segs && emit_other_sections)
       || (!emit_other_sections && !empty_debug_line))
     /* If there is no line information and no non-empty .debug_info
        section, or if there is both a non-empty .debug_info and a non-empty
        .debug_line, then we do nothing.  */
-    return;
+    {
+      dwarf2_cleanup ();
+      return;
+    }
 
   /* Calculate the size of an address for the target machine.  */
   sizeof_address = DWARF2_ADDR_SIZE (stdoutput);
 
   /* Create and switch to the line number section.  */
   if (empty_debug_line)
     {
       line_seg = subseg_new (".debug_line", 0);
       bfd_set_section_flags (line_seg,
 			     SEC_READONLY | SEC_DEBUGGING | SEC_OCTETS);
     }
 
   for (s = all_segs; s; s = s->next)
     {
       struct line_subseg *lss;
 
       for (lss = s->head; lss; lss = lss->next)
 	if (lss->head)
 	  do_allocate_filenum (lss->head);
     }
 
   /* For each subsection, chain the debug entries together.  */
   for (s = all_segs; s; s = s->next)
     {
       struct line_subseg *lss = s->head;
       struct line_entry **ptail = lss->ptail;
 
       /* Reset the initial view of the first subsection of the
 	 section.  */
       if (lss->head && lss->head->loc.u.view)
 	set_or_check_view (lss->head, NULL, NULL);
 
       while ((lss = lss->next) != NULL)
 	{
 	  /* Link the first view of subsequent subsections to the
 	     previous view.  */
 	  if (lss->head && lss->head->loc.u.view)
 	    set_or_check_view (lss->head,
 			       !s->head ? NULL : (struct line_entry *)ptail,
 			       s->head ? s->head->head : NULL);
 	  *ptail = lss->head;
+	  lss->head = NULL;
 	  ptail = lss->ptail;
 	}
     }
 
   if (empty_debug_line)
     out_debug_line (line_seg);
 
   /* If this is assembler generated line info, and there is no
      debug_info already, we need .debug_info, .debug_abbrev and
      .debug_str sections as well.  */
   if (emit_other_sections)
     {
       segT abbrev_seg;
       segT aranges_seg;
       segT str_seg;
       symbolS *name_sym, *comp_dir_sym, *producer_sym, *ranges_sym;
       unsigned char func_form = 0;
 
       gas_assert (all_segs);
 
       info_seg = subseg_new (".debug_info", 0);
       abbrev_seg = subseg_new (".debug_abbrev", 0);
       aranges_seg = subseg_new (".debug_aranges", 0);
       str_seg = subseg_new (".debug_str", 0);
 
       bfd_set_section_flags (info_seg,
 			      SEC_READONLY | SEC_DEBUGGING | SEC_OCTETS);
       bfd_set_section_flags (abbrev_seg,
 			      SEC_READONLY | SEC_DEBUGGING | SEC_OCTETS);
       bfd_set_section_flags (aranges_seg,
 			      SEC_READONLY | SEC_DEBUGGING | SEC_OCTETS);
       bfd_set_section_flags (str_seg,
 			      SEC_READONLY | SEC_DEBUGGING | SEC_OCTETS
 				       | SEC_MERGE | SEC_STRINGS);
       str_seg->entsize = 1;
 
       record_alignment (aranges_seg, ffs (2 * sizeof_address) - 1);
 
       if (all_segs->next == NULL)
 	ranges_sym = NULL;
       else
 	{
 	  if (DWARF2_VERSION < 5)
 	    {
 	      segT ranges_seg = subseg_new (".debug_ranges", 0);
 	      bfd_set_section_flags (ranges_seg, (SEC_READONLY
 						  | SEC_DEBUGGING
 						  | SEC_OCTETS));
 	      record_alignment (ranges_seg, ffs (2 * sizeof_address) - 1);
 	      out_debug_ranges (ranges_seg, &ranges_sym);
 	    }
 	  else
 	    {
 	      segT rnglists_seg = subseg_new (".debug_rnglists", 0);
 	      bfd_set_section_flags (rnglists_seg, (SEC_READONLY
 						    | SEC_DEBUGGING
 						    | SEC_OCTETS));
 	      out_debug_rnglists (rnglists_seg, &ranges_sym);
 	    }
 	}
 
       out_debug_aranges (aranges_seg, info_seg);
       out_debug_abbrev (abbrev_seg, info_seg, line_seg, &func_form);
       out_debug_str (str_seg, &name_sym, &comp_dir_sym, &producer_sym);
       out_debug_info (info_seg, abbrev_seg, line_seg, str_seg,
 		      ranges_sym, name_sym, comp_dir_sym, producer_sym,
 		      func_form);
     }
+  dwarf2_cleanup ();
 }
 
 /* Perform any deferred checks pertaining to debug information.  */
diff --git a/gas/remap.c b/gas/remap.c
index f614cb5eefd..2550682173b 100644
--- a/gas/remap.c
+++ b/gas/remap.c
@@ -69,7 +69,7 @@ add_debug_prefix_map (const char *arg)
    a newly allocated buffer containing the name corresponding to FILENAME.
    It is the caller's responsibility to free the buffer.  */
 
-const char *
+char *
 remap_debug_filename (const char *filename)
 {
   debug_prefix_map *map;
diff --git a/gas/stabs.c b/gas/stabs.c
index 5cd3c57f385..e80015ad4fd 100644
--- a/gas/stabs.c
+++ b/gas/stabs.c
@@ -489,22 +489,22 @@ void
 stabs_generate_asm_file (void)
 {
   const char *file;
   unsigned int lineno;
 
   file = as_where (&lineno);
   if (use_gnu_debug_info_extensions)
     {
-      const char *dir;
+      char *dir;
       char *dir2;
 
       dir = remap_debug_filename (getpwd ());
       dir2 = concat (dir, "/", NULL);
       generate_asm_file (N_SO, dir2);
       free (dir2);
-      xfree ((char *) dir);
+      free (dir);
     }
   generate_asm_file (N_SO, file);
 }
 
 /* Generate stabs debugging information to denote the source file.
    TYPE is one of N_SO, N_SOL.  */
