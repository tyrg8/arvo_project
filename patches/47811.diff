commit 2748bfc737d2fe2585bf084e9a796c5b23566fea
Author: Tesfa Mael <tesfa@wolfssl.com>
Date:   Wed Jun 8 09:31:17 2022 -0700

    Add a check in RsaPad_OAEP

diff --git a/wolfcrypt/src/asn.c b/wolfcrypt/src/asn.c
index e7f293c2f..ac0537dac 100644
--- a/wolfcrypt/src/asn.c
+++ b/wolfcrypt/src/asn.c
@@ -19173,36 +19173,36 @@ Signer* MakeSigner(void* heap)
 /* Free an individual signer.
  *
  * Used by Certificate Manager.
  *
  * @param [in, out] signer  On in, signer object.
  *                          On out, pointer is no longer valid.
  * @param [in]      heap    Dynamic memory hint.
  */
 void FreeSigner(Signer* signer, void* heap)
 {
     XFREE(signer->name, heap, DYNAMIC_TYPE_SUBJECT_CN);
     XFREE((void*)signer->publicKey, heap, DYNAMIC_TYPE_PUBLIC_KEY);
 #ifndef IGNORE_NAME_CONSTRAINTS
     if (signer->permittedNames)
         FreeNameSubtrees(signer->permittedNames, heap);
     if (signer->excludedNames)
         FreeNameSubtrees(signer->excludedNames, heap);
 #endif
 #ifdef WOLFSSL_SIGNER_DER_CERT
     FreeDer(&signer->derCert);
 #endif
     XFREE(signer, heap, DYNAMIC_TYPE_SIGNER);
-
+    (void)signer;
     (void)heap;
 }
 
 
 /* Free the whole singer table with number of rows.
  *
  * Each table entry is a linked list of signers.
  * Used by Certificate Manager.
  *
  * @param [in, out] table   Array of signer objects.
  * @param [in]      rows    Number of entries in table.
  * @param [in]      heap    Dynamic memory hint.
  */
diff --git a/wolfcrypt/src/rsa.c b/wolfcrypt/src/rsa.c
index 8c3aeaec0..0beaa0025 100644
--- a/wolfcrypt/src/rsa.c
+++ b/wolfcrypt/src/rsa.c
@@ -1041,200 +1041,204 @@ static int RsaMGF(int type, byte* seed, word32 seedSz, byte* out,
 /* Padding */
 #ifndef WOLFSSL_RSA_VERIFY_ONLY
 #ifndef WC_NO_RNG
 #ifndef WC_NO_RSA_OAEP
 static int RsaPad_OAEP(const byte* input, word32 inputLen, byte* pkcsBlock,
         word32 pkcsBlockLen, byte padValue, WC_RNG* rng,
         enum wc_HashType hType, int mgf, byte* optLabel, word32 labelLen,
         void* heap)
 {
     int ret;
     int hLen;
     int psLen;
     int i;
     word32 idx;
 
     #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
         byte* dbMask = NULL;
         byte* lHash = NULL;
         byte* seed  = NULL;
     #else
         byte dbMask[RSA_MAX_SIZE/8 + RSA_PSS_PAD_SZ];
         /* must be large enough to contain largest hash */
         byte lHash[WC_MAX_DIGEST_SIZE];
         byte seed[WC_MAX_DIGEST_SIZE];
     #endif
 
     /* no label is allowed, but catch if no label provided and length > 0 */
     if (optLabel == NULL && labelLen > 0) {
         return BUFFER_E;
     }
 
     /* limit of label is the same as limit of hash function which is massive */
     hLen = wc_HashGetDigestSize(hType);
     if (hLen < 0) {
         return hLen;
     }
 
     #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
         lHash = (byte*)XMALLOC(hLen, heap, DYNAMIC_TYPE_RSA_BUFFER);
         if (lHash == NULL) {
             return MEMORY_E;
         }
         seed = (byte*)XMALLOC(hLen, heap, DYNAMIC_TYPE_RSA_BUFFER);
         if (seed == NULL) {
             XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
             return MEMORY_E;
         }
     #else
         /* hLen should never be larger than lHash since size is max digest size,
            but check before blindly calling wc_Hash */
         if ((word32)hLen > sizeof(lHash)) {
             WOLFSSL_MSG("OAEP lHash to small for digest!!");
             return MEMORY_E;
         }
     #endif
 
     if ((ret = wc_Hash(hType, optLabel, labelLen, lHash, hLen)) != 0) {
         WOLFSSL_MSG("OAEP hash type possibly not supported or lHash to small");
         #ifdef WOLFSSL_SMALL_STACK
             XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
             XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
         #endif
         return ret;
     }
 
     /* handles check of location for idx as well as psLen, cast to int to check
        for pkcsBlockLen(k) - 2 * hLen - 2 being negative
        This check is similar to decryption where k > 2 * hLen + 2 as msg
        size approaches 0. In decryption if k is less than or equal -- then there
        is no possible room for msg.
        k = RSA key size
        hLen = hash digest size -- will always be >= 0 at this point
      */
     if ((word32)(2 * hLen + 2) > pkcsBlockLen) {
         WOLFSSL_MSG("OAEP pad error hash to big for RSA key size");
         #ifdef WOLFSSL_SMALL_STACK
             XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
             XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
         #endif
         return BAD_FUNC_ARG;
     }
 
     if (inputLen > (pkcsBlockLen - 2 * hLen - 2)) {
         WOLFSSL_MSG("OAEP pad error message too long");
         #ifdef WOLFSSL_SMALL_STACK
             XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
             XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
         #endif
         return BAD_FUNC_ARG;
     }
 
     /* concatenate lHash || PS || 0x01 || msg */
     idx = pkcsBlockLen - 1 - inputLen;
     psLen = pkcsBlockLen - inputLen - 2 * hLen - 2;
     if (pkcsBlockLen < inputLen) { /*make sure not writing over end of buffer */
         #ifdef WOLFSSL_SMALL_STACK
             XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
             XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
         #endif
         return BUFFER_E;
     }
     XMEMCPY(pkcsBlock + (pkcsBlockLen - inputLen), input, inputLen);
     pkcsBlock[idx--] = 0x01; /* PS and M separator */
     while (psLen > 0 && idx > 0) {
         pkcsBlock[idx--] = 0x00;
         psLen--;
     }
 
     idx = idx - hLen + 1;
     XMEMCPY(pkcsBlock + idx, lHash, hLen);
 
     /* generate random seed */
     if ((ret = wc_RNG_GenerateBlock(rng, seed, hLen)) != 0) {
         #ifdef WOLFSSL_SMALL_STACK
             XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
             XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
         #endif
         return ret;
     }
 
 #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
     /* create maskedDB from dbMask */
     dbMask = (byte*)XMALLOC(pkcsBlockLen - hLen - 1, heap, DYNAMIC_TYPE_RSA);
     if (dbMask == NULL) {
 
             XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
             XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
         return MEMORY_E;
     }
+#else
+    if (pkcsBlockLen - hLen - 1 > sizeof(dbMask)) {
+        return MEMORY_E;
+    }
 #endif
     XMEMSET(dbMask, 0, pkcsBlockLen - hLen - 1); /* help static analyzer */
     ret = RsaMGF(mgf, seed, hLen, dbMask, pkcsBlockLen - hLen - 1, heap);
     if (ret != 0) {
         #ifdef WOLFSSL_SMALL_STACK
             XFREE(dbMask, heap, DYNAMIC_TYPE_RSA);
             XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
             XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
         #endif
         return ret;
     }
 
     i = 0;
     idx = hLen + 1;
     while (idx < pkcsBlockLen && (word32)i < (pkcsBlockLen - hLen -1)) {
         pkcsBlock[idx] = dbMask[i++] ^ pkcsBlock[idx];
         idx++;
     }
 #ifdef WOLFSSL_SMALL_STACK
     XFREE(dbMask, heap, DYNAMIC_TYPE_RSA);
 #endif
 
     /* create maskedSeed from seedMask */
     idx = 0;
     pkcsBlock[idx++] = 0x00;
     /* create seedMask inline */
     if ((ret = RsaMGF(mgf, pkcsBlock + hLen + 1, pkcsBlockLen - hLen - 1,
                                            pkcsBlock + 1, hLen, heap)) != 0) {
         #ifdef WOLFSSL_SMALL_STACK
             XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
             XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
         #endif
         return ret;
     }
 
     /* xor created seedMask with seed to make maskedSeed */
     i = 0;
     while (idx < (word32)(hLen + 1) && i < hLen) {
         pkcsBlock[idx] = pkcsBlock[idx] ^ seed[i++];
         idx++;
     }
 
     #ifdef WOLFSSL_SMALL_STACK
         XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
         XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
     #endif
     (void)padValue;
 
     return 0;
 }
 #endif /* !WC_NO_RSA_OAEP */
 
 #ifdef WC_RSA_PSS
 
 /* 0x00 .. 0x00 0x01 | Salt | Gen Hash | 0xbc
  * XOR MGF over all bytes down to end of Salt
  * Gen Hash = HASH(8 * 0x00 | Message Hash | Salt)
  *
  * input         Digest of the message.
  * inputLen      Length of digest.
  * pkcsBlock     Buffer to write to.
  * pkcsBlockLen  Length of buffer to write to.
  * rng           Random number generator (for salt).
  * htype         Hash function to use.
  * mgf           Mask generation function.
  * saltLen       Length of salt to put in padding.
  * bits          Length of key in bits.
  * heap          Used for dynamic memory allocation.
  * returns 0 on success, PSS_SALTLEN_E when the salt length is invalid
  * and other negative values on error.
  */
@@ -3080,166 +3084,166 @@ int wc_RsaFunction(const byte* in, word32 inLen, byte* out,
 #ifndef WOLFSSL_RSA_VERIFY_ONLY
 /* Internal Wrappers */
 /* Gives the option of choosing padding type
    in : input to be encrypted
    inLen: length of input buffer
    out: encrypted output
    outLen: length of encrypted output buffer
    key   : wolfSSL initialized RSA key struct
    rng   : wolfSSL initialized random number struct
    rsa_type  : type of RSA: RSA_PUBLIC_ENCRYPT, RSA_PUBLIC_DECRYPT,
         RSA_PRIVATE_ENCRYPT or RSA_PRIVATE_DECRYPT
    pad_value: RSA_BLOCK_TYPE_1 or RSA_BLOCK_TYPE_2
    pad_type  : type of padding: WC_RSA_PKCSV15_PAD, WC_RSA_OAEP_PAD,
         WC_RSA_NO_PAD or WC_RSA_PSS_PAD
    hash  : type of hash algorithm to use found in wolfssl/wolfcrypt/hash.h
    mgf   : type of mask generation function to use
    label : optional label
    labelSz : size of optional label buffer
    saltLen : Length of salt used in PSS
    rng : random number generator */
 static int RsaPublicEncryptEx(const byte* in, word32 inLen, byte* out,
                             word32 outLen, RsaKey* key, int rsa_type,
                             byte pad_value, int pad_type,
                             enum wc_HashType hash, int mgf,
                             byte* label, word32 labelSz, int saltLen,
                             WC_RNG* rng)
 {
     int ret = 0;
     int sz;
     int state;
 
     if (in == NULL || inLen == 0 || out == NULL || key == NULL) {
         return BAD_FUNC_ARG;
     }
 
     sz = wc_RsaEncryptSize(key);
     if (sz > (int)outLen) {
         return RSA_BUFFER_E;
     }
 
-    if (sz < RSA_MIN_PAD_SZ) {
+    if (sz < RSA_MIN_PAD_SZ || sz > (int)RSA_MAX_SIZE/8) {
         return WC_KEY_SIZE_E;
     }
 
     if (inLen > (word32)(sz - RSA_MIN_PAD_SZ)) {
 #ifdef WC_RSA_NO_PADDING
         /* In the case that no padding is used the input length can and should
          * be the same size as the RSA key. */
         if (pad_type != WC_RSA_NO_PAD)
 #endif
         return RSA_BUFFER_E;
     }
 
 #ifndef WOLFSSL_BIND
     state = key->state;
 #else
     /* Bind9 shares the EVP_PKEY struct across multiple threads so let's just
      * force a restart on each RsaPublicEncryptEx call for it. */
     state = RSA_STATE_NONE;
 #ifdef WOLFSSL_ASYNC_CRYPT
 #error wolfSSL does not handle building bind support with async crypto
 #endif
 #endif
     switch (state) {
     case RSA_STATE_NONE:
     case RSA_STATE_ENCRYPT_PAD:
     #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_RSA) && \
             defined(HAVE_CAVIUM)
         if (key->asyncDev.marker == WOLFSSL_ASYNC_MARKER_RSA &&
                                  pad_type != WC_RSA_PSS_PAD && key->n.raw.buf) {
             /* Async operations that include padding */
             if (rsa_type == RSA_PUBLIC_ENCRYPT &&
                                                 pad_value == RSA_BLOCK_TYPE_2) {
                 key->state = RSA_STATE_ENCRYPT_RES;
                 key->dataLen = key->n.raw.len;
                 return NitroxRsaPublicEncrypt(in, inLen, out, outLen, key);
             }
             else if (rsa_type == RSA_PRIVATE_ENCRYPT &&
                                                 pad_value == RSA_BLOCK_TYPE_1) {
                 key->state = RSA_STATE_ENCRYPT_RES;
                 key->dataLen = key->n.raw.len;
                 return NitroxRsaSSL_Sign(in, inLen, out, outLen, key);
             }
         }
     #elif defined(WOLFSSL_CRYPTOCELL)
         if (rsa_type == RSA_PUBLIC_ENCRYPT &&
                                             pad_value == RSA_BLOCK_TYPE_2) {
 
             return cc310_RsaPublicEncrypt(in, inLen, out, outLen, key);
         }
         else if (rsa_type == RSA_PRIVATE_ENCRYPT &&
                                          pad_value == RSA_BLOCK_TYPE_1) {
          return cc310_RsaSSL_Sign(in, inLen, out, outLen, key,
                                   cc310_hashModeRSA(hash, 0));
         }
     #endif /* WOLFSSL_CRYPTOCELL */
 
         key->state = RSA_STATE_ENCRYPT_PAD;
         ret = wc_RsaPad_ex(in, inLen, out, sz, pad_value, rng, pad_type, hash,
                            mgf, label, labelSz, saltLen, mp_count_bits(&key->n),
                            key->heap);
         if (ret < 0) {
             break;
         }
 
         key->state = RSA_STATE_ENCRYPT_EXPTMOD;
         FALL_THROUGH;
 
     case RSA_STATE_ENCRYPT_EXPTMOD:
 
         key->dataLen = outLen;
         ret = wc_RsaFunction(out, sz, out, &key->dataLen, rsa_type, key, rng);
 
         if (ret >= 0 || ret == WC_PENDING_E) {
             key->state = RSA_STATE_ENCRYPT_RES;
         }
         if (ret < 0) {
             break;
         }
 
         FALL_THROUGH;
 
     case RSA_STATE_ENCRYPT_RES:
         ret = key->dataLen;
         break;
 
     default:
         ret = BAD_STATE_E;
         break;
     }
 
     /* if async pending then return and skip done cleanup below */
     if (ret == WC_PENDING_E
     #ifdef WC_RSA_NONBLOCK
         || ret == FP_WOULDBLOCK
     #endif
     ) {
         return ret;
     }
 
     key->state = RSA_STATE_NONE;
     wc_RsaCleanup(key);
 
     return ret;
 }
 
 #endif
 
 /* Gives the option of choosing padding type
    in : input to be decrypted
    inLen: length of input buffer
    out:  decrypted message
    outLen: length of decrypted message in bytes
    outPtr: optional inline output pointer (if provided doing inline)
    key   : wolfSSL initialized RSA key struct
    rsa_type  : type of RSA: RSA_PUBLIC_ENCRYPT, RSA_PUBLIC_DECRYPT,
         RSA_PRIVATE_ENCRYPT or RSA_PRIVATE_DECRYPT
    pad_value: RSA_BLOCK_TYPE_1 or RSA_BLOCK_TYPE_2
    pad_type  : type of padding: WC_RSA_PKCSV15_PAD, WC_RSA_OAEP_PAD,
         WC_RSA_NO_PAD, WC_RSA_PSS_PAD
    hash  : type of hash algorithm to use found in wolfssl/wolfcrypt/hash.h
    mgf   : type of mask generation function to use
    label : optional label
    labelSz : size of optional label buffer
    saltLen : Length of salt used in PSS
    rng : random number generator */
