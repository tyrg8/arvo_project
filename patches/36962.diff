commit d0f3c225864825d24c1143f8de4a54b1c6d83247
Merge: 1cb8393797 413b17eecd
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Mon Aug 9 14:09:02 2021 -0700

    Merge branch 'V5-9-patches'
    
    * V5-9-patches:
      libsnmp: Fix the getoid() error path
      IF-MIB: Add a trailing newline to an error message

diff --git a/agent/mibgroup/if-mib/data_access/interface_linux.c b/agent/mibgroup/if-mib/data_access/interface_linux.c
index e56cadf466..5322ee9371 100644
--- a/agent/mibgroup/if-mib/data_access/interface_linux.c
+++ b/agent/mibgroup/if-mib/data_access/interface_linux.c
@@ -607,331 +607,331 @@ int
 netsnmp_arch_interface_container_load(netsnmp_container* container,
                                       u_int load_flags)
 {
     FILE           *devin;
     char            line[256];
     static char     scan_expected = 0;
     int             fd, rc;
     int             interfaces = 0;
     struct ifconf   ifc;
 #ifdef NETSNMP_ENABLE_IPV6
     netsnmp_container *addr_container;
 #endif
 
     DEBUGMSGTL(("access:interface:container:arch", "load (flags %x)\n",
                 load_flags));
 
     if (NULL == container) {
         snmp_log(LOG_ERR, "no container specified/found for interface\n");
         return -1;
     }
 
     if (!(devin = fopen("/proc/net/dev", "r"))) {
         DEBUGMSGTL(("access:interface",
                     "Failed to load Interface Table (linux1)\n"));
         snmp_log_perror("interface_linux: cannot open /proc/net/dev");
         return -2;
     }
 
     /*
      * create socket for ioctls
      */
     fd = socket(AF_INET, SOCK_DGRAM, 0);
     if(fd < 0) {
         snmp_log_perror("interface_linux: could not create socket");
         rc = -2;
         goto close_devin;
     }
 
 #ifdef NETSNMP_ENABLE_IPV6
     /*
      * get ipv6 addresses
      */
     addr_container = netsnmp_access_ipaddress_container_load(NULL, 0);
 #endif
 
     /*
      * Read the first two lines of the file, containing the header
      * This indicates which version of the kernel we're working with,
      * and hence which statistics are actually available.
      *
      * Wes originally suggested parsing the field names in this header
      * to detect the position of individual fields directly,
      * but I suspect this is probably more trouble than it's worth.
      */
     NETSNMP_IGNORE_RESULT(fgets(line, sizeof(line), devin));
     NETSNMP_IGNORE_RESULT(fgets(line, sizeof(line), devin));
 
     if( 0 == scan_expected ) {
         if (strstr(line, "compressed")) {
             scan_expected = 10;
             DEBUGMSGTL(("access:interface",
                         "using linux 2.2 kernel /proc/net/dev\n"));
         } else {
             scan_expected = 5;
             DEBUGMSGTL(("access:interface",
                         "using linux 2.0 kernel /proc/net/dev\n"));
         }
     }
 
     interfaces = netsnmp_access_ipaddress_ioctl_get_interface_count(fd, &ifc);
     if (interfaces < 0) {
         snmp_log(LOG_ERR,"get interface count failed\n");
         rc = -2;
         goto free_addr_container;
     }
     netsnmp_assert(NULL != ifc.ifc_buf);
 
 
     /*
      * The rest of the file provides the statistics for each interface.
      * Read in each line in turn, isolate the interface name
      *   and retrieve (or create) the corresponding data structure.
      */
     while (fgets(line, sizeof(line), devin)) {
         netsnmp_interface_entry *entry = NULL;
         char           *stats, *ifstart = line;
         u_int           flags;
         oid             if_index;
 
         flags = 0;
         if (line[strlen(line) - 1] == '\n')
             line[strlen(line) - 1] = '\0';
 
         while (*ifstart && *ifstart == ' ')
             ifstart++;
 
         if ((!*ifstart) || ((stats = strrchr(ifstart, ':')) == NULL)) {
             snmp_log(LOG_ERR,
                      "interface data format error 1, line ==|%s|\n", line);
             continue;
         }
         if ((scan_expected == 10) && ((stats - line) < 6)) {
             snmp_log(LOG_ERR,
                      "interface data format error 2 (%d < 6), line ==|%s|\n",
                      (int)(stats - line), line);
         }
 
         DEBUGMSGTL(("9:access:ifcontainer", "processing '%s'\n", ifstart));
 
         /*
          * get index via ioctl.
          * If we've met this interface before, use the same index.
          * Otherwise find an unused index value and use that.
          */
         *stats++ = 0; /* null terminate name */
 
 	if (!netsnmp_access_interface_include(ifstart))
             continue;
 
         /* we may need to stop tracking ifaces if a max was set */
 	if (netsnmp_access_interface_max_reached(ifstart))
             continue;
 
         /*
          * set address type flags.
          * the only way I know of to check an interface for
          * ip version is to look for ip addresses. If anyone
          * knows a better way, put it here!
          */
         if_index = netsnmp_arch_interface_index_find(ifstart);
         if (if_index == 0) {
             DEBUGMSGTL(("access:interface", "network interface %s is gone",
                         ifstart));
             continue;
         }
 #ifdef NETSNMP_ENABLE_IPV6
         _arch_interface_has_ipv6(if_index, &flags, addr_container);
 #endif
         netsnmp_access_interface_ioctl_has_ipv4(fd, ifstart, 0, &flags, &ifc);
 
         /*
          * do we only want one address type?
          */
         if (((load_flags & NETSNMP_ACCESS_INTERFACE_LOAD_IP4_ONLY) &&
              ((flags & NETSNMP_INTERFACE_FLAGS_HAS_IPV4) == 0)) ||
             ((load_flags & NETSNMP_ACCESS_INTERFACE_LOAD_IP6_ONLY) &&
              ((flags & NETSNMP_INTERFACE_FLAGS_HAS_IPV6) == 0))) {
             DEBUGMSGTL(("9:access:ifcontainer",
                         "interface '%s' excluded by ip version\n",
                         ifstart));
             continue;
         }
 
         entry = netsnmp_access_interface_entry_create(ifstart, if_index);
         if(NULL == entry) {
 #ifdef NETSNMP_ENABLE_IPV6
             netsnmp_access_ipaddress_container_free(addr_container, 0);
 #endif
             rc = -3;
             goto free_ifc;
         }
         entry->ns_flags = flags; /* initial flags; we'll set more later */
 
 #ifdef HAVE_PCI_LOOKUP_NAME
 	_arch_interface_description_get(entry);
 #endif
 
 
         /*
          * use ioctls for some stuff
          *  (ignore rc, so we get as much info as possible)
          */
         netsnmp_access_interface_ioctl_physaddr_get(fd, entry);
 
         /*
          * physaddr should have set type. make some guesses (based
          * on name) if not.
          */
         if(0 == entry->type) {
             typedef struct _match_if {
                int             mi_type;
                const char     *mi_name;
             }              *pmatch_if, match_if;
             
             static match_if lmatch_if[] = {
                 {IANAIFTYPE_SOFTWARELOOPBACK, "lo"},
                 {IANAIFTYPE_ETHERNETCSMACD, "eth"},
                 {IANAIFTYPE_ETHERNETCSMACD, "vmnet"},
                 {IANAIFTYPE_ISO88025TOKENRING, "tr"},
                 {IANAIFTYPE_FASTETHER, "feth"},
                 {IANAIFTYPE_GIGABITETHERNET,"gig"},
                 {IANAIFTYPE_INFINIBAND,"ib"},
                 {IANAIFTYPE_PPP, "ppp"},
                 {IANAIFTYPE_SLIP, "sl"},
                 {IANAIFTYPE_TUNNEL, "sit"},
                 {IANAIFTYPE_BASICISDN, "ippp"},
                 {IANAIFTYPE_PROPVIRTUAL, "bond"}, /* Bonding driver find fastest slave */
                 {IANAIFTYPE_PROPVIRTUAL, "vad"},  /* ANS driver - ?speed? */
                 {0, NULL}                  /* end of list */
             };
 
             int             len;
             register pmatch_if pm;
             
             for (pm = lmatch_if; pm->mi_name; pm++) {
                 len = strlen(pm->mi_name);
                 if (0 == strncmp(entry->name, pm->mi_name, len)) {
                     entry->type = pm->mi_type;
                     break;
                 }
             }
             if(NULL == pm->mi_name)
                 entry->type = IANAIFTYPE_OTHER;
         }
 
         /*
          * interface identifier is specified based on physaddr and type
          */
         switch (entry->type) {
         case IANAIFTYPE_ETHERNETCSMACD:
         case IANAIFTYPE_ETHERNET3MBIT:
         case IANAIFTYPE_FASTETHER:
         case IANAIFTYPE_FASTETHERFX:
         case IANAIFTYPE_GIGABITETHERNET:
         case IANAIFTYPE_FDDI:
         case IANAIFTYPE_ISO88025TOKENRING:
             if (NULL != entry->paddr && ETH_ALEN != entry->paddr_len)
                 break;
 
             entry->v6_if_id_len = entry->paddr_len + 2;
             memcpy(entry->v6_if_id, entry->paddr, 3);
             memcpy(entry->v6_if_id + 5, entry->paddr + 3, 3);
             entry->v6_if_id[0] ^= 2;
             entry->v6_if_id[3] = 0xFF;
             entry->v6_if_id[4] = 0xFE;
 
             entry->ns_flags |= NETSNMP_INTERFACE_FLAGS_HAS_V6_IFID;
             break;
 
         case IANAIFTYPE_SOFTWARELOOPBACK:
             entry->v6_if_id_len = 0;
             entry->ns_flags |= NETSNMP_INTERFACE_FLAGS_HAS_V6_IFID;
             break;
         }
 
         if (IANAIFTYPE_ETHERNETCSMACD == entry->type) {
             unsigned long long speed;
             unsigned long long defaultspeed = NOMINAL_LINK_SPEED;
             if (!(entry->os_flags & IFF_RUNNING)) {
                 /*
                  * use speed 0 if the if speed cannot be determined *and* the
                  * interface is down
                  */
                 defaultspeed = 0;
             }
             speed = netsnmp_linux_interface_get_if_speed(fd,
                     entry->name, defaultspeed);
             if (speed > 0xffffffffL) {
                 entry->speed = 0xffffffff;
             } else
                 entry->speed = speed;
             entry->speed_high = speed / 1000000LL;
         }
 #ifdef APPLIED_PATCH_836390   /* xxx-rks ifspeed fixes */
         else if (IANAIFTYPE_PROPVIRTUAL == entry->type)
             entry->speed = _get_bonded_if_speed(entry);
 #endif
         else
             netsnmp_access_interface_entry_guess_speed(entry);
         
         netsnmp_access_interface_ioctl_flags_get(fd, entry);
 
         netsnmp_access_interface_ioctl_mtu_get(fd, entry);
 
         /*
          * Zero speed means link problem.
          * - i'm not sure this is always true...
          */
         if((entry->speed == 0) && (entry->os_flags & IFF_UP)) {
             entry->os_flags &= ~IFF_RUNNING;
         }
 
         /*
          * check for promiscuous mode.
          *  NOTE: there are 2 ways to set promiscuous mode in Linux
          *  (kernels later than 2.2.something) - using ioctls and
          *  using setsockopt. The ioctl method tested here does not
          *  detect if an interface was set using setsockopt. google
          *  on IFF_PROMISC and linux to see lots of arguments about it.
          */
         if(entry->os_flags & IFF_PROMISC) {
             entry->promiscuous = 1; /* boolean */
         }
 
         /*
          * hardcoded max packet size
          * (see ip_frag_reasm: if(len > 65535) goto out_oversize;)
          */
         entry->reasm_max_v4 = entry->reasm_max_v6 = 65535;
         entry->ns_flags |= 
             NETSNMP_INTERFACE_FLAGS_HAS_V4_REASMMAX |
             NETSNMP_INTERFACE_FLAGS_HAS_V6_REASMMAX;
 
         netsnmp_access_interface_entry_overrides(entry);
 
         if (! (load_flags & NETSNMP_ACCESS_INTERFACE_LOAD_NO_STATS))
             _parse_stats(entry, stats, scan_expected);
 
         if (flags & NETSNMP_INTERFACE_FLAGS_HAS_IPV4)
             _arch_interface_flags_v4_get(entry);
 
 #ifdef NETSNMP_ENABLE_IPV6
         if (flags & NETSNMP_INTERFACE_FLAGS_HAS_IPV6)
             _arch_interface_flags_v6_get(entry);
 #endif /* NETSNMP_ENABLE_IPV6 */
 
         /*
          * add to container
          */
         if (CONTAINER_INSERT(container, entry) != 0) {
             netsnmp_interface_entry *existing =
                 CONTAINER_FIND(container, entry);
             NETSNMP_LOGONCE((LOG_WARNING,
-                             "Encountered interface with index %" NETSNMP_PRIz "u twice: %s <> %s",
+                             "Encountered interface with index %" NETSNMP_PRIz "u twice: %s <> %s\n",
                              entry->index, existing ? existing->name : "(?)",
                              entry->name));
             netsnmp_access_interface_entry_free(entry);
         }
     }
 
     rc = 0;
diff --git a/snmplib/parse.c b/snmplib/parse.c
index 8fa036fc56..0f1b4152f0 100644
--- a/snmplib/parse.c
+++ b/snmplib/parse.c
@@ -1864,84 +1864,85 @@ static int
 getoid(FILE * fp, struct subid_s *id_arg, int length)
 {
     struct subid_s *id = id_arg;
     int             i, count, type;
     char            token[MAXTOKEN];
 
     if ((type = get_token(fp, token, MAXTOKEN)) != LEFTBRACKET) {
         print_error("Expected \"{\"", token, type);
         return 0;
     }
     type = get_token(fp, token, MAXTOKEN);
     for (count = 0; count < length; count++, id++) {
         id->label = NULL;
         id->modid = current_module;
         id->subid = -1;
         if (type == RIGHTBRACKET)
             return count;
         if (type == LABEL) {
             /*
              * this entry has a label 
              */
             id->label = strdup(token);
             type = get_token(fp, token, MAXTOKEN);
             if (type == LEFTPAREN) {
                 type = get_token(fp, token, MAXTOKEN);
                 if (type == NUMBER) {
                     id->subid = strtoul(token, NULL, 10);
                     if ((type =
                          get_token(fp, token, MAXTOKEN)) != RIGHTPAREN) {
                         print_error("Expected a closing parenthesis",
                                     token, type);
                         goto free_labels;
                     }
                 } else {
                     print_error("Expected a number", token, type);
                     goto free_labels;
                 }
             } else {
                 continue;
             }
         } else if (type == NUMBER) {
             /*
              * this entry  has just an integer sub-identifier 
              */
             id->subid = strtoul(token, NULL, 10);
         } else {
             print_error("Expected label or number", token, type);
             goto free_labels;
         }
         type = get_token(fp, token, MAXTOKEN);
     }
     print_error("Too long OID", token, type);
+    --count;
 
 free_labels:
-    for (i = 0; i < count; i++) {
-        free(id[i].label);
-        id[i].label = NULL;
+    for (i = 0; i <= count; i++) {
+        free(id_arg[i].label);
+        id_arg[i].label = NULL;
     }
 
     return 0;
 }
 
 /*
  * Parse a sequence of object subidentifiers for the given name.
  * The "label OBJECT IDENTIFIER ::=" portion has already been parsed.
  *
  * The majority of cases take this form :
  * label OBJECT IDENTIFIER ::= { parent 2 }
  * where a parent label and a child subidentifier number are specified.
  *
  * Variations on the theme include cases where a number appears with
  * the parent, or intermediate subidentifiers are specified by label,
  * by number, or both.
  *
  * Here are some representative samples :
  * internet        OBJECT IDENTIFIER ::= { iso org(3) dod(6) 1 }
  * mgmt            OBJECT IDENTIFIER ::= { internet 2 }
  * rptrInfoHealth  OBJECT IDENTIFIER ::= { snmpDot3RptrMgt 0 4 }
  *
  * Here is a very rare form :
  * iso             OBJECT IDENTIFIER ::= { 1 }
  *
  * Returns NULL on error.  When this happens, memory may be leaked.
  */
