commit 14b84a2e997945467e445b1d246ee03a0c3ba806
Author: Paul B Mahol <onemda@gmail.com>
Date:   Sat Aug 8 19:59:06 2020 +0200

    avcodec/cfhdenc: free alpha buffer on closing

diff --git a/libavcodec/cfhdenc.c b/libavcodec/cfhdenc.c
index 8030413548..d53604ae11 100644
--- a/libavcodec/cfhdenc.c
+++ b/libavcodec/cfhdenc.c
@@ -241,124 +241,127 @@ typedef struct CFHDEncContext {
 static av_cold int cfhd_encode_init(AVCodecContext *avctx)
 {
     CFHDEncContext *s = avctx->priv_data;
     const int sign_mask = 256;
     const int twos_complement = -sign_mask;
     const int mag_mask = sign_mask - 1;
     int ret, last = 0;
 
     ret = av_pix_fmt_get_chroma_sub_sample(avctx->pix_fmt,
                                            &s->chroma_h_shift,
                                            &s->chroma_v_shift);
     if (ret < 0)
         return ret;
 
     if (avctx->width & 15) {
         av_log(avctx, AV_LOG_ERROR, "Width must be multiple of 16.\n");
         return AVERROR_INVALIDDATA;
     }
 
     s->planes = av_pix_fmt_count_planes(avctx->pix_fmt);
 
     for (int i = 0; i < s->planes; i++) {
         int w8, h8, w4, h4, w2, h2;
         int width  = i ? avctx->width >> s->chroma_h_shift : avctx->width;
         int height = i ? FFALIGN(avctx->height >> s->chroma_v_shift, 8) :
                          FFALIGN(avctx->height >> s->chroma_v_shift, 8);
         ptrdiff_t stride = FFALIGN(width / 8, 8) * 8;
 
         w8 = FFALIGN(width / 8, 8);
         h8 = height / 8;
         w4 = w8 * 2;
         h4 = h8 * 2;
         w2 = w4 * 2;
         h2 = h4 * 2;
 
         s->plane[i].dwt_buf =
             av_mallocz_array(height * stride, sizeof(*s->plane[i].dwt_buf));
         s->plane[i].dwt_tmp =
             av_malloc_array(height * stride, sizeof(*s->plane[i].dwt_tmp));
         if (!s->plane[i].dwt_buf || !s->plane[i].dwt_tmp)
             return AVERROR(ENOMEM);
 
         s->plane[i].subband[0] = s->plane[i].dwt_buf;
         s->plane[i].subband[1] = s->plane[i].dwt_buf + 2 * w8 * h8;
         s->plane[i].subband[2] = s->plane[i].dwt_buf + 1 * w8 * h8;
         s->plane[i].subband[3] = s->plane[i].dwt_buf + 3 * w8 * h8;
         s->plane[i].subband[4] = s->plane[i].dwt_buf + 2 * w4 * h4;
         s->plane[i].subband[5] = s->plane[i].dwt_buf + 1 * w4 * h4;
         s->plane[i].subband[6] = s->plane[i].dwt_buf + 3 * w4 * h4;
         s->plane[i].subband[7] = s->plane[i].dwt_buf + 2 * w2 * h2;
         s->plane[i].subband[8] = s->plane[i].dwt_buf + 1 * w2 * h2;
         s->plane[i].subband[9] = s->plane[i].dwt_buf + 3 * w2 * h2;
 
         for (int j = 0; j < DWT_LEVELS; j++) {
             for (int k = 0; k < FF_ARRAY_ELEMS(s->plane[i].band[j]); k++) {
                 s->plane[i].band[j][k].width  = (width / 8) << j;
                 s->plane[i].band[j][k].height = (height / 8) << j;
                 s->plane[i].band[j][k].a_width  = w8 << j;
                 s->plane[i].band[j][k].a_height = h8 << j;
             }
         }
 
         /* ll2 and ll1 commented out because they are done in-place */
         s->plane[i].l_h[0] = s->plane[i].dwt_tmp;
         s->plane[i].l_h[1] = s->plane[i].dwt_tmp + 2 * w8 * h8;
         // s->plane[i].l_h[2] = ll2;
         s->plane[i].l_h[3] = s->plane[i].dwt_tmp;
         s->plane[i].l_h[4] = s->plane[i].dwt_tmp + 2 * w4 * h4;
         // s->plane[i].l_h[5] = ll1;
         s->plane[i].l_h[6] = s->plane[i].dwt_tmp;
         s->plane[i].l_h[7] = s->plane[i].dwt_tmp + 2 * w2 * h2;
     }
 
     for (int i = 0; i < 512; i++) {
         int value = (i & sign_mask) ? twos_complement + (i & mag_mask): i;
         int mag = FFMIN(FFABS(value), 255);
 
         if (mag) {
             s->cb[i].bits = (codebook[mag][1] << 1) | (value > 0 ? 0 : 1);
             s->cb[i].size = codebook[mag][0] + 1;
         } else {
             s->cb[i].bits = codebook[mag][1];
             s->cb[i].size = codebook[mag][0];
         }
     }
 
     s->cb[512].bits = 0x3114ba3;
     s->cb[512].size = 26;
 
     s->rb[0].run = 0;
 
     for (int i = 1, j = 0; i < 320 && j < 7; j++) {
         int run = runbook[j][2];
         int end = runbook[j+1][2];
 
         while (i < end) {
             s->rb[i].run = run;
             s->rb[i].bits = runbook[j][1];
             s->rb[i++].size = runbook[j][0];
         }
     }
 
     s->rb[320].bits = runbook[7][1];
     s->rb[320].size = runbook[7][0];
     s->rb[320].run = 320;
 
     for (int i = 0; i < 256; i++) {
         int idx = i + ((768LL * i * i * i) / (256 * 256 * 256));
 
         s->lut[idx] = i;
     }
     for (int i = 0; i < 1024; i++) {
         if (s->lut[i])
             last = s->lut[i];
         else
             s->lut[i] = last;
     }
 
+    if (s->planes != 4)
+        return 0;
+
     s->alpha = av_calloc(avctx->width * avctx->height, sizeof(*s->alpha));
     if (!s->alpha)
         return AVERROR(ENOMEM);
 
     return 0;
 }
@@ -852,20 +855,22 @@ static int cfhd_encode_frame(AVCodecContext *avctx, AVPacket *pkt,
 static av_cold int cfhd_encode_close(AVCodecContext *avctx)
 {
     CFHDEncContext *s = avctx->priv_data;
 
     for (int i = 0; i < s->planes; i++) {
         av_freep(&s->plane[i].dwt_buf);
         av_freep(&s->plane[i].dwt_tmp);
 
         for (int j = 0; j < SUBBAND_COUNT; j++)
             s->plane[i].subband[j] = NULL;
 
         for (int j = 0; j < 8; j++)
             s->plane[i].l_h[j] = NULL;
     }
 
+    av_freep(&s->alpha);
+
     return 0;
 }
 
 #define OFFSET(x) offsetof(CFHDEncContext, x)
 #define VE AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM
