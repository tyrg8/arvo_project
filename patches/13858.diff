commit 9f840c6306b853e98eab75ed2fa9522f7e2dae98
Author: pancake <pancake@nopcode.org>
Date:   Fri Mar 22 11:26:55 2019 +0100

    Fix clusterfuzz-testcase-minimized-ia_fuzz-5636199282114560.dms

diff --git a/libr/bin/format/elf/elf.c b/libr/bin/format/elf/elf.c
index a75c19ae11..4131641391 100644
--- a/libr/bin/format/elf/elf.c
+++ b/libr/bin/format/elf/elf.c
@@ -1,48 +1,48 @@
-/* radare - LGPL - Copyright 2008-2018 - nibble, pancake, alvaro_fe */
+/* radare - LGPL - Copyright 2008-2019 - nibble, pancake, alvaro_fe */
 
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <assert.h>
 #include <r_types.h>
 #include <r_util.h>
 #include "elf.h"
 
 #ifdef IFDBG
 #undef IFDBG
 #endif
 
 #define DO_THE_DBG 0
 #define IFDBG if (DO_THE_DBG)
 #define IFINT if (0)
 
 #define MIPS_PLT_OFFSET 108
 
 #define ELF_PAGE_MASK 0xFFFFFFFFFFFFF000LL
 #define ELF_PAGE_SIZE 12
 
 #define R_ELF_NO_RELRO 0
 #define R_ELF_PART_RELRO 1
 #define R_ELF_FULL_RELRO 2
 
 #define bprintf if(bin->verbose) R_LOG_WARN
 
 #define MAX_REL_RELA_SZ (sizeof (Elf_(Rel)) > sizeof (Elf_(Rela))? sizeof (Elf_(Rel)): sizeof (Elf_(Rela)))
 
 #define READ8(x, i) r_read_ble8((x) + (i)); (i) += 1
 #define READ16(x, i) r_read_ble16((x) + (i), bin->endian); (i) += 2
 #define READ32(x, i) r_read_ble32((x) + (i), bin->endian); (i) += 4
 #define READ64(x, i) r_read_ble64((x) + (i), bin->endian); (i) += 8
 
 #if R_BIN_ELF64
 #define READWORD(x, i) READ64 (x, i)
 #else
 #define READWORD(x, i) READ32 (x, i)
 #endif
 
 #define BREAD8(x, i) r_read_ble8(r_buf_get_at (x, (i), NULL)); (i) += 1
 #define BREAD16(x, i) r_read_ble16(r_buf_get_at (x, (i), NULL), bin->endian); (i) += 2
 #define BREAD32(x, i) r_read_ble32(r_buf_get_at (x, (i), NULL), bin->endian); (i) += 4
 #define BREAD64(x, i) r_read_ble64(r_buf_get_at (x, (i), NULL), bin->endian); (i) += 8
 
 #if R_BIN_ELF64
@@ -3863,33 +3863,36 @@ RList *Elf_(r_bin_elf_get_maps)(ELFOBJ *bin) {
 char *Elf_(r_bin_elf_compiler)(ELFOBJ *bin) {
 	RBinElfSection *section = get_section_by_name (bin, ".comment");
 	if (!section) {
 		return NULL;
 	}
 
 	ut64 off = section->offset;
-	ut64 sz = section->size;
+	int sz = section->size;
+	if (sz < 1) {
+		return NULL;
+	}
 	char *buf = malloc (sz + 1);
 	if (!buf) {
 		return NULL;
 	}
 	if (r_buf_read_at (bin->b, off, (ut8*)buf, sz) < 1) {
 		free (buf);
 		return NULL;
 	}
 
 	buf[sz] = 0;
 	char *ptr = buf;
 
 	do {
 		char *p = strchr (ptr, '\0');
 		size_t psz = (p - ptr);
 		ptr = p;
 		sz -= psz + 1;
 		if (sz > 1) {
 			*ptr = '/';
 			ptr++;
 		}
 	} while (sz > 0);
 
 	return buf;
 }
