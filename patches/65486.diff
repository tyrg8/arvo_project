commit 539e8f41a35fec30fba4cfb3a65ea4db67978f85
Author: Fredrik Roubert <roubert@google.com>
Date:   Wed Jan 3 21:05:14 2024 +0900

    ICU-22532 Compiler warning: conversion from 'double' to 'int32_t'.
    
    The definition of kOneDay is 1.0 * U_MILLIS_PER_DAY so there's no
    reason whatsoever to not just use U_MILLIS_PER_DAY directly here.

diff --git a/icu4c/source/i18n/calendar.cpp b/icu4c/source/i18n/calendar.cpp
index 8408cbfee88..bddd0663119 100644
--- a/icu4c/source/i18n/calendar.cpp
+++ b/icu4c/source/i18n/calendar.cpp
@@ -1420,114 +1420,114 @@ void Calendar::pinField(UCalendarDateFields field, UErrorCode& status) {
 void Calendar::computeFields(UErrorCode &ec)
 {
     if (U_FAILURE(ec)) {
         return;
     }
     // Compute local wall millis
     double localMillis = internalGetTime();
     int32_t rawOffset, dstOffset;
     getTimeZone().getOffset(localMillis, false, rawOffset, dstOffset, ec);
     if (U_FAILURE(ec)) {
         return;
     }
     localMillis += (rawOffset + dstOffset);
 
     // Mark fields as set.  Do this before calling handleComputeFields().
     uint32_t mask =   //fInternalSetMask;
         (1 << UCAL_ERA) |
         (1 << UCAL_YEAR) |
         (1 << UCAL_MONTH) |
         (1 << UCAL_DAY_OF_MONTH) | // = UCAL_DATE
         (1 << UCAL_DAY_OF_YEAR) |
         (1 << UCAL_EXTENDED_YEAR) |
         (1 << UCAL_ORDINAL_MONTH);
 
     for (int32_t i=0; i<UCAL_FIELD_COUNT; ++i) {
         if ((mask & 1) == 0) {
             fStamp[i] = kInternallySet;
             fIsSet[i] = true; // Remove later
         } else {
             fStamp[i] = kUnset;
             fIsSet[i] = false; // Remove later
         }
         mask >>= 1;
     }
 
     // We used to check for and correct extreme millis values (near
     // Long.MIN_VALUE or Long.MAX_VALUE) here.  Such values would cause
     // overflows from positive to negative (or vice versa) and had to
     // be manually tweaked.  We no longer need to do this because we
     // have limited the range of supported dates to those that have a
     // Julian day that fits into an int.  This allows us to implement a
     // JULIAN_DAY field and also removes some inelegant code. - Liu
     // 11/6/00
 
     int32_t millisInDay;
-    int32_t days = ClockMath::floorDivide(localMillis, kOneDay, &millisInDay);
+    int32_t days = ClockMath::floorDivide(localMillis, U_MILLIS_PER_DAY, &millisInDay);
 
     internalSet(UCAL_JULIAN_DAY,days + kEpochStartAsJulianDay);
 
 #if defined (U_DEBUG_CAL)
     //fprintf(stderr, "%s:%d- Hmm! Jules @ %d, as per %.0lf millis\n",
     //__FILE__, __LINE__, fFields[UCAL_JULIAN_DAY], localMillis);
 #endif
 
     computeGregorianAndDOWFields(fFields[UCAL_JULIAN_DAY], ec);
 
     // Call framework method to have subclass compute its fields.
     // These must include, at a minimum, MONTH, DAY_OF_MONTH,
     // EXTENDED_YEAR, YEAR, DAY_OF_YEAR.  This method will call internalSet(),
     // which will update stamp[].
     handleComputeFields(fFields[UCAL_JULIAN_DAY], ec);
 
     // Compute week-related fields, based on the subclass-computed
     // fields computed by handleComputeFields().
     computeWeekFields(ec);
 
     // Compute time-related fields.  These are independent of the date and
     // of the subclass algorithm.  They depend only on the local zone
     // wall milliseconds in day.
     if (U_FAILURE(ec)) {
         return;
     }
 
     fFields[UCAL_MILLISECONDS_IN_DAY] = millisInDay;
     U_ASSERT(getMinimum(UCAL_MILLISECONDS_IN_DAY) <=
              fFields[UCAL_MILLISECONDS_IN_DAY]);
     U_ASSERT(fFields[UCAL_MILLISECONDS_IN_DAY] <=
              getMaximum(UCAL_MILLISECONDS_IN_DAY));
 
     fFields[UCAL_MILLISECOND] = millisInDay % 1000;
     U_ASSERT(getMinimum(UCAL_MILLISECOND) <= fFields[UCAL_MILLISECOND]);
     U_ASSERT(fFields[UCAL_MILLISECOND] <= getMaximum(UCAL_MILLISECOND));
 
     millisInDay /= 1000;
     fFields[UCAL_SECOND] = millisInDay % 60;
     U_ASSERT(getMinimum(UCAL_SECOND) <= fFields[UCAL_SECOND]);
     U_ASSERT(fFields[UCAL_SECOND] <= getMaximum(UCAL_SECOND));
 
     millisInDay /= 60;
     fFields[UCAL_MINUTE] = millisInDay % 60;
     U_ASSERT(getMinimum(UCAL_MINUTE) <= fFields[UCAL_MINUTE]);
     U_ASSERT(fFields[UCAL_MINUTE] <= getMaximum(UCAL_MINUTE));
 
     millisInDay /= 60;
     fFields[UCAL_HOUR_OF_DAY] = millisInDay;
     U_ASSERT(getMinimum(UCAL_HOUR_OF_DAY) <= fFields[UCAL_HOUR_OF_DAY]);
     U_ASSERT(fFields[UCAL_HOUR_OF_DAY] <= getMaximum(UCAL_HOUR_OF_DAY));
 
     fFields[UCAL_AM_PM] = millisInDay / 12; // Assume AM == 0
     U_ASSERT(getMinimum(UCAL_AM_PM) <= fFields[UCAL_AM_PM]);
     U_ASSERT(fFields[UCAL_AM_PM] <= getMaximum(UCAL_AM_PM));
 
     fFields[UCAL_HOUR] = millisInDay % 12;
     U_ASSERT(getMinimum(UCAL_HOUR) <= fFields[UCAL_HOUR]);
     U_ASSERT(fFields[UCAL_HOUR] <= getMaximum(UCAL_HOUR));
 
     fFields[UCAL_ZONE_OFFSET] = rawOffset;
     U_ASSERT(getMinimum(UCAL_ZONE_OFFSET) <= fFields[UCAL_ZONE_OFFSET]);
     U_ASSERT(fFields[UCAL_ZONE_OFFSET] <= getMaximum(UCAL_ZONE_OFFSET));
 
     fFields[UCAL_DST_OFFSET] = dstOffset;
     U_ASSERT(getMinimum(UCAL_DST_OFFSET) <= fFields[UCAL_DST_OFFSET]);
     U_ASSERT(fFields[UCAL_DST_OFFSET] <= getMaximum(UCAL_DST_OFFSET));
 }
