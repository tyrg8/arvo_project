commit 74e920a40e0aea93f7cefca6e6bbff249d637b18
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Fri Jan 13 07:11:01 2023 +0100

    Use the correct buffer size when parsing cmap.
    
    pdf_parse_bf_range_array() lexes a hex string, converts it
    into binary and passes it to pdf_map_one_to_many().
    
    To handle fuzzed files commit a6b0a8273f2eb15fd5924501b6ad03e30f2c8d0a
    introduced a limit of the binary to 256 bytes. But instead of passing the
    (possibly limited) string length to pdf_map_one_to_many() it passed the
    unlimited length. This meant that when pdf_map_one_to_many() from commit
    6b0a8273f2eb15fd5924501b6ad03e30f2c8d0a started to handle surrogate pairs
    of more than two characters it might advance past the end of the string
    causing the reported issue.
    
    Fixes oss-fuzz issue 55051.

diff --git a/source/pdf/pdf-cmap-parse.c b/source/pdf/pdf-cmap-parse.c
index 07881da5a..d2cba367e 100644
--- a/source/pdf/pdf-cmap-parse.c
+++ b/source/pdf/pdf-cmap-parse.c
@@ -220,32 +220,32 @@ static void
 pdf_parse_bf_range_array(fz_context *ctx, pdf_cmap *cmap, fz_stream *file, pdf_lexbuf *buf, int lo, int hi)
 {
 	pdf_token tok;
 	int dst[256];
 
 	while (1)
 	{
 		tok = pdf_lex(ctx, file, buf);
 
 		if (tok == PDF_TOK_CLOSE_ARRAY)
 			return;
 
 		/* Note: does not handle [ /Name /Name ... ] */
 		else if (tok != PDF_TOK_STRING)
 		{
 			skip_to_token(ctx, file, buf, PDF_TOK_CLOSE_ARRAY, "expected string or ]");
 			return;
 		}
 
 		if (buf->len / 2)
 		{
 			size_t i;
 			size_t len = fz_minz(buf->len / 2, nelem(dst));
 			for (i = 0; i < len; i++)
 				dst[i] = pdf_code_from_string(&buf->scratch[i * 2], 2);
 
-			pdf_map_one_to_many(ctx, cmap, lo, dst, buf->len / 2);
+			pdf_map_one_to_many(ctx, cmap, lo, dst, i);
 		}
 
 		lo ++;
 	}
 }
