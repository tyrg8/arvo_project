commit 0aa99dcd70bce68f8efef310350a6294e1143382
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Mon Feb 10 19:01:42 2020 -0800

    Use GCC LTO wrapper to get real symbols from LTO IR objects
    
    GCC LTO wrapper is needed to extract real symbols from LTO IR objects.
    This patch does the following:
    
    1. Set up GCC LTO wrapper for each LTO IR object.
    2. Run GCC LTO wrapper to get the real object.
    3. Extract symbol info from the real object.
    4. Cleanup afterwards.
    
    bfd/
    
            PR binutils/25355
            * configure.ac (HAVE_EXECUTABLE_SUFFIX): New AC_DEFINE.
            (EXECUTABLE_SUFFIX): Likewise.
            * config.in: Regenerated.
            * configure: Likewise.
            * plugin.c (bfd_plugin_close_and_cleanup): Removed.
            (plugin_list_entry): Add all_symbols_read, cleanup_handler,
            gcc, lto_wrapper, resolution_file, resolution_option, gcc_env,
            real_bfd, real_nsyms, real_syms, lto_nsyms and lto_syms.
            (get_lto_wrapper): New.
            (setup_lto_wrapper_env): Likewise.
            (current_plugin): Likewise.
            (register_all_symbols_read): Likewise.
            (register_cleanup): Likewise.
            (get_symbols): Likewise.
            (add_input_file): Likewise.
            (bfd_plugin_close_and_cleanup): Likewise.
            (claim_file): Removed.
            (register_claim_file): Set current_plugin->claim_file.
            (add_symbols): Make a copy of LTO symbols.  Set lto_nsyms and
            lto_syms in current_plugin.
            (try_claim): Use current_plugin->claim_file.  Call LTO plugin
            all_symbols_read handler.  Copy real symbols to plugin_data.
            Call LTO plugin cleanup handler.  Clean up for LTO wrapper.
            (try_load_plugin): Don't reuse the previous plugin for LTO
            wrapper.  Set up GCC LTO wrapper if possible.  Don't set
            plugin_list_iter->claim_file.
            (bfd_plugin_canonicalize_symtab): Use real LTO symbols if
            possible.
            * plugin.h (plugin_data_struct): Add real_bfd, real_nsyms and
            real_syms.
    
    ld/
    
            PR binutils/25355
            * testsuite/ld-plugin/lto.exp: Run PR binutils/25355 test.
            * testsuite/ld-plugin/pr25355.c: New file.
            * testsuite/ld-plugin/pr25355.d: Likewise.
            * testsuite/lib/ld-lib.exp (run_cc_link_tests): Support compile
            only dump.

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index 083b21fbd97..fef8bc43004 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,502 +1,536 @@
+2020-02-10  H.J. Lu  <hongjiu.lu@intel.com>
+
+	PR binutils/25355
+	* configure.ac (HAVE_EXECUTABLE_SUFFIX): New AC_DEFINE.
+	(EXECUTABLE_SUFFIX): Likewise.
+	* config.in: Regenerated.
+	* configure: Likewise.
+	* plugin.c (bfd_plugin_close_and_cleanup): Removed.
+	(plugin_list_entry): Add all_symbols_read, cleanup_handler,
+	gcc, lto_wrapper, resolution_file, resolution_option, gcc_env,
+	real_bfd, real_nsyms, real_syms, lto_nsyms and lto_syms.
+	(get_lto_wrapper): New.
+	(setup_lto_wrapper_env): Likewise.
+	(current_plugin): Likewise.
+	(register_all_symbols_read): Likewise.
+	(register_cleanup): Likewise.
+	(get_symbols): Likewise.
+	(add_input_file): Likewise.
+	(bfd_plugin_close_and_cleanup): Likewise.
+	(claim_file): Removed.
+	(register_claim_file): Set current_plugin->claim_file.
+	(add_symbols): Make a copy of LTO symbols.  Set lto_nsyms and
+	lto_syms in current_plugin.
+	(try_claim): Use current_plugin->claim_file.  Call LTO plugin
+	all_symbols_read handler.  Copy real symbols to plugin_data.
+	Call LTO plugin cleanup handler.  Clean up for LTO wrapper.
+	(try_load_plugin): Don't reuse the previous plugin for LTO
+	wrapper.  Set up GCC LTO wrapper if possible.  Don't set
+	plugin_list_iter->claim_file.
+	(bfd_plugin_canonicalize_symtab): Use real LTO symbols if
+	possible.
+	* plugin.h (plugin_data_struct): Add real_bfd, real_nsyms and
+	real_syms.
+
 2020-02-10  Jozef Lawrynowicz  <jozef.l@mittosystems.com>
 
 	* elf32-msp430.c (msp430_elf_relax_section): Before relaxing a branch,
 	check if previous instruction matches a conditional jump inserted
 	earlier. Invert conditional jump and delete branch in this case.
 
 2020-02-10  Jozef Lawrynowicz  <jozef.l@mittosystems.com>
 
 	* elf32-msp430.c (msp430_elf_relax_add_two_words): Rename to
 	msp430_elf_relax_add_words. Support insertion of either one or two
 	words.
 	(msp430_elf_relax_section): Catch opcode of 0x3c00 when relocation
 	needs to be grown. Handle insertion of branch instruction to replace
 	jump.
 
 2020-02-10  Jozef Lawrynowicz  <jozef.l@mittosystems.com>
 
 	* elf32-msp430.c (msp430_final_link_relocate): Add printf statements for
 	debugging relocations.
 	(msp430_elf_relax_delete_bytes): Likewise.
 	(msp430_elf_relax_add_two_words): Likewise.
 	(msp430_elf_relax_section): Likewise.
 
 2020-02-10  Alan Modra  <amodra@gmail.com>
 
 	* archures.c: Wrap overlong z80 comments.
 	* bfd-in2.h: Regenerate.
 
 2020-02-07  Sergey Belyashov  <sergey.belyashov@gmail.com>
 
 	PR 25469
 	* archures.c: Add GBZ80 and Z80N machine values.
 	* reloc.c: Add BFD_RELOC_Z80_16_BE.
 	* coff-z80.c: Add support for new reloc.
 	* coffcode.h: Add support for new machine values.
 	* cpu-z80.c: Add support for new machine names.
 	* elf32-z80.c: Add support for new reloc.
 	* bfd-in2.h: Regenerate.
 	* libbfd.h: Regenerate.
 
 2020-02-07  Nick Clifton  <nickc@redhat.com>
 
 	PR 23932
 	* elf.c (rewrite_elf_program_header): Do not complain if no
 	sections are mapped to a segment.
 
 2020-02-06  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR ld/25490
 	* elflink.c (_bfd_elf_gc_mark_extra_sections): Issue an error
 	for garbage collection on __patchable_function_entries section
 	without linked-to section.
 
 2020-02-06  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR gas/25381
 	* bfd-in2.h: Regenerated.
 	* elflink.c (_bfd_elf_gc_mark_extra_sections): Call mark_hook
 	on section if gc_mark of any of its linked-to sections is set
 	and don't set gc_mark again.
 	* section.c (asection): Add linked_to_symbol_name to map_head
 	union.
 
 2020-02-06  Maciej W. Rozycki  <macro@wdc.com>
 
 	* elf32-v850.c (v850_elf_relax_section): Fix the index used for
 	reporting an unrecognized instruction with R_V850_LONGJUMP.
 
 2020-02-05  Alan Modra  <amodra@gmail.com>
 
 	* elf64-ppc.c (ppc_stub_plt_branch): Match comment with reality.
 
 2020-02-04  Alan Modra  <amodra@gmail.com>
 
 	* elf32-ppc.c (ppc_elf_relocate_section): After applying
 	R_PPC_VLE_ADDR20, goto copy_reloc.
 
 2020-02-02  H.J. Lu  <hongjiu.lu@intel.com>
 
 	* bfd-in2.h: Regenerated.
 	* section.c (SEC_ASSEMBLER_SECTION_ID): Fix a typo in comments.
 
 2020-02-02  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR gas/25380
 	* bfd-in2.h: Regenerated.
 	* ecoff.c (bfd_debug_section): Add section_id.
 	* section.c (bfd_section): Add section_id.
 	(SEC_ASSEMBLER_SECTION_ID): New.
 	(BFD_FAKE_SECTION): Add section_id.
 
 2020-02-01  Nick Clifton  <nickc@redhat.com>
 
 	* config.bfd: Move the c30-aout and tic30-aout targets onto the
 	obsolete list.
 
 2020-01-31  Sandra Loosemore  <sandra@codesourcery.com>
 
 	* elf-eh-frame.c (_bfd_elf_write_section_eh_frame): DW_EH_PE_datarel
 	encodings are relative to the GOT on nios2, too.
 
 2020-01-31  Alan Modra  <amodra@gmail.com>
 
 	* Makefile.am (elf32-target.h, elf64-target.h): Don't use a temp
 	file.  Use $< and $@ in rules.
 	(elf32-aarch64.c, elf64-aarch64.c): Likewise.
 	(elf32-ia64.c, elf64-ia64.c): Likewise.
 	(elf32-riscv.c, elf64-riscv.c): Likewise.
 	(peigen.c, pepigen.c, pex64igen.c): Likewise.
 	(elf32-aarch64.c, elf64-aarch64.c): Don't emit $srcdir on #line.
 	(elf32-riscv.c, elf64-riscv.c): Likewise, and use $(SED).
 	(elf32-ia64.c, elf64-ia64.c): Do emit #line.
 	(peigen.c, pepigen.c, pex64igen.c): Likewise.
 	* Makefile.in: Regenerate.
 
 2020-01-31  Alan Modra  <amodra@gmail.com>
 
 	PR 4110
 	* elf.c (setup_group): Don't clear entire section contents,
 	just the padding after group flags.  Release alloc'd memory
 	after a seek or read failure.
 
 2020-01-16  Jon Turney  <jon.turney@dronecode.org.uk>
 
 	* peXXigen.c (pe_is_repro): New function.
 	(_bfd_XX_print_private_bfd_data_common): Note timestamp is
 	actually a build hash if PE_IMAGE_DEBUG_TYPE_REPRO is present.
 
 2020-01-16  Jon Turney  <jon.turney@dronecode.org.uk>
 
 	* peXXigen.c (debug_type_names): Add names for new debug data type
 	values.
 
 2020-01-16  Jon Turney  <jon.turney@dronecode.org.uk>
 
 	* peXXigen.c (pe_print_debugdata): Fix the iteration variable for
 	inner loop.  Fix a memory leak.
 
 2020-01-30  Alan Modra  <amodra@gmail.com>
 
 	* coffgen.c (coff_real_object_p): Don't clear obj_coff_keep_syms
 	or obj_coff_keep_strings here.
 	(coff_get_normalized_symtab): Free external syms directly.
 	* xcofflink.c (xcoff_link_input_bfd): Restore obj_coff_keep_syms
 	on error exit path.
 
 2020-01-27  Jim Wilson  <jimw@sifive.com>
 
 	* cpu-riscv.c (riscv_scan): New.
 	(N): Change bfd_default_scan to riscv_scan.
 
 2020-01-27  Andreas Schwab  <schwab@suse.de>
 
 	* Makefile.am (ALL_MACHINES): Remove cpu-plugin.lo.
 	(ALL_MACHINES_CFILES): Remove cpu-plugin.c.
 	* Makefile.in: Regenerate.
 	* cpu-plugin.c: Remove.
 	* archures.c (enum bfd_architecture): Remove bfd_arch_plugin.
 	(bfd_plugin_arch): Remove declaration.
 	* bfd-in2.h: Regenerate.
 	* po/SRC-POTFILES.in: Regenerate.
 
 2020-01-27  H.J. Lu  <hongjiu.lu@intel.com>
 	    Alan Modra  <amodra@gmail.com>
 
 	PR ld/25458
 	* elflink.c (_bfd_elf_gc_mark_rsec): Mark all weak aliases.
 
 2020-01-24  Jim Wilson  <jimw@sifive.com>
 
 	* elfxx-riscv.c (riscv_get_prefix_class): Format s case like others.
 	(riscv_parse_prefixed_ext): Fix s extension comment and reword to
 	avoid over long line.
 
 2020-01-24  Nick Clifton  <nickc@redhat.com>
 
 	PR 25447
 	* coffgen.c (_bfd_coff_close_and_cleanup): Do not clear the keep
 	syms and keep strings flags as these may have been set in order to
 	prevent a bogus call to free.
 
 2020-01-23  Nick Clifton  <nickc@redhat.com>
 
 	* po/fr.po: Updated French translation.
 
 2020-01-23  Alan Modra  <amodra@gmail.com>
 
 	PR 25444
 	* elf.c (assign_file_positions_for_load_sections): Avoid divide
 	by zero when p_align is zero.
 
 2020-01-22  Maxim Blinov  <maxim.blinov@embecosm.com>
 
 	* bfd/elfnn-riscv.c (riscv_skip_prefix): New.
 	(riscv_prefix_cmp): Likewise.
 	(riscv_non_std_ext_p): Deleted.
 	(riscv_std_sv_ext_p): Likewise.
 	(riscv_non_std_sv_ext_p): Likewise.
 	(riscv_merge_non_std_and_sv_ext): Rename to...
 	(riscv_merge_multi_letter_ext): and modified to use riscv_prefix_cmp.
 	(riscv_merge_arch_attr_info): Replace 3 calls to
 	riscv_merge_non_std_and_sv_ext with single call to
 	riscv_merge_multi_letter_ext.
 	* bfd/elfxx-riscv.c (riscv_parse_std_ext): Break if we
 	encounter a 'z' prefix.
 	(riscv_get_prefix_class): New function, return prefix class based
 	on first few characters of input string.
 	(riscv_parse_config): New structure to factor out minor differences
 	in extension class parsing behaviour.
 	(riscv_parse_sv_or_non_std_ext): Rename to...
 	(riscv_parse_prefixed_ext): and parameterise with
 	riscv_parse_config.
 	(riscv_std_z_ext_strtab, riscv_std_s_ext_strtab): New.
 	(riscv_multi_letter_ext_valid_p): New.
 	(riscv_ext_x_valid_p, riscv_ext_z_valid_p, riscv_ext_s_valid_p): New.
 	(riscv_parse_subset): Delegate all non-single-letter parsing work
 	to riscv_parse_prefixed_ext.
 	* bfd/elfxx-riscv.h (riscv_isa_ext_class): New type.
 	(riscv_get_prefix_class): Declare.
 
 2020-01-22  Alan Modra  <amodra@gmail.com>
 
 	* elf64-ppc.c (struct ppc_link_hash_table): Add tga_group.
 	(ppc64_elf_archive_symbol_lookup): Extract __tls_get_addr_opt for
 	__tls_get_addr_desc.
 	(ppc64_elf_size_stubs): Add section for linker generated
 	__tls_get_addr_desc wrapper function.  Loop at least once if
 	generating this function.
 	(emit_tga_desc, emit_tga_desc_eh_frame): New functions.
 	(ppc64_elf_build_stubs): Generate __tls_get_addr_desc.
 
 2020-01-22  Alan Modra  <amodra@gmail.com>
 
 	* elf64-ppc.h (struct ppc64_elf_params): Add no_tls_get_addr_regsave.
 	* elf64-ppc.c (struct ppc_link_hash_table): Add tga_desc and
 	tga_desc_fd.
 	(is_tls_get_addr): Match tga_desc and tga_desc_df too.
 	(STDU_R1_0R1, ADDI_R1_R1): Define.
 	(tls_get_addr_prologue, tls_get_addr_epilogue): New functions.
 	(ppc64_elf_tls_setup): Set up tga_desc and tga_desc_fd.  Indirect
 	tga_desc_fd to opt_fd, and tga_desc to opt.  Set
 	no_tls_get_addr_regsave.
 	(branch_reloc_hash_match): Add hash3 and hash4.
 	(ppc64_elf_tls_optimize): Handle tga_desc_fd and tga_desc too.
 	(ppc64_elf_size_dynamic_sections): Likewise.
 	(ppc64_elf_relocate_section): Likewise.
 	(plt_stub_size, build_plt_stub): Likewise.  Size regsave
 	__tls_get_addr stub.
 	(build_tls_get_addr_stub): Build regsave __tls_get_addr stub and
 	eh_frame.
 	(ppc_size_one_stub): Handle tga_desc_fd and tga_desc too.  Size
 	eh_frame for regsave __tls_get_addr.
 
 2020-01-22  Alan Modra  <amodra@gmail.com>
 
 	* elf64-ppc.c (ppc64_elf_size_stubs): Correct condition under
 	which __tls_get_addr calls will be eliminated.
 
 2020-01-20  Nick Clifton  <nickc@redhat.com>
 
 	* po/pt.po: Updates Portuguese translation.
 	* po/ru.po: Updated Russian translation.
 	* po/uk.po: Updated Ukranian translation.
 
 2020-01-20  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR ld/25416
 	* elf64-x86-64.c (elf_x86_64_check_tls_transition): Support
 	"rex leal x@tlsdesc(%rip), %reg" and "call *x@tlsdesc(%eax)" in
 	X32 mode.
 	(elf_x86_64_relocate_section): In x32 mode, for GDesc -> LE
 	transition, relax "rex leal x@tlsdesc(%rip), %reg" to
 	"rex movl $x@tpoff, %reg", for GDesc -> IE transition, relax
 	"rex leal x@tlsdesc(%rip), %reg" to
 	"rex movl x@gottpoff(%rip), %eax".  For both transitions, relax
 	"call *(%eax)" to "nopl (%rax)".
 
 2020-01-20  Alan Modra  <amodra@gmail.com>
 
 	* elf64-ppc.c (LD_R11_0R3, CMPDI_R11_0, STD_R11_0R1, LD_R11_0R1),
 	(MTLR_R11): Don't define.
 	(LD_R0_0R3, CMPDI_R0_0): Define.
 	(build_tls_get_addr_stub): Don't use r11 in stub.
 
 2020-01-20  Alan Modra  <amodra@gmail.com>
 
 	* elf64-ppc.c (ppc_elf_hash_entry): New function, use throughout file.
 	(defined_sym_val, is_tls_get_addr): Likewise.
 
 2020-01-18  Nick Clifton  <nickc@redhat.com>
 
 	* version.m4 (BFD_VERSION): Set to 2.34.50.
 	* configure: Regenerate.
 	* po/bfd.pot: Regenerate.
 
 2020-01-18  Nick Clifton  <nickc@redhat.com>
 
 	Binutils 2.34 branch created.
 
 2020-01-17  Christian Biesinger  <cbiesinger@google.com>
 
 	* coff-arm.c: Fix spelling error (seperate).
 	* elfxx-riscv.c (riscv_parse_sv_or_non_std_ext): Fix spelling
 	error (seperate).
 	* sysdep.h (strnlen): Fix spelling error (seperate).
 
 2020-01-15  Lars Brinkhoff  <lars@nocrew.org>
 
 	PR 20694
 	* pdp11.c (TARGET_PAGE_SIZE): Set to 8192.
 
 2020-01-15  Alan Modra  <amodra@gmail.com>
 
 	PR 25384
 	* elf64-ppc.c (ELIMINATE_COPY_RELOCS): Update comment.
 	(ppc64_elf_adjust_dynamic_symbol): Don't allow .dynbss copies
 	of function symbols unless dot symbols are present.  Do warn
 	whenever one is created, regardles of whether a PLT entry is
 	also emitted for the function symbol.
 
 2020-01-14  Alan Modra  <amodra@gmail.com>
 
 	* som.c (som_bfd_count_ar_symbols): Error when file position
 	of symbols on chains is not strictly increasing.
 
 2020-01-14  Alan Modra  <amodra@gmail.com>
 
 	* vms.h (VMS_DEBUG): Define as 0.
 	* vms-alpha.c (image_write): Move debug output after bounds check.
 	Tidy bounds check.
 	(_bfd_vms_slurp_eihd): Warning fix.
 	(_bfd_vms_slurp_etir): Init variables to avoid bogus warnings.
 
 2020-01-13  Alan Modra  <amodra@gmail.com>
 
 	* vms-alpha.c (_bfd_vms_slurp_egsd): Ensure minimum size even
 	for "ignored" records.
 
 2020-01-13  Alan Modra  <amodra@gmail.com>
 
 	* wasm-module.c (wasm_scan_name_function_section): Formatting.
 	Delete asect name check.  Move asect NULL check to wasm_object_p.
 	Correct bounds check of sizes against end.  Replace uses of
 	bfd_zalloc with bfd_alloc, zeroing only necessary bytes.  Use
 	just one bfd_release.
 	(wasm_scan): Don't use malloc/strdup for section names,
 	bfd_alloc instead.  Simplify code prefixing section name.
 	Formatting.  Don't attempt to free memory here..
 	(wasm_object_p): ..do so here.
 
 2020-01-10  Szabolcs Nagy  <szabolcs.nagy@arm.com>
 
 	PR ld/22269
 	* elf32-arm.c (elf32_arm_final_link_relocate): Use
 	UNDEFWEAK_NO_DYNAMIC_RELOC.
 	(allocate_dynrelocs_for_symbol): Likewise.
 
 2020-01-10  Tamar Christina  <tamar.christina@arm.com>
 
 	PR 25210
 	* elfnn-aarch64.c (_bfd_aarch64_create_stub_section): Remove elfclass.
 
 2020-01-10  Alan Modra  <amodra@gmail.com>
 
 	* coff-alpha.c (alpha_ecoff_object_p): Calculate size in bfd_size_type.
 
 2020-01-09  Nick Clifton  <nickc@redhat.com>
 
 	PR 25221
 	* bfd.c (bfd_convert_section_contents): Check for a compress
 	header size that is larger than the actual section size.
 
 2020-01-08  Alan Modra  <amodra@gmail.com>
 
 	PR 25351
 	* elflink.c (bfd_elf_final_link): Call _bfd_fix_excluded_sec_syms
 	after removing sections.
 
 2020-01-06  Jim Wilson  <jimw@sifive.com>
 
 	PR 25205
 	* elfnn-riscv.c (riscv_elf_relocate_section) <R_RISCV_CALL>: Add
 	check for !bfd_link_pic (info).
 	<R_RISCV_CALL_PLT>: Move next to R_RISCV_CALL.
 	<R_RISCV_JAL>: Add comment.
 	(_bfd_riscv_relax_section): For plt.offset check, add check for
 	bfd_link_pic (info).  Add comment.
 
 2020-01-06  Alan Modra  <amodra@gmail.com>
 
 	* format.c (bfd_check_format_matches): Ignore bfd_error on target
 	match failures.  Don't init to bfd_error_wrong_format before
 	calling _bfd_check_format.
 
 2020-01-06  Alan Modra  <amodra@gmail.com>
 
 	* vms-alpha.c (_bfd_vms_push, _bfd_vms_pop): Return pass/fail
 	status rather than exiting on stack overflow or underflow.
 	(_bfd_vms_slurp_etir): Adjust to suit.
 
 2020-01-06  Alan Modra  <amodra@gmail.com>
 
 	* som.c (som_bfd_fill_in_ar_symbols): Bounds check som_dict index.
 
 2020-01-06  Alan Modra  <amodra@gmail.com>
 
 	* mach-o.c (bfd_mach_o_read_dylinker): Don't read past end of
 	command.  Check name offset is within command.
 	(bfd_mach_o_read_dylib, bfd_mach_o_read_prebound_dylib),
 	(bfd_mach_o_read_prebind_cksum, bfd_mach_o_read_twolevel_hints),
 	(bfd_mach_o_read_fvmlib, bfd_mach_o_read_dysymtab),
 	(bfd_mach_o_read_symtab, bfd_mach_o_read_uuid),
 	(bfd_mach_o_read_linkedit, bfd_mach_o_read_str),
 	(bfd_mach_o_read_dyld_info, bfd_mach_o_read_version_min),
 	(bfd_mach_o_read_encryption_info, bfd_mach_o_read_source_version),
 	(bfd_mach_o_read_encryption_info_64, bfd_mach_o_read_main),
 	(bfd_mach_o_read_note, bfd_mach_o_read_build_version),
 	(bfd_mach_o_read_segment): Similarly.
 	(bfd_mach_o_read_thread): Properly bound check thread struct.
 	Don't repeat checks on second loop.
 	(bfd_mach_o_read_command): Fail on invalid command length.
 
 2020-01-04  Alan Modra  <amodra@gmail.com>
 
 	* format.c (bfd_check_format_matches): Add preserve_match.
 	Save initial bfd state in "preserve", matched bfd state in
 	"preserve_match".  Save just the first match.  Release
 	bfd_alloc memory.  Restore and finish preserved state as
 	appropriate on all function exit paths.
 
 2020-01-04  Alan Modra  <amodra@gmail.com>
 
 	* mmo.c (mmo_mkobject): Allocate tdata with bfd_zalloc.
 
 2020-01-04  Alan Modra  <amodra@gmail.com>
 
 	* coffgen.c (coff_real_object_p): Free malloc'd memory on target
 	match too.
 
 2020-01-03  Nick Clifton  <nickc@redhat.com>
 
 	PR 25307
 	(bfd_pef_parse_function_stubs): Correct the test that ensures that
 	there is enough data remaining in the code buffer before
 	attempting to read a function stub.
 
 2020-01-03  Nick Clifton  <nickc@redhat.com>
 
 	PR 25308
 	* elf-properties.c (_bfd_elf_convert_gnu_properties): Check the
 	return value from bfd_malloc.
 	* elf32-arm.c (bfd_elf32_arm_vfp11_fix_veneer_locations): Likewise.
 	(bfd_elf32_arm_stm32l4xx_fix_veneer_locations): Likewise.
 	(elf32_arm_filter_cmse_symbols): Likewise.
 	(elf32_arm_write_section): Likewise.
 	* mach-o.c (bfd_mach_o_core_fetch_environment): Likewise.
 	(bfd_mach_o_follow_dsym): Likewise.
 	* pef.c (bfd_pef_print_loader_section): Likewise.
 	(bfd_pef_scan_start_address): Likewise.
 	(bfd_pef_parse_function_stubs): Likewise.
 	(bfd_pef_parse_symbols): Likewise.
 
 2020-01-03  Sergei Trofimovich  <siarheit@google.com>
 
         * elfnn-ia64.c (elfNN_ia64_merge_private_bfd_data): don't fail
         on binary inputs ld/PR25316.
         (is_ia64_elf): new helper to filter on ia64 objects.
 
 2020-01-03  Jan Beulich  <jbeulich@suse.com>
 
 	* mach-o.c (cpusubtype, bfd_mach_o_header_p): Insert underscore
 	in parameter names.
 	(bfd_mach_o_scan): Insert underscore in two variable names.
 
 2020-01-02  Sergey Belyashov  <sergey.belyashov@gmail.com>
 
 	* Makefile.am: Add z80-elf target support.
 	* configure.ac: Likewise.
 	* targets.c: Likewise.
 	* Makefile.in: Regenerate.
 	* configure: Regenerate.
 	* config.bfd: Add z80-elf target support and new arches: ez80 and
 	z180.
 	* elf32-z80.c: New file.
 	* archures.c: Add new z80 architectures: eZ80 and Z180.
 	* coffcode.h: Likewise.
 	* cpu-z80.c: Likewise.
 	* coff-z80.c: Add new relocations for Z80 target and local label
 	check.
 	* reloc.c: Add new relocs.
 	* bfd-in2.h: Regenerate.
 	* libbfd.h: Regenerate.
 
 2020-01-02  Tamar Christina  <tamar.christina@arm.com>
 
 	PR 25210
 	PR 24753
 	* elfnn-aarch64.c (_bfd_aarch64_create_stub_section): Set ELF class.
 
 2020-01-01  Alan Modra  <amodra@gmail.com>
 
 	Update year range in copyright notice of all files.
diff --git a/bfd/config.in b/bfd/config.in
index be572969fc0..e1dc0f0c445 100644
--- a/bfd/config.in
+++ b/bfd/config.in
@@ -1,418 +1,424 @@
 /* config.in.  Generated from configure.ac by autoheader.  */
 
 /* Check that config.h is #included before system headers
     (this works only for glibc, but that should be enough).  */
 #if defined(__GLIBC__) && !defined(__FreeBSD_kernel__) && !defined(__CONFIG_H__)
 #  error config.h must be #included before system headers
 #endif
 #define __CONFIG_H__ 1
 
 /* Name of host specific core header file to include in elf.c. */
 #undef CORE_HEADER
 
 /* Define to 1 if you want to enable -z separate-code in ELF linker by
    default. */
 #undef DEFAULT_LD_Z_SEPARATE_CODE
 
 /* Define to 1 if translation of program messages to the user's native
    language is requested. */
 #undef ENABLE_NLS
 
+/* Suffix used for executables, if any. */
+#undef EXECUTABLE_SUFFIX
+
 /* Define to 1 if you have the <alloca.h> header file. */
 #undef HAVE_ALLOCA_H
 
 /* Define to 1 if you have the declaration of `asprintf', and to 0 if you
    don't. */
 #undef HAVE_DECL_ASPRINTF
 
 /* Define to 1 if you have the declaration of `basename', and to 0 if you
    don't. */
 #undef HAVE_DECL_BASENAME
 
 /* Define to 1 if you have the declaration of `ffs', and to 0 if you don't. */
 #undef HAVE_DECL_FFS
 
 /* Define to 1 if you have the declaration of `free', and to 0 if you don't.
    */
 #undef HAVE_DECL_FREE
 
 /* Define to 1 if you have the declaration of `fseeko', and to 0 if you don't.
    */
 #undef HAVE_DECL_FSEEKO
 
 /* Define to 1 if you have the declaration of `fseeko64', and to 0 if you
    don't. */
 #undef HAVE_DECL_FSEEKO64
 
 /* Define to 1 if you have the declaration of `ftello', and to 0 if you don't.
    */
 #undef HAVE_DECL_FTELLO
 
 /* Define to 1 if you have the declaration of `ftello64', and to 0 if you
    don't. */
 #undef HAVE_DECL_FTELLO64
 
 /* Define to 1 if you have the declaration of `getenv', and to 0 if you don't.
    */
 #undef HAVE_DECL_GETENV
 
 /* Define to 1 if you have the declaration of `malloc', and to 0 if you don't.
    */
 #undef HAVE_DECL_MALLOC
 
 /* Define to 1 if you have the declaration of `realloc', and to 0 if you
    don't. */
 #undef HAVE_DECL_REALLOC
 
 /* Define to 1 if you have the declaration of `snprintf', and to 0 if you
    don't. */
 #undef HAVE_DECL_SNPRINTF
 
 /* Define to 1 if you have the declaration of `stpcpy', and to 0 if you don't.
    */
 #undef HAVE_DECL_STPCPY
 
 /* Define to 1 if you have the declaration of `strnlen', and to 0 if you
    don't. */
 #undef HAVE_DECL_STRNLEN
 
 /* Define to 1 if you have the declaration of `strstr', and to 0 if you don't.
    */
 #undef HAVE_DECL_STRSTR
 
 /* Define to 1 if you have the declaration of `vasprintf', and to 0 if you
    don't. */
 #undef HAVE_DECL_VASPRINTF
 
 /* Define to 1 if you have the declaration of `vsnprintf', and to 0 if you
    don't. */
 #undef HAVE_DECL_VSNPRINTF
 
 /* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'.
    */
 #undef HAVE_DIRENT_H
 
 /* Define to 1 if you have the <dlfcn.h> header file. */
 #undef HAVE_DLFCN_H
 
+/* Does the platform use an executable suffix? */
+#undef HAVE_EXECUTABLE_SUFFIX
+
 /* Define to 1 if you have the `fcntl' function. */
 #undef HAVE_FCNTL
 
 /* Define to 1 if you have the <fcntl.h> header file. */
 #undef HAVE_FCNTL_H
 
 /* Define to 1 if you have the `fdopen' function. */
 #undef HAVE_FDOPEN
 
 /* Define to 1 if you have the `fileno' function. */
 #undef HAVE_FILENO
 
 /* Define to 1 if you have the `fls' function. */
 #undef HAVE_FLS
 
 /* Define to 1 if you have the `fopen64' function. */
 #undef HAVE_FOPEN64
 
 /* Define to 1 if you have the `fseeko' function. */
 #undef HAVE_FSEEKO
 
 /* Define to 1 if you have the `fseeko64' function. */
 #undef HAVE_FSEEKO64
 
 /* Define to 1 if you have the `ftello' function. */
 #undef HAVE_FTELLO
 
 /* Define to 1 if you have the `ftello64' function. */
 #undef HAVE_FTELLO64
 
 /* Define to 1 if you have the `getgid' function. */
 #undef HAVE_GETGID
 
 /* Define to 1 if you have the `getpagesize' function. */
 #undef HAVE_GETPAGESIZE
 
 /* Define to 1 if you have the `getrlimit' function. */
 #undef HAVE_GETRLIMIT
 
 /* Define to 1 if you have the `getuid' function. */
 #undef HAVE_GETUID
 
 /* Define if your compiler supports hidden visibility. */
 #undef HAVE_HIDDEN
 
 /* Define to 1 if you have the <inttypes.h> header file. */
 #undef HAVE_INTTYPES_H
 
 /* Define to 1 if the system has the type `long double'. */
 #undef HAVE_LONG_DOUBLE
 
 /* Define to 1 if the system has the type `long long'. */
 #undef HAVE_LONG_LONG
 
 /* Define if <sys/procfs.h> has lwpstatus_t. */
 #undef HAVE_LWPSTATUS_T
 
 /* Define if <sys/procfs.h> has lwpstatus_t.pr_context. */
 #undef HAVE_LWPSTATUS_T_PR_CONTEXT
 
 /* Define if <sys/procfs.h> has lwpstatus_t.pr_fpreg. */
 #undef HAVE_LWPSTATUS_T_PR_FPREG
 
 /* Define if <sys/procfs.h> has lwpstatus_t.pr_reg. */
 #undef HAVE_LWPSTATUS_T_PR_REG
 
 /* Define if <sys/procfs.h> has lwpxstatus_t. */
 #undef HAVE_LWPXSTATUS_T
 
 /* Define to 1 if you have the `madvise' function. */
 #undef HAVE_MADVISE
 
 /* Define to 1 if you have the <memory.h> header file. */
 #undef HAVE_MEMORY_H
 
 /* Define to 1 if you have a working `mmap' system call. */
 #undef HAVE_MMAP
 
 /* Define to 1 if you have the `mprotect' function. */
 #undef HAVE_MPROTECT
 
 /* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */
 #undef HAVE_NDIR_H
 
 /* Define if <sys/procfs.h> has prpsinfo32_t. */
 #undef HAVE_PRPSINFO32_T
 
 /* Define if <sys/procfs.h> has prpsinfo32_t.pr_pid. */
 #undef HAVE_PRPSINFO32_T_PR_PID
 
 /* Define if <sys/procfs.h> has prpsinfo_t. */
 #undef HAVE_PRPSINFO_T
 
 /* Define if <sys/procfs.h> has prpsinfo_t.pr_pid. */
 #undef HAVE_PRPSINFO_T_PR_PID
 
 /* Define if <sys/procfs.h> has prstatus32_t. */
 #undef HAVE_PRSTATUS32_T
 
 /* Define if <sys/procfs.h> has prstatus32_t.pr_who. */
 #undef HAVE_PRSTATUS32_T_PR_WHO
 
 /* Define if <sys/procfs.h> has prstatus_t. */
 #undef HAVE_PRSTATUS_T
 
 /* Define if <sys/procfs.h> has prstatus_t.pr_who. */
 #undef HAVE_PRSTATUS_T_PR_WHO
 
 /* Define if <sys/procfs.h> has psinfo32_t. */
 #undef HAVE_PSINFO32_T
 
 /* Define if <sys/procfs.h> has psinfo32_t.pr_pid. */
 #undef HAVE_PSINFO32_T_PR_PID
 
 /* Define if <sys/procfs.h> has psinfo_t. */
 #undef HAVE_PSINFO_T
 
 /* Define if <sys/procfs.h> has psinfo_t.pr_pid. */
 #undef HAVE_PSINFO_T_PR_PID
 
 /* Define if <sys/procfs.h> has pstatus32_t. */
 #undef HAVE_PSTATUS32_T
 
 /* Define if <sys/procfs.h> has pstatus_t. */
 #undef HAVE_PSTATUS_T
 
 /* Define if <sys/procfs.h> has pxstatus_t. */
 #undef HAVE_PXSTATUS_T
 
 /* Define to 1 if you have the `setitimer' function. */
 #undef HAVE_SETITIMER
 
 /* Define to 1 if you have the <stddef.h> header file. */
 #undef HAVE_STDDEF_H
 
 /* Define to 1 if you have the <stdint.h> header file. */
 #undef HAVE_STDINT_H
 
 /* Define to 1 if you have the <stdlib.h> header file. */
 #undef HAVE_STDLIB_H
 
 /* Define to 1 if you have the <strings.h> header file. */
 #undef HAVE_STRINGS_H
 
 /* Define to 1 if you have the <string.h> header file. */
 #undef HAVE_STRING_H
 
 /* Define to 1 if you have the `strtoull' function. */
 #undef HAVE_STRTOULL
 
 /* Define if struct core_dumpx has member c_impl */
 #undef HAVE_ST_C_IMPL
 
 /* Define to 1 if you have the `sysconf' function. */
 #undef HAVE_SYSCONF
 
 /* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.
    */
 #undef HAVE_SYS_DIR_H
 
 /* Define to 1 if you have the <sys/file.h> header file. */
 #undef HAVE_SYS_FILE_H
 
 /* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.
    */
 #undef HAVE_SYS_NDIR_H
 
 /* Define to 1 if you have the <sys/param.h> header file. */
 #undef HAVE_SYS_PARAM_H
 
 /* Define to 1 if you have the <sys/procfs.h> header file. */
 #undef HAVE_SYS_PROCFS_H
 
 /* Define to 1 if you have the <sys/resource.h> header file. */
 #undef HAVE_SYS_RESOURCE_H
 
 /* Define to 1 if you have the <sys/stat.h> header file. */
 #undef HAVE_SYS_STAT_H
 
 /* Define to 1 if you have the <sys/time.h> header file. */
 #undef HAVE_SYS_TIME_H
 
 /* Define to 1 if you have the <sys/types.h> header file. */
 #undef HAVE_SYS_TYPES_H
 
 /* Define to 1 if you have the <time.h> header file. */
 #undef HAVE_TIME_H
 
 /* Define to 1 if you have the <unistd.h> header file. */
 #undef HAVE_UNISTD_H
 
 /* Define to 1 if you have the <wchar.h> header file. */
 #undef HAVE_WCHAR_H
 
 /* Define to 1 if you have the <wctype.h> header file. */
 #undef HAVE_WCTYPE_H
 
 /* Define if <sys/procfs.h> has win32_pstatus_t. */
 #undef HAVE_WIN32_PSTATUS_T
 
 /* Define to 1 if you have the <windows.h> header file. */
 #undef HAVE_WINDOWS_H
 
 /* Define to the sub-directory in which libtool stores uninstalled libraries.
    */
 #undef LT_OBJDIR
 
 /* Name of package */
 #undef PACKAGE
 
 /* Define to the address where bug reports for this package should be sent. */
 #undef PACKAGE_BUGREPORT
 
 /* Define to the full name of this package. */
 #undef PACKAGE_NAME
 
 /* Define to the full name and version of this package. */
 #undef PACKAGE_STRING
 
 /* Define to the one symbol short name of this package. */
 #undef PACKAGE_TARNAME
 
 /* Define to the home page for this package. */
 #undef PACKAGE_URL
 
 /* Define to the version of this package. */
 #undef PACKAGE_VERSION
 
 /* The size of `char', as computed by sizeof. */
 #undef SIZEOF_CHAR
 
 /* The size of `int', as computed by sizeof. */
 #undef SIZEOF_INT
 
 /* The size of `long', as computed by sizeof. */
 #undef SIZEOF_LONG
 
 /* The size of `long long', as computed by sizeof. */
 #undef SIZEOF_LONG_LONG
 
 /* The size of `off_t', as computed by sizeof. */
 #undef SIZEOF_OFF_T
 
 /* The size of `short', as computed by sizeof. */
 #undef SIZEOF_SHORT
 
 /* The size of `void *', as computed by sizeof. */
 #undef SIZEOF_VOID_P
 
 /* Define to 1 if you have the ANSI C header files. */
 #undef STDC_HEADERS
 
 /* Define if you can safely include both <string.h> and <strings.h>. */
 #undef STRING_WITH_STRINGS
 
 /* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
 #undef TIME_WITH_SYS_TIME
 
 /* Name of host specific header file to include in trad-core.c. */
 #undef TRAD_HEADER
 
 /* Define if 64-bit archives should always be used. */
 #undef USE_64_BIT_ARCHIVE
 
 /* Use b modifier when opening binary files? */
 #undef USE_BINARY_FOPEN
 
 /* Define if we should use leading underscore on 64 bit mingw targets */
 #undef USE_MINGW64_LEADING_UNDERSCORES
 
 /* Use mmap if it's available? */
 #undef USE_MMAP
 
 /* Define if we should default to creating read-only plt entries */
 #undef USE_SECUREPLT
 
 /* Enable extensions on AIX 3, Interix.  */
 #ifndef _ALL_SOURCE
 # undef _ALL_SOURCE
 #endif
 /* Enable GNU extensions on systems that have them.  */
 #ifndef _GNU_SOURCE
 # undef _GNU_SOURCE
 #endif
 /* Enable threading extensions on Solaris.  */
 #ifndef _POSIX_PTHREAD_SEMANTICS
 # undef _POSIX_PTHREAD_SEMANTICS
 #endif
 /* Enable extensions on HP NonStop.  */
 #ifndef _TANDEM_SOURCE
 # undef _TANDEM_SOURCE
 #endif
 /* Enable general extensions on Solaris.  */
 #ifndef __EXTENSIONS__
 # undef __EXTENSIONS__
 #endif
 
 
 /* Version number of package */
 #undef VERSION
 
 /* Enable large inode numbers on Mac OS X 10.5.  */
 #ifndef _DARWIN_USE_64_BIT_INODE
 # define _DARWIN_USE_64_BIT_INODE 1
 #endif
 
 /* Number of bits in a file offset, on hosts where this is settable. */
 #undef _FILE_OFFSET_BITS
 
 /* Define for large files, on AIX-style hosts. */
 #undef _LARGE_FILES
 
 /* Define to 1 if on MINIX. */
 #undef _MINIX
 
 /* Define to 2 if the system does not provide POSIX.1 features except with
    this defined. */
 #undef _POSIX_1_SOURCE
 
 /* Define to 1 if you need to in order for `stat' and other things to work. */
 #undef _POSIX_SOURCE
diff --git a/bfd/configure b/bfd/configure
index bcc1a4eaf2f..cca67ee1080 100755
--- a/bfd/configure
+++ b/bfd/configure
@@ -12793,26 +12793,36 @@ else
   INSTALL_LIBBFD_TRUE='#'
   INSTALL_LIBBFD_FALSE=
 fi
 
   # Need _noncanonical variables for this.
 
 
 
 
   # libbfd.a is a host library containing target dependent code
   bfdlibdir='$(libdir)'
   bfdincludedir='$(includedir)'
   if test "${host}" != "${target}"; then
     bfdlibdir='$(exec_prefix)/$(host_noncanonical)/$(target_noncanonical)/lib'
     bfdincludedir='$(exec_prefix)/$(host_noncanonical)/$(target_noncanonical)/include'
   fi
 
 
 
 
 
 
 
+if test -n "$EXEEXT"; then
+
+$as_echo "#define HAVE_EXECUTABLE_SUFFIX 1" >>confdefs.h
+
+fi
+
+cat >>confdefs.h <<_ACEOF
+#define EXECUTABLE_SUFFIX "${EXEEXT}"
+_ACEOF
+
 
 host64=false
 target64=false
diff --git a/bfd/configure.ac b/bfd/configure.ac
index c5bfbd5d129..af4d4b8c135 100644
--- a/bfd/configure.ac
+++ b/bfd/configure.ac
@@ -157,6 +157,12 @@ AM_MAINTAINER_MODE
 AM_CONDITIONAL(GENINSRC_NEVER, false)
 AM_INSTALL_LIBBFD
 AC_EXEEXT
+if test -n "$EXEEXT"; then
+  AC_DEFINE(HAVE_EXECUTABLE_SUFFIX, 1,
+	    [Does the platform use an executable suffix?])
+fi
+AC_DEFINE_UNQUOTED(EXECUTABLE_SUFFIX, "${EXEEXT}",
+		   [Suffix used for executables, if any.])
 
 host64=false
 target64=false
diff --git a/bfd/plugin.c b/bfd/plugin.c
index 537ab603110..1edcb57bf3a 100644
--- a/bfd/plugin.c
+++ b/bfd/plugin.c
@@ -65,48 +65,47 @@ static const char *
 dlerror (void)
 {
   return "Unable to load DLL.";
 }
 
 #endif /* !defined (HAVE_DLFCN_H) && defined (HAVE_WINDOWS_H)  */
 
-#define bfd_plugin_close_and_cleanup		      _bfd_generic_close_and_cleanup
 #define bfd_plugin_bfd_free_cached_info		      _bfd_generic_bfd_free_cached_info
 #define bfd_plugin_new_section_hook		      _bfd_generic_new_section_hook
 #define bfd_plugin_get_section_contents		      _bfd_generic_get_section_contents
 #define bfd_plugin_get_section_contents_in_window     _bfd_generic_get_section_contents_in_window
 #define bfd_plugin_bfd_copy_private_header_data	      _bfd_generic_bfd_copy_private_header_data
 #define bfd_plugin_bfd_merge_private_bfd_data	      _bfd_generic_bfd_merge_private_bfd_data
 #define bfd_plugin_bfd_copy_private_header_data	      _bfd_generic_bfd_copy_private_header_data
 #define bfd_plugin_bfd_set_private_flags	      _bfd_generic_bfd_set_private_flags
 #define bfd_plugin_core_file_matches_executable_p     generic_core_file_matches_executable_p
 #define bfd_plugin_bfd_is_local_label_name	      _bfd_nosymbols_bfd_is_local_label_name
 #define bfd_plugin_bfd_is_target_special_symbol	      _bfd_bool_bfd_asymbol_false
 #define bfd_plugin_get_lineno			      _bfd_nosymbols_get_lineno
 #define bfd_plugin_find_nearest_line		      _bfd_nosymbols_find_nearest_line
 #define bfd_plugin_find_line			      _bfd_nosymbols_find_line
 #define bfd_plugin_find_inliner_info		      _bfd_nosymbols_find_inliner_info
 #define bfd_plugin_get_symbol_version_string	      _bfd_nosymbols_get_symbol_version_string
 #define bfd_plugin_bfd_make_debug_symbol	      _bfd_nosymbols_bfd_make_debug_symbol
 #define bfd_plugin_read_minisymbols		      _bfd_generic_read_minisymbols
 #define bfd_plugin_minisymbol_to_symbol		      _bfd_generic_minisymbol_to_symbol
 #define bfd_plugin_set_arch_mach		      bfd_default_set_arch_mach
 #define bfd_plugin_set_section_contents		      _bfd_generic_set_section_contents
 #define bfd_plugin_bfd_get_relocated_section_contents bfd_generic_get_relocated_section_contents
 #define bfd_plugin_bfd_relax_section		      bfd_generic_relax_section
 #define bfd_plugin_bfd_link_hash_table_create	      _bfd_generic_link_hash_table_create
 #define bfd_plugin_bfd_link_add_symbols		      _bfd_generic_link_add_symbols
 #define bfd_plugin_bfd_link_just_syms		      _bfd_generic_link_just_syms
 #define bfd_plugin_bfd_final_link		      _bfd_generic_final_link
 #define bfd_plugin_bfd_link_split_section	      _bfd_generic_link_split_section
 #define bfd_plugin_bfd_gc_sections		      bfd_generic_gc_sections
 #define bfd_plugin_bfd_lookup_section_flags	      bfd_generic_lookup_section_flags
 #define bfd_plugin_bfd_merge_sections		      bfd_generic_merge_sections
 #define bfd_plugin_bfd_is_group_section		      bfd_generic_is_group_section
 #define bfd_plugin_bfd_group_name		      bfd_generic_group_name
 #define bfd_plugin_bfd_discard_group		      bfd_generic_discard_group
 #define bfd_plugin_section_already_linked	      _bfd_generic_section_already_linked
 #define bfd_plugin_bfd_define_common_symbol	      bfd_generic_define_common_symbol
 #define bfd_plugin_bfd_link_hide_symbol		      _bfd_generic_link_hide_symbol
 #define bfd_plugin_bfd_define_start_stop	      bfd_generic_define_start_stop
 #define bfd_plugin_bfd_copy_link_hash_symbol_type     _bfd_generic_copy_link_hash_symbol_type
 #define bfd_plugin_bfd_link_check_relocs	      _bfd_generic_link_check_relocs
@@ -115,22 +114,321 @@ static enum ld_plugin_status
 message (int level ATTRIBUTE_UNUSED,
 	 const char * format, ...)
 {
   va_list args;
   va_start (args, format);
   printf ("bfd plugin: ");
   vprintf (format, args);
   putchar ('\n');
   va_end (args);
   return LDPS_OK;
 }
 
+struct plugin_list_entry
+{
+  /* These must be initialized for each IR object with LTO wrapper.  */
+  void *handle;
+  ld_plugin_claim_file_handler claim_file;
+  ld_plugin_all_symbols_read_handler all_symbols_read;
+  ld_plugin_all_symbols_read_handler cleanup_handler;
+  char *resolution_file;
+  char *resolution_option;
+  bfd *real_bfd;
+  long real_nsyms;
+  asymbol **real_syms;
+  int lto_nsyms;
+  const struct ld_plugin_symbol *lto_syms;
+
+  struct plugin_list_entry *next;
+
+  /* These can be reused for all IR objects.  */
+  const char *plugin_name;
+  char *gcc;
+  char *lto_wrapper;
+  char *gcc_env;
+  bfd_boolean initialized;
+};
+
+/* Use GCC LTO wrapper to covert LTO IR object to the real object.  */
+
+static bfd_boolean
+get_lto_wrapper (struct plugin_list_entry *plugin)
+{
+  struct stat st;
+  const char *real_name;
+  const char *base_name;
+  size_t length;
+  const char *target_start = NULL;
+  const char *target_end = NULL;
+  size_t target_length = 0;
+  char *gcc_name;
+  char *wrapper_name;
+  char *p;
+  char dir_seperator = '\0';
+  char *resolution_file;
+
+  if (plugin->initialized)
+    {
+      if (plugin->lto_wrapper)
+	{
+	  resolution_file = make_temp_file (".res");
+	  if (resolution_file)
+	    {
+	      plugin->resolution_file = resolution_file;
+	      plugin->resolution_option = concat ("-fresolution=",
+						  resolution_file, NULL);
+	      return TRUE;
+	    }
+	  else
+	    {
+	      /* Something is wrong.  Give up.  */
+	      free (plugin->gcc);
+	      free (plugin->lto_wrapper);
+	      free (plugin->gcc_env);
+	      plugin->gcc = NULL;
+	      plugin->gcc_env = NULL;
+	      plugin->lto_wrapper = NULL;
+	    }
+	}
+
+      return FALSE;
+    }
+
+  plugin->initialized = TRUE;
+
+  /* Check for PREFIX/libexec/gcc/TARGET/VERSION/liblto_plugin.so.  */
+  real_name = lrealpath (plugin->plugin_name);
+  base_name = lbasename (real_name);
+
+  /* The directory length in plugin pathname.  */
+  length = base_name - real_name;
+
+  /* Skip if there is no PREFIX.  */
+  if (!length)
+    return FALSE;
+
+  p = (char *) real_name + length - 1;
+  if (IS_DIR_SEPARATOR (*p))
+    {
+      int level = 0;
+      for (; p != real_name; p--)
+	if (IS_DIR_SEPARATOR (*p))
+	  {
+	    level++;
+	    if (level == 2)
+	      target_end = p;
+	    else if (level == 3)
+	      {
+		target_start = p + 1;
+		target_length = target_end - target_start;
+	      }
+	    else if (level == 5)
+	      {
+		dir_seperator = *p;
+		break;
+	      }
+	  }
+    }
+
+  /* Skip if there is no TARGET nor PREFIX.  */
+  if (!target_length || !dir_seperator)
+    return FALSE;
+
+#ifdef HAVE_EXECUTABLE_SUFFIX
+# define GCC_EXECUTABLE		"gcc" EXECUTABLE_SUFFIX
+# define LTO_WRAPPER_EXECUTABLE	"lto-wrapper" EXECUTABLE_SUFFIX
+#else
+# define GCC_EXECUTABLE		"gcc"
+# define LTO_WRAPPER_EXECUTABLE	"lto-wrapper"
+#endif
+  gcc_name = bfd_malloc (length + target_length
+			 + sizeof (GCC_EXECUTABLE));
+  if (gcc_name == NULL)
+    return FALSE;
+  memcpy (gcc_name, real_name, length);
+
+  /* Get PREFIX/bin/.  */
+  p += gcc_name - real_name;
+  memcpy (p + 1, "bin", 3);
+  p[4] = dir_seperator;
+
+  /* Try PREFIX/bin/TARGET-gcc first.  */
+  memcpy (p + 5, target_start, target_length);
+  p[5 + target_length] = '-';
+  memcpy (p + 5 + target_length + 1, GCC_EXECUTABLE,
+	  sizeof (GCC_EXECUTABLE));
+  if (stat (gcc_name, &st) != 0 || !S_ISREG (st.st_mode))
+    {
+      /* Then try PREFIX/bin/gcc.  */
+      memcpy (p + 5, GCC_EXECUTABLE, sizeof (GCC_EXECUTABLE));
+      if (stat (gcc_name, &st) != 0 || !S_ISREG (st.st_mode))
+	{
+	  free (gcc_name);
+	  return FALSE;
+	}
+    }
+
+  /* lto-wrapper should be in the same directory with LTO plugin.  */
+  wrapper_name = bfd_malloc (length + sizeof (LTO_WRAPPER_EXECUTABLE));
+  if (wrapper_name == NULL)
+    {
+      free (gcc_name);
+      return FALSE;
+    }
+  memcpy (wrapper_name, real_name, length);
+  memcpy (wrapper_name + length, LTO_WRAPPER_EXECUTABLE,
+	  sizeof (LTO_WRAPPER_EXECUTABLE));
+  if (stat (wrapper_name, &st) == 0 && S_ISREG (st.st_mode))
+    {
+      resolution_file = make_temp_file (".res");
+      if (resolution_file)
+	{
+	  plugin->gcc = gcc_name;
+	  plugin->lto_wrapper = wrapper_name;
+	  plugin->gcc_env = concat ("COLLECT_GCC=", gcc_name, NULL);
+	  plugin->resolution_file = resolution_file;
+	  plugin->resolution_option = concat ("-fresolution=",
+					      resolution_file, NULL);
+	  return TRUE;
+	}
+    }
+
+  free (gcc_name);
+  free (wrapper_name);
+  return FALSE;
+}
+
+/* Set environment variables for GCC LTO wrapper to covert LTO IR
+   object to the real object.  */
+
+static int
+setup_lto_wrapper_env (struct plugin_list_entry *plugin)
+{
+  return (putenv (plugin->gcc_env)
+	  || putenv ("COLLECT_GCC_OPTIONS="));
+}
+
+static struct plugin_list_entry *plugin_list = NULL;
+static struct plugin_list_entry *current_plugin = NULL;
+
 /* Register a claim-file handler. */
-static ld_plugin_claim_file_handler claim_file = NULL;
 
 static enum ld_plugin_status
 register_claim_file (ld_plugin_claim_file_handler handler)
 {
-  claim_file = handler;
+  current_plugin->claim_file = handler;
+  return LDPS_OK;
+}
+
+/* Register an all-symbols-read handler.  */
+
+static enum ld_plugin_status
+register_all_symbols_read (ld_plugin_all_symbols_read_handler handler)
+{
+  current_plugin->all_symbols_read = handler;
+  return LDPS_OK;
+}
+
+/* Register a cleanup handler.  */
+
+static enum ld_plugin_status
+register_cleanup (ld_plugin_all_symbols_read_handler handler)
+{
+  current_plugin->cleanup_handler = handler;
+  return LDPS_OK;
+}
+
+/* Get the symbol resolution info for a plugin-claimed input file.  */
+
+static enum ld_plugin_status
+get_symbols (const void *handle ATTRIBUTE_UNUSED, int nsyms,
+	     struct ld_plugin_symbol *syms)
+{
+  if (syms)
+    {
+      int n;
+      for (n = 0; n < nsyms; n++)
+	{
+	  switch (syms[n].def)
+	    {
+	    default:
+	      BFD_ASSERT (0);
+	      break;
+	    case LDPK_UNDEF:
+	    case LDPK_WEAKUNDEF:
+	      syms[n].resolution = LDPR_UNDEF;
+	      break;
+	    case LDPK_DEF:
+	    case LDPK_WEAKDEF:
+	    case LDPK_COMMON:
+	      /* Tell plugin that LTO symbol has references from regular
+		 object code. */
+	      syms[n].resolution  = LDPR_PREVAILING_DEF;
+	      break;
+	    }
+      }
+    }
+
+  return LDPS_OK;
+}
+
+/* Add a new (real) input file generated by a plugin.  */
+
+static enum ld_plugin_status
+add_input_file (const char *pathname)
+{
+  /* Get symbols from the real LTO object.  */
+  char **matching;
+  long real_symsize;
+  long real_nsyms;
+  asymbol **real_syms;
+  int lto_nsyms;
+  bfd_boolean lto_symbol_found = FALSE;
+  const struct ld_plugin_symbol *lto_syms;
+  bfd *rbfd;
+  int i, j;
+
+  rbfd = bfd_openr (pathname, NULL);
+  if (!bfd_check_format_matches (rbfd, bfd_object, &matching))
+    BFD_ASSERT (0);
+
+  real_symsize = bfd_get_symtab_upper_bound (rbfd);
+  if (real_symsize < 0)
+    BFD_ASSERT (0);
+
+  real_syms = (asymbol **) bfd_malloc (real_symsize);
+  if (real_syms)
+    {
+      real_nsyms = bfd_canonicalize_symtab (rbfd, real_syms);
+      if (real_nsyms < 0)
+	BFD_ASSERT (0);
+
+      /* NB: LTO plugin may generate more than one real object from one
+	 LTO IR object.  We use the one which contains LTO symbols.  */
+      lto_syms = current_plugin->lto_syms;
+      lto_nsyms = current_plugin->lto_nsyms;
+      for (i = 0; i < lto_nsyms; i++)
+	for (j = 0; j < real_nsyms; j++)
+	  if (real_syms[j]->name
+	      && strcmp (lto_syms[i].name, real_syms[j]->name) == 0)
+	    {
+	      lto_symbol_found = TRUE;
+	      break;
+	    }
+    }
+
+  if (lto_symbol_found)
+    {
+      current_plugin->real_nsyms = real_nsyms;
+      current_plugin->real_syms = real_syms;
+      /* NB: We can't close RBFD which own the real symbol info.  */
+      current_plugin->real_bfd = rbfd;
+    }
+  else
+    {
+      bfd_close (rbfd);
+      free (real_syms);
+    }
+
   return LDPS_OK;
 }
 
@@ -138,18 +436,55 @@ static enum ld_plugin_status
 add_symbols (void * handle,
 	     int nsyms,
 	     const struct ld_plugin_symbol * syms)
 {
   bfd *abfd = handle;
   struct plugin_data_struct *plugin_data =
     bfd_alloc (abfd, sizeof (plugin_data_struct));
 
-  plugin_data->nsyms = nsyms;
-  plugin_data->syms = syms;
+  if (plugin_data)
+    {
+      struct ld_plugin_symbol *sym_info;
+      char *strtab;
+      size_t sym_info_size, name_length;
+      int i;
+
+      abfd->tdata.plugin_data = plugin_data;
+
+      /* NB: LTO symbols are owned by LTO plugin.  Create a copy so
+	 that we can use it in bfd_plugin_canonicalize_symtab.  */
+      sym_info_size = nsyms * sizeof (*syms);
+
+      /* Allocate a string table  */
+      for (i = 0; i < nsyms; i++)
+	sym_info_size += strlen (syms[i].name) + 1;
+
+      sym_info = bfd_alloc (abfd, sym_info_size);
+      if (sym_info)
+	{
+	  /* Copy symbol table.  */
+	  memcpy (sym_info, syms, nsyms * sizeof (*syms));
+
+	  /* Copy symbol names in symbol table.  */
+	  strtab = (char *) (sym_info + nsyms);
+	  for (i = 0; i < nsyms; i++)
+	    {
+	      name_length = strlen (syms[i].name);
+	      memcpy (strtab, syms[i].name, name_length + 1);
+	      sym_info[i].name = strtab;
+	      strtab += name_length + 1;
+	    }
+
+	  plugin_data->nsyms = nsyms;
+	  plugin_data->syms = sym_info;
+
+	  current_plugin->lto_nsyms = nsyms;
+	  current_plugin->lto_syms = sym_info;
+	}
+    }
 
   if (nsyms != 0)
     abfd->flags |= HAS_SYMS;
 
-  abfd->tdata.plugin_data = plugin_data;
   return LDPS_OK;
 }
 
@@ -209,108 +544,189 @@ static int
 try_claim (bfd *abfd)
 {
   int claimed = 0;
   struct ld_plugin_input_file file;
 
   file.handle = abfd;
   if (!bfd_plugin_open_input (abfd, &file))
     return 0;
-  if (claim_file)
-    claim_file (&file, &claimed);
+  if (current_plugin->claim_file)
+    {
+      current_plugin->claim_file (&file, &claimed);
+      if (claimed)
+	{
+	  if (current_plugin->all_symbols_read)
+	    {
+	      struct plugin_data_struct *plugin_data
+		= abfd->tdata.plugin_data;
+	      if (plugin_data)
+		{
+		  /* Get real symbols from LTO wrapper.  */
+		  current_plugin->all_symbols_read ();
+
+		  /* Copy real symbols to plugin_data.  */
+		  plugin_data->real_bfd = current_plugin->real_bfd;
+		  plugin_data->real_nsyms = current_plugin->real_nsyms;
+		  plugin_data->real_syms = current_plugin->real_syms;
+
+		  /* Clean up LTO plugin.  */
+		  if (current_plugin->cleanup_handler)
+		    current_plugin->cleanup_handler ();
+		}
+	    }
+	}
+
+      if (current_plugin->lto_wrapper)
+	{
+	  /* Clean up for LTO wrapper.  */
+	  unlink (current_plugin->resolution_file);
+	  free (current_plugin->resolution_option);
+	}
+    }
   close (file.fd);
   return claimed;
 }
 
-struct plugin_list_entry
-{
-  void *                        handle;
-  ld_plugin_claim_file_handler  claim_file;
-  struct plugin_list_entry *    next;
-};
-
-static struct plugin_list_entry * plugin_list = NULL;
-
 static int
 try_load_plugin (const char *pname, bfd *abfd, int *has_plugin_p)
 {
   void *plugin_handle = NULL;
-  struct ld_plugin_tv tv[4];
+  struct ld_plugin_tv tv[12];
   int i;
   ld_plugin_onload onload;
   enum ld_plugin_status status;
   struct plugin_list_entry *plugin_list_iter;
 
   *has_plugin_p = 0;
 
+  /* NB: Each object is inddependent.  Reuse the previous plugin from
+     the last LTO wrapper run will lead to wrong LTO data.  */
+  if (current_plugin
+      && current_plugin->handle
+      && current_plugin->lto_wrapper
+      && strcmp (current_plugin->plugin_name, pname) == 0)
+    {
+      dlclose (current_plugin->handle);
+      memset (current_plugin, 0,
+	      offsetof (struct plugin_list_entry, next));
+    }
+
   plugin_handle = dlopen (pname, RTLD_NOW);
   if (!plugin_handle)
     {
       _bfd_error_handler ("%s\n", dlerror ());
       return 0;
     }
 
   for (plugin_list_iter = plugin_list;
        plugin_list_iter;
        plugin_list_iter = plugin_list_iter->next)
     {
       if (plugin_handle == plugin_list_iter->handle)
 	{
 	  dlclose (plugin_handle);
 	  if (!plugin_list_iter->claim_file)
 	    return 0;
 
 	  register_claim_file (plugin_list_iter->claim_file);
+	  current_plugin = plugin_list_iter;
 	  goto have_claim_file;
 	}
+      else if (plugin_list_iter->lto_wrapper
+	       && strcmp (plugin_list_iter->plugin_name, pname) == 0)
+	goto have_lto_wrapper;
     }
 
   plugin_list_iter = bfd_malloc (sizeof *plugin_list_iter);
   if (plugin_list_iter == NULL)
     return 0;
-  plugin_list_iter->handle = plugin_handle;
-  plugin_list_iter->claim_file = NULL;
+  memset (plugin_list_iter, 0, sizeof (*plugin_list_iter));
+  plugin_list_iter->plugin_name = pname;
   plugin_list_iter->next = plugin_list;
   plugin_list = plugin_list_iter;
 
+have_lto_wrapper:
+  plugin_list_iter->handle = plugin_handle;
+
   onload = dlsym (plugin_handle, "onload");
   if (!onload)
     return 0;
 
   i = 0;
   tv[i].tv_tag = LDPT_MESSAGE;
   tv[i].tv_u.tv_message = message;
 
   ++i;
   tv[i].tv_tag = LDPT_REGISTER_CLAIM_FILE_HOOK;
   tv[i].tv_u.tv_register_claim_file = register_claim_file;
 
   ++i;
   tv[i].tv_tag = LDPT_ADD_SYMBOLS;
   tv[i].tv_u.tv_add_symbols = add_symbols;
 
+  if (get_lto_wrapper (plugin_list_iter))
+    {
+      ++i;
+      tv[i].tv_tag = LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK;
+      tv[i].tv_u.tv_register_all_symbols_read = register_all_symbols_read;
+
+      ++i;
+      tv[i].tv_tag = LDPT_REGISTER_CLEANUP_HOOK;
+      tv[i].tv_u.tv_register_cleanup = register_cleanup;
+
+      ++i;
+      tv[i].tv_tag = LDPT_GET_SYMBOLS;
+      tv[i].tv_u.tv_get_symbols = get_symbols;
+
+      ++i;
+      tv[i].tv_tag = LDPT_GET_SYMBOLS_V2;
+      tv[i].tv_u.tv_get_symbols = get_symbols;
+
+      ++i;
+      tv[i].tv_tag = LDPT_OPTION;
+      tv[i].tv_u.tv_string = plugin_list_iter->lto_wrapper;
+
+      ++i;
+      tv[i].tv_tag = LDPT_OPTION;
+      tv[i].tv_u.tv_string = plugin_list_iter->resolution_option;
+
+      ++i;
+      tv[i].tv_tag = LDPT_LINKER_OUTPUT;
+      tv[i].tv_u.tv_val = LDPO_EXEC;
+
+      ++i;
+      tv[i].tv_tag = LDPT_ADD_INPUT_FILE;
+      tv[i].tv_u.tv_add_input_file = add_input_file;
+    }
+
   ++i;
   tv[i].tv_tag = LDPT_NULL;
   tv[i].tv_u.tv_val = 0;
 
+  current_plugin = plugin_list_iter;
+
+  /* LTO plugin will call handler hooks to set up plugin handlers.  */
   status = (*onload)(tv);
 
   if (status != LDPS_OK)
     return 0;
 
-  plugin_list_iter->claim_file = claim_file;
+  if (current_plugin->lto_wrapper
+      && setup_lto_wrapper_env (current_plugin))
+    return 0;
 
 have_claim_file:
   *has_plugin_p = 1;
 
   abfd->plugin_format = bfd_plugin_no;
 
-  if (!claim_file)
+  if (!current_plugin->claim_file)
     return 0;
 
   if (!try_claim (abfd))
     return 0;
 
   abfd->plugin_format = bfd_plugin_yes;
   return 1;
 }
 
 /* There may be plugin libraries in lib/bfd-plugins.  */
@@ -554,46 +970,63 @@ static long
 bfd_plugin_canonicalize_symtab (bfd *abfd,
 				asymbol **alocation)
 {
   struct plugin_data_struct *plugin_data = abfd->tdata.plugin_data;
   long nsyms = plugin_data->nsyms;
   const struct ld_plugin_symbol *syms = plugin_data->syms;
   static asection fake_section
     = BFD_FAKE_SECTION (fake_section, NULL, "plug", 0,
 			SEC_ALLOC | SEC_LOAD | SEC_CODE | SEC_HAS_CONTENTS);
   static asection fake_common_section
     = BFD_FAKE_SECTION (fake_common_section, NULL, "plug", 0, SEC_IS_COMMON);
-  int i;
+  int i, j;
+  long real_nsyms;
+  asymbol **real_syms;
+
+  real_syms = plugin_data->real_syms;
+  if (real_syms)
+    real_nsyms = plugin_data->real_nsyms;
+  else
+    real_nsyms = 0;
 
   for (i = 0; i < nsyms; i++)
     {
       asymbol *s = bfd_alloc (abfd, sizeof (asymbol));
 
       BFD_ASSERT (s);
       alocation[i] = s;
 
       s->the_bfd = abfd;
       s->name = syms[i].name;
       s->value = 0;
       s->flags = convert_flags (&syms[i]);
       switch (syms[i].def)
 	{
 	case LDPK_COMMON:
 	  s->section = &fake_common_section;
 	  break;
 	case LDPK_UNDEF:
 	case LDPK_WEAKUNDEF:
 	  s->section = bfd_und_section_ptr;
 	  break;
 	case LDPK_DEF:
 	case LDPK_WEAKDEF:
 	  s->section = &fake_section;
+	  if (real_nsyms)
+	    /* Use real LTO symbols if possible.  */
+	    for (j = 0; j < real_nsyms; j++)
+	      if (real_syms[j]->name
+		  && strcmp (syms[i].name, real_syms[j]->name) == 0)
+		{
+		  s->section = real_syms[j]->section;
+		  break;
+		}
 	  break;
 	default:
 	  BFD_ASSERT (0);
 	}
 
       s->udata.p = (void *) &syms[i];
     }
 
   return nsyms;
 }
@@ -635,6 +1068,24 @@ bfd_plugin_sizeof_headers (bfd *a ATTRIBUTE_UNUSED,
   return 0;
 }
 
+static bfd_boolean
+bfd_plugin_close_and_cleanup (bfd *abfd)
+{
+  struct plugin_data_struct *plugin_data;
+
+  if (abfd->format != bfd_archive
+      && (plugin_data = abfd->tdata.plugin_data))
+    {
+      if (plugin_data->real_bfd)
+	bfd_close (plugin_data->real_bfd);
+
+      if (plugin_data->real_syms)
+	free (plugin_data->real_syms);
+    }
+
+  return _bfd_generic_close_and_cleanup (abfd);
+}
+
 const bfd_target plugin_vec =
 {
   "plugin",			/* Name.  */
diff --git a/bfd/plugin.h b/bfd/plugin.h
index 098bf084554..05c3573933d 100644
--- a/bfd/plugin.h
+++ b/bfd/plugin.h
@@ -32,7 +32,10 @@ void register_ld_plugin_object_p (const bfd_target *(*object_p) (bfd *));
 typedef struct plugin_data_struct
 {
   int nsyms;
   const struct ld_plugin_symbol *syms;
+  bfd *real_bfd;
+  long real_nsyms;
+  asymbol **real_syms;
 }
 plugin_data_struct;
 
diff --git a/ld/ChangeLog b/ld/ChangeLog
index c3b5541b963..57c215fae46 100644
--- a/ld/ChangeLog
+++ b/ld/ChangeLog
@@ -1,451 +1,460 @@
+2020-02-10  H.J. Lu  <hongjiu.lu@intel.com>
+
+	PR binutils/25355
+	* testsuite/ld-plugin/lto.exp: Run PR binutils/25355 test.
+	* testsuite/ld-plugin/pr25355.c: New file.
+	* testsuite/ld-plugin/pr25355.d: Likewise.
+	* testsuite/lib/ld-lib.exp (run_cc_link_tests): Support compile
+	only dump.
+
 2020-02-07  H.J. Lu  <hongjiu.lu@intel.com>
 
 	* testsuite/ld-unique/unique.exp (contains_unique_symbol): Updated.
 
 2020-02-07  Sergey Belyashov  <sergey.belyashov@gmail.com>
 
 	PR 25469
 	* emulparams/elf32z80.sh: Use z80 emulation.
 	* emultempl/z80.em: Make generic to both COFF and ELF Z80 emulations.
 	* emultempl/z80elf.em: Delete.
 	* testsuite/ld-elf/pr22450.d: Expect to fail for the Z80.
 	* testsuite/ld-elf/sec64k.exp: Fix Z80 assembly.
 	* testsuite/ld-unique/pr21529.s: Avoid register name conflict.
 	* testsuite/ld-unique/unique.s: Likewise.
 	* testsuite/ld-unique/unique_empty.s: Likewise.
 	* testsuite/ld-unique/unique_shared.s: Likewise.
 	* testsuite/ld-unique/unique.d: Updated expected output.
 	* testsuite/ld-z80/arch_z80n.d: New file.
 	* testsuite/ld-z80/comb_arch_z80_z80n.d: New file.
 	* testsuite/ld-z80/labels.s: Add more labels.
 	* testsuite/ld-z80/relocs.s: Add more reloc tests.
 	* testsuite/ld-z80/relocs_f_z80n.d: New file
 
 2020-02-07  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR ld/25022
 	* testsuite/ld-elf/pr25022.d: Xfail more targets which don't use
 	ldelf_before_place_orphans.
 
 2020-02-06  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR ld/25022
 	* emultempl/aix.em (ld_${EMULATION_NAME}_emulation): Add
 	before_place_orphans_default.
 	* emultempl/armcoff.em (ld_${EMULATION_NAME}_emulation): Likewise.
 	* emultempl/beos.em (ld_${EMULATION_NAME}_emulation): Likewise.
 	* emultempl/generic.em (ld_${EMULATION_NAME}_emulation): Likewise.
 	* emultempl/linux.em (ld_${EMULATION_NAME}_emulation): Likewise.
 	* emultempl/msp430.em (ld_${EMULATION_NAME}_emulation): Likewise.
 	* emultempl/pe.em (ld_${EMULATION_NAME}_emulation): Likewise.
 	* emultempl/pep.em (ld_${EMULATION_NAME}_emulation): Likewise.
 	* emultempl/ticoff.em (ld_${EMULATION_NAME}_emulation): Likewise.
 	* emultempl/vanilla.em (ld_${EMULATION_NAME}_emulation): Likewise.
 	* emultempl/elf.em (ld_${EMULATION_NAME}_emulation): Use
 	ldelf_before_place_orphans.
 	* ldelf.c (ldelf_before_place_orphans): New.
 	* ldelf.h (ldelf_before_place_orphans): Likewise.
 	* ldemul.c (ldemul_before_place_orphans): Likewise.
 	(before_place_orphans_default): Likewise.
 	* ldemul.h (ldemul_before_place_orphans): Likewise.
 	(before_place_orphans_default): Likewise.
 	(ld_emulation_xfer_struct): Add before_place_orphans.
 	* ldlang.c (lang_process): Call ldemul_before_place_orphans
 	before lang_place_orphans.
 	* testsuite/ld-elf/pr25022.d: New file.
 	* testsuite/ld-elf/pr25022.s: Likewise.
 	* testsuite/ld-elf/pr25022.t: Likewise.
 
 2020-02-06  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR ld/25490
 	* testsuite/ld-elf/pr25490-1.d: New file.
 	* testsuite/ld-elf/pr25490-1.s: Likewise.
 
 2020-02-06  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR ld/24526
 	PR ld/25021
 	PR ld/25490
 	* testsuite/ld-elf/elf.exp: Run PR ld/25490 tests.
 	* testsuite/ld-elf/pr24526.d: New file.
 	* testsuite/ld-elf/pr24526.s: Likewise.
 	* testsuite/ld-elf/pr25021.d: Likewise.
 	* testsuite/ld-elf/pr25021.s: Likewise.
 	* testsuite/ld-elf/pr25490-2-16.rd: Likewise.
 	* testsuite/ld-elf/pr25490-2-32.rd: Likewise.
 	* testsuite/ld-elf/pr25490-2-64.rd: Likewise.
 	* testsuite/ld-elf/pr25490-2.s: Likewise.
 	* testsuite/ld-elf/pr25490-3-16.rd: Likewise.
 	* testsuite/ld-elf/pr25490-3-32.rd: Likewise.
 	* testsuite/ld-elf/pr25490-3-64.rd: Likewise.
 	* testsuite/ld-elf/pr25490-3.s: Likewise.
 	* testsuite/ld-elf/pr25490-4-16.rd: Likewise.
 	* testsuite/ld-elf/pr25490-4-32.rd: Likewise.
 	* testsuite/ld-elf/pr25490-4-64.rd: Likewise.
 	* testsuite/ld-elf/pr25490-4.s: Likewise.
 	* testsuite/ld-elf/pr25490-5-16.rd: Likewise.
 	* testsuite/ld-elf/pr25490-5-32.rd: Likewise.
 	* testsuite/ld-elf/pr25490-5-64.rd: Likewise.
 	* testsuite/ld-elf/pr25490-5.s: Likewise.
 	* testsuite/ld-elf/pr25490-6-16.rd: Likewise.
 	* testsuite/ld-elf/pr25490-6-32.rd: Likewise.
 	* testsuite/ld-elf/pr25490-6-64.rd: Likewise.
 	* testsuite/ld-elf/pr25490-6.s: Likewise.
 
 2020-02-06  H.J. Lu  <hongjiu.lu@intel.com>
 
 	* testsuite/lib/ld-lib.exp (check_gc_sections_available): Mark
 	z80 as not supported.
 
 2020-02-06  Alan Modra  <amodra@gmail.com>
 
 	* testsuite/ld-ifunc/ifunc.exp: Enable for more targets, specifying
 	targets that don't support ifunc rather than ones that do.
 	(contains_irelative_reloc): Match R_PARISC_IPLT.
 	* testsuite/ld-ifunc/lib.c: Don't use .set in asm.
 	* testsuite/ld-ifunc/ifunc-23-x86.s,
 	* testsuite/ld-ifunc/ifunc-24-x86.s,
 	* testsuite/ld-ifunc/ifunc-25-x86.s,
 	* testsuite/ld-ifunc/ifunc-4-local-x86.s,
 	* testsuite/ld-ifunc/ifunc-4-x86.s: Define _main.
 	* testsuite/ld-ifunc/ifunc-10-i386.d,
 	* testsuite/ld-ifunc/ifunc-11-i386.d,
 	* testsuite/ld-ifunc/ifunc-12-i386.d,
 	* testsuite/ld-ifunc/ifunc-13-i386.d,
 	* testsuite/ld-ifunc/ifunc-14a-i386.d,
 	* testsuite/ld-ifunc/ifunc-14b-i386.d,
 	* testsuite/ld-ifunc/ifunc-14c-i386.d,
 	* testsuite/ld-ifunc/ifunc-14d-i386.d,
 	* testsuite/ld-ifunc/ifunc-14e-i386.d,
 	* testsuite/ld-ifunc/ifunc-14f-i386.d,
 	* testsuite/ld-ifunc/ifunc-15-i386.d,
 	* testsuite/ld-ifunc/ifunc-16-i386-now.d,
 	* testsuite/ld-ifunc/ifunc-16-i386.d,
 	* testsuite/ld-ifunc/ifunc-17a-i386.d,
 	* testsuite/ld-ifunc/ifunc-17b-i386.d,
 	* testsuite/ld-ifunc/ifunc-18a-i386.d,
 	* testsuite/ld-ifunc/ifunc-18b-i386.d,
 	* testsuite/ld-ifunc/ifunc-19a-i386.d,
 	* testsuite/ld-ifunc/ifunc-19b-i386.d,
 	* testsuite/ld-ifunc/ifunc-2-i386-now.d,
 	* testsuite/ld-ifunc/ifunc-2-i386.d,
 	* testsuite/ld-ifunc/ifunc-2-local-i386-now.d,
 	* testsuite/ld-ifunc/ifunc-2-local-i386.d,
 	* testsuite/ld-ifunc/ifunc-20-i386.d,
 	* testsuite/ld-ifunc/ifunc-21-i386.d,
 	* testsuite/ld-ifunc/ifunc-22-i386.d,
 	* testsuite/ld-ifunc/ifunc-26.d,
 	* testsuite/ld-ifunc/ifunc-5a-i386.d,
 	* testsuite/ld-ifunc/ifunc-5a-local-i386.d,
 	* testsuite/ld-ifunc/ifunc-5b-i386.d,
 	* testsuite/ld-ifunc/ifunc-5b-local-i386.d,
 	* testsuite/ld-ifunc/ifunc-5r-local-i386.d,
 	* testsuite/ld-ifunc/ifunc-6a-i386.d,
 	* testsuite/ld-ifunc/ifunc-6b-i386.d,
 	* testsuite/ld-ifunc/ifunc-7a-i386.d,
 	* testsuite/ld-ifunc/ifunc-7b-i386.d,
 	* testsuite/ld-ifunc/ifunc-8-i386.d,
 	* testsuite/ld-ifunc/ifunc-9-i386.d,
 	* testsuite/ld-ifunc/pr17154-i386-now.d,
 	* testsuite/ld-ifunc/pr17154-i386.d: xfail lynxos, nto, and solaris.
 
 2020-02-06  Alan Modra  <amodra@gmail.com>
 
 	* testsuite/lib/ld-lib.exp (is_generic): Delete.
 	* testsuite/ld-unique/unique.exp: Exclude tic6x.
 
 2020-02-06  Alan Modra  <amodra@gmail.com>
 
 	* configure.tgt (i[3-7]86-*-moss*): Don't clear targ_extra_ofiles.
 	(i[3-7]86-*-openbsd*, x86_64-*-openbsd*): Add.
 
 2020-02-02  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR gas/25380
 	* testsuite/ld-i386/pr22001-1c.S: Use "unique,N" in .section
 	directives.
 	* testsuite/ld-i386/tls-gd1.S: Likewise.
 	* testsuite/ld-x86-64/pr21481b.S: Likewise.
 
 2020-01-30  Jan Beulich  <jbeulich@suse.com>
 
 	* ld.texi: Remove space between @option and brace.
 
 2020-01-29  Alan Modra  <amodra@gmail.com>
 
 	PR 25477
 	* ldelf.c (ldelf_check_ld_so_conf): Add prefix parameter and
 	correct concat.
 	(ldelf_after_open): Add prefix parameter.
 	* ldelf.h (ldelf_after_open): Update prototype.
 	* emultempl/elf.em (gld${EMULATION_NAME}_after_open): Pass $prefix
 	to ldelf_after_open.
 	* Makefile.am: Correct z80 dependencies.
 	* Makefile.in: Regenerate.
 
 2020-01-28  Alan Modra  <amodra@gmail.com>
 
 	* ldexp.c (fold_name): Don't print bfd_link_hash_lookup failed
 	in first phase.
 
 2020-01-27  Alan Modra  <amodra@gmail.com>
 
 	* testsuite/ld-elfvers/vers.exp: Replace case statements with
 	switch statements.
 	* testsuite/ld-ifunc/ifunc.exp: Likewise.
 	* testsuite/ld-unique/unique.exp: Likewise.
 
 2020-01-27  H.J. Lu  <hongjiu.lu@intel.com>
 	    Alan Modra  <amodra@gmail.com>
 
 	PR ld/25458
 	* testsuite/ld-elf/pr25458.map: New file.
 	* testsuite/ld-elf/pr25458.rd: Likewise.
 	* testsuite/ld-elf/pr25458a.s: Likewise.
 	* testsuite/ld-elf/pr25458b.s: Likewise.
 	* testsuite/ld-elf/shared.exp: Run PR ld/25458 test.
 
 2020-01-22  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR ld/25416
 	* testsuite/ld-x86-64/tls.exp: Skip GNU2 TLS tests only without
 	compiler support.
 
 2020-01-22  Alan Modra  <amodra@gmail.com>
 
 	* testsuite/ld-powerpc/tlsdesc3.d,
 	* testsuite/ld-powerpc/tlsdesc3.wf,
 	* testsuite/ld-powerpc/tlsdesc4.d,
 	* testsuite/ld-powerpc/tlsdesc4.s,
 	* testsuite/ld-powerpc/tlsdesc4.wf: New tests.
 	* testsuite/ld-powerpc/powerpc.exp: Run them.
 
 2020-01-22  Alan Modra  <amodra@gmail.com>
 
 	* emultempl/ppc64elf.em (ppc64_opt, PARSE_AND_LIST_LONGOPTS),
 	(PARSE_AND_LIST_OPTIONS, PARSE_AND_LIST_ARGS_CASES): Support
 	--tls-get-addr-regsave and --no-tls-get-addr-regsave.
 	(params): Init new field.
 	* ld.texi (--tls-get-addr-regsave, --no-tls-get-addr-regsave):
 	Document.
 	* testsuite/ld-powerpc/tlsdesc.s,
 	* testsuite/ld-powerpc/tlsdesc.d,
 	* testsuite/ld-powerpc/tlsdesc.wf,
 	* testsuite/ld-powerpc/tlsdesc2.d,
 	* testsuite/ld-powerpc/tlsdesc2.wf,
 	* testsuite/ld-powerpc/tlsexenors.d,
 	* testsuite/ld-powerpc/tlsexenors.r,
 	* testsuite/ld-powerpc/tlsexers.d,
 	* testsuite/ld-powerpc/tlsexers.r,
 	* testsuite/ld-powerpc/tlsexetocnors.d,
 	* testsuite/ld-powerpc/tlsexetocrs.d,
 	* testsuite/ld-powerpc/tlsexetocrs.r,
 	* testsuite/ld-powerpc/tlsopt6.d,
 	* testsuite/ld-powerpc/tlsopt6.wf: New.
 	* testsuite/ld-powerpc/powerpc.exp: Run new tests.
 
 2020-01-22  Yuri Chornoivan  <yurchor@mageia.org>
 
 	PR 25417
 	* ldlang.c (ldlang_open_ctf): Fix error message typo.
 	* emultempl/z80elf.em (z80_elf_after_open): Likewise.
 
 2020-01-21  H.J. Lu  <hongjiu.lu@intel.com>
 
 	* testsuite/ld-elf/pr23900-1.d: Adjusted.
 
 2020-01-21  H.J. Lu  <hongjiu.lu@intel.com>
 
 	* testsuite/ld-elf/pr23900-1.d: Also pass -l to readelf.
 
 2020-01-20  Nick Clifton  <nickc@redhat.com>
 
 	* po/pt_BR.po: Updated Brazilian Portuguese translation.
 	* po/uk.po: Updated Ukranian translation.
 
 2020-01-20  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR ld/25416
 	* testsuite/ld-x86-64/pr25416-1.s: New file
 	* testsuite/ld-x86-64/pr25416-1a.d: Likewise.
 	* testsuite/ld-x86-64/pr25416-1b.d: Likewise.
 	* testsuite/ld-x86-64/pr25416-1.s: Likewise.
 	* testsuite/ld-x86-64/pr25416-2.s: Likewise.
 	* testsuite/ld-x86-64/pr25416-2a.d: Likewise.
 	* testsuite/ld-x86-64/pr25416-2b.d: Likewise.
 	* testsuite/ld-x86-64/pr25416-3.d: Likewise.
 	* testsuite/ld-x86-64/pr25416-3.s: Likewise.
 	* testsuite/ld-x86-64/pr25416-4.d: Likewise.
 	* testsuite/ld-x86-64/pr25416-4.s: Likewise.
 	* testsuite/ld-x86-64/pr25416-5a.c: Likewise.
 	* testsuite/ld-x86-64/pr25416-5b.s: Likewise.
 	* testsuite/ld-x86-64/pr25416-5c.s: Likewise.
 	* testsuite/ld-x86-64/pr25416-5d.s: Likewise.
 	* testsuite/ld-x86-64/pr25416-5e.s: Likewise.
 	* testsuite/ld-x86-64/x86-64.exp: Run PR ld/25416 tests.
 
 2020-01-20  Alan Modra  <amodra@gmail.com>
 
 	* testsuite/ld-powerpc/tlsexe.d: Match new __tls_get_addr stub.
 	* testsuite/ld-powerpc/tlsexeno.d: Likewise.
 	* testsuite/ld-powerpc/tlsexetoc.d: Likewise.
 	* testsuite/ld-powerpc/tlsexetocno.d: Likewise.
 	* testsuite/ld-powerpc/tlsopt5.d: Likewise.
 
 2020-01-18  Roland McGrath  <mcgrathr@google.com>
 
 	* testsuite/ld-x86-64/align-branch-1.d: Loosen instruction regexps
 	to admit whatever absolute address.  The label-relative address is
 	what the test needs to verify.
 
 2020-01-18  Nick Clifton  <nickc@redhat.com>
 
 	* configure: Regenerate.
 	* po/ld.pot: Regenerate.
 
 2020-01-18  Nick Clifton  <nickc@redhat.com>
 
 	Binutils 2.34 branch created.
 
 2020-01-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>
 
 	* scripttempl/elf32msp430_3.sc: Remove.
 
 2020-01-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>
 
 	* scripttempl/elf32msp430.sc: Add input section rules for
 	.upper.{text,data,rodata,bss}.
 	* testsuite/ld-msp430-elf/msp430-elf.exp: Run new test.
 	* testsuite/ld-msp430-elf/upper-input-sections.s: New test.
 
 2020-01-15  Lars Brinkhoff  <lars@nocrew.org>
 
 	PR 20694
 	* temulparams/pdp11.sh (TARGET_PAGE_SIZE): Set to 8192.
 
 2020-01-15  Jozef Lawrynowicz  <jozef.l@mittosystems.com>
 
 	* testsuite/ld-msp430-elf/msp430-elf.exp: Run new test.
 	* testsuite/ld-msp430-elf/reloc-lo-430x.s: New test.
 
 2020-01-15  Alan Modra  <amodra@gmail.com>
 
 	* testsuite/ld-powerpc/ambiguousv1b.d: Adjust expected output.
 	* testsuite/ld-powerpc/funref.s: Align func_tab.
 	* testsuite/ld-powerpc/funref2.s: Likewise.
 	* testsuite/ld-powerpc/funv1.s: Add dot symbols.
 
 2020-01-14  Lili Cui <lili.cui@intel.com>
 
 	* testsuite/ld-i386/align-branch-1.d: Updated for i686-pc-elf.
 
 2020-01-13  Alan Modra  <amodra@gmail.com>
 
 	* po/BLD-POTFILES.in: Regenerate.
 
 2020-01-13  Claudiu Zissulescu  <claziss@gmail.com>
 
 	* testsuite/ld-arc/relax-local-pic.d: Improve matching patterns.
 
 2020-01-13  Claudiu Zissulescu  <claziss@gmail.com>
 
 	* Makefile.am: Remove earcelf_prof.c and earclinux_prof.c
 	emulations.
 	* configure.tgt: Likewise.
 	* Makefile.in: Regenerate.
 	* emulparams/arcelf_prof.sh: Remove file.
 	* emulparams/arclinux_prof.sh: Likewise.
 
 2020-01-13  Claudiu Zissulescu  <claziss@gmail.com>
 
 	* scripttempl/elfarcv2.sc : Allow interrupt vector table to be
 	located at an arbitrary address.  Use DWARF.sc file.
 	* scripttempl/elfarc.sc: Use DWARF.sc file.
 
 2020-01-07  Alan Modra  <amodra@gmail.com>
 
 	* testsuite/ld-mips-elf/eh-frame5.s,
 	* testsuite/ld-mips-elf/ehdr_start-new.s,
 	* testsuite/ld-mips-elf/ehdr_start-o32.s,
 	* testsuite/ld-mips-elf/mips16-call-global-1.s,
 	* testsuite/ld-mips-elf/mips16-intermix-1.s,
 	* testsuite/ld-mips-elf/mips16-pic-1b.s,
 	* testsuite/ld-mips-elf/mips16-pic-4c.s,
 	* testsuite/ld-mips-elf/no-shared-1-n64.s,
 	* testsuite/ld-mips-elf/no-shared-1-o32.s,
 	* testsuite/ld-mips-elf/pic-and-nonpic-1b-micromips.s,
 	* testsuite/ld-mips-elf/pic-and-nonpic-1b.s,
 	* testsuite/ld-mips-elf/pic-and-nonpic-2a.s,
 	* testsuite/ld-mips-elf/pic-and-nonpic-3b.s,
 	* testsuite/ld-mips-elf/pic-and-nonpic-4b.s,
 	* testsuite/ld-mips-elf/pic-and-nonpic-5a.s,
 	* testsuite/ld-mips-elf/pic-and-nonpic-6-n32c.s,
 	* testsuite/ld-mips-elf/pic-and-nonpic-6-n64c.s,
 	* testsuite/ld-mips-elf/pic-and-nonpic-6-o32c.s,
 	* testsuite/ld-mips-elf/pie.s,
 	* testsuite/ld-mips-elf/relax-jalr.s: Revert 2019-12-17 change.
 
 2020-01-06  Nick Clifton  <nickc@redhat.com>
 
 	PR 25327
 	* testsuite/ld-elf/shared.exp: Add -fcommon option to compiler
 	command line when building libcomm1.o and pr13250 tests.
 	* testsuite/ld-plugin/lto.exp: Likewise for pr20267 tests.
 
 2020-01-06  Nick Clifton  <nickc@redhat.com>
 
 	PR 25326
 	* testsuite/ld-elf/shared.exp: Add -fcommon option to compiler
 	command line when building pr19579 binaries.
 
 2020-01-03  Hannes Domani  <ssbssa@yahoo.de>
 
 	* emultempl/pe.em: Add new option --enable-reloc-section.
 	* emultempl/pep.em: Likewise.
 	* ld.texi: Document --enable-reloc-section.
 	* pe-dll.c (pe_dll_build_sections): Use pe_dll_enable_reloc_section.
 	(pe_dll_fill_sections): Simplify by calling pe_exe_fill_sections.
 	* pe-dll.h: Add extern declaration of option flag.
 	* pep-dll.c (pe_dll_enable_reloc_section):
 	Add alias define for pep_dll_enable_reloc_section.
 	* pep-dll.h: Add extern declaration of option flag.
 
 2020-01-02  Sergey Belyashov  <sergey.belyashov@gmail.com>
 
 	* Makefile.am: Add new target z80-elf
 	* configure.tgt: Likewise.
 	* Makefile.in: Regenerate.
 	* emultempl/z80.em: Add support for eZ80 and Z180 architectures.
 	* emulparams/elf32z80.sh: New file.
 	* emultempl/z80elf.em: Likewise.
 	* testsuite/ld-elf/comm-data4.s: Fix for Z80.
 	* testsuite/ld-elf/comm-data5.s: Fix for Z80.
 	* testsuite/ld-scripts/fill16.d: Fix for Z80.
 	* testsuite/ld-z80/arch_ez80_adl.d: Likewise.
 	* testsuite/ld-z80/arch_ez80_z80.d: Likewise.
 	* testsuite/ld-z80/arch_r800.d: Likewise.
 	* testsuite/ld-z80/arch_z180.d: Likewise.
 	* testsuite/ld-z80/arch_z80.d: Likewise.
 	* testsuite/ld-z80/comb_arch_ez80_z80.d: Likewise.
 	* testsuite/ld-z80/comb_arch_z180.d: Likewise.
 	* testsuite/ld-z80/labels.s: Likewise.
 	* testsuite/ld-z80/relocs.s: Likewise.
 	* testsuite/ld-z80/relocs_b_ez80.d: Likewise.
 	* testsuite/ld-z80/relocs_b_z80.d: Likewise.
 	* testsuite/ld-z80/relocs_f_z80.d: Likewise.
 	* testsuite/ld-z80/z80.exp: Likewise.
 	* NEWS: Mention the new support.
 
 2020-01-02  Tamar Christina  <tamar.christina@arm.com>
 
 	PR 25210
 	PR 24753
 	* emultempl/aarch64elf.em (elf${ELFSIZE}_aarch64_add_stub_section):
 	Remove SEC_LINKER_CREATED.
 	* testsuite/ld-aarch64/aarch64-elf.exp: Add erratum835769-843419.
 	* testsuite/ld-aarch64/erratum835769-843419.d: New test.
 
 2020-01-01  Alan Modra  <amodra@gmail.com>
 
 	Update year range in copyright notice of all files.
diff --git a/ld/testsuite/ld-plugin/lto.exp b/ld/testsuite/ld-plugin/lto.exp
index 9b03b7b3977..1b44b0da3fd 100644
--- a/ld/testsuite/ld-plugin/lto.exp
+++ b/ld/testsuite/ld-plugin/lto.exp
@@ -71,169 +71,174 @@ if { [check_lto_fat_available] } {
 # Simple LTO tests and generate input files for complex LTO tests.
 set lto_link_tests [list \
   [list "LTO 1" \
    "-O2 -flto -fuse-linker-plugin" "-flto -fuse-linker-plugin" \
    {lto-1a.c lto-1b.c} {} "lto-1.exe"] \
   [list "Compile 2" \
    "" "-O2 -flto -fuse-linker-plugin" \
    {lto-2.c} {} ""] \
   [list "LTO 2" \
    "-static -O2 -flto -fuse-linker-plugin tmpdir/lto-2.o -lm" "" \
    {dummy.c} {} "lto-2.exe"] \
   [list "Compile 3a" \
    "" "-flto" \
    {lto-3a.c} {} ""] \
   [list "Compile 3c" \
    "" "-O2" \
    {lto-3c.c} {} ""] \
   [list "Build liblto-3.a" \
    "" "-flto $lto_fat" \
    {lto-3b.c} {} "liblto-3.a"] \
   [list "Compile 5a" \
    "" "-flto $lto_fat" \
    {lto-5a.c} {} ""] \
   [list "Compile 5b" \
    "" "-flto $lto_fat" \
    {lto-5b.c} {} ""] \
   [list "LTO 6" \
    "-O2 -flto -fuse-linker-plugin" "" \
    {lto-6.c} {} "lto-6.exe" "c"] \
   [list "Compile PR ld/12365" \
    "" "-flto -O2 $lto_fat" \
    {pr12365a.c pr12365b.c pr12365c.c} {} ""] \
   [list "Compile 9" \
    "" "-O2 -finline -flto" \
    {lto-9.cc} {} "" "c++"] \
   [list "Compile 11a" \
    "" "-O -flto" \
    {lto-11a.c} {} ""] \
   [list "Compile 11b" \
    "" "-O -flto" \
    {lto-11b.c} {} ""] \
   [list "Compile 11c" \
    "" "-O" \
    {lto-11c.c} {} ""] \
   [list "Build liblto-12.a" \
    "$plug_opt" "-O2 -flto" \
    {lto-12c.c} {} "liblto-12.a"] \
   [list "Compile 12" \
    "" "-O2 -flto" \
    {lto-12a.c lto-12b.c} {} ""] \
   [list "Compile 13" \
    "" "-O2 -flto" \
    {lto-13a.c lto-13b.c} {} ""] \
   [list "Build liblto-13.a" \
    "" "-O2" \
    {lto-13c.c} {} "liblto-13.a"] \
   [list "Compile 14a" \
    "" "-flto" \
    {lto-14a.c lto-14b.c} {} ""] \
   [list "Build liblto-14.a" \
    "$plug_opt" "-flto" \
    {lto-14c.c} {} "liblto-14.a"] \
   [list "Compile 15a" \
    "" "-flto" \
    {lto-15a.c} {} ""] \
   [list "Build liblto-15.a" \
    "$plug_opt" "-flto" \
    {lto-15b.c} {} "liblto-15.a"] \
   [list "PR ld/12696" \
    "-O2 -flto -fuse-linker-plugin -r -nostdlib" "-O2 -flto" \
    {pr12696-1.cc} {} "pr12696-1r.o" "c++"] \
   [list "Compile PR ld/12758" \
    "" "" \
    {pr12758a.s} {} ""] \
   [list "Build libpr12758.a" \
    "" "-flto -O2 $lto_fat" \
    {pr12758b.c} {} "libpr12758.a"] \
   [list "PR ld/12758" \
    "-O2 -Wl,-e,foo -nostdlib -flto -fuse-linker-plugin tmpdir/pr12758a.o -Wl,--start-group tmpdir/libpr12758.a -Wl,--end-group" "" \
    {dummy.c} {} "pr12758.exe"] \
   [list "Compile PR ld/12760" \
    "" "-g -O0" \
    {pr12760a.c} {} ""] \
   [list "Build libpr12760.a" \
    "" "-flto -O2 $lto_fat" \
    {pr12760b.c} {} "libpr12760.a"] \
   [list "PR ld/12760" \
    "-O2 -Wl,-e,foo -nostdlib -flto -fuse-linker-plugin tmpdir/pr12760a.o -Wl,--start-group tmpdir/libpr12760.a -Wl,--end-group" "" \
    {dummy.c} {{warning "pr12760a.c:6: warning: Bad \\.?bar"}} \
    "pr12760.exe" "c"] \
   [list "Build libpr13183.a" \
    "-T" "-flto -O2 $lto_fat" \
    {pr13183a.c} {} "libpr13183.a"] \
   [list "Compile PR ld/13183" \
    "" "-flto -O2" \
    {pr13183b.c} {} ""] \
   [list "Compile PR ld/13201" \
    "" "-flto -O2" \
    {pr13201.c} {} ""] \
   [list "PR ld/13287" \
    "-flto -fuse-linker-plugin -Wl,--as-needed" "-flto" \
    {pr13287.cc} {} "pr13287.exe" "c++"] \
   [list "PR ld/15323 (1)" \
    "" "-O2" \
    {pr15323a.c} {} "" "c"] \
   [list "PR ld/15323 (2)" \
    "-O2 -flto -r -nostdlib" "-O2 -flto" \
    {pr15323a.c} {} "pr15323a-r.o" "c"] \
   [list "Compile(1) PR ld/pr16846" \
    "" "-flto" \
    {pr16846a.c pr16846b.c} {} ""] \
   [list "Compile(2) PR ld/pr16846" \
    "" "" \
    {pr16846c.c} {} ""] \
   [list "PR ld/pr16846(1)" \
    "-flto -fuse-linker-plugin tmpdir/pr16846a.o tmpdir/pr16846b.o tmpdir/pr16846c.o" "" \
    {dummy.c} {} "pr16846a.exe"] \
   [list "PR ld/pr16846(2)" \
    "-flto -fuse-linker-plugin tmpdir/pr16846a.o tmpdir/pr16846c.o tmpdir/pr16846b.o" "" \
    {dummy.c} {} "pr16846b.exe"] \
   [list "PR ld/19317 (1)" \
    "$plug_opt" "-flto $lto_no_fat" \
    {pr19317.c} {} "libpr19317.a"] \
   [list "Build pr20276a.o" \
    "" "-fno-lto -fcommon" \
    {pr20276a.c}] \
   [list "Build pr20276b.o" \
    "$plug_opt" "-flto $lto_no_fat -fcommon" \
    {pr20276b.c}] \
   [list "Build pr20267a.o" \
    "" "-fcommon" \
    {pr20267a.c}] \
   [list "Build libpr20267a.a" \
    "$plug_opt" "-flto $lto_fat -fcommon" \
    {pr20267b.c} {} "libpr20267a.a"] \
   [list "Build libpr20267b.a" \
    "$plug_opt" "-flto $lto_no_fat -fcommon" \
    {pr20267b.c} {} "libpr20267b.a"] \
   [list "Build pr20321" \
    "-flto -Wl,-plugin,$plug_so" "-flto" \
    {pr20321.c} {{warning ".*: duplicated plugin"}} \
    "pr20321" "c"] \
   [list "Build pr22502a.o" \
    "" "" \
    {pr22502a.c}] \
   [list "Build pr22502b.o" \
    "$plug_opt" "-flto $lto_no_fat" \
    {pr22502b.c}] \
   [list "Build pr22751.a" \
    "$plug_opt" "-flto $lto_no_fat $INT128_CFLAGS" \
    {pr22751.c} {} "pr22751.a"] \
   [list "Build libpr23818.so" \
    "-shared -flto -g -Wl,-version-script,pr23818.t" \
    "-g -flto $lto_fat" \
    {pr23818a.c pr23818b.c} \
    {{"readelf" {-s --wide} "pr23818.d"}} \
    "libpr23818.so"] \
   [list "Build libpr23958.so" \
    "-shared -flto -Wl,-version-script,pr23958.t" \
    "-g -flto $lto_fat" \
    {pr23958.c} \
    "" \
    "libpr23958.so"] \
   [list "Build pr24406-2b.o" \
    "" "-O2 -fno-lto" \
    {pr24406-2b.c}] \
+  [list "pr25355.o" \
+   "" \
+   "-flto -fno-common $lto_no_fat" \
+   {pr25355.c} \
+   [list [list "nm" "$plug_opt" "pr25355.d"]]] \
 ]
 
 if { [at_least_gcc_version 4 7] } {
diff --git a/ld/testsuite/ld-plugin/pr25355.c b/ld/testsuite/ld-plugin/pr25355.c
new file mode 100644
index 00000000000..99f01fb5c89
--- /dev/null
+++ b/ld/testsuite/ld-plugin/pr25355.c
@@ -0,0 +1,2 @@
+int nm_test_var;
+int nm_test_var2 = 1234;
diff --git a/ld/testsuite/ld-plugin/pr25355.d b/ld/testsuite/ld-plugin/pr25355.d
new file mode 100644
index 00000000000..98d10aba1cf
--- /dev/null
+++ b/ld/testsuite/ld-plugin/pr25355.d
@@ -0,0 +1,4 @@
+#...
+[0-9a-f]+ B _?nm_test_var
+[0-9a-f]+ D _?nm_test_var2
+#pass
diff --git a/ld/testsuite/lib/ld-lib.exp b/ld/testsuite/lib/ld-lib.exp
index 08e2d6978af..015eda6eb97 100644
--- a/ld/testsuite/lib/ld-lib.exp
+++ b/ld/testsuite/lib/ld-lib.exp
@@ -800,246 +800,247 @@ proc run_ld_link_exec_tests { ldtests args } {
 # List contains test-items with 3 items followed by 2 lists, one item and
 # one optional item:
 #  0:name
 #  1:ld or ar options
 #  2:compile options
 #  3:filenames of source files
 #  4:action and options.
 #  5:name of output file
 #  6:language (optional)
 #
 # Actions:
 # objdump: Apply objdump options on result.  Compare with regex (last arg).
 # nm: Apply nm options on result.  Compare with regex (last arg).
 # readelf: Apply readelf options on result.  Compare with regex (last arg).
 # warning: Check linker output against regex (last arg).
 # error: Like 'warning' but checking output in error case.
 # warning_output: Check linker output against regex in a file (last arg).
 # error_output: Like 'warning_output' but checking output in error case.
 #
 proc run_cc_link_tests { ldtests } {
     global nm
     global objdump
     global READELF
     global srcdir
     global subdir
     global env
     global CC
     global CXX
     global CFLAGS
     global CXXFLAGS
     global ar
     global exec_output
     global board_cflags
     global STATIC_LDFLAGS
 
     if [board_info [target_info name] exists cflags] {
         set board_cflags " [board_info [target_info name] cflags]"
     } else {
 	set board_cflags ""
     }
 
     foreach testitem $ldtests {
 	set testname [lindex $testitem 0]
 	set ldflags [lindex $testitem 1]
 	set cflags [lindex $testitem 2]
 	set src_files  [lindex $testitem 3]
 	set actions [lindex $testitem 4]
 	set binfile tmpdir/[lindex $testitem 5]
 	set lang [lindex $testitem 6]
 	set objfiles {}
 	set is_unresolved 0
 	set failed 0
 	set check_ld(terminal) 0
 	set check_ld(source) ""
 
 	if { ![check_compiler_available] } {
 	    unsupported $testname
 	    continue
 	}
 
 	#verbose -log "testname  is $testname"
 	#verbose -log "ldflags   is $ldflags"
 	#verbose -log "cflags    is $cflags"
 	#verbose -log "src_files is $src_files"
 	#verbose -log "actions   is $actions"
 	#verbose -log "binfile   is $binfile"
 	#verbose -log "lang      is $lang"
 
 	foreach actionlist $actions {
 	    set action [lindex $actionlist 0]
 	    set progopts [lindex $actionlist 1]
 
 	    # Find actions related to error/warning processing.
 	    switch -- $action {
 	        error
 	        {
 	            set check_ld(source) "regexp"
 	            set check_ld(regexp) $progopts
 	            set check_ld(terminal) 1
 	        }
 	        warning
 	        {
 	            set check_ld(source) "regexp"
 	            set check_ld(regexp) $progopts
 	        }
 	        error_output
 	        {
 	            set check_ld(source) "file"
 	            set check_ld(file) $progopts
 	            set check_ld(terminal) 1
 	        }
 	        warning_output
 	        {
 	            set check_ld(source) "file"
 	            set check_ld(file) $progopts
 	        }
 	    }
 	}
 
 	# Compile each file in the test.
 	foreach src_file $src_files {
 	    set fileroot "[file rootname [file tail $src_file]]"
 	    set objfile "tmpdir/$fileroot.o"
 	    lappend objfiles $objfile
 
 	    if { [ string match "c++" $lang ] } {
 		set cmd "$CXX -c $CXXFLAGS $cflags"
 	    } else {
 		set cmd "$CC -c $CFLAGS $cflags"
 	    }
 	    if ![ld_compile $cmd $srcdir/$subdir/$src_file $objfile] {
 		set failed 1
 		break
 	    }
 	}
 	if { $failed != 0 } {
 	    unresolved $testname
 	    continue
 	}
 
 	# Clear error and warning counts.
 	reset_vars
 
 	if { [ string match "c++" $lang ] } {
 	    set cc_cmd $CXX
 	} else {
 	    set cc_cmd $CC
 	}
 
 	if { $binfile eq "tmpdir/" } {
 	    # compile only
+	    set binfile $objfile
 	} elseif { [regexp ".*\\.a$" $binfile] } {
 	    if { ![ar_simple_create $ar $ldflags $binfile "$objfiles"] } {
 		set failed 1
 	    }
 	} else {
 	    if { [string match "" $STATIC_LDFLAGS] \
 		 && [regexp -- ".* \[-\]+static .*" " $board_cflags $ldflags $objfiles "] } {
 		untested $testname
 		continue
 	    }
 	    ld_link $cc_cmd $binfile "$board_cflags -L$srcdir/$subdir $ldflags $objfiles"
 	    set ld_output "$exec_output"
 
 	    if { $check_ld(source) == "regexp" } then {
 		# Match output against regexp argument.
 		verbose -log "returned with: <$ld_output>, expected: <$check_ld(regexp)>"
 		if { ![regexp $check_ld(regexp) $ld_output] } then {
 		    set failed 1
 		}
 	    } elseif { $check_ld(source) == "file" } then {
 		# Match output against patterns in a file.
 		set_file_contents "tmpdir/ld.messages" "$ld_output"
 		verbose "ld.messages has '[file_contents tmpdir/ld.messages]'"
 		if { [regexp_diff "tmpdir/ld.messages" "$srcdir/$subdir/$check_ld(file)"] } then {
 		    verbose "output is $ld_output" 2
 		    set failed 1
 		}
 	    }
 
 	    if { $check_ld(source) != "" } then {
                 if { $ld_output == "" } then {
                     verbose -log "Linker was expected to give error or warning"
                     set failed 1
                 }
 	    } else {
                 if { $ld_output != "" } then {
                     verbose -log "Unexpected linker warning or error"
                     set failed 1
                 }
 	    }
 	}
 
 	if { $failed == 0 } {
 	    foreach actionlist $actions {
 		set action [lindex $actionlist 0]
 		set progopts [lindex $actionlist 1]
 
 		# There are actions where we run regexp_diff on the
 		# output, and there are other actions (presumably).
 		# Handling of the former look the same.
 		set dump_prog ""
 		switch -- $action {
 		    objdump
 		        { set dump_prog $objdump }
 		    nm
 		        { set dump_prog $nm }
 		    readelf
 		        { set dump_prog $READELF }
 		    error {}
 		    warning {}
 		    error_output {}
 		    warning_output {}
 		    default
 			{
 			    perror "Unrecognized action $action"
 			    set is_unresolved 1
 			    break
 			}
 		    }
 
 		if { $dump_prog != "" } {
 		    set dumpfile [lindex $actionlist 2]
 		    set binary $dump_prog
 
 		    # Ensure consistent sorting of symbols
 		    if {[info exists env(LC_ALL)]} {
 			set old_lc_all $env(LC_ALL)
 		    }
 		    set env(LC_ALL) "C"
 		    set cmd "$binary $progopts $binfile > dump.out"
 		    send_log "$cmd\n"
 		    catch "exec $cmd" comp_output
 		    if {[info exists old_lc_all]} {
 			set env(LC_ALL) $old_lc_all
 		    } else {
 			unset env(LC_ALL)
 		    }
 		    set comp_output [prune_warnings $comp_output]
 
 		    if ![string match "" $comp_output] then {
 			send_log "$comp_output\n"
 			set failed 1
 			break
 		    }
 
 		    if { [regexp_diff "dump.out" "$srcdir/$subdir/$dumpfile"] } then {
 			verbose "output is [file_contents "dump.out"]" 2
 			set failed 1
 			break
 		    }
 		}
 	    }
 	}
 
 	if { $failed } {
 	    fail $testname
 	} elseif { $is_unresolved } {
 	    unresolved $testname
 	} else {
 	    pass $testname
 	}
     }
 }
 
 # Returns true if --gc-sections is supported on the target.
