commit 2c824d3644e16643c2bbe85fb88f9fb6fed53ce7
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Thu Oct 11 16:41:01 2018 -0400

    [aat] Fix two wrongs that made a right before!
    
    Unfortunately our static asserts (DEFINE_SIZE_STATIC) don't actually
    fail when used in templates, thanks to SFINAE.  Le sighs.
    
    Probably fixes https://oss-fuzz.com/v2/testcase-detail/5740171484463104

diff --git a/src/hb-aat-layout-common.hh b/src/hb-aat-layout-common.hh
index 5be3d372e..4e3e4d17b 100644
--- a/src/hb-aat-layout-common.hh
+++ b/src/hb-aat-layout-common.hh
@@ -149,26 +149,26 @@ template <typename T>
 struct LookupFormat4
 {
   friend struct Lookup<T>;
 
   private:
   inline const T* get_value (hb_codepoint_t glyph_id) const
   {
     const LookupSegmentArray<T> *v = segments.bsearch (glyph_id);
     return v ? v->get_value (glyph_id, this) : nullptr;
   }
 
   inline bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     return_trace (segments.sanitize (c, this));
   }
 
   protected:
-  HBUINT16	format;		/* Format identifier--format = 2 */
+  HBUINT16	format;		/* Format identifier--format = 4 */
   VarSizedBinSearchArrayOf<LookupSegmentArray<T> >
 		segments;	/* The actual segments. These must already be sorted,
 				 * according to the first word in each one (the last
 				 * glyph in each segment). */
   public:
   DEFINE_SIZE_ARRAY (8, segments);
 };
@@ -177,17 +177,17 @@ template <typename T>
 struct LookupSingle
 {
   inline int cmp (hb_codepoint_t g) const { return glyph.cmp (g); }
 
   inline bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     return_trace (c->check_struct (this) && value.sanitize (c));
   }
 
   GlyphID	glyph;		/* Last GlyphID */
   T		value;		/* The lookup value (only one) */
   public:
-  DEFINE_SIZE_STATIC (4 + T::static_size);
+  DEFINE_SIZE_STATIC (2 + T::static_size);
 };
 
 template <typename T>
diff --git a/src/hb-open-type.hh b/src/hb-open-type.hh
index 2eae09d5c..0aea6423e 100644
--- a/src/hb-open-type.hh
+++ b/src/hb-open-type.hh
@@ -770,82 +770,82 @@ template <typename Type>
 struct VarSizedBinSearchArrayOf
 {
   inline const Type& operator [] (unsigned int i) const
   {
     if (unlikely (i >= header.nUnits)) return Null(Type);
     return StructAtOffset<Type> (&bytesZ, i * header.unitSize);
   }
   inline Type& operator [] (unsigned int i)
   {
     return StructAtOffset<Type> (&bytesZ, i * header.unitSize);
   }
   inline unsigned int get_size (void) const
   { return header.static_size + header.nUnits * header.unitSize; }
 
   inline bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     if (unlikely (!sanitize_shallow (c))) return_trace (false);
 
     /* Note: for structs that do not reference other structs,
      * we do not need to call their sanitize() as we already did
      * a bound check on the aggregate array size.  We just include
      * a small unreachable expression to make sure the structs
      * pointed to do have a simple sanitize(), ie. they do not
      * reference other structs via offsets.
      */
     (void) (false && StructAtOffset<Type> (&bytesZ, 0).sanitize (c));
 
     return_trace (true);
   }
   inline bool sanitize (hb_sanitize_context_t *c, const void *base) const
   {
     TRACE_SANITIZE (this);
     if (unlikely (!sanitize_shallow (c))) return_trace (false);
     unsigned int count = header.nUnits;
     for (unsigned int i = 0; i < count; i++)
       if (unlikely (!(*this)[i].sanitize (c, base)))
         return_trace (false);
     return_trace (true);
   }
 
   template <typename T>
   inline const Type *bsearch (const T &key) const
   {
     unsigned int size = header.unitSize;
     int min = 0, max = (int) header.nUnits - 1;
     while (min <= max)
     {
       int mid = (min + max) / 2;
       const Type *p = (const Type *) (((const char *) &bytesZ) + (mid * size));
       int c = p->cmp (key);
       if (c < 0)
 	max = mid - 1;
       else if (c > 0)
 	min = mid + 1;
       else
 	return p;
     }
     return nullptr;
   }
 
   private:
   inline bool sanitize_shallow (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     return_trace (header.sanitize (c) &&
-		  Type::static_size >= header.unitSize &&
+		  Type::static_size <= header.unitSize &&
 		  c->check_array (bytesZ.arrayZ, header.nUnits, header.unitSize));
   }
 
   protected:
   VarSizedBinSearchHeader	header;
   UnsizedArrayOf<HBUINT8>	bytesZ;
   public:
   DEFINE_SIZE_ARRAY (10, bytesZ);
 };
 
 
 } /* namespace OT */
 
 
 #endif /* HB_OPEN_TYPE_HH */
