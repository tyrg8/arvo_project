commit 1df61193e94b8d09537272a256ce19eefffa4257
Author: Gary E. Miller <gem@rellim.com>
Date:   Sun Oct 2 20:23:14 2022 -0700

    libgps/gpsutils.c: safe_atof() handle exponent overflow/underflow.
    
    Overflow returns INFINITY (per C99), underflow returns 0.0
    Clean up the matching tests.

diff --git a/libgps/gpsutils.c b/libgps/gpsutils.c
index 403d7744b..dc796e2d0 100644
--- a/libgps/gpsutils.c
+++ b/libgps/gpsutils.c
@@ -40,201 +40,208 @@
 /* Takes a decimal ASCII floating-point number, optionally
  * preceded by white space.  Must have form "SI.FE-X",
  * S may be ither of the signs may be "+", "-", or omitted.
  * I is the integer part of the mantissa,
  * F is the fractional part of the mantissa,
  * X is the exponent.
  * Either I or F may be omitted, or both.
  * The decimal point isn't necessary unless F is
  * present.  The "E" may actually be an "e".  E and X
  * may both be omitted (but not just one).
  *
  * returns NaN if:
  *    *string is zero length,
  *    the first non-white space is not negative sign ('-'), positive sign ('_')
  *    or a digit
  */
 double safe_atof(const char *string)
 {
     static int maxExponent = 511;   /* Largest possible base 10 exponent.  Any
                                      * exponent larger than this will already
                                      * produce underflow or overflow, so there's
                                      * no need to worry about additional digits.
                                      */
     /* Table giving binary powers of 10.  Entry is 10^2^i.
      * Used to convert decimal exponents into floating-point numbers. */
     static double powersOf10[] = {
         10.,
         100.,
         1.0e4,
         1.0e8,
         1.0e16,
         1.0e32,
         1.0e64,
         1.0e128,
         1.0e256
     };
 
     bool sign = false, expSign = false;
     double fraction, dblExp, *d;
     const char *p;
     int c;
     int exp = 0;                // Exponent read from "EX" field.
     int fracExp = 0;            /* Exponent that derives from the fractional
                                  * part.  Under normal circumstatnces, it is
                                  * the negative of the number of digits in F.
                                  * However, if I is very long, the last digits
                                  * of I get dropped (otherwise a long I with a
                                  * large negative exponent could cause an
                                  * unnecessary overflow on I alone).  In this
                                  * case, fracExp is incremented one for each
                                  * dropped digit. */
     int mantSize;               // Number of digits in mantissa.
     int decPt;                  /* Number of mantissa digits BEFORE decimal
                                  * point. */
     const char *pExp;           /* Temporarily holds location of exponent
                                  * in string. */
 
     /*
      * Strip off leading blanks and check for a sign.
      */
 
     p = string;
     while (isspace((int)*p)) {
         p += 1;
     }
     if (isdigit((int)*p)) {
         // ignore
     } else if ('-' == *p) {
         sign = true;
         p += 1;
     } else if ('+' == *p) {
         p += 1;
     } else if ('.' == *p) {
         // ignore
     } else {
         return NAN;
     }
 
     /*
      * Count the number of digits in the mantissa (including the decimal
      * point), and also locate the decimal point.
      */
 
     decPt = -1;
     for (mantSize = 0; ; mantSize += 1) {
         c = *p;
         if (!isdigit((int)c)) {
             if ((c != '.') || (decPt >= 0)) {
                 break;
             }
             decPt = mantSize;
         }
         p += 1;
     }
 
     /*
      * Now suck up the digits in the mantissa.  Use two integers to
      * collect 9 digits each (this is faster than using floating-point).
      * If the mantissa has more than 18 digits, ignore the extras, since
      * they can't affect the value anyway.
      */
 
     pExp  = p;
     p -= mantSize;
     if (decPt < 0) {
         decPt = mantSize;
     } else {
         mantSize -= 1;                  // One of the digits was the point.
     }
     if (mantSize > 18) {
         fracExp = decPt - 18;
         mantSize = 18;
     } else {
         fracExp = decPt - mantSize;
     }
     if (mantSize == 0) {
         fraction = 0.0;
         // p = string;
         goto done;
     } else {
         int frac1, frac2;
 
         frac1 = 0;
         for ( ; mantSize > 9; mantSize -= 1) {
             c = *p;
             p += 1;
             if ('.' == c) {
                 c = *p;
                 p += 1;
             }
             frac1 = 10*frac1 + (c - '0');
         }
         frac2 = 0;
         for (; mantSize > 0; mantSize -= 1) {
             c = *p;
             p += 1;
             if ('.' == c) {
                 c = *p;
                 p += 1;
             }
             frac2 = 10*frac2 + (c - '0');
         }
         fraction = (1.0e9 * frac1) + frac2;
     }
 
     /*
      * Skim off the exponent.
      */
 
     p = pExp;
     if (('E' == *p) ||
         ('e' == *p)) {
         p += 1;
         if ('-' == *p) {
             expSign = true;
             p += 1;
         } else {
             if ('+' == *p) {
                 p += 1;
             }
             expSign = false;
         }
         while (isdigit((int) *p)) {
             exp = exp * 10 + (*p - '0');
+            if (1024 < exp) {
+                if (true == expSign) {
+                    // exponent underflow!
+                    return 0.0;
+                } // else  exponent overflow!
+                return INFINITY;
+            }
             p += 1;
         }
     }
     if (expSign) {
         exp = fracExp - exp;
     } else {
         exp = fracExp + exp;
     }
 
     /*
      * Generate a floating-point number that represents the exponent.
      * Do this by processing the exponent one bit at a time to combine
      * many powers of 2 of 10. Then combine the exponent with the
      * fraction.
      */
 
     if (0 > exp) {
         expSign = true;
         exp = -exp;
     } else {
         expSign = false;
     }
     if (exp > maxExponent) {
         exp = maxExponent;
         errno = ERANGE;
     }
     dblExp = 1.0;
     for (d = powersOf10; exp != 0; exp >>= 1, d += 1) {
         if (exp & 01) {
             dblExp *= *d;
         }
     }
     if (expSign) {
         fraction /= dblExp;
     } else {
         fraction *= dblExp;
     }
diff --git a/tests/test_json.c b/tests/test_json.c
index 9340ce452..106dcd6c0 100644
--- a/tests/test_json.c
+++ b/tests/test_json.c
@@ -1,19 +1,20 @@
 /* json.c - unit test for JSON parsing into fixed-extent structures
  *
  * This file is Copyright 2010 by the GPSD project
  * SPDX-License-Identifier: BSD-2-clause
  */
 
 #include "../include/gpsd_config.h"
 
 #include <getopt.h>
 #include <stddef.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <time.h>              // for struct timespec
+#include <time.h>                 // for struct timespec
 
+#include "../include/gps.h"       // for safe_atof()
 #include "../include/gpsd.h"
 #include "../include/gps_json.h"
 
 // Note: JSON_MINIMAL no longer exists
@@ -130,9 +131,9 @@ static void assert_real(char *attr, double fld, double val)
 
 static struct gps_data_t gpsdata;
 
-/* Case 1: TPV report */
+// Case 1: TPV report
 
-/* *INDENT-OFF* */
+// *INDENT-OFF*
 static const char json_str1[] =
     "{\"class\":\"TPV\","
     "\"device\":\"GPS#1\",\"time\":\"2005-06-19T08:12:41.89Z\","
@@ -149,15 +150,15 @@ static const char json_str1[] =
 static const char *json_str2 = "{\"class\":\"SKY\",\
          \"time\":\"2005-06-19T12:12:42.03Z\",\"nSat\":6,  \
          \"satellites\":[\
          {\"PRN\":10,\"el\":45,\"az\":196,\"ss\":34,\"used\":true},\
          {\"PRN\":29,\"el\":67,\"az\":310,\"ss\":40,\"used\":true},\
          {\"PRN\":28,\"el\":59,\"az\":108,\"ss\":42,\"used\":true},\
          {\"PRN\":26,\"el\":51,\"az\":304,\"ss\":43,\"used\":true},\
          {\"PRN\":8,\"el\":44,\"az\":58,\"ss\":41,\"used\":true},\
          {\"PRN\":27,\"el\":16,\"az\":66,\"ss\":39,\"used\":true},\
          {\"az\":301,\"el\":10,\"PRN\":21,\"used\":false,\"ss\":0}]}";
 
-/* Case 3: String list syntax */
+// Case 3: String list syntax
 
 static const char *json_str3 = "[\"foo\",\"bar\",\"baz\"]";
 
@@ -168,13 +169,13 @@ static int stringcount;
 static const struct json_array_t json_array_3 = {
     .element_type = t_string,
     .arr.strings.ptrs = stringptrs,
     .arr.strings.store = stringstore,
     .arr.strings.storelen = sizeof(stringstore),
     .count = &stringcount,
     .maxlen = sizeof(stringptrs)/sizeof(stringptrs[0]),
 };
 
-/* Case 4: test defaulting of unspecified attributes */
+// Case 4: test defaulting of unspecified attributes
 
 static const char *json_str4 = "{\"flag1\":true,\"flag2\":false}";
 
@@ -198,35 +199,35 @@ static struct timespec maxts;
 static const struct json_attr_t json_attrs_4[] = {
     // t_byte can be signed, or unsigned, so can only use range 0 - 127
     {"dftbyte",  t_byte, .addr.byte = &dftbyte, .dflt.byte = 1},
     {"dftubyte", t_ubyte, .addr.ubyte = &dftubyte, .dflt.ubyte = 9},
     {"dftint",  t_integer, .addr.integer = &dftinteger, .dflt.integer = -5},
     {"dftuint", t_uinteger, .addr.uinteger = &dftuinteger, .dflt.uinteger = 10},
     {"dftlongint",  t_longint, .addr.longint = &dftlongint, .dflt.longint = -6},
     {"dftulongint", t_ulongint, .addr.ulongint = &dftulongint,
      .dflt.ulongint = 11},
     {"dftreal", t_real,    .addr.real = &dftreal,       .dflt.real = 23.17},
     {"maxbyte",  t_byte, .addr.byte = &maxbyte, .dflt.byte = 127},
     {"minbyte",  t_byte, .addr.byte = &minbyte, .dflt.byte = 0},
     {"maxint",  t_integer, .addr.integer = &maxint, .dflt.integer = 32767},
     {"minint",  t_integer, .addr.integer = &minint, .dflt.integer = -32767},
     {"maxuint",  t_uinteger, .addr.uinteger = &maxuint, .dflt.uinteger = 65535},
     {"flag1",   t_boolean, .addr.boolean = &flag1,},
     {"flag2",   t_boolean, .addr.boolean = &flag2,},
     {"dftts",  t_timespec, .addr.ts = &ts, .dflt.ts = {0,0}},
     {"maxts",  t_timespec, .addr.ts = &maxts, .dflt.ts = {0x0ffff,9}},
     {NULL},
 };
 
-/* Case 5: test DEVICE parsing */
+// Case 5: test DEVICE parsing
 
 static const char *json_str5 = "{\"class\":\"DEVICE\",\
            \"path\":\"/dev/ttyUSB0\",\
            \"flags\":5,\
            \"driver\":\"Foonly\",\"subtype\":\"Foonly Frob\",\
            \"cycle\":1.1,\"mincycle\":0.002\
            }";
 
-/* Case 6: test parsing of subobject list into array of structures */
+// Case 6: test parsing of subobject list into array of structures
 
 static const char *json_str6 = "{\"parts\":[\
            {\"name\":\"Urgle\", \"flag\":true, \"count\":3},\
@@ -253,21 +254,21 @@ static const struct json_attr_t json_attrs_6_subtype[] = {
 static const struct json_attr_t json_attrs_6[] = {
     {"parts", t_array,
      .addr.array.element_type = t_structobject,
      .addr.array.arr.objects.base = (char*)&dumbstruck,
      .addr.array.arr.objects.stride = sizeof(struct dumbstruct_t),
      .addr.array.arr.objects.subtype = json_attrs_6_subtype,
      .addr.array.count = &dumbcount,
      .addr.array.maxlen = sizeof(dumbstruck)/sizeof(dumbstruck[0])},
     {NULL},
 };
 
-/* Case 7: test parsing of version response */
+// Case 7: test parsing of version response
 
 static const char *json_str7 = "{\"class\":\"VERSION\",\
            \"release\":\"" VERSION "\",\"rev\":\"dummy-revision\",\
            \"proto_major\":3,\"proto_minor\":1}";
 
-/* Case 8: test parsing arrays of enumerated types */
+// Case 8: test parsing arrays of enumerated types
 
 static const char *json_str8 =
      "{\"fee\":\"FOO\",\"fie\":\"BAR\",\"foe\":\"BAZ\"}";
@@ -279,44 +280,44 @@ static int fee, fie, foe;
 static const struct json_attr_t json_attrs_8[] = {
     {"fee",  t_integer, .addr.integer = &fee, .map=enum_table},
     {"fie",  t_integer, .addr.integer = &fie, .map=enum_table},
     {"foe",  t_integer, .addr.integer = &foe, .map=enum_table},
     {NULL},
 };
 
-/* Case 9: Like case 6 but w/ an empty array */
+// Case 9: Like case 6 but w/ an empty array
 
 static const char *json_str9 = "{\"parts\":[]}";
 
-/* Case 10: test parsing of PPS message  */
+// Case 10: test parsing of PPS message
 
 static const char *json_strPPS = "{\"class\":\"PPS\",\"device\":\"GPS#1\"," \
     "\"real_sec\":1428001514, \"real_nsec\":1000000," \
     "\"clock_sec\":1428001513,\"clock_nsec\":999999999," \
     "\"precision\":-20,\"qErr\":-123456}";
 
-/* Case 11: test parsing of TOFF message  */
+// Case 11: test parsing of TOFF message
 
 static const char *json_strTOFF = "{\"class\":\"TOFF\",\"device\":\"GPS#1\"," \
     "\"real_sec\":1428001514, \"real_nsec\":1000000," \
     "\"clock_sec\":1428001513,\"clock_nsec\":999999999}";
 
-/* Case 12: test parsing of OSC message */
+// Case 12: test parsing of OSC message
 
 static const char *json_strOSC = "{\"class\":\"OSC\",\"device\":\"GPS#1\"," \
     "\"running\":true,\"reference\":true,\"disciplined\":false," \
     "\"delta\":67}";
 
-/* Case 13: test parsing of ERROR message, and some escape sequences */
+// Case 13: test parsing of ERROR message, and some escape sequences
 
 static char *json_strErr = "{\"class\":\"ERROR\",\"message\":" \
                            "\"Hello\b\f\n\r\t\"}";
 
-/* Case 14: test parsing of ERROR message and \u escape */
-/* per ECMA-404, \u must be followed by 4 hex digits */
+// Case 14: test parsing of ERROR message and \u escape
+// per ECMA-404, \u must be followed by 4 hex digits
 
 static char *json_strErr1 = "{\"class\":\"ERROR\",\"message\":\"0\\u00334\"}";
 
-/* Case 15: test buffer overflow of short string destination */
+// Case 15: test buffer overflow of short string destination
 
 static char *json_strOver = "{\"name\":\"\\u0033\\u0034\\u0035\\u0036\"}";
 
@@ -325,16 +326,16 @@ int json_short_string_cnt = 5;
 static const struct json_attr_t json_short_string[] = {
     {"name", t_string,
         .addr.string = json_short_string_dst,
         .len = sizeof(json_short_string_dst)},
     {"count", t_integer, .addr.integer = &json_short_string_cnt},
     {NULL},
 };
 
-/* Case 16: test buffer overflow of short string destination */
+// Case 16: test buffer overflow of short string destination
 
-static char json_strOver2[7 * JSON_VAL_MAX];  /* dynamically built */
+static char json_strOver2[7 * JSON_VAL_MAX];  // dynamically built
 
-/* Case 18: Ignore part of VERSION sentence */
+// Case 18: Ignore part of VERSION sentence
 
 static char *json_str18 =
     "{\"class\":\"VERSION\",\"release\":\"" VERSION "\","
@@ -345,13 +346,13 @@ int pvhi, pvlo;
 static const struct json_attr_t json_attrs_18[] = {
     {"class", t_check, .dflt.check = "VERSION"},
     {"release", t_string, .addr.string = (char *)&release, .len = 50},
     {"proto_major", t_integer, .addr.integer = &pvhi},
     {"proto_minor", t_integer, .addr.integer = &pvlo},
     {"", t_ignore},
     {NULL},
 };
 
-/* Case 19: Ignore part of WATCH sentence */
+// Case 19: Ignore part of WATCH sentence
 
 static char *json_str19 =
     "{\"class\":\"WATCH\",\"enable\":true,\"json\":true,\"nmea\":false,\"raw\":"
@@ -362,13 +363,13 @@ bool enable, json;
 static const struct json_attr_t json_attrs_19[] = {
     {"class", t_check, .dflt.check = "WATCH"},
     {"device", t_check, .dflt.check = "/dev/ttyUSB0"},
     {"enable", t_boolean, .addr.boolean = &enable},
     {"json", t_boolean, .addr.boolean = &json},
     {"", t_ignore},
     {NULL},
 };
 
-/* Case 20: Ignore part of TPV sentence */
+// Case 20: Ignore part of TPV sentence
 
 static char *json_str20 =
     "{\"class\":\"TPV\",\"device\":\"/dev/"
@@ -387,14 +388,14 @@ char gps_time[50];
 static const struct json_attr_t json_attrs_20[] = {
     {"class", t_check, .dflt.check = "TPV"},
     {"device", t_check, .dflt.check = "/dev/ttyUSB0"},
     {"mode", t_integer, .addr.integer = &gps_mode, .dflt.integer = -1},
     {"time", t_string, .addr.string = (char *)&gps_time, .len = 50},
     {"ept", t_real, .addr.real = &ept, .dflt.real = NAN},
     {"", t_ignore},
     {NULL},
 };
 
-/* Case 21: Read array of integers */
+// Case 21: Read array of integers
 
 static const char *json_strInt = "[23,-17,5]";
 static int intstore[4], intcount;
@@ -402,11 +403,11 @@ static int intstore[4], intcount;
 static const struct json_array_t json_array_Int = {
     .element_type = t_integer,
     .arr.integers.store = intstore,
     .count = &intcount,
     .maxlen = sizeof(intstore)/sizeof(intstore[0]),
 };
 
-/* Case 22: Read array of booleans */
+// Case 22: Read array of booleans
 
 static const char *json_strBool = "[true,false,true]";
 static bool boolstore[4];
@@ -415,11 +416,11 @@ static int boolcount;
 static const struct json_array_t json_array_Bool = {
     .element_type = t_boolean,
     .arr.booleans.store = boolstore,
     .count = &boolcount,
     .maxlen = sizeof(boolstore)/sizeof(boolstore[0]),
 };
 
-/* Case 23: Read array of reals */
+// Case 23: Read array of reals
 
 static const char *json_strReal = "[23.1,-17.2,5.3]";
 static double realstore[4];
@@ -473,388 +474,422 @@ static const struct json_attr_t json_attrs_25[] = {
 
 
 char str32[] = "\f\n\r\t\v";
-/* *INDENT-ON* */
+// *INDENT-ON*
 
 static void jsontest(int i)
 {
-    int status = 0;   /* libgps_json_unpack() returned status */
-    int n;            /* generic index */
+    int status = 0;      // libgps_json_unpack() returned status
+    int n;               // generic index
     char buffer[500];
     char *pbuf;
     struct timespec expected_ts;
+    double d;
 
     if (0 < debug) {
         (void)fprintf(stderr, "Running test #%d.\n", i);
     }
     current_test = i;
 
-    /* do not keep old data! */
+    // do not keep old data!
     memset((void *)&gpsdata, 0, sizeof(gpsdata));
 
     switch (i)
     {
     case 1:
         status = libgps_json_unpack(json_str1, &gpsdata, NULL);
         assert_case(status);
         assert_string("device", gpsdata.dev.path, "GPS#1");
         assert_int("mode", "t_integer", gpsdata.fix.mode, 3);
         assert_int("time.tv_sec", "t_integer", gpsdata.fix.time.tv_sec,
                    1119168761);
         assert_int("time.tv_nsec", "t_integer",
                    gpsdata.fix.time.tv_nsec / 10000000, 89);
         assert_real("lon", gpsdata.fix.longitude, 46.498203637);
         assert_real("lat", gpsdata.fix.latitude, 7.568074350);
         break;
 
     case 2:
         status = libgps_json_unpack(json_str2, &gpsdata, NULL);
         assert_case(status);
         assert_int("used", "t_integer", gpsdata.satellites_used, 6);
         assert_int("PRN[0]", "t_integer", gpsdata.skyview[0].PRN, 10);
         assert_int("el[0]", "t_integer", gpsdata.skyview[0].elevation, 45);
         assert_int("az[0]", "t_integer", gpsdata.skyview[0].azimuth, 196);
         assert_real("ss[0]", gpsdata.skyview[0].ss, 34);
         assert_boolean("used[0]", gpsdata.skyview[0].used, true);
         assert_int("PRN[6]", "t_integer", gpsdata.skyview[6].PRN, 21);
         assert_int("el[6]", "t_integer", gpsdata.skyview[6].elevation, 10);
         assert_int("az[6]", "t_integer", gpsdata.skyview[6].azimuth, 301);
         assert_real("ss[6]", gpsdata.skyview[6].ss, 0);
         assert_boolean("used[6]", gpsdata.skyview[6].used, false);
         break;
 
     case 3:
         status = json_read_array(json_str3, &json_array_3, NULL);
         assert_case(status);
         assert_other("stringcount", stringcount, 3);
         assert_other("stringptrs[0] == foo", strcmp(stringptrs[0], "foo"), 0);
         assert_other("stringptrs[1] == bar", strcmp(stringptrs[1], "bar"), 0);
         assert_other("stringptrs[2] == baz", strcmp(stringptrs[2], "baz"), 0);
         break;
 
     case 4:
         status = json_read_object(json_str4, json_attrs_4, NULL);
         assert_case(status);
         // did the defaults work?
         assert_int("dftbyte", "t_byte", dftbyte, 1);
         assert_uint("dftubyte", "t_ubyte", dftubyte, 9);
         assert_int("dftint", "t_integer", dftinteger, -5);
         assert_uint("dftuint", "t_uinteger", dftuinteger, 10);
         assert_int("dftlongint", "t_longint", dftlongint, -6);
         assert_uint("dftulongint", "t_ulongint", dftulongint, 11);
         assert_real("dftreal", dftreal, 23.17);
         assert_int("maxbyte", "t_byte", maxbyte, 127);
         assert_int("minbyte", "t_byte", minbyte, 0);
         assert_int("maxint", "t_integer", maxint, 32767);
         assert_int("minint", "t_integer", minint, -32767);
         assert_int("maxuint", "t_uinteger", maxuint, 65535);
         assert_boolean("flag1", flag1, true);
         assert_boolean("flag2", flag2, false);
         expected_ts.tv_sec = 0;
         expected_ts.tv_nsec = 0;
         assert_ts("dflts", ts, expected_ts);
         expected_ts.tv_sec = 0x0ffff;
         expected_ts.tv_nsec = 9;
         assert_ts("maxts", maxts, expected_ts);
         break;
 
     case 5:
         status = libgps_json_unpack(json_str5, &gpsdata, NULL);
         assert_case(status);
         assert_string("path", gpsdata.dev.path, "/dev/ttyUSB0");
         assert_int("flags", "t_integer", gpsdata.dev.flags, 5);
         assert_string("driver", gpsdata.dev.driver, "Foonly");
         expected_ts.tv_sec = 1;
         expected_ts.tv_nsec = 100000000;
         assert_ts("cycle", gpsdata.dev.cycle, expected_ts);
         expected_ts.tv_sec = 0;
         expected_ts.tv_nsec = 2000000;
         assert_ts("mincycle", gpsdata.dev.mincycle, expected_ts);
         break;
 
     case 6:
         status = json_read_object(json_str6, json_attrs_6, NULL);
         assert_case(status);
         assert_int("dumbcount", "t_integer", dumbcount, 4);
         assert_string("dumbstruck[0].name", dumbstruck[0].name, "Urgle");
         assert_string("dumbstruck[1].name", dumbstruck[1].name, "Burgle");
         assert_string("dumbstruck[2].name", dumbstruck[2].name, "Witter");
         assert_string("dumbstruck[3].name", dumbstruck[3].name, "Thud");
         assert_boolean("dumbstruck[0].flag", dumbstruck[0].flag, true);
         assert_boolean("dumbstruck[1].flag", dumbstruck[1].flag, false);
         assert_boolean("dumbstruck[2].flag", dumbstruck[2].flag, true);
         assert_boolean("dumbstruck[3].flag", dumbstruck[3].flag, false);
         assert_int("dumbstruck[0].count", "t_integer", dumbstruck[0].count, 3);
         assert_int("dumbstruck[1].count", "t_integer", dumbstruck[1].count, 1);
         assert_int("dumbstruck[2].count", "t_integer", dumbstruck[2].count, 4);
         assert_int("dumbstruck[3].count", "t_integer", dumbstruck[3].count, 1);
         break;
 
     case 7:
         status = libgps_json_unpack(json_str7, &gpsdata, NULL);
         assert_case(status);
         assert_string("release", gpsdata.version.release, VERSION);
         assert_string("rev", gpsdata.version.rev, "dummy-revision");
         assert_int("proto_major", "t_integer", gpsdata.version.proto_major, 3);
         assert_int("proto_minor", "t_integer", gpsdata.version.proto_minor, 1);
         break;
 
     case 8:
         status = json_read_object(json_str8, json_attrs_8, NULL);
         assert_case(status);
         assert_int("fee", "t_integer", fee, 3);
         assert_int("fie", "t_integer", fie, 6);
         assert_int("foe", "t_integer", foe, 14);
         break;
 
     case 9:
-        /* yes, the '6' in the next line is correct */
+        // yes, the '6' in the next line is correct
         status = json_read_object(json_str9, json_attrs_6, NULL);
         assert_case(status);
         assert_int("dumbcount", "t_integer", dumbcount, 0);
         break;
 
     case 10:
         status = json_pps_read(json_strPPS, &gpsdata, NULL);
         assert_case(status);
         assert_string("device", gpsdata.dev.path, "GPS#1");
         assert_int("real_sec", "t_integer", gpsdata.pps.real.tv_sec, 1428001514);
         assert_int("real_nsec", "t_integer", gpsdata.pps.real.tv_nsec, 1000000);
         assert_int("clock_sec", "t_integer", gpsdata.pps.clock.tv_sec,
                    1428001513);
         assert_int("clock_nsec", "t_integer", gpsdata.pps.clock.tv_nsec,
                    999999999);
         assert_int("qErr", "t_integer", gpsdata.qErr, -123456);
         break;
 
     case 11:
         status = json_toff_read(json_strTOFF, &gpsdata, NULL);
         assert_case(status);
         assert_string("device", gpsdata.dev.path, "GPS#1");
         assert_int("real_sec", "t_integer", gpsdata.toff.real.tv_sec,
                    1428001514);
         assert_int("real_nsec", "t_integer", gpsdata.toff.real.tv_nsec,
                    1000000);
         assert_int("clock_sec", "t_integer", gpsdata.toff.clock.tv_sec,
                    1428001513);
         assert_int("clock_nsec", "t_integer", gpsdata.toff.clock.tv_nsec,
                    999999999);
         break;
 
     case 12:
         status = json_oscillator_read(json_strOSC, &gpsdata, NULL);
         assert_case(status);
         assert_string("device", gpsdata.dev.path, "GPS#1");
         assert_boolean("running", gpsdata.osc.running, true);
         assert_boolean("reference", gpsdata.osc.reference, true);
         assert_boolean("disciplined", gpsdata.osc.disciplined, false);
         assert_int("delta", "t_integer", gpsdata.osc.delta, 67);
         break;
 
     case 13:
         if (2 < debug) {
             (void)fprintf(stderr, "test string: %s.\n", json_strErr);
         }
         status = libgps_json_unpack(json_strErr, &gpsdata, NULL);
         assert_case(status);
         assert_string("message", gpsdata.error, "Hello\b\f\n\r\t");
         break;
 
     case 14:
         if (2 < debug) {
             (void)fprintf(stderr, "test string: %s.\n", json_strErr1);
         }
         status = libgps_json_unpack(json_strErr1, &gpsdata, NULL);
         assert_case(status);
         assert_string("message", gpsdata.error, "034");
         break;
 
     case 15:
-        /* check for string overrun caught */
+        // check for string overrun caught
         if (2 < debug) {
             (void)fprintf(stderr, "test string: %s.\n", json_strOver);
         }
         json_short_string_cnt = 7;
         status = json_read_object(json_strOver, json_short_string, NULL);
         assert_case(JSON_ERR_STRLONG != status);
         assert_string("name", json_short_string_dst, "");
         assert_int("count", "t_integer", json_short_string_cnt, 0);
         break;
 
     case 16:
-        /* check for string overrun caught */
+        // check for string overrun caught
         json_strOver2[0] = '\0';
-        /* build a LONG test string */
+        // build a LONG test string
         strlcat(json_strOver2, "{\"name\":\"", sizeof(json_strOver2));
         for (n = 0; n < (2 * JSON_VAL_MAX); n++) {
             strlcat(json_strOver2, "\\u0033", sizeof(json_strOver2));
         }
         strlcat(json_strOver2, "\"}", sizeof(json_strOver2));
 
         if (2 < debug) {
             (void)fprintf(stderr, "test string: %s.\n", json_strOver2);
         }
         json_short_string_cnt = 7;
         status = json_read_object(json_strOver2, json_short_string, NULL);
         assert_case(JSON_ERR_STRLONG != status);
         assert_string("name", json_short_string_dst, "");
         assert_int("count", "t_integer", json_short_string_cnt, 0);
         break;
 
     case 17:
-        /* check for a different string overrun caught */
+        // check for a different string overrun caught
         json_strOver2[0] = '\0';
-        /* build a LONG test string */
+        // build a LONG test string
         strlcat(json_strOver2, "{\"name\":\"", sizeof(json_strOver2));
         for (n = 0; n < (2 * JSON_VAL_MAX); n++) {
             strlcat(json_strOver2, "\\A", sizeof(json_strOver2));
         }
         strlcat(json_strOver2, "\"}", sizeof(json_strOver2));
 
         if (2 < debug) {
             (void)fprintf(stderr, "test string: %s.\n", json_strOver2);
         }
         json_short_string_cnt = 7;
         status = json_read_object(json_strOver2, json_short_string, NULL);
         assert_case(JSON_ERR_STRLONG != status);
         assert_string("name", json_short_string_dst, "");
         assert_int("count", "t_integer", json_short_string_cnt, 0);
         break;
 
     case 18:
         status = json_read_object(json_str18, json_attrs_18, NULL);
         assert_int("proto_major", "t_integer", pvhi, 3);
         assert_int("proto_minor", "t_integer", pvlo, 14);
         assert_string("release", release, VERSION);
         assert_int("return", "t_integer", status, 0);
         break;
 
     case 19:
         status = json_read_object(json_str19, json_attrs_19, NULL);
         assert_boolean("enable", enable, true);
         assert_boolean("json", json, true);
         assert_int("return", "t_integer", status, 0);
         break;
 
     case 20:
         status = json_read_object(json_str20, json_attrs_20, NULL);
         assert_int("mode", "t_integer", gps_mode, 3);
         assert_string("time", gps_time, "2019-10-04T08:51:34.000Z");
         assert_real("ept", ept, 0.005);
         assert_int("return", "t_integer", status, 0);
         break;
 
     case 21:
         status = json_read_array(json_strInt, &json_array_Int, NULL);
         assert_case(status);
         assert_int("count", "t_integer", intcount, 3);
         assert_int("intstore[0]", "t_integer", intstore[0], 23);
         assert_int("intstore[1]", "t_integer", intstore[1], -17);
         assert_int("intstore[2]", "t_integer", intstore[2], 5);
         assert_int("intstore[3]", "t_integer", intstore[3], 0);
         break;
 
     case 22:
         status = json_read_array(json_strBool, &json_array_Bool, NULL);
         assert_case(status);
         assert_int("count", "t_integer", boolcount, 3);
         assert_boolean("boolstore[0]", boolstore[0], true);
         assert_boolean("boolstore[1]", boolstore[1], false);
         assert_boolean("boolstore[2]", boolstore[2], true);
         assert_boolean("boolstore[3]", boolstore[3], false);
         break;
 
     case 23:
         status = json_read_array(json_strReal, &json_array_Real, NULL);
         assert_case(status);
         assert_int("count", "t_integer", realcount, 3);
         assert_real("realstore[0]", realstore[0], 23.1);
         assert_real("realstore[1]", realstore[1], -17.2);
         assert_real("realstore[2]", realstore[2], 5.3);
         assert_real("realstore[3]", realstore[3], 0);
         break;
 
     case 24:
         // test w/o the trailing NUL
         pbuf = json_quote(ee24a, buffer, sizeof(ee24a) - 1, sizeof(buffer));
         assert_string1("Ascii", pbuf, ed24a);
 
         pbuf = json_quote(ee24b, buffer, sizeof(ee24b), sizeof(buffer));
         assert_string1("bfnrt", pbuf, ed24b);
 
         pbuf = json_quote(ee24c, buffer, sizeof(ee24c), sizeof(buffer));
         assert_string1("NUL", pbuf, ed24c);
 
         pbuf = json_quote(ee24d, buffer, sizeof(ee24d), sizeof(buffer));
         assert_string1("trailing utf", pbuf, ed24d);
 
         pbuf = json_quote(ee24e, buffer, sizeof(ee24e), sizeof(buffer));
         assert_string1("Bad trailing utf", pbuf, ed24e);
 
         // test for short output buffer
         pbuf = json_quote(ee24f, buffer, sizeof(ee24f), (size_t)6);
         assert_string1("Bad trailing utf", pbuf, ed24f);
 
         pbuf = json_quote(ee24l, buffer, sizeof(ee24l), sizeof(buffer));
         assert_string1("low", pbuf, ed24l);
 
         pbuf = json_quote(ee24u, buffer, sizeof(ee24u), sizeof(buffer));
         assert_string1("unicode", pbuf, ed24u);
         break;
 
     // Check for strings from (25) "" to (28) "foo" --
     // should return JSON_ERR_CHECKFAIL (16)
     case 25:
         status = json_read_object(json_str25a, json_attrs_25, NULL);
         assert_int("mode", "t_integer", i25, -9);
         assert_int("status", "t_integer", status, JSON_ERR_CHECKFAIL);
         break;
 
     case 26:
         status = json_read_object(json_str25b, json_attrs_25, NULL);
         assert_int("mode", "t_integer", i25, -9);
         assert_int("status", "t_integer", status, JSON_ERR_CHECKFAIL);
         break;
 
     case 27:
         status = json_read_object(json_str25c, json_attrs_25, NULL);
         assert_int("mode", "t_integer", i25, -9);
         assert_int("status", "t_integer", status, JSON_ERR_CHECKFAIL);
         break;
 
     case 28:
         status = json_read_object(json_str25d, json_attrs_25, NULL);
         assert_int("mode", "t_integer", i25, -9);
         assert_int("status", "t_integer", status, JSON_ERR_CHECKFAIL);
         break;
 
     // check strings "foob" and "fooba" --  should return JSON_ERR_STRLONG (7)
     case 29:
         status = json_read_object(json_str25e, json_attrs_25, NULL);
         assert_int("mode", "t_integer", i25, -9);
         assert_int("status", "t_integer", status, JSON_ERR_STRLONG);
         break;
 
     case 30:
         status = json_read_object(json_str25f, json_attrs_25, NULL);
         assert_int("mode", "t_integer", i25, -9);
         assert_int("status", "t_integer", status, JSON_ERR_STRLONG);
         break;
 
     case 31: // Check string "TPV" -- should return success (0)
         status = json_read_object(json_str25t, json_attrs_25, NULL);
         assert_int("mode", "t_integer", i25, 3);
         assert_int("status", "t_integer", status, 0);
         break;
 
     case 32: // Check that whitespace-only JSON returns JSON_ERR_EMPTY (25)
         status = json_read_object(str32, json_attrs_25, NULL);
         assert_int("status", "t_integer", status, JSON_ERR_EMPTY);
         break;
 
-#define MAXTEST 32
+    //  CHeck safe_atof() since JSON depends on it.
+    case 33: // Check safe_atof(), exponent too large
+        d =  safe_atof("2e1024");
+        if ((2^1024) == d) {
+            (void)fprintf(stderr, "2^1024 == safe_atof(\"2e1024\") failed\n");
+            exit(EXIT_FAILURE);
+        }
+        break;
+
+    case 34: // Check safe_atof(), exponent too large
+        d =  safe_atof("2e-1024");    // exponent too large
+        if (isnan(d)) {
+            (void)fprintf(stderr, "NAN == safe_atof(\"-2e1024\") failed\n");
+            exit(EXIT_FAILURE);
+        }
+        break;
+
+    case 35: // Check safe_atof(), exponent too large
+        d =  safe_atof("2e1025");    // exponent too large
+        if (!isinf(d)) {
+            (void)fprintf(stderr, "INFINITY == safe_atof(\"2e1025\") failed\n");
+            exit(EXIT_FAILURE);
+        }
+        break;
+
+    case 36: // Check safe_atof(), exponent too large
+        d =  safe_atof("2e-1025");    // exponent too large
+        if (0.0 != d) {
+            (void)fprintf(stderr, "0.0 == safe_atof(\"2e-1025\") failed\n");
+            exit(EXIT_FAILURE);
+        }
+        break;
+
+#define MAXTEST 36
 
     default:
         (void)fputs("Unknown test number\n", stderr);
         exit(EXIT_FAILURE);
     }
 }
@@ -862,49 +897,48 @@ static void jsontest(int i)
 int main(int argc UNUSED, char *argv[]UNUSED)
 {
     int option;
     int individual = 0;
 
     while ((option = getopt(argc, argv, "D:hn:V?")) != -1) {
         switch (option) {
         case 'D':
             debug = atoi(optarg);
             gps_enable_debug(debug, stdout);
             break;
         case 'n':
             individual = atoi(optarg);
             break;
         case '?':
         case 'h':
         default:
             (void)fprintf(stderr,
                         "usage: %s [-D lvl] [-n tst] [-V]\n"
                         "       -D lvl      set debug level\n"
                         "       -n tst      run only test tst\n"
                         "       -V          Print version and exit\n",
                         argv[0]);
             exit(EXIT_FAILURE);
         case 'V':
             (void)fprintf(stderr, "%s: %s (revision %s)\n",
                           argv[0], VERSION, REVISION);
             exit(EXIT_SUCCESS);
         }
     }
 
     (void)fprintf(stderr, "JSON unit tests\n");
 
-    if (individual)
+    if (individual) {
         jsontest(individual);
-    else {
+    } else {
         int i;
         for (i = 1; i <= MAXTEST; i++) {
             jsontest(i);
         }
     }
 
     (void)fprintf(stderr, "succeeded.\n");
 
     exit(EXIT_SUCCESS);
 }
 
-/* end */
 // vim: set expandtab shiftwidth=4
