commit 97e10070e25d414c68bbb25d0a2e7bfed7bc2c2c
Author: Evgenii Kliuchnikov <eustas@google.com>
Date:   Wed Jun 9 06:41:12 2021 +0000

    Fix use of undefined value in 2x upsampling.
    
    Nultiplication by 0 does not save from mixing-in undefined values,
    because NaN is toxic. Added special "unlikely" case for the tail
    of input in case X-repeat is in action (only 2x upsampling, and
    vector size >4).

diff --git a/lib/jxl/dec_upsample.cc b/lib/jxl/dec_upsample.cc
index 76c5000f..4a6f64e5 100644
--- a/lib/jxl/dec_upsample.cc
+++ b/lib/jxl/dec_upsample.cc
@@ -65,169 +65,181 @@ template <size_t N, size_t x_repeat>
 void Upsample(const ImageF& src, const Rect& src_rect, ImageF* dst,
               const Rect& dst_rect, const float* kernels,
               ssize_t image_y_offset, size_t image_ysize, float* arena) {
   constexpr const size_t M = 2 * Upsampler::filter_radius() + 1;
   constexpr const size_t M2 = M / 2;
   JXL_DASSERT(src_rect.x0() >= M2);
-  JXL_DASSERT(src_rect.x0() + src_rect.xsize() + M2 <= src.xsize());
+  const size_t src_x_limit = src_rect.x0() + src_rect.xsize() + M2;
+  JXL_DASSERT(src_x_limit <= src.xsize());
   JXL_ASSERT(DivCeil(dst_rect.xsize(), N) <= src_rect.xsize());
   // TODO(eustas): add proper (src|dst) ysize check that accounts for mirroring.
 
   constexpr const size_t MX = M + x_repeat - 1;
   constexpr const size_t num_coeffs = M * MX;
 
   constexpr const size_t NX = N * x_repeat;
 
   HWY_FULL(float) df;
   const size_t V = Lanes(df);
   const size_t num_kernels = N * NX;
   const size_t stride = RoundUpTo(num_kernels, V);
 
   const size_t rsx = DivCeil(dst_rect.xsize(), N);
   const size_t dsx = rsx + 2 * M2;
   // Round-down to complete vectors.
   const size_t dsx_v = V * (dsx / V);
 
   float* JXL_RESTRICT in = arena;
   arena += RoundUpTo(num_coeffs, V);
   float* JXL_RESTRICT out = arena;
   arena += stride;
   float* JXL_RESTRICT raw_min_row = arena;
   arena += RoundUpTo(dsx + V, V);
   float* JXL_RESTRICT raw_max_row = arena;
   arena += RoundUpTo(dsx + V, V);
   float* JXL_RESTRICT min_row = arena;
   arena += RoundUpTo(rsx * N + V, V);
   float* JXL_RESTRICT max_row = arena;
   arena += RoundUpTo(rsx * N + V, V);
 
   memset(raw_min_row + dsx_v, 0, sizeof(float) * (V + dsx - dsx_v));
   memset(raw_max_row + dsx_v, 0, sizeof(float) * (V + dsx - dsx_v));
   memset(min_row + dst_rect.xsize(), 0, sizeof(float) * V);
   memset(max_row + dst_rect.xsize(), 0, sizeof(float) * V);
 
   // For min/max reduction.
   const size_t span_tail_len = M % V;
   const bool has_span_tail = (span_tail_len != 0);
   JXL_ASSERT(has_span_tail || V <= M);
   const size_t span_start = has_span_tail ? 0 : V;
   const size_t span_tail_start = M - span_tail_len;
   const auto span_tail_mask = Iota(df, 0) < Set(df, span_tail_len);
 
   // sx and sy correspond to offset in source image.
   // x and y correspond to top-left pixel offset in upsampled output image.
   for (size_t y = 0; y < dst_rect.ysize(); y += N) {
     const float* src_rows[M];
     const size_t sy = y / N;
     const ssize_t top = static_cast<ssize_t>(sy + src_rect.y0() - M2);
     for (size_t iy = 0; iy < M; iy++) {
       const ssize_t image_y = top + iy + image_y_offset;
       src_rows[iy] = src.Row(Mirror(image_y, image_ysize) - image_y_offset);
     }
     const size_t sx0 = src_rect.x0() - M2;
     for (size_t sx = 0; sx < dsx_v; sx += V) {
       static_assert(M == 5, "Filter diameter is expected to be 5");
       const auto r0 = LoadU(df, src_rows[0] + sx0 + sx);
       const auto r1 = LoadU(df, src_rows[1] + sx0 + sx);
       const auto r2 = LoadU(df, src_rows[2] + sx0 + sx);
       const auto r3 = LoadU(df, src_rows[3] + sx0 + sx);
       const auto r4 = LoadU(df, src_rows[4] + sx0 + sx);
       const auto min0 = Min(r0, r1);
       const auto max0 = Max(r0, r1);
       const auto min1 = Min(r2, r3);
       const auto max1 = Max(r2, r3);
       const auto min2 = Min(min0, r4);
       const auto max2 = Max(max0, r4);
       Store(Min(min1, min2), df, raw_min_row + sx);
       Store(Max(max1, max2), df, raw_max_row + sx);
     }
     for (size_t sx = dsx_v; sx < dsx; sx++) {
       static_assert(M == 5, "Filter diameter is expected to be 5");
       const auto r0 = src_rows[0][sx0 + sx];
       const auto r1 = src_rows[1][sx0 + sx];
       const auto r2 = src_rows[2][sx0 + sx];
       const auto r3 = src_rows[3][sx0 + sx];
       const auto r4 = src_rows[4][sx0 + sx];
       const auto min0 = std::min(r0, r1);
       const auto max0 = std::max(r0, r1);
       const auto min1 = std::min(r2, r3);
       const auto max1 = std::max(r2, r3);
       const auto min2 = std::min(min0, r4);
       const auto max2 = std::max(max0, r4);
       raw_min_row[sx] = std::min(min1, min2);
       raw_max_row[sx] = std::max(max1, max2);
     }
 
     for (size_t sx = 0; sx < rsx; sx++) {
       decltype(Zero(df)) min, max;
       if (has_span_tail) {
         auto dummy = Set(df, raw_min_row[sx]);
         min = IfThenElse(span_tail_mask,
                          LoadU(df, raw_min_row + sx + span_tail_start), dummy);
         max = IfThenElse(span_tail_mask,
                          LoadU(df, raw_max_row + sx + span_tail_start), dummy);
       } else {
         min = LoadU(df, raw_min_row + sx);
         max = LoadU(df, raw_max_row + sx);
       }
       for (size_t fx = span_start; fx < span_tail_start; fx += V) {
         min = Min(LoadU(df, raw_min_row + sx + fx), min);
         max = Max(LoadU(df, raw_max_row + sx + fx), max);
       }
       min = MinOfLanes(min);
       max = MaxOfLanes(max);
       for (size_t lx = 0; lx < N; lx += V) {
         StoreU(min, df, min_row + N * sx + lx);
         StoreU(max, df, max_row + N * sx + lx);
       }
     }
 
     for (size_t x = 0; x < dst_rect.xsize(); x += NX) {
       const size_t sx = x / N;
       const size_t xbase = sx + sx0;
       // Copy input pixels for "linearization".
       for (size_t iy = 0; iy < M; iy++) {
         memcpy(in + MX * iy, src_rows[iy] + xbase, MX * sizeof(float));
       }
+      if (x_repeat > 1) {
+        // Even if filter coeffs contain 0 at "undefined" values, the result
+        // might be undefined, because NaN will poison the sum.
+        if (JXL_UNLIKELY(xbase + MX > src_x_limit)) {
+          for (size_t iy = 0; iy < M; iy++) {
+            for (size_t ix = src_x_limit - xbase; ix < MX; ++ix) {
+              in[MX * iy + ix] = 0.0f;
+            }
+          }
+        }
+      }
       constexpr size_t U = 4;  // Unroll factor.
       constexpr size_t tail = num_coeffs & ~(U - 1);
       constexpr size_t tail_length = num_coeffs - tail;
       for (size_t kernel_idx = 0; kernel_idx < num_kernels; kernel_idx += V) {
         const float* JXL_RESTRICT kernel_base = kernels + kernel_idx;
         decltype(Zero(df)) results[U];
         for (size_t i = 0; i < U; i++) {
           results[i] = Set(df, in[i]) * Load(df, kernel_base + i * stride);
         }
         for (size_t i = U; i < tail; i += U) {
           for (size_t j = 0; j < U; ++j) {
             results[j] =
                 MulAdd(Set(df, in[i + j]),
                        Load(df, kernel_base + (i + j) * stride), results[j]);
           }
         }
         for (size_t i = 0; i < tail_length; ++i) {
           results[i] =
               MulAdd(Set(df, in[tail + i]),
                      Load(df, kernel_base + (tail + i) * stride), results[i]);
         }
         auto result = results[0];
         for (size_t i = 1; i < U; ++i) result += results[i];
         Store(result, df, out + kernel_idx);
       }
       const size_t oy_max = std::min<size_t>(dst_rect.ysize(), y + N);
       const size_t ox_max = std::min<size_t>(dst_rect.xsize(), x + NX);
       const size_t copy_len = ox_max - x;
       float* pixels = out;
       // TODO(eustas): add graceful tail processing.
       for (size_t oy = sy * N; oy < oy_max; ++oy, pixels += NX) {
         for (size_t dx = 0; dx < copy_len; dx += V) {
           auto result = LoadU(df, pixels + dx);
           auto min = LoadU(df, min_row + x + dx);
           auto max = LoadU(df, max_row + x + dx);
           StoreU(Clamp(result, min, max), df, dst_rect.Row(dst, oy) + x + dx);
         }
       }
     }
   }
 }
 
 }  // namespace
