commit f35fd27ec641c42d6b115bfa595e483ec58188d2
Author: DRC <information@libjpeg-turbo.org>
Date:   Tue Apr 6 12:51:03 2021 -0500

    tjLoadImage: Fix issues w/loading 16-bit PPMs/PGMs
    
    - The PPM reader now throws an error rather than segfaulting (due to a
      buffer overrun) if an application attempts to load a 16-bit PPM file
      into a grayscale uncompressed image buffer.  No known applications
      allowed that (not even the test applications in libjpeg-turbo),
      because that mode of operation was never expected to work and did not
      work under any circumstances.  (In fact, it was necessary to modify
      TJBench in order to reproduce the issue outside of a fuzzing
      environment.)  This was purely a matter of making the library bow out
      gracefully rather than crash if an application tries to do something
      really stupid.
    
    - The PPM reader now throws an error rather than generating incorrect
      pixels if an application attempts to load a 16-bit PGM file into an
      RGB uncompressed image buffer.
    
    - The PPM reader now correctly loads 16-bit PPM files into extended
      RGB uncompressed image buffers.  (Previously it generated incorrect
      pixels unless the input colorspace was JCS_RGB or JCS_EXT_RGB.)
    
    The only way that users could have potentially encountered these issues
    was through the tjLoadImage() function.  cjpeg and TJBench were
    unaffected.

diff --git a/ChangeLog.md b/ChangeLog.md
index 968969c6..12e730a0 100644
--- a/ChangeLog.md
+++ b/ChangeLog.md
@@ -35,10 +35,20 @@ applications that use the TurboJPEG API to guard against an exploit of the
 progressive JPEG format described in the report
 ["Two Issues with the JPEG Standard"](https://libjpeg-turbo.org/pmwiki/uploads/About/TwoIssueswiththeJPEGStandard.pdf).
 
+7. The PPM reader now throws an error, rather than segfaulting (due to a buffer
+overrun) or generating incorrect pixels, if an application attempts to use the
+`tjLoadImage()` function to load a 16-bit binary PPM file (a binary PPM file
+with a maximum value greater than 255) into a grayscale image buffer or to load
+a 16-bit binary PGM file into an RGB image buffer.
+
+8. Fixed an issue in the PPM reader that caused incorrect pixels to be
+generated when using the `tjLoadImage()` function to load a 16-bit binary PPM
+file into an extended RGB image buffer.
+
 
 2.0.90 (2.1 beta1)
 ==================
 
 ### Significant changes relative to 2.0.6:
 
 1. The build system, x86-64 SIMD extensions, and accelerated Huffman codec now
diff --git a/rdppm.c b/rdppm.c
index c4c937e8..6ac8fdbf 100644
--- a/rdppm.c
+++ b/rdppm.c
@@ -1,44 +1,44 @@
 /*
  * rdppm.c
  *
  * This file was part of the Independent JPEG Group's software:
  * Copyright (C) 1991-1997, Thomas G. Lane.
  * Modified 2009 by Bill Allombert, Guido Vollbeding.
  * libjpeg-turbo Modifications:
- * Copyright (C) 2015-2017, 2020, D. R. Commander.
+ * Copyright (C) 2015-2017, 2020-2021, D. R. Commander.
  * For conditions of distribution and use, see the accompanying README.ijg
  * file.
  *
  * This file contains routines to read input images in PPM/PGM format.
  * The extended 2-byte-per-sample raw PPM/PGM formats are supported.
  * The PBMPLUS library is NOT required to compile this software
  * (but it is highly useful as a set of PPM image manipulation programs).
  *
  * These routines may need modification for non-Unix environments or
  * specialized applications.  As they stand, they assume input from
  * an ordinary stdio stream.  They further assume that reading begins
  * at the start of the file; start_input may need work if the
  * user interface has already read some data (e.g., to determine that
  * the file is indeed PPM format).
  */
 
 #include "cmyk.h"
 #include "cdjpeg.h"             /* Common decls for cjpeg/djpeg applications */
 
 #ifdef PPM_SUPPORTED
 
 
 /* Portions of this code are based on the PBMPLUS library, which is:
 **
 ** Copyright (C) 1988 by Jef Poskanzer.
 **
 ** Permission to use, copy, modify, and distribute this software and its
 ** documentation for any purpose and without fee is hereby granted, provided
 ** that the above copyright notice appear in all copies and that both that
 ** copyright notice and this permission notice appear in supporting
 ** documentation.  This software is provided "as is" without express or
 ** implied warranty.
 */
 
 
 /* Macros to deal with unsigned chars as efficiently as compiler allows */
@@ -510,39 +510,47 @@ METHODDEF(JDIMENSION)
 get_word_rgb_row(j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
 /* This version is for reading raw-word-format PPM files with any maxval */
 {
   ppm_source_ptr source = (ppm_source_ptr)sinfo;
   register JSAMPROW ptr;
   register U_CHAR *bufferptr;
   register JSAMPLE *rescale = source->rescale;
   JDIMENSION col;
   unsigned int maxval = source->maxval;
+  register int rindex = rgb_red[cinfo->in_color_space];
+  register int gindex = rgb_green[cinfo->in_color_space];
+  register int bindex = rgb_blue[cinfo->in_color_space];
+  register int aindex = alpha_index[cinfo->in_color_space];
+  register int ps = rgb_pixelsize[cinfo->in_color_space];
 
   if (!ReadOK(source->pub.input_file, source->iobuffer, source->buffer_width))
     ERREXIT(cinfo, JERR_INPUT_EOF);
   ptr = source->pub.buffer[0];
   bufferptr = source->iobuffer;
   for (col = cinfo->image_width; col > 0; col--) {
     register unsigned int temp;
     temp  = UCH(*bufferptr++) << 8;
     temp |= UCH(*bufferptr++);
     if (temp > maxval)
       ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);
-    *ptr++ = rescale[temp];
+    ptr[rindex] = rescale[temp];
     temp  = UCH(*bufferptr++) << 8;
     temp |= UCH(*bufferptr++);
     if (temp > maxval)
       ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);
-    *ptr++ = rescale[temp];
+    ptr[gindex] = rescale[temp];
     temp  = UCH(*bufferptr++) << 8;
     temp |= UCH(*bufferptr++);
     if (temp > maxval)
       ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);
-    *ptr++ = rescale[temp];
+    ptr[bindex] = rescale[temp];
+    if (aindex >= 0)
+      ptr[aindex] = 0xFF;
+    ptr += ps;
   }
   return 1;
 }
 
 
 /*
  * Read the file header; return image size and component count.
  */
@@ -551,178 +559,184 @@ METHODDEF(void)
 start_input_ppm(j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
 {
   ppm_source_ptr source = (ppm_source_ptr)sinfo;
   int c;
   unsigned int w, h, maxval;
   boolean need_iobuffer, use_raw_buffer, need_rescale;
 
   if (getc(source->pub.input_file) != 'P')
     ERREXIT(cinfo, JERR_PPM_NOT);
 
   c = getc(source->pub.input_file); /* subformat discriminator character */
 
   /* detect unsupported variants (ie, PBM) before trying to read header */
   switch (c) {
   case '2':                     /* it's a text-format PGM file */
   case '3':                     /* it's a text-format PPM file */
   case '5':                     /* it's a raw-format PGM file */
   case '6':                     /* it's a raw-format PPM file */
     break;
   default:
     ERREXIT(cinfo, JERR_PPM_NOT);
     break;
   }
 
   /* fetch the remaining header info */
   w = read_pbm_integer(cinfo, source->pub.input_file, 65535);
   h = read_pbm_integer(cinfo, source->pub.input_file, 65535);
   maxval = read_pbm_integer(cinfo, source->pub.input_file, 65535);
 
   if (w <= 0 || h <= 0 || maxval <= 0) /* error check */
     ERREXIT(cinfo, JERR_PPM_NOT);
 
   cinfo->data_precision = BITS_IN_JSAMPLE; /* we always rescale data to this */
   cinfo->image_width = (JDIMENSION)w;
   cinfo->image_height = (JDIMENSION)h;
   source->maxval = maxval;
 
   /* initialize flags to most common settings */
   need_iobuffer = TRUE;         /* do we need an I/O buffer? */
   use_raw_buffer = FALSE;       /* do we map input buffer onto I/O buffer? */
   need_rescale = TRUE;          /* do we need a rescale array? */
 
   switch (c) {
   case '2':                     /* it's a text-format PGM file */
     if (cinfo->in_color_space == JCS_UNKNOWN)
       cinfo->in_color_space = JCS_GRAYSCALE;
     TRACEMS2(cinfo, 1, JTRC_PGM_TEXT, w, h);
     if (cinfo->in_color_space == JCS_GRAYSCALE)
       source->pub.get_pixel_rows = get_text_gray_row;
     else if (IsExtRGB(cinfo->in_color_space))
       source->pub.get_pixel_rows = get_text_gray_rgb_row;
     else if (cinfo->in_color_space == JCS_CMYK)
       source->pub.get_pixel_rows = get_text_gray_cmyk_row;
     else
       ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
     need_iobuffer = FALSE;
     break;
 
   case '3':                     /* it's a text-format PPM file */
     if (cinfo->in_color_space == JCS_UNKNOWN)
       cinfo->in_color_space = JCS_EXT_RGB;
     TRACEMS2(cinfo, 1, JTRC_PPM_TEXT, w, h);
     if (IsExtRGB(cinfo->in_color_space))
       source->pub.get_pixel_rows = get_text_rgb_row;
     else if (cinfo->in_color_space == JCS_CMYK)
       source->pub.get_pixel_rows = get_text_rgb_cmyk_row;
     else
       ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
     need_iobuffer = FALSE;
     break;
 
   case '5':                     /* it's a raw-format PGM file */
     if (cinfo->in_color_space == JCS_UNKNOWN)
       cinfo->in_color_space = JCS_GRAYSCALE;
     TRACEMS2(cinfo, 1, JTRC_PGM, w, h);
     if (maxval > 255) {
-      source->pub.get_pixel_rows = get_word_gray_row;
+      if (cinfo->in_color_space == JCS_GRAYSCALE)
+        source->pub.get_pixel_rows = get_word_gray_row;
+      else
+        ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
     } else if (maxval == MAXJSAMPLE && sizeof(JSAMPLE) == sizeof(U_CHAR) &&
                cinfo->in_color_space == JCS_GRAYSCALE) {
       source->pub.get_pixel_rows = get_raw_row;
       use_raw_buffer = TRUE;
       need_rescale = FALSE;
     } else {
       if (cinfo->in_color_space == JCS_GRAYSCALE)
         source->pub.get_pixel_rows = get_scaled_gray_row;
       else if (IsExtRGB(cinfo->in_color_space))
         source->pub.get_pixel_rows = get_gray_rgb_row;
       else if (cinfo->in_color_space == JCS_CMYK)
         source->pub.get_pixel_rows = get_gray_cmyk_row;
       else
         ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
     }
     break;
 
   case '6':                     /* it's a raw-format PPM file */
     if (cinfo->in_color_space == JCS_UNKNOWN)
       cinfo->in_color_space = JCS_EXT_RGB;
     TRACEMS2(cinfo, 1, JTRC_PPM, w, h);
     if (maxval > 255) {
-      source->pub.get_pixel_rows = get_word_rgb_row;
+      if (IsExtRGB(cinfo->in_color_space))
+        source->pub.get_pixel_rows = get_word_rgb_row;
+      else
+        ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
     } else if (maxval == MAXJSAMPLE && sizeof(JSAMPLE) == sizeof(U_CHAR) &&
 #if RGB_RED == 0 && RGB_GREEN == 1 && RGB_BLUE == 2 && RGB_PIXELSIZE == 3
                (cinfo->in_color_space == JCS_EXT_RGB ||
                 cinfo->in_color_space == JCS_RGB)) {
 #else
                cinfo->in_color_space == JCS_EXT_RGB) {
 #endif
       source->pub.get_pixel_rows = get_raw_row;
       use_raw_buffer = TRUE;
       need_rescale = FALSE;
     } else {
       if (IsExtRGB(cinfo->in_color_space))
         source->pub.get_pixel_rows = get_rgb_row;
       else if (cinfo->in_color_space == JCS_CMYK)
         source->pub.get_pixel_rows = get_rgb_cmyk_row;
       else
         ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
     }
     break;
   }
 
   if (IsExtRGB(cinfo->in_color_space))
     cinfo->input_components = rgb_pixelsize[cinfo->in_color_space];
   else if (cinfo->in_color_space == JCS_GRAYSCALE)
     cinfo->input_components = 1;
   else if (cinfo->in_color_space == JCS_CMYK)
     cinfo->input_components = 4;
 
   /* Allocate space for I/O buffer: 1 or 3 bytes or words/pixel. */
   if (need_iobuffer) {
     if (c == '6')
       source->buffer_width = (size_t)w * 3 *
         ((maxval <= 255) ? sizeof(U_CHAR) : (2 * sizeof(U_CHAR)));
     else
       source->buffer_width = (size_t)w *
         ((maxval <= 255) ? sizeof(U_CHAR) : (2 * sizeof(U_CHAR)));
     source->iobuffer = (U_CHAR *)
       (*cinfo->mem->alloc_small) ((j_common_ptr)cinfo, JPOOL_IMAGE,
                                   source->buffer_width);
   }
 
   /* Create compressor input buffer. */
   if (use_raw_buffer) {
     /* For unscaled raw-input case, we can just map it onto the I/O buffer. */
     /* Synthesize a JSAMPARRAY pointer structure */
     source->pixrow = (JSAMPROW)source->iobuffer;
     source->pub.buffer = &source->pixrow;
     source->pub.buffer_height = 1;
   } else {
     /* Need to translate anyway, so make a separate sample buffer. */
     source->pub.buffer = (*cinfo->mem->alloc_sarray)
       ((j_common_ptr)cinfo, JPOOL_IMAGE,
        (JDIMENSION)w * cinfo->input_components, (JDIMENSION)1);
     source->pub.buffer_height = 1;
   }
 
   /* Compute the rescaling array if required. */
   if (need_rescale) {
     long val, half_maxval;
 
     /* On 16-bit-int machines we have to be careful of maxval = 65535 */
     source->rescale = (JSAMPLE *)
       (*cinfo->mem->alloc_small) ((j_common_ptr)cinfo, JPOOL_IMAGE,
                                   (size_t)(((long)MAX(maxval, 255) + 1L) *
                                            sizeof(JSAMPLE)));
     half_maxval = maxval / 2;
     for (val = 0; val <= (long)maxval; val++) {
       /* The multiplication here must be done in 32 bits to avoid overflow */
       source->rescale[val] = (JSAMPLE)((val * MAXJSAMPLE + half_maxval) /
                                         maxval);
     }
   }
 }
 
 
 /*
  * Finish up at the end of the file.
  */
