commit 85aa1491b967709701d2d2293627c5cd1c7cb96d
Author: Luca Versari <veluca@google.com>
Date:   Mon Jun 14 18:47:26 2021 +0200

    Properly consider orientation in *OutBufferSize.
    
    Otherwise, mismatches in computed strides can result in memory
    corruption and/or OOB writes.

diff --git a/lib/jxl/decode.cc b/lib/jxl/decode.cc
index ce591617..228e5ae7 100644
--- a/lib/jxl/decode.cc
+++ b/lib/jxl/decode.cc
@@ -1817,18 +1817,17 @@ JxlDecoderStatus JxlDecoderFlushImage(JxlDecoder* dec) {
 JXL_EXPORT JxlDecoderStatus JxlDecoderPreviewOutBufferSize(
     const JxlDecoder* dec, const JxlPixelFormat* format, size_t* size) {
   size_t bits;
   JxlDecoderStatus status = PrepareSizeCheck(dec, format, &bits);
   if (status != JXL_DEC_SUCCESS) return status;
 
-  const auto& metadata = dec->metadata.m;
-  size_t xsize = metadata.preview_size.xsize();
-  size_t ysize = metadata.preview_size.ysize();
+  size_t xsize = dec->metadata.oriented_preview_xsize(dec->keep_orientation);
+  size_t ysize = dec->metadata.oriented_preview_ysize(dec->keep_orientation);
 
   size_t row_size =
       jxl::DivCeil(xsize * format->num_channels * bits, jxl::kBitsPerByte);
   if (format->align > 1) {
     row_size = jxl::DivCeil(row_size, format->align) * format->align;
   }
   *size = row_size * ysize;
   return JXL_DEC_SUCCESS;
 }
@@ -1860,17 +1859,19 @@ JXL_EXPORT JxlDecoderStatus JxlDecoderSetPreviewOutBuffer(
 JXL_EXPORT JxlDecoderStatus JxlDecoderDCOutBufferSize(
     const JxlDecoder* dec, const JxlPixelFormat* format, size_t* size) {
   size_t bits;
   JxlDecoderStatus status = PrepareSizeCheck(dec, format, &bits);
   if (status != JXL_DEC_SUCCESS) return status;
 
-  size_t xsize = jxl::DivCeil(dec->metadata.size.xsize(), jxl::kBlockDim);
-  size_t ysize = jxl::DivCeil(dec->metadata.size.ysize(), jxl::kBlockDim);
+  size_t xsize = jxl::DivCeil(
+      dec->metadata.oriented_xsize(dec->keep_orientation), jxl::kBlockDim);
+  size_t ysize = jxl::DivCeil(
+      dec->metadata.oriented_ysize(dec->keep_orientation), jxl::kBlockDim);
 
   size_t row_size =
       jxl::DivCeil(xsize * format->num_channels * bits, jxl::kBitsPerByte);
   if (format->align > 1) {
     row_size = jxl::DivCeil(row_size, format->align) * format->align;
   }
   *size = row_size * ysize;
   return JXL_DEC_SUCCESS;
 }
@@ -1884,16 +1885,17 @@ JXL_EXPORT JxlDecoderStatus JxlDecoderSetDCOutBuffer(
 JXL_EXPORT JxlDecoderStatus JxlDecoderImageOutBufferSize(
     const JxlDecoder* dec, const JxlPixelFormat* format, size_t* size) {
   size_t bits;
   JxlDecoderStatus status = PrepareSizeCheck(dec, format, &bits);
   if (status != JXL_DEC_SUCCESS) return status;
 
   size_t row_size =
-      jxl::DivCeil(dec->metadata.size.xsize() * format->num_channels * bits,
+      jxl::DivCeil(dec->metadata.oriented_xsize(dec->keep_orientation) *
+                       format->num_channels * bits,
                    jxl::kBitsPerByte);
   if (format->align > 1) {
     row_size = jxl::DivCeil(row_size, format->align) * format->align;
   }
-  *size = row_size * dec->metadata.size.ysize();
+  *size = row_size * dec->metadata.oriented_ysize(dec->keep_orientation);
 
   return JXL_DEC_SUCCESS;
 }
diff --git a/lib/jxl/image_metadata.h b/lib/jxl/image_metadata.h
index 10531b9e..53a1d8fc 100644
--- a/lib/jxl/image_metadata.h
+++ b/lib/jxl/image_metadata.h
@@ -365,20 +365,48 @@ Status WriteImageMetadata(const ImageMetadata& metadata,
 // All metadata applicable to the entire codestream (dimensions, extra channels,
 // ...)
 struct CodecMetadata {
   // TODO(lode): use the preview and animation fields too, in place of the
   // nonserialized_ ones in ImageMetadata.
   ImageMetadata m;
   // The size of the codestream: this is the nominal size applicable to all
   // frames, although some frames can have a different effective size through
   // crop, dc_level or representing a the preview.
   SizeHeader size;
   // Often default.
   CustomTransformData transform_data;
 
   size_t xsize() const { return size.xsize(); }
   size_t ysize() const { return size.ysize(); }
+  size_t oriented_xsize(bool keep_orientation) const {
+    if (static_cast<uint32_t>(m.GetOrientation()) > 4 && !keep_orientation) {
+      return ysize();
+    } else {
+      return xsize();
+    }
+  }
+  size_t oriented_preview_xsize(bool keep_orientation) const {
+    if (static_cast<uint32_t>(m.GetOrientation()) > 4 && !keep_orientation) {
+      return m.preview_size.ysize();
+    } else {
+      return m.preview_size.xsize();
+    }
+  }
+  size_t oriented_ysize(bool keep_orientation) const {
+    if (static_cast<uint32_t>(m.GetOrientation()) > 4 && !keep_orientation) {
+      return xsize();
+    } else {
+      return ysize();
+    }
+  }
+  size_t oriented_preview_ysize(bool keep_orientation) const {
+    if (static_cast<uint32_t>(m.GetOrientation()) > 4 && !keep_orientation) {
+      return m.preview_size.xsize();
+    } else {
+      return m.preview_size.ysize();
+    }
+  }
 };
 
 }  // namespace jxl
 
 #endif  // LIB_JXL_IMAGE_METADATA_H_
