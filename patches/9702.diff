commit a878d23b2395865a57e26bc8600cbde8a7d22c7c
Author: Anders Broman <a.broman58@gmail.com>
Date:   Tue Aug 7 22:12:14 2018 +0200

    nas5gs: Bugfixes and enhancements.
    
    Change-Id: I34252f8f7ab59e1693174aa1a4c040668dcb388c
    Reviewed-on: https://code.wireshark.org/review/29007
    Petri-Dish: Anders Broman <a.broman58@gmail.com>
    Petri-Dish: Peter Wu <peter@lekensteyn.nl>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Anders Broman <a.broman58@gmail.com>

diff --git a/epan/dissectors/packet-nas_5gs.c b/epan/dissectors/packet-nas_5gs.c
index 2584e9a19e..4ee363ed06 100644
--- a/epan/dissectors/packet-nas_5gs.c
+++ b/epan/dissectors/packet-nas_5gs.c
@@ -542,21 +542,22 @@ static guint16
 de_nas_5gs_mm_5gs_reg_type(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_,
     guint32 offset, guint len _U_,
     gchar *add_string _U_, int string_len _U_)
 {
+
     static const int * flags[] = {
         &hf_nas_5gs_mm_for,
         &hf_nas_5gs_mm_sms_over_nas,
         &hf_nas_5gs_mm_5gs_reg_type,
         NULL
     };
 
 
     /* FOR    SMS requested    5GS registration type value    octet 3*/
     proto_tree_add_bitmask_list(tree, tvb, offset, 1, flags, ENC_BIG_ENDIAN);
 
     return 1;
 }
 
 /*
  * 9.10.3.8     5GS tracking area identity
  */
@@ -1260,42 +1261,43 @@ de_nas_5gs_mm_sal(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo,
  *     9.10.3.46    Service type
  */
 
+/* Used inline as H1 (Upper nibble)*/
 static const value_string nas_5gs_mm_serv_type_vals[] = {
     { 0x00, "Signalling" },
     { 0x01, "Data" },
     { 0x02, "Paging response" },
     { 0x03, "Reserved" },
     { 0x04, "Emergency services fallback" },
     {    0, NULL } };
-
+#if 0
 static guint16
 de_nas_5gs_mm_serv_type(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_,
     guint32 offset, guint len _U_,
     gchar *add_string _U_, int string_len _U_)
 {
     static const int * flags[] = {
         &hf_nas_5gs_spare_b3,
         &hf_nas_5gs_mm_serv_type,
         NULL
     };
 
 
     proto_tree_add_bitmask_list(tree, tvb, offset, 1, flags, ENC_BIG_ENDIAN);
 
     return 1;
 }
-
+#endif
 
 /*
  *     9.10.3.47    Time zone
  */
 /* See subclause 10.5.3.8 in 3GPP TS 24.008 */
 
 /*
  *     9.10.3.48    Time zone and time
  */
 /* See subclause 10.5.3.9 in 3GPP TS 24.00*/
 
 /*
  * 9.10.3.49    Transparent container
  */
@@ -1459,48 +1461,49 @@ static guint16
 de_nas_5gs_mm_ul_data_status(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo,
     guint32 offset, guint len,
     gchar *add_string _U_, int string_len _U_)
 {
     int curr_offset;
 
     static const int * psi_0_7_flags[] = {
         &hf_nas_5gs_ul_data_sts_psi_7_b7,
         &hf_nas_5gs_ul_data_sts_psi_6_b6,
         &hf_nas_5gs_ul_data_sts_psi_5_b5,
         &hf_nas_5gs_ul_data_sts_psi_4_b4,
         &hf_nas_5gs_ul_data_sts_psi_3_b3,
         &hf_nas_5gs_ul_data_sts_psi_2_b2,
         &hf_nas_5gs_ul_data_sts_psi_1_b1,
         &hf_nas_5gs_ul_data_sts_psi_0_b0,
         NULL
     };
 
     static const int * psi_8_15_flags[] = {
         &hf_nas_5gs_ul_data_sts_psi_15_b7,
         &hf_nas_5gs_ul_data_sts_psi_14_b6,
         &hf_nas_5gs_ul_data_sts_psi_13_b5,
         &hf_nas_5gs_ul_data_sts_psi_12_b4,
         &hf_nas_5gs_ul_data_sts_psi_11_b3,
         &hf_nas_5gs_ul_data_sts_psi_10_b2,
         &hf_nas_5gs_ul_data_sts_psi_9_b1,
         &hf_nas_5gs_ul_data_sts_psi_8_b0,
         NULL
     };
 
     curr_offset = offset;
     proto_tree_add_bitmask_list(tree, tvb, curr_offset, 1, psi_0_7_flags, ENC_BIG_ENDIAN);
     curr_offset++;
 
     proto_tree_add_bitmask_list(tree, tvb, curr_offset, 1, psi_8_15_flags, ENC_BIG_ENDIAN);
+    curr_offset++;
 
     EXTRANEOUS_DATA_CHECK(len, curr_offset - offset, pinfo, &ei_nas_5gs_extraneous_data);
 
     return (curr_offset - offset);
 }
 
 /*
  * 9.10.4    5GS session management (5GSM) information elements
  */
 
  /*
  *       9.10.4.1    5GSM capability
  */
@@ -2122,61 +2125,61 @@ guint16(*nas_5gs_common_elem_fcn[])(tvbuff_t *tvb, proto_tree *tree, packet_info
 /*
  * 9.10.3    5GS mobility management (5GMM) information elements
  */
 #if 0
 typedef enum
 {
     DE_NAS_5GS_MM_5GMM_CAP,                  /* 9.10.3.1     5GMM capability*/
     DE_NAS_5GS_MM_5GMM_CAUSE,                /* 9.10.3.2     5GMM cause*/
     DE_NAS_5GS_MM_5GS_IDENTITY_TYPE,         /* 9.10.3.3     5GS identity type*/
     DE_NAS_5GS_MM_5GS_MOBILE_ID,             /* 9.10.3.4     5GS mobile identity*/
     DE_NAS_5GS_MM_5GS_NW_FEAT_SUP,           /* 9.10.3.5     5GS network feature support*/
     DE_NAS_5GS_MM_5GS_REG_RES,               /* 9.10.3.6     5GS registration result*/
     DE_NAS_5GS_MM_5GS_REG_TYPE,              /* 9.10.3.7     5GS registration type*/
     DE_NAS_5GS_MM_5GS_TA_ID,                 /* 9.10.3.8     5GS tracking area identity */
     DE_NAS_5GS_MM_5GS_TA_ID_LIST,            /* 9.10.3.9     5GS tracking area identity list */
     DE_NAS_5GS_MM_ACCESS_TYPE,               /* 9.10.3.10    Access type */
     DE_NAS_5GS_MM_ALLOW_PDU_SES_STS,         /* 9.10.3.11    Allowed PDU session status*/
     DE_NAS_5GS_MM_AUT_FAIL_PAR,              /* 9.10.3.12    Authentication failure parameter */
     DE_NAS_5GS_MM_AUT_PAR_AUTN,              /* 9.10.3.13    Authentication parameter AUTN*/
     DE_NAS_5GS_MM_AUT_PAR_RAND,              /* 9.10.3.14    Authentication parameter RAND*/
     DE_NAS_5GS_MM_AUT_RESP_PAR,              /* 9.10.3.15    Authentication response parameter */
     DE_NAS_5GS_MM_CONF_UPD_IND,              /* 9.10.3.16    Configuration update indication*/
     DE_NAS_5GS_MM_DLGT_SAVING_TIME,          /* 9.10.3.17    Daylight saving time*/
     DE_NAS_5GS_MM_DE_REG_TYPE,               /* 9.10.3.18    De-registration type*/
     DE_NAS_5GS_MM_DNN,                       /* 9.10.3.19    DNN*/
     DE_NAS_5GS_MM_DRX_PAR,                   /* 9.10.3.20    DRX parameters */
     DE_NAS_5GS_MM_EMRG_NR_LIST,              /* 9.10.3.21    Emergency number list */
     DE_NAS_5GS_MM_EPS_NAS_MSG_CONT,          /* 9.10.3.22    EPS NAS message container */
     DE_NAS_5GS_MM_EPS_NAS_SEC_ALGO,          /* 9.10.3.23    EPS NAS security algorithms */
     DE_NAS_5GS_MM_EXT_EMERG_NUM_LIST,        /* 9.10.3.24    Extended emergency number list */
     DE_NAS_5GS_MM_HASHAMF,                   /* 9.10.3.25    HashAMF*/
     DE_NAS_5GS_MM_IMEISV_REQ,                /* 9.10.3.26    IMEISV request*/
     DE_NAS_5GS_MM_LADN_INF,                  /* 9.10.3.27    LADN information*/
     DE_NAS_5GS_MM_MICO_IND,                  /* 9.10.3.28    MICO indication*/
     DE_NAS_5GS_MM_NAS_KEY_SET_ID,            /* 9.10.3.29    NAS key set identifier*/
     DE_NAS_5GS_MM_NAS_MSG,                   /* 9.10.3.30    NAS message */
     DE_NAS_5GS_MM_NAS_MSG_CONT,              /* 9.10.3.31    NAS message container*/
     DE_NAS_5GS_MM_NAS_SEC_ALGO,              /* 9.10.3.32    NAS security algorithms*/
     DE_NAS_5GS_MM_NW_NAME,                   /* 9.10.3.33    Network name*/
     DE_NAS_5GS_MM_NSSAI,                     /* 9.10.3.34    NSSAI*/
     DE_NAS_5GS_MM_PLD_CONT,                  /* 9.10.3.35    Payload container*/
     DE_NAS_5GS_MM_PLD_CONT_TYPE,             /* 9.10.3.36    Payload container type*/
     DE_NAS_5GS_MM_PDU_SES_ID_2,              /* 9.10.3.37    PDU session identity 2 */
     DE_NAS_5GS_MM_PDU_SES_REACT_RES,         /* 9.10.3.38    PDU session reactivation result*/
     DE_NAS_5GS_MM_PDU_SES_REACT_RES_ERR_C,   /* 9.10.3.39    PDU session reactivation result error cause */
     DE_NAS_5GS_MM_PDU_SES_STATUS,            /* 9.10.3.40    PDU session status */
     DE_NAS_5GS_MM_PLMN_LIST,                 /* 9.10.3.41    PLMN list*/
     DE_NAS_5GS_MM_REJ_NSSAI,                 /* 9.10.3.42    Rejected NSSAI*/
     DE_NAS_5GS_MM_REQ_TYPE,                  /* 9.10.3.43    Request type */
     DE_NAS_5GS_MM_S1_UE_NW_CAP,              /* 9.10.3.44    S1 UE network capability*/
     DE_NAS_5GS_MM_SAL,                       /* 9.10.3.45    Service area list*/
-    DE_NAS_5GS_MM_SERV_TYPE,                 /* 9.10.3.46    Service type*/
+    NULL,                                    /* 9.10.3.46    Service type,*/ /* Used inline Half octet IE*/
     DE_NAS_5GS_MM_TZ,                        /* 9.10.3.47    Time zone*/
     DE_NAS_5GS_MM_TZ_AND_T,                  /* 9.10.3.48    Time zone and time*/
     DE_NAS_5GS_MM_TRANSP_CONT,               /* 9.10.3.49    Transparent container */
     DE_NAS_5GS_MM_UE_SEC_CAP,                /* 9.10.3.50    UE security capability*/
     DE_NAS_5GS_MM_UE_USAGE_SET,              /* 9.10.3.51    UE's usage setting */
     DE_NAS_5GS_MM_UE_STATUS,                 /* 9.10.3.52    UE status */
     DE_NAS_5GS_MM_UL_DATA_STATUS,            /* 9.10.3.53    Uplink data status */
     DE_NAS_5GS_MM_NONE        /* NONE */
 }
@@ -2248,66 +2251,66 @@ gint ett_nas_5gs_mm_elem[NUM_NAS_5GS_MM_ELEM];
 guint16(*nas_5gs_mm_elem_fcn[])(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo,
     guint32 offset, guint len,
     gchar *add_string, int string_len) = {
         /*  9.10.3    5GS mobility management (5GMM) information elements */
         de_nas_5gs_mm_5gmm_cap,                  /* 9.10.3.1     5GMM capability*/
         de_nas_5gs_mm_5gmm_cause,                /* 9.10.3.2     5GMM cause*/
         de_nas_5gs_mm_5gs_identity_type,         /* 9.10.3.3     5GS identity type*/
         de_nas_5gs_mm_5gs_mobile_id,             /* 9.10.3.4     5GS mobile identity*/
         de_nas_5gs_mm_5gs_nw_feat_sup,           /* 9.10.3.5     5GS network feature support*/
         de_nas_5gs_mm_5gs_reg_res,               /* 9.10.3.6     5GS registration result*/
         de_nas_5gs_mm_5gs_reg_type,              /* 9.10.3.7     5GS registration type*/
         de_nas_5gs_mm_5gs_ta_id,                 /* 9.10.3.8     5GS tracking area identity */
         de_nas_5gs_mm_5gs_ta_id_list,            /* 9.10.3.9     5GS tracking area identity list */
         de_nas_5gs_mm_access_type,               /* 9.10.3.10    Access type */
 
 
         de_nas_5gs_mm_allow_pdu_ses_sts,         /* 9.10.3.11    Allowed PDU session status*/
         NULL,                                    /* 9.10.3.12    Authentication failure parameter */
         NULL,                                    /* 9.10.3.13    Authentication parameter AUTN*/
         NULL,                                    /* 9.10.3.14    Authentication parameter RAND*/
         NULL,                                    /* 9.10.3.15    Authentication response parameter */
         de_nas_5gs_mm_conf_upd_ind,              /* 9.10.3.16    Configuration update indication*/
         NULL,                                    /* 9.10.3.17    Daylight saving time*/
         de_nas_5gs_mm_de_reg_type,               /* 9.10.3.18    De-registration type*/
         de_nas_5gs_mm_dnn,                       /* 9.10.3.19    DNN*/
         de_nas_5gs_mm_drx_par,                   /* 9.10.3.20    DRX parameters*/
         NULL,                                    /* 9.10.3.21    Emergency number list*/
         de_nas_5gs_mm_eps_nas_msg_cont,          /* 9.10.3.22    EPS NAS message container*/
         NULL,                                    /* 9.10.3.23    EPS NAS security algorithms*/
         NULL,                                    /* 9.10.3.24    Extended emergency number list*/
         de_nas_5gs_mm_hashamf,                   /* 9.10.3.25    HashAMF*/
         NULL,                                    /* 9.10.3.26    IMEISV request*/
         de_nas_5gs_mm_ladn_inf,                  /* 9.10.3.27    LADN information*/
         de_nas_5gs_mm_mico_ind,                  /* 9.10.3.28    MICO indication*/
         de_nas_5gs_mm_nas_key_set_id,            /* 9.10.3.29    NAS key set identifier*/
         de_nas_5gs_mm_nas_msg,                   /* 9.10.3.30    NAS message*/
         de_nas_5gs_mm_nas_msg_cont,              /* 9.10.3.31    NAS message container*/
         de_nas_5gs_mm_nas_sec_algo,              /* 9.10.3.32    NAS security algorithms*/
         NULL,                                    /* 9.10.3.33    Network name*/
         de_nas_5gs_mm_nssai,                     /* 9.10.3.34    NSSAI*/
         de_nas_5gs_mm_pld_cont,                  /* 9.10.3.35    Payload container*/
         de_nas_5gs_mm_pld_cont_type,             /* 9.10.3.36    Payload container type*/
         de_nas_5gs_mm_pdu_ses_id_2,              /* 9.10.3.37    PDU session identity 2*/
         de_nas_5gs_mm_pdu_ses_react_res,         /* 9.10.3.38    PDU session reactivation result*/
         de_nas_5gs_mm_pdu_ses_react_res_err_c,   /* 9.10.3.39    PDU session reactivation result error cause */
         de_nas_5gs_mm_pdu_ses_status,            /* 9.10.3.40    PDU session status*/
         NULL,                                    /* 9.10.3.41    PLMN list*/
         de_nas_5gs_mm_rej_nssai,                 /* 9.10.3.42    Rejected NSSAI*/
         de_nas_5gs_mm_req_type,                  /* 9.10.3.43    Request type*/
         NULL,                                    /* 9.10.3.44    S1 UE network capability*/
         de_nas_5gs_mm_sal,                       /* 9.10.3.45    Service area list*/
-        de_nas_5gs_mm_serv_type,                 /* 9.10.3.46    Service type*/
+        NULL,                                    /* 9.10.3.46    Service type*/ /* Used Inline Half octet IE */
         NULL,                                    /* 9.10.3.47    Time zone*/
         NULL,                                    /* 9.10.3.48    Time zone and time*/
         de_nas_5gs_mm_transp_cont,               /* 9.10.3.49    Transparent container*/
         de_nas_5gs_mm_ue_sec_cap,                /* 9.10.3.50    UE security capability*/
         de_nas_5gs_mm_ue_usage_set,              /* 9.10.3.51    UE's usage setting*/
         de_nas_5gs_mm_ue_status,                 /* 9.10.3.52    UE status*/
         de_nas_5gs_mm_ul_data_status,            /* 9.10.3.53    Uplink data status*/
         NULL,   /* NONE */
 };
 
 
 /*
  * 9.10.4    5GS session management (5GSM) information elements
  */
@@ -2501,87 +2504,84 @@ static void
 nas_5gs_mm_registration_req(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)
 {
     guint32 curr_offset;
     guint32 consumed;
     guint   curr_len;
 
     curr_offset = offset;
     curr_len = len;
 
 #ifdef NAS_V_2_0_0
     /*    5GS registration type    5GS registration type 9.10.3.7    M    LV    2*/
     ELEM_MAND_LV(NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_5GS_REG_TYPE, NULL, ei_nas_5gs_missing_mandatory_elemen);
 #else
     /*    5GS registration type    5GS registration type 9.10.3.7    M    V    1*/
     ELEM_MAND_V(NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_5GS_REG_TYPE, NULL, ei_nas_5gs_missing_mandatory_elemen);
 #endif
-
     /*    ngKSI    NAS key set identifier 9.10.3.22    M    V    1*/
     ELEM_MAND_V(NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_NAS_KEY_SET_ID, " - ngKSI", ei_nas_5gs_missing_mandatory_elemen);
 
     /*    Mobile identity    5GS mobile identity 9.10.3.4    M    LV    TBD*/
     ELEM_MAND_LV(NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_5GS_MOBILE_ID, NULL, ei_nas_5gs_missing_mandatory_elemen);
 
 #ifdef NAS_V_2_0_0
     /*C-    Non-current native NAS KSI    NAS key set identifier 9.10.3.29    O    TV    1*/
     ELEM_OPT_TV_SHORT(0xc0, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_NAS_KEY_SET_ID, " - native KSI");
 #else
     /*55    NonceUE    Nonce 9.10.3.27    O    TV    5*/
     ELEM_OPT_TV(0x55, NAS_PDU_TYPE_EMM, DE_EMM_NONCE, " - NonceUE");
 #endif
-
     /*10    5GMM capability    5GMM capability 9.10.3.1    O    TLV    4-15*/
     ELEM_OPT_TLV(0x10, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_5GMM_CAP, NULL);
 
     /*2E    UE security capability    UE security capability 9.10.3.48    O    TLV    4-6*/
     ELEM_OPT_TLV(0x2e, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_UE_SEC_CAP, NULL);
 
     /*2F    Requested NSSAI    NSSAI 9.10.3.28    O    TLV    4-74*/
     ELEM_OPT_TLV(0x2f, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_NSSAI, " - Requested NSSAI");
 
     /*52    Last visited registered TAI    Tracking area identity 9.10.3.44    O    TV    6*/
     ELEM_OPT_TV(0x52, NAS_PDU_TYPE_EMM, DE_EMM_TRAC_AREA_ID, " - Last visited registered TAI");
 
 #ifdef NAS_V_2_0_0
     /*65    S1 UE network capability    S1 UE network capability 9.10.3.44    O    TLV    4-15 */
     ELEM_OPT_TLV(0x65, NAS_PDU_TYPE_EMM, DE_EMM_UE_NET_CAP, NULL);
 #else
     /*30    S1 UE network capability    S1 UE network capability 9.10.3.46    O    TLV    4-15 */
     ELEM_OPT_TLV(0x30, NAS_PDU_TYPE_EMM, DE_EMM_UE_NET_CAP, NULL);
 #endif
-
-    /*40    Uplink data status    Uplink data status 9.10.2.3    O    TLV    4 */
+    /*40    Uplink data status    Uplink data status 9.10.2.3    O    TLV    4*/
     ELEM_OPT_TLV(0x40, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_UL_DATA_STATUS, NULL);
 
-    /*50    PDU session status    PDU session status 9.10.2.2    O    TLV    4 */
+    /*50    PDU session status    PDU session status 9.10.2.2    O    TLV    4*/
     ELEM_OPT_TLV(0x50, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_PDU_SES_STATUS, NULL);
 
     /*B-    MICO indication    MICO indication 9.10.3.21    O    TV    1*/
     ELEM_OPT_TV_SHORT(0xb0, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_MICO_IND, NULL);
 
     /*2B    UE status    UE status 9.10.3.49    O    TLV    3*/
     ELEM_OPT_TLV(0x2b, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_UE_STATUS, NULL);
 
     /*2C    Additional GUTI    5GS mobile identity 9.10.3.4    O    TLV    TBD*/
     ELEM_OPT_TLV(0x2c, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_5GS_MOBILE_ID, " -  Additional GUTI");
 
     /*25    Allowed PDU session status    Allowed PDU session status         9.10.3.11    O    TLV    4 - 34 */
     ELEM_OPT_TLV(0x25, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_ALLOW_PDU_SES_STS, NULL);
 
     /*60    UE's usage setting    UE's usage setting         9.10.3.51    O    TLV    3 */
     ELEM_OPT_TLV(0x60, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_UE_USAGE_SET, NULL);
 
     /*TBD    Requested DRX parameters    DRX parameters         9.10.3.20    O    TBD    TBD*/
 
     /*7C    EPS NAS message container    EPS NAS message container 9.10.3.15    O    TLV-E    TBD*/
     ELEM_OPT_TLV_E(0x7c, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_EPS_NAS_MSG_CONT, NULL);
 
     /* 77    Payload container     Payload container 9.10.3.35    O    TLV-E    4-65538 */
     ELEM_OPT_TLV_E(0x77, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_PLD_CONT, NULL);
 
     EXTRANEOUS_DATA_CHECK(curr_len, 0, pinfo, &ei_nas_5gs_extraneous_data);
 
 }
 
 /*
  * 8.2.7    Registration accept
  */
@@ -2697,42 +2697,45 @@ static void
 nas_5gs_mm_ul_nas_transp(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)
 {
     guint32 curr_offset;
     guint32 consumed;
     guint   curr_len;
 
     curr_offset = offset;
     curr_len = len;
 
     /* Direction: network to UE*/
     /*Payload container type    Payload container type     9.10.3.31    M    V    1/2 */
     /*Spare half octet    Spare half octet    9.5    M    V    1/2*/
     proto_tree_add_item(tree, hf_nas_5gs_spare_half_octet, tvb, curr_offset, 1, ENC_BIG_ENDIAN);
     ELEM_MAND_V(NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_PLD_CONT_TYPE, NULL, ei_nas_5gs_missing_mandatory_elemen);
 
 
     /*Payload container    Payload container    9.10.3.30    M    LV-E    3-65537*/
     ELEM_MAND_LV_E(NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_PLD_CONT, NULL, ei_nas_5gs_missing_mandatory_elemen);
 
+#ifdef NAS_V_2_0_0
     /*70    PDU session ID    PDU session identity 2 9.10.3.37    C    TV    2 */
     ELEM_OPT_TV(0x70, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_PDU_SES_ID_2, " - PDU session ID");
-
+#else
+    ELEM_MAND_V(NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_PDU_SES_ID_2, " - PDU session ID", ei_nas_5gs_missing_mandatory_elemen);
+#endif
     /*61    Old PDU session ID    PDU session identity 2 9.10.3.37    O    TV    2 */
     ELEM_OPT_TV(0x61, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_PDU_SES_ID_2, " - Old PDU session ID");
     /*8-    Request type    Request type    9.10.3.42    O    TV    1 */
     ELEM_OPT_TV_SHORT(0x80, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_REQ_TYPE, NULL);
     /*22    S-NSSAI    S-NSSAI    9.10.3.37    O    TLV    3-10 */
     ELEM_OPT_TLV(0x22, NAS_5GS_PDU_TYPE_COMMON, DE_NAS_5GS_CMN_S_NSSAI, NULL);
     /*25    DNN    DNN    9.10.3.13    O    TLV    3-102 */
     ELEM_OPT_TLV(0x25, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_DNN, NULL);
     /*24    Additional information    Additional information    9.10.2.1    O    TLV    3-n */
     ELEM_OPT_TLV(0x24, NAS_5GS_PDU_TYPE_COMMON, DE_NAS_5GS_CMN_ADD_INF, NULL);
 
 
 
     EXTRANEOUS_DATA_CHECK(curr_len, 0, pinfo, &ei_nas_5gs_extraneous_data);
 
 }
 
 /*
 * 8.2.11 DL NAS transport
 */
@@ -2740,34 +2743,38 @@ static void
 nas_5gs_mm_dl_nas_transp(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)
 {
     guint32 curr_offset;
     guint32 consumed;
     guint   curr_len;
 
     curr_offset = offset;
     curr_len = len;
 
     /*Payload container type    Payload container type     9.10.3.31    M    V    1/2 */
     /*Spare half octet    Spare half octet    9.5    M    V    1/2*/
     proto_tree_add_item(tree, hf_nas_5gs_spare_half_octet, tvb, curr_offset, 1, ENC_BIG_ENDIAN);
     ELEM_MAND_V(NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_PLD_CONT_TYPE, NULL, ei_nas_5gs_missing_mandatory_elemen);
 
 
     /*Payload container    Payload container    9.10.3.30    M    LV-E    3-65537*/
     ELEM_MAND_LV_E(NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_PLD_CONT, NULL, ei_nas_5gs_missing_mandatory_elemen);
+#ifdef NAS_V_2_0_0
     /*70    PDU session ID    PDU session identity 2 9.10.3.37    C    TV    2 */
     ELEM_OPT_TV(0x70, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_PDU_SES_ID_2, " - PDU session ID");
+#else
+    ELEM_MAND_V(NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_PDU_SES_ID_2, " - PDU session ID", ei_nas_5gs_missing_mandatory_elemen);
+#endif
     /*24    Additional information    Additional information    9.10.2.1    O    TLV    3-n*/
     ELEM_OPT_TLV(0x24, NAS_5GS_PDU_TYPE_COMMON, DE_NAS_5GS_CMN_ADD_INF, NULL);
     /*58    5GMM cause    5GMM cause 9.10.3.2    O    TV    2 */
     ELEM_OPT_TV(0x58, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_5GMM_CAUSE, NULL);
     /*37    Back-off timer value    GPRS timer 3 9.10.2.5    O    TLV    3 */
     ELEM_OPT_TLV(0x37, GSM_A_PDU_TYPE_GM, DE_GPRS_TIMER_3, " - Back-off timer value");
 
 
     EXTRANEOUS_DATA_CHECK(curr_len, 0, pinfo, &ei_nas_5gs_extraneous_data);
 
 }
 
 /*
  * 8.2.12 De-registration request (UE originating de-registration)
  */
@@ -2805,31 +2812,34 @@ static void
 nas_5gs_mm_de_registration_req_ue_term(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)
 {
     guint32 curr_offset;
     guint32 consumed;
     guint   curr_len;
 
     curr_offset = offset;
     curr_len = len;
 
     /* De-registration type    De-registration type 9.10.3.12   M   V   1 */
     ELEM_MAND_V(NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_DE_REG_TYPE, NULL, ei_nas_5gs_missing_mandatory_elemen);
 
+#ifdef NAS_V_2_0_0
     /* 58 5GMM cause   5GMM cause     9.10.3.2  O   TV   2 */
     ELEM_OPT_TV(0x58, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_5GMM_CAUSE, NULL);
-
+#else
+    ELEM_OPT_TV(0x72, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_5GMM_CAUSE, NULL);
+#endif
     /* 5F  T3346 value GPRS timer 2     9.10.3.16   O   TLV 3 */
     ELEM_OPT_TLV(0x5F, GSM_A_PDU_TYPE_GM, DE_GPRS_TIMER_2, " - T3346 value");
 
     EXTRANEOUS_DATA_CHECK(curr_len, 0, pinfo, &ei_nas_5gs_extraneous_data);
 
 }
 
 /*
  * 8.2.15 De-registration accept (UE terminated de-registration)
  */
  /* No data */
 
 
 /*
  * 8.2.16 Service request
  */
@@ -2837,26 +2847,30 @@ static void
 nas_5gs_mm_service_req(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)
 {
     guint32 curr_offset;
     guint32 consumed;
     guint   curr_len;
 
     curr_offset = offset;
     curr_len = len;
 
+    /* ngKSI     NAS key set identifier 9.10.3.29    M    V    1/2 */
     /* Service type    Service type 9.10.3.46    M    V    1/2 */
+    proto_tree_add_item(tree, hf_nas_5gs_mm_serv_type, tvb, curr_offset, 1, ENC_BIG_ENDIAN);
     ELEM_MAND_V(NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_NAS_KEY_SET_ID, " - ngKSI", ei_nas_5gs_missing_mandatory_elemen);
 
+    /* 5G-S-TMSI    5GS mobile identity 9.10.3.4    M    LV    6 */
+    ELEM_MAND_LV(NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_5GS_MOBILE_ID, NULL, ei_nas_5gs_missing_mandatory_elemen);
     /*40    Uplink data status    Uplink data status         9.10.3.53    O    TLV    4 - 34*/
     ELEM_OPT_TLV(0x40, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_UL_DATA_STATUS, NULL);
     /*50    PDU session status    PDU session status         9.10.3.40    O    TLV    4 - 34*/
     ELEM_OPT_TLV(0x50, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_PDU_SES_STATUS, NULL);
     /*25    Allowed PDU session status    Allowed PDU session status         9.10.3.11    O    TLV    4 - 34*/
     ELEM_OPT_TLV(0x25, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_ALLOW_PDU_SES_STS, NULL);
 
     EXTRANEOUS_DATA_CHECK(curr_len, 0, pinfo, &ei_nas_5gs_extraneous_data);
 
 }
 
 /*
   * 8.2.17 Service accept
  */
@@ -3208,38 +3222,39 @@ static void
 nas_5gs_sm_pdu_ses_est_acc(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)
 {
     guint32 curr_offset;
     guint32 consumed;
     guint   curr_len;
 
     curr_offset = offset;
     curr_len = len;
 
     /*Selected PDU session type    PDU session type 9.10.4.5    M    V    1/2*/
     ELEM_MAND_V(NAS_5GS_PDU_TYPE_SM, DE_NAS_5GS_SM_PDU_SESSION_TYPE, " - Selected PDU session type", ei_nas_5gs_missing_mandatory_elemen);
     /*Selected SSC mode    SSC mode 9.10.4.9    M    V    1/2*/
 
     /* DNN    DNN 9.10.3.13    M    LV    2-TBD*/
     ELEM_OPT_TLV(0x25, NAS_5GS_PDU_TYPE_MM, DE_NAS_5GS_MM_DNN, NULL);
 
-    /*Authorized QoS rules    QoS rules 9.10.4.6    M    LV-E    2-65537*/
+    /*Authorized QoS rules    QoS rules 9.10.4.6    M    LV-E    2-65537 DE_NAS_5GS_SM_QOS_RULES*/
+    ELEM_MAND_LV_E(NAS_5GS_PDU_TYPE_SM, DE_NAS_5GS_SM_QOS_RULES, " - Authorized QoS rules", ei_nas_5gs_missing_mandatory_elemen);
     /*Session AMBR    Session-AMBR 9.10.4.7    M    LV    TBD*/
     /*73    5GSM cause    5GSM cause 9.10.4.1    O    TV    2*/
     ELEM_OPT_TV(0x73, NAS_5GS_PDU_TYPE_SM, DE_NAS_5GS_SM_5GSM_CAUSE, NULL);
 
     /*29    PDU address    PDU address 9.10.4.4    O    TLV    7*/
     /*78    EAP message    EAP message 9.10.3.14    O    TLV-E    7-1503*/
     ELEM_OPT_TLV_E(0x78, NAS_5GS_PDU_TYPE_COMMON, DE_NAS_5GS_CMN_EAP_MESSAGE, NULL);
     /*74    RQ timer value    GPRS timer 9.10.4.3    O    TV    2*/
     /*7B    Extended protocol configuration options    Extended protocol configuration options 9.10.4.2    O    TLV-E    4-65538*/
     ELEM_OPT_TLV_E(0x7B, NAS_PDU_TYPE_ESM, DE_ESM_EXT_PCO, NULL);
 
     /*22    S-NSSAI    S-NSSAI 9.10.3.37    O    TLV    3-6*/
     ELEM_OPT_TLV(0x22, NAS_5GS_PDU_TYPE_COMMON, DE_NAS_5GS_CMN_S_NSSAI, NULL);
 
     EXTRANEOUS_DATA_CHECK(curr_len, 0, pinfo, &ei_nas_5gs_extraneous_data);
 
 }
 
 /*
  * 8.3.3 PDU session establishment reject
  */
@@ -3325,23 +3340,24 @@ static void
 nas_5gs_sm_pdu_ses_mod_req(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len)
 {
     guint32 curr_offset;
     guint32 consumed;
     guint   curr_len;
 
     curr_offset = offset;
     curr_len = len;
 
     /*7B    Extended protocol configuration options    Extended protocol configuration options    9.10.4.2    O    TLV - E    4 - 65538*/
     ELEM_OPT_TLV_E(0x7B, NAS_PDU_TYPE_ESM, DE_ESM_EXT_PCO, NULL);
 
     /*7A    Requested QoS rules    QoS rules 9.10.4.6    O    TLV-E    3-65538 */
-
+    ELEM_OPT_TLV_E(0x7A, NAS_5GS_PDU_TYPE_SM, DE_NAS_5GS_SM_QOS_RULES, " - Requested QoS rules");
     /* 28    5GSM capability    5GSM capability 9.10.4.10    O    TLV    3-15 */
+    ELEM_OPT_TLV(0x28, NAS_5GS_PDU_TYPE_SM, DE_NAS_5GS_SM_5GSM_CAP, NULL);
 
     EXTRANEOUS_DATA_CHECK(curr_len, 0, pinfo, &ei_nas_5gs_extraneous_data);
 
 }
 
 /*
  * 8.3.7    PDU session modification reject
  */
@@ -4033,870 +4049,870 @@ void
 proto_register_nas_5gs(void)
 {
 
     /* List of fields */
 
     static hf_register_info hf[] = {
         { &hf_nas_5gs_epd,
         { "Extended protocol discriminator",   "nas_5gs.epd",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_epd_vals), 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_spare_b7,
         { "Spare",   "nas_5gs.spare_b7",
             FT_UINT8, BASE_DEC, NULL, 0x80,
             NULL, HFILL }
         },
         { &hf_nas_5gs_spare_b6,
         { "Spare",   "nas_5gs.spare_b6",
             FT_UINT8, BASE_DEC, NULL, 0x40,
             NULL, HFILL }
         },
         { &hf_nas_5gs_spare_b5,
         { "Spare",   "nas_5gs.spare_b5",
             FT_UINT8, BASE_DEC, NULL, 0x20,
             NULL, HFILL }
         },
         { &hf_nas_5gs_spare_b4,
         { "Spare",   "nas_5gs.spare_b4",
             FT_UINT8, BASE_DEC, NULL, 0x10,
             NULL, HFILL }
         },
         { &hf_nas_5gs_spare_b3,
         { "Spare",   "nas_5gs.spare_b3",
             FT_UINT8, BASE_DEC, NULL, 0x08,
             NULL, HFILL }
         },
         { &hf_nas_5gs_spare_b2,
         { "Spare",   "nas_5gs.spare_b2",
             FT_UINT8, BASE_DEC, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_nas_5gs_spare_b1,
         { "Spare",   "nas_5gs.spare_b1",
             FT_UINT8, BASE_DEC, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_nas_5gs_security_header_type,
         { "Security header type",   "nas_5gs.security_header_type",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_security_header_type_vals), 0x0f,
             NULL, HFILL }
         },
         { &hf_nas_5gs_msg_auth_code,
         { "Message authentication code",   "nas_5gs.msg_auth_code",
             FT_UINT32, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_seq_no,
         { "Sequence number",   "nas_5gs.seq_no",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_msg_type,
         { "Message type",   "nas_5gs.mm.message_type",
         FT_UINT8, BASE_HEX | BASE_EXT_STRING, &nas_5gs_mm_msg_strings_ext, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_msg_type,
         { "Message type",   "nas_5gs.sm.message_type",
         FT_UINT8, BASE_HEX | BASE_EXT_STRING, &nas_5gs_sm_msg_strings_ext, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_common_elem_id,
             { "Element ID", "nas_5gs.common.elem_id",
             FT_UINT8, BASE_HEX, NULL, 0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_elem_id,
             { "Element ID", "nas_5gs.mm.elem_id",
             FT_UINT8, BASE_HEX, NULL, 0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_elem_id,
             { "Element ID", "nas_5gs.sm.elem_id",
             FT_UINT8, BASE_HEX, NULL, 0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_proc_trans_id,
         { "Procedure transaction identity",   "nas_5gs.proc_trans_id",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_spare_half_octet,
         { "Spare Half Octet",   "nas_5gs.spare_half_octet",
             FT_UINT8, BASE_DEC, NULL, 0xf0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_pdu_session_id,
         { "PDU session identity",   "nas_5gs.pdu_session_id",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_pdu_session_id_vals), 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_msg_elems,
         { "Message Elements", "nas_5gs.message_elements",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_for,
         { "Follow-On Request bit (FOR)",   "nas_5gs.mm.for",
             FT_BOOLEAN, 8, TFS(&nas_5gs_for_tfs), 0x10,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_sms_over_nas,
         { "SMS over NAS",   "nas_5gs.mm.sms_over_nas",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x08,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_5gs_reg_type,
         { "5GS registration type",   "nas_5gs.mm.5gs_reg_type",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_registration_type_values), 0x07,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_tsc,
         { "Type of security context flag (TSC)",   "nas_5gs.mm.tsc",
             FT_BOOLEAN, 8, TFS(&nas_5gs_mm_tsc_tfs), 0x08,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_nas_key_set_id,
         { "NAS key set identifier",   "nas_5gs.mm.nas_key_set_id",
             FT_UINT8, BASE_DEC, NULL, 0x07,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_5gmm_cause,
         { "5GMM cause",   "nas_5gs.mm.5gmm_cause",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_mm_cause_vals), 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_pld_cont_type,
         { "Payload container type",   "nas_5gs.mm.pld_cont_type",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_mm_pld_cont_type_vals), 0x0f,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_sst,
         { "Slice/service type (SST)",   "nas_5gs.mm.sst",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_sd,
         { "Slice differentiator (SD)",   "nas_5gs.mm.mm_sd",
             FT_UINT24, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_mapped_conf_sst,
         { "Mapped configured SST",   "nas_5gs.mm.mapped_conf_sst",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_mapped_conf_ssd,
         { "Mapped configured SD",   "nas_5gs.mm.mapped_conf_ssd",
             FT_UINT24, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_switch_off,
         { "Switch off",   "nas_5gs.mm.switch_off",
             FT_BOOLEAN, 8, TFS(&nas_5gs_mm_switch_off_tfs), 0x08,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_re_reg_req,
         { "Re-registration required",   "nas_5gs.mm.re_reg_req",
             FT_BOOLEAN, 8, TFS(&nas_5gs_mm_re_reg_req_tfs), 0x04,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_acc_type,
         { "Access type",   "nas_5gs.mm.acc_type",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_mm_acc_type_vals), 0x03,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_dnn,
         { "DNN", "nas_5gs.mm.dnn",
             FT_STRING, BASE_NONE, NULL,0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_hash_amf,
         { "HashAMF",   "nas_5gs.mm.hash_amf",
             FT_UINT64, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_raai_b0,
         { "Registration Area Allocation Indication (RAAI)",   "nas_5gs.mm.raai_b0",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_raai), 0x01,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_conf_upd_ind_ack_b0,
         { "Acknowledgement",   "nas_5gs.mm.conf_upd_ind.ack",
             FT_BOOLEAN, 8, TFS(&tfs_requested_not_requested), 0x01,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_conf_upd_ind_red_b1,
         { "Registration",   "nas_5gs.mm.conf_upd_ind.red",
             FT_BOOLEAN, 8, TFS(&tfs_requested_not_requested), 0x02,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_nas_sec_algo_enc,
         { "Type of ciphering algorithm",   "nas_5gs.mm.nas_sec_algo_enc",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_mm_type_of_enc_algo_vals), 0xf0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_nas_sec_algo_ip,
         { "Type of integrity protection algorithm",   "nas_5gs.mm.nas_sec_algo_ip",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_mm_type_of_ip_algo_vals), 0x0f,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_s1_mode_b0,
         { "S1 mode",   "nas_5gs.mm.s1_mode_b0",
             FT_BOOLEAN, 8, TFS(&tfs_requested_not_requested), 0x01,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_ho_attach_b1,
         { "HO attach",   "nas_5gs.mm.ho_attach_b1",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_type_id,
         { "Type of identity",   "nas_5gs.mm.type_id",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_mm_type_id_vals), 0x07,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_odd_even,
         { "Odd/even indication","nas_5gs.mm.odd_even",
             FT_BOOLEAN, 8, TFS(&nas_5gs_odd_even_tfs), 0x08,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_length,
         { "Length",   "nas_5gs.mm.length",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_pld_cont,
         { "Payload container",   "nas_5gs.mm.pld_cont",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_req_type,
         { "Request type",   "nas_5gs.mm.req_typ",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_mm_req_type_vals), 0x0f,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_serv_type,
         { "Service type",   "nas_5gs.mm.serv_type",
-            FT_UINT8, BASE_DEC, VALS(nas_5gs_mm_serv_type_vals), 0x07,
+            FT_UINT8, BASE_DEC, VALS(nas_5gs_mm_serv_type_vals), 0x70,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_5g_ea0,
         { "5G-EA0","nas_5gs.mm.5g_ea0",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x80,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_128_5g_ea1,
         { "128-5G-EA1","nas_5gs.mm.128_5g_ea1",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x40,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_128_5g_ea2,
         { "128-5G-EA2","nas_5gs.mm.128_5g_ea2",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x20,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_128_5g_ea3,
         { "128-5G-EA3","nas_5gs.mm.128_5g_ea3",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x10,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_5g_ea4,
         { "5G-EA4","nas_5gs.mm.5g_ea4",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x08,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_5g_ea5,
         { "5G-EA5","nas_5gs.mm.5g_ea5",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_5g_ea6,
         { "5G-EA6","nas_5gs.mm.5g_ea6",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_5g_ea7,
         { "5G-EA7","nas_5gs.mm.5g_ea7",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_5g_ia0,
         { "5G-IA0","nas_5gs.mm.ia0",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x80,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_5g_128_ia1,
         { "128-5G-IA1","nas_5gs.mm.5g_128_ia1",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x40,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_5g_128_ia2,
         { "128-5G-IA2","nas_5gs.mm.5g_128_ia2",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x20,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_5g_128_ia3,
         { "128-5G-IA3","nas_5gs.mm.5g_128_ia4",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x10,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_5g_ia4,
         { "5G-IA4","nas_5gs.mm.5g_128_ia4",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x08,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_5g_ia5,
         { "5G-IA5","nas_5gs.mm.5g_ia5",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_5g_ia6,
         { "5G-IA6","nas_5gs.mm.5g_ia6",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_5g_ia7,
         { "5G-IA7","nas_5gs.mm.5g_ia7",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_eea0,
         { "EEA0","nas_5gs.mm.eea0",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x80,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_128eea1,
         { "128-EEA1","nas_5gs.mm.128eea1",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x40,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_128eea2,
         { "128-EEA2","nas_5gs.mm.128eea2",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x20,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_eea3,
         { "128-EEA3","nas_5gs.mm.eea3",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x10,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_eea4,
         { "EEA4","nas_5gs.mm.eea4",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x08,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_eea5,
         { "EEA5","nas_5gs.mm.eea5",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_eea6,
         { "EEA6","nas_5gs.mm.eea6",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_eea7,
         { "EEA7","nas_5gs.mm.eea7",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_eia0,
         { "EIA0","nas_5gs.mm.eia0",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x80,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_128eia1,
         { "128-EIA1","nas_5gs.mm.128eia1",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x40,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_128eia2,
         { "128-EIA2","nas_5gs.mm.128eia2",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x20,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_eia3,
         { "128-EIA3","nas_5gs.mm.eia3",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x10,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_eia4,
         { "EIA4","nas_5gs.mm.eia4",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x08,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_eia5,
         { "EIA5","nas_5gs.mm.eia5",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_eia6,
         { "EIA6","nas_5gs.mm.eia6",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_eia7,
         { "EIA7","nas_5gs.mm.eia7",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_n1_mode_reg_b1,
         { "N1 mode reg","nas_5gs.mm.n1_mode_reg_b1",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_mm_n1_mod), 0x02,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_s1_mode_reg_b0,
         { "S1 mode reg","nas_5gs.mm.s1_mode_reg_b0",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_mm_s1_mod), 0x01,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_sal_al_t,
         { "Allowed type","nas_5gs.mm.sal_al_t",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_sal_al_t), 0x80,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_sal_t_li,
         { "Type of list",   "nas_5gs.mm.sal_t_li",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_mm_sal_t_li_values), 0x60,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_sal_num_e,
         { "Number of elements",   "nas_5gs.mm.sal_num_e",
             FT_UINT8, BASE_DEC, NULL, 0x1f,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_pdu_session_type,
         { "PDU session type",   "nas_5gs.sm.pdu_session_type",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_pdu_session_type_values), 0x0f,
             NULL, HFILL }
         },
         { &hf_nas_5gs_pdu_ses_sts_psi_0_b0,
         { "Spare","nas_5gs.pdu_ses_sts_psi_0_b0",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_nas_5gs_pdu_ses_sts_psi_1_b1,
         { "Spare","nas_5gs.pdu_ses_sts_psi_1_b1",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_nas_5gs_pdu_ses_sts_psi_2_b2,
         { "Spare","nas_5gs.pdu_ses_sts_psi_2_b2",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_nas_5gs_pdu_ses_sts_psi_3_b3,
         { "PSI(3)","nas_5gs.pdu_ses_sts_psi_3_b3",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_pdu_ses_sts_psi), 0x08,
             NULL, HFILL }
         },
         { &hf_nas_5gs_pdu_ses_sts_psi_4_b4,
         { "PSI(4)","nas_5gs.pdu_ses_sts_psi_4_b4",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_pdu_ses_sts_psi), 0x10,
             NULL, HFILL }
         },
         { &hf_nas_5gs_pdu_ses_sts_psi_5_b5,
         { "PSI(5)","nas_5gs.pdu_ses_sts_psi_5_b5",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_pdu_ses_sts_psi), 0x20,
             NULL, HFILL }
         },
         { &hf_nas_5gs_pdu_ses_sts_psi_6_b6,
         { "PSI(6)","nas_5gs.pdu_ses_sts_psi_6_b6",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_pdu_ses_sts_psi), 0x40,
             NULL, HFILL }
         },
         { &hf_nas_5gs_pdu_ses_sts_psi_7_b7,
         { "PSI(7)","nas_5gs.pdu_ses_sts_psi_7_b7",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_pdu_ses_sts_psi), 0x80,
             NULL, HFILL }
         },
         { &hf_nas_5gs_pdu_ses_sts_psi_8_b0,
         { "PSI(8)","nas_5gs.pdu_ses_sts_psi_8_b0",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_pdu_ses_sts_psi), 0x01,
             NULL, HFILL }
         },
         { &hf_nas_5gs_pdu_ses_sts_psi_9_b1,
         { "PSI(9)","nas_5gs.pdu_ses_sts_psi_9_b1",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_pdu_ses_sts_psi), 0x02,
             NULL, HFILL }
         },
         { &hf_nas_5gs_pdu_ses_sts_psi_10_b2,
         { "PSI(10)","nas_5gs.pdu_ses_sts_psi_10_b2",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_pdu_ses_sts_psi), 0x04,
             NULL, HFILL }
         },
         { &hf_nas_5gs_pdu_ses_sts_psi_11_b3,
         { "PSI(11)","nas_5gs.pdu_ses_sts_psi_11_b3",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_pdu_ses_sts_psi), 0x08,
             NULL, HFILL }
         },
         { &hf_nas_5gs_pdu_ses_sts_psi_12_b4,
         { "PSI(12)","nas_5gs.pdu_ses_sts_psi_12_b4",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_pdu_ses_sts_psi), 0x10,
             NULL, HFILL }
         },
         { &hf_nas_5gs_pdu_ses_sts_psi_13_b5,
         { "PSI(13)","nas_5gs.pdu_ses_sts_psi_13_b5",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_pdu_ses_sts_psi), 0x20,
             NULL, HFILL }
         },
         { &hf_nas_5gs_pdu_ses_sts_psi_14_b6,
         { "PSI(14)","nas_5gs.pdu_ses_sts_psi_14_b6",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_pdu_ses_sts_psi), 0x40,
             NULL, HFILL }
         },
         { &hf_nas_5gs_pdu_ses_sts_psi_15_b7,
         { "PSI(15)","nas_5gs.pdu_ses_sts_psi_15_b7",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_pdu_ses_sts_psi), 0x80,
             NULL, HFILL }
         },
 
         { &hf_nas_5gs_ul_data_sts_psi_0_b0,
         { "Spare","nas_5gs.ul_data_sts_psi_0_b0",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_nas_5gs_ul_data_sts_psi_1_b1,
         { "Spare","nas_5gs.ul_data_sts_psi_1_b1",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_nas_5gs_ul_data_sts_psi_2_b2,
         { "Spare","nas_5gs.ul_data_sts_psi_2_b2",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_nas_5gs_ul_data_sts_psi_3_b3,
         { "PSI(3)","nas_5gs.ul_data_sts_psi_3_b3",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_ul_data_sts_psi), 0x08,
             NULL, HFILL }
         },
         { &hf_nas_5gs_ul_data_sts_psi_4_b4,
         { "PSI(4)","nas_5gs.ul_data_sts_psi_4_b4",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_ul_data_sts_psi), 0x10,
             NULL, HFILL }
         },
         { &hf_nas_5gs_ul_data_sts_psi_5_b5,
         { "PSI(5)","nas_5gs.ul_data_sts_psi_5_b5",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_ul_data_sts_psi), 0x20,
             NULL, HFILL }
         },
         { &hf_nas_5gs_ul_data_sts_psi_6_b6,
         { "PSI(6)","nas_5gs.ul_data_sts_psi_6_b6",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_ul_data_sts_psi), 0x40,
             NULL, HFILL }
         },
         { &hf_nas_5gs_ul_data_sts_psi_7_b7,
         { "PSI(7)","nas_5gs.ul_data_sts_psi_7_b7",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_ul_data_sts_psi), 0x80,
             NULL, HFILL }
         },
         { &hf_nas_5gs_ul_data_sts_psi_8_b0,
         { "PSI(8)","nas_5gs.ul_data_sts_psi_8_b0",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_ul_data_sts_psi), 0x01,
             NULL, HFILL }
         },
         { &hf_nas_5gs_ul_data_sts_psi_9_b1,
         { "PSI(9)","nas_5gs.ul_data_sts_psi_9_b1",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_ul_data_sts_psi), 0x02,
             NULL, HFILL }
         },
         { &hf_nas_5gs_ul_data_sts_psi_10_b2,
         { "PSI(10)","nas_5gs.ul_data_sts_psi_10_b2",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_ul_data_sts_psi), 0x04,
             NULL, HFILL }
         },
         { &hf_nas_5gs_ul_data_sts_psi_11_b3,
         { "PSI(11)","nas_5gs.ul_data_sts_psi_11_b3",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_ul_data_sts_psi), 0x08,
             NULL, HFILL }
         },
         { &hf_nas_5gs_ul_data_sts_psi_12_b4,
         { "PSI(12)","nas_5gs.ul_data_sts_psi_12_b4",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_ul_data_sts_psi), 0x10,
             NULL, HFILL }
         },
         { &hf_nas_5gs_ul_data_sts_psi_13_b5,
         { "PSI(13)","nas_5gs.ul_data_sts_psi_13_b5",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_ul_data_sts_psi), 0x20,
             NULL, HFILL }
         },
         { &hf_nas_5gs_ul_data_sts_psi_14_b6,
         { "PSI(14)","nas_5gs.ul_data_sts_psi_14_b6",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_ul_data_sts_psi), 0x40,
             NULL, HFILL }
         },
         { &hf_nas_5gs_ul_data_sts_psi_15_b7,
         { "PSI(15)","nas_5gs.ul_data_sts_psi_15_b7",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_ul_data_sts_psi), 0x80,
             NULL, HFILL }
         },
 
         { &hf_nas_5gs_sm_sc_mode,
         { "SSC mode",   "nas_5gs.sm.sc_mode",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_sc_mode_values), 0x0f,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_rqos_b0,
         { "Reflective QoS(RqoS)",   "nas_5gs.sm.rqos",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_5gsm_cause,
         { "5GSM cause",   "nas_5gs.sm.5gsm_cause",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_sm_cause_vals), 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_pdu_ses_type,
         { "PDU session type",   "nas_5gs.sm.pdu_ses_type",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_sm_pdu_ses_type_vals), 0x0f,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_pdu_addr_inf_ipv4,
         { "PDU address information", "nas_5gs.sm.pdu_addr_inf_ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_pdu_addr_inf_ipv6,
         { "PDU address information", "nas_5gs.sm.pdu_addr_inf_ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_qos_rule_id,
         { "QoS rule identifier",   "nas_5gs.sm.qos_rule_id",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_length,
         { "Length",   "nas_5gs.sm.length",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_rop,
         { "Rule operation code",   "nas_5gs.sm.rop",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_rule_operation_code_values), 0xe0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_dqr,
         { "DQR",   "nas_5gs.sm.dqr",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_sm_dqr), 0x10,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_nof_pkt_filters,
         { "Number of packet filters",   "nas_5gs.sm.nof_pkt_filters",
             FT_UINT8, BASE_DEC, NULL, 0x0f,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_pkt_flt_dir,
         { "Packet filter direction",   "nas_5gs.sm.pkt_flt_dir",
             FT_UINT8, BASE_DEC, NULL, 0x30,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_pkt_flt_id,
         { "Packet filter identifier",   "nas_5gs.sm.pkt_flt_id",
             FT_UINT8, BASE_DEC, NULL, 0x0f,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_pf_len,
         { "Length",   "nas_5gs.sm.pf_len",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_pf_type,
         { "Packet filter component type",   "nas_5gs.sm.pf_type",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_sm_pf_type_values), 0x0,
             NULL, HFILL }
         },
         { &nas_5gs_sm_unit_for_session_ambr_dl,
         { "Unit for Session-AMBR for downlink",   "nas_5gs.sm.unit_for_session_ambr_dl",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_sm_unit_for_session_ambr_values), 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_session_ambr_dl,
         { "Session-AMBR for downlink",   "nas_5gs.sm.session_ambr_dl",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &nas_5gs_sm_unit_for_session_ambr_ul,
         { "Unit for Session-AMBR for uplink",   "nas_5gs.sm.unit_for_session_ambr_ul",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_sm_unit_for_session_ambr_values), 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_session_ambr_ul,
         { "Session-AMBR for uplink",   "nas_5gs.sm.session_ambr_ul",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_all_ssc_mode_b0,
         { "SSC mode 1",   "nas_5gs.sm.all_ssc_mode_b0",
             FT_BOOLEAN, 8, TFS(&tfs_allowed_not_allowed), 0x01,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_all_ssc_mode_b1,
         { "SSC mode 2",   "nas_5gs.sm.all_ssc_mode_b1",
             FT_BOOLEAN, 8, TFS(&tfs_allowed_not_allowed), 0x02,
             NULL, HFILL }
         },
         { &hf_nas_5gs_sm_all_ssc_mode_b2,
         { "SSC mode 3",   "nas_5gs.sm.all_ssc_mode_b2",
             FT_BOOLEAN, 8, TFS(&tfs_allowed_not_allowed), 0x04,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_suci,
         { "SUCI",   "nas_5gs.mm.suci",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_imei,
         { "IMEI", "nas_5gs.mm.imei",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_imeisv,
         { "IMEISV", "nas_5gs.mm.imeisv",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_reg_res_sms_allowed,
         { "SMS over NAS",   "nas_5gs.mm.reg_res.sms_all",
             FT_BOOLEAN, 8, TFS(&tfs_allowed_not_allowed), 0x08,
             NULL, HFILL }
         },
         { &hf_nas_5gs_mm_reg_res_res,
         { "5GS registration result",   "nas_5gs.mm.reg_res.res",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_mm_reg_res_values), 0x07,
             NULL, HFILL }
         },
         { &hf_nas_5gs_amf_region_id,
         { "AMF Region ID",   "nas_5gs.amf_region_id",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_amf_set_id,
         { "AMF Set ID",   "nas_5gs.amf_set_id",
             FT_UINT8, BASE_DEC, NULL, 0xf0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_amf_pointer,
         { "AMF Pointer",   "nas_5gs.amf_pointer",
             FT_UINT8, BASE_DEC, NULL, 0x0f,
             NULL, HFILL }
         },
         { &hf_nas_5gs_5g_tmsi,
         { "5G-TMSI",   "nas_5gs.5g_tmsi",
             FT_UINT32, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_nas_5gs_nw_feat_sup_ims_emf_b5b4,
         { "Emergency service fallback indicator (EMF)",   "nas_5gs.nw_feat_sup.emf",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_nw_feat_sup_emf_values), 0x18,
             NULL, HFILL }
         },
         { &hf_nas_5gs_nw_feat_sup_ims_emc_b3b2,
         { "Emergency service support indicator (EMC)",   "nas_5gs.nw_feat_sup.emc",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_nw_feat_sup_emc_values), 0x06,
             NULL, HFILL }
         },
         { &hf_nas_5gs_nw_feat_sup_ims_vops_b1b0,
         { "IMS voice over PS session indicator (IMS VoPS)",   "nas_5gs.nw_feat_sup.vops",
             FT_UINT8, BASE_DEC, VALS(nas_5gs_nw_feat_sup_ims_vops_values), 0x03,
             NULL, HFILL }
         },
         { &hf_nas_5gs_nw_feat_sup_ims_iwk_n26_b6,
         { "Interworking without N26",   "nas_5gs.nw_feat_sup.iwk_n26",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x20,
             NULL, HFILL }
         },
         { &hf_nas_5gs_nw_feat_sup_mpsi_b7,
         { "MPS indicator (MPSI)",   "nas_5gs.nw_feat_sup.mpsi",
             FT_BOOLEAN, 8, TFS(&tfs_nas_5gs_nw_feat_sup_mpsi), 0x80,
             NULL, HFILL }
         },
         { &hf_nas_5gs_tac,
         { "TAC",   "nas_5gs.tac",
             FT_UINT24, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
     };
 
     guint     i;
     guint     last_offset;
 
     /* Setup protocol subtree array */
 #define NUM_INDIVIDUAL_ELEMS    7
     gint *ett[NUM_INDIVIDUAL_ELEMS +
         NUM_NAS_5GS_COMMON_ELEM +
         NUM_NAS_5GS_MM_MSG + NUM_NAS_5GS_MM_ELEM +
         NUM_NAS_5GS_SM_MSG + NUM_NAS_5GS_SM_ELEM
     ];
 
     ett[0] = &ett_nas_5gs;
     ett[1] = &ett_nas_5gs_mm_nssai;
     ett[2] = &ett_nas_5gs_mm_pdu_ses_id;
     ett[3] = &ett_nas_5gs_sm_qos_rules;
     ett[4] = &ett_nas_5gs_plain;
     ett[5] = &ett_nas_5gs_sec;
     ett[6] = &ett_nas_5gs_mm_part_sal;
 
     last_offset = NUM_INDIVIDUAL_ELEMS;
 
     for (i = 0; i < NUM_NAS_5GS_COMMON_ELEM; i++, last_offset++)
     {
         ett_nas_5gs_common_elem[i] = -1;
         ett[last_offset] = &ett_nas_5gs_common_elem[i];
     }
 
     /* MM */
     for (i = 0; i < NUM_NAS_5GS_MM_MSG; i++, last_offset++)
     {
         ett_nas_5gs_mm_msg[i] = -1;
         ett[last_offset] = &ett_nas_5gs_mm_msg[i];
     }
 
     for (i = 0; i < NUM_NAS_5GS_MM_ELEM; i++, last_offset++)
     {
         ett_nas_5gs_mm_elem[i] = -1;
         ett[last_offset] = &ett_nas_5gs_mm_elem[i];
     }
 
     for (i = 0; i < NUM_NAS_5GS_SM_MSG; i++, last_offset++)
     {
         ett_nas_5gs_sm_msg[i] = -1;
         ett[last_offset] = &ett_nas_5gs_sm_msg[i];
     }
 
     for (i = 0; i < NUM_NAS_5GS_SM_ELEM; i++, last_offset++)
     {
         ett_nas_5gs_sm_elem[i] = -1;
         ett[last_offset] = &ett_nas_5gs_sm_elem[i];
     }
 
     static ei_register_info ei[] = {
     { &ei_nas_5gs_extraneous_data, { "nas_5gs.extraneous_data", PI_PROTOCOL, PI_NOTE, "Extraneous Data, dissector bug or later version spec(report to wireshark.org)", EXPFILL }},
     { &ei_nas_5gs_unknown_pd,{ "nas_5gs.unknown_pd", PI_PROTOCOL, PI_ERROR, "Unknown protocol discriminator", EXPFILL } },
     { &ei_nas_5gs_mm_unknown_msg_type,{ "nas_5gs.mm.unknown_msg_type", PI_PROTOCOL, PI_WARN, "Unknown Message Type", EXPFILL } },
     { &ei_nas_5gs_sm_unknown_msg_type,{ "nas_5gs.sm.unknown_msg_type", PI_PROTOCOL, PI_WARN, "Unknown Message Type", EXPFILL } },
     { &ei_nas_5gs_msg_not_dis,{ "nas_5gs.msg_not_dis", PI_PROTOCOL, PI_WARN, "MSG IEs not dissected yet", EXPFILL } },
     { &ei_nas_5gs_ie_not_dis,{ "nas_5gs.ie_not_dis", PI_PROTOCOL, PI_WARN, "IE not dissected yet", EXPFILL } },
     { &ei_nas_5gs_missing_mandatory_elemen,{ "nas_5gs.missing_mandatory_element", PI_PROTOCOL, PI_ERROR, "Missing Mandatory element, rest of dissection is suspect", EXPFILL } },
     { &ei_nas_5gs_dnn_too_long,{ "nas_5gs.dnn_to_long", PI_PROTOCOL, PI_ERROR, "DNN encoding has more than 100 octets", EXPFILL } },
     { &ei_nas_5gs_unknown_value,{ "nas_5gs.unknown_value", PI_PROTOCOL, PI_ERROR, "Value not according to (decoded)specification", EXPFILL } },
     { &ei_nas_5gs_num_pkt_flt,{ "nas_5gs.num_pkt_flt", PI_PROTOCOL, PI_ERROR, "num_pkt_flt != 0", EXPFILL } },
     { &ei_nas_5gs_not_diss,{ "nas_5gs.not_diss", PI_PROTOCOL, PI_NOTE, "Not dissected yet", EXPFILL } },
     };
 
     expert_module_t* expert_nas_5gs;
 
     /* Register protocol */
     proto_nas_5gs = proto_register_protocol(PNAME, PSNAME, PFNAME);
     /* Register fields and subtrees */
     proto_register_field_array(proto_nas_5gs, hf, array_length(hf));
     proto_register_subtree_array(ett, array_length(ett));
     expert_nas_5gs = expert_register_protocol(proto_nas_5gs);
     expert_register_field_array(expert_nas_5gs, ei, array_length(ei));
 
     /* Register dissector */
     register_dissector(PFNAME, dissect_nas_5gs, proto_nas_5gs);
 
 }
