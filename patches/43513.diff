commit 7f4574f51ad7db56fc13de89e13e7893b1a82189
Author: Marta Iborra <martaiborra24@gmail.com>
Date:   Mon Jun 13 11:55:06 2022 +0200

    Fix warnings II

diff --git a/blosc/blosc2.c b/blosc/blosc2.c
index 07555fc3..52064ae3 100644
--- a/blosc/blosc2.c
+++ b/blosc/blosc2.c
@@ -3975,28 +3975,30 @@ int blosc2_chunk_repeatval(blosc2_cparams cparams, const int32_t nbytes,
 int register_filter_private(blosc2_filter *filter) {
     BLOSC_ERROR_NULL(filter, BLOSC2_ERROR_INVALID_PARAM);
     if (g_nfilters == UINT8_MAX) {
         BLOSC_TRACE_ERROR("Can not register more filters");
         return BLOSC2_ERROR_CODEC_SUPPORT;
     }
     if (filter->id < BLOSC2_GLOBAL_REGISTERED_FILTERS_START) {
         BLOSC_TRACE_ERROR("The id must be greater or equal than %d", BLOSC2_GLOBAL_REGISTERED_FILTERS_START);
         return BLOSC2_ERROR_FAILURE;
     }
+    /* This condition can never be fulfilled
     if (filter->id > BLOSC2_USER_REGISTERED_FILTERS_STOP) {
         BLOSC_TRACE_ERROR("The id must be lower or equal than %d", BLOSC2_USER_REGISTERED_FILTERS_STOP);
         return BLOSC2_ERROR_FAILURE;
     }
+    */
 
     // Check if the filter is already registered
     for (uint64_t i = 0; i < g_nfilters; ++i) {
         if (g_filters[i].id == filter->id) {
             BLOSC_TRACE_ERROR("The filter is already registered!");
             return BLOSC2_ERROR_FAILURE;
         }
     }
 
     blosc2_filter *filter_new = &g_filters[g_nfilters++];
     memcpy(filter_new, filter, sizeof(blosc2_filter));
 
     return BLOSC2_ERROR_SUCCESS;
 }
@@ -4017,28 +4019,30 @@ int blosc2_register_filter(blosc2_filter *filter) {
 int register_codec_private(blosc2_codec *codec) {
     BLOSC_ERROR_NULL(codec, BLOSC2_ERROR_INVALID_PARAM);
     if (g_ncodecs == UINT8_MAX) {
         BLOSC_TRACE_ERROR("Can not register more codecs");
         return BLOSC2_ERROR_CODEC_SUPPORT;
     }
     if (codec->compcode < BLOSC2_GLOBAL_REGISTERED_CODECS_START) {
         BLOSC_TRACE_ERROR("The id must be greater or equal than %d", BLOSC2_GLOBAL_REGISTERED_CODECS_START);
         return BLOSC2_ERROR_FAILURE;
     }
+    /* This condition can never be fulfilled
     if (codec->compcode > BLOSC2_USER_REGISTERED_CODECS_STOP) {
         BLOSC_TRACE_ERROR("The id must be lower or equal to %d", BLOSC2_USER_REGISTERED_CODECS_STOP);
         return BLOSC2_ERROR_FAILURE;
     }
+     */
 
     // Check if the code is already registered
     for (int i = 0; i < g_ncodecs; ++i) {
         if (g_codecs[i].compcode == codec->compcode) {
             BLOSC_TRACE_ERROR("The codec is already registered!");
             return BLOSC2_ERROR_CODEC_PARAM;
         }
     }
 
     blosc2_codec *codec_new = &g_codecs[g_ncodecs++];
     memcpy(codec_new, codec, sizeof(blosc2_codec));
 
     return BLOSC2_ERROR_SUCCESS;
 }
diff --git a/blosc/schunk.c b/blosc/schunk.c
index 24bd9a4e..4abc2c43 100644
--- a/blosc/schunk.c
+++ b/blosc/schunk.c
@@ -471,15 +471,21 @@ int blosc2_schunk_free(blosc2_schunk *schunk) {
 /* Create a super-chunk out of a contiguous frame buffer */
 blosc2_schunk* blosc2_schunk_from_buffer(uint8_t *cframe, int64_t len, bool copy) {
   blosc2_frame_s* frame = frame_from_cframe(cframe, len, false);
   if (frame == NULL) {
     return NULL;
   }
+  // Check that the buffer actually comes from a cframe
+  char *magic_number = (char *)cframe;
+  magic_number += FRAME_HEADER_MAGIC;
+  if (strcmp(magic_number, "b2frame\0") != 0) {
+    return NULL;
+  }
   blosc2_schunk* schunk = frame_to_schunk(frame, copy, &BLOSC2_IO_DEFAULTS);
   if (schunk && copy) {
     // Super-chunk has its own copy of frame
     frame_free(frame);
   }
   return schunk;
 }
 
 /* Fill an empty frame with special values (fast path). */
diff --git a/examples/multithread.c b/examples/multithread.c
index bf3ff4d1..4ecc155a 100644
--- a/examples/multithread.c
+++ b/examples/multithread.c
@@ -50,58 +50,58 @@
 int main(void) {
   static float data[SIZE];
   static float data_out[SIZE];
   static float data_dest[SIZE];
   size_t isize = SIZE * sizeof(float), osize = SIZE * sizeof(float);
   int dsize, csize;
   int16_t nthreads, pnthreads;
   int i;
 
   for (i = 0; i < SIZE; i++) {
     data[i] = (float)i;
   }
 
   /* Register the filter with the library */
   printf("Blosc version info: %s (%s)\n",
          BLOSC_VERSION_STRING, BLOSC_VERSION_DATE);
 
   /* Initialize the Blosc compressor */
   blosc_init();
 
   /* Tell Blosc to use some number of threads */
   for (nthreads = 1; nthreads <= 4; nthreads++) {
 
     pnthreads = blosc_set_nthreads(nthreads);
     printf("Using %d threads (previously using %d)\n", nthreads, pnthreads);
 
     /* Compress with clevel=5 and shuffle active  */
     csize = blosc_compress(5, 1, sizeof(float), isize, data, data_out, osize);
     if (csize < 0) {
       printf("Compression error.  Error code: %d\n", csize);
       return csize;
     }
 
-    printf("Compression: %zu -> %d (%.1fx)\n", isize, csize, (1. * (double)isize) /
+    printf("Compression: %lld -> %d (%.1fx)\n", (int64_t)isize, csize, (1. * (double)isize) /
             csize);
 
     /* Decompress  */
     dsize = blosc_decompress(data_out, data_dest, isize);
     if (dsize < 0) {
       printf("Decompression error.  Error code: %d\n", dsize);
       return dsize;
     }
 
     for (i = 0; i < SIZE; i++) {
       if (data[i] != data_dest[i]) {
         printf("Decompressed data differs from original!\n");
         return -1;
       }
     }
 
     printf("Successful roundtrip!\n");
   }
 
   /* After using it, destroy the Blosc environment */
   blosc_destroy();
 
   return 0;
 }
diff --git a/examples/simple.c b/examples/simple.c
index ac264db3..d2d93f05 100644
--- a/examples/simple.c
+++ b/examples/simple.c
@@ -30,72 +30,72 @@
 int main(void) {
   static float data[SIZE];
   static float data_out[SIZE];
   static float data_dest[SIZE];
   float data_subset[5];
   float data_subset_ref[5] = {5, 6, 7, 8, 9};
   size_t isize = SIZE * sizeof(float), osize = SIZE * sizeof(float);
   int dsize = SIZE * sizeof(float), csize;
   int i, ret;
 
   for (i = 0; i < SIZE; i++) {
     data[i] = (float)i;
   }
 
   printf("Blosc version info: %s (%s)\n",
          BLOSC_VERSION_STRING, BLOSC_VERSION_DATE);
 
   /* Initialize the Blosc compressor */
   blosc_init();
   blosc_set_nthreads(NTHREADS);
 
   /* Compress with clevel=5 and shuffle active  */
   csize = blosc_compress(5, BLOSC_BITSHUFFLE, sizeof(float), isize, data,
                          data_out, osize);
   if (csize == 0) {
     printf("Buffer is uncompressible.  Giving up.\n");
     return 1;
   }
   else if (csize < 0) {
     printf("Compression error.  Error code: %d\n", csize);
     return csize;
   }
 
-  printf("Compression: %zu -> %d (%.1fx)\n",
-         isize, csize, (1. * (double)isize) / csize);
+  printf("Compression: %lld -> %d (%.1fx)\n",
+         (int64_t)isize, csize, (1. * (double)isize) / csize);
 
   ret = blosc_getitem(data_out, 5, 5, data_subset);
   if (ret < 0) {
     printf("Error in blosc_getitem().  Giving up.\n");
     return 1;
   }
 
   for (i = 0; i < 5; i++) {
     if (data_subset[i] != data_subset_ref[i]) {
       printf("blosc_getitem() fetched data differs from original!\n");
       return -1;
     }
   }
   printf("Correctly extracted 5 elements from compressed chunk!\n");
 
   /* Decompress  */
   dsize = blosc_decompress(data_out, data_dest, (size_t)dsize);
   if (dsize < 0) {
     printf("Decompression error.  Error code: %d\n", dsize);
     return dsize;
   }
 
   printf("Decompression successful!\n");
 
   /* After using it, destroy the Blosc environment */
   blosc_destroy();
 
   for (i = 0; i < SIZE; i++) {
     if (data[i] != data_dest[i]) {
       printf("Decompressed data differs from original!\n");
       return -1;
     }
   }
 
   printf("Successful roundtrip!\n");
   return 0;
 }
diff --git a/plugins/codecs/ndlz/ndlz4x4.c b/plugins/codecs/ndlz/ndlz4x4.c
index bde85796..e75c61d4 100644
--- a/plugins/codecs/ndlz/ndlz4x4.c
+++ b/plugins/codecs/ndlz/ndlz4x4.c
@@ -512,190 +512,190 @@ static unsigned char* copy_match_16(unsigned char *op, const unsigned char *matc
 int ndlz4_decompress(const uint8_t *input, int32_t input_len, uint8_t *output, int32_t output_len,
                     uint8_t meta, blosc2_dparams *dparams) {
   BLOSC_UNUSED_PARAM(meta);
   BLOSC_UNUSED_PARAM(dparams);
 
   uint8_t* ip = (uint8_t*)input;
   uint8_t* ip_limit = ip + input_len;
   uint8_t* op = (uint8_t*)output;
   uint8_t ndim;
   uint32_t blockshape[2];
   uint32_t eshape[2];
   uint8_t* buffercpy;
   uint8_t local_buffer[16];
   uint8_t token;
   if (NDLZ_UNEXPECT_CONDITIONAL(input_len < 8)) {
     return 0;
   }
 
   /* we start with literal copy */
   ndim = *ip;
   ip ++;
   if (ndim != 2) {
     fprintf(stderr, "This codec only works for ndim = 2");
     return -1;
   }
   memcpy(&blockshape[0], ip, 4);
   ip += 4;
   memcpy(&blockshape[1], ip, 4);
   ip += 4;
   eshape[0] = ((blockshape[0] + 3) / 4) * 4;
   eshape[1] = ((blockshape[1] + 3) / 4) * 4;
 
   if (NDLZ_UNEXPECT_CONDITIONAL(output_len < (int32_t)(blockshape[0] * blockshape[1]))) {
     return 0;
   }
   memset(op, 0, blockshape[0] * blockshape[1]);
 
   uint32_t i_stop[2];
   for (int i = 0; i < 2; ++i) {
     i_stop[i] = eshape[i] / 4;
   }
 
 
   /* main loop */
   uint32_t ii[2];
-  uint32_t padding[2];
-  uint32_t ind;
+  uint32_t padding[2] = {0};
+  uint32_t ind = 0;
   uint8_t cell_aux[16];
   for (ii[0] = 0; ii[0] < i_stop[0]; ++ii[0]) {
     for (ii[1] = 0; ii[1] < i_stop[1]; ++ii[1]) {      // for each cell
       if (NDLZ_UNEXPECT_CONDITIONAL(ip > ip_limit)) {
         printf("Literal copy \n");
         return 0;
       }
       if (ii[0] == i_stop[0] - 1) {
         padding[0] = (blockshape[0] % 4 == 0) ? 4 : blockshape[0] % 4;
       } else {
         padding[0] = 4;
       }
       if (ii[1] == i_stop[1] - 1) {
         padding[1] = (blockshape[1] % 4 == 0) ? 4 : blockshape[1] % 4;
       } else {
         padding[1] = 4;
       }
       token = *ip++;
       if (token == 0){    // no match
         buffercpy = ip;
         ip += padding[0] * padding[1];
       } else if (token == (uint8_t)((1U << 7U) | (1U << 6U))) {  // cell match
         uint16_t offset = *((uint16_t*) ip);
         buffercpy = ip - offset - 1;
         ip += 2;
       } else if (token == (uint8_t)(1U << 6U)) { // whole cell of same element
         buffercpy = cell_aux;
         memset(buffercpy, *ip, 16);
         ip++;
       } else if (token >= 224) { // three rows match
         buffercpy = local_buffer;
         uint16_t offset = *((uint16_t*) ip);
         offset += 3;
         ip += 2;
         int i, j, k;
         if ((token >> 3U) == 28) {
           i = 1;
           j = 2;
           k = 3;
         } else {
           i = 0;
           if ((token >> 3U) < 30) {
             j = 1;
             k = 2;
           } else {
             k = 3;
             if ((token >> 3U) == 30) {
               j = 1;
             } else {
               j = 2;
             }
           }
         }
         memcpy(&buffercpy[i * 4], ip - offset, 4);
         memcpy(&buffercpy[j * 4], ip - offset + 4, 4);
         memcpy(&buffercpy[k * 4], ip - offset + 8, 4);
         for (int l = 0; l < 4; l++) {
           if ((l != i) && (l != j) && (l != k)) {
             memcpy(&buffercpy[l * 4], ip, 4);
             ip += 4;
             break;
           }
         }
 
       } else if ((token >= 128) && (token <= 191)){ // rows pair match
         buffercpy = local_buffer;
         uint16_t offset = *((uint16_t*) ip);
         offset += 3;
         ip += 2;
         int i, j;
         if (token == 128) {
           i = 2;
           j = 3;
         } else {
           i = (token - 128) >> 5U;
           j = ((token - 128) >> 3U) - (i << 2U);
         }
         memcpy(&buffercpy[i * 4], ip - offset, 4);
         memcpy(&buffercpy[j * 4], ip - offset + 4, 4);
         for (int k = 0; k < 4; k++) {
           if ((k != i) && (k != j)) {
             memcpy(&buffercpy[k * 4], ip, 4);
             ip += 4;
           }
         }
       } else if ((token >= 40) && (token <= 63)) {  // 2 rows pair matches
         buffercpy = local_buffer;
         uint16_t offset_1 = *((uint16_t*) ip);
         offset_1 += 5;
         ip += 2;
         uint16_t offset_2 = *((uint16_t*) ip);
         offset_2 += 5;
         ip += 2;
         int i, j, k, l, m;
         i = 0;
         j = ((token - 32) >> 3U);
         l = -1;
         for (k = 1; k < 4; k++) {
           if ((k != i) && (k != j)) {
             if (l == -1) {
               l = k;
             } else {
               m = k;
             }
           }
         }
         memcpy(&buffercpy[i * 4], ip - offset_1, 4);
         memcpy(&buffercpy[j * 4], ip - offset_1 + 4, 4);
         memcpy(&buffercpy[l * 4], ip - offset_2, 4);
         memcpy(&buffercpy[m * 4], ip - offset_2 + 4, 4);
 
       } else {
         printf("Invalid token: %u at cell [%d, %d]\n", token, ii[0], ii[1]);
         return 0;
       }
       // fill op with buffercpy
       uint32_t orig = ii[0] * 4 * blockshape[1] + ii[1] * 4;
       for (uint32_t i = 0; i < 4; i++) {
         if (i < padding[0]) {
           ind = orig + i * blockshape[1];
           memcpy(&op[ind], buffercpy, padding[1]);
         }
         buffercpy += padding[1];
       }
       if (ind > (uint32_t) output_len) {
         printf("Output size is bigger than max \n");
         return 0;
       }
     }
   }
   ind += padding[1];
 
   if (ind != (blockshape[0] * blockshape[1])) {
     printf("Output size is not compatible with embedded blockshape \n");
     return 0;
   }
   if (ind > (uint32_t) output_len) {
     printf("Output size is bigger than max \n");
     return 0;
   }
 
   return (int)ind;
 }
diff --git a/plugins/codecs/ndlz/ndlz8x8.c b/plugins/codecs/ndlz/ndlz8x8.c
index 8714fc56..06d0e864 100644
--- a/plugins/codecs/ndlz/ndlz8x8.c
+++ b/plugins/codecs/ndlz/ndlz8x8.c
@@ -429,150 +429,150 @@ static unsigned char* copy_match_16(unsigned char *op, const unsigned char *matc
 int ndlz8_decompress(const uint8_t *input, int32_t input_len, uint8_t *output, int32_t output_len,
                      uint8_t meta, blosc2_dparams *dparams) {
   BLOSC_UNUSED_PARAM(meta);
   BLOSC_UNUSED_PARAM(dparams);
 
   const int cell_shape = 8;
   const int cell_size = 64;
   uint8_t* ip = (uint8_t*)input;
   uint8_t* ip_limit = ip + input_len;
   uint8_t* op = (uint8_t*)output;
   uint8_t ndim;
   int32_t blockshape[2];
   int32_t eshape[2];
   uint8_t* buffercpy;
   uint8_t token;
   if (NDLZ_UNEXPECT_CONDITIONAL(input_len < 8)) {
     return 0;
   }
 
   /* we start with literal copy */
   ndim = *ip;
   ip ++;
   if (ndim != 2) {
     fprintf(stderr, "This codec only works for ndim = 2");
     return -1;
   }
   memcpy(&blockshape[0], ip, 4);
   ip += 4;
   memcpy(&blockshape[1], ip, 4);
   ip += 4;
   eshape[0] = ((blockshape[0] + 7) / cell_shape) * cell_shape;
   eshape[1] = ((blockshape[1] + 7) / cell_shape) * cell_shape;
 
   if (NDLZ_UNEXPECT_CONDITIONAL(output_len < blockshape[0] * blockshape[1])) {
     return 0;
   }
   memset(op, 0, blockshape[0] * blockshape[1]);
 
   int32_t i_stop[2];
   for (int i = 0; i < 2; ++i) {
     i_stop[i] = eshape[i] / cell_shape;
   }
 
 
   /* main loop */
   int32_t ii[2];
-  int32_t padding[2];
+  int32_t padding[2] = {0};
   int32_t ind = 0;
   uint8_t* local_buffer = malloc(cell_size);
   uint8_t* cell_aux = malloc(cell_size);
   for (ii[0] = 0; ii[0] < i_stop[0]; ++ii[0]) {
     for (ii[1] = 0; ii[1] < i_stop[1]; ++ii[1]) {      // for each cell
       if (NDLZ_UNEXPECT_CONDITIONAL(ip > ip_limit)) {
         printf("Literal copy \n");
         free(local_buffer);
         free(cell_aux);
         return 0;
       }
       if (ii[0] == i_stop[0] - 1) {
         padding[0] = (blockshape[0] % cell_shape == 0) ? cell_shape : blockshape[0] % cell_shape;
       } else {
         padding[0] = cell_shape;
       }
       if (ii[1] == i_stop[1] - 1) {
         padding[1] = (blockshape[1] % cell_shape == 0) ? cell_shape : blockshape[1] % cell_shape;
       } else {
         padding[1] = cell_shape;
       }
       token = *ip++;
       uint8_t match_type = (token >> 3U);
       if (token == 0){    // no match
         buffercpy = ip;
         ip += padding[0] * padding[1];
       } else if (token == (uint8_t)((1U << 7U) | (1U << 6U))) {  // cell match
         uint16_t offset = *((uint16_t*) ip);
         buffercpy = ip - offset - 1;
         ip += 2;
       } else if (token == (uint8_t)(1U << 6U)) { // whole cell of same element
         buffercpy = cell_aux;
         memset(buffercpy, *ip, cell_size);
         ip++;
       } else if (match_type == 21) {    // triple match
         buffercpy = local_buffer;
         int row = (int) (token & 7);
         uint16_t offset = *((uint16_t*) ip);
         ip += 2;
         for (int l = 0; l < 3; l++) {
           memcpy(&buffercpy[(row + l) * cell_shape],
                  ip - sizeof(token) - sizeof(offset) - offset + l * cell_shape, cell_shape);
         }
         for (int l = 0; l < cell_shape; l++) {
           if ((l < row) || (l > row + 2)) {
             memcpy(&buffercpy[l * cell_shape], ip, cell_shape);
             ip += cell_shape;
           }
         }
       } else if (match_type == 17) {    // pair match
         buffercpy = local_buffer;
         int row = (int) (token & 7);
         uint16_t offset = *((uint16_t*) ip);
         ip += 2;
         for (int l = 0; l < 2; l++) {
           memcpy(&buffercpy[(row + l) * cell_shape],
                  ip - sizeof(token) - sizeof(offset) - offset + l * cell_shape, cell_shape);
         }
         for (int l = 0; l < cell_shape; l++) {
           if ((l < row) || (l > row + 1)) {
             memcpy(&buffercpy[l * cell_shape], ip, cell_shape);
             ip += cell_shape;
           }
         }
       } else {
         printf("Invalid token: %u at cell [%d, %d]\n", token, ii[0], ii[1]);
         free(local_buffer);
         free(cell_aux);
         return 0;
       }
 
       uint32_t orig = ii[0] * cell_shape * blockshape[1] + ii[1] * cell_shape;
       for (int32_t i = 0; i < (int32_t) cell_shape; i++) {
         if (i < padding[0]) {
           ind = orig + i * blockshape[1];
           memcpy(&op[ind], buffercpy, padding[1]);
         }
         buffercpy += padding[1];
       }
       if (ind > output_len) {
         printf("Output size is bigger than max \n");
         free(local_buffer);
         free(cell_aux);
         return 0;
       }
     }
   }
   ind += padding[1];
 
   free(cell_aux);
   free(local_buffer);
 
   if (ind != (blockshape[0] * blockshape[1])) {
     printf("Output size is not compatible with embedded blockshape \n");
     return 0;
   }
   if (ind > output_len) {
     printf("Output size is bigger than max \n");
     return 0;
   }
 
   return (int)ind;
 }
diff --git a/plugins/filters/ndcell/ndcell.c b/plugins/filters/ndcell/ndcell.c
index c378ac99..8178a5a7 100644
--- a/plugins/filters/ndcell/ndcell.c
+++ b/plugins/filters/ndcell/ndcell.c
@@ -136,120 +136,120 @@ int ndcell_encoder(const uint8_t* input, uint8_t* output, int32_t length, uint8_
 int ndcell_decoder(const uint8_t* input, uint8_t* output, int32_t length, uint8_t meta, blosc2_dparams* dparams) {
 
     blosc2_schunk *schunk = dparams->schunk;
     int8_t ndim;
     int64_t* shape = malloc(8 * sizeof(int64_t));
     int32_t* chunkshape = malloc(8 * sizeof(int32_t));
     int32_t* blockshape = malloc(8 * sizeof(int32_t));
     uint8_t* smeta;
     int32_t smeta_len;
     if (blosc2_meta_get(schunk, "caterva", &smeta, &smeta_len) < 0) {
         free(shape);
         free(chunkshape);
         free(blockshape);
         printf("Blosc error");
         return 0;
     }
     deserialize_meta(smeta, smeta_len, &ndim, shape, chunkshape, blockshape);
     free(smeta);
 
     int8_t cell_shape = (int8_t)meta;
     int cell_size = (int) pow(cell_shape, ndim);
     int32_t typesize = schunk->typesize;
     uint8_t* ip = (uint8_t*)input;
     uint8_t* ip_limit = ip + length;
     uint8_t* op = (uint8_t*)output;
     int32_t blocksize = (int32_t) typesize;
     for (int i = 0; i < ndim; i++){
         blocksize *= blockshape[i];
     }
 
     if (length != blocksize) {
         free(shape);
         free(chunkshape);
         free(blockshape);
         printf("Length not equal to blocksize \n");
         return -1;
     }
 
     /* input and output buffer cannot be less than cell size */
     if (length < cell_size * typesize) {
         free(shape);
         free(chunkshape);
         free(blockshape);
         printf("Incorrect length");
         return 0;
     }
 
     int64_t i_shape[NDCELL_MAX_DIM];
     for (int i = 0; i < ndim; ++i) {
         i_shape[i] = (blockshape[i] + cell_shape - 1) / cell_shape;
     }
 
     int64_t ncells = 1;
     for (int i = 0; i < ndim; ++i) {
         ncells *= i_shape[i];
     }
 
     /* main loop */
-    int64_t pad_shape[NDCELL_MAX_DIM];
+    int64_t pad_shape[NDCELL_MAX_DIM] = {0};
     int64_t ii[NDCELL_MAX_DIM];
-    int32_t ind;
+    int32_t ind = 0;
     for (int cell_ind = 0; cell_ind < ncells; cell_ind++) {      // for each cell
 
         if (ip > ip_limit) {
             free(shape);
             free(chunkshape);
             free(blockshape);
             printf("Literal copy \n");
             return 0;
         }
         blosc2_unidim_to_multidim(ndim, i_shape, cell_ind, ii);
         uint32_t orig = 0;
         int64_t nd_aux = (int64_t) cell_shape;
         for (int i = ndim - 1; i >= 0; i--) {
             orig += ii[i] * nd_aux;
             nd_aux *= blockshape[i];
         }
 
         for (int dim_ind = 0; dim_ind < ndim; dim_ind++) {
             if ((blockshape[dim_ind] % cell_shape != 0) && (ii[dim_ind] == i_shape[dim_ind] - 1)) {
                 pad_shape[dim_ind] = blockshape[dim_ind] % cell_shape;
             } else {
                 pad_shape[dim_ind] = (int64_t) cell_shape;
             }
         }
 
         int64_t ncopies = 1;
         for (int i = 0; i < ndim - 1; ++i) {
             ncopies *= pad_shape[i];
         }
         int64_t kk[NDCELL_MAX_DIM];
         for (int copy_ind = 0; copy_ind < ncopies; ++copy_ind) {
             blosc2_unidim_to_multidim(ndim - 1, pad_shape, copy_ind, kk);
             nd_aux = blockshape[ndim - 1];
             ind = (int32_t) orig;
             for (int i = ndim - 2; i >= 0; i--) {
                 ind += (int32_t) (kk[i] * nd_aux);
                 nd_aux *= blockshape[i];
             }
             memcpy(&op[ind * typesize], ip, pad_shape[ndim - 1] * typesize);
             ip += pad_shape[ndim - 1] * typesize;
         }
     }
     ind += (int32_t) pad_shape[ndim - 1];
 
 
     if (ind != (int32_t) (blocksize / typesize)) {
         free(shape);
         free(chunkshape);
         free(blockshape);
         printf("Output size is not compatible with embedded blockshape ind %d %d \n", ind, (blocksize / typesize));
         return 0;
     }
 
     free(shape);
     free(chunkshape);
     free(blockshape);
 
     return BLOSC2_ERROR_SUCCESS;
 }
diff --git a/plugins/filters/ndmean/ndmean.c b/plugins/filters/ndmean/ndmean.c
index 2ecf7213..a481e62b 100644
--- a/plugins/filters/ndmean/ndmean.c
+++ b/plugins/filters/ndmean/ndmean.c
@@ -190,127 +190,127 @@ int ndmean_encoder(const uint8_t* input, uint8_t* output, int32_t length, uint8_
 int ndmean_decoder(const uint8_t* input, uint8_t* output, int32_t length, uint8_t meta, blosc2_dparams* dparams) {
 
     blosc2_schunk *schunk = dparams->schunk;
     int8_t ndim;
     int64_t* shape = malloc(8 * sizeof(int64_t));
     int32_t* chunkshape = malloc(8 * sizeof(int32_t));
     int32_t* blockshape = malloc(8 * sizeof(int32_t));
     uint8_t* smeta;
     int32_t smeta_len;
     if (blosc2_meta_get(schunk, "caterva", &smeta, &smeta_len) < 0) {
         free(shape);
         free(chunkshape);
         free(blockshape);
         printf("Blosc error");
         return 0;
     }
     deserialize_meta(smeta, smeta_len, &ndim, shape, chunkshape, blockshape);
     free(smeta);
 
     int8_t cellshape[8];
     int cell_size = 1;
     for (int i = 0; i < 8; ++i) {
         if (i < ndim) {
             cellshape[i] = (int8_t)meta;
             if (cellshape[i] > blockshape[i]) {
                 cellshape[i] = (int8_t) blockshape[i];
             }
             cell_size *= cellshape[i];
         } else {
             cellshape[i] = 1;
         }
     }
 
     int8_t typesize = (int8_t) schunk->typesize;
     uint8_t* ip = (uint8_t*)input;
     uint8_t* ip_limit = ip + length;
     uint8_t* op = (uint8_t*)output;
     int32_t blocksize = (int32_t) typesize;
     for (int i = 0; i < ndim; i++){
         blocksize *= blockshape[i];
     }
 
     if (length != blocksize) {
         free(shape);
         free(chunkshape);
         free(blockshape);
         printf("Length not equal to blocksize \n");
         return -1;
     }
     /* input and output buffer cannot be less than cell size */
     if (length < cell_size * typesize) {
         free(shape);
         free(chunkshape);
         free(blockshape);
         printf("Incorrect length");
         return 0;
     }
 
     int64_t i_shape[NDMEAN_MAX_DIM];
     for (int i = 0; i < ndim; ++i) {
         i_shape[i] = (blockshape[i] + cellshape[i] - 1) / cellshape[i];
     }
 
     int64_t ncells = 1;
     for (int i = 0; i < ndim; ++i) {
         ncells *= i_shape[i];
     }
 
     /* main loop */
-    int64_t pad_shape[NDMEAN_MAX_DIM];
+    int64_t pad_shape[NDMEAN_MAX_DIM] = {0};
     int64_t ii[NDMEAN_MAX_DIM];
-    int32_t ind;
+    int32_t ind = 0;
     for (int cell_ind = 0; cell_ind < ncells; cell_ind++) {      // for each cell
 
         if (ip > ip_limit) {
             free(shape);
             free(chunkshape);
             free(blockshape);
             printf("Literal copy \n");
             return 0;
         }
         blosc2_unidim_to_multidim(ndim, i_shape, cell_ind, ii);
         uint32_t orig = 0;
         int64_t nd_aux = (int64_t) (cellshape[0]);
         for (int i = ndim - 1; i >= 0; i--) {
             orig += ii[i] * nd_aux;
             nd_aux *= blockshape[i];
         }
 
         for (int dim_ind = 0; dim_ind < ndim; dim_ind++) {
             if ((blockshape[dim_ind] % cellshape[dim_ind] != 0) && (ii[dim_ind] == i_shape[dim_ind] - 1)) {
                 pad_shape[dim_ind] = blockshape[dim_ind] % cellshape[dim_ind];
             } else {
                 pad_shape[dim_ind] = (int64_t) cellshape[dim_ind];
             }
         }
 
         int64_t ncopies = 1;
         for (int i = 0; i < ndim - 1; ++i) {
             ncopies *= pad_shape[i];
         }
         int64_t kk[NDMEAN_MAX_DIM];
         for (int copy_ind = 0; copy_ind < ncopies; ++copy_ind) {
             blosc2_unidim_to_multidim((int8_t) (ndim - 1), pad_shape, copy_ind, kk);
             nd_aux = blockshape[ndim - 1];
             ind = (int32_t) orig;
             for (int i = ndim - 2; i >= 0; i--) {
                 ind += (int32_t) (kk[i] * nd_aux);
                 nd_aux *= blockshape[i];
             }
             memcpy(&op[ind * typesize], ip, pad_shape[ndim - 1] * typesize);
             ip += pad_shape[ndim - 1] * typesize;
         }
     }
     ind += (int32_t) pad_shape[ndim - 1];
 
     free(shape);
     free(chunkshape);
     free(blockshape);
 
     if (ind != (int32_t) (blocksize / typesize)) {
         printf("Output size is not compatible with embedded blockshape ind %d %d \n", ind, (blocksize / typesize));
         return 0;
     }
 
     return BLOSC2_ERROR_SUCCESS;
 }
diff --git a/tests/cutest.h b/tests/cutest.h
index 54b5fb96..e92f2af5 100644
--- a/tests/cutest.h
+++ b/tests/cutest.h
@@ -142,63 +142,65 @@ char _cutest_error_msg[1024];
 int _cutest_run(int (*test)(void *), void *test_data, char *name) {
   int cutest_ok = 0;
   int cutest_failed = 0;
   int cutest_total = 0;
 
   int nparams = 0;
   while(cutest_params[nparams].name != NULL) {
     nparams++;
   }
 
   int niters = 1;
   for (int i = 0; i < nparams; ++i) {
     niters *= cutest_params[i].params_len;
   }
 
   int32_t params_strides[CUTEST_PARAMS_MAX] = {0};
   params_strides[0] = 1;
   for (int i = 1; i < nparams; ++i) {
     params_strides[i] = params_strides[i - 1] * cutest_params[i - 1].params_len;
   }
 
   char test_name[MAXLEN_TESTNAME];
   uint8_t count = 0;
   int num = niters;
   do { count++; num /= 10;} while(num != 0);
+  char aux[MAXLEN_TESTNAME];
   for (int niter = 0; niter < niters; ++niter) {
     sprintf(test_name, "[%0*d/%d] %s(", count, niter + 1, niters, name);
     for (int i = 0; i < nparams; ++i) {
       cutest_params_ind[i] = (int8_t) (niter / params_strides[i] % cutest_params[i].params_len);
-      snprintf(test_name, MAXLEN_TESTNAME, "%s%s[%d], ", test_name, cutest_params[i].name,
+      strcpy(aux, test_name);
+      snprintf(test_name, MAXLEN_TESTNAME, "%s%s[%d], ", aux, cutest_params[i].name,
                cutest_params_ind[i]);
     }
     test_name[strlen(test_name) - 1] = 0;
     strncpy(&test_name[strlen(test_name) - 1], ")", 1);
     if (nparams == 0) {
       test_name[strlen(test_name) - 1] = 0;
     }
     printf("%s ", test_name);
 
     cutest_total++;
 
     int rc = test(test_data);
     if (rc == CUNIT_OK) {
       cutest_ok++;
       fprintf(stdout, GREEN "[  OK  ]\n" RESET);
     } else {
       cutest_failed++;
       fprintf(stdout, RED   "[FAILED]\n" RESET);
     }
     if (_cutest_error_msg[0] != 0) {
       fprintf(stdout, RED "    %s\n" RESET, _cutest_error_msg);
       _cutest_error_msg[0] = 0;
     }
   }
 
   printf("\nTEST RESULTS: %d tests (%d ok, %d failed)\n",
          cutest_total, cutest_ok, cutest_failed);
 
   return cutest_failed;
 }
 
 
 #endif //CUTEST_CUTEST_H
