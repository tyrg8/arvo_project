commit 9351a156de724edb69ba6e1f05884fe806a13a21
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Sat May 13 19:28:01 2017 +0200

    avcodec/ac3dec: Keep track of band structure
    
    It is needed in some corner cases that seem not to be forbidden
    Fixes: out of array index
    Fixes: 1538/clusterfuzz-testcase-minimized-4696904925446144
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/targets/ffmpeg
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavcodec/ac3dec.c b/libavcodec/ac3dec.c
index 7e2cbce90b..ffea9d335c 100644
--- a/libavcodec/ac3dec.c
+++ b/libavcodec/ac3dec.c
@@ -721,92 +721,93 @@ static inline void do_imdct(AC3DecodeContext *s, int channels)
 /**
  * Upmix delay samples from stereo to original channel layout.
  */
 static void ac3_upmix_delay(AC3DecodeContext *s)
 {
     int channel_data_size = sizeof(s->delay[0]);
     switch (s->channel_mode) {
     case AC3_CHMODE_DUALMONO:
     case AC3_CHMODE_STEREO:
         /* upmix mono to stereo */
         memcpy(s->delay[1], s->delay[0], channel_data_size);
         break;
     case AC3_CHMODE_2F2R:
         memset(s->delay[3], 0, channel_data_size);
     case AC3_CHMODE_2F1R:
         memset(s->delay[2], 0, channel_data_size);
         break;
     case AC3_CHMODE_3F2R:
         memset(s->delay[4], 0, channel_data_size);
     case AC3_CHMODE_3F1R:
         memset(s->delay[3], 0, channel_data_size);
     case AC3_CHMODE_3F:
         memcpy(s->delay[2], s->delay[1], channel_data_size);
         memset(s->delay[1], 0, channel_data_size);
         break;
     }
 }
 
 /**
  * Decode band structure for coupling, spectral extension, or enhanced coupling.
  * The band structure defines how many subbands are in each band.  For each
  * subband in the range, 1 means it is combined with the previous band, and 0
  * means that it starts a new band.
  *
  * @param[in] gbc bit reader context
  * @param[in] blk block number
  * @param[in] eac3 flag to indicate E-AC-3
  * @param[in] ecpl flag to indicate enhanced coupling
  * @param[in] start_subband subband number for start of range
  * @param[in] end_subband subband number for end of range
  * @param[in] default_band_struct default band structure table
  * @param[out] num_bands number of bands (optionally NULL)
  * @param[out] band_sizes array containing the number of bins in each band (optionally NULL)
+ * @param[in,out] band_struct current band structure
  */
 static void decode_band_structure(GetBitContext *gbc, int blk, int eac3,
                                   int ecpl, int start_subband, int end_subband,
                                   const uint8_t *default_band_struct,
-                                  int *num_bands, uint8_t *band_sizes)
+                                  int *num_bands, uint8_t *band_sizes,
+                                  uint8_t *band_struct, int band_struct_size)
 {
     int subbnd, bnd, n_subbands, n_bands=0;
     uint8_t bnd_sz[22];
-    uint8_t coded_band_struct[22];
-    const uint8_t *band_struct;
 
     n_subbands = end_subband - start_subband;
 
+    if (!blk)
+        memcpy(band_struct, default_band_struct, band_struct_size);
+
+    av_assert0(band_struct_size >= start_subband + n_subbands);
+
+    band_struct += start_subband + 1;
+
     /* decode band structure from bitstream or use default */
     if (!eac3 || get_bits1(gbc)) {
         for (subbnd = 0; subbnd < n_subbands - 1; subbnd++) {
-            coded_band_struct[subbnd] = get_bits1(gbc);
+            band_struct[subbnd] = get_bits1(gbc);
         }
-        band_struct = coded_band_struct;
-    } else if (!blk) {
-        band_struct = &default_band_struct[start_subband+1];
-    } else {
-        /* no change in band structure */
-        return;
     }
 
     /* calculate number of bands and band sizes based on band structure.
        note that the first 4 subbands in enhanced coupling span only 6 bins
        instead of 12. */
     if (num_bands || band_sizes ) {
         n_bands = n_subbands;
         bnd_sz[0] = ecpl ? 6 : 12;
         for (bnd = 0, subbnd = 1; subbnd < n_subbands; subbnd++) {
             int subbnd_size = (ecpl && subbnd < 4) ? 6 : 12;
             if (band_struct[subbnd - 1]) {
                 n_bands--;
                 bnd_sz[bnd] += subbnd_size;
             } else {
                 bnd_sz[++bnd] = subbnd_size;
             }
         }
     }
 
     /* set optional output params */
     if (num_bands)
         *num_bands = n_bands;
     if (band_sizes)
         memcpy(band_sizes, bnd_sz, n_bands);
 }
@@ -814,56 +815,57 @@ static void decode_band_structure(GetBitContext *gbc, int blk, int eac3,
 static inline int spx_strategy(AC3DecodeContext *s, int blk)
 {
     GetBitContext *bc = &s->gbc;
     int fbw_channels = s->fbw_channels;
     int dst_start_freq, dst_end_freq, src_start_freq,
         start_subband, end_subband, ch;
 
     /* determine which channels use spx */
     if (s->channel_mode == AC3_CHMODE_MONO) {
         s->channel_uses_spx[1] = 1;
     } else {
         for (ch = 1; ch <= fbw_channels; ch++)
             s->channel_uses_spx[ch] = get_bits1(bc);
     }
 
     /* get the frequency bins of the spx copy region and the spx start
        and end subbands */
     dst_start_freq = get_bits(bc, 2);
     start_subband  = get_bits(bc, 3) + 2;
     if (start_subband > 7)
         start_subband += start_subband - 7;
     end_subband    = get_bits(bc, 3) + 5;
 #if USE_FIXED
     s->spx_dst_end_freq = end_freq_inv_tab[end_subband-5];
 #endif
     if (end_subband   > 7)
         end_subband   += end_subband   - 7;
     dst_start_freq = dst_start_freq * 12 + 25;
     src_start_freq = start_subband  * 12 + 25;
     dst_end_freq   = end_subband    * 12 + 25;
 
     /* check validity of spx ranges */
     if (start_subband >= end_subband) {
         av_log(s->avctx, AV_LOG_ERROR, "invalid spectral extension "
                "range (%d >= %d)\n", start_subband, end_subband);
         return AVERROR_INVALIDDATA;
     }
     if (dst_start_freq >= src_start_freq) {
         av_log(s->avctx, AV_LOG_ERROR, "invalid spectral extension "
                "copy start bin (%d >= %d)\n", dst_start_freq, src_start_freq);
         return AVERROR_INVALIDDATA;
     }
 
     s->spx_dst_start_freq = dst_start_freq;
     s->spx_src_start_freq = src_start_freq;
     if (!USE_FIXED)
         s->spx_dst_end_freq   = dst_end_freq;
 
     decode_band_structure(bc, blk, s->eac3, 0,
                           start_subband, end_subband,
                           ff_eac3_default_spx_band_struct,
                           &s->num_spx_bands,
-                          s->spx_band_sizes);
+                          s->spx_band_sizes,
+                          s->spx_band_struct, sizeof(s->spx_band_struct));
     return 0;
 }
 
@@ -948,68 +950,69 @@ static inline void spx_coordinates(AC3DecodeContext *s)
 static inline int coupling_strategy(AC3DecodeContext *s, int blk,
                                     uint8_t *bit_alloc_stages)
 {
     GetBitContext *bc = &s->gbc;
     int fbw_channels = s->fbw_channels;
     int channel_mode = s->channel_mode;
     int ch;
 
     memset(bit_alloc_stages, 3, AC3_MAX_CHANNELS);
     if (!s->eac3)
         s->cpl_in_use[blk] = get_bits1(bc);
     if (s->cpl_in_use[blk]) {
         /* coupling in use */
         int cpl_start_subband, cpl_end_subband;
 
         if (channel_mode < AC3_CHMODE_STEREO) {
             av_log(s->avctx, AV_LOG_ERROR, "coupling not allowed in mono or dual-mono\n");
             return AVERROR_INVALIDDATA;
         }
 
         /* check for enhanced coupling */
         if (s->eac3 && get_bits1(bc)) {
             /* TODO: parse enhanced coupling strategy info */
             avpriv_request_sample(s->avctx, "Enhanced coupling");
             return AVERROR_PATCHWELCOME;
         }
 
         /* determine which channels are coupled */
         if (s->eac3 && s->channel_mode == AC3_CHMODE_STEREO) {
             s->channel_in_cpl[1] = 1;
             s->channel_in_cpl[2] = 1;
         } else {
             for (ch = 1; ch <= fbw_channels; ch++)
                 s->channel_in_cpl[ch] = get_bits1(bc);
         }
 
         /* phase flags in use */
         if (channel_mode == AC3_CHMODE_STEREO)
             s->phase_flags_in_use = get_bits1(bc);
 
         /* coupling frequency range */
         cpl_start_subband = get_bits(bc, 4);
         cpl_end_subband = s->spx_in_use ? (s->spx_src_start_freq - 37) / 12 :
                                           get_bits(bc, 4) + 3;
         if (cpl_start_subband >= cpl_end_subband) {
             av_log(s->avctx, AV_LOG_ERROR, "invalid coupling range (%d >= %d)\n",
                    cpl_start_subband, cpl_end_subband);
             return AVERROR_INVALIDDATA;
         }
         s->start_freq[CPL_CH] = cpl_start_subband * 12 + 37;
         s->end_freq[CPL_CH]   = cpl_end_subband   * 12 + 37;
 
         decode_band_structure(bc, blk, s->eac3, 0, cpl_start_subband,
                               cpl_end_subband,
                               ff_eac3_default_cpl_band_struct,
-                              &s->num_cpl_bands, s->cpl_band_sizes);
+                              &s->num_cpl_bands, s->cpl_band_sizes,
+                              s->cpl_band_struct, sizeof(s->cpl_band_struct));
     } else {
         /* coupling not in use */
         for (ch = 1; ch <= fbw_channels; ch++) {
             s->channel_in_cpl[ch] = 0;
             s->first_cpl_coords[ch] = 1;
         }
         s->first_cpl_leak = s->eac3;
         s->phase_flags_in_use = 0;
     }
 
     return 0;
 }
diff --git a/libavcodec/ac3dec.h b/libavcodec/ac3dec.h
index bac661c167..aa4cf04f8a 100644
--- a/libavcodec/ac3dec.h
+++ b/libavcodec/ac3dec.h
@@ -70,182 +70,184 @@
 typedef struct AC3DecodeContext {
     AVClass        *class;                  ///< class for AVOptions
     AVCodecContext *avctx;                  ///< parent context
     GetBitContext gbc;                      ///< bitstream reader
 
 ///@name Bit stream information
 ///@{
     int frame_type;                         ///< frame type                             (strmtyp)
     int substreamid;                        ///< substream identification
     int frame_size;                         ///< current frame size, in bytes
     int bit_rate;                           ///< stream bit rate, in bits-per-second
     int sample_rate;                        ///< sample frequency, in Hz
     int num_blocks;                         ///< number of audio blocks
     int bitstream_id;                       ///< bitstream id                           (bsid)
     int bitstream_mode;                     ///< bitstream mode                         (bsmod)
     int channel_mode;                       ///< channel mode                           (acmod)
     int lfe_on;                             ///< lfe channel in use
     int dialog_normalization[2];            ///< dialog level in dBFS                   (dialnorm)
     int compression_exists[2];              ///< compression field is valid for frame   (compre)
     int compression_gain[2];                ///< gain to apply for heavy compression    (compr)
     int channel_map;                        ///< custom channel map
     int preferred_downmix;                  ///< Preferred 2-channel downmix mode       (dmixmod)
     int center_mix_level;                   ///< Center mix level index
     int center_mix_level_ltrt;              ///< Center mix level index for Lt/Rt       (ltrtcmixlev)
     int surround_mix_level;                 ///< Surround mix level index
     int surround_mix_level_ltrt;            ///< Surround mix level index for Lt/Rt     (ltrtsurmixlev)
     int lfe_mix_level_exists;               ///< indicates if lfemixlevcod is specified (lfemixlevcode)
     int lfe_mix_level;                      ///< LFE mix level index                    (lfemixlevcod)
     int eac3;                               ///< indicates if current frame is E-AC-3
     int eac3_frame_dependent_found;         ///< bitstream has E-AC-3 dependent frame(s)
     int eac3_subsbtreamid_found;            ///< bitstream has E-AC-3 additional substream(s)
     int dolby_surround_mode;                ///< dolby surround mode                    (dsurmod)
     int dolby_surround_ex_mode;             ///< dolby surround ex mode                 (dsurexmod)
     int dolby_headphone_mode;               ///< dolby headphone mode                   (dheadphonmod)
 ///@}
 
     int preferred_stereo_downmix;
     float ltrt_center_mix_level;
     float ltrt_surround_mix_level;
     float loro_center_mix_level;
     float loro_surround_mix_level;
     int target_level;                       ///< target level in dBFS
     float level_gain[2];
 
 ///@name Frame syntax parameters
     int snr_offset_strategy;                ///< SNR offset strategy                    (snroffststr)
     int block_switch_syntax;                ///< block switch syntax enabled            (blkswe)
     int dither_flag_syntax;                 ///< dither flag syntax enabled             (dithflage)
     int bit_allocation_syntax;              ///< bit allocation model syntax enabled    (bamode)
     int fast_gain_syntax;                   ///< fast gain codes enabled                (frmfgaincode)
     int dba_syntax;                         ///< delta bit allocation syntax enabled    (dbaflde)
     int skip_syntax;                        ///< skip field syntax enabled              (skipflde)
  ///@}
 
 ///@name Standard coupling
     int cpl_in_use[AC3_MAX_BLOCKS];         ///< coupling in use                        (cplinu)
     int cpl_strategy_exists[AC3_MAX_BLOCKS];///< coupling strategy exists               (cplstre)
     int channel_in_cpl[AC3_MAX_CHANNELS];   ///< channel in coupling                    (chincpl)
     int phase_flags_in_use;                 ///< phase flags in use                     (phsflginu)
     int phase_flags[AC3_MAX_CPL_BANDS];     ///< phase flags                            (phsflg)
     int num_cpl_bands;                      ///< number of coupling bands               (ncplbnd)
+    uint8_t cpl_band_struct[AC3_MAX_CPL_BANDS];
     uint8_t cpl_band_sizes[AC3_MAX_CPL_BANDS]; ///< number of coeffs in each coupling band
     int firstchincpl;                       ///< first channel in coupling
     int first_cpl_coords[AC3_MAX_CHANNELS]; ///< first coupling coordinates states      (firstcplcos)
     int cpl_coords[AC3_MAX_CHANNELS][AC3_MAX_CPL_BANDS]; ///< coupling coordinates      (cplco)
 ///@}
 
 ///@name Spectral extension
 ///@{
     int spx_in_use;                             ///< spectral extension in use              (spxinu)
     uint8_t channel_uses_spx[AC3_MAX_CHANNELS]; ///< channel uses spectral extension        (chinspx)
     int8_t spx_atten_code[AC3_MAX_CHANNELS];    ///< spx attenuation code                   (spxattencod)
     int spx_src_start_freq;                     ///< spx start frequency bin
     int spx_dst_end_freq;                       ///< spx end frequency bin
     int spx_dst_start_freq;                     ///< spx starting frequency bin for copying (copystartmant)
                                                 ///< the copy region ends at the start of the spx region.
     int num_spx_bands;                          ///< number of spx bands                    (nspxbnds)
+    uint8_t spx_band_struct[SPX_MAX_BANDS];
     uint8_t spx_band_sizes[SPX_MAX_BANDS];      ///< number of bins in each spx band
     uint8_t first_spx_coords[AC3_MAX_CHANNELS]; ///< first spx coordinates states           (firstspxcos)
     INTFLOAT spx_noise_blend[AC3_MAX_CHANNELS][SPX_MAX_BANDS]; ///< spx noise blending factor  (nblendfact)
     INTFLOAT spx_signal_blend[AC3_MAX_CHANNELS][SPX_MAX_BANDS];///< spx signal blending factor (sblendfact)
 ///@}
 
 ///@name Adaptive hybrid transform
     int channel_uses_aht[AC3_MAX_CHANNELS];                         ///< channel AHT in use (chahtinu)
     int pre_mantissa[AC3_MAX_CHANNELS][AC3_MAX_COEFS][AC3_MAX_BLOCKS];  ///< pre-IDCT mantissas
 ///@}
 
 ///@name Channel
     int fbw_channels;                           ///< number of full-bandwidth channels
     int channels;                               ///< number of total channels
     int lfe_ch;                                 ///< index of LFE channel
     SHORTFLOAT *downmix_coeffs[2];              ///< stereo downmix coefficients
     int downmixed;                              ///< indicates if coeffs are currently downmixed
     int output_mode;                            ///< output channel configuration
     int out_channels;                           ///< number of output channels
 ///@}
 
 ///@name Dynamic range
     INTFLOAT dynamic_range[2];                 ///< dynamic range
     INTFLOAT drc_scale;                        ///< percentage of dynamic range compression to be applied
     int heavy_compression;                     ///< apply heavy compression
     INTFLOAT heavy_dynamic_range[2];           ///< heavy dynamic range compression
 ///@}
 
 ///@name Bandwidth
     int start_freq[AC3_MAX_CHANNELS];       ///< start frequency bin                    (strtmant)
     int end_freq[AC3_MAX_CHANNELS];         ///< end frequency bin                      (endmant)
 ///@}
 
 ///@name Consistent noise generation
     int consistent_noise_generation;        ///< seed noise generation with AC-3 frame on decode
 ///@}
 
 ///@name Rematrixing
     int num_rematrixing_bands;              ///< number of rematrixing bands            (nrematbnd)
     int rematrixing_flags[4];               ///< rematrixing flags                      (rematflg)
 ///@}
 
 ///@name Exponents
     int num_exp_groups[AC3_MAX_CHANNELS];           ///< Number of exponent groups      (nexpgrp)
     int8_t dexps[AC3_MAX_CHANNELS][AC3_MAX_COEFS];  ///< decoded exponents
     int exp_strategy[AC3_MAX_BLOCKS][AC3_MAX_CHANNELS]; ///< exponent strategies        (expstr)
 ///@}
 
 ///@name Bit allocation
     AC3BitAllocParameters bit_alloc_params;         ///< bit allocation parameters
     int first_cpl_leak;                             ///< first coupling leak state      (firstcplleak)
     int snr_offset[AC3_MAX_CHANNELS];               ///< signal-to-noise ratio offsets  (snroffst)
     int fast_gain[AC3_MAX_CHANNELS];                ///< fast gain values/SMR's         (fgain)
     uint8_t bap[AC3_MAX_CHANNELS][AC3_MAX_COEFS];   ///< bit allocation pointers
     int16_t psd[AC3_MAX_CHANNELS][AC3_MAX_COEFS];   ///< scaled exponents
     int16_t band_psd[AC3_MAX_CHANNELS][AC3_CRITICAL_BANDS]; ///< interpolated exponents
     int16_t mask[AC3_MAX_CHANNELS][AC3_CRITICAL_BANDS];     ///< masking curve values
     int dba_mode[AC3_MAX_CHANNELS];                 ///< delta bit allocation mode
     int dba_nsegs[AC3_MAX_CHANNELS];                ///< number of delta segments
     uint8_t dba_offsets[AC3_MAX_CHANNELS][8];       ///< delta segment offsets
     uint8_t dba_lengths[AC3_MAX_CHANNELS][8];       ///< delta segment lengths
     uint8_t dba_values[AC3_MAX_CHANNELS][8];        ///< delta values for each segment
 ///@}
 
 ///@name Zero-mantissa dithering
     int dither_flag[AC3_MAX_CHANNELS];      ///< dither flags                           (dithflg)
     AVLFG dith_state;                       ///< for dither generation
 ///@}
 
 ///@name IMDCT
     int block_switch[AC3_MAX_CHANNELS];     ///< block switch flags                     (blksw)
     FFTContext imdct_512;                   ///< for 512 sample IMDCT
     FFTContext imdct_256;                   ///< for 256 sample IMDCT
 ///@}
 
 ///@name Optimization
     BswapDSPContext bdsp;
 #if USE_FIXED
     AVFixedDSPContext *fdsp;
 #else
     AVFloatDSPContext *fdsp;
 #endif
     AC3DSPContext ac3dsp;
     FmtConvertContext fmt_conv;             ///< optimized conversion functions
 ///@}
 
     SHORTFLOAT *outptr[AC3_MAX_CHANNELS];
     INTFLOAT *xcfptr[AC3_MAX_CHANNELS];
     INTFLOAT *dlyptr[AC3_MAX_CHANNELS];
 
 ///@name Aligned arrays
     DECLARE_ALIGNED(16, int,   fixed_coeffs)[AC3_MAX_CHANNELS][AC3_MAX_COEFS];       ///< fixed-point transform coefficients
     DECLARE_ALIGNED(32, INTFLOAT, transform_coeffs)[AC3_MAX_CHANNELS][AC3_MAX_COEFS];   ///< transform coefficients
     DECLARE_ALIGNED(32, INTFLOAT, delay)[AC3_MAX_CHANNELS][AC3_BLOCK_SIZE];             ///< delay - added to the next block
     DECLARE_ALIGNED(32, INTFLOAT, window)[AC3_BLOCK_SIZE];                              ///< window coefficients
     DECLARE_ALIGNED(32, INTFLOAT, tmp_output)[AC3_BLOCK_SIZE];                          ///< temporary storage for output before windowing
     DECLARE_ALIGNED(32, SHORTFLOAT, output)[AC3_MAX_CHANNELS][AC3_BLOCK_SIZE];            ///< output after imdct transform and windowing
     DECLARE_ALIGNED(32, uint8_t, input_buffer)[AC3_FRAME_BUFFER_SIZE + AV_INPUT_BUFFER_PADDING_SIZE]; ///< temp buffer to prevent overread
 ///@}
 } AC3DecodeContext;
 
 /**
  * Parse the E-AC-3 frame header.
  * This parses both the bit stream info and audio frame header.
  */
