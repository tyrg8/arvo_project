commit 0cb16a8ccb86c904c18b7f5c6d55b2db36c2275a
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Thu Mar 15 10:22:09 2018 +0000

    g2clib: avoid out-of-bounds write in stack allocated array. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6922. Credit to OSS Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@41798 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/autotest/gdrivers/grib.py b/autotest/gdrivers/grib.py
index 72242f4551..0df0b53894 100755
--- a/autotest/gdrivers/grib.py
+++ b/autotest/gdrivers/grib.py
@@ -1124,242 +1124,251 @@ def _grib_read_section(filename, sect_num_to_read):
 def grib_grib2_write_data_encodings():
 
     if gdaltest.grib_drv is None:
         return 'skip'
 
     # Template 5 numbers
     GS5_SIMPLE = 0
     GS5_CMPLX = 2
     GS5_CMPLXSEC = 3
     GS5_IEEE = 4
     GS5_JPEG2000 = 40
     GS5_PNG = 41
 
     tests = []
     tests += [ [ 'data/byte.tif', [], 4672, GS5_SIMPLE ] ]
     tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=SIMPLE_PACKING' ], 4672, GS5_SIMPLE ] ]
 
     tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=IEEE_FLOATING_POINT' ], 4672, GS5_IEEE ] ]
 
     tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=SIMPLE_PACKING', 'NBITS=8' ], 4672, GS5_SIMPLE ] ]
     tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=SIMPLE_PACKING', 'NBITS=9' ], 4672, GS5_SIMPLE ] ]
     tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=SIMPLE_PACKING', 'NBITS=7' ], 4484, GS5_SIMPLE ] ]
     tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=SIMPLE_PACKING', 'DECIMAL_SCALE_FACTOR=-1' ], 4820, GS5_SIMPLE ] ]
     tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=SIMPLE_PACKING', 'NBITS=5', 'DECIMAL_SCALE_FACTOR=-1' ], 4820, GS5_SIMPLE ] ]
     tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=SIMPLE_PACKING', 'NBITS=8', 'DECIMAL_SCALE_FACTOR=-1' ], 4855, GS5_SIMPLE ] ]
 
     tests += [ [ 'data/grib/ds.mint.bin', [ 'PDS_PDTN=8', 'PDS_TEMPLATE_ASSEMBLED_VALUES=0 5 2 0 0 255 255 1 19 1 0 0 255 -1 -2147483647 2008 2 22 12 0 0 1 0 3 255 1 12 1 0'  ], 46650, GS5_CMPLX ] ] # has nodata, hence complex packing
     tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=COMPLEX_PACKING' ], 4672, GS5_CMPLX ] ]
     tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=COMPLEX_PACKING', 'SPATIAL_DIFFERENCING_ORDER=0' ], 4672, GS5_CMPLX ] ]
     tests += [ [ 'data/byte.tif', [ 'SPATIAL_DIFFERENCING_ORDER=1' ], 4672, GS5_CMPLXSEC ] ]
     tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=COMPLEX_PACKING', 'SPATIAL_DIFFERENCING_ORDER=1' ], 4672, GS5_CMPLXSEC ] ]
     tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=COMPLEX_PACKING', 'SPATIAL_DIFFERENCING_ORDER=2' ], 4672, GS5_CMPLXSEC ] ]
     tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=COMPLEX_PACKING', 'DECIMAL_SCALE_FACTOR=-1' ], 4820, GS5_CMPLX ] ]
     tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=COMPLEX_PACKING', 'NBITS=7' ], 4484, GS5_CMPLX ] ]
 
     if gdal.GetDriverByName('PNG') is not None:
         tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=PNG' ], 4672, GS5_PNG ] ]
         tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=PNG', 'NBITS=8' ], 4672, GS5_PNG ] ]
         tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=PNG', 'DECIMAL_SCALE_FACTOR=-1' ], 4820, GS5_PNG ] ]
         tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=PNG', 'NBITS=8', 'DECIMAL_SCALE_FACTOR=-1' ], 4855, GS5_PNG ] ]
         tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=PNG', 'NBITS=9' ], 4672, GS5_PNG ] ] # rounded to 16 bit
         tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=PNG', 'NBITS=7' ], 4672, GS5_PNG ] ] # rounded to 8 bit
         tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=PNG', 'NBITS=4' ], 5103, GS5_PNG ] ]
         tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=PNG', 'NBITS=3' ], 5103, GS5_PNG ] ] # rounded to 4 bit
         tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=PNG', 'NBITS=2' ], 5103, GS5_PNG ] ]
         tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=PNG', 'NBITS=1' ], 5103, GS5_PNG ] ]
         tests += [ [ '../gcore/data/float32.tif', [ 'DATA_ENCODING=PNG' ], 4672, GS5_PNG ] ]
 
     found_j2k_drivers = []
     for drvname in [ 'JP2KAK', 'JP2OPENJPEG', 'JPEG2000', 'JP2ECW' ]:
         if gdal.GetDriverByName(drvname) is not None:
             if drvname != 'JP2ECW':
                 found_j2k_drivers.append(drvname)
             else:
                 import ecw
                 if ecw.has_write_support():
                     found_j2k_drivers.append(drvname)
 
     if len(found_j2k_drivers) > 0:
         tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=JPEG2000' ], 4672, GS5_JPEG2000 ] ]
         tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=JPEG2000', 'COMPRESSION_RATIO=2' ], 4672, GS5_JPEG2000 ] ] # COMPRESSION_RATIO ignored in that case
         tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=JPEG2000', 'NBITS=8' ], 4672, GS5_JPEG2000 ] ]
         tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=JPEG2000', 'DECIMAL_SCALE_FACTOR=-1' ], 4820, GS5_JPEG2000 ] ]
         tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=JPEG2000', 'NBITS=8', 'DECIMAL_SCALE_FACTOR=-1' ], 4855, GS5_JPEG2000 ] ]
         tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=JPEG2000', 'NBITS=9' ], 4672, GS5_JPEG2000 ] ]
         # 4899 for JP2ECW, 4440 for JP2OPENJPEG
         tests += [ [ 'data/byte.tif', [ 'DATA_ENCODING=JPEG2000', 'NBITS=7' ], (4484, 4899, 4440), GS5_JPEG2000 ] ]
         for drvname in found_j2k_drivers:
             tests += [ [ 'data/byte.tif', [ 'JPEG2000_DRIVER=' + drvname ], 4672, GS5_JPEG2000 ] ]
         tests += [ [ '../gcore/data/float32.tif', [ 'DATA_ENCODING=JPEG2000' ], 4672, GS5_JPEG2000 ] ]
 
     tests += [ [ '../gcore/data/int16.tif', [], 4672, GS5_SIMPLE ] ]
     tests += [ [ '../gcore/data/uint16.tif', [], 4672, GS5_SIMPLE ] ]
     tests += [ [ '../gcore/data/int32.tif', [], 4672, GS5_SIMPLE ] ]
     tests += [ [ '../gcore/data/uint32.tif', [], 4672, GS5_SIMPLE ] ]
     tests += [ [ '../gcore/data/float32.tif', [], 4672, GS5_IEEE ] ]
     tests += [ [ '../gcore/data/float64.tif', [], 4672, GS5_IEEE ] ]
     tests += [ [ '../gcore/data/float32.tif', [ 'DATA_ENCODING=IEEE_FLOATING_POINT' ], 4672, GS5_IEEE ] ]
     tests += [ [ '../gcore/data/float64.tif', [ 'DATA_ENCODING=IEEE_FLOATING_POINT' ], 4672, GS5_IEEE ] ]
     tests += [ [ '../gcore/data/float32.tif', [ 'DATA_ENCODING=COMPLEX_PACKING' ], 4672, GS5_CMPLX ] ]
 
     one_ds = gdal.GetDriverByName('MEM').Create('', 1, 1)
     one_ds.SetGeoTransform([2,1,0,49,0,-1])
     sr = osr.SpatialReference()
     sr.SetFromUserInput('WGS84')
     one_ds.SetProjection( sr.ExportToWkt() )
     one_ds.GetRasterBand(1).Fill(1)
 
     tests += [ [ one_ds, [], 1, GS5_SIMPLE ] ]
     tests += [ [ one_ds, [ 'DATA_ENCODING=COMPLEX_PACKING' ], 1, GS5_CMPLX ] ]
     if gdal.GetDriverByName('PNG') is not None:
         tests += [ [ one_ds, [ 'DATA_ENCODING=PNG' ], 1, GS5_PNG ] ]
     if len(found_j2k_drivers) > 0:
         tests += [ [ one_ds, [ 'DATA_ENCODING=JPEG2000' ], 1, GS5_JPEG2000 ] ]
 
     nodata_never_hit_ds = gdal.GetDriverByName('MEM').Create('', 1, 1)
     nodata_never_hit_ds.SetGeoTransform([2,1,0,49,0,-1])
     nodata_never_hit_ds.SetProjection( sr.ExportToWkt() )
     nodata_never_hit_ds.GetRasterBand(1).SetNoDataValue(1)
 
     tests += [ [ nodata_never_hit_ds, [], 0, GS5_SIMPLE ] ]
 
     all_nodata_ds = gdal.GetDriverByName('MEM').Create('', 1, 1)
     all_nodata_ds.SetGeoTransform([2,1,0,49,0,-1])
     all_nodata_ds.SetProjection( sr.ExportToWkt() )
     all_nodata_ds.GetRasterBand(1).SetNoDataValue(0)
 
     tests += [ [ all_nodata_ds, [ 'DATA_ENCODING=COMPLEX_PACKING'  ], 0, GS5_CMPLX ] ]
 
     for (filename, options, expected_cs, expected_section5_template_number) in tests:
         tmpfilename = '/vsimem/out.grb2'
         gdal.ErrorReset()
         gdal.Translate( tmpfilename, filename, format = 'GRIB',
                        creationOptions = options )
         error_msg = gdal.GetLastErrorMsg()
         if error_msg != '':
             gdaltest.post_reason('did not expect error for %s, %s' % (str(filename), str(options)))
             return 'fail'
 
         section5 = _grib_read_section(tmpfilename, 5)
         section5_template_number = struct.unpack('>h', section5[9:11])[0]
         if section5_template_number != expected_section5_template_number:
             gdaltest.post_reason('did not get expected section 5 template number for %s, %s' % (str(filename), str(options)))
             print(section5_template_number, expected_section5_template_number)
             return 'fail'
 
         out_ds = gdal.Open(tmpfilename)
         cs = out_ds.GetRasterBand(1).Checksum()
         nd = out_ds.GetRasterBand(1).GetNoDataValue()
         out_ds = None
         gdal.Unlink(tmpfilename)
         if type(expected_cs) != type((1,)):
             expected_cs = (expected_cs,)
         if cs not in expected_cs:
             gdaltest.post_reason('did not get expected checksum for %s, %s' % (str(filename), str(options)))
             print(cs, expected_cs)
             return 'fail'
 
         if section5_template_number in (GS5_CMPLX, GS5_CMPLXSEC):
             if type(filename) == type(''):
                 ref_ds = gdal.Open(filename)
             else:
                 ref_ds = filename
             expected_nd = ref_ds.GetRasterBand(1).GetNoDataValue()
             if nd != expected_nd:
                 gdaltest.post_reason('did not get expected nodata for %s, %s' % (str(filename), str(options)))
                 print(nd, expected_nd)
                 return 'fail'
 
     # Test floating point data with dynamic < 1
     test_ds = gdal.GetDriverByName('MEM').Create('', 2, 2, 1, gdal.GDT_Float32)
     test_ds.SetGeoTransform([2,1,0,49,0,-1])
     test_ds.SetProjection( sr.ExportToWkt() )
     test_ds.WriteRaster(0, 0, 2, 2, struct.pack(4 * 'f', 1.23, 1.45, 1.56, 1.78))
 
     encodings = [ 'SIMPLE_PACKING', 'COMPLEX_PACKING', 'IEEE_FLOATING_POINT' ]
     if gdal.GetDriverByName('PNG') is not None:
         encodings += [ 'PNG' ]
     # JPEG2000 doesn't result in an appropriate result
     if len(found_j2k_drivers) > 0 and found_j2k_drivers != [ 'JPEG2000' ] and found_j2k_drivers != [ 'JPEG2000', 'JP2ECW' ]:
         encodings += [ 'JPEG2000' ]
 
     for encoding in encodings:
         tmpfilename = '/vsimem/out.grb2'
         gdal.ErrorReset()
-        gdal.Translate( tmpfilename, test_ds, format = 'GRIB', creationOptions = ['DATA_ENCODING=' + encoding] )
-        error_msg = gdal.GetLastErrorMsg()
-        if error_msg != '':
-            gdaltest.post_reason('did not expect error for %s, %s' % (str(filename), str(options)))
-            return 'fail'
-        out_ds = gdal.Open(tmpfilename)
-        got_vals = struct.unpack(4 * 'd', out_ds.ReadRaster())
-        out_ds = None
-        gdal.Unlink(tmpfilename)
-        if encoding == 'IEEE_FLOATING_POINT':
-            expected_vals = (1.23, 1.45, 1.56, 1.78)
+        options = ['DATA_ENCODING=' + encoding]
+        if encoding == 'COMPLEX_PACKING':
+            with gdaltest.error_handler():
+                success = gdal.Translate( tmpfilename, test_ds, format = 'GRIB', creationOptions = options )
+            if success:
+                gdaltest.post_reason('expected error for %s, %s' % ('floating point data with dynamic < 1', str(options)))
+                return 'fail'
         else:
-            expected_vals = (1.2300000190734863, 1.4487500190734863, 1.5581250190734863, 1.7807812690734863)
-        if max([abs(got_vals[i] - expected_vals[i]) for i in range(4)]) > 1e-7:
-            gdaltest.post_reason('did not get expected values')
-            print(got_vals)
-            return 'fail'
+            gdal.Translate( tmpfilename, test_ds, format = 'GRIB', creationOptions = options )
+            error_msg = gdal.GetLastErrorMsg()
+            if error_msg != '':
+                gdaltest.post_reason('did not expect error for %s, %s' % ('floating point data with dynamic < 1', str(options)))
+                return 'fail'
+            out_ds = gdal.Open(tmpfilename)
+            got_vals = struct.unpack(4 * 'd', out_ds.ReadRaster())
+            out_ds = None
+            if encoding == 'IEEE_FLOATING_POINT':
+                expected_vals = (1.23, 1.45, 1.56, 1.78)
+            else:
+                expected_vals = (1.2300000190734863, 1.4487500190734863, 1.5581250190734863, 1.7807812690734863)
+            if max([abs(got_vals[i] - expected_vals[i]) for i in range(4)]) > 1e-7:
+                gdaltest.post_reason('did not get expected values')
+                print(got_vals)
+                return 'fail'
+        gdal.Unlink(tmpfilename)
+
     test_ds = None
 
     # Test floating point data with very large dynamic
     test_ds = gdal.GetDriverByName('MEM').Create('', 2, 2, 1, gdal.GDT_Float32)
     test_ds.SetGeoTransform([2,1,0,49,0,-1])
     test_ds.SetProjection( sr.ExportToWkt() )
     test_ds.WriteRaster(0, 0, 2, 2, struct.pack(4 * 'f', 1.23e10, -2.45e10, 1.23e10, -2.45e10))
 
     encodings = [ 'SIMPLE_PACKING' ]
     if gdal.GetDriverByName('PNG') is not None:
         encodings += [ 'PNG' ]
     # JP2ECW doesn't manage to compress such a small file
     if len(found_j2k_drivers) > 0 and found_j2k_drivers != [ 'JP2ECW' ] and found_j2k_drivers != [ 'JPEG2000', 'JP2ECW' ]:
         encodings += [ 'JPEG2000' ]
 
     for encoding in encodings:
         tmpfilename = '/vsimem/out.grb2'
         if encoding != 'SIMPLE_PACKING':
             gdal.PushErrorHandler()
         gdal.Translate( tmpfilename, test_ds, format = 'GRIB', creationOptions = ['DATA_ENCODING=' + encoding] )
         if encoding != 'SIMPLE_PACKING':
             gdal.PopErrorHandler()
         out_ds = gdal.Open(tmpfilename)
         if out_ds is None:
             gdaltest.post_reason('failed to re-open dataset for ' + encoding)
             return 'fail'
         got_vals = struct.unpack(4 * 'd', out_ds.ReadRaster())
         out_ds = None
         gdal.Unlink(tmpfilename)
         expected_vals = (1.23e10, -2.45e10,1.23e10, -2.45e10)
         if max([abs((got_vals[i] - expected_vals[i])/expected_vals[i]) for i in range(4)]) > 1e-4:
             gdaltest.post_reason('did not get expected values for ' + encoding)
             print(got_vals)
             print(max([abs((got_vals[i] - expected_vals[i])/expected_vals[i]) for i in range(2)]))
             return 'fail'
     test_ds = None
 
     # Test lossy J2K compression
     for drvname in found_j2k_drivers:
         tmpfilename = '/vsimem/out.grb2'
         gdal.ErrorReset()
         gdal.Translate( tmpfilename, 'data/utm.tif', format = 'GRIB',
                         creationOptions = ['JPEG2000_DRIVER='+drvname,
                                            'COMPRESSION_RATIO=20'] )
         error_msg = gdal.GetLastErrorMsg()
         if error_msg != '':
             gdaltest.post_reason('did not expect error for %s, %s' % (str(filename), str(options)))
             return 'fail'
         out_ds = gdal.Open(tmpfilename)
         cs = out_ds.GetRasterBand(1).Checksum()
         out_ds = None
         gdal.Unlink(tmpfilename)
         if cs == 0 or cs == 50235: # 50235: lossless checksum
             gdaltest.post_reason('did not get expected checksum for lossy JPEG2000 with ' + drvname)
             print(cs)
 
     return 'success'
 
 ###############################################################################
 # Test GRIB2 write support with warnings/errors
diff --git a/gdal/frmts/grib/degrib/g2clib/reduce.c b/gdal/frmts/grib/degrib/g2clib/reduce.c
index b20e33b85d..37e0a585ec 100644
--- a/gdal/frmts/grib/degrib/g2clib/reduce.c
+++ b/gdal/frmts/grib/degrib/g2clib/reduce.c
@@ -1,195 +1,201 @@
 /* reduce.f -- translated by f2c (version 20031025).
    You must link the resulting object file with libf2c:
 	on Microsoft Windows system, link with libf2c.lib;
 	on Linux or Unix systems, link with .../path/to/libf2c.a -lm
 	or, if you install libf2c.a in a standard place, with -lf2c -lm
 	-- in that order, at the end of the command line, as in
 		cc *.o -lf2c -lm
 	Source for libf2c is in /netlib/f2c/libf2c.zip, e.g.,
 
 		http://www.netlib.org/f2c/libf2c.zip
 */
 
 /*#include "f2c.h"*/
 #include <stdlib.h>
 #include "grib2.h"
 
 #include "cpl_port.h"
 
 /* Subroutine */ int reduce(CPL_UNUSED integer *kfildo, integer *jmin, integer *jmax,
 	integer *lbit, integer *nov, integer *lx, integer *ndg, integer *ibit,
 	 integer *jbit, integer *kbit, integer *novref, integer *ibxx2,
 	integer *ier)
 {
     /* Initialized data */
 
     static const integer ifeed = 12;
 
     /* System generated locals */
     integer i__1, i__2;
 
     /* Local variables */
     integer newboxtp = 0, j, l, m = 0, jj = 0, lxn = 0, left = 0;
     real pimp = 0;
     integer move = 0, novl = 0;
     char cfeed[1];
     integer /* nboxj[31], */ lxnkp = 0, iorigb = 0, ibxx2m1 = 0, movmin = 0,
         ntotbt[31], ntotpr = 0, newboxt = 0;
     integer *newbox, *newboxp;
 
 
 /*        NOVEMBER 2001   GLAHN   TDL   GRIB2 */
 /*        MARCH    2002   GLAHN   COMMENT IER = 715 */
 /*        MARCH    2002   GLAHN   MODIFIED TO ACCOMMODATE LX=1 ON ENTRY */
 
 /*        PURPOSE */
 /*            DETERMINES WHETHER THE NUMBER OF GROUPS SHOULD BE */
 /*            INCREASED IN ORDER TO REDUCE THE SIZE OF THE LARGE */
 /*            GROUPS, AND TO MAKE THAT ADJUSTMENT.  BY REDUCING THE */
 /*            SIZE OF THE LARGE GROUPS, LESS BITS MAY BE NECESSARY */
 /*            FOR PACKING THE GROUP SIZES AND ALL THE INFORMATION */
 /*            ABOUT THE GROUPS. */
 
 /*            THE REFERENCE FOR NOV( ) WAS REMOVED IN THE CALLING */
 /*            ROUTINE SO THAT KBIT COULD BE DETERMINED.  THIS */
 /*            FURNISHES A STARTING POINT FOR THE ITERATIONS IN REDUCE. */
 /*            HOWEVER, THE REFERENCE MUST BE CONSIDERED. */
 
 /*        DATA SET USE */
 /*           KFILDO - UNIT NUMBER FOR OUTPUT (PRINT) FILE. (OUTPUT) */
 
 /*        VARIABLES IN CALL SEQUENCE */
 /*              KFILDO = UNIT NUMBER FOR OUTPUT (PRINT) FILE.  (INPUT) */
 /*             JMIN(J) = THE MINIMUM OF EACH GROUP (J=1,LX).  IT IS */
 /*                       POSSIBLE AFTER SPLITTING THE GROUPS, JMIN( ) */
 /*                       WILL NOT BE THE MINIMUM OF THE NEW GROUP. */
 /*                       THIS DOESN'T MATTER; JMIN( ) IS REALLY THE */
 /*                       GROUP REFERENCE AND DOESN'T HAVE TO BE THE */
 /*                       SMALLEST VALUE.  (INPUT/OUTPUT) */
 /*             JMAX(J) = THE MAXIMUM OF EACH GROUP (J=1,LX). */
 /*                       (INPUT/OUTPUT) */
 /*             LBIT(J) = THE NUMBER OF BITS NECESSARY TO PACK EACH GROUP */
 /*                       (J=1,LX).  (INPUT/OUTPUT) */
 /*              NOV(J) = THE NUMBER OF VALUES IN EACH GROUP (J=1,LX). */
 /*                       (INPUT/OUTPUT) */
 /*                  LX = THE NUMBER OF GROUPS.  THIS WILL BE INCREASED */
 /*                       IF GROUPS ARE SPLIT.  (INPUT/OUTPUT) */
 /*                 NDG = THE DIMENSION OF JMIN( ), JMAX( ), LBIT( ), AND */
 /*                       NOV( ).  (INPUT) */
 /*                IBIT = THE NUMBER OF BITS NECESSARY TO PACK THE JMIN(J) */
 /*                       VALUES, J=1,LX.  (INPUT) */
 /*                JBIT = THE NUMBER OF BITS NECESSARY TO PACK THE LBIT(J) */
 /*                       VALUES, J=1,LX.  (INPUT) */
 /*                KBIT = THE NUMBER OF BITS NECESSARY TO PACK THE NOV(J) */
 /*                       VALUES, J=1,LX.  IF THE GROUPS ARE SPLIT, KBIT */
 /*                       IS REDUCED.  (INPUT/OUTPUT) */
 /*              NOVREF = REFERENCE VALUE FOR NOV( ).  (INPUT) */
 /*            IBXX2(J) = 2**J (J=0,30).  (INPUT) */
 /*                 IER = ERROR RETURN.  (OUTPUT) */
 /*                         0 = GOOD RETURN. */
 /*                       714 = PROBLEM IN ALGORITHM.  REDUCE ABORTED. */
 /*                       715 = NGP NOT LARGE ENOUGH.  REDUCE ABORTED. */
 /*           NTOTBT(J) = THE TOTAL BITS USED FOR THE PACKING BITS J */
 /*                       (J=1,30).  (INTERNAL) */
 /*            NBOXJ(J) = NEW BOXES NEEDED FOR THE PACKING BITS J */
 /*                       (J=1,30).  (INTERNAL) */
 /*           NEWBOX(L) = NUMBER OF NEW BOXES (GROUPS) FOR EACH ORIGINAL */
 /*                       GROUP (L=1,LX) FOR THE CURRENT J.  (AUTOMATIC) */
 /*                       (INTERNAL) */
 /*          NEWBOXP(L) = SAME AS NEWBOX( ) BUT FOR THE PREVIOUS J. */
 /*                       THIS ELIMINATES RECOMPUTATION.  (AUTOMATIC) */
 /*                       (INTERNAL) */
 /*               CFEED = CONTAINS THE CHARACTER REPRESENTATION */
 /*                       OF A PRINTER FORM FEED.  (CHARACTER) (INTERNAL) */
 /*               IFEED = CONTAINS THE INTEGER VALUE OF A PRINTER */
 /*                       FORM FEED.  (INTERNAL) */
 /*              IORIGB = THE ORIGINAL NUMBER OF BITS NECESSARY */
 /*                       FOR THE GROUP VALUES.  (INTERNAL) */
 /*        1         2         3         4         5         6         7 X */
 
 /*        NON SYSTEM SUBROUTINES CALLED */
 /*           NONE */
 
 
+    if( *kbit <= 0 || *kbit > 32 )
+    {
+        *ier = 714;
+        return 0;
+    }
+
 /*        NEWBOX( ) AND NEWBOXP( ) were AUTOMATIC ARRAYS. */
     newbox = (integer *)calloc(*ndg,sizeof(integer));
     newboxp = (integer *)calloc(*ndg,sizeof(integer));
 
     /* Parameter adjustments */
     --nov;
     --lbit;
     --jmax;
     --jmin;
 
     /* Function Body */
 
     *ier = 0;
     if (*lx == 1) {
 	goto L410;
     }
 /*        IF THERE IS ONLY ONE GROUP, RETURN. */
 
     *(unsigned char *)cfeed = (char) ifeed;
 
 /*        INITIALIZE NUMBER OF NEW BOXES PER GROUP TO ZERO. */
 
     i__1 = *lx;
     for (l = 1; l <= i__1; ++l) {
 	newbox[l - 1] = 0;
 /* L110: */
     }
 
 /*        INITIALIZE NUMBER OF TOTAL NEW BOXES PER J TO ZERO. */
 
     for (j = 1; j <= 31; ++j) {
 	ntotbt[j - 1] = 999999999;
 	/* nboxj[j - 1] = 0; */
 /* L112: */
     }
 
     iorigb = (*ibit + *jbit + *kbit) * *lx;
 /*        IBIT = BITS TO PACK THE JMIN( ). */
 /*        JBIT = BITS TO PACK THE LBIT( ). */
 /*        KBIT = BITS TO PACK THE NOV( ). */
 /*        LX = NUMBER OF GROUPS. */
     ntotbt[*kbit - 1] = iorigb;
 /*           THIS IS THE VALUE OF TOTAL BITS FOR THE ORIGINAL LX */
 /*           GROUPS, WHICH REQUIRES KBITS TO PACK THE GROUP */
 /*           LENGTHS.  SETTING THIS HERE MAKES ONE LESS LOOPS */
 /*           NECESSARY BELOW. */
 
 /*        COMPUTE BITS NOW USED FOR THE PARAMETERS DEFINED. */
 
 /*        DETERMINE OTHER POSSIBILITIES BY INCREASING LX AND DECREASING */
 /*        NOV( ) WITH VALUES GREATER THAN THRESHOLDS.  ASSUME A GROUP IS */
 /*        SPLIT INTO 2 OR MORE GROUPS SO THAT KBIT IS REDUCED WITHOUT */
 /*        CHANGING IBIT OR JBIT. */
 
     jj = 0;
 
 /* Computing MIN */
     i__1 = 30;
     i__2 = *kbit - 1;
     /*for (j = min(i__1,i__2); j >= 2; --j) {*/
     for (j = (i__1 < i__2) ? i__1 : i__2; j >= 2; --j) {
 /*           VALUES GE KBIT WILL NOT REQUIRE SPLITS.  ONCE THE TOTAL */
 /*           BITS START INCREASING WITH DECREASING J, STOP.  ALSO, THE */
 /*           NUMBER OF BITS REQUIRED IS KNOWN FOR KBITS = NTOTBT(KBIT). */
 
 	newboxt = 0;
 
 	i__1 = *lx;
 	for (l = 1; l <= i__1; ++l) {
 
 	    if (nov[l] < ibxx2[j]) {
 		newbox[l - 1] = 0;
 /*                 NO SPLITS OR NEW BOXES. */
 		goto L190;
 	    } else {
 		novl = nov[l];
 
 		m = (nov[l] - 1) / (ibxx2[j] - 1) + 1;
 /*                 M IS FOUND BY SOLVING THE EQUATION BELOW FOR M: */
 /*                 (NOV(L)+M-1)/M LT IBXX2(J) */
 /*                 M GT (NOV(L)-1)/(IBXX2(J)-1) */
 /*                 SET M = (NOV(L)-1)/(IBXX2(J)-1)+1 */
