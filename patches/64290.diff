commit a9b0dc0aa7e5d6e0ddc8ee4010106fc2a44dc8d9
Author: Gerald Combs <gerald@wireshark.org>
Date:   Sat Nov 18 17:54:00 2023 -0800

    ZigBee ZCL: Fix an array bounds check
    
    Use the correct value when checking the bounds of ett_zbee_zcl_sel. Our
    ett definitions are only used in the C module, so move them there. Fix a
    name.
    
    Fixes #19490

diff --git a/epan/dissectors/packet-zbee-zcl.c b/epan/dissectors/packet-zbee-zcl.c
index 7da36391ff..ba76298249 100644
--- a/epan/dissectors/packet-zbee-zcl.c
+++ b/epan/dissectors/packet-zbee-zcl.c
@@ -57,8 +57,12 @@ static zbee_zcl_cluster_desc *zbee_zcl_get_cluster_desc(guint16 cluster_id, guin
 static void dissect_zcl_discover_cmd_attr_extended_resp(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, guint* offset, guint16 cluster_id, guint16 mfr_code, gboolean direction);
 /********************
  * Global Variables *
  ********************
  */
+
+#define ZBEE_ZCL_INVALID_STR_LENGTH         0xff
+#define ZBEE_ZCL_INVALID_LONG_STR_LENGTH    0xffff
+
 /* Header Field Indices. */
 static int proto_zbee_zcl;
 static int hf_zbee_zcl_fcf_frame_type;
@@ -131,11 +135,18 @@ static int hf_zbee_zcl_attr_bag_elements_type;
 static int hf_zbee_zcl_attr_bag_elements_num;
 
 /* Subtree indices. */
-static gint ett_zbee_zcl;
-static gint ett_zbee_zcl_fcf;
-static gint ett_zbee_zcl_attr[ZBEE_ZCL_NUM_ATTR_ETT];
-static gint ett_zbee_zcl_sel[ZBEE_ZCL_NUM_IND_FIELD];
-static gint ett_zbee_zcl_array_elements[ZBEE_ZCL_NUM_ARRAY_ELEM_ETT];
+
+#define ZBEE_ZCL_NUM_INDIVIDUAL_ETT  2
+#define ZBEE_ZCL_NUM_ATTR_ETT       64
+#define ZBEE_ZCL_NUM_SEL_ETT        16
+#define ZBEE_ZCL_NUM_ARRAY_ELEM_ETT 16
+#define ZBEE_ZCL_NUM_TOTAL_ETT      (ZBEE_ZCL_NUM_INDIVIDUAL_ETT + ZBEE_ZCL_NUM_ATTR_ETT + ZBEE_ZCL_NUM_SEL_ETT + ZBEE_ZCL_NUM_ARRAY_ELEM_ETT)
+
+static int ett_zbee_zcl;
+static int ett_zbee_zcl_fcf;
+static int ett_zbee_zcl_attr[ZBEE_ZCL_NUM_ATTR_ETT];
+static int ett_zbee_zcl_sel[ZBEE_ZCL_NUM_SEL_ETT];
+static int ett_zbee_zcl_array_elements[ZBEE_ZCL_NUM_ARRAY_ELEM_ETT];
 
 static expert_field ei_cfg_rpt_rsp_short_non_success;
 static expert_field ei_zbee_zero_length_element;
@@ -1736,31 +1747,31 @@ static void dissect_zcl_discover_attr_resp(tvbuff_t *tvb, packet_info *pinfo _U_
 static void dissect_zcl_read_attr_struct(tvbuff_t* tvb, packet_info* pinfo _U_, proto_tree* tree, guint* offset,
     guint16 cluster_id, guint16 mfr_code, gboolean direction)
 {
     proto_tree *sub_tree = NULL;
     guint tvb_len;
     guint i = 0, j=0;
 //    guint16 attr_id;
     guint8 indicator;
     gboolean client_attr = direction == ZBEE_ZCL_FCF_TO_CLIENT;
     tvb_len = tvb_captured_length(tvb);
-    while (*offset < tvb_len && i < ZBEE_ZCL_NUM_ATTR_ETT) {
+    while (*offset < tvb_len && i < ZBEE_ZCL_NUM_SEL_ETT) {
         /* Create subtree for aelector field */
         sub_tree = proto_tree_add_subtree(tree, tvb, *offset, 0, ett_zbee_zcl_sel[i], NULL, "Selector");
         i++;
         /* Dissect the attribute identifier */
 //        attr_id = tvb_get_letohs(tvb, *offset);
         dissect_zcl_attr_id(tvb, tree, offset, cluster_id, mfr_code, client_attr);
         proto_tree_add_item(sub_tree, hf_zbee_zcl_indicator, tvb, *offset, 1, ENC_LITTLE_ENDIAN);
         indicator = tvb_get_guint8(tvb, *offset);
         *offset += 1;
         j=0;
         while (j < indicator) {
             proto_tree_add_item(sub_tree, hf_zbee_zcl_index, tvb, *offset, 2, ENC_LITTLE_ENDIAN);
             //index = tvb_get_letohs(tvb, offset);
             /*index = dissect_zcl_array_type();*/
             j++;
             *offset += 2;
         }
     }
 
 }/*dissect_zcl_read_attr_struct*/
@@ -2544,323 +2555,323 @@ zbee_shutdown(void)
 /**
  *ZigBee ZCL protocol registration routine.
  *
 */
 void proto_register_zbee_zcl(void)
 {
     guint i, j;
 
     static hf_register_info hf[] = {
         { &hf_zbee_zcl_fcf_frame_type,
             { "Frame Type", "zbee_zcl.type", FT_UINT8, BASE_HEX, VALS(zbee_zcl_frame_types),
                 ZBEE_ZCL_FCF_FRAME_TYPE, NULL, HFILL }},
 
         { &hf_zbee_zcl_fcf_mfr_spec,
             { "Manufacturer Specific", "zbee_zcl.ms", FT_BOOLEAN, 8, NULL,
                 ZBEE_ZCL_FCF_MFR_SPEC, NULL, HFILL }},
 
         { &hf_zbee_zcl_fcf_dir,
             { "Direction", "zbee_zcl.dir", FT_BOOLEAN, 8, TFS(&tfs_s2c_c2s),
                 ZBEE_ZCL_FCF_DIRECTION, NULL, HFILL }},
 
         { &hf_zbee_zcl_fcf_disable_default_resp,
             { "Disable Default Response", "zbee_zcl.ddr", FT_BOOLEAN, 8, NULL,
                 ZBEE_ZCL_FCF_DISABLE_DEFAULT_RESP, NULL, HFILL }},
 
         { &hf_zbee_zcl_mfr_code,
             { "Manufacturer Code", "zbee_zcl.cmd.mc", FT_UINT16, BASE_HEX|BASE_EXT_STRING,
                     &zbee_mfr_code_names_ext, 0x0, "Assigned manufacturer code.", HFILL }},
 
         { &hf_zbee_zcl_tran_seqno,
             { "Sequence Number", "zbee_zcl.cmd.tsn", FT_UINT8, BASE_DEC, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_cmd_id,
             { "Command",    "zbee_zcl.cmd.id", FT_UINT8, BASE_HEX|BASE_EXT_STRING, &zbee_zcl_cmd_names_ext,
                 0x0, NULL, HFILL }},
 
         { &hf_zbee_zcl_cs_cmd_id,
           { "Command",    "zbee_zcl.cs.cmd.id", FT_UINT8, BASE_HEX, VALS(zbee_zcl_cs_cmd_names) /*"Unknown"*/,
                 0x0, NULL, HFILL }},
 
         { &hf_zbee_zcl_cmd_id_rsp,
           { "Response to Command", "zbee_zcl.cmd.id.rsp", FT_UINT8, BASE_HEX, NULL,
                 0x0, NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_id,
             { "Attribute",  "zbee_zcl.attr.id", FT_UINT16, BASE_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_data_type,
             { "Data Type",  "zbee_zcl.attr.data.type", FT_UINT8, BASE_HEX|BASE_EXT_STRING,
                 &zbee_zcl_data_type_names_ext, 0x0, NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_boolean,
             { "Boolean",    "zbee_zcl.attr.boolean", FT_BOOLEAN, 8, NULL, 0xff,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_bitmap8,
             { "Bitmap8",  "zbee_zcl.attr.bitmap8", FT_UINT8, BASE_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_bitmap16,
             { "Bitmap16", "zbee_zcl.attr.bitmap16", FT_UINT16, BASE_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_bitmap24,
             { "Bitmap24", "zbee_zcl.attr.bitmap24", FT_UINT24, BASE_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_bitmap32,
             { "Bitmap32", "zbee_zcl.attr.bitmap32", FT_UINT32, BASE_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_bitmap40,
             { "Bitmap40", "zbee_zcl.attr.bitmap40", FT_UINT64, BASE_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_bitmap48,
             { "Bitmap48", "zbee_zcl.attr.bitmap48", FT_UINT64, BASE_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_bitmap56,
             { "Bitmap56", "zbee_zcl.attr.bitmap56", FT_UINT64, BASE_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_bitmap64,
             { "Bitmap64", "zbee_zcl.attr.bitmap64", FT_UINT64, BASE_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_uint8,
             { "Uint8",  "zbee_zcl.attr.uint8", FT_UINT8, BASE_DEC_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_uint16,
             { "Uint16", "zbee_zcl.attr.uint16", FT_UINT16, BASE_DEC_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_uint24,
             { "Uint24", "zbee_zcl.attr.uint24", FT_UINT24, BASE_DEC_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_uint32,
             { "Uint32", "zbee_zcl.attr.uint32", FT_UINT32, BASE_DEC_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_uint40,
             { "Uint40", "zbee_zcl.attr.uint40", FT_UINT64, BASE_DEC_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_uint48,
             { "Uint48", "zbee_zcl.attr.uint48", FT_UINT64, BASE_DEC_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_uint56,
             { "Uint56", "zbee_zcl.attr.uint56", FT_UINT64, BASE_DEC_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_uint64,
             { "Uint64", "zbee_zcl.attr.uint64", FT_UINT64, BASE_DEC_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_int8,
             { "Int8",   "zbee_zcl.attr.int8", FT_INT8, BASE_DEC, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_int16,
             { "Int16",  "zbee_zcl.attr.int16", FT_INT16, BASE_DEC, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_int24,
             { "Int24",  "zbee_zcl.attr.int24", FT_INT24, BASE_DEC, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_int32,
             { "Int32",  "zbee_zcl.attr.int32", FT_INT32, BASE_DEC, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_int64,
             { "Int64",  "zbee_zcl.attr.int64", FT_INT64, BASE_DEC, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_float,
             { "Float", "zbee_zcl.attr.float", FT_FLOAT, BASE_NONE, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_double,
             { "Double Float", "zbee_zcl.attr.float", FT_DOUBLE, BASE_NONE, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_bytes,
             { "Bytes",  "zbee_zcl.attr.bytes", FT_BYTES, BASE_NONE, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_minint,
             { "Minimum Interval", "zbee_zcl.attr.minint", FT_UINT16, BASE_DEC, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_maxint,
             { "Maximum Interval", "zbee_zcl.attr.maxint", FT_UINT16, BASE_DEC, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_timeout,
             { "Timeout", "zbee_zcl.attr.timeout", FT_UINT16, BASE_DEC, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_hours,
             { "Hours",  "zbee_zcl.attr.hours", FT_UINT8, BASE_DEC, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_mins,
             { "Minutes", "zbee_zcl.attr.mins", FT_UINT8, BASE_DEC, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_secs,
             { "Seconds", "zbee_zcl.attr.secs", FT_UINT8, BASE_DEC, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_csecs,
             { "Centiseconds", "zbee_zcl.attr.csecs", FT_UINT8, BASE_DEC, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_yy,
             { "Year", "zbee_zcl.attr.yy", FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_mm,
             { "Month", "zbee_zcl.attr.mm", FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_md,
             { "Day of Month", "zbee_zcl.attr.md", FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_wd,
             { "Day of Week", "zbee_zcl.attr.wd", FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_utc,
             { "UTC", "zbee_zcl.attr.utc", FT_ABSOLUTE_TIME, ABSOLUTE_TIME_LOCAL, NULL, 0x0, NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_status,
             { "Status", "zbee_zcl.attr.status", FT_UINT8, BASE_HEX|BASE_EXT_STRING, &zbee_zcl_status_names_ext,
                 0x0, NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_dir,
             { "Direction", "zbee_zcl.attr.dir", FT_UINT8, BASE_HEX, VALS(zbee_zcl_dir_names),
                 0x0, NULL, HFILL }},
 
         { &hf_zbee_zcl_indicator,
             { "Indicator", "zbee_zcl.attr.ind", FT_UINT8, BASE_DEC, NULL,
                 0x0, NULL, HFILL}},
 
         { &hf_zbee_zcl_index,
             { "Indicator", "zbee_zcl.attr.index", FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL}},
 
         { &hf_zbee_zcl_attr_access_ctrl,
             { "Attribute Access Control", "zbee_zcl.attr.access.ctrl", FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL}},
 
         { &hf_zbee_zcl_attr_dis,
             { "Discovery", "zbee_zcl.attr.dis", FT_UINT8, BASE_HEX, VALS(zbee_zcl_dis_names),
                 0x0, NULL, HFILL }},
 
         { &hf_zbee_zcl_cmd_start,
             {"Start Command", "zbee_zcl.cmd.start", FT_UINT8, BASE_HEX, NULL,
                 0x0, NULL, HFILL}},
 
         { &hf_zbee_zcl_cmd_maxnum,
             {"Maximum Number", "zbee_zcl.cmd.maxnum", FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL}},
 
         { &hf_zbee_zcl_attr_cid,
             { "Cluster", "zbee_zcl.attr.cid", FT_UINT16, BASE_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_start,
             { "Start Attribute", "zbee_zcl.attr.start", FT_UINT16, BASE_HEX, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_maxnum,
             { "Maximum Number", "zbee_zcl.attr.maxnum", FT_UINT8, BASE_DEC, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_str,
             { "String", "zbee_zcl.attr.str", FT_UINT_STRING, BASE_NONE, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_ostr,
             { "Octet String",   "zbee_zcl.attr.ostr", FT_UINT_BYTES, SEP_COLON, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_array_elements_type,
             { "Elements Type",   "zbee_zcl.attr.array.elements_type", FT_UINT8, BASE_HEX|BASE_EXT_STRING,
                 &zbee_zcl_data_type_names_ext, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_array_elements_num,
             { "Elements Number",   "zbee_zcl.attr.array.elements_num", FT_UINT16, BASE_DEC, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_set_elements_type,
             { "Elements Type",   "zbee_zcl.attr.set.elements_type", FT_UINT8, BASE_HEX|BASE_EXT_STRING,
                 &zbee_zcl_data_type_names_ext, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_set_elements_num,
             { "Elements Number",   "zbee_zcl.attr.set.elements_num", FT_UINT16, BASE_DEC, NULL, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_bag_elements_type,
             { "Elements Type",   "zbee_zcl.attr.bag.elements_type", FT_UINT8, BASE_HEX|BASE_EXT_STRING,
                 &zbee_zcl_data_type_names_ext, 0x0,
                 NULL, HFILL }},
 
         { &hf_zbee_zcl_attr_bag_elements_num,
             { "Elements Number",   "zbee_zcl.attr.bag.elements_num", FT_UINT16, BASE_DEC, NULL, 0x0,
                 NULL, HFILL }}
     };
 
     /* ZCL subtrees */
     gint *ett[ZBEE_ZCL_NUM_TOTAL_ETT];
 
     ett[0] = &ett_zbee_zcl;
     ett[1] = &ett_zbee_zcl_fcf;
     j = ZBEE_ZCL_NUM_INDIVIDUAL_ETT;
 
     /* initialize attribute subtree types */
     for ( i = 0; i < ZBEE_ZCL_NUM_ATTR_ETT; i++, j++) {
         ett[j] = &ett_zbee_zcl_attr[i];
     }
 
-    for( i = 0; i < ZBEE_ZCL_NUM_IND_FIELD; i++, j++) {
+    for( i = 0; i < ZBEE_ZCL_NUM_SEL_ETT; i++, j++) {
         ett[j] = &ett_zbee_zcl_sel[i];
     }
 
     for ( i = 0; i < ZBEE_ZCL_NUM_ARRAY_ELEM_ETT; i++, j++ ) {
         ett[j] = &ett_zbee_zcl_array_elements[i];
     }
 
     static ei_register_info ei[] = {
         { &ei_cfg_rpt_rsp_short_non_success,
           { "zbee_zcl.cfg_rpt_rsp_short_non_success", PI_PROTOCOL, PI_WARN,
             "Non-success response without full status records", EXPFILL }},
         { &ei_zbee_zero_length_element,
           { "zbee_zcl.zero_length_element", PI_PROTOCOL, PI_ERROR,
             "Element has zero length", EXPFILL }},
     };
 
     expert_module_t *expert_zbee_zcl;
 
     /* Register ZigBee ZCL protocol with Wireshark. */
     proto_zbee_zcl = proto_register_protocol("ZigBee Cluster Library", "ZigBee ZCL", "zbee_zcl");
     proto_register_field_array(proto_zbee_zcl, hf, array_length(hf));
     proto_register_subtree_array(ett, array_length(ett));
 
     expert_zbee_zcl = expert_register_protocol(proto_zbee_zcl);
     expert_register_field_array(expert_zbee_zcl, ei, array_length(ei));
 
     /* Register the ZCL dissector and subdissector list. */
     zbee_zcl_dissector_table = register_dissector_table("zbee.zcl.cluster", "ZigBee ZCL Cluster ID", proto_zbee_zcl, FT_UINT16, BASE_HEX);
     register_dissector(ZBEE_PROTOABBREV_ZCL, dissect_zbee_zcl, proto_zbee_zcl);
 
     register_shutdown_routine(zbee_shutdown);
 } /* proto_register_zbee_zcl */
 
 /**
  *Finds the dissectors used in this module.
  *
 */
diff --git a/epan/dissectors/packet-zbee-zcl.h b/epan/dissectors/packet-zbee-zcl.h
index 31dbb8a0e3..a55f997cfe 100644
--- a/epan/dissectors/packet-zbee-zcl.h
+++ b/epan/dissectors/packet-zbee-zcl.h
@@ -16,170 +16,163 @@
 /*  Structure to contain the ZCL frame information */
 typedef struct{
     gboolean    mfr_spec;
     gboolean    direction;
     gboolean    disable_default_resp;
 
     guint8      frame_type;
     guint16     mfr_code;
     guint8      tran_seqno;
     guint8      cmd_id;
 } zbee_zcl_packet;
 
 /* ZCL Commands */
 #define ZBEE_ZCL_CMD_READ_ATTR                  0x00
 #define ZBEE_ZCL_CMD_READ_ATTR_RESP             0x01
 #define ZBEE_ZCL_CMD_WRITE_ATTR                 0x02
 #define ZBEE_ZCL_CMD_WRITE_ATTR_UNDIVIDED       0x03
 #define ZBEE_ZCL_CMD_WRITE_ATTR_RESP            0x04
 #define ZBEE_ZCL_CMD_WRITE_ATTR_NO_RESP         0x05
 #define ZBEE_ZCL_CMD_CONFIG_REPORT              0x06
 #define ZBEE_ZCL_CMD_CONFIG_REPORT_RESP         0x07
 #define ZBEE_ZCL_CMD_READ_REPORT_CONFIG         0x08
 #define ZBEE_ZCL_CMD_READ_REPORT_CONFIG_RESP    0x09
 #define ZBEE_ZCL_CMD_REPORT_ATTR                0x0a
 #define ZBEE_ZCL_CMD_DEFAULT_RESP               0x0b
 #define ZBEE_ZCL_CMD_DISCOVER_ATTR              0x0c
 #define ZBEE_ZCL_CMD_DISCOVER_ATTR_RESP         0x0d
 #define ZBEE_ZCL_CMD_READ_ATTR_STRUCT           0x0e
 #define ZBEE_ZCL_CMD_WRITE_ATTR_STRUCT          0x0f
 #define ZBEE_ZCL_CMD_WRITE_ATTR_STRUCT_RESP     0x10
 #define ZBEE_ZCL_CMD_DISCOVER_CMDS_REC          0x11
 #define ZBEE_ZCL_CMD_DISCOVER_CMDS_REC_RESP     0x12
 #define ZBEE_ZCL_CMD_DISCOVER_CMDS_GEN          0X13
 #define ZBEE_ZCL_CMD_DISCOVER_CMDS_GEN_RESP     0X14
 #define ZBEE_ZCL_CMD_DISCOVER_ATTR_EXTENDED     0x15
 #define ZBEE_ZCL_CMD_DISCOVER_ATTR_EXTENDED_RESP 0x16
 
 
 /* ZCL Data Types */
 #define ZBEE_ZCL_NO_DATA            0x00
 
 #define ZBEE_ZCL_8_BIT_DATA         0x08
 #define ZBEE_ZCL_16_BIT_DATA        0x09
 #define ZBEE_ZCL_24_BIT_DATA        0x0a
 #define ZBEE_ZCL_32_BIT_DATA        0x0b
 #define ZBEE_ZCL_40_BIT_DATA        0x0c
 #define ZBEE_ZCL_48_BIT_DATA        0x0d
 #define ZBEE_ZCL_56_BIT_DATA        0x0e
 #define ZBEE_ZCL_64_BIT_DATA        0x0f
 
 #define ZBEE_ZCL_BOOLEAN            0x10
 
 #define ZBEE_ZCL_8_BIT_BITMAP       0x18
 #define ZBEE_ZCL_16_BIT_BITMAP      0x19
 #define ZBEE_ZCL_24_BIT_BITMAP      0x1a
 #define ZBEE_ZCL_32_BIT_BITMAP      0x1b
 #define ZBEE_ZCL_40_BIT_BITMAP      0x1c
 #define ZBEE_ZCL_48_BIT_BITMAP      0x1d
 #define ZBEE_ZCL_56_BIT_BITMAP      0x1e
 #define ZBEE_ZCL_64_BIT_BITMAP      0x1f
 
 #define ZBEE_ZCL_8_BIT_UINT         0x20
 #define ZBEE_ZCL_16_BIT_UINT        0x21
 #define ZBEE_ZCL_24_BIT_UINT        0x22
 #define ZBEE_ZCL_32_BIT_UINT        0x23
 #define ZBEE_ZCL_40_BIT_UINT        0x24
 #define ZBEE_ZCL_48_BIT_UINT        0x25
 #define ZBEE_ZCL_56_BIT_UINT        0x26
 #define ZBEE_ZCL_64_BIT_UINT        0x27
 
 #define ZBEE_ZCL_8_BIT_INT          0x28
 #define ZBEE_ZCL_16_BIT_INT         0x29
 #define ZBEE_ZCL_24_BIT_INT         0x2a
 #define ZBEE_ZCL_32_BIT_INT         0x2b
 #define ZBEE_ZCL_40_BIT_INT         0x2c
 #define ZBEE_ZCL_48_BIT_INT         0x2d
 #define ZBEE_ZCL_56_BIT_INT         0x2e
 #define ZBEE_ZCL_64_BIT_INT         0x2f
 
 #define ZBEE_ZCL_8_BIT_ENUM         0x30
 #define ZBEE_ZCL_16_BIT_ENUM        0x31
 
 #define ZBEE_ZCL_SEMI_FLOAT         0x38
 #define ZBEE_ZCL_SINGLE_FLOAT       0x39
 #define ZBEE_ZCL_DOUBLE_FLOAT       0x3a
 
 #define ZBEE_ZCL_OCTET_STRING       0x41
 #define ZBEE_ZCL_CHAR_STRING        0x42
 #define ZBEE_ZCL_LONG_OCTET_STRING  0x43
 #define ZBEE_ZCL_LONG_CHAR_STRING   0x44
 
 #define ZBEE_ZCL_ARRAY              0x48
 #define ZBEE_ZCL_STRUCT             0x4c
 
 #define ZBEE_ZCL_SET                0x50
 #define ZBEE_ZCL_BAG                0x51
 
 #define ZBEE_ZCL_TIME               0xe0
 #define ZBEE_ZCL_DATE               0xe1
 #define ZBEE_ZCL_UTC                0xe2
 
 #define ZBEE_ZCL_CLUSTER_ID         0xe8
 #define ZBEE_ZCL_ATTR_ID            0xe9
 #define ZBEE_ZCL_BACNET_OID         0xea
 
 #define ZBEE_ZCL_IEEE_ADDR          0xf0
 #define ZBEE_ZCL_SECURITY_KEY       0xf1
 
 #define ZBEE_ZCL_UNKNOWN            0xff
 
 /* ZCL Miscellaneous */
-#define ZBEE_ZCL_INVALID_STR_LENGTH             0xff
-#define ZBEE_ZCL_INVALID_LONG_STR_LENGTH        0xffff
-#define ZBEE_ZCL_NUM_INDIVIDUAL_ETT             2
-#define ZBEE_ZCL_NUM_ATTR_ETT                   64
-#define ZBEE_ZCL_NUM_IND_FIELD                  16
-#define ZBEE_ZCL_NUM_ARRAY_ELEM_ETT             16
-#define ZBEE_ZCL_NUM_TOTAL_ETT                  (ZBEE_ZCL_NUM_INDIVIDUAL_ETT + ZBEE_ZCL_NUM_ATTR_ETT + ZBEE_ZCL_NUM_IND_FIELD + ZBEE_ZCL_NUM_ARRAY_ELEM_ETT)
 #define ZBEE_ZCL_DIR_REPORTED                   0
 #define ZBEE_ZCL_DIR_RECEIVED                   1
 /* seconds elapsed from year 1970 to 2000 */
 #define ZBEE_ZCL_NSTIME_UTC_OFFSET              (((3*365 + 366)*7 + 2*365)*24*3600)
 #define IS_ANALOG_SUBTYPE(x)    ( (x & 0xF0) == 0x20 || (x & 0xF8) == 0x38 || (x & 0xF8) == 0xE0 )
 
 /* ZCL Status Enumerations */
 #define ZBEE_ZCL_STAT_SUCCESS                       0x00
 #define ZBEE_ZCL_STAT_FAILURE                       0x01
 
 #define ZBEE_ZCL_STAT_NOT_AUTHORIZED                0x7e
 #define ZBEE_ZCL_STAT_RESERVED_FIELD_NOT_ZERO       0x7f
 #define ZBEE_ZCL_STAT_MALFORMED_CMD                 0x80
 #define ZBEE_ZCL_STAT_UNSUP_CLUSTER_CMD             0x81
 #define ZBEE_ZCL_STAT_UNSUP_GENERAL_CMD             0x82
 #define ZBEE_ZCL_STAT_UNSUP_MFR_CLUSTER_CMD         0x83
 #define ZBEE_ZCL_STAT_UNSUP_MFR_GENERAL_CMD         0x84
 #define ZBEE_ZCL_STAT_INVALID_FIELD                 0x85
 #define ZBEE_ZCL_STAT_UNSUPPORTED_ATTR              0x86
 #define ZBEE_ZCL_STAT_INVALID_VALUE                 0x87
 #define ZBEE_ZCL_STAT_READ_ONLY                     0x88
 #define ZBEE_ZCL_STAT_INSUFFICIENT_SPACE            0x89
 #define ZBEE_ZCL_STAT_DUPLICATE_EXISTS              0x8a
 #define ZBEE_ZCL_STAT_NOT_FOUND                     0x8b
 #define ZBEE_ZCL_STAT_UNREPORTABLE_ATTR             0x8c
 #define ZBEE_ZCL_STAT_INVALID_DATA_TYPE             0x8d
 #define ZBEE_ZCL_STAT_INVALID_SELECTOR              0x8e
 #define ZBEE_ZCL_STAT_WRITE_ONLY                    0x8f
 #define ZBEE_ZCL_STAT_INCONSISTENT_STARTUP_STATE    0x90
 #define ZBEE_ZCL_STAT_DEFINED_OUT_OF_BAND           0x91
 #define ZBEE_ZCL_STAT_INCONSISTENT                  0x92
 #define ZBEE_ZCL_STAT_ACTION_DENIED                 0x93
 #define ZBEE_ZCL_STAT_TIMEOUT                       0x94
 #define ZBEE_ZCL_STAT_OTA_ABORT                     0x95
 #define ZBEE_ZCL_STAT_OTA_INVALID_IMAGE             0x96
 #define ZBEE_ZCL_STAT_OTA_WAIT_FOR_DATA             0x97
 #define ZBEE_ZCL_STAT_OTA_NO_IMAGE_AVAILABLE        0x98
 #define ZBEE_ZCL_STAT_OTA_REQUIRE_MORE_IMAGE        0x99
 #define ZBEE_ZCL_STAT_OTA_NOTIFICATION_PENDING      0x9a
 #define ZBEE_ZCL_STAT_HARDWARE_FAILURE              0xc0
 #define ZBEE_ZCL_STAT_SOFTWARE_FAILURE              0xc1
 #define ZBEE_ZCL_STAT_CALIBRATION_ERROR             0xc2
 #define ZBEE_ZCL_STAT_UNSUPPORTED_CLUSTER           0xc3
 #define ZBEE_ZCL_STAT_LIMIT_REACHED                 0xc4
 
 /* Misc. */
 #define INT24_SIGN_BITS                             0xffff8000
 #define MONTHS_PER_YEAR                             12
 #define YEAR_OFFSET                                 1900
 
 /* ZigBee ZCL Cluster Key */
 #define ZCL_CLUSTER_MFR_KEY(cluster_id,mfr_code)    (((mfr_code)<<16) | (cluster_id))
