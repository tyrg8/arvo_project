commit b585f16786e90fd3b1257f557e24596978d1cf96
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Sat Jun 24 08:10:16 2017 +0000

    libLERC: fix read heap buffer overflow. Credit to OSS Fuzz (run locally)
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@39270 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/frmts/mrf/libLERC/CntZImage.cpp b/gdal/frmts/mrf/libLERC/CntZImage.cpp
index 851dc21cbb..3bdcbc8f89 100644
--- a/gdal/frmts/mrf/libLERC/CntZImage.cpp
+++ b/gdal/frmts/mrf/libLERC/CntZImage.cpp
@@ -1078,126 +1078,129 @@ bool CntZImage::readCntTile(Byte** ppByte, size_t& nRemainingBytesInOut, int i0,
 bool CntZImage::readZTile(Byte** ppByte, size_t& nRemainingBytesInOut,
                           int i0, int i1, int j0, int j1,
                           double maxZErrorInFile, float maxZInImg)
 {
   size_t nRemainingBytes = nRemainingBytesInOut;
   Byte* ptr = *ppByte;
   int numPixel = 0;
 
   if( nRemainingBytes < 1 )
   {
     LERC_BRKPNT();
     return false;
   }
   Byte comprFlag = *ptr++;
   nRemainingBytes -= 1;
   int bits67 = comprFlag >> 6;
   comprFlag &= 63;
 
   if (comprFlag == 2)    // entire zTile is constant 0 (if valid or invalid doesn't matter)
   {
     for (int i = i0; i < i1; i++)
     {
       CntZ* dstPtr = getData() + i * width_ + j0;
       for (int j = j0; j < j1; j++)
       {
         if (dstPtr->cnt > 0)
           dstPtr->z = 0;
         dstPtr++;
       }
     }
 
     *ppByte = ptr;
     nRemainingBytesInOut = nRemainingBytes;
     return true;
   }
 
   if (comprFlag > 3)
     return false;
 
   if (comprFlag == 0)
   {
     // read z's as flt arr uncompressed
     const float* srcPtr = (const float*)ptr;
 
     for (int i = i0; i < i1; i++)
     {
       CntZ* dstPtr = getData() + i * width_ + j0;
       for (int j = j0; j < j1; j++)
       {
         if (dstPtr->cnt > 0)
         {
           if( nRemainingBytes < sizeof(float) )
           {
             LERC_BRKPNT();
             return false;
           }
           dstPtr->z = *srcPtr++;
           nRemainingBytes -= sizeof(float);
           SWAP_4(dstPtr->z);
           numPixel++;
         }
         dstPtr++;
       }
     }
 
     ptr += numPixel * sizeof(float);
   }
   else
   {
     // read z's as int arr bit stuffed
     int n = (bits67 == 0) ? 4 : 3 - bits67;
     float offset = 0;
     if (!readFlt(&ptr, nRemainingBytes, offset, n))
     {
       LERC_BRKPNT();
       return false;
     }
 
     if (comprFlag == 3)
     {
       for (int i = i0; i < i1; i++)
       {
         CntZ* dstPtr = getData() + i * width_ + j0;
         for (int j = j0; j < j1; j++)
         {
           if (dstPtr->cnt > 0)
             dstPtr->z = offset;
           dstPtr++;
         }
       }
     }
     else
     {
       vector<unsigned int>& dataVec = m_tmpDataVec;
       BitStuffer bitStuffer;
       if (!bitStuffer.read(&ptr, nRemainingBytes, dataVec))
       {
         LERC_BRKPNT();
         return false;
       }
 
       double invScale = 2 * maxZErrorInFile;
-      unsigned int* srcPtr = &dataVec[0];
+      size_t nDataVecIdx = 0;
 
       for (int i = i0; i < i1; i++)
       {
         CntZ* dstPtr = getData() + i * width_ + j0;
         for (int j = j0; j < j1; j++)
         {
           if (dstPtr->cnt > 0)
           {
-            float z = (float)(offset + *srcPtr++ * invScale);
+            if( nDataVecIdx == dataVec.size() )
+              return false;
+            float z = (float)(offset + dataVec[nDataVecIdx] * invScale);
+            nDataVecIdx ++;
             dstPtr->z = min(z, maxZInImg);    // make sure we stay in the orig range
           }
           dstPtr++;
         }
       }
     }
   }
 
   *ppByte = ptr;
   nRemainingBytesInOut = nRemainingBytes;
   return true;
 }
 
 // -------------------------------------------------------------------------- ;
