changeset:   16412:b2b75f418d41
user:        Bob Friesenhahn <bfriesen@GraphicsMagick.org>
date:        Mon Dec 21 19:41:29 2020 -0600
summary:     Fixes for issues noted while testing under reduced memory limits.

diff -r f226cbdadb83 -r b2b75f418d41 ChangeLog
--- a/ChangeLog	Mon Dec 21 08:24:40 2020 -0600
+++ b/ChangeLog	Mon Dec 21 19:41:29 2020 -0600
@@ -1,5 +1,35 @@
 2020-12-21  Bob Friesenhahn  <bfriesen@simple.dallas.tx.us>
 
+	* coders/jp2.c (BlobWrite): Update Jasper stream OPs callback
+	function signatures to exactly match latest jas_stream_ops_t
+	definition.  This avoids an annoying warning when using Jasper
+	2.0.12 but now causes annoying warnings when using 1.900.1.
+
+	* magick/decorate.c (FrameImage): Skip attempting to render top or
+	bottom of ornamental border if its height is zero.
+
+	* magick/image.c (CloneImage): Set image signature right away in
+	case it needs to be destroyed while it is being constructed.
+
+	* wand/drawtest.c (main): MagickGetFilename() allocates a new
+	string so make sure to free it.
+
+	* tests/constitute.c (main): Destroy ExceptionInfo to avoid memory
+	leak if an exception was thrown.
+
+	* magick/effect.c (EdgeImage): Fix null pointer dereference if
+	edge image failed to be created.
+
+	* magick/compress.c (HuffmanEncode2Image): Fix error handling
+	issues.
+
+	* magick/command.c (CompareImageCommand): Fix memory leaks when an
+	input image failed to be read.
+	(CompositeImageCommand): Fix memory leaks when an input image
+	failed to be read.
+
+	* coders/fax.c (WriteFAXImage): Fix error handling.
+
 	* coders/mpc.c (ReadMPCImage): Use correct deallocator for page
 	geometry.  Fixes oss-fuzz 28853 "Heap-buffer-overflow READ {*} -
 	_MagickReallocateResourceLimitedMemory".
diff -r f226cbdadb83 -r b2b75f418d41 coders/fax.c
--- a/coders/fax.c	Mon Dec 21 08:24:40 2020 -0600
+++ b/coders/fax.c	Mon Dec 21 19:41:29 2020 -0600
@@ -273,8 +273,8 @@
 %
 %  A description of each parameter follows.
 %
-%    o status: Method WriteFAXImage return True if the image is written.
-%      False is returned is there is a memory shortage or if the image file
+%    o status: Method WriteFAXImage return MagickPass if the image is written.
+%      MagickFail is returned is there is a memory shortage or if the image file
 %      fails to write.
 %
 %    o image_info: Specifies a pointer to a ImageInfo structure.
@@ -283,12 +283,12 @@
 %
 %
 */
-static unsigned int WriteFAXImage(const ImageInfo *image_info,Image *image)
+static MagickPassFail WriteFAXImage(const ImageInfo *image_info,Image *image)
 {
   ImageInfo
     *clone_info;
 
-  unsigned int
+  MagickPassFail
     status;
 
   unsigned long
@@ -305,9 +305,9 @@
   assert(image != (Image *) NULL);
   assert(image->signature == MagickSignature);
   status=OpenBlob(image_info,image,WriteBinaryBlobMode,&image->exception);
+  if (status == MagickFail)
+    ThrowWriterException(FileOpenError,UnableToOpenFile,image);
   image_list_length=GetImageListLength(image);
-  if (status == False)
-    ThrowWriterException(FileOpenError,UnableToOpenFile,image);
   clone_info=CloneImageInfo(image_info);
   (void) strcpy(clone_info->magick,"FAX");
   scene=0;
@@ -316,15 +316,19 @@
     /*
       Convert MIFF to monochrome.
     */
-    (void) TransformColorspace(image,RGBColorspace);
-    status=HuffmanEncodeImage(clone_info,image);
+    status &= TransformColorspace(image,RGBColorspace);
+    if (status != MagickPass)
+      break;
+    status &= HuffmanEncodeImage(clone_info,image);
+    if (status != MagickPass)
+      break;
     if (image->next == (Image *) NULL)
       break;
     image=SyncNextImageInList(image);
-    status=MagickMonitorFormatted(scene++,image_list_length,
-                                  &image->exception,SaveImagesText,
-                                  image->filename);
-    if (status == False)
+    status &= MagickMonitorFormatted(scene++,image_list_length,
+                                     &image->exception,SaveImagesText,
+                                     image->filename);
+    if (status != MagickPass)
       break;
   } while (clone_info->adjoin);
   DestroyImageInfo(clone_info);
diff -r f226cbdadb83 -r b2b75f418d41 coders/jp2.c
--- a/coders/jp2.c	Mon Dec 21 08:24:40 2020 -0600
+++ b/coders/jp2.c	Mon Dec 21 19:41:29 2020 -0600
@@ -276,7 +276,7 @@
     *image;
 } StreamManager;
 
-static int BlobRead(jas_stream_obj_t *object,char *buffer,const int length)
+static int BlobRead(jas_stream_obj_t *object,char *buffer,unsigned length)
 {
   size_t
     count;
@@ -288,7 +288,7 @@
   return ((int) count);
 }
 
-static int BlobWrite(jas_stream_obj_t *object,char *buffer,const int length)
+static int BlobWrite(jas_stream_obj_t *object,const char *buffer,unsigned length)
 {
   size_t
     count;
diff -r f226cbdadb83 -r b2b75f418d41 common.shi.in
--- a/common.shi.in	Mon Dec 21 08:24:40 2020 -0600
+++ b/common.shi.in	Mon Dec 21 19:41:29 2020 -0600
@@ -38,6 +38,10 @@
 if test -z "$MAGICK_LIMIT_DISK" ; then
     export MAGICK_LIMIT_DISK=0
 fi
+# Enable debug traces for exceptions
+if test -z "MAGICK_DEBUG" ; then
+    export MAGICK_DEBUG=exception
+fi
 printf "Resource Limits: MAGICK_LIMIT_MEMORY=%s MAGICK_LIMIT_WIDTH=%s MAGICK_LIMIT_HEIGHT=%s MAGICK_LIMIT_DISK=%s\n\n" "$MAGICK_LIMIT_MEMORY" "$MAGICK_LIMIT_WIDTH" "$MAGICK_LIMIT_HEIGHT" "$MAGICK_LIMIT_DISK"
 
 set +a
diff -r f226cbdadb83 -r b2b75f418d41 magick/command.c
--- a/magick/command.c	Mon Dec 21 08:24:40 2020 -0600
+++ b/magick/command.c	Mon Dec 21 19:41:29 2020 -0600
@@ -2263,21 +2263,15 @@
 */
 #define ThrowCompareException(code,reason,description) \
 { \
-  DestroyImageList(compare_image); \
-  DestroyImageList(difference_image); \
-  DestroyImageList(reference_image); \
+  status=MagickFail; \
   ThrowException(exception,code,reason,description); \
-  LiberateArgumentList(argc,argv); \
-  return(MagickFail); \
+  goto compare_cleanup_and_return; \
 }
 #define ThrowCompareException3(code,reason,description) \
 { \
-  DestroyImageList(compare_image); \
-  DestroyImageList(difference_image); \
-  DestroyImageList(reference_image); \
+  status=MagickFail; \
   ThrowException3(exception,code,reason,description); \
-  LiberateArgumentList(argc,argv); \
-  return(MagickFail);                        \
+  goto compare_cleanup_and_return; \
 }
 MagickExport MagickPassFail
 CompareImageCommand(ImageInfo *image_info,
@@ -2754,13 +2748,19 @@
   if (compare_image == (Image *) NULL)
     {
       if (exception->severity == UndefinedException)
-        ThrowCompareException(OptionError,RequestDidNotReturnAnImage,
-          (char *) NULL);
-      return(MagickFail);
+        ThrowException(exception,OptionError,RequestDidNotReturnAnImage,(char *) NULL);
+    }
+  if (reference_image == (Image *) NULL)
+    {
+      if (exception->severity == UndefinedException)
+        ThrowException(exception,OptionError,MissingAnImageFilename,(char *) NULL);
     }
   if ((reference_image == (Image *) NULL) ||
       (compare_image == (Image *) NULL))
-    ThrowCompareException(OptionError,MissingAnImageFilename,(char *) NULL);
+    {
+      status=MagickFail;
+      goto compare_cleanup_and_return;
+    }
 
   /*
     Apply any user settings to images prior to compare.
@@ -2866,6 +2866,8 @@
         }
     }
 
+ compare_cleanup_and_return:
+
   DestroyImageList(difference_image);
   DestroyImageList(reference_image);
   DestroyImageList(compare_image);
@@ -3116,23 +3118,15 @@
 #define NotInitialized  (unsigned int) (~0)
 #define ThrowCompositeException(code,reason,description) \
 { \
-  LiberateCompositeOptions(&option_info); \
-  DestroyImageList(image); \
-  DestroyImageList(composite_image); \
-  DestroyImageList(mask_image); \
+  status=MagickFail; \
   ThrowException(exception,code,reason,description); \
-  LiberateArgumentList(argc,argv); \
-  return(MagickFail); \
+  goto composite_cleanup_and_return; \
 }
 #define ThrowCompositeException3(code,reason,description) \
 { \
-  LiberateCompositeOptions(&option_info); \
-  DestroyImageList(image); \
-  DestroyImageList(composite_image); \
-  DestroyImageList(mask_image); \
+  status=MagickFail; \
   ThrowException3(exception,code,reason,description); \
-  LiberateArgumentList(argc,argv); \
-  return(MagickFail); \
+  goto composite_cleanup_and_return; \
 }
 MagickExport MagickPassFail CompositeImageCommand(ImageInfo *image_info,
   int argc,char **argv,char **metadata,ExceptionInfo *exception)
@@ -4095,9 +4089,9 @@
   if (image == (Image *) NULL)
     {
       if (exception->severity == UndefinedException)
-        ThrowCompositeException(OptionError,RequestDidNotReturnAnImage,
-          (char *) NULL);
-      return(MagickFail);
+        ThrowException(exception,OptionError,RequestDidNotReturnAnImage,(char *) NULL);
+      status=MagickFail;
+      goto composite_cleanup_and_return;
     }
   if (i != (argc-1))
     ThrowCompositeException(OptionError,MissingAnImageFilename,(char *) NULL);
@@ -4122,6 +4116,9 @@
       (void) ConcatenateString(&(*metadata),"\n");
       MagickFreeMemory(text);
     }
+
+  composite_cleanup_and_return:
+
   LiberateCompositeOptions(&option_info);
   DestroyImageList(composite_image);
   DestroyImageList(mask_image);
diff -r f226cbdadb83 -r b2b75f418d41 magick/compress.c
--- a/magick/compress.c	Mon Dec 21 08:24:40 2020 -0600
+++ b/magick/compress.c	Mon Dec 21 19:41:29 2020 -0600
@@ -700,7 +700,7 @@
     }  \
 }
 MagickExport MagickPassFail HuffmanEncode2Image(const ImageInfo *image_info,
-  Image *image, WriteByteHook write_byte, void *info)
+                                                Image *image, WriteByteHook write_byte, void *info)
 {
   const HuffmanTable
     *entry;
@@ -765,14 +765,19 @@
   scanline=MagickAllocateMemory(unsigned char *,(size_t) width+1);
   if (scanline == (unsigned char *) NULL)
     ThrowBinaryException(ResourceLimitError,MemoryAllocationFailed,
-      (char *) NULL);
+                         (char *) NULL);
   huffman_image=CloneImage(image,0,0,True,&image->exception);
   if (huffman_image == (Image *) NULL)
     {
       MagickFreeMemory(scanline);
       return(MagickFail);
     }
-  status &= SetImageType(huffman_image,BilevelType);
+  if (SetImageType(huffman_image,BilevelType) != MagickPass)
+    {
+      CopyException(&image->exception,&huffman_image->exception);
+      MagickFreeMemory(scanline);
+      return(MagickFail);
+    }
   byte=0;
   bit=0x80;
   if (is_fax == True)
@@ -790,103 +795,107 @@
   polarity=(PixelIntensity(&huffman_image->colormap[0]) < (MaxRGB/2));
   if (huffman_image->colors == 2)
     polarity=(PixelIntensityToQuantum(&huffman_image->colormap[0]) <
-      PixelIntensityToQuantum(&huffman_image->colormap[1]) ? 0x00 : 0x01);
+              PixelIntensityToQuantum(&huffman_image->colormap[1]) ? 0x00 : 0x01);
   q=scanline;
   for (i=0; i < width; i++) /* was: for (i=(long) width; i > 0; i--) */
     *q++=(unsigned char) polarity;
   q=scanline;
   for (y=0; y < huffman_image->rows; y++)
-  {
-    p=AcquireImagePixels(huffman_image,0,y,huffman_image->columns,1,
-      &huffman_image->exception);
-    if (p == (const PixelPacket *) NULL)
-      {
-        status=MagickFail;
-        break;
-      }
-    indexes=AccessImmutableIndexes(huffman_image);
-    for (x=0; x < huffman_image->columns; x++)
     {
-      *q=(unsigned char) (indexes[x] == polarity ? !polarity : polarity);
-      q++;
-    }
-    /*
-      Huffman encode scanline.
-    */
-    q=scanline;
-    for (n=(long) width; n > 0; )
-    {
+      p=AcquireImagePixels(huffman_image,0,y,huffman_image->columns,1,
+                           &huffman_image->exception);
+      indexes=AccessImmutableIndexes(huffman_image);
+      if ((p == (const PixelPacket *) NULL) ||
+          (indexes == (const IndexPacket *) NULL))
+        {
+          status=MagickFail;
+          break;
+        }
+      for (x=0; x < huffman_image->columns; x++)
+        {
+          *q=(unsigned char) (indexes[x] == polarity ? !polarity : polarity);
+          q++;
+        }
       /*
-        Output white run.
+        Huffman encode scanline.
       */
-      for (runlength=0; ((n > 0) && (*q == polarity)); n--)
-      {
-        q++;
-        runlength++;
-      }
-      if (runlength >= 64)
-        {
-          if (runlength < 1792)
-            entry=MWTable+(((size_t) runlength/64)-1);
-          else
-            entry=EXTable+(Min(runlength,2560)-1792)/64;
-          runlength-=entry->count;
-          HuffmanOutputCode(entry);
-        }
-      entry=TWTable+Min(runlength,63);
-      HuffmanOutputCode(entry);
-      if (n != 0)
+      q=scanline;
+      for (n=(long) width; n > 0; )
         {
           /*
-            Output black run.
+            Output white run.
           */
-          for (runlength=0; ((*q != polarity) && (n > 0)); n--)
-          {
-            q++;
-            runlength++;
-          }
+          for (runlength=0; ((n > 0) && (*q == polarity)); n--)
+            {
+              q++;
+              runlength++;
+            }
           if (runlength >= 64)
             {
-              entry=MBTable+(((size_t) runlength/64)-1);
-              if (runlength >= 1792)
+              if (runlength < 1792)
+                entry=MWTable+(((size_t) runlength/64)-1);
+              else
                 entry=EXTable+(Min(runlength,2560)-1792)/64;
               runlength-=entry->count;
               HuffmanOutputCode(entry);
             }
-          entry=TBTable+Min(runlength,63);
+          entry=TWTable+Min(runlength,63);
           HuffmanOutputCode(entry);
+          if (n != 0)
+            {
+              /*
+                Output black run.
+              */
+              for (runlength=0; ((*q != polarity) && (n > 0)); n--)
+                {
+                  q++;
+                  runlength++;
+                }
+              if (runlength >= 64)
+                {
+                  entry=MBTable+(((size_t) runlength/64)-1);
+                  if (runlength >= 1792)
+                    entry=EXTable+(Min(runlength,2560)-1792)/64;
+                  runlength-=entry->count;
+                  HuffmanOutputCode(entry);
+                }
+              entry=TBTable+Min(runlength,63);
+              HuffmanOutputCode(entry);
+            }
+        } /* for (n=... */
+      /*
+        End of line.
+      */
+      for (k=0; k < 11; k++)
+        OutputBit(0);
+      OutputBit(1);
+      q=scanline;
+      if (huffman_image->previous == (Image *) NULL)
+        if (QuantumTick(y,huffman_image->rows))
+          if (!MagickMonitorFormatted(y,huffman_image->rows,&image->exception,
+                                      "[%s] Huffman encode image...",image->filename))
+            {
+              status=MagickFail;
+              break;
+            }
+    } /* for (y=... */
+  if (status == MagickPass)
+    {
+      /*
+        End of page.
+      */
+      for (i=0; i < 6; i++)
+        {
+          for (k=0; k < 11; k++)
+            OutputBit(0);
+          OutputBit(1);
         }
+      /*
+        Flush bits.
+      */
+      if (bit != 0x80U)
+        (void) (*write_byte)(image,(magick_uint8_t)byte,info);
     }
-    /*
-      End of line.
-    */
-    for (k=0; k < 11; k++)
-      OutputBit(0);
-    OutputBit(1);
-    q=scanline;
-    if (huffman_image->previous == (Image *) NULL)
-      if (QuantumTick(y,huffman_image->rows))
-        if (!MagickMonitorFormatted(y,huffman_image->rows,&image->exception,
-                                    "[%s] Huffman encode image...",image->filename))
-          {
-            status=MagickFail;
-            break;
-          }
-  }
-  /*
-    End of page.
-  */
-  for (i=0; i < 6; i++)
-  {
-    for (k=0; k < 11; k++)
-      OutputBit(0);
-    OutputBit(1);
-  }
-  /*
-    Flush bits.
-  */
-  if (bit != 0x80U)
-    (void) (*write_byte)(image,(magick_uint8_t)byte,info);
   DestroyImage(huffman_image);
   MagickFreeMemory(scanline);
   return(status);
diff -r f226cbdadb83 -r b2b75f418d41 magick/decorate.c
--- a/magick/decorate.c	Mon Dec 21 08:24:40 2020 -0600
+++ b/magick/decorate.c	Mon Dec 21 19:41:29 2020 -0600
@@ -246,51 +246,54 @@
   */
   height=(long) (frame_info->outer_bevel+(frame_info->y-bevel_width)+
                  frame_info->inner_bevel);
-  q=SetImagePixelsEx(frame_image,0,0,frame_image->columns,height,exception);
-  if (q != (PixelPacket *) NULL)
+  if (height > 0)
     {
-      for (y=0; y < frame_info->outer_bevel; y++)
+      q=SetImagePixelsEx(frame_image,0,0,frame_image->columns,height,exception);
+      if (q != (PixelPacket *) NULL)
         {
-          for (x=0; x < (long) (frame_image->columns-y); x++)
-            if (x < y)
-              *q++=highlight;
-            else
-              *q++=accentuate;
-          for ( ; x < (long) frame_image->columns; x++)
-            *q++=shadow;
-        }
-      for (y=0; y < (long) (frame_info->y-bevel_width); y++)
-        {
-          for (x=0; x < frame_info->outer_bevel; x++)
-            *q++=highlight;
-          width=(long) (frame_image->columns-2*frame_info->outer_bevel);
-          for (x=0; x < (long) width; x++)
-            *q++=matte;
-          for (x=0; x < frame_info->outer_bevel; x++)
-            *q++=shadow;
+          for (y=0; y < frame_info->outer_bevel; y++)
+            {
+              for (x=0; x < (long) (frame_image->columns-y); x++)
+                if (x < y)
+                  *q++=highlight;
+                else
+                  *q++=accentuate;
+              for ( ; x < (long) frame_image->columns; x++)
+                *q++=shadow;
+            }
+          for (y=0; y < (long) (frame_info->y-bevel_width); y++)
+            {
+              for (x=0; x < frame_info->outer_bevel; x++)
+                *q++=highlight;
+              width=(long) (frame_image->columns-2*frame_info->outer_bevel);
+              for (x=0; x < (long) width; x++)
+                *q++=matte;
+              for (x=0; x < frame_info->outer_bevel; x++)
+                *q++=shadow;
+            }
+          for (y=0; y < frame_info->inner_bevel; y++)
+            {
+              for (x=0; x < frame_info->outer_bevel; x++)
+                *q++=highlight;
+              for (x=0; x < (long) (frame_info->x-bevel_width); x++)
+                *q++=matte;
+              width=(long) (image->columns+(frame_info->inner_bevel << 1)-y);
+              for (x=0; x < width; x++)
+                if (x < y)
+                  *q++=shadow;
+                else
+                  *q++=trough;
+              for ( ; x < (long) (image->columns+(frame_info->inner_bevel << 1)); x++)
+                *q++=highlight;
+              width=(long)
+                (frame_info->width-frame_info->x-image->columns-bevel_width);
+              for (x=0; x < width; x++)
+                *q++=matte;
+              for (x=0; x < frame_info->outer_bevel; x++)
+                *q++=shadow;
+            }
+          (void) SyncImagePixelsEx(frame_image,exception);
         }
-      for (y=0; y < frame_info->inner_bevel; y++)
-        {
-          for (x=0; x < frame_info->outer_bevel; x++)
-            *q++=highlight;
-          for (x=0; x < (long) (frame_info->x-bevel_width); x++)
-            *q++=matte;
-          width=(long) (image->columns+(frame_info->inner_bevel << 1)-y);
-          for (x=0; x < width; x++)
-            if (x < y)
-              *q++=shadow;
-            else
-              *q++=trough;
-          for ( ; x < (long) (image->columns+(frame_info->inner_bevel << 1)); x++)
-            *q++=highlight;
-          width=(long)
-            (frame_info->width-frame_info->x-image->columns-bevel_width);
-          for (x=0; x < width; x++)
-            *q++=matte;
-          for (x=0; x < frame_info->outer_bevel; x++)
-            *q++=shadow;
-        }
-      (void) SyncImagePixelsEx(frame_image,exception);
     }
   /*
     Draw sides of ornamental border.
@@ -380,50 +383,53 @@
   */
   height=(long) (frame_info->inner_bevel+frame_info->height-frame_info->y-
                  image->rows-bevel_width+frame_info->outer_bevel);
-  q=SetImagePixelsEx(frame_image,0,(long) (frame_image->rows-height),
-                     frame_image->columns,height,exception);
-  if (q == (PixelPacket *) NULL)
-    return(frame_image);
-  for (y=frame_info->inner_bevel-1; y >= 0; y--)
+  if (height > 0)
     {
-      for (x=0; x < frame_info->outer_bevel; x++)
-        *q++=highlight;
-      for (x=0; x < (long) (frame_info->x-bevel_width); x++)
-        *q++=matte;
-      for (x=0; x < y; x++)
-        *q++=shadow;
-      for ( ; x < (long) (image->columns+(frame_info->inner_bevel << 1)); x++)
-        if (x >= (long) (image->columns+(frame_info->inner_bevel << 1)-y))
-          *q++=highlight;
-        else
-          *q++=accentuate;
-      width=(long) (frame_info->width-frame_info->x-image->columns-bevel_width);
-      for (x=0; x < (long) width; x++)
-        *q++=matte;
-      for (x=0; x < frame_info->outer_bevel; x++)
-        *q++=shadow;
+      q=SetImagePixelsEx(frame_image,0,(long) (frame_image->rows-height),
+                         frame_image->columns,height,exception);
+      if (q == (PixelPacket *) NULL)
+        return(frame_image);
+      for (y=frame_info->inner_bevel-1; y >= 0; y--)
+        {
+          for (x=0; x < frame_info->outer_bevel; x++)
+            *q++=highlight;
+          for (x=0; x < (long) (frame_info->x-bevel_width); x++)
+            *q++=matte;
+          for (x=0; x < y; x++)
+            *q++=shadow;
+          for ( ; x < (long) (image->columns+(frame_info->inner_bevel << 1)); x++)
+            if (x >= (long) (image->columns+(frame_info->inner_bevel << 1)-y))
+              *q++=highlight;
+            else
+              *q++=accentuate;
+          width=(long) (frame_info->width-frame_info->x-image->columns-bevel_width);
+          for (x=0; x < (long) width; x++)
+            *q++=matte;
+          for (x=0; x < frame_info->outer_bevel; x++)
+            *q++=shadow;
+        }
+      height=(long) (frame_info->height-frame_info->y-image->rows-bevel_width);
+      for (y=0; y < height; y++)
+        {
+          for (x=0; x < frame_info->outer_bevel; x++)
+            *q++=highlight;
+          for (x=0; x < (long) (frame_image->columns-2*frame_info->outer_bevel); x++)
+            *q++=matte;
+          for (x=0; x < frame_info->outer_bevel; x++)
+            *q++=shadow;
+        }
+      for (y=frame_info->outer_bevel-1; y >= 0; y--)
+        {
+          for (x=0; x < y; x++)
+            *q++=highlight;
+          for ( ; x < (long) frame_image->columns; x++)
+            if (x >= (long) (frame_image->columns-y))
+              *q++=shadow;
+            else
+              *q++=trough;
+        }
+      (void) SyncImagePixelsEx(frame_image,exception);
     }
-  height=(long) (frame_info->height-frame_info->y-image->rows-bevel_width);
-  for (y=0; y < height; y++)
-    {
-      for (x=0; x < frame_info->outer_bevel; x++)
-        *q++=highlight;
-      for (x=0; x < (long) (frame_image->columns-2*frame_info->outer_bevel); x++)
-        *q++=matte;
-      for (x=0; x < frame_info->outer_bevel; x++)
-        *q++=shadow;
-    }
-  for (y=frame_info->outer_bevel-1; y >= 0; y--)
-    {
-      for (x=0; x < y; x++)
-        *q++=highlight;
-      for ( ; x < (long) frame_image->columns; x++)
-        if (x >= (long) (frame_image->columns-y))
-          *q++=shadow;
-        else
-          *q++=trough;
-    }
-  (void) SyncImagePixelsEx(frame_image,exception);
 
   frame_image->is_grayscale=is_grayscale;
   return(frame_image);
diff -r f226cbdadb83 -r b2b75f418d41 magick/effect.c
--- a/magick/effect.c	Mon Dec 21 08:24:40 2020 -0600
+++ b/magick/effect.c	Mon Dec 21 19:41:29 2020 -0600
@@ -1935,7 +1935,8 @@
   kernel[i/2]=(double) width*width-1.0;
   edge_image=ConvolveImage(image,width,kernel,exception);
   MagickFreeMemory(kernel);
-  edge_image->is_grayscale=image->is_grayscale;
+  if (edge_image != (Image *) NULL)
+    edge_image->is_grayscale=image->is_grayscale;
   return(edge_image);
 }
 
diff -r f226cbdadb83 -r b2b75f418d41 magick/image.c
--- a/magick/image.c	Mon Dec 21 08:24:40 2020 -0600
+++ b/magick/image.c	Mon Dec 21 19:41:29 2020 -0600
@@ -1100,6 +1100,7 @@
     ThrowImageException3(ResourceLimitError,MemoryAllocationFailed,
       UnableToCloneImage);
   (void) memset(clone_image,0,sizeof(Image));
+  clone_image->signature=MagickSignature;
 
   /* allocate and initialize struct for extra Image members */
   ImgExtra = MagickAllocateMemory(ImageExtra *,sizeof(ImageExtra));
@@ -1167,7 +1168,6 @@
   clone_image->endian=image->endian;
   clone_image->gravity=image->gravity;
   clone_image->compose=image->compose;
-  clone_image->signature=MagickSignature;
   (void) CloneImageAttributes(clone_image,image);
   clone_image->scene=image->scene;
   clone_image->dispose=image->dispose;
diff -r f226cbdadb83 -r b2b75f418d41 tests/constitute.c
--- a/tests/constitute.c	Mon Dec 21 08:24:40 2020 -0600
+++ b/tests/constitute.c	Mon Dec 21 19:41:29 2020 -0600
@@ -68,7 +68,7 @@
     {
       char
         *option = argv[arg];
-    
+
       if (*option == '-')
         {
           if (LocaleCompare("debug",option+1) == 0)
@@ -295,7 +295,7 @@
       exit_status = 1;
       goto program_exit;
     }
-  
+
   if ( !IsImagesEqual(original, final) )
     {
       CatchException(&original->exception);
@@ -328,6 +328,7 @@
   if (imageInfo)
     DestroyImageInfo(imageInfo);
   imageInfo = 0;
+  DestroyExceptionInfo( &exception );
 
   DestroyMagick();
 
diff -r f226cbdadb83 -r b2b75f418d41 wand/drawtest.c
--- a/wand/drawtest.c	Mon Dec 21 08:24:40 2020 -0600
+++ b/wand/drawtest.c	Mon Dec 21 19:41:29 2020 -0600
@@ -423,7 +423,9 @@
 
       if ((status = MagickReadImage( canvas, "xc:white" )) == MagickFail)
         {
-          fprintf ( stderr, "Failed to read canvas image %s\n", MagickGetFilename(canvas) );
+          char *canvas_name = MagickGetFilename(canvas);
+          fprintf ( stderr, "Failed to read canvas image %s\n", canvas_name );
+          free(canvas_name);
           ThrowAPIException(canvas);
         }
 
diff -r f226cbdadb83 -r b2b75f418d41 www/Changelog.html
--- a/www/Changelog.html	Mon Dec 21 08:24:40 2020 -0600
+++ b/www/Changelog.html	Mon Dec 21 19:41:29 2020 -0600
@@ -38,6 +38,27 @@
 <p>2020-12-21  Bob Friesenhahn  &lt;<a class="reference external" href="mailto:bfriesen&#37;&#52;&#48;simple&#46;dallas&#46;tx&#46;us">bfriesen<span>&#64;</span>simple<span>&#46;</span>dallas<span>&#46;</span>tx<span>&#46;</span>us</a>&gt;</p>
 <blockquote>
 <ul class="simple">
+<li>coders/jp2.c (BlobWrite): Update Jasper stream OPs callback
+function signatures to exactly match latest jas_stream_ops_t
+definition.  This avoids an annoying warning when using Jasper
+2.0.12 but now causes annoying warnings when using 1.900.1.</li>
+<li>magick/decorate.c (FrameImage): Skip attempting to render top or
+bottom of ornamental border if its height is zero.</li>
+<li>magick/image.c (CloneImage): Set image signature right away in
+case it needs to be destroyed while it is being constructed.</li>
+<li>wand/drawtest.c (main): MagickGetFilename() allocates a new
+string so make sure to free it.</li>
+<li>tests/constitute.c (main): Destroy ExceptionInfo to avoid memory
+leak if an exception was thrown.</li>
+<li>magick/effect.c (EdgeImage): Fix null pointer dereference if
+edge image failed to be created.</li>
+<li>magick/compress.c (HuffmanEncode2Image): Fix error handling
+issues.</li>
+<li>magick/command.c (CompareImageCommand): Fix memory leaks when an
+input image failed to be read.
+(CompositeImageCommand): Fix memory leaks when an input image
+failed to be read.</li>
+<li>coders/fax.c (WriteFAXImage): Fix error handling.</li>
 <li>coders/mpc.c (ReadMPCImage): Use correct deallocator for page
 geometry.  Fixes oss-fuzz 28853 &quot;Heap-buffer-overflow READ {*} -
 _MagickReallocateResourceLimitedMemory&quot;.</li>
diff -r f226cbdadb83 -r b2b75f418d41 www/api/decorate.html
--- a/www/api/decorate.html	Mon Dec 21 08:24:40 2020 -0600
+++ b/www/api/decorate.html	Mon Dec 21 19:41:29 2020 -0600
@@ -3,7 +3,7 @@
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
 <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
-<meta name="generator" content="Docutils 0.15.2: http://docutils.sourceforge.net/" />
+<meta name="generator" content="Docutils 0.13.1: http://docutils.sourceforge.net/" />
 <title>decorate</title>
 <link rel="stylesheet" href="../docutils-api.css" type="text/css" />
 </head>
diff -r f226cbdadb83 -r b2b75f418d41 www/api/effect.html
--- a/www/api/effect.html	Mon Dec 21 08:24:40 2020 -0600
+++ b/www/api/effect.html	Mon Dec 21 19:41:29 2020 -0600
@@ -3,7 +3,7 @@
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
 <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
-<meta name="generator" content="Docutils 0.15.2: http://docutils.sourceforge.net/" />
+<meta name="generator" content="Docutils 0.16: http://docutils.sourceforge.net/" />
 <title>effect</title>
 <link rel="stylesheet" href="../docutils-api.css" type="text/css" />
 </head>
@@ -37,7 +37,7 @@
 <h2 class="subtitle" id="image-effects-methods">Image effects methods</h2>
 
 <div class="contents topic" id="contents">
-<p class="topic-title first">Contents</p>
+<p class="topic-title">Contents</p>
 <ul class="simple">
 <li><a class="reference internal" href="#adaptivethresholdimage" id="id51">AdaptiveThresholdImage</a></li>
 <li><a class="reference internal" href="#addnoiseimage" id="id52">AddNoiseImage</a></li>
diff -r f226cbdadb83 -r b2b75f418d41 www/api/image.html
--- a/www/api/image.html	Mon Dec 21 08:24:40 2020 -0600
+++ b/www/api/image.html	Mon Dec 21 19:41:29 2020 -0600
@@ -3,7 +3,7 @@
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
 <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
-<meta name="generator" content="Docutils 0.16: http://docutils.sourceforge.net/" />
+<meta name="generator" content="Docutils 0.13.1: http://docutils.sourceforge.net/" />
 <title>image</title>
 <link rel="stylesheet" href="../docutils-api.css" type="text/css" />
 </head>
@@ -37,7 +37,7 @@
 <h2 class="subtitle" id="miscellaneous-image-methods">Miscellaneous image methods</h2>
 
 <div class="contents topic" id="contents">
-<p class="topic-title">Contents</p>
+<p class="topic-title first">Contents</p>
 <ul class="simple">
 <li><a class="reference internal" href="#accessdefinition" id="id70">AccessDefinition</a></li>
 <li><a class="reference internal" href="#adddefinition" id="id71">AddDefinition</a></li>

