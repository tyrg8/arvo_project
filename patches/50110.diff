commit e135c1c5e3a6b202f4b29374426bbc9808978045
Merge: 30730e95 ac0d7ccb
Author: Toni <matzeton@googlemail.com>
Date:   Wed Aug 24 11:24:25 2022 +0200

    Merge pull request #1712 from IvanNardi/oss-fuzzer
    
    HTTP, SoftEther, Florensia: fix some memory corruptions

diff --git a/src/lib/protocols/florensia.c b/src/lib/protocols/florensia.c
index 95a6d99d..8617f374 100644
--- a/src/lib/protocols/florensia.c
+++ b/src/lib/protocols/florensia.c
@@ -37,80 +37,81 @@ static void ndpi_florensia_add_connection(struct ndpi_detection_module_struct *n
 void ndpi_search_florensia(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)
 {
   struct ndpi_packet_struct *packet = &ndpi_struct->packet;
 	
   NDPI_LOG_DBG(ndpi_struct, "search florensia\n");
 
   if (packet->tcp != NULL) {
     if (packet->payload_packet_len == 5 && get_l16(packet->payload, 0) == packet->payload_packet_len
 	&& packet->payload[2] == 0x65 && packet->payload[4] == 0xff) {
       if (flow->florensia_stage == 1) {
 	NDPI_LOG_INFO(ndpi_struct, "found florensia\n");
 	ndpi_florensia_add_connection(ndpi_struct, flow);
 	return;
       }
       NDPI_LOG_DBG2(ndpi_struct, "maybe florensia -> stage is set to 1\n");
       flow->florensia_stage = 1;
       return;
     }
     if (packet->payload_packet_len > 8 && get_l16(packet->payload, 0) == packet->payload_packet_len
 	&& get_u_int16_t(packet->payload, 2) == htons(0x0201) && get_u_int32_t(packet->payload, 4) == htonl(0xFFFFFFFF)) {
       NDPI_LOG_DBG2(ndpi_struct, "maybe florensia -> stage is set to 1\n");
       flow->florensia_stage = 1;
       return;
     }
     if (packet->payload_packet_len == 406 && get_l16(packet->payload, 0) == packet->payload_packet_len
 	&& packet->payload[2] == 0x63) {
       NDPI_LOG_DBG2(ndpi_struct, "maybe florensia -> stage is set to 1\n");
       flow->florensia_stage = 1;
       return;
     }
     if (packet->payload_packet_len == 12 && get_l16(packet->payload, 0) == packet->payload_packet_len
 	&& get_u_int16_t(packet->payload, 2) == htons(0x0301)) {
       if (flow->florensia_stage == 1) {
 	NDPI_LOG_INFO(ndpi_struct, "found florensia\n");
 	ndpi_florensia_add_connection(ndpi_struct, flow);
 	return;
       }
       NDPI_LOG_DBG2(ndpi_struct, "maybe florensia -> stage is set to 1\n");
       flow->florensia_stage = 1;
       return;
     }
 
     if (flow->florensia_stage == 1) {
       if (packet->payload_packet_len == 8 && get_l16(packet->payload, 0) == packet->payload_packet_len
 	  && get_u_int16_t(packet->payload, 2) == htons(0x0302) && get_u_int32_t(packet->payload, 4) == htonl(0xFFFFFFFF)) {
 	NDPI_LOG_INFO(ndpi_struct, "found florensia asymmetrically\n");
 	ndpi_florensia_add_connection(ndpi_struct, flow);
 	return;
       }
       if (packet->payload_packet_len == 24 && get_l16(packet->payload, 0) == packet->payload_packet_len
 	  && get_u_int16_t(packet->payload, 2) == htons(0x0202)
 	  && get_u_int32_t(packet->payload, packet->payload_packet_len - 4) == htonl(0xFFFFFFFF)) {
 	NDPI_LOG_INFO(ndpi_struct, "found florensia\n");
 	ndpi_florensia_add_connection(ndpi_struct, flow);
 	return;
       }
-      if (flow->packet_counter < 10 && get_l16(packet->payload, 0) == packet->payload_packet_len) {
+      if (flow->packet_counter < 10 && packet->payload_packet_len >=2 &&
+	  get_l16(packet->payload, 0) == packet->payload_packet_len) {
 	NDPI_LOG_DBG2(ndpi_struct, "maybe florensia\n");
 	return;
       }
     }
   }
 
   if (packet->udp != NULL) {
     if (flow->florensia_stage == 0 && packet->payload_packet_len == 6
 	&& get_u_int16_t(packet->payload, 0) == ntohs(0x0503) && get_u_int32_t(packet->payload, 2) == htonl(0xFFFF0000)) {
       NDPI_LOG_DBG2(ndpi_struct, "maybe florensia -> stage is set to 1\n");
       flow->florensia_stage = 1;
       return;
     }
     if (flow->florensia_stage == 1 && packet->payload_packet_len == 8
 	&& get_u_int16_t(packet->payload, 0) == ntohs(0x0500) && get_u_int16_t(packet->payload, 4) == htons(0x4191)) {
       NDPI_LOG_INFO(ndpi_struct, "found florensia\n");
       ndpi_florensia_add_connection(ndpi_struct, flow);
       return;
     }
   }
 
   NDPI_EXCLUDE_PROTO(ndpi_struct, flow);
 }
diff --git a/src/lib/protocols/http.c b/src/lib/protocols/http.c
index a562aa03..6fe6cab3 100644
--- a/src/lib/protocols/http.c
+++ b/src/lib/protocols/http.c
@@ -639,246 +639,247 @@ static void ndpi_check_http_url(struct ndpi_detection_module_struct *ndpi_struct
 /**
    NOTE
    ndpi_parse_packet_line_info is in ndpi_main.c
 */
 static void check_content_type_and_change_protocol(struct ndpi_detection_module_struct *ndpi_struct,
 						   struct ndpi_flow_struct *flow) {
   struct ndpi_packet_struct *packet = &ndpi_struct->packet;
   int ret;
 
   if(flow->http_detected && (flow->http.response_status_code != 0))
     return;
 
   if((flow->http.url == NULL)
      && (packet->http_url_name.len > 0)
      && (packet->host_line.len > 0)) {
     int len = packet->http_url_name.len + packet->host_line.len + 1;
 
     if(isdigit(packet->host_line.ptr[0])
        && (packet->host_line.len < 21))
       ndpi_check_numeric_ip(ndpi_struct, flow, (char*)packet->host_line.ptr, packet->host_line.len);
 
     flow->http.url = ndpi_malloc(len);
     if(flow->http.url) {
       u_int offset = 0;
 
       if(flow->detected_protocol_stack[0] == NDPI_PROTOCOL_HTTP_CONNECT) {
 	strncpy(flow->http.url, (char*)packet->http_url_name.ptr,
 		packet->http_url_name.len);
 
 	flow->http.url[packet->http_url_name.len] = '\0';
       } else {
 	/* Check if we pass through a proxy (usually there is also the Via: ... header) */
 	if(strncmp((char*)packet->http_url_name.ptr, "http://", 7) != 0)
 	  strncpy(flow->http.url, (char*)packet->host_line.ptr, offset = packet->host_line.len);
 
 	if((packet->host_line.len == packet->http_url_name.len)
 	   && (strncmp((char*)packet->host_line.ptr,
 		       (char*)packet->http_url_name.ptr, packet->http_url_name.len) == 0))
 	  ;
 	else {
 	  strncpy(&flow->http.url[offset], (char*)packet->http_url_name.ptr,
 		  packet->http_url_name.len);
 	  offset += packet->http_url_name.len;
 	}
 
 	flow->http.url[offset] = '\0';
       }
 
       ndpi_check_http_url(ndpi_struct, flow, &flow->http.url[packet->host_line.len]);
     }
 
     flow->http.method = ndpi_http_str2method((const char*)packet->http_method.ptr,
 					     (u_int16_t)packet->http_method.len);
 
     if((flow->http.method == NDPI_HTTP_METHOD_RPC_IN_DATA)
        || (flow->http.method == NDPI_HTTP_METHOD_RPC_OUT_DATA)) {
       ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_RPC, flow->detected_protocol_stack[0], NDPI_CONFIDENCE_DPI);
       check_content_type_and_change_protocol(ndpi_struct, flow);
     }
   }
 
   if(packet->server_line.ptr != NULL && (packet->server_line.len > 7)) {
     if(strncmp((const char *)packet->server_line.ptr, "ntopng ", 7) == 0) {
       ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_NTOP, NDPI_PROTOCOL_HTTP, NDPI_CONFIDENCE_DPI);
       NDPI_CLR_BIT(flow->risk, NDPI_KNOWN_PROTOCOL_ON_NON_STANDARD_PORT);
     }
   }
 
   if(packet->user_agent_line.ptr != NULL && packet->user_agent_line.len != 0) {
     ret = http_process_user_agent(ndpi_struct, flow, packet->user_agent_line.ptr, packet->user_agent_line.len);
     /* TODO: Is it correct to avoid setting ua, host_name,... if we have a (Netflix) subclassification? */
     if(ret != 0)
       return;
   }
 
   /* check for host line */
   if(packet->host_line.ptr != NULL) {
     u_int len;
 
     NDPI_LOG_DBG2(ndpi_struct, "HOST line found %.*s\n",
 		  packet->host_line.len, packet->host_line.ptr);
 
     /* Copy result for nDPI apps */
     ndpi_hostname_sni_set(flow, packet->host_line.ptr, packet->host_line.len);
 
     if(strlen(flow->host_server_name) > 0) {
       ndpi_check_dga_name(ndpi_struct, flow, flow->host_server_name, 1);
 
       if(ndpi_is_valid_hostname(flow->host_server_name,
 				strlen(flow->host_server_name)) == 0) {
 	char str[128];
 
 	snprintf(str, sizeof(str), "Invalid host %s", flow->host_server_name);
 	ndpi_set_risk(ndpi_struct, flow, NDPI_INVALID_CHARACTERS, str);
 
 	/* This looks like an attack */
 	ndpi_set_risk(ndpi_struct, flow, NDPI_POSSIBLE_EXPLOIT, NULL);
       }
     }
 
     if(packet->forwarded_line.ptr) {
       if(flow->http.nat_ip == NULL) {
         len = packet->forwarded_line.len;
         flow->http.nat_ip = ndpi_malloc(len + 1);
         if(flow->http.nat_ip != NULL) {
           strncpy(flow->http.nat_ip, (char*)packet->forwarded_line.ptr, len);
           flow->http.nat_ip[len] = '\0';
         }
       }
     }
 
     ndpi_http_parse_subprotocol(ndpi_struct, flow);
 
     /**
        check result of host subprotocol detection
 
        if "detected" in flow == 0 then "detected" = "guess"
        else "guess" = "detected"
     **/
     if(flow->detected_protocol_stack[1] == NDPI_PROTOCOL_UNKNOWN) {
       /* Avoid putting as subprotocol a "core" protocol such as SSL or DNS */
       if(ndpi_struct->proto_defaults[flow->guessed_protocol_id].subprotocol_count == 0) {
 	if(flow->detected_protocol_stack[0] == NDPI_PROTOCOL_UNKNOWN &&
 	   flow->guessed_host_protocol_id != NDPI_PROTOCOL_UNKNOWN) {
 	  flow->detected_protocol_stack[0] = flow->guessed_host_protocol_id;
 	  flow->detected_protocol_stack[1] = flow->guessed_protocol_id;
         }
       }
     }
     else {
       if(flow->detected_protocol_stack[1] != flow->guessed_protocol_id)
 	flow->guessed_protocol_id = flow->detected_protocol_stack[1];
       if(flow->detected_protocol_stack[0] != flow->guessed_host_protocol_id)
 	flow->guessed_host_protocol_id = flow->detected_protocol_stack[0];
     }
 
     if((flow->detected_protocol_stack[0] == NDPI_PROTOCOL_UNKNOWN)
        && (flow->http_detected)
        && (packet->http_origin.len > 0)) {
       ndpi_protocol_match_result ret_match;
 
       ndpi_match_host_subprotocol(ndpi_struct, flow,
 				  (char *)packet->http_origin.ptr,
 				  packet->http_origin.len,
 				  &ret_match,
 				  NDPI_PROTOCOL_HTTP);
     }
 
     if(flow->detected_protocol_stack[1] != NDPI_PROTOCOL_UNKNOWN) {
       if((flow->detected_protocol_stack[1] != NDPI_PROTOCOL_HTTP)
 	 && (flow->detected_protocol_stack[1] != NDPI_PROTOCOL_HTTP_CONNECT)
 	 && (flow->detected_protocol_stack[1] != NDPI_PROTOCOL_HTTP_PROXY)) {
 	NDPI_LOG_INFO(ndpi_struct, "found HTTP/%s\n",
 		      ndpi_get_proto_name(ndpi_struct, flow->detected_protocol_stack[0]));
 	ndpi_int_http_add_connection(ndpi_struct, flow, flow->detected_protocol_stack[0], NDPI_PROTOCOL_CATEGORY_WEB);
 	return; /* We have identified a sub-protocol so we're done */
       }
     }
   }
 
   if(flow->guessed_protocol_id == NDPI_PROTOCOL_UNKNOWN)
     flow->guessed_protocol_id = NDPI_PROTOCOL_HTTP;
 
   /* check for accept line */
   if(packet->accept_line.ptr != NULL) {
     NDPI_LOG_DBG2(ndpi_struct, "Accept line found %.*s\n",
 		  packet->accept_line.len, packet->accept_line.ptr);
   }
 
   /* check for authorization line */
   if(packet->authorization_line.ptr != NULL) {
     NDPI_LOG_DBG2(ndpi_struct, "Authorization line found %.*s\n",
 		  packet->authorization_line.len, packet->authorization_line.ptr);
 
     if(ndpi_strncasestr((const char*)packet->authorization_line.ptr,
 			"Basic", packet->authorization_line.len)
        || ndpi_strncasestr((const char*)packet->authorization_line.ptr,
 			   "Digest", packet->authorization_line.len)) {
       ndpi_set_risk(ndpi_struct, flow, NDPI_CLEAR_TEXT_CREDENTIALS,
 		    "Found credentials in HTTP Auth Line");
     }
   }
 
   if(packet->content_line.ptr != NULL && packet->content_line.len != 0) {
     NDPI_LOG_DBG2(ndpi_struct, "Content Type line found %.*s\n",
 		  packet->content_line.len, packet->content_line.ptr);
 
     if(flow->http.response_status_code == 0) {
       /* Request */
       if((flow->http.request_content_type == NULL) && (packet->content_line.len > 0)) {
 	int len = packet->content_line.len + 1;
 
 	flow->http.request_content_type = ndpi_malloc(len);
 	if(flow->http.request_content_type) {
 	  strncpy(flow->http.request_content_type, (char*)packet->content_line.ptr,
 		  packet->content_line.len);
 	  flow->http.request_content_type[packet->content_line.len] = '\0';
 	}
       }
     } else {
       /* Response */
       if((flow->http.content_type == NULL) && (packet->content_line.len > 0)) {
 	int len = packet->content_line.len + 1;
 
 	flow->http.content_type = ndpi_malloc(len);
 	if(flow->http.content_type) {
 	  strncpy(flow->http.content_type, (char*)packet->content_line.ptr,
 		  packet->content_line.len);
 	  flow->http.content_type[packet->content_line.len] = '\0';
 
 	  flow->guessed_category = flow->category = ndpi_http_check_content(ndpi_struct, flow);
 	}
       }
     }
 
     if(flow->http_detected && packet->content_line.ptr && *(char*)packet->content_line.ptr) {
       /* Matching on Content-Type.
           OCSP:  application/ocsp-request, application/ocsp-response
        */
-      if(strncmp((const char *)packet->content_line.ptr, "application/ocsp-", 17) == 0) {
+      if(packet->content_line.len > 17 &&
+         strncmp((const char *)packet->content_line.ptr, "application/ocsp-", 17) == 0) {
         NDPI_LOG_DBG2(ndpi_struct, "Found OCSP\n");
         ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_OCSP, NDPI_PROTOCOL_HTTP, NDPI_CONFIDENCE_DPI);
       }
     }
   }
 
   if(packet->user_agent_line.ptr != NULL && packet->user_agent_line.len != 0 &&
      flow->http.url) {
     /* WindowsUpdate over some kind of CDN */
     if(flow->detected_protocol_stack[1] == NDPI_PROTOCOL_UNKNOWN &&
        flow->detected_protocol_stack[0] == NDPI_PROTOCOL_HTTP &&
        (strstr(flow->http.url, "delivery.mp.microsoft.com/") ||
         strstr(flow->http.url, "download.windowsupdate.com/")) &&
        ndpi_strnstr((const char *)packet->user_agent_line.ptr, "Microsoft-Delivery-Optimization/",
                     packet->user_agent_line.len) &&
        ndpi_isset_risk(ndpi_struct, flow, NDPI_HTTP_NUMERIC_IP_HOST)) {
       ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_WINDOWS_UPDATE, NDPI_PROTOCOL_HTTP, NDPI_CONFIDENCE_DPI);
     }
   }
 
   if(ndpi_get_http_method(ndpi_struct, flow) != NDPI_HTTP_METHOD_UNKNOWN) {
     ndpi_int_http_add_connection(ndpi_struct, flow, flow->detected_protocol_stack[0], NDPI_PROTOCOL_CATEGORY_WEB);
   }
 }
 
 /* ************************************************************* */
diff --git a/src/lib/protocols/softether.c b/src/lib/protocols/softether.c
index d5dce55f..ea59a9a9 100644
--- a/src/lib/protocols/softether.c
+++ b/src/lib/protocols/softether.c
@@ -73,54 +73,54 @@ static void ndpi_int_softether_add_connection(struct ndpi_detection_module_struc
 static size_t dissect_softether_type(enum softether_value_type t,
                                      struct softether_value *v,
                                      u_int8_t const *payload,
                                      u_int16_t payload_len) {
   size_t ret = 0;
   v->type = t;
   v->value_size = 0;
 
   switch (t)
     {
     case VALUE_INT:
       if(payload_len < 4)
 	return 0;
 
       v->value.value_int = ntohl(get_u_int32_t(payload, 0));
       v->value_size = sizeof(v->value.value_int);
       ret = v->value_size;
       break;
 
     case VALUE_DATA:
     case VALUE_STR:
     case VALUE_UNISTR:
       if(payload_len < 4)
 	return 0;
 
       v->value.ptr.raw = payload + 4;
       u_int32_t siz = ntohl(get_u_int32_t(payload, 0));
-      if(siz == 0 || (u_int64_t)payload_len < (u_int64_t)siz + 3)
+      if(siz == 0 || (u_int64_t)payload_len < (u_int64_t)siz + sizeof(siz))
 	return 0;
 
       if(t == VALUE_DATA)
 	siz--;
 
       v->value_size = siz;
       ret = siz + sizeof(siz);
       break;
 
     case VALUE_INT64:
       if(payload_len < 8)
 	return 0;
 
       v->value.value_int64 = ndpi_ntohll(get_u_int64_t(payload, 0));
       v->value_size = sizeof(v->value.value_int64);
       ret = v->value_size;
       break;
     }
 
   if(ret > payload_len)
     return 0;
 
   return ret;
 }
 
 /* ***************************************************** */
