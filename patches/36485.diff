commit f134b5a31da90e743af41fb6cc227af06b91bcc2
Author: Alex Deymo <deymo@google.com>
Date:   Tue Jul 27 18:27:37 2021 +0200

    Fuzz: Update the nb_meta_channels in squeeze when applying. (#370)
    
    MetaSqueeze() started updating the nb_meta_channels value in #331, but
    we also need to update the value back when applying the transform. This
    was leading to the transforms getting out of sync with when
    meta-applying versus inverse applying them later.

diff --git a/lib/jxl/modular/transform/squeeze.cc b/lib/jxl/modular/transform/squeeze.cc
index fd8867b7..947bcda7 100644
--- a/lib/jxl/modular/transform/squeeze.cc
+++ b/lib/jxl/modular/transform/squeeze.cc
@@ -279,38 +279,44 @@ Status MetaSqueeze(Image &image, std::vector<SqueezeParams> *parameters) {
 Status InvSqueeze(Image &input, std::vector<SqueezeParams> parameters,
                   ThreadPool *pool) {
   if (parameters.empty()) {
     DefaultSqueezeParameters(&parameters, input);
   }
 
   for (int i = parameters.size() - 1; i >= 0; i--) {
     JXL_RETURN_IF_ERROR(
         CheckMetaSqueezeParams(parameters[i], input.channel.size()));
     bool horizontal = parameters[i].horizontal;
     bool in_place = parameters[i].in_place;
     uint32_t beginc = parameters[i].begin_c;
     uint32_t endc = parameters[i].begin_c + parameters[i].num_c - 1;
     uint32_t offset;
     if (in_place) {
       offset = endc + 1;
     } else {
       offset = input.channel.size() + beginc - endc - 1;
     }
+    if (beginc < input.nb_meta_channels) {
+      // This is checked in MetaSqueeze.
+      JXL_ASSERT(input.nb_meta_channels > parameters[i].num_c);
+      input.nb_meta_channels -= parameters[i].num_c;
+    }
+
     for (uint32_t c = beginc; c <= endc; c++) {
       uint32_t rc = offset + c - beginc;
       if ((input.channel[c].w < input.channel[rc].w) ||
           (input.channel[c].h < input.channel[rc].h)) {
         return JXL_FAILURE("Corrupted squeeze transform");
       }
       if (horizontal) {
         InvHSqueeze(input, c, rc, pool);
       } else {
         InvVSqueeze(input, c, rc, pool);
       }
     }
     input.channel.erase(input.channel.begin() + offset,
                         input.channel.begin() + offset + (endc - beginc + 1));
   }
   return true;
 }
 
 }  // namespace jxl
