commit 468ded88b6ee5ccc4ce1ed029a7d310e5764947c
Author: Joe Drago <jdrago@netflix.com>
Date:   Thu Sep 24 12:52:51 2020 -0700

    Fix avifParse error flow, and guarantee that ftyp, moov, and meta boxes are unique at the file container level

diff --git a/include/avif/internal.h b/include/avif/internal.h
index 9042a85..0edf2f3 100644
--- a/include/avif/internal.h
+++ b/include/avif/internal.h
@@ -9,25 +9,32 @@
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 // Yes, clamp macros are nasty. Do not use them.
 #define AVIF_CLAMP(x, low, high) (((x) < (low))) ? (low) : (((high) < (x)) ? (high) : (x))
 #define AVIF_MIN(a, b) (((a) < (b)) ? (a) : (b))
 
 // Used by stream related things.
 #define CHECK(A)               \
     do {                       \
         if (!(A))              \
             return AVIF_FALSE; \
     } while (0)
 
+// Used instead of CHECK if needing to return a specific error on failure, instead of AVIF_FALSE
+#define CHECKERR(A, ERR) \
+    do {                 \
+        if (!(A))        \
+            return ERR;  \
+    } while (0)
+
 // ---------------------------------------------------------------------------
 // URNs and Content-Types
 
 #define URN_ALPHA0 "urn:mpeg:mpegB:cicp:systems:auxiliary:alpha"
 #define URN_ALPHA1 "urn:mpeg:hevc:2015:auxid:1"
 
 #define CONTENT_TYPE_XMP "application/rdf+xml"
 
 // ---------------------------------------------------------------------------
 // Utils
diff --git a/src/read.c b/src/read.c
index be53466..3407bdd 100644
--- a/src/read.c
+++ b/src/read.c
@@ -2029,55 +2029,59 @@ static avifBool avifParseFileTypeBox(avifFileType * ftyp, const uint8_t * raw, s
 static avifResult avifParse(avifDecoder * decoder)
 {
     avifResult readResult;
     size_t parseOffset = 0;
     avifDecoderData * data = decoder->data;
+    uint32_t uniqueBoxFlags = 0;
 
     for (;;) {
         // Read just enough to get the next box header (a max of 32 bytes)
         avifROData headerContents;
         readResult = decoder->io->read(decoder->io, 0, parseOffset, 32, &headerContents);
         if (readResult != AVIF_RESULT_OK) {
             return readResult;
         }
         if (!headerContents.size) {
             // If we got AVIF_RESULT_OK from the reader but received 0 bytes,
             // This we've reached the end of the file with no errors. Hooray!
             break;
         }
 
         // Parse the header, and find out how many bytes it actually was
         BEGIN_STREAM(headerStream, headerContents.data, headerContents.size);
         avifBoxHeader header;
-        CHECK(avifROStreamReadBoxHeaderPartial(&headerStream, &header));
+        CHECKERR(avifROStreamReadBoxHeaderPartial(&headerStream, &header), AVIF_RESULT_BMFF_PARSE_FAILED);
         parseOffset += headerStream.offset;
 
         // Try to get the remainder of the box, if necessary
         avifROData boxContents = AVIF_DATA_EMPTY;
 
         // TODO: reorg this code to only do these memcmps once each
         if (!memcmp(header.type, "ftyp", 4) || (!memcmp(header.type, "meta", 4) || !memcmp(header.type, "moov", 4))) {
             readResult = decoder->io->read(decoder->io, 0, parseOffset, header.size, &boxContents);
             if (readResult != AVIF_RESULT_OK) {
                 return readResult;
             }
             if (boxContents.size != header.size) {
                 // A truncated box, bail out
                 return AVIF_RESULT_BMFF_PARSE_FAILED;
             }
         }
 
         if (!memcmp(header.type, "ftyp", 4)) {
+            CHECKERR(uniqueBoxSeen(&uniqueBoxFlags, 0), AVIF_RESULT_BMFF_PARSE_FAILED);
             avifRWDataSet(&data->ftypData, boxContents.data, boxContents.size);
-            CHECK(avifParseFileTypeBox(&data->ftyp, data->ftypData.data, data->ftypData.size));
+            CHECKERR(avifParseFileTypeBox(&data->ftyp, data->ftypData.data, data->ftypData.size), AVIF_RESULT_BMFF_PARSE_FAILED);
         } else if (!memcmp(header.type, "meta", 4)) {
-            CHECK(avifParseMetaBox(data->meta, boxContents.data, boxContents.size));
+            CHECKERR(uniqueBoxSeen(&uniqueBoxFlags, 1), AVIF_RESULT_BMFF_PARSE_FAILED);
+            CHECKERR(avifParseMetaBox(data->meta, boxContents.data, boxContents.size), AVIF_RESULT_BMFF_PARSE_FAILED);
         } else if (!memcmp(header.type, "moov", 4)) {
-            CHECK(avifParseMoovBox(data, boxContents.data, boxContents.size));
+            CHECKERR(uniqueBoxSeen(&uniqueBoxFlags, 2), AVIF_RESULT_BMFF_PARSE_FAILED);
+            CHECKERR(avifParseMoovBox(data, boxContents.data, boxContents.size), AVIF_RESULT_BMFF_PARSE_FAILED);
         }
 
         parseOffset += header.size;
     }
     return AVIF_RESULT_OK;
 }
 
 // ---------------------------------------------------------------------------
