commit 8bd3f7dba33341b622b60e13446a9cc101447e76
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Fri Jan 7 14:19:26 2022 +0000

    oss-fuzz 43255: Ensure index >= 0 before writing to Encoding array
    
    in a Type 1 font.

diff --git a/pdf/pdf_fontps.c b/pdf/pdf_fontps.c
index 7ad6aa1f2..dcec7e9af 100644
--- a/pdf/pdf_fontps.c
+++ b/pdf/pdf_fontps.c
@@ -1,28 +1,28 @@
-/* Copyright (C) 2020-2021 Artifex Software, Inc.
+/* Copyright (C) 2020-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 /* common code for Postscript-type font handling */
 #include "scanchar.h"
 #include "sfilter.h"
 #include "stream.h"
 #include "strimpl.h"
 
 #include "pdf_int.h"
 #include "pdf_types.h"
 #include "pdf_array.h"
 #include "pdf_dict.h"
 #include "pdf_font.h"
 #include "pdf_font_types.h"
 #include "pdf_fontps.h"
@@ -1167,21 +1167,21 @@ static int
 pdf_ps_put_oper_func(gs_memory_t *mem, pdf_ps_ctx_t *s, byte *buf, byte *bufend)
 {
     int code;
 
     if ((code = pdf_ps_stack_count(s)) < 4) {
         return 0;
     }
 
     if (pdf_ps_obj_has_type(&s->cur[-3], PDF_PS_OBJ_NAME) &&
         !memcmp(s->cur[-3].val.name, PDF_PS_OPER_NAME_AND_LEN("Encoding")) &&
         pdf_ps_obj_has_type(&s->cur[-2], PDF_PS_OBJ_ARRAY) &&
         pdf_ps_obj_has_type(&s->cur[-1], PDF_PS_OBJ_INTEGER) &&
         pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_NAME)) {
-        if (s->cur[-1].val.i < s->cur[-2].size) {
+        if (s->cur[-1].val.i >= 0 && s->cur[-1].val.i < s->cur[-2].size) {
             pdf_ps_make_name(&s->cur[-2].val.arr[s->cur[-1].val.i], s->cur[0].val.name, s->cur[0].size);
         }
     }
 
     code = pdf_ps_stack_pop(s, 2);
     return code;
 }
