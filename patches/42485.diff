commit 82d534f8f69fd4939faf4b7f20df5cc2462973d8
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Thu Dec 16 16:02:08 2021 +0000

    oss-fuzz 42485, 42536: validate the object type (string) for CFF (g)subrs
    
    The font contained errors, meaning the (Global)Subrs array was incomplete, and
    one or more entries ended up as null objects instead of strings.
    
    Also, exposed a mistake in the error cleanup in the CFF font to CIDFont
    "conversion" code.

diff --git a/pdf/pdf_fapi.c b/pdf/pdf_fapi.c
index 0ca0a6e7e..3f8688f3e 100644
--- a/pdf/pdf_fapi.c
+++ b/pdf/pdf_fapi.c
@@ -680,33 +680,38 @@ static int
 pdfi_fapi_get_gsubr(gs_fapi_font *ff, int index, byte *buf, int buf_length)
 {
     gs_font_type1 *pfont = (gs_font_type1 *) ff->client_font_data;
     int code = 0;
     if (pfont->FontType == ft_encrypted2) {
         pdf_font_cff *pdffont2 = (pdf_font_cff *)pfont->client_data;
         if (index > pdffont2->NumGlobalSubrs) {
             code = gs_error_rangecheck;
         }
         else {
             int leniv = (pfont->data.lenIV > 0 ? pfont->data.lenIV : 0);
-            pdf_string *subrstring;
+            pdf_string *subrstring = NULL;
 
             code = pdfi_array_get(pdffont2->ctx, pdffont2->GlobalSubrs, index, (pdf_obj **)&subrstring);
             if (code >= 0) {
-                code = subrstring->length - leniv;
-                if (buf && buf_length >= code) {
-                    if (ff->need_decrypt && pfont->data.lenIV >= 0) {
-                        decode_bytes(buf, subrstring->data, code + leniv, pfont->data.lenIV);
-                    }
-                    else {
-                        memcpy(buf, subrstring->data, code);
+                if (subrstring->type == PDF_STRING) {
+                    code = subrstring->length - leniv;
+                    if (buf && buf_length >= code) {
+                        if (ff->need_decrypt && pfont->data.lenIV >= 0) {
+                            decode_bytes(buf, subrstring->data, code + leniv, pfont->data.lenIV);
+                        }
+                        else {
+                            memcpy(buf, subrstring->data, code);
+                        }
                     }
                 }
+                else {
+                    code = gs_note_error(gs_error_invalidfont);
+                }
                 pdfi_countdown(subrstring);
             }
         }
     }
     else {
         code = gs_note_error(gs_error_invalidfont);
     }
     return code;
 }
@@ -715,59 +720,64 @@ static int
 pdfi_fapi_get_subr(gs_fapi_font *ff, int index, byte *buf, int buf_length)
 {
     gs_font_type1 *pfont = (gs_font_type1 *) ff->client_font_data;
     int code = 0;
 
     if (pfont->FontType == ft_encrypted) {
         pdf_font_type1 *pdffont1 = (pdf_font_type1 *)pfont->client_data;
         if (index > pdffont1->NumSubrs) {
             code = gs_note_error(gs_error_rangecheck);
         }
         else {
             int leniv = (pfont->data.lenIV > 0 ? pfont->data.lenIV : 0);
             if (pdffont1->Subrs[index].size > 0) {
                  code = pdffont1->Subrs[index].size - leniv;
                  if (buf && buf_length >= code) {
                      if (ff->need_decrypt && pfont->data.lenIV >= 0) {
                          decode_bytes(buf, pdffont1->Subrs[index].data, code + leniv, pfont->data.lenIV);
                      }
                      else {
                          memcpy(buf, pdffont1->Subrs[index].data, code);
                      }
                  }
             }
         }
     }
     else if (pfont->FontType == ft_encrypted2) {
         pdf_font_cff *pdffont2 = (pdf_font_cff *)pfont->client_data;
         if (index > pdffont2->NumSubrs) {
             code = gs_error_rangecheck;
         }
         else {
             int leniv = (pfont->data.lenIV > 0 ? pfont->data.lenIV : 0);
             pdf_string *subrstring;
 
             if (pdffont2->Subrs == NULL)
                 code = gs_note_error(gs_error_invalidfont);
             else
                 code = pdfi_array_get(pdffont2->ctx, pdffont2->Subrs, index, (pdf_obj **)&subrstring);
             if (code >= 0) {
-                if (subrstring->length > 0) {
-                    code = subrstring->length - leniv;
-                    if (buf && buf_length >= code) {
-                        if (ff->need_decrypt && pfont->data.lenIV >= 0) {
-                            decode_bytes(buf, subrstring->data, code + leniv, pfont->data.lenIV);
-                        }
-                        else {
-                            memcpy(buf, subrstring->data, code);
+                if (subrstring->type == PDF_STRING) {
+                    if (subrstring->length > 0) {
+                        code = subrstring->length - leniv;
+                        if (buf && buf_length >= code) {
+                            if (ff->need_decrypt && pfont->data.lenIV >= 0) {
+                                decode_bytes(buf, subrstring->data, code + leniv, pfont->data.lenIV);
+                            }
+                            else {
+                                memcpy(buf, subrstring->data, code);
+                            }
                         }
                     }
                 }
+                else {
+                    code = gs_note_error(gs_error_invalidfont);
+                }
                 pdfi_countdown(subrstring);
             }
         }
     }
     else {
         code = gs_note_error(gs_error_invalidfont);
     }
     return code;
 }
diff --git a/pdf/pdf_font1C.c b/pdf/pdf_font1C.c
index b0cbec4fb..0cbe3a270 100644
--- a/pdf/pdf_font1C.c
+++ b/pdf/pdf_font1C.c
@@ -2120,633 +2120,633 @@ int
 pdfi_read_cff_font(pdf_context *ctx, pdf_dict *font_dict, pdf_dict *stream_dict, pdf_dict *page_dict, byte *pfbuf, int64_t fbuflen, bool forcecid, pdf_font **ppdffont)
 {
     int code = 0;
 
     pdf_font *ppdfont = NULL;
     pdf_obj *basefont = NULL;
     pdf_obj *tmp = NULL;
     pdf_obj *fontdesc = NULL;
     pdf_string *registry = NULL;
     pdf_string *ordering = NULL;
     byte *fbuf = pfbuf;
 
     if (!memcmp(fbuf, "OTTO", 4)) {
         int i, ntables = u16(fbuf + 4);
         byte *p;
         uint32_t toffs = 0, tlen = 0;
 
         if (ntables > 64)
             return_error(gs_error_invalidfont);
 
         for (i = 0; i < ntables; i++) {
             p = fbuf + 12 + i * 16;
             if (p >= fbuf + fbuflen)
                 break;
 
             if (!memcmp(p, "CFF ", 4)) {
                 toffs = u32(p + 8);
                 tlen = u32(p + 12);
                 break;
             }
         }
         if (toffs == 0 || tlen == 0 || toffs + tlen > fbuflen) {
             gs_free_object(ctx->memory, pfbuf, "pdfi_read_cff_font(fbuf)");
             return_error(gs_error_invalidfont);
         }
         fbuf += toffs;
         fbuflen = tlen;
     }
 
     code = pdfi_dict_knownget_type(ctx, font_dict, "FontDescriptor", PDF_DICT, &fontdesc);
     if (code < 0) {
         fontdesc = NULL;
     }
 
     /* Vestigial magic number check - we can't check the third byte, as we have out of
        spec fonts that have a head size > 4
      */
     if (fbuf[0] == 1 && fbuf[1] == 0) {
         pdfi_gs_cff_font_priv cffpriv;
 
         if (code >= 0) {
             pdfi_init_cff_font_priv(ctx, &cffpriv, fbuf, fbuflen, false);
             cffpriv.forcecid = forcecid;
             code = pdfi_read_cff(ctx, &cffpriv);
         }
         if (code >= 0) {
             if (cffpriv.FontType == ft_CID_encrypted) {
                 pdf_obj *obj = NULL;
                 pdf_cidfont_type0 *cffcid;
                 gs_font_cid0 *pfont;
 
                 code = pdfi_alloc_cff_cidfont(ctx, &cffcid, font_dict->object_num);
                 pfont = (gs_font_cid0 *) cffcid->pfont;
                 ppdfont = (pdf_font *) cffcid;
 
                 memcpy(pfont, &cffpriv, sizeof(pdfi_gs_cff_font_common_priv));
                 memcpy(&pfont->cidata, &cffpriv.cidata, sizeof(pfont->cidata));
 
                 pfont->procs.glyph_outline = pdfi_cff_glyph_outline;
                 pfont->cidata.glyph_data = pdfi_cff_cid_glyph_data;
 
                 cffcid->orig_glyph_info = pfont->procs.glyph_info;
                 pfont->procs.glyph_info = pdfi_cff_cidfont_glyph_info;
 
                 pfont->cidata.proc_data = NULL;
                 pfont->FAPI = NULL;
                 pfont->base = (gs_font *) cffcid->pfont;
 
                 code = pdfi_dict_knownget_type(ctx, font_dict, "CIDSystemInfo", PDF_DICT, (pdf_obj **)&obj);
                 if (code <= 0) {
                     cffcid->registry = cffpriv.pdfcffpriv.registry;
                     cffcid->ordering = cffpriv.pdfcffpriv.ordering;
                     cffcid->supplement = cffpriv.pdfcffpriv.supplement;
                 }
                 else {
                     pdf_num *suppl = NULL;
 
                     code = pdfi_dict_knownget_type(ctx, (pdf_dict *)obj, "Registry", PDF_STRING, (pdf_obj **)&cffcid->registry);
                     if (code <= 0) {
                         cffcid->registry = cffpriv.pdfcffpriv.registry;
                     }
                     else {
                         pdfi_countdown(cffpriv.pdfcffpriv.registry);
                         cffpriv.pdfcffpriv.registry = NULL;
                     }
 
                     code = pdfi_dict_knownget_type(ctx, (pdf_dict *)obj, "Ordering", PDF_STRING, (pdf_obj **)&cffcid->ordering);
                     if (code <= 0) {
                         cffcid->ordering = cffpriv.pdfcffpriv.ordering;
                     }
                     else {
                         pdfi_countdown(cffpriv.pdfcffpriv.ordering);
                         cffpriv.pdfcffpriv.ordering = NULL;
                     }
                     code = pdfi_dict_knownget_type(ctx, (pdf_dict *)obj, "Supplement", PDF_INT, (pdf_obj **)&suppl);
                     if (code <= 0 || suppl->type != PDF_INT) {
                         cffcid->supplement = cffpriv.pdfcffpriv.supplement;
                     }
                     else {
                         cffcid->supplement = suppl->value.i;
                     }
                     pdfi_countdown(suppl);
                 }
                 pdfi_countdown(obj);
                 obj = NULL;
 
                 pfont->cidata.common.CIDSystemInfo.Registry.data = cffcid->registry->data;
                 pfont->cidata.common.CIDSystemInfo.Registry.size = cffcid->registry->length;
                 pfont->cidata.common.CIDSystemInfo.Ordering.data = cffcid->ordering->data;
                 pfont->cidata.common.CIDSystemInfo.Ordering.size = cffcid->ordering->length;
                 pfont->cidata.common.CIDSystemInfo.Supplement = cffcid->supplement;
 
                 cffcid->FontDescriptor = (pdf_dict *) fontdesc;
                 fontdesc = NULL;
 
                 cffcid->PDF_font = font_dict;
                 pdfi_countup(font_dict);
 
                 cffcid->cidtogidmap.data = NULL;
                 cffcid->cidtogidmap.size = 0;
 
                 pfont->client_data = cffcid;
 
                 cffcid->object_num = font_dict->object_num;
                 cffcid->generation_num = font_dict->generation_num;
                 cffcid->indirect_num = font_dict->indirect_num;
                 cffcid->indirect_gen = font_dict->indirect_gen;
 
                 cffcid->CharStrings = cffpriv.pdfcffpriv.CharStrings;
                 cffpriv.pdfcffpriv.CharStrings = NULL;
 
                 cffcid->Subrs = cffpriv.pdfcffpriv.Subrs;
                 cffcid->NumSubrs = cffpriv.pdfcffpriv.NumSubrs;
                 cffpriv.pdfcffpriv.Subrs = NULL;
 
                 cffcid->GlobalSubrs = cffpriv.pdfcffpriv.GlobalSubrs;
                 cffcid->NumGlobalSubrs = cffpriv.pdfcffpriv.NumGlobalSubrs;
                 cffpriv.pdfcffpriv.GlobalSubrs = NULL;
 
                 cffcid->FDArray = cffpriv.pdfcffpriv.FDArray;
                 cffpriv.pdfcffpriv.FDArray = NULL;
 
                 pfont->cidata.common.CIDCount = cffpriv.pdfcffpriv.cidcount;
 
                 cffcid->cidtogidmap.data = NULL;
                 cffcid->cidtogidmap.size = 0;
                 code = pdfi_dict_knownget(ctx, font_dict, "CIDToGIDMap", (pdf_obj **) &obj);
                 if (code > 0) {
                     /* CIDToGIDMap can only be a stream or a name, and if it's a name
                        it's only permitted to be "/Identity", so ignore it
                      */
                     int64_t size = 0;
                     if (obj->type == PDF_STREAM) {
                         code = pdfi_stream_to_buffer(ctx, (pdf_stream *) obj, &(cffcid->cidtogidmap.data), &size);
                     }
                     pdfi_countdown(obj);
                     obj = NULL;
                     cffcid->cidtogidmap.size = size;
 
                     if (size > 0) {
                         pfont->cidata.common.CIDCount = size >> 1;
                     }
                 }
                 pfont->cidata.common.MaxCID = pfont->cidata.common.CIDCount - 1;
 
                 code = pdfi_dict_knownget_type(ctx, font_dict, "DW", PDF_INT, (pdf_obj **) &obj);
                 if (code > 0) {
                     cffcid->DW = ((pdf_num *) obj)->value.i;
                     pdfi_countdown(obj);
                     obj = NULL;
                 }
                 else {
                     cffcid->DW = 1000;
                 }
                 code = pdfi_dict_knownget_type(ctx, font_dict, "DW2", PDF_ARRAY, (pdf_obj **) &obj);
                 if (code > 0) {
                     cffcid->DW2 = (pdf_array *) obj;
                     obj = NULL;
                 }
                 else {
                     cffcid->DW2 = NULL;
                 }
                 code = pdfi_dict_knownget_type(ctx, font_dict, "W", PDF_ARRAY, (pdf_obj **) &obj);
                 if (code > 0) {
                     cffcid->W = (pdf_array *) obj;
                     obj = NULL;
                 }
                 else {
                     cffcid->W = NULL;
                 }
                 code = pdfi_dict_knownget_type(ctx, font_dict, "W2", PDF_ARRAY, (pdf_obj **) &obj);
                 if (code > 0) {
                     cffcid->W2 = (pdf_array *) obj;
                     obj = NULL;
                 }
                 else {
                     cffcid->W2 = NULL;
                 }
                 code = pdfi_font_generate_pseudo_XUID(ctx, font_dict, (gs_font_base *)cffcid->pfont);
                 if (code < 0)
                     uid_set_invalid(&cffcid->pfont->UID);
 
             }
             else if (forcecid) {
                 pdf_obj *obj;
                 pdf_cidfont_type0 *cffcid;
                 gs_font_cid0 *pfont;
                 pdf_font_cff *fdcfffont;
                 gs_font_type1 *pfdfont = NULL;
                 static const char *const reg = "Adobe";
                 static const char *const ord = "Identity";
 
                 code = pdfi_object_alloc(ctx, PDF_STRING, strlen(reg), (pdf_obj **) &registry);
                 if (code < 0)
                     goto error;
                 pdfi_countup(registry);
 
                 code = pdfi_object_alloc(ctx, PDF_STRING, strlen(ord), (pdf_obj **) &ordering);
                 if (code < 0) {
                     goto error;
                 }
                 pdfi_countup(ordering);
 
                 memcpy(registry->data, reg, strlen(reg));
                 registry->length = strlen(reg);
                 memcpy(ordering->data, ord, strlen(ord));
                 ordering->length = strlen(ord);
 
                 code = pdfi_alloc_cff_font(ctx, &fdcfffont, 0, true);
                 if (code < 0)
                     goto error;
 
                 pfdfont = (gs_font_type1 *) fdcfffont->pfont;
 
                 code = pdfi_alloc_cff_cidfont(ctx, &cffcid, 0);
                 if (code < 0) {
                     gs_free_object(ctx->memory, fdcfffont, "pdfi_read_cff_font");
                     gs_free_object(ctx->memory, pfdfont, "pdfi_read_cff_font");
                     goto error;
                 }
                 ppdfont = (pdf_font *) cffcid;
 
                 code = pdfi_object_alloc(ctx, PDF_ARRAY, 1, (pdf_obj **) &cffcid->FDArray);
                 if (code < 0)
                     goto error;
                 pdfi_countup(cffcid->FDArray);
 
                 pfont = (gs_font_cid0 *) cffcid->pfont;
                 pfont->cidata.FDArray = (gs_font_type1 **) gs_alloc_bytes(ctx->memory, sizeof(gs_font_type1 *), "pdfi_read_cff_font");
                 pfont->base = (gs_font *)pfont;
                 if (!pfont->cidata.FDArray) {
                     pdfi_countdown(cffcid->FDArray);
                     gs_free_object(ctx->memory, fdcfffont, "pdfi_read_cff_font");
                     gs_free_object(ctx->memory, pfdfont, "pdfi_read_cff_font");
                     gs_free_object(ctx->memory, cffcid, "pdfi_read_cff_font");
                     gs_free_object(ctx->memory, pfont, "pdfi_read_cff_font");
                     goto error;
                 }
 
                 memcpy(pfdfont, &cffpriv, sizeof(pdfi_gs_cff_font_common_priv));
                 memcpy(&pfdfont->data, &cffpriv.type1data, sizeof(pfdfont->data));
 
 
                 pfont->procs.glyph_outline = pdfi_cff_glyph_outline;
                 pfont->cidata.glyph_data = pdfi_cff_cid_glyph_data;
                 pfont->cidata.common.CIDCount = cffpriv.pdfcffpriv.CharStrings->entries;
                 pfont->cidata.common.MaxCID = pfont->cidata.common.CIDCount - 1;
 
                 cffcid->orig_glyph_info = pfont->procs.glyph_info;
                 pfont->procs.glyph_info = pdfi_cff_cidfont_glyph_info;
 
                 pfdfont->FAPI = NULL;
                 pfdfont->base = (gs_font *)pfdfont;
                 pfdfont->client_data = fdcfffont;
                 pdfi_array_put(ctx, cffcid->FDArray, 0, (pdf_obj *) fdcfffont);
 
                 fdcfffont->object_num = 0;
                 fdcfffont->generation_num = 0;
 
                 (void)pdfi_dict_knownget_type(ctx, font_dict, "BaseFont", PDF_NAME, &basefont);
                 fdcfffont->BaseFont = basefont;
                 fdcfffont->Name = basefont;
                 pdfi_countup(basefont);
 
                 pdfi_countdown(cffpriv.pdfcffpriv.Encoding);
                 cffpriv.pdfcffpriv.Encoding = NULL;
 
                 fdcfffont->CharStrings = cffpriv.pdfcffpriv.CharStrings;
+                cffpriv.pdfcffpriv.CharStrings = NULL;
                 fdcfffont->Subrs = cffpriv.pdfcffpriv.Subrs;
+                cffpriv.pdfcffpriv.Subrs = NULL;
                 fdcfffont->NumSubrs = cffpriv.pdfcffpriv.NumSubrs;
                 fdcfffont->GlobalSubrs = cffpriv.pdfcffpriv.GlobalSubrs;
+                cffpriv.pdfcffpriv.GlobalSubrs = NULL;
                 fdcfffont->NumGlobalSubrs = cffpriv.pdfcffpriv.NumGlobalSubrs;
 
                 cffcid->CharStrings = fdcfffont->CharStrings;
                 pdfi_countup(cffcid->CharStrings);
                 cffcid->Subrs = fdcfffont->Subrs;
                 pdfi_countup(cffcid->Subrs);
                 cffcid->GlobalSubrs = fdcfffont->GlobalSubrs;
                 pdfi_countup(cffcid->GlobalSubrs);
                 pdfi_countdown(fdcfffont);
 
                 cffcid->FontDescriptor = (pdf_dict *) fontdesc;
                 fontdesc = NULL;
 
                 cffcid->registry = registry;
                 cffcid->ordering = ordering;
                 registry = ordering = NULL;
                 cffcid->supplement = 0;
 
                 /* Because we're faking a CIDFont, we want to move the scaling to the "parent" fake
                    CIDFont, and make the FDArrray use identity scaling
                  */
                 memcpy(&pfont->FontMatrix, &pfdfont->FontMatrix, sizeof(pfdfont->FontMatrix));
                 memcpy(&pfont->orig_FontMatrix, &pfdfont->orig_FontMatrix, sizeof(pfdfont->orig_FontMatrix));
 
                 gs_make_identity(&pfdfont->FontMatrix);
                 gs_make_identity(&pfdfont->orig_FontMatrix);
 
                 pfont->cidata.CIDMapOffset = 0;
                 pfont->cidata.FDArray_size = 1;
                 pfont->cidata.FDBytes = 0;
                 pfont->cidata.glyph_data = pdfi_cff_cid_glyph_data;
                 pfont->cidata.FDArray[0] = pfdfont;
                 pfont->cidata.common.CIDSystemInfo.Registry.data = cffcid->registry->data;
                 pfont->cidata.common.CIDSystemInfo.Registry.size = cffcid->registry->length;
                 pfont->cidata.common.CIDSystemInfo.Ordering.data = cffcid->ordering->data;
                 pfont->cidata.common.CIDSystemInfo.Ordering.size = cffcid->ordering->length;
                 pfont->cidata.common.CIDSystemInfo.Supplement = cffcid->supplement;
                 pfont->client_data = cffcid;
 
                 cffcid->object_num = font_dict->object_num;
                 cffcid->generation_num = font_dict->generation_num;
                 cffcid->indirect_num = font_dict->indirect_num;
                 cffcid->indirect_gen = font_dict->indirect_gen;
 
                 cffcid->PDF_font = font_dict;
                 pdfi_countup(font_dict);
-                cffcid->CharStrings = cffpriv.pdfcffpriv.CharStrings;
-                cffcid->Subrs = cffpriv.pdfcffpriv.Subrs;
-                cffcid->GlobalSubrs = cffpriv.pdfcffpriv.GlobalSubrs;
 
                 cffcid->cidtogidmap.data = NULL;
                 cffcid->cidtogidmap.size = 0;
                 code = pdfi_dict_knownget(ctx, font_dict, "CIDToGIDMap", (pdf_obj **) &obj);
                 if (code > 0) {
                     /* CIDToGIDMap can only be a stream or a name, and if it's a name
                        it's only permitted to be "/Identity", so ignore it
                      */
                     int64_t size = 0;
                     if (obj->type == PDF_STREAM) {
                         code = pdfi_stream_to_buffer(ctx, (pdf_stream *) obj, &(cffcid->cidtogidmap.data), (int64_t *) &size);
                     }
                     pdfi_countdown(obj);
                     obj = NULL;
                     cffcid->cidtogidmap.size = size;
                     if (size > 0) {
                         pfont->cidata.common.CIDCount = size >> 1;
                     }
                 }
                 pfont->cidata.common.MaxCID = pfont->cidata.common.CIDCount - 1;
 
                 code = pdfi_dict_knownget_type(ctx, font_dict, "DW", PDF_INT, (pdf_obj **) &obj);
                 if (code > 0) {
                     cffcid->DW = ((pdf_num *) obj)->value.i;
                     pdfi_countdown(obj);
                     obj = NULL;
                 }
                 else {
                     cffcid->DW = 1000;
                 }
                 code = pdfi_dict_knownget_type(ctx, font_dict, "DW2", PDF_ARRAY, (pdf_obj **) &obj);
                 if (code > 0) {
                     cffcid->DW2 = (pdf_array *) obj;
                     obj = NULL;
                 }
                 else {
                     cffcid->DW2 = NULL;
                 }
                 code = pdfi_dict_knownget_type(ctx, font_dict, "W", PDF_ARRAY, (pdf_obj **) &obj);
                 if (code > 0) {
                     cffcid->W = (pdf_array *) obj;
                     obj = NULL;
                 }
                 else {
                     cffcid->W = NULL;
                 }
                 code = pdfi_dict_knownget_type(ctx, font_dict, "W2", PDF_ARRAY, (pdf_obj **) &obj);
                 if (code > 0) {
                     cffcid->W2 = (pdf_array *) obj;
                     obj = NULL;
                 }
                 else {
                     cffcid->W2 = NULL;
                 }
 
                 code = pdfi_font_generate_pseudo_XUID(ctx, cffcid->PDF_font, ppdfont->pfont);
                 if (code < 0)
                     goto error;
 
             }
             else {
                 pdf_font_cff *cfffont;
                 gs_font_type1 *pfont = NULL;
                 pdf_obj *tounicode = NULL;
 
                 code = pdfi_alloc_cff_font(ctx, &cfffont, font_dict->object_num, false);
                 pfont = (gs_font_type1 *) cfffont->pfont;
                 ppdfont = (pdf_font *) cfffont;
 
                 memcpy(pfont, &cffpriv, sizeof(pdfi_gs_cff_font_common_priv));
                 memcpy(&pfont->data, &cffpriv.type1data, sizeof(pfont->data));
                 pfont->FAPI = NULL;
                 pfont->client_data = cfffont;
                 pfont->base = (gs_font *) cfffont->pfont;
 
                 pfont->procs.glyph_info = pdfi_cff_glyph_info;
 
                 cfffont->object_num = font_dict->object_num;
                 cfffont->generation_num = font_dict->generation_num;
                 cfffont->indirect_num = font_dict->indirect_num;
                 cfffont->indirect_gen = font_dict->indirect_gen;
 
                 (void)pdfi_dict_knownget_type(ctx, font_dict, "BaseFont", PDF_NAME, &basefont);
                 cfffont->BaseFont = basefont;
                 cfffont->Name = basefont;
                 pdfi_countup(basefont);
 
                 cfffont->CharStrings = cffpriv.pdfcffpriv.CharStrings;
                 cffpriv.pdfcffpriv.CharStrings = NULL;
 
                 cfffont->Subrs = cffpriv.pdfcffpriv.Subrs;
                 cfffont->NumSubrs = cffpriv.pdfcffpriv.NumSubrs;
                 cffpriv.pdfcffpriv.Subrs = NULL;
 
                 cfffont->GlobalSubrs = cffpriv.pdfcffpriv.GlobalSubrs;
                 cfffont->NumGlobalSubrs = cffpriv.pdfcffpriv.NumGlobalSubrs;
                 cffpriv.pdfcffpriv.GlobalSubrs = NULL;
 
                 cfffont->FontDescriptor = (pdf_dict *) fontdesc;
                 fontdesc = NULL;
 
                 cfffont->PDF_font = font_dict;
                 pdfi_countup(font_dict);
 
                 cfffont->descflags = 0;
                 if (cfffont->FontDescriptor != NULL) {
                     code = pdfi_dict_get_int(ctx, cfffont->FontDescriptor, "Flags", &cfffont->descflags);
                     if (code >= 0) {
                         /* If both the symbolic and non-symbolic flag are set,
                            believe that latter.
                          */
                         if ((cfffont->descflags & 32) != 0)
                             cfffont->descflags = (cfffont->descflags & ~4);
                     }
                 }
                 /* ZapfDingbats and Symbol we just have to know are symbolic */
                 if (pdfi_font_known_symbolic(basefont)) {
                     cfffont->descflags |= 4;
                 }
 
                 code = pdfi_dict_knownget_type(ctx, font_dict, "FirstChar", PDF_INT, &tmp);
                 if (code == 1) {
                     cfffont->FirstChar = ((pdf_num *) tmp)->value.i;
                     pdfi_countdown(tmp);
                     tmp = NULL;
                 }
                 else {
                     cfffont->FirstChar = 0;
                 }
                 code = pdfi_dict_knownget_type(ctx, font_dict, "LastChar", PDF_INT, &tmp);
                 if (code == 1) {
                     cfffont->LastChar = ((pdf_num *) tmp)->value.i;
                     pdfi_countdown(tmp);
                     tmp = NULL;
                 }
                 else {
                     cfffont->LastChar = 255;
                 }
 
                 cfffont->fake_glyph_names = (gs_string *) gs_alloc_bytes(ctx->memory, cfffont->LastChar * sizeof(gs_string), "pdfi_read_cff_font: fake_glyph_names");
                 if (!cfffont->fake_glyph_names) {
                     code = gs_note_error(gs_error_VMerror);
                     goto error;
                 }
                 memset(cfffont->fake_glyph_names, 0x00, cfffont->LastChar * sizeof(gs_string));
                 code = pdfi_dict_knownget_type(ctx, font_dict, "Widths", PDF_ARRAY, &tmp);
                 if (code > 0) {
                     int i;
                     double x_scale;
                     int num_chars = cfffont->LastChar - cfffont->FirstChar + 1;
 
                     if (num_chars != pdfi_array_size((pdf_array *) tmp)) {
                         pdfi_countdown(tmp);
                         code = gs_note_error(gs_error_rangecheck);
                         goto error;
                     }
 
                     cfffont->Widths = (double *)gs_alloc_bytes(ctx->memory, sizeof(double) * num_chars, "Type 1C font Widths array");
                     if (cfffont->Widths == NULL) {
                         code = gs_note_error(gs_error_VMerror);
                         goto error;
                     }
                     memset(cfffont->Widths, 0x00, sizeof(double) * num_chars);
 
                     /* Widths are defined assuming a 1000x1000 design grid, but we apply
                      * them in font space - so undo the 1000x1000 scaling, and apply
                      * the inverse of the font's x scaling
                      */
                     x_scale = 0.001 / hypot(pfont->FontMatrix.xx, pfont->FontMatrix.xy);
 
                     for (i = 0; i < num_chars; i++) {
                         code = pdfi_array_get_number(ctx, (pdf_array *) tmp, (uint64_t) i, &cfffont->Widths[i]);
                         if (code < 0)
                             goto error;
                         cfffont->Widths[i] *= x_scale;
                     }
                 }
                 pdfi_countdown(tmp);
 
                 tmp = NULL;
                 code = pdfi_dict_knownget(ctx, font_dict, "Encoding", &tmp);
                 if (code == 1) {
                     if ((cfffont->descflags & 4) != 0 && tmp->type == PDF_DICT) {
                         code = pdfi_create_Encoding(ctx, tmp, (pdf_obj *)cffpriv.pdfcffpriv.Encoding, (pdf_obj **) &cfffont->Encoding);
                         if (code >= 0) {
                             pdfi_countdown(cffpriv.pdfcffpriv.Encoding);
                             cffpriv.pdfcffpriv.Encoding = NULL;
                             code = 1;
                         }
                     }
                     else if ((tmp->type == PDF_NAME || tmp->type == PDF_DICT)) {
                         code = pdfi_create_Encoding(ctx, tmp, NULL, (pdf_obj **) &cfffont->Encoding);
                         if (code >= 0) {
                             pdfi_countdown(cffpriv.pdfcffpriv.Encoding);
                             cffpriv.pdfcffpriv.Encoding = NULL;
                             code = 1;
                         }
                     }
                     else
                         code = gs_error_undefined;
                     pdfi_countdown(tmp);
                     tmp = NULL;
                 }
                 else {
                     pdfi_countdown(tmp);
                     tmp = NULL;
                     code = 0;
                 }
                 if (code <= 0) {
                     cfffont->Encoding = cffpriv.pdfcffpriv.Encoding;
                     cffpriv.pdfcffpriv.Encoding = NULL;
                 }
                 if (ctx->args.ignoretounicode != true) {
                     code = pdfi_dict_get(ctx, font_dict, "ToUnicode", (pdf_obj **)&tounicode);
                     if (code >= 0 && tounicode->type == PDF_STREAM) {
                         pdf_cmap *tu = NULL;
                         code = pdfi_read_cmap(ctx, tounicode, &tu);
                         pdfi_countdown(tounicode);
                         tounicode = (pdf_obj *)tu;
                     }
                     if (code < 0 || (tounicode != NULL && tounicode->type != PDF_CMAP)) {
                         pdfi_countdown(tounicode);
                         tounicode = NULL;
                         code = 0;
                     }
                 }
                 else {
                     tounicode = NULL;
                 }
                 cfffont->ToUnicode = tounicode;
                 tounicode = NULL;
             }
         }
   error:
         if (code < 0) {
             pdfi_countdown(cffpriv.pdfcffpriv.Subrs);
             pdfi_countdown(cffpriv.pdfcffpriv.GlobalSubrs);
             pdfi_countdown(cffpriv.pdfcffpriv.CharStrings);
             pdfi_countdown(cffpriv.pdfcffpriv.CIDSystemInfo);
             pdfi_countdown(cffpriv.pdfcffpriv.W);
             pdfi_countdown(cffpriv.pdfcffpriv.DW2);
             pdfi_countdown(cffpriv.pdfcffpriv.W2);
             pdfi_countdown(cffpriv.pdfcffpriv.FDArray);
             pdfi_countdown(cffpriv.pdfcffpriv.registry);
             pdfi_countdown(cffpriv.pdfcffpriv.ordering);
             pdfi_countdown(cffpriv.pdfcffpriv.Encoding);
             if (cffpriv.FontType == ft_CID_encrypted) {
                 gs_free_object(ctx->memory, cffpriv.cidata.FDArray, "pdfi_read_cff_font(gs_font FDArray, error)");
             }
         }
         if (code >= 0) {
             code = gs_definefont(ctx->font_dir, (gs_font *) ppdfont->pfont);
             if (code < 0) {
                 goto error;
             }
 
             code = pdfi_fapi_passfont((pdf_font *) ppdfont, 0, NULL, NULL, NULL, 0);
             if (code < 0) {
                 goto error;
             }
             /* object_num can be zero if the dictionary was defined inline */
             if (ppdfont->object_num != 0) {
                 code = replace_cache_entry(ctx, (pdf_obj *) ppdfont);
                 if (code < 0)
                     goto error;
             }
             *ppdffont = (pdf_font *) ppdfont;
             ppdfont = NULL;
         }
     }
     gs_free_object(ctx->memory, pfbuf, "pdfi_read_cff_font(fbuf)");
     pdfi_countdown(ppdfont);
     pdfi_countdown(fontdesc);
     pdfi_countdown(ordering);
     pdfi_countdown(registry);
 
     if (code < 0) {
         *ppdffont = NULL;
         return_error(gs_error_invalidfont);
     }
 
     return code;
 }
