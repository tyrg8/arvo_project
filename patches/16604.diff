commit 6f28264c1170fae4f6c847625f4a6d4467a3262b
Merge: d80f1f9 c414acd
Author: TreeHugger Robot <treehugger-gerrit@google.com>
Date:   Mon Mar 23 18:36:03 2020 +0000

    Merge "Add support for handling odd dimensions" into qt-qpr1-dev am: c414acd144
    
    Change-Id: I07e59a6c282e6b92f2916c6026a9610c6ed1ca17

diff --git a/common/arm/impeg2_format_conv.s b/common/arm/impeg2_format_conv.s
index c07edda..bd9a81a 100644
--- a/common/arm/impeg2_format_conv.s
+++ b/common/arm/impeg2_format_conv.s
@@ -168,20 +168,22 @@ yuv420sp_uv_row_loop_end_y:
 yuv420sp_uv_chroma:
 
     ldr             r3, [sp, #24]       @// Load pu1_dest_uv from stack
 
     ldr             r4, [sp, #28]       @// Load u2_height from stack
+    add             r4, r4, 1
 
     ldr             r5, [sp, #32]       @// Load u2_width from stack
-
+    add             r5, r5, 1
+    bic             r5, r5, #1
 
     ldr             r7, [sp, #40]       @// Load u2_strideu from stack
 
     ldr             r8, [sp, #52]       @// Load u2_dest_stride_uv from stack
 
     sub             r7, r7, r5, lsr #1  @// Source increment
 
     sub             r8, r8, r5          @// Destination increment
 
     mov             r5, r5, lsr #1
     mov             r4, r4, lsr #1
     ldr             r3, [sp, #24]       @// Load pu1_dest_uv from stack
@@ -330,20 +332,22 @@ yuv420sp_vu_row_loop_end_y:
 yuv420sp_vu_chroma:
 
     ldr             r3, [sp, #24]       @// Load pu1_dest_uv from stack
 
     ldr             r4, [sp, #28]       @// Load u2_height from stack
+    add             r4, r4, 1
 
     ldr             r5, [sp, #32]       @// Load u2_width from stack
-
+    add             r5, r5, 1
+    bic             r5, r5, #1
 
     ldr             r7, [sp, #40]       @// Load u2_strideu from stack
 
     ldr             r8, [sp, #52]       @// Load u2_dest_stride_uv from stack
 
     sub             r7, r7, r5, lsr #1  @// Source increment
 
     sub             r8, r8, r5          @// Destination increment
 
     mov             r5, r5, lsr #1
     mov             r4, r4, lsr #1
     ldr             r3, [sp, #24]       @// Load pu1_dest_uv from stack
diff --git a/common/armv8/impeg2_format_conv.s b/common/armv8/impeg2_format_conv.s
index 48baf04..ec76e29 100644
--- a/common/armv8/impeg2_format_conv.s
+++ b/common/armv8/impeg2_format_conv.s
@@ -182,13 +182,17 @@ yuv420sp_uv_row_loop__y:
 yuv420sp_uv_chroma:
     ldr             w7, [sp, #88]       //// Load u2_strideu from stack
     sxtw            x7, w7
 
     ldr             w8, [sp, #104]      //// Load u2_dest_stride_uv from stack
     sxtw            x8, w8
+    add             x6, x6, 1
+    bic             x6, x6, #1
+
+    add             x9, x9, 1
 
     sub             x7, x7, x6, lsr #1  //// Source increment
 
     sub             x8, x8, x6          //// Destination increment
 
     lsr             x6, x6, #1
     lsr             x5, x5, #1
@@ -355,13 +359,18 @@ yuv420sp_vu_row_loop__y:
 yuv420sp_vu_chroma:
     ldr             w7, [sp, #80]       //// Load u2_strideu from stack
     sxtw            x7, w7
 
     ldr             w8, [sp, #104]      //// Load u2_dest_stride_uv from stack
     sxtw            x8, w8
 
+    add             x6, x6, 1
+    bic             x6, x6, #1
+
+    add             x9, x9, 1
+
     sub             x7, x7, x6, lsr #1  //// Source increment
 
     sub             x8, x8, x6          //// Destination increment
 
     lsr             x6, x6, #1
     lsr             x5, x5, #1
diff --git a/common/impeg2_format_conv.c b/common/impeg2_format_conv.c
index ec0bcfb..b4d62cc 100644
--- a/common/impeg2_format_conv.c
+++ b/common/impeg2_format_conv.c
@@ -284,58 +284,58 @@ void impeg2_fmt_conv_yuv420p_to_yuv422ile(register UWORD8 *pu1_y,
 void impeg2_fmt_conv_yuv420p_to_yuv420sp_vu(UWORD8 *pu1_y, UWORD8 *pu1_u, UWORD8 *pu1_v,
                                      UWORD8 *pu1_dest_y, UWORD8 *pu1_dest_uv,
                                      UWORD32 u4_height,  UWORD32 u4_width,UWORD32 u4_stridey,
                                      UWORD32 u4_strideu, UWORD32 u4_stridev,
                                      UWORD32 u4_dest_stride_y, UWORD32 u4_dest_stride_uv,
                                      UWORD32 u4_convert_uv_only
                                      )
 
 {
 
 
     UWORD8 *pu1_src,*pu1_dst;
     UWORD8 *pu1_src_u, *pu1_src_v;
     UWORD16 i;
     UWORD32 u2_width_uv;
 
     UWORD32 u4_dest_inc_y=0, u4_dest_inc_uv=0;
 
 
     /* Copy Y buffer */
     pu1_dst = (UWORD8 *)pu1_dest_y;
     pu1_src = (UWORD8 *)pu1_y;
 
     u4_dest_inc_y =    u4_dest_stride_y;
     u4_dest_inc_uv =   u4_dest_stride_uv;
 
     if(0 == u4_convert_uv_only)
     {
         for(i = 0; i < u4_height; i++)
         {
             memcpy((void *)pu1_dst,(void *)pu1_src, u4_width);
             pu1_dst += u4_dest_inc_y;
             pu1_src += u4_stridey;
         }
     }
 
     /* Interleave Cb and Cr buffers */
     pu1_src_u = pu1_u;
     pu1_src_v = pu1_v;
     pu1_dst = pu1_dest_uv ;
-
+    u4_width = ((u4_width + 1) >> 1) << 1;
     u4_height = (u4_height + 1) >> 1;
     u2_width_uv = (u4_width + 1) >> 1;
     for(i = 0; i < u4_height ; i++)
     {
         UWORD32 j;
         for(j = 0; j < u2_width_uv; j++)
         {
             *pu1_dst++ = *pu1_src_v++;
             *pu1_dst++ = *pu1_src_u++;
 
         }
 
         pu1_dst += u4_dest_inc_uv - u4_width;
         pu1_src_u  += u4_strideu - u2_width_uv;
         pu1_src_v  += u4_stridev - u2_width_uv;
     }
 }
@@ -343,59 +343,59 @@ void impeg2_fmt_conv_yuv420p_to_yuv420sp_vu(UWORD8 *pu1_y, UWORD8 *pu1_u, UWORD8
 void impeg2_fmt_conv_yuv420p_to_yuv420sp_uv(UWORD8 *pu1_y, UWORD8 *pu1_u, UWORD8 *pu1_v,
                                      UWORD8 *pu1_dest_y, UWORD8 *pu1_dest_uv,
                                      UWORD32 u4_height,  UWORD32 u4_width,UWORD32 u4_stridey,
                                      UWORD32 u4_strideu, UWORD32 u4_stridev,
                                      UWORD32 u4_dest_stride_y, UWORD32 u4_dest_stride_uv,
                                      UWORD32 u4_convert_uv_only)
 
 {
 
 
     UWORD8 *pu1_src,*pu1_dst;
     UWORD8 *pu1_src_u, *pu1_src_v;
     UWORD16 i;
     UWORD32 u2_width_uv;
 
     UWORD32 u4_dest_inc_y=0, u4_dest_inc_uv=0;
 
 
     /* Copy Y buffer */
     pu1_dst = (UWORD8 *)pu1_dest_y;
     pu1_src = (UWORD8 *)pu1_y;
 
     u4_dest_inc_y =    u4_dest_stride_y;
     u4_dest_inc_uv =   u4_dest_stride_uv;
 
     if(0 == u4_convert_uv_only)
     {
         for(i = 0; i < u4_height; i++)
         {
             memcpy((void *)pu1_dst,(void *)pu1_src, u4_width);
             pu1_dst += u4_dest_inc_y;
             pu1_src += u4_stridey;
         }
     }
 
     /* Interleave Cb and Cr buffers */
     pu1_src_u = pu1_u;
     pu1_src_v = pu1_v;
     pu1_dst = pu1_dest_uv ;
-
+    u4_width = ((u4_width + 1) >> 1) << 1;
     u4_height = (u4_height + 1) >> 1;
     u2_width_uv = (u4_width + 1) >> 1;
     for(i = 0; i < u4_height ; i++)
     {
         UWORD32 j;
         for(j = 0; j < u2_width_uv; j++)
         {
             *pu1_dst++ = *pu1_src_u++;
             *pu1_dst++ = *pu1_src_v++;
         }
 
         pu1_dst += u4_dest_inc_uv - u4_width;
         pu1_src_u  += u4_strideu - u2_width_uv;
         pu1_src_v  += u4_stridev - u2_width_uv;
     }
 
 }
 
 
diff --git a/decoder/impeg2d_api_main.c b/decoder/impeg2d_api_main.c
index e0b67cb..4e6dfef 100644
--- a/decoder/impeg2d_api_main.c
+++ b/decoder/impeg2d_api_main.c
@@ -1487,47 +1487,43 @@ IV_API_CALL_STATUS_T impeg2d_api_fill_mem_rec(void *pv_api_ip,void *pv_api_op)
 UWORD32 impeg2d_get_outbuf_size(WORD32 pic_wd,UWORD32 pic_ht, WORD32 u1_chroma_format,UWORD32 *p_buf_size)
 {
     UWORD32 u4_min_num_out_bufs = 0;
     if(u1_chroma_format == IV_YUV_420P)
         u4_min_num_out_bufs = MIN_OUT_BUFS_420;
     else if(u1_chroma_format == IV_YUV_422ILE)
         u4_min_num_out_bufs = MIN_OUT_BUFS_422ILE;
     else if(u1_chroma_format == IV_RGB_565)
         u4_min_num_out_bufs = MIN_OUT_BUFS_RGB565;
     else if((u1_chroma_format == IV_YUV_420SP_UV)
                     || (u1_chroma_format == IV_YUV_420SP_VU))
         u4_min_num_out_bufs = MIN_OUT_BUFS_420SP;
 
     if(u1_chroma_format == IV_YUV_420P)
     {
         p_buf_size[0] = (pic_wd * pic_ht);
-        p_buf_size[1] = (pic_wd * pic_ht)
-                        >> 2;
-        p_buf_size[2] = (pic_wd * pic_ht)
-                        >> 2;
+        p_buf_size[1] = ((pic_wd + 1) >> 1) * ((pic_ht + 1) >> 1);
+        p_buf_size[2] = ((pic_wd + 1) >> 1) * ((pic_ht + 1) >> 1);
     }
     else if(u1_chroma_format == IV_YUV_422ILE)
     {
         p_buf_size[0] = (pic_wd * pic_ht)
                         * 2;
         p_buf_size[1] =
                         p_buf_size[2] = 0;
     }
     else if(u1_chroma_format == IV_RGB_565)
     {
         p_buf_size[0] = (pic_wd * pic_ht)
                         * 2;
         p_buf_size[1] =
                         p_buf_size[2] = 0;
     }
     else if((u1_chroma_format == IV_YUV_420SP_UV)
                     || (u1_chroma_format == IV_YUV_420SP_VU))
     {
         p_buf_size[0] = (pic_wd * pic_ht);
-        p_buf_size[1] = (pic_wd * pic_ht)
-                        >> 1;
+        p_buf_size[1] = ((pic_wd + 1) >> 1) * ((pic_ht + 1) >> 1) * 2;
         p_buf_size[2] = 0;
     }
-
     return u4_min_num_out_bufs;
 }
 
@@ -3142,417 +3138,417 @@ IV_API_CALL_STATUS_T impeg2d_api_check_struct_sanity(iv_obj_t *ps_handle,
 IV_API_CALL_STATUS_T impeg2d_api_entity(iv_obj_t *ps_dechdl,
                                         void *pv_api_ip,
                                         void *pv_api_op)
 {
     iv_obj_t *ps_dec_handle;
     dec_state_t *ps_dec_state;
     dec_state_multi_core_t *ps_dec_state_multi_core;
 
     impeg2d_video_decode_ip_t    *ps_dec_ip;
 
     impeg2d_video_decode_op_t    *ps_dec_op;
     WORD32 bytes_remaining;
     pic_buf_t *ps_disp_pic;
 
 
 
     ps_dec_ip = (impeg2d_video_decode_ip_t    *)pv_api_ip;
     ps_dec_op = (impeg2d_video_decode_op_t    *)pv_api_op;
 
     memset(ps_dec_op,0,sizeof(impeg2d_video_decode_op_t));
 
     ps_dec_op->s_ivd_video_decode_op_t.u4_size = sizeof(impeg2d_video_decode_op_t);
     ps_dec_op->s_ivd_video_decode_op_t.u4_output_present = 0;
     bytes_remaining = ps_dec_ip->s_ivd_video_decode_ip_t.u4_num_Bytes;
 
     ps_dec_handle = (iv_obj_t *)ps_dechdl;
 
     if(ps_dechdl == NULL)
     {
         return(IV_FAIL);
     }
 
 
 
     ps_dec_state_multi_core  = ps_dec_handle->pv_codec_handle;
     ps_dec_state = ps_dec_state_multi_core->ps_dec_state[0];
 
     ps_dec_state->ps_disp_frm_buf = &(ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf);
     if(0 == ps_dec_state->u4_share_disp_buf)
     {
         ps_dec_state->ps_disp_frm_buf->pv_y_buf  = ps_dec_ip->s_ivd_video_decode_ip_t.s_out_buffer.pu1_bufs[0];
         ps_dec_state->ps_disp_frm_buf->pv_u_buf  = ps_dec_ip->s_ivd_video_decode_ip_t.s_out_buffer.pu1_bufs[1];
         ps_dec_state->ps_disp_frm_buf->pv_v_buf  = ps_dec_ip->s_ivd_video_decode_ip_t.s_out_buffer.pu1_bufs[2];
     }
 
     ps_dec_state->ps_disp_pic = NULL;
     ps_dec_state->i4_frame_decoded = 0;
     /*rest bytes consumed */
     ps_dec_op->s_ivd_video_decode_op_t.u4_num_bytes_consumed = 0;
 
     ps_dec_op->s_ivd_video_decode_op_t.u4_error_code           = IV_SUCCESS;
 
     if((ps_dec_ip->s_ivd_video_decode_ip_t.pv_stream_buffer == NULL)&&(ps_dec_state->u1_flushfrm==0))
     {
         ps_dec_op->s_ivd_video_decode_op_t.u4_error_code |= 1 << IVD_UNSUPPORTEDPARAM;
         ps_dec_op->s_ivd_video_decode_op_t.u4_error_code |= IVD_DEC_FRM_BS_BUF_NULL;
         return IV_FAIL;
     }
 
 
     if (ps_dec_state->u4_num_frames_decoded > NUM_FRAMES_LIMIT)
     {
         ps_dec_op->s_ivd_video_decode_op_t.u4_error_code       = IMPEG2D_SAMPLE_VERSION_LIMIT_ERR;
         return(IV_FAIL);
     }
 
     if(((0 == ps_dec_state->u2_header_done) || (ps_dec_state->u2_decode_header == 1)) && (ps_dec_state->u1_flushfrm == 0))
     {
         impeg2d_dec_hdr(ps_dec_state,ps_dec_ip ,ps_dec_op);
         bytes_remaining -= ps_dec_op->s_ivd_video_decode_op_t.u4_num_bytes_consumed;
     }
 
     if((1 != ps_dec_state->u2_decode_header) &&
         (((bytes_remaining > 0) && (1 == ps_dec_state->u2_header_done)) || ps_dec_state->u1_flushfrm))
     {
         if(ps_dec_state->u1_flushfrm)
         {
             if(ps_dec_state->aps_ref_pics[1] != NULL)
             {
                 impeg2_disp_mgr_add(&ps_dec_state->s_disp_mgr, ps_dec_state->aps_ref_pics[1], ps_dec_state->aps_ref_pics[1]->i4_buf_id);
                 impeg2_buf_mgr_release(ps_dec_state->pv_pic_buf_mg, ps_dec_state->aps_ref_pics[1]->i4_buf_id, BUF_MGR_REF);
                 impeg2_buf_mgr_release(ps_dec_state->pv_pic_buf_mg, ps_dec_state->aps_ref_pics[0]->i4_buf_id, BUF_MGR_REF);
 
                 ps_dec_state->aps_ref_pics[1] = NULL;
                 ps_dec_state->aps_ref_pics[0] = NULL;
 
             }
             else if(ps_dec_state->aps_ref_pics[0] != NULL)
             {
                 impeg2_disp_mgr_add(&ps_dec_state->s_disp_mgr, ps_dec_state->aps_ref_pics[0], ps_dec_state->aps_ref_pics[0]->i4_buf_id);
                 impeg2_buf_mgr_release(ps_dec_state->pv_pic_buf_mg, ps_dec_state->aps_ref_pics[0]->i4_buf_id, BUF_MGR_REF);
 
                 ps_dec_state->aps_ref_pics[0] = NULL;
             }
             ps_dec_ip->s_ivd_video_decode_ip_t.u4_size                 = sizeof(impeg2d_video_decode_ip_t);
             ps_dec_op->s_ivd_video_decode_op_t.u4_size                 = sizeof(impeg2d_video_decode_op_t);
 
             ps_disp_pic = impeg2_disp_mgr_get(&ps_dec_state->s_disp_mgr, &ps_dec_state->i4_disp_buf_id);
 
             ps_dec_state->ps_disp_pic = ps_disp_pic;
             if(ps_disp_pic == NULL)
             {
                 ps_dec_op->s_ivd_video_decode_op_t.u4_output_present = 0;
             }
             else
             {
                 WORD32 fmt_conv;
                 if(0 == ps_dec_state->u4_share_disp_buf)
                 {
                     ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.pv_y_buf  = ps_dec_ip->s_ivd_video_decode_ip_t.s_out_buffer.pu1_bufs[0];
                     ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.pv_u_buf  = ps_dec_ip->s_ivd_video_decode_ip_t.s_out_buffer.pu1_bufs[1];
                     ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.pv_v_buf  = ps_dec_ip->s_ivd_video_decode_ip_t.s_out_buffer.pu1_bufs[2];
                     fmt_conv = 1;
                 }
                 else
                 {
                     ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.pv_y_buf  = ps_disp_pic->pu1_y;
                     if(IV_YUV_420P == ps_dec_state->i4_chromaFormat)
                     {
                         ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.pv_u_buf  = ps_disp_pic->pu1_u;
                         ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.pv_v_buf  = ps_disp_pic->pu1_v;
                         fmt_conv = 0;
                     }
                     else
                     {
                         UWORD8 *pu1_buf;
 
                         pu1_buf = ps_dec_state->as_disp_buffers[ps_disp_pic->i4_buf_id].pu1_bufs[1];
                         ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.pv_u_buf  = pu1_buf;
 
                         pu1_buf = ps_dec_state->as_disp_buffers[ps_disp_pic->i4_buf_id].pu1_bufs[2];
                         ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.pv_v_buf  = pu1_buf;
                         fmt_conv = 1;
                     }
                 }
 
                 if(fmt_conv == 1)
                 {
                     iv_yuv_buf_t *ps_dst;
 
 
                     ps_dst = &(ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf);
                     if(ps_dec_state->u4_deinterlace && (0 == ps_dec_state->u2_progressive_frame))
                     {
                         impeg2d_deinterlace(ps_dec_state,
                                             ps_disp_pic,
                                             ps_dst,
                                             0,
                                             ps_dec_state->u2_vertical_size);
 
                     }
                     else
                     {
                         impeg2d_format_convert(ps_dec_state,
                                                ps_disp_pic,
                                                ps_dst,
                                                0,
                                                ps_dec_state->u2_vertical_size);
                     }
                 }
 
                 if(ps_dec_state->u4_deinterlace)
                 {
                     if(ps_dec_state->ps_deint_pic)
                     {
                         impeg2_buf_mgr_release(ps_dec_state->pv_pic_buf_mg,
                                                ps_dec_state->ps_deint_pic->i4_buf_id,
                                                MPEG2_BUF_MGR_DEINT);
                     }
                     ps_dec_state->ps_deint_pic = ps_disp_pic;
                 }
                 if(0 == ps_dec_state->u4_share_disp_buf)
                     impeg2_buf_mgr_release(ps_dec_state->pv_pic_buf_mg, ps_disp_pic->i4_buf_id, BUF_MGR_DISP);
 
                 ps_dec_op->s_ivd_video_decode_op_t.u4_pic_ht = ps_dec_state->u2_vertical_size;
                 ps_dec_op->s_ivd_video_decode_op_t.u4_pic_wd = ps_dec_state->u2_horizontal_size;
                 ps_dec_op->s_ivd_video_decode_op_t.u4_output_present = 1;
 
                 ps_dec_op->s_ivd_video_decode_op_t.u4_disp_buf_id = ps_disp_pic->i4_buf_id;
                 ps_dec_op->s_ivd_video_decode_op_t.u4_ts = ps_disp_pic->u4_ts;
 
                 ps_dec_op->s_ivd_video_decode_op_t.e_output_format = (IV_COLOR_FORMAT_T)ps_dec_state->i4_chromaFormat;
 
                 ps_dec_op->s_ivd_video_decode_op_t.u4_is_ref_flag = (B_PIC != ps_dec_state->e_pic_type);
 
                 ps_dec_op->s_ivd_video_decode_op_t.u4_progressive_frame_flag           = IV_PROGRESSIVE;
 
                 ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_y_wd = ps_dec_state->u2_horizontal_size;
                 ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_y_strd = ps_dec_state->u4_frm_buf_stride;
                 ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_y_ht = ps_dec_state->u2_vertical_size;
 
-                ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_wd = ps_dec_state->u2_horizontal_size >> 1;
-                ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_strd = ps_dec_state->u4_frm_buf_stride >> 1;
-                ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_ht = ps_dec_state->u2_vertical_size >> 1;
+                ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_wd = (ps_dec_state->u2_horizontal_size + 1) >> 1;
+                ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_strd = (ps_dec_state->u4_frm_buf_stride + 1) >> 1;
+                ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_ht = (ps_dec_state->u2_vertical_size + 1) >> 1;
 
-                ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_v_wd = ps_dec_state->u2_horizontal_size >> 1;
-                ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_v_strd = ps_dec_state->u4_frm_buf_stride >> 1;
-                ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_v_ht = ps_dec_state->u2_vertical_size >> 1;
+                ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_v_wd = (ps_dec_state->u2_horizontal_size + 1) >> 1;
+                ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_v_strd = (ps_dec_state->u4_frm_buf_stride + 1) >> 1;
+                ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_v_ht = (ps_dec_state->u2_vertical_size + 1) >> 1;
                 ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_size = sizeof(ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf);
 
                 switch(ps_dec_state->i4_chromaFormat)
                 {
                     case IV_YUV_420SP_UV:
                     case IV_YUV_420SP_VU:
-                        ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_wd = ps_dec_state->u2_horizontal_size;
+                        ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_wd = (((ps_dec_state->u2_horizontal_size + 1) >> 1) << 1);
                         ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_strd = ps_dec_state->u4_frm_buf_stride;
                     break;
                     case IV_YUV_422ILE:
                         ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_wd = 0;
                         ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_ht = 0;
                         ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_v_wd = 0;
                         ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_v_ht = 0;
                     break;
                     default:
                     break;
                 }
 
 
             }
             if(ps_dec_op->s_ivd_video_decode_op_t.u4_output_present)
             {
                 if(1 == ps_dec_op->s_ivd_video_decode_op_t.u4_output_present)
                 {
                     INSERT_LOGO(ps_dec_ip->s_ivd_video_decode_ip_t.s_out_buffer.pu1_bufs[0],
                                 ps_dec_ip->s_ivd_video_decode_ip_t.s_out_buffer.pu1_bufs[1],
                                 ps_dec_ip->s_ivd_video_decode_ip_t.s_out_buffer.pu1_bufs[2],
                                 ps_dec_state->u4_frm_buf_stride,
                                 ps_dec_state->u2_horizontal_size,
                                 ps_dec_state->u2_vertical_size,
                                 ps_dec_state->i4_chromaFormat,
                                 ps_dec_state->u2_horizontal_size,
                                 ps_dec_state->u2_vertical_size);
                 }
                 return(IV_SUCCESS);
             }
             else
             {
                 ps_dec_state->u1_flushfrm = 0;
 
                 return(IV_FAIL);
             }
 
         }
         else if(ps_dec_state->u1_flushfrm==0)
         {
             ps_dec_ip->s_ivd_video_decode_ip_t.u4_size                 = sizeof(impeg2d_video_decode_ip_t);
             ps_dec_op->s_ivd_video_decode_op_t.u4_size                 = sizeof(impeg2d_video_decode_op_t);
             if(ps_dec_ip->s_ivd_video_decode_ip_t.u4_num_Bytes < 4)
             {
                 ps_dec_op->s_ivd_video_decode_op_t.u4_num_bytes_consumed = ps_dec_ip->s_ivd_video_decode_ip_t.u4_num_Bytes;
                 return(IV_FAIL);
             }
 
             if(1 == ps_dec_state->u4_share_disp_buf)
             {
                 if(0 == impeg2_buf_mgr_check_free(ps_dec_state->pv_pic_buf_mg))
                 {
                     ps_dec_op->s_ivd_video_decode_op_t.u4_error_code =
                                     (IMPEG2D_ERROR_CODES_T)IVD_DEC_REF_BUF_NULL;
                     return IV_FAIL;
                 }
             }
 
 
             ps_dec_op->s_ivd_video_decode_op_t.e_output_format = (IV_COLOR_FORMAT_T)ps_dec_state->i4_chromaFormat;
 
             ps_dec_op->s_ivd_video_decode_op_t.u4_is_ref_flag = (B_PIC != ps_dec_state->e_pic_type);
 
             ps_dec_op->s_ivd_video_decode_op_t.u4_progressive_frame_flag           = IV_PROGRESSIVE;
 
             if (0 == ps_dec_state->u4_frm_buf_stride)
             {
                 ps_dec_state->u4_frm_buf_stride = (ps_dec_state->u2_horizontal_size);
             }
 
             ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_y_wd = ps_dec_state->u2_horizontal_size;
             ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_y_strd = ps_dec_state->u4_frm_buf_stride;
             ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_y_ht = ps_dec_state->u2_vertical_size;
 
-            ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_wd = ps_dec_state->u2_horizontal_size >> 1;
-            ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_strd = ps_dec_state->u4_frm_buf_stride >> 1;
-            ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_ht = ps_dec_state->u2_vertical_size >> 1;
+            ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_wd = (ps_dec_state->u2_horizontal_size + 1) >> 1;
+            ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_strd = (ps_dec_state->u4_frm_buf_stride + 1) >> 1;
+            ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_ht = (ps_dec_state->u2_vertical_size + 1) >> 1;
 
-            ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_v_wd = ps_dec_state->u2_horizontal_size >> 1;
-            ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_v_strd = ps_dec_state->u4_frm_buf_stride >> 1;
-            ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_v_ht = ps_dec_state->u2_vertical_size >> 1;
+            ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_v_wd = (ps_dec_state->u2_horizontal_size + 1) >> 1;
+            ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_v_strd = (ps_dec_state->u4_frm_buf_stride + 1) >> 1;
+            ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_v_ht = (ps_dec_state->u2_vertical_size + 1) >> 1;
             ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_size = sizeof(ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf);
 
             switch(ps_dec_state->i4_chromaFormat)
             {
                 case IV_YUV_420SP_UV:
                 case IV_YUV_420SP_VU:
-                    ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_wd = ps_dec_state->u2_horizontal_size;
+                    ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_wd = (((ps_dec_state->u2_horizontal_size + 1) >> 1) << 1);
                     ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_strd = ps_dec_state->u4_frm_buf_stride;
                 break;
                 case IV_YUV_422ILE:
                     ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_wd = 0;
                     ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_u_ht = 0;
                     ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_v_wd = 0;
                     ps_dec_op->s_ivd_video_decode_op_t.s_disp_frm_buf.u4_v_ht = 0;
                 break;
                 default:
                 break;
             }
 
             if( ps_dec_state->u1_flushfrm == 0)
             {
                 ps_dec_state->u1_flushcnt    = 0;
 
                 ps_dec_state->ps_out_buf = &ps_dec_ip->s_ivd_video_decode_ip_t.s_out_buffer;
                 if (IV_SUCCESS != check_app_out_buf_size(ps_dec_state))
                 {
                     ps_dec_op->s_ivd_video_decode_op_t.u4_error_code = IVD_DISP_FRM_ZERO_OP_BUF_SIZE;
                     return IV_FAIL;
                 }
 
                 /*************************************************************************/
                 /*                              Frame Decode                             */
                 /*************************************************************************/
                 ps_dec_state->u4_inp_ts = ps_dec_ip->s_ivd_video_decode_ip_t.u4_ts;
 
                 impeg2d_dec_frm(ps_dec_state,ps_dec_ip,ps_dec_op);
 
                 if (IVD_ERROR_NONE ==
                         ps_dec_op->s_ivd_video_decode_op_t.u4_error_code)
                 {
                     if(ps_dec_state->u1_first_frame_done == 0)
                     {
                         ps_dec_state->u1_first_frame_done = 1;
                     }
 
                     if(ps_dec_state->ps_disp_pic)
                     {
                         ps_dec_op->s_ivd_video_decode_op_t.u4_output_present = 1;
                         switch(ps_dec_state->ps_disp_pic->e_pic_type)
                         {
                             case I_PIC :
                             ps_dec_op->s_ivd_video_decode_op_t.e_pic_type = IV_I_FRAME;
                             break;
 
                             case P_PIC:
                             ps_dec_op->s_ivd_video_decode_op_t.e_pic_type = IV_P_FRAME;
                             break;
 
                             case B_PIC:
                             ps_dec_op->s_ivd_video_decode_op_t.e_pic_type = IV_B_FRAME;
                             break;
 
                             case D_PIC:
                             ps_dec_op->s_ivd_video_decode_op_t.e_pic_type = IV_I_FRAME;
                             break;
 
                             default :
                             ps_dec_op->s_ivd_video_decode_op_t.e_pic_type = IV_FRAMETYPE_DEFAULT;
                             break;
                         }
                     }
                     else
                     {
                         ps_dec_op->s_ivd_video_decode_op_t.u4_output_present = 0;
                         ps_dec_op->s_ivd_video_decode_op_t.e_pic_type = IV_NA_FRAME;
                     }
 
                     ps_dec_state->u4_num_frames_decoded++;
                 }
             }
             else
             {
                 ps_dec_state->u1_flushcnt++;
             }
         }
         if(ps_dec_state->ps_disp_pic)
         {
             ps_dec_op->s_ivd_video_decode_op_t.u4_disp_buf_id = ps_dec_state->ps_disp_pic->i4_buf_id;
             ps_dec_op->s_ivd_video_decode_op_t.u4_ts = ps_dec_state->ps_disp_pic->u4_ts;
 
             if(0 == ps_dec_state->u4_share_disp_buf)
             {
                 impeg2_buf_mgr_release(ps_dec_state->pv_pic_buf_mg, ps_dec_state->ps_disp_pic->i4_buf_id, BUF_MGR_DISP);
             }
         }
 
         if(ps_dec_state->u4_deinterlace)
         {
             if(ps_dec_state->ps_deint_pic)
             {
                 impeg2_buf_mgr_release(ps_dec_state->pv_pic_buf_mg,
                                        ps_dec_state->ps_deint_pic->i4_buf_id,
                                        MPEG2_BUF_MGR_DEINT);
             }
             ps_dec_state->ps_deint_pic = ps_dec_state->ps_disp_pic;
         }
 
         if(1 == ps_dec_op->s_ivd_video_decode_op_t.u4_output_present)
         {
             INSERT_LOGO(ps_dec_ip->s_ivd_video_decode_ip_t.s_out_buffer.pu1_bufs[0],
                         ps_dec_ip->s_ivd_video_decode_ip_t.s_out_buffer.pu1_bufs[1],
                         ps_dec_ip->s_ivd_video_decode_ip_t.s_out_buffer.pu1_bufs[2],
                         ps_dec_state->u4_frm_buf_stride,
                         ps_dec_state->u2_horizontal_size,
                         ps_dec_state->u2_vertical_size,
                         ps_dec_state->i4_chromaFormat,
                         ps_dec_state->u2_horizontal_size,
                         ps_dec_state->u2_vertical_size);
         }
 
     }
 
     ps_dec_op->s_ivd_video_decode_op_t.u4_progressive_frame_flag = 1;
     ps_dec_op->s_ivd_video_decode_op_t.e4_fld_type     = ps_dec_state->s_disp_op.e4_fld_type;
 
 
     if(ps_dec_op->s_ivd_video_decode_op_t.u4_error_code)
         return IV_FAIL;
     else
         return IV_SUCCESS;
 }
