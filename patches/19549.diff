commit 35c64f67235db45be33a8b1e49372f5db86e1e82
Author: Herb Derby <herb@google.com>
Date:   Wed Dec 18 14:04:37 2019 -0500

    Only checksum and query a valid descriptor
    
    Bug: oss-fuzz:19549
    
    Change-Id: I941470cfa31c46b3e92cf53877efd2da8d181c01
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/260896
    Commit-Queue: Herb Derby <herb@google.com>
    Reviewed-by: Kevin Lubick <kjlubick@google.com>

diff --git a/fuzz/FuzzSkDescriptor.cpp b/fuzz/FuzzSkDescriptor.cpp
index 4a68901f98..4dbc14f607 100644
--- a/fuzz/FuzzSkDescriptor.cpp
+++ b/fuzz/FuzzSkDescriptor.cpp
@@ -12,67 +12,66 @@
 DEF_FUZZ(SkDescriptor, fuzz) {
     int32_t numEntries;
     fuzz->next(&numEntries);
 
     // Limit this to keep the fuzz operations fast.
     if (numEntries < 0 || numEntries > 300) {
         return;
     }
 
-    size_t len = SkDescriptor::ComputeOverhead(numEntries);
-    auto desc = SkDescriptor::Alloc(len);
+    size_t overhead = SkDescriptor::ComputeOverhead(numEntries);
+    size_t data;
+    fuzz->nextRange(&data, 0, 500);
+    auto desc = SkDescriptor::Alloc(overhead + data);
     for (int32_t i = 0; i<numEntries && !fuzz->exhausted(); i++) {
         uint32_t tag;
         fuzz->next(&tag);
         // Valid use of the API requires that tag is truthy and that
         // the length is aligned to 4. If the fuzzed data doesn't conform,
         // return to signal that this is "boring" data.
         if (!tag) {
             return;
         }
         size_t length;
         fuzz->next(&length);
         if (SkAlign4(length) != length) {
             return;
         }
 
         uint8_t choice;
-        fuzz->nextRange(&choice, 0, 2);
+        fuzz->nextRange(&choice, 0, 1);
         switch(choice) {
-            case 0: { // use nullptr
-                desc->addEntry(tag, length, nullptr);
-                break;
-            }
-            case 1: { // use SkScalerContextRec
+            case 0: { // use SkScalerContextRec
                 SkScalerContextRec rec;
                 fuzz->next(&rec);
                 desc->addEntry(tag, sizeof(rec), &rec);
                 break;
             }
-            case 2: { // use arbitrary data
+            case 1: { // use arbitrary data
                 if (fuzz->remaining() < length) {
                     // Can't initialize all that we requested, so bail out.
                     return;
                 }
                 uint8_t* bytes = new uint8_t[length];
                 fuzz->nextN(bytes, length);
                 desc->addEntry(tag, length, bytes);
                 delete[] bytes;
                 break;
             }
             default: {
                 SK_ABORT("Did you update the range in FuzzSkDescriptor?");
             }
         }
     }
 
     // Exercise the API to make sure we don't step out of bounds, etc.
 
-    desc->computeChecksum();
-    desc->isValid();
+    if (desc->isValid()) {
+        desc->computeChecksum();
 
-    uint32_t tagToFind;
-    fuzz->next(&tagToFind);
+        uint32_t tagToFind;
+        fuzz->next(&tagToFind);
 
-    uint32_t ignore;
-    desc->findEntry(tagToFind, &ignore);
+        uint32_t ignore;
+        desc->findEntry(tagToFind, &ignore);
+    }
 }
