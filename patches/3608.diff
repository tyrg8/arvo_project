commit a3d1057a735d923626f1f6bdc0f662a13d0cba6f
Author: Glenn Randers-Pehrson <glennrp at users.sourceforge.net>
Date:   Wed Oct 11 16:58:39 2017 -0500

    [libpng16] Fix typo in fuzzer (png_info_ptr should be info_ptr)

diff --git a/contrib/oss-fuzz/libpng_read_fuzzer.cc b/contrib/oss-fuzz/libpng_read_fuzzer.cc
index bfce5bc98..64c870fb0 100644
--- a/contrib/oss-fuzz/libpng_read_fuzzer.cc
+++ b/contrib/oss-fuzz/libpng_read_fuzzer.cc
@@ -82,108 +82,108 @@ static const int kPngHeaderSize = 8;
 // Entry point for LibFuzzer.
 // Roughly follows the libpng book example:
 // http://www.libpng.org/pub/png/book/chapter13.html
 extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
   if (size < kPngHeaderSize) {
     return 0;
   }
 
   std::vector<unsigned char> v(data, data + size);
   if (png_sig_cmp(v.data(), 0, kPngHeaderSize)) {
     // not a PNG.
     return 0;
   }
 
   PngObjectHandler png_handler;
   png_handler.png_ptr = nullptr;
   png_handler.row_ptr = nullptr;
   png_handler.info_ptr = nullptr;
   png_handler.end_info_ptr = nullptr;
 
   png_handler.png_ptr = png_create_read_struct
     (PNG_LIBPNG_VER_STRING, nullptr, nullptr, nullptr);
   if (!png_handler.png_ptr) {
     return 0;
   }
 
   png_handler.info_ptr = png_create_info_struct(png_handler.png_ptr);
   if (!png_handler.info_ptr) {
     PNG_CLEANUP
     return 0;
   }
 
   png_handler.end_info_ptr = png_create_info_struct(png_handler.png_ptr);
   if (!png_handler.end_info_ptr) {
     PNG_CLEANUP
     return 0;
   }
 
   png_set_crc_action(png_handler.png_ptr, PNG_CRC_QUIET_USE, PNG_CRC_QUIET_USE);
 #ifdef PNG_IGNORE_ADLER32
   png_set_option(png_handler.png_ptr, PNG_IGNORE_ADLER32, PNG_OPTION_ON);
 #endif
 
   // Setting up reading from buffer.
   png_handler.buf_state = new BufState();
   png_handler.buf_state->data = data + kPngHeaderSize;
   png_handler.buf_state->bytes_left = size - kPngHeaderSize;
   png_set_read_fn(png_handler.png_ptr, png_handler.buf_state, user_read_data);
   png_set_sig_bytes(png_handler.png_ptr, kPngHeaderSize);
 
   if (setjmp(png_jmpbuf(png_handler.png_ptr))) {
     PNG_CLEANUP
     return 0;
   }
 
   // Reading.
   png_read_info(png_handler.png_ptr, png_handler.info_ptr);
 
   // reset error handler to put png_deleter into scope.
   if (setjmp(png_jmpbuf(png_handler.png_ptr))) {
     PNG_CLEANUP
     return 0;
   }
 
   png_uint_32 width, height;
   int bit_depth, color_type, interlace_type, compression_type;
   int filter_type;
 
   if (!png_get_IHDR(png_handler.png_ptr, png_handler.info_ptr, &width,
                     &height, &bit_depth, &color_type, &interlace_type,
                     &compression_type, &filter_type)) {
     PNG_CLEANUP
     return 0;
   }
 
   // This is going to be too slow.
   if (width && height > 100000000 / width) {
     PNG_CLEANUP
     return 0;
   }
 
   // Set several transforms that browsers typically use:
   png_set_gray_to_rgb(png_handler.png_ptr);
   png_set_expand(png_handler.png_ptr);
   png_set_scale_16(png_handler.png_ptr);
   png_set_add_alpha(png_handler.png_ptr, 0xffff, PNG_FILLER_AFTER);
 
   int passes = png_set_interlace_handling(png_handler.png_ptr);
   png_start_read_image(png_handler.png_ptr);
 
-  png_read_update_info(png_handler.png_ptr, png_handler.png_info_ptr);
+  png_read_update_info(png_handler.png_ptr, png_handler.info_ptr);
 
   png_handler.row_ptr = png_malloc(
       png_handler.png_ptr, png_get_rowbytes(png_handler.png_ptr,
                                             png_handler.info_ptr));
 
   for (int pass = 0; pass < passes; ++pass) {
     for (png_uint_32 y = 0; y < height; ++y) {
       png_read_row(png_handler.png_ptr,
                    static_cast<png_bytep>(png_handler.row_ptr), nullptr);
     }
   }
 
   png_read_end(png_handler.png_ptr, png_handler.end_info_ptr);
 
   PNG_CLEANUP
   return 0;
 }
