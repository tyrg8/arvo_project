commit 0326733ef299ef9b62cddcdef70df052f298ea46
Merge: 5c86a73b7 117d5d5aa
Author: eugene7646 <elivis@basistech.com>
Date:   Wed Sep 28 09:41:22 2022 -0400

    Merge pull request #2764 from gdicristofaro/8429-resultsToOrphanFiles
    
    8429 fix for files appearing in OrphanFiles instead of deleted folder

diff --git a/tsk/fs/ntfs_dent.cpp b/tsk/fs/ntfs_dent.cpp
index b666131bd..3bc7a78ff 100644
--- a/tsk/fs/ntfs_dent.cpp
+++ b/tsk/fs/ntfs_dent.cpp
@@ -761,637 +761,639 @@ TSK_RETVAL_ENUM
 ntfs_dir_open_meta(TSK_FS_INFO * a_fs, TSK_FS_DIR ** a_fs_dir,
     TSK_INUM_T a_addr, int recursion_depth)
 {
     NTFS_INFO *ntfs = (NTFS_INFO *) a_fs;
     TSK_FS_DIR *fs_dir;
     const TSK_FS_ATTR *fs_attr_root = NULL;
     const TSK_FS_ATTR *fs_attr_idx;
     char *idxalloc;
     ntfs_idxentry *idxe;
     ntfs_idxroot *idxroot;
     ntfs_idxelist *idxelist;
     ntfs_idxrec *idxrec_p, *idxrec;
     TSK_OFF_T idxalloc_len;
     TSK_FS_LOAD_FILE load_file;
 
     /* In this function, we will return immediately if we get an error.
      * If we get corruption though, we will record that in 'retval_final'
      * and continue processing.
      */
     TSK_RETVAL_ENUM retval_final = TSK_OK;
     TSK_RETVAL_ENUM retval_tmp;
 
     /* sanity check */
     if (a_addr < a_fs->first_inum || a_addr > a_fs->last_inum) {
         tsk_error_reset();
         tsk_error_set_errno(TSK_ERR_FS_WALK_RNG);
         tsk_error_set_errstr("ntfs_dir_open_meta: inode value: %" PRIuINUM
             "\n", a_addr);
         return TSK_ERR;
     }
     else if (a_fs_dir == NULL) {
         tsk_error_reset();
         tsk_error_set_errno(TSK_ERR_FS_ARG);
         tsk_error_set_errstr
             ("ntfs_dir_open_meta: NULL fs_attr argument given");
         return TSK_ERR;
     }
 
     if (tsk_verbose)
         tsk_fprintf(stderr,
             "ntfs_open_dir: Processing directory %" PRIuINUM "\n", a_addr);
 
 
     fs_dir = *a_fs_dir;
     if (fs_dir) {
         tsk_fs_dir_reset(fs_dir);
         fs_dir->addr = a_addr;
     }
     else {
         if ((*a_fs_dir = fs_dir =
                 tsk_fs_dir_alloc(a_fs, a_addr, 128)) == NULL) {
             return TSK_ERR;
         }
     }
 
     //  handle the orphan directory if its contents were requested
     if (a_addr == TSK_FS_ORPHANDIR_INUM(a_fs)) {
         return tsk_fs_dir_find_orphans(a_fs, fs_dir);
     }
 
     /* Get the inode and verify it has attributes */
     if ((fs_dir->fs_file =
             tsk_fs_file_open_meta(a_fs, NULL, a_addr)) == NULL) {
         tsk_error_errstr2_concat("- ntfs_dir_open_meta");
         return TSK_COR;
     }
 
     if (!(fs_dir->fs_file->meta->attr)) {
         tsk_error_reset();
         tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
         tsk_error_set_errstr("dent_walk: Error: Directory address %"
             PRIuINUM " has no attributes", a_addr);
         return TSK_COR;
     }
 
     // Update with the sequence number
     fs_dir->seq = fs_dir->fs_file->meta->seq;
 
     /*
      * Read the Index Root Attribute  -- we do some sanity checking here
      * to report errors before we start to make up data for the "." and ".."
      * entries
      */
     fs_attr_root =
         tsk_fs_attrlist_get(fs_dir->fs_file->meta->attr,
         TSK_FS_ATTR_TYPE_NTFS_IDXROOT);
     if (!fs_attr_root) {
         tsk_error_errstr2_concat(" - dent_walk: $IDX_ROOT not found");
         return TSK_COR;
     }
 
     if (fs_attr_root->flags & TSK_FS_ATTR_NONRES) {
         tsk_error_reset();
         tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
         tsk_error_set_errstr
             ("dent_walk: $IDX_ROOT is not resident - it should be");
         return TSK_COR;
     }
     idxroot = (ntfs_idxroot *) fs_attr_root->rd.buf;
 
     /* Verify that the attribute type is $FILE_NAME */
     if (tsk_getu32(a_fs->endian, idxroot->type) == 0) {
         tsk_error_reset();
         tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
         tsk_error_set_errstr
             ("dent_walk: Attribute type in index root is 0");
         return TSK_COR;
     }
     else if (tsk_getu32(a_fs->endian, idxroot->type) != NTFS_ATYPE_FNAME) {
         tsk_error_reset();
         tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
         tsk_error_set_errstr("ERROR: Directory index is sorted by type: %"
             PRIu32 ".\nOnly $FNAME is currently supported",
             tsk_getu32(a_fs->endian, idxroot->type));
         return TSK_COR;
     }
 
     
 
     /*
      * NTFS does not have "." and ".." entries in the index trees
      * (except for a "." entry in the root directory)
      *
      * So, we'll make 'em up by making a TSK_FS_NAME structure for
      * a '.' and '..' entry and call the action
      */
     if (a_addr != a_fs->root_inum) {    // && (flags & TSK_FS_NAME_FLAG_ALLOC)) {
         TSK_FS_NAME *fs_name;
         TSK_FS_META_NAME_LIST *fs_name_list;
 
         if (tsk_verbose)
             tsk_fprintf(stderr,
                 "ntfs_dir_open_meta: Creating . and .. entries\n");
 
         if ((fs_name = tsk_fs_name_alloc(16, 0)) == NULL) {
             return TSK_ERR;
         }
         /*
          * "."
          */
         
         fs_name->type = TSK_FS_NAME_TYPE_DIR;
         strcpy(fs_name->name, ".");
 
         fs_name->meta_addr = a_addr;
         if (fs_dir->fs_file->meta->flags & TSK_FS_META_FLAG_UNALLOC) {
             fs_name->flags = TSK_FS_NAME_FLAG_UNALLOC;
             /* If the folder was deleted, the MFT entry sequence will have been incremented.
              * File name entries are not incremented on delete, so make it one less to
              * be consistent. */
             fs_name->meta_seq = fs_dir->fs_file->meta->seq - 1;
         }
         else {
             fs_name->flags = TSK_FS_NAME_FLAG_ALLOC;
             fs_name->meta_seq = fs_dir->fs_file->meta->seq;
         }
         if (tsk_fs_dir_add(fs_dir, fs_name)) {
             tsk_fs_name_free(fs_name);
             return TSK_ERR;
         }
 
 
         /*
          * ".."
          */
         strcpy(fs_name->name, "..");
         fs_name->type = TSK_FS_NAME_TYPE_DIR;
 
         /* The fs_name structure holds the parent inode value, so we
          * just cycle using those
          */
         for (fs_name_list = fs_dir->fs_file->meta->name2;
             fs_name_list != NULL; fs_name_list = fs_name_list->next) {
             fs_name->meta_addr = fs_name_list->par_inode;
             fs_name->meta_seq = fs_name_list->par_seq;
             if (tsk_fs_dir_add(fs_dir, fs_name)) {
                 tsk_fs_name_free(fs_name);
                 return TSK_ERR;
             }
         }
 
         tsk_fs_name_free(fs_name);
         fs_name = NULL;
     }
 
 
     /* Now we return to processing the Index Root Attribute */
     if (tsk_verbose)
         tsk_fprintf(stderr,
             "ntfs_dir_open_meta: Processing $IDX_ROOT of inum %" PRIuINUM
             "\n", a_addr);
 
     /* Get the header of the index entry list */
     idxelist = &idxroot->list;
 
     /* Verify the offset pointers */
     if ((tsk_getu32(a_fs->endian, idxelist->seqend_off) <
             tsk_getu32(a_fs->endian, idxelist->begin_off)) ||
         (tsk_getu32(a_fs->endian, idxelist->bufend_off) <
             tsk_getu32(a_fs->endian, idxelist->seqend_off)) ||
         (((uintptr_t) idxelist + tsk_getu32(a_fs->endian,
                     idxelist->bufend_off)) >
             ((uintptr_t) fs_attr_root->rd.buf +
                 fs_attr_root->rd.buf_size))) {
         tsk_error_reset();
         tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
         tsk_error_set_errstr
             ("Error: Index list offsets are invalid on entry: %" PRIuINUM,
             fs_dir->fs_file->meta->addr);
         return TSK_COR;
     }
 
     /* Get the offset to the start of the index entry list */
     idxe = (ntfs_idxentry *) ((uintptr_t) idxelist +
         tsk_getu32(a_fs->endian, idxelist->begin_off));
 
     retval_tmp = ntfs_proc_idxentry(ntfs, fs_dir,
         (fs_dir->fs_file->meta->flags & TSK_FS_META_FLAG_UNALLOC) ? 1 : 0,
         idxe,
         tsk_getu32(a_fs->endian, idxelist->bufend_off) -
         tsk_getu32(a_fs->endian, idxelist->begin_off),
         tsk_getu32(a_fs->endian, idxelist->seqend_off) -
         tsk_getu32(a_fs->endian, idxelist->begin_off));
 
     // stop if we get an error, continue if we got corruption
     if (retval_tmp == TSK_ERR) {
         return TSK_ERR;
     }
     else if (retval_tmp == TSK_COR) {
         retval_final = TSK_COR;
     }
 
     /*
      * get the index allocation attribute if it exists (it doesn't for
      * small directories
      */
     fs_attr_idx =
         tsk_fs_attrlist_get(fs_dir->fs_file->meta->attr,
         TSK_FS_ATTR_TYPE_NTFS_IDXALLOC);
 
 
     /* if we don't have an index alloc then return, we have processed
      * all of the entries
      */
     if (!fs_attr_idx) {
         if (tsk_getu32(a_fs->endian,
                 idxelist->flags) & NTFS_IDXELIST_CHILD) {
             tsk_error_reset();
             tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
             tsk_error_set_errstr
                 ("Error: $IDX_ROOT says there should be children, but there isn't");
             return TSK_COR;
         }
     }
     else {
         unsigned int off;
 
         if (fs_attr_idx->flags & TSK_FS_ATTR_RES) {
             tsk_error_reset();
             tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
             tsk_error_set_errstr
                 ("$IDX_ALLOC is Resident - it shouldn't be");
             return TSK_COR;
         }
 
-	// Taking 128 MiB as an arbitrary upper bound
-        if ((fs_attr_idx->nrd.allocsize == 0) || (fs_attr_idx->nrd.allocsize > (128 * 1024 * 1024))) {
+        // Taking 128 MiB as an arbitrary upper bound
+        if (fs_attr_idx->nrd.allocsize > (128 * 1024 * 1024)) {
             tsk_error_reset();
-            tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
-            tsk_error_set_errstr
-                ("fs_attr_idx->nrd.allocsize value out of bounds");
-            return TSK_COR;
+           tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
+           tsk_error_set_errstr
+               ("fs_attr_idx->nrd.allocsize value out of bounds");
+           return TSK_COR;
         }
 
         /*
          * Copy the index allocation run into a big buffer
          */
         idxalloc_len = fs_attr_idx->nrd.allocsize;
-        if ((idxalloc = (char *)tsk_malloc((size_t) idxalloc_len)) == NULL) {
+        // default to null unless length is greater than 0
+        idxalloc = NULL;
+        if ((idxalloc_len > 0) && ((idxalloc = (char *)tsk_malloc((size_t)idxalloc_len)) == NULL)) {
             return TSK_ERR;
         }
 
         /* Fill in the loading data structure */
         load_file.total = load_file.left = (size_t) idxalloc_len;
         load_file.cur = load_file.base = idxalloc;
 
         if (tsk_verbose)
             tsk_fprintf(stderr,
                 "ntfs_dir_open_meta: Copying $IDX_ALLOC into buffer\n");
 
         if (tsk_fs_attr_walk(fs_attr_idx,
                 TSK_FS_FILE_WALK_FLAG_SLACK, tsk_fs_load_file_action,
                 (void *) &load_file)) {
             free(idxalloc);
             tsk_error_errstr2_concat(" - ntfs_dir_open_meta");
             return TSK_COR;     // this could be an error though
         }
 
         /* Not all of the directory was copied, so we exit */
         if (load_file.left > 0) {
             free(idxalloc);
 
             tsk_error_reset();
             tsk_error_set_errno(TSK_ERR_FS_FWALK);
             tsk_error_set_errstr("Error reading directory contents: %"
                 PRIuINUM "\n", a_addr);
             return TSK_COR;
         }
 
         /*
          * The idxalloc is a big buffer that contains one or more
          * idx buffer structures.  Each idxrec is a node in the B-Tree.
          * We do not process the tree as a tree because then we could
          * not find the deleted file names.
          *
          * Therefore, we scan the big buffer looking for the index record
          * structures.  We save a pointer to the known beginning (idxrec_p).
          * Then we scan for the beginning of the next one (idxrec) and process
          * everything in the middle as an ntfs_idxrec.  We can't use the
          * size given because then we wouldn't see the deleted names
          */
 
         /* Set the previous pointer to NULL */
         idxrec_p = idxrec = NULL;
 
         /* Loop by cluster size */
         for (off = 0; off < idxalloc_len; off += ntfs->csize_b) {
             uint32_t list_len, rec_len;
 
             // Ensure that there is enough data for an idxrec
             if ((idxalloc_len < sizeof(ntfs_idxrec)) || (off > idxalloc_len - sizeof(ntfs_idxrec))) {
                 tsk_error_reset();
                 tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
                 tsk_error_set_errstr
                     ("ntfs_dir_open_meta: Not enough data in idxalloc buffer for an idxrec.");
                 free(idxalloc);
                 return TSK_COR;
             }
 
             idxrec = (ntfs_idxrec *) & idxalloc[off];
 
             if (tsk_verbose)
                 tsk_fprintf(stderr,
                     "ntfs_dir_open_meta: Index Buffer Offset: %d  Magic: %"
                     PRIx32 "\n", off, tsk_getu32(a_fs->endian,
                         idxrec->magic));
 
             /* Is this the beginning of an index record? */
             if (tsk_getu32(a_fs->endian,
                     idxrec->magic) != NTFS_IDXREC_MAGIC)
                 continue;
 
 
             /* idxrec_p is only NULL for the first time
              * Set it and start again to find the next one */
             if (idxrec_p == NULL) {
                 idxrec_p = idxrec;
                 continue;
             }
 
             /* Process the previous structure */
 
             /* idxrec points to the next idxrec structure, idxrec_p
              * points to the one we are going to process
              */
             rec_len =
                 (uint32_t) ((uintptr_t) idxrec - (uintptr_t) idxrec_p);
 
             if (tsk_verbose)
                 tsk_fprintf(stderr,
                     "ntfs_dir_open_meta: Processing previous index record (len: %"
                     PRIu32 ")\n", rec_len);
 
             /* remove the update sequence in the index record */
             if (ntfs_fix_idxrec(ntfs, idxrec_p, rec_len)) {
                 free(idxalloc);
                 return TSK_COR;
             }
 
             /* Locate the start of the index entry list */
             idxelist = &idxrec_p->list;
             idxe = (ntfs_idxentry *) ((uintptr_t) idxelist +
                 tsk_getu32(a_fs->endian, idxelist->begin_off));
 
             /* the length from the start of the next record to where our
              * list starts.
              * This should be the same as bufend_off in idxelist, but we don't
              * trust it.
              */
             list_len = (uint32_t) ((uintptr_t) idxrec - (uintptr_t) idxe);
 
             /* Verify the offset pointers */
             if (((uintptr_t) idxe > (uintptr_t) idxrec) ||
                 ((uintptr_t) idxelist +
                     tsk_getu32(a_fs->endian,
                         idxelist->seqend_off) > (uintptr_t) idxrec)) {
                 tsk_error_reset();
                 tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
                 tsk_error_set_errstr
                     ("Error: Index list offsets are invalid on entry: %"
                     PRIuINUM, fs_dir->fs_file->meta->addr);
                 free(idxalloc);
                 return TSK_COR;
             }
 
 
             /* process the list of index entries */
             retval_tmp = ntfs_proc_idxentry(ntfs, fs_dir,
                 (fs_dir->fs_file->meta->
                     flags & TSK_FS_META_FLAG_UNALLOC) ? 1 : 0, idxe,
                 list_len, tsk_getu32(a_fs->endian,
                     idxelist->seqend_off) - tsk_getu32(a_fs->endian,
                     idxelist->begin_off));
             // stop if we get an error, record if we get corruption
             if (retval_tmp == TSK_ERR) {
                 free(idxalloc);
                 return TSK_ERR;
             }
             else if (retval_tmp == TSK_COR) {
                 retval_final = TSK_COR;
             }
 
             /* reset the pointer to the next record */
             idxrec_p = idxrec;
 
         }                       /* end of cluster loop */
 
 
         /* Process the final record */
         if (idxrec_p) {
             uint32_t list_len, rec_len;
 
             /* Length from end of attribute to start of this */
             rec_len =
                 (uint32_t) (idxalloc_len - ((uintptr_t) idxrec_p -
                 (uintptr_t) idxalloc));
 
             if (tsk_verbose)
                 tsk_fprintf(stderr,
                     "ntfs_dir_open_meta: Processing final index record (len: %"
                     PRIu32 ")\n", rec_len);
 
             /* remove the update sequence */
             if (ntfs_fix_idxrec(ntfs, idxrec_p, rec_len)) {
                 free(idxalloc);
                 return TSK_COR;
             }
 
             idxelist = &idxrec_p->list;
             if (tsk_getu32(a_fs->endian, idxelist->begin_off) > rec_len) {
                 tsk_error_reset();
                 tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
                 tsk_error_set_errstr
                     ("Error: Index list offsets are invalid on entry: %"
                     PRIuINUM, fs_dir->fs_file->meta->addr);
                 free(idxalloc);
                 return TSK_COR;
             }
 
             idxe = (ntfs_idxentry *) ((uintptr_t) idxelist +
                 tsk_getu32(a_fs->endian, idxelist->begin_off));
 
             /* This is the length of the idx entries */
             list_len =
                 (uint32_t) (((uintptr_t) idxalloc + idxalloc_len) -
                 (uintptr_t) idxe);
 
             /* Verify the offset pointers */
             if ((list_len > rec_len) ||
                 ((uintptr_t) idxelist +
                     tsk_getu32(a_fs->endian, idxelist->seqend_off) >
                     (uintptr_t) idxalloc + idxalloc_len)) {
                 tsk_error_reset();
                 tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
                 tsk_error_set_errstr
                     ("Error: Index list offsets are invalid on entry: %"
                     PRIuINUM, fs_dir->fs_file->meta->addr);
                 free(idxalloc);
                 return TSK_COR;
             }
 
             /* process the list of index entries */
             retval_tmp = ntfs_proc_idxentry(ntfs, fs_dir,
                 (fs_dir->fs_file->meta->
                     flags & TSK_FS_META_FLAG_UNALLOC) ? 1 : 0, idxe,
                 list_len, tsk_getu32(a_fs->endian,
                     idxelist->seqend_off) - tsk_getu32(a_fs->endian,
                     idxelist->begin_off));
             // stop if we get an error, record if we get corruption
             if (retval_tmp == TSK_ERR) {
                 free(idxalloc);
                 return TSK_ERR;
             }
             else if (retval_tmp == TSK_COR) {
                 retval_final = TSK_COR;
             }
         }
 
         free(idxalloc);
     }
 
 
     // get the orphan files
     // load and cache the map if it has not already been done
     tsk_take_lock(&ntfs->orphan_map_lock);
     if (ntfs->orphan_map == NULL) {
         // we do this to make it non-NULL. WE had some images that
         // had no orphan files and it repeatedly did inode_walks
         // because orphan_map was always NULL
         getParentMap(ntfs);
 
         if (a_fs->inode_walk(a_fs, a_fs->first_inum, a_fs->last_inum,
                 (TSK_FS_META_FLAG_ENUM)(TSK_FS_META_FLAG_UNALLOC | TSK_FS_META_FLAG_ALLOC), ntfs_parent_act, NULL)) {
             tsk_release_lock(&ntfs->orphan_map_lock);
             return TSK_ERR;
         }
     }
 
     
     /* see if there are any entries in MFT for this dir that we didn't see.
      * Need to make sure it is for this version (sequence) though.
      * NTFS Updates the sequence when a directory is deleted and not when 
      * it is allocated.  So, if we have a deleted directory, then use
      * its previous sequence number to find the files that were in it when
      * it was allocated.
      */
     uint16_t seqToSrch = fs_dir->fs_file->meta->seq;
     if (fs_dir->fs_file->meta->flags & TSK_FS_META_FLAG_UNALLOC) {
         if (seqToSrch > 0)
             seqToSrch--;
         else
             // I can't imagine how we get here or what we should do except maybe not do the search.
             seqToSrch = 0;
     }
 
     if (ntfs_parent_map_exists(ntfs, a_addr, seqToSrch)) {
         TSK_FS_NAME *fs_name;
         
         std::vector <NTFS_META_ADDR> &childFiles = ntfs_parent_map_get(ntfs, a_addr, seqToSrch);
 
         if ((fs_name = tsk_fs_name_alloc(256, 0)) == NULL){
             tsk_release_lock(&ntfs->orphan_map_lock);
             return TSK_ERR;
         }
         
         fs_name->type = TSK_FS_NAME_TYPE_UNDEF;
         fs_name->par_addr = a_addr;
         fs_name->par_seq = fs_dir->fs_file->meta->seq;
 
         for (size_t a = 0; a < childFiles.size(); a++) {
             TSK_FS_FILE *fs_file_orp = NULL;
 
             /* Check if fs_dir already has an allocated entry for this
              * file.  If so, ignore it. We used to rely on fs_dir_add
              * to get rid of this, but it wasted a lot of lookups. If 
              * We have only unalloc for this same entry (from idx entries),
              * then try to add it.   If we got an allocated entry from
              * the idx entries, then assume we have everything. */
             if (tsk_fs_dir_contains(fs_dir, childFiles[a].getAddr(), childFiles[a].getHash()) == TSK_FS_NAME_FLAG_ALLOC) {
                 continue;
             }
 
             /* Fill in the basics of the fs_name entry
              * so we can print in the fls formats */
             fs_name->meta_addr = childFiles[a].getAddr();
             fs_name->meta_seq = childFiles[a].getSeq();
 
             // lookup the file to get more info (we did not cache that)
             fs_file_orp =
                 tsk_fs_file_open_meta(a_fs, fs_file_orp, fs_name->meta_addr);
             if (fs_file_orp) {
                 if (fs_file_orp->meta) {
                     if (fs_file_orp->meta->flags & TSK_FS_META_FLAG_ALLOC) {
                         fs_name->flags = TSK_FS_NAME_FLAG_ALLOC;
                     }
                     else {
                         fs_name->flags = TSK_FS_NAME_FLAG_UNALLOC;
                         /* This sequence is the MFT entry, which gets 
                          * incremented when it is unallocated.  So, 
                          * decrement it back down so that it is more
                          * similar to the usual situation, where the
                          * name sequence is 1 smaller than the meta 
                          * sequence. */
                         fs_name->meta_seq--;
                     }
 
                     if (fs_file_orp->meta->name2) {
                         TSK_FS_META_NAME_LIST *n2 = fs_file_orp->meta->name2;
 
                         while (n2) {
                             if (n2->par_inode == a_addr) {
                                 strncpy(fs_name->name, n2->name, fs_name->name_size);
                                 tsk_fs_dir_add(fs_dir, fs_name);
                             }
                             n2 = n2->next;
                         }
                     }
                 }
                 tsk_fs_file_close(fs_file_orp);
             }
         }
         tsk_fs_name_free(fs_name);
     }
     tsk_release_lock(&ntfs->orphan_map_lock);
 
     // if we are listing the root directory, add the Orphan directory entry
     if (a_addr == a_fs->root_inum) {
         TSK_FS_NAME *fs_name;
 
         if ((fs_name = tsk_fs_name_alloc(256, 0)) == NULL)
             return TSK_ERR;
 
         if (tsk_fs_dir_make_orphan_dir_name(a_fs, fs_name)) {
             tsk_fs_name_free(fs_name);
             return TSK_ERR;
         }
 
         if (tsk_fs_dir_add(fs_dir, fs_name)) {
             tsk_fs_name_free(fs_name);
             return TSK_ERR;
         }
         tsk_fs_name_free(fs_name);
     }
 
 
     return retval_final;
 }
 
 
 
 /****************************************************************************
  * FIND_FILE ROUTINES
  *
  */
 
 #define MAX_DEPTH   128
 #define DIR_STRSZ   4096
