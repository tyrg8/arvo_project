commit cb23c3efd22d34db279ceb39cc312473761db5ed
Author: Patrick Steinhardt <ps@pks.im>
Date:   Wed Nov 21 10:54:29 2018 +0100

    commit: fix out-of-bound reads when parsing truncated author fields
    
    While commit objects usually should have only one author field, our commit
    parser actually handles the case where a commit has multiple author fields
    because some tools that exist in the wild actually write them. Detection of
    those additional author fields is done by using a simple `git__prefixcmp`,
    checking whether the current line starts with the string "author ". In case
    where we are handed a non-NUL-terminated string that ends directly after the
    space, though, we may have an out-of-bounds read of one byte when trying to
    compare the expected final NUL byte.
    
    Fix the issue by using `git__prefixncmp` instead of `git_prefixcmp`.
    Unfortunately, a test cannot be easily written to catch this case. While we
    could test the last error message and verify that it didn't in fact fail parsing
    a signature (because that would indicate that it has in fact tried to parse the
    additional "author " field, which it shouldn't be able to detect in the first
    place), this doesn't work as the next line needs to be the "committer" field,
    which would error out with the same error message even if we hadn't done an
    out-of-bounds read.
    
    As objects read from the object database are always NUL terminated, this issue
    cannot be triggered in normal code and thus it's not security critical.

diff --git a/src/commit.c b/src/commit.c
index bda5a8b42..a26368ce0 100644
--- a/src/commit.c
+++ b/src/commit.c
@@ -386,88 +386,88 @@ int git_commit_amend(
 int git_commit__parse_raw(void *_commit, const char *data, size_t size)
 {
 	git_commit *commit = _commit;
 	const char *buffer_start = data, *buffer;
 	const char *buffer_end = buffer_start + size;
 	git_oid parent_id;
 	size_t header_len;
 	git_signature dummy_sig;
 
 	buffer = buffer_start;
 
 	/* Allocate for one, which will allow not to realloc 90% of the time  */
 	git_array_init_to_size(commit->parent_ids, 1);
 	GITERR_CHECK_ARRAY(commit->parent_ids);
 
 	/* The tree is always the first field */
 	if (git_oid__parse(&commit->tree_id, &buffer, buffer_end, "tree ") < 0)
 		goto bad_buffer;
 
 	/*
 	 * TODO: commit grafts!
 	 */
 
 	while (git_oid__parse(&parent_id, &buffer, buffer_end, "parent ") == 0) {
 		git_oid *new_id = git_array_alloc(commit->parent_ids);
 		GITERR_CHECK_ALLOC(new_id);
 
 		git_oid_cpy(new_id, &parent_id);
 	}
 
 	commit->author = git__malloc(sizeof(git_signature));
 	GITERR_CHECK_ALLOC(commit->author);
 
 	if (git_signature__parse(commit->author, &buffer, buffer_end, "author ", '\n') < 0)
 		return -1;
 
 	/* Some tools create multiple author fields, ignore the extra ones */
-	while ((size_t)(buffer_end - buffer) >= strlen("author ") && !git__prefixcmp(buffer, "author ")) {
+	while (!git__prefixncmp(buffer, buffer_end - buffer, "author ")) {
 		if (git_signature__parse(&dummy_sig, &buffer, buffer_end, "author ", '\n') < 0)
 			return -1;
 
 		git__free(dummy_sig.name);
 		git__free(dummy_sig.email);
 	}
 
 	/* Always parse the committer; we need the commit time */
 	commit->committer = git__malloc(sizeof(git_signature));
 	GITERR_CHECK_ALLOC(commit->committer);
 
 	if (git_signature__parse(commit->committer, &buffer, buffer_end, "committer ", '\n') < 0)
 		return -1;
 
 	/* Parse add'l header entries */
 	while (buffer < buffer_end) {
 		const char *eoln = buffer;
 		if (buffer[-1] == '\n' && buffer[0] == '\n')
 			break;
 
 		while (eoln < buffer_end && *eoln != '\n')
 			++eoln;
 
 		if (git__prefixncmp(buffer, buffer_end - buffer, "encoding ") == 0) {
 			buffer += strlen("encoding ");
 
 			commit->message_encoding = git__strndup(buffer, eoln - buffer);
 			GITERR_CHECK_ALLOC(commit->message_encoding);
 		}
 
 		if (eoln < buffer_end && *eoln == '\n')
 			++eoln;
 		buffer = eoln;
 	}
 
 	header_len = buffer - buffer_start;
 	commit->raw_header = git__strndup(buffer_start, header_len);
 	GITERR_CHECK_ALLOC(commit->raw_header);
 
 	/* point "buffer" to data after header, +1 for the final LF */
 	buffer = buffer_start + header_len + 1;
 
 	/* extract commit message */
 	if (buffer <= buffer_end)
 		commit->raw_message = git__strndup(buffer, buffer_end - buffer);
 	else
 		commit->raw_message = git__strdup("");
 	GITERR_CHECK_ALLOC(commit->raw_message);
 
 	return 0;
