commit db714553712debbc447383f735e022031dc13127
Author: Martin Matuska <martin@matuska.org>
Date:   Sun Apr 3 12:06:24 2022 +0200

    RAR reader: fix heap-use-after-free in run_filters()
    
    OSS-Fuzz issue 46279
    Fixes #1715

diff --git a/libarchive/archive_read_support_format_rar.c b/libarchive/archive_read_support_format_rar.c
index 7a731852..f9cbe2a8 100644
--- a/libarchive/archive_read_support_format_rar.c
+++ b/libarchive/archive_read_support_format_rar.c
@@ -3326,73 +3326,90 @@ static int
 run_filters(struct archive_read *a)
 {
   struct rar *rar = (struct rar *)(a->format->data);
   struct rar_filters *filters = &rar->filters;
   struct rar_filter *filter = filters->stack;
+  struct rar_filter *f;
   size_t start, end;
   int64_t tend;
   uint32_t lastfilteraddress;
   uint32_t lastfilterlength;
   int ret;
 
   if (filters == NULL || filter == NULL)
     return (0);
 
   start = filters->filterstart;
   end = start + filter->blocklength;
 
   filters->filterstart = INT64_MAX;
   tend = (int64_t)end;
   ret = expand(a, &tend);
   if (ret != ARCHIVE_OK)
     return 0;
+
+  /* Check if filter stack was modified in expand() */
+  ret = ARCHIVE_FATAL;
+  f = filters->stack;
+  while (f)
+  {
+    if (f == filter)
+    {
+      ret = ARCHIVE_OK;
+      break;
+    }
+    f = f->next;
+  }
+  if (ret != ARCHIVE_OK)
+    return 0;
+
   if (tend < 0)
     return 0;
   end = (size_t)tend;
   if (end != start + filter->blocklength)
     return 0;
 
   if (!filters->vm)
   {
     filters->vm = calloc(1, sizeof(*filters->vm));
     if (!filters->vm)
       return 0;
   }
 
   ret = copy_from_lzss_window(a, filters->vm->memory, start, filter->blocklength);
   if (ret != ARCHIVE_OK)
     return 0;
   if (!execute_filter(a, filter, filters->vm, rar->offset))
     return 0;
 
   lastfilteraddress = filter->filteredblockaddress;
   lastfilterlength = filter->filteredblocklength;
   filters->stack = filter->next;
   filter->next = NULL;
   delete_filter(filter);
 
   while ((filter = filters->stack) != NULL && (int64_t)filter->blockstartpos == filters->filterstart && filter->blocklength == lastfilterlength)
   {
     memmove(&filters->vm->memory[0], &filters->vm->memory[lastfilteraddress], lastfilterlength);
     if (!execute_filter(a, filter, filters->vm, rar->offset))
       return 0;
 
     lastfilteraddress = filter->filteredblockaddress;
     lastfilterlength = filter->filteredblocklength;
     filters->stack = filter->next;
     filter->next = NULL;
     delete_filter(filter);
   }
 
   if (filters->stack)
   {
     if (filters->stack->blockstartpos < end)
       return 0;
     filters->filterstart = filters->stack->blockstartpos;
   }
 
   filters->lastend = end;
   filters->bytes = &filters->vm->memory[lastfilteraddress];
   filters->bytes_ready = lastfilterlength;
 
   return 1;
 }
