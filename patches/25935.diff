commit 3ebfb01a3c54650391ce9eeb0dbe5b88e41f1f5b
Author: Frank Morgner <frankmorgner@gmail.com>
Date:   Fri Sep 25 11:19:31 2020 +0200

    itacns: fixed length checking
    
    fixes https://oss-fuzz.com/testcase-detail/5116660103774208

diff --git a/src/libopensc/pkcs15-itacns.c b/src/libopensc/pkcs15-itacns.c
index ff1511c4..9c9b40a5 100644
--- a/src/libopensc/pkcs15-itacns.c
+++ b/src/libopensc/pkcs15-itacns.c
@@ -390,96 +390,95 @@ static int hextoint(char *src, unsigned int len)
 static int get_name_from_EF_DatiPersonali(unsigned char *EFdata,
 	size_t EFdata_len, char name[], int name_len)
 {
 	const unsigned int EF_personaldata_maxlen = 400;
 	const unsigned int tlv_length_size = 6;
 	char *file = NULL;
 	int file_size;
 
 	/*
 	 * Bytes 0-5 contain the ASCII encoding of the following TLV
 	 * structure's total size, in base 16.
 	 */
 	if (EFdata_len < tlv_length_size) {
 		/* We need at least 6 bytes for file length here */
 		return -1;
 	}
 	file_size = hextoint((char*)EFdata, tlv_length_size);
 	if (EFdata_len < (file_size + tlv_length_size)) {
 		/* Inconsistent external file length and internal file length
 		 * suggests we are trying to process junk data.
 		 * If the internal data length is shorter, the data can be padded,
 		 * but we should be fine as we will not go behind the buffer limits */
 		return -1;
 	}
 	file = (char*)&EFdata[tlv_length_size];
 
 	enum {
 		f_issuer_code = 0,
 		f_issuing_date,
 		f_expiry_date,
 		f_last_name,
 		f_first_name,
 		f_birth_date,
 		f_sex,
 		f_height,
 		f_codice_fiscale,
 		f_citizenship_code,
 		f_birth_township_code,
 		f_birth_country,
 		f_birth_certificate,
 		f_residence_township_code,
 		f_residence_address,
 		f_expat_notes
 	};
 
 	/* Read the fields up to f_first_name */
 	struct {
 		int len;
 		char value[256];
 	} fields[f_first_name+1];
 	int i=0; /* offset inside the file */
 	int f; /* field number */
 
 	if (file_size < 0)
 		return -1;
 
 	/*
 	 * This shouldn't happen, but let us be protected against wrong
 	 * or malicious cards
 	 */
 	if(file_size > (int)EF_personaldata_maxlen - (int)tlv_length_size)
 		file_size = EF_personaldata_maxlen - tlv_length_size;
 
 
 	memset(fields, 0, sizeof(fields));
 
 	for(f=0; f<f_first_name+1; f++) {
 		int field_size;
+
 		/* Don't read beyond the allocated buffer */
-		if(i > file_size)
+		if(i+2 > file_size)
 			return -1;
-
 		field_size = hextoint((char*) &file[i], 2);
-		if((field_size < 0) || (field_size+i > file_size))
-			return -1;
-
 		i += 2;
 
-		if(field_size >= (int)sizeof(fields[f].value))
+		if (field_size < 0
+				|| i + field_size > file_size
+				|| field_size >= (int)sizeof(fields[f].value))
 			return -1;
 
 		fields[f].len = field_size;
 		strncpy(fields[f].value, &file[i], field_size);
 		fields[f].value[field_size] = '\0';
 		i += field_size;
 	}
 
 	if (fields[f_first_name].len + fields[f_last_name].len + 1 >= name_len)
 		return -1;
 
 	/* the lengths are already checked that they will fit in buffer */
 	snprintf(name, name_len, "%.*s %.*s",
 		fields[f_first_name].len, fields[f_first_name].value,
 		fields[f_last_name].len, fields[f_last_name].value);
 	return 0;
 }
