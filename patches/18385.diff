commit b6f38bfdd2241cded26d20036d99669df305ce7e
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Sun Oct 20 17:00:58 2019 +0200

    Fix -Wimplicit-fallthrough warnings

diff --git a/libxslt/numbers.c b/libxslt/numbers.c
index ad900e1f..92023f8a 100644
--- a/libxslt/numbers.c
+++ b/libxslt/numbers.c
@@ -952,311 +952,311 @@ xmlXPathError
 xsltFormatNumberConversion(xsltDecimalFormatPtr self,
 			   xmlChar *format,
 			   double number,
 			   xmlChar **result)
 {
     xmlXPathError status = XPATH_EXPRESSION_OK;
     xmlBufferPtr buffer;
     xmlChar *the_format, *prefix = NULL, *suffix = NULL;
     xmlChar *nprefix, *nsuffix = NULL;
     int	    prefix_length, suffix_length = 0, nprefix_length, nsuffix_length;
     double  scale;
     int	    j, len;
     int     self_grouping_len;
     xsltFormatNumberInfo format_info;
     /*
      * delayed_multiplier allows a 'trailing' percent or
      * permille to be treated as suffix
      */
     int		delayed_multiplier = 0;
     /* flag to show no -ve format present for -ve number */
     char	default_sign = 0;
     /* flag to show error found, should use default format */
     char	found_error = 0;
 
     if (xmlStrlen(format) <= 0) {
 	xsltTransformError(NULL, NULL, NULL,
                 "xsltFormatNumberConversion : "
 		"Invalid format (0-length)\n");
     }
     *result = NULL;
     switch (xmlXPathIsInf(number)) {
 	case -1:
 	    if (self->minusSign == NULL)
 		*result = xmlStrdup(BAD_CAST "-");
 	    else
 		*result = xmlStrdup(self->minusSign);
-	    /* no-break on purpose */
+	    /* Intentional fall-through */
 	case 1:
 	    if ((self == NULL) || (self->infinity == NULL))
 		*result = xmlStrcat(*result, BAD_CAST "Infinity");
 	    else
 		*result = xmlStrcat(*result, self->infinity);
 	    return(status);
 	default:
 	    if (xmlXPathIsNaN(number)) {
 		if ((self == NULL) || (self->noNumber == NULL))
 		    *result = xmlStrdup(BAD_CAST "NaN");
 		else
 		    *result = xmlStrdup(self->noNumber);
 		return(status);
 	    }
     }
 
     buffer = xmlBufferCreate();
     if (buffer == NULL) {
 	return XPATH_MEMORY_ERROR;
     }
 
     format_info.integer_hash = 0;
     format_info.integer_digits = 0;
     format_info.frac_digits = 0;
     format_info.frac_hash = 0;
     format_info.group = -1;
     format_info.multiplier = 1;
     format_info.add_decimal = FALSE;
     format_info.is_multiplier_set = FALSE;
     format_info.is_negative_pattern = FALSE;
 
     the_format = format;
 
     /*
      * First we process the +ve pattern to get percent / permille,
      * as well as main format
      */
     prefix = the_format;
     prefix_length = xsltFormatNumberPreSuffix(self, &the_format, &format_info);
     if (prefix_length < 0) {
 	found_error = 1;
 	goto OUTPUT_NUMBER;
     }
 
     /*
      * Here we process the "number" part of the format.  It gets
      * a little messy because of the percent/per-mille - if that
      * appears at the end, it may be part of the suffix instead
      * of part of the number, so the variable delayed_multiplier
      * is used to handle it
      */
     self_grouping_len = xmlStrlen(self->grouping);
     while ((*the_format != 0) &&
 	   (xsltUTF8Charcmp(the_format, self->decimalPoint) != 0) &&
 	   (xsltUTF8Charcmp(the_format, self->patternSeparator) != 0)) {
 
 	if (delayed_multiplier != 0) {
 	    format_info.multiplier = delayed_multiplier;
 	    format_info.is_multiplier_set = TRUE;
 	    delayed_multiplier = 0;
 	}
 	if (xsltUTF8Charcmp(the_format, self->digit) == 0) {
 	    if (format_info.integer_digits > 0) {
 		found_error = 1;
 		goto OUTPUT_NUMBER;
 	    }
 	    format_info.integer_hash++;
 	    if (format_info.group >= 0)
 		format_info.group++;
 	} else if (xsltUTF8Charcmp(the_format, self->zeroDigit) == 0) {
 	    format_info.integer_digits++;
 	    if (format_info.group >= 0)
 		format_info.group++;
 	} else if ((self_grouping_len > 0) &&
 	    (!xmlStrncmp(the_format, self->grouping, self_grouping_len))) {
 	    /* Reset group count */
 	    format_info.group = 0;
 	    the_format += self_grouping_len;
 	    continue;
 	} else if (xsltUTF8Charcmp(the_format, self->percent) == 0) {
 	    if (format_info.is_multiplier_set) {
 		found_error = 1;
 		goto OUTPUT_NUMBER;
 	    }
 	    delayed_multiplier = 100;
 	} else  if (xsltUTF8Charcmp(the_format, self->permille) == 0) {
 	    if (format_info.is_multiplier_set) {
 		found_error = 1;
 		goto OUTPUT_NUMBER;
 	    }
 	    delayed_multiplier = 1000;
 	} else
 	    break; /* while */
 
 	if ((len=xmlUTF8Strsize(the_format, 1)) < 1) {
 	    found_error = 1;
 	    goto OUTPUT_NUMBER;
 	}
 	the_format += len;
 
     }
 
     /* We have finished the integer part, now work on fraction */
     if ( (*the_format != 0) &&
          (xsltUTF8Charcmp(the_format, self->decimalPoint) == 0) ) {
         format_info.add_decimal = TRUE;
         if ((len = xmlUTF8Strsize(the_format, 1)) < 1) {
             found_error = 1;
             goto OUTPUT_NUMBER;
         }
 	the_format += len;	/* Skip over the decimal */
     }
 
     while (*the_format != 0) {
 
 	if (xsltUTF8Charcmp(the_format, self->zeroDigit) == 0) {
 	    if (format_info.frac_hash != 0) {
 		found_error = 1;
 		goto OUTPUT_NUMBER;
 	    }
 	    format_info.frac_digits++;
 	} else if (xsltUTF8Charcmp(the_format, self->digit) == 0) {
 	    format_info.frac_hash++;
 	} else if (xsltUTF8Charcmp(the_format, self->percent) == 0) {
 	    if (format_info.is_multiplier_set) {
 		found_error = 1;
 		goto OUTPUT_NUMBER;
 	    }
 	    delayed_multiplier = 100;
 	    if ((len = xmlUTF8Strsize(the_format, 1)) < 1) {
 	        found_error = 1;
 		goto OUTPUT_NUMBER;
 	    }
 	    the_format += len;
 	    continue; /* while */
 	} else if (xsltUTF8Charcmp(the_format, self->permille) == 0) {
 	    if (format_info.is_multiplier_set) {
 		found_error = 1;
 		goto OUTPUT_NUMBER;
 	    }
 	    delayed_multiplier = 1000;
 	    if  ((len = xmlUTF8Strsize(the_format, 1)) < 1) {
 	        found_error = 1;
 		goto OUTPUT_NUMBER;
 	    }
 	    the_format += len;
 	    continue; /* while */
 	} else if (xsltUTF8Charcmp(the_format, self->grouping) != 0) {
 	    break; /* while */
 	}
 	if ((len = xmlUTF8Strsize(the_format, 1)) < 1) {
 	    found_error = 1;
 	    goto OUTPUT_NUMBER;
 	}
 	the_format += len;
 	if (delayed_multiplier != 0) {
 	    format_info.multiplier = delayed_multiplier;
 	    delayed_multiplier = 0;
 	    format_info.is_multiplier_set = TRUE;
 	}
     }
 
     /*
      * If delayed_multiplier is set after processing the
      * "number" part, should be in suffix
      */
     if (delayed_multiplier != 0) {
 	the_format -= len;
 	delayed_multiplier = 0;
     }
 
     suffix = the_format;
     suffix_length = xsltFormatNumberPreSuffix(self, &the_format, &format_info);
     if ( (suffix_length < 0) ||
 	 ((*the_format != 0) &&
 	  (xsltUTF8Charcmp(the_format, self->patternSeparator) != 0)) ) {
 	found_error = 1;
 	goto OUTPUT_NUMBER;
     }
 
     /*
      * We have processed the +ve prefix, number part and +ve suffix.
      * If the number is -ve, we must substitute the -ve prefix / suffix
      */
     if (number < 0) {
         /*
 	 * Note that j is the number of UTF8 chars before the separator,
 	 * not the number of bytes! (bug 151975)
 	 */
         j =  xmlUTF8Strloc(format, self->patternSeparator);
 	if (j < 0) {
 	/* No -ve pattern present, so use default signing */
 	    default_sign = 1;
 	}
 	else {
 	    /* Skip over pattern separator (accounting for UTF8) */
 	    the_format = (xmlChar *)xmlUTF8Strpos(format, j + 1);
 	    /*
 	     * Flag changes interpretation of percent/permille
 	     * in -ve pattern
 	     */
 	    format_info.is_negative_pattern = TRUE;
 	    format_info.is_multiplier_set = FALSE;
 
 	    /* First do the -ve prefix */
 	    nprefix = the_format;
 	    nprefix_length = xsltFormatNumberPreSuffix(self,
 					&the_format, &format_info);
 	    if (nprefix_length<0) {
 		found_error = 1;
 		goto OUTPUT_NUMBER;
 	    }
 
 	    while (*the_format != 0) {
 		if ( (xsltUTF8Charcmp(the_format, (self)->percent) == 0) ||
 		     (xsltUTF8Charcmp(the_format, (self)->permille)== 0) ) {
 		    if (format_info.is_multiplier_set) {
 			found_error = 1;
 			goto OUTPUT_NUMBER;
 		    }
 		    format_info.is_multiplier_set = TRUE;
 		    delayed_multiplier = 1;
 		}
 		else if (IS_SPECIAL(self, the_format))
 		    delayed_multiplier = 0;
 		else
 		    break; /* while */
 		if ((len = xmlUTF8Strsize(the_format, 1)) < 1) {
 		    found_error = 1;
 		    goto OUTPUT_NUMBER;
 		}
 		the_format += len;
 	    }
 	    if (delayed_multiplier != 0) {
 		format_info.is_multiplier_set = FALSE;
 		the_format -= len;
 	    }
 
 	    /* Finally do the -ve suffix */
 	    if (*the_format != 0) {
 		nsuffix = the_format;
 		nsuffix_length = xsltFormatNumberPreSuffix(self,
 					&the_format, &format_info);
 		if (nsuffix_length < 0) {
 		    found_error = 1;
 		    goto OUTPUT_NUMBER;
 		}
 	    }
 	    else
 		nsuffix_length = 0;
 	    if (*the_format != 0) {
 		found_error = 1;
 		goto OUTPUT_NUMBER;
 	    }
 	    /*
 	     * Here's another Java peculiarity:
 	     * if -ve prefix/suffix == +ve ones, discard & use default
 	     */
 	    if ((nprefix_length != prefix_length) ||
 		(nsuffix_length != suffix_length) ||
 		((nprefix_length > 0) &&
 		 (xmlStrncmp(nprefix, prefix, prefix_length) !=0 )) ||
 		((nsuffix_length > 0) &&
 		 (xmlStrncmp(nsuffix, suffix, suffix_length) !=0 ))) {
 		prefix = nprefix;
 		prefix_length = nprefix_length;
 		suffix = nsuffix;
 		suffix_length = nsuffix_length;
 	    } /* else {
 		default_sign = 1;
 	    }
 	    */
 	}
     }
diff --git a/libxslt/pattern.c b/libxslt/pattern.c
index 6f093d05..8e4cd4a2 100644
--- a/libxslt/pattern.c
+++ b/libxslt/pattern.c
@@ -2356,174 +2356,175 @@ xsltTemplatePtr
 xsltGetTemplate(xsltTransformContextPtr ctxt, xmlNodePtr node,
 	        xsltStylesheetPtr style)
 {
     xsltStylesheetPtr curstyle;
     xsltTemplatePtr ret = NULL;
     const xmlChar *name = NULL;
     xsltCompMatchPtr list = NULL;
     float priority;
     int keyed = 0;
 
     if ((ctxt == NULL) || (node == NULL))
 	return(NULL);
 
     if (style == NULL) {
 	curstyle = ctxt->style;
     } else {
 	curstyle = xsltNextImport(style);
     }
 
     while ((curstyle != NULL) && (curstyle != style)) {
 	priority = XSLT_PAT_NO_PRIORITY;
 	/* TODO : handle IDs/keys here ! */
 	if (curstyle->templatesHash != NULL) {
 	    /*
 	     * Use the top name as selector
 	     */
 	    switch (node->type) {
 		case XML_ELEMENT_NODE:
 		    if (node->name[0] == ' ')
 			break;
+                    /* Intentional fall-through */
 		case XML_ATTRIBUTE_NODE:
 		case XML_PI_NODE:
 		    name = node->name;
 		    break;
 		case XML_DOCUMENT_NODE:
 		case XML_HTML_DOCUMENT_NODE:
 		case XML_TEXT_NODE:
 		case XML_CDATA_SECTION_NODE:
 		case XML_COMMENT_NODE:
 		case XML_ENTITY_REF_NODE:
 		case XML_ENTITY_NODE:
 		case XML_DOCUMENT_TYPE_NODE:
 		case XML_DOCUMENT_FRAG_NODE:
 		case XML_NOTATION_NODE:
 		case XML_DTD_NODE:
 		case XML_ELEMENT_DECL:
 		case XML_ATTRIBUTE_DECL:
 		case XML_ENTITY_DECL:
 		case XML_NAMESPACE_DECL:
 		case XML_XINCLUDE_START:
 		case XML_XINCLUDE_END:
 		    break;
 		default:
 		    return(NULL);
 
 	    }
 	}
 	if (name != NULL) {
 	    /*
 	     * find the list of applicable expressions based on the name
 	     */
 	    list = (xsltCompMatchPtr) xmlHashLookup3(curstyle->templatesHash,
 					     name, ctxt->mode, ctxt->modeURI);
 	} else
 	    list = NULL;
 	while (list != NULL) {
 	    if (xsltTestCompMatch(ctxt, list, node,
 			          ctxt->mode, ctxt->modeURI) == 1) {
 		ret = list->template;
 		priority = list->priority;
 		break;
 	    }
 	    list = list->next;
 	}
 	list = NULL;
 
 	/*
 	 * find alternate generic matches
 	 */
 	switch (node->type) {
 	    case XML_ELEMENT_NODE:
 		if (node->name[0] == ' ')
 		    list = curstyle->rootMatch;
 		else
 		    list = curstyle->elemMatch;
 		if (node->psvi != NULL) keyed = 1;
 		break;
 	    case XML_ATTRIBUTE_NODE: {
 	        xmlAttrPtr attr;
 
 		list = curstyle->attrMatch;
 		attr = (xmlAttrPtr) node;
 		if (attr->psvi != NULL) keyed = 1;
 		break;
 	    }
 	    case XML_PI_NODE:
 		list = curstyle->piMatch;
 		if (node->psvi != NULL) keyed = 1;
 		break;
 	    case XML_DOCUMENT_NODE:
 	    case XML_HTML_DOCUMENT_NODE: {
 	        xmlDocPtr doc;
 
 		list = curstyle->rootMatch;
 		doc = (xmlDocPtr) node;
 		if (doc->psvi != NULL) keyed = 1;
 		break;
 	    }
 	    case XML_TEXT_NODE:
 	    case XML_CDATA_SECTION_NODE:
 		list = curstyle->textMatch;
 		if (node->psvi != NULL) keyed = 1;
 		break;
 	    case XML_COMMENT_NODE:
 		list = curstyle->commentMatch;
 		if (node->psvi != NULL) keyed = 1;
 		break;
 	    case XML_ENTITY_REF_NODE:
 	    case XML_ENTITY_NODE:
 	    case XML_DOCUMENT_TYPE_NODE:
 	    case XML_DOCUMENT_FRAG_NODE:
 	    case XML_NOTATION_NODE:
 	    case XML_DTD_NODE:
 	    case XML_ELEMENT_DECL:
 	    case XML_ATTRIBUTE_DECL:
 	    case XML_ENTITY_DECL:
 	    case XML_NAMESPACE_DECL:
 	    case XML_XINCLUDE_START:
 	    case XML_XINCLUDE_END:
 		break;
 	    default:
 		break;
 	}
 	while ((list != NULL) &&
 	       ((ret == NULL)  || (list->priority > priority))) {
 	    if (xsltTestCompMatch(ctxt, list, node,
 			          ctxt->mode, ctxt->modeURI) == 1) {
 		ret = list->template;
 		priority = list->priority;
 		break;
 	    }
 	    list = list->next;
 	}
 	/*
 	 * Some of the tests for elements can also apply to documents
 	 */
 	if ((node->type == XML_DOCUMENT_NODE) ||
 	    (node->type == XML_HTML_DOCUMENT_NODE) ||
 	    (node->type == XML_TEXT_NODE)) {
 	    list = curstyle->elemMatch;
 	    while ((list != NULL) &&
 		   ((ret == NULL)  || (list->priority > priority))) {
 		if (xsltTestCompMatch(ctxt, list, node,
 				      ctxt->mode, ctxt->modeURI) == 1) {
 		    ret = list->template;
 		    priority = list->priority;
 		    break;
 		}
 		list = list->next;
 	    }
 	} else if ((node->type == XML_PI_NODE) ||
 		   (node->type == XML_COMMENT_NODE)) {
 	    list = curstyle->elemMatch;
 	    while ((list != NULL) &&
 		   ((ret == NULL)  || (list->priority > priority))) {
 		if (xsltTestCompMatch(ctxt, list, node,
 				      ctxt->mode, ctxt->modeURI) == 1) {
 		    ret = list->template;
 		    priority = list->priority;
 		    break;
 		}
 		list = list->next;
 	    }
 	}
diff --git a/libxslt/transform.c b/libxslt/transform.c
index d7ab0b66..d1c47932 100644
--- a/libxslt/transform.c
+++ b/libxslt/transform.c
@@ -4857,342 +4857,342 @@ void
 xsltApplyTemplates(xsltTransformContextPtr ctxt, xmlNodePtr node,
 	           xmlNodePtr inst, xsltElemPreCompPtr castedComp)
 {
 #ifdef XSLT_REFACTORED
     xsltStyleItemApplyTemplatesPtr comp =
 	(xsltStyleItemApplyTemplatesPtr) castedComp;
 #else
     xsltStylePreCompPtr comp = (xsltStylePreCompPtr) castedComp;
 #endif
     int i;
     xmlNodePtr cur, delNode = NULL, oldContextNode;
     xmlNodeSetPtr list = NULL, oldList;
     xsltStackElemPtr withParams = NULL;
     int oldXPProximityPosition, oldXPContextSize;
     const xmlChar *oldMode, *oldModeURI;
     xmlDocPtr oldXPDoc;
     xsltDocumentPtr oldDocInfo;
     xmlXPathContextPtr xpctxt;
 
     if (comp == NULL) {
 	xsltTransformError(ctxt, NULL, inst,
 	     "xsl:apply-templates : compilation failed\n");
 	return;
     }
     if ((ctxt == NULL) || (node == NULL) || (inst == NULL) || (comp == NULL))
 	return;
 
 #ifdef WITH_XSLT_DEBUG_PROCESS
     if ((node != NULL) && (node->name != NULL))
 	XSLT_TRACE(ctxt,XSLT_TRACE_APPLY_TEMPLATES,xsltGenericDebug(xsltGenericDebugContext,
 	     "xsltApplyTemplates: node: '%s'\n", node->name));
 #endif
 
     xpctxt = ctxt->xpathCtxt;
     /*
     * Save context states.
     */
     oldContextNode = ctxt->node;
     oldMode = ctxt->mode;
     oldModeURI = ctxt->modeURI;
     oldDocInfo = ctxt->document;
     oldList = ctxt->nodeList;
 
     /*
      * The xpath context size and proximity position, as
      * well as the xpath and context documents, may be changed
      * so we save their initial state and will restore on exit
      */
     oldXPContextSize = xpctxt->contextSize;
     oldXPProximityPosition = xpctxt->proximityPosition;
     oldXPDoc = xpctxt->doc;
 
     /*
     * Set up contexts.
     */
     ctxt->mode = comp->mode;
     ctxt->modeURI = comp->modeURI;
 
     if (comp->select != NULL) {
 	xmlXPathObjectPtr res = NULL;
 
 	if (comp->comp == NULL) {
 	    xsltTransformError(ctxt, NULL, inst,
 		 "xsl:apply-templates : compilation failed\n");
 	    goto error;
 	}
 #ifdef WITH_XSLT_DEBUG_PROCESS
 	XSLT_TRACE(ctxt,XSLT_TRACE_APPLY_TEMPLATES,xsltGenericDebug(xsltGenericDebugContext,
 	     "xsltApplyTemplates: select %s\n", comp->select));
 #endif
 
 	res = xsltPreCompEval(ctxt, node, comp);
 
 	if (res != NULL) {
 	    if (res->type == XPATH_NODESET) {
 		list = res->nodesetval; /* consume the node set */
 		res->nodesetval = NULL;
 	    } else {
 		xsltTransformError(ctxt, NULL, inst,
 		    "The 'select' expression did not evaluate to a "
 		    "node set.\n");
 		ctxt->state = XSLT_STATE_STOPPED;
 		xmlXPathFreeObject(res);
 		goto error;
 	    }
 	    xmlXPathFreeObject(res);
 	    /*
 	    * Note: An xsl:apply-templates with a 'select' attribute,
 	    * can change the current source doc.
 	    */
 	} else {
 	    xsltTransformError(ctxt, NULL, inst,
 		"Failed to evaluate the 'select' expression.\n");
 	    ctxt->state = XSLT_STATE_STOPPED;
 	    goto error;
 	}
 	if (list == NULL) {
 #ifdef WITH_XSLT_DEBUG_PROCESS
 	    XSLT_TRACE(ctxt,XSLT_TRACE_APPLY_TEMPLATES,xsltGenericDebug(xsltGenericDebugContext,
 		"xsltApplyTemplates: select didn't evaluate to a node list\n"));
 #endif
 	    goto exit;
 	}
 	/*
 	*
 	* NOTE: Previously a document info (xsltDocument) was
 	* created and attached to the Result Tree Fragment.
 	* But such a document info is created on demand in
 	* xsltKeyFunction() (functions.c), so we need to create
 	* it here beforehand.
 	* In order to take care of potential keys we need to
 	* do some extra work for the case when a Result Tree Fragment
 	* is converted into a nodeset (e.g. exslt:node-set()) :
 	* We attach a "pseudo-doc" (xsltDocument) to _private.
 	* This xsltDocument, together with the keyset, will be freed
 	* when the Result Tree Fragment is freed.
 	*
 	*/
 #if 0
 	if ((ctxt->nbKeys > 0) &&
 	    (list->nodeNr != 0) &&
 	    (list->nodeTab[0]->doc != NULL) &&
 	    XSLT_IS_RES_TREE_FRAG(list->nodeTab[0]->doc))
 	{
 	    /*
 	    * NOTE that it's also OK if @effectiveDocInfo will be
 	    * set to NULL.
 	    */
 	    isRTF = 1;
 	    effectiveDocInfo = list->nodeTab[0]->doc->_private;
 	}
 #endif
     } else {
 	/*
 	 * Build an XPath node set with the children
 	 */
 	list = xmlXPathNodeSetCreate(NULL);
 	if (list == NULL)
 	    goto error;
 	if (node->type != XML_NAMESPACE_DECL)
 	    cur = node->children;
 	else
 	    cur = NULL;
 	while (cur != NULL) {
 	    switch (cur->type) {
 		case XML_TEXT_NODE:
 		    if ((IS_BLANK_NODE(cur)) &&
 			(cur->parent != NULL) &&
 			(cur->parent->type == XML_ELEMENT_NODE) &&
 			(ctxt->style->stripSpaces != NULL)) {
 			const xmlChar *val;
 
 			if (cur->parent->ns != NULL) {
 			    val = (const xmlChar *)
 				  xmlHashLookup2(ctxt->style->stripSpaces,
 						 cur->parent->name,
 						 cur->parent->ns->href);
 			    if (val == NULL) {
 				val = (const xmlChar *)
 				  xmlHashLookup2(ctxt->style->stripSpaces,
 						 BAD_CAST "*",
 						 cur->parent->ns->href);
 			    }
 			} else {
 			    val = (const xmlChar *)
 				  xmlHashLookup2(ctxt->style->stripSpaces,
 						 cur->parent->name, NULL);
 			}
 			if ((val != NULL) &&
 			    (xmlStrEqual(val, (xmlChar *) "strip"))) {
 			    delNode = cur;
 			    break;
 			}
 		    }
-		    /* no break on purpose */
+		    /* Intentional fall-through */
 		case XML_ELEMENT_NODE:
 		case XML_DOCUMENT_NODE:
 		case XML_HTML_DOCUMENT_NODE:
 		case XML_CDATA_SECTION_NODE:
 		case XML_PI_NODE:
 		case XML_COMMENT_NODE:
 		    xmlXPathNodeSetAddUnique(list, cur);
 		    break;
 		case XML_DTD_NODE:
 		    /* Unlink the DTD, it's still reachable
 		     * using doc->intSubset */
 		    if (cur->next != NULL)
 			cur->next->prev = cur->prev;
 		    if (cur->prev != NULL)
 			cur->prev->next = cur->next;
 		    break;
 		case XML_NAMESPACE_DECL:
 		    break;
 		default:
 #ifdef WITH_XSLT_DEBUG_PROCESS
 		    XSLT_TRACE(ctxt,XSLT_TRACE_APPLY_TEMPLATES,xsltGenericDebug(xsltGenericDebugContext,
 		     "xsltApplyTemplates: skipping cur type %d\n",
 				     cur->type));
 #endif
 		    delNode = cur;
 	    }
 	    cur = cur->next;
 	    if (delNode != NULL) {
 #ifdef WITH_XSLT_DEBUG_PROCESS
 		XSLT_TRACE(ctxt,XSLT_TRACE_APPLY_TEMPLATES,xsltGenericDebug(xsltGenericDebugContext,
 		     "xsltApplyTemplates: removing ignorable blank cur\n"));
 #endif
 		xmlUnlinkNode(delNode);
 		xmlFreeNode(delNode);
 		delNode = NULL;
 	    }
 	}
     }
 
 #ifdef WITH_XSLT_DEBUG_PROCESS
     if (list != NULL)
     XSLT_TRACE(ctxt,XSLT_TRACE_APPLY_TEMPLATES,xsltGenericDebug(xsltGenericDebugContext,
 	"xsltApplyTemplates: list of %d nodes\n", list->nodeNr));
 #endif
 
     if ((list == NULL) || (list->nodeNr == 0))
 	goto exit;
 
     /*
     * Set the context's node set and size; this is also needed for
     * for xsltDoSortFunction().
     */
     ctxt->nodeList = list;
     /*
     * Process xsl:with-param and xsl:sort instructions.
     * (The code became so verbose just to avoid the
     *  xmlNodePtr sorts[XSLT_MAX_SORT] if there's no xsl:sort)
     * BUG TODO: We are not using namespaced potentially defined on the
     * xsl:sort or xsl:with-param elements; XPath expression might fail.
     */
     if (inst->children) {
 	xsltStackElemPtr param;
 
 	cur = inst->children;
 	while (cur) {
 
 #ifdef WITH_DEBUGGER
 	    if (ctxt->debugStatus != XSLT_DEBUG_NONE)
 		xslHandleDebugger(cur, node, NULL, ctxt);
 #endif
 	    if (ctxt->state == XSLT_STATE_STOPPED)
 		break;
 	    if (cur->type == XML_TEXT_NODE) {
 		cur = cur->next;
 		continue;
 	    }
 	    if (! IS_XSLT_ELEM(cur))
 		break;
 	    if (IS_XSLT_NAME(cur, "with-param")) {
 		param = xsltParseStylesheetCallerParam(ctxt, cur);
 		if (param != NULL) {
 		    param->next = withParams;
 		    withParams = param;
 		}
 	    }
 	    if (IS_XSLT_NAME(cur, "sort")) {
 		xsltTemplatePtr oldCurTempRule =
 		    ctxt->currentTemplateRule;
 		int nbsorts = 0;
 		xmlNodePtr sorts[XSLT_MAX_SORT];
 
 		sorts[nbsorts++] = cur;
 
 		while (cur) {
 
 #ifdef WITH_DEBUGGER
 		    if (ctxt->debugStatus != XSLT_DEBUG_NONE)
 			xslHandleDebugger(cur, node, NULL, ctxt);
 #endif
 		    if (ctxt->state == XSLT_STATE_STOPPED)
 			break;
 
 		    if (cur->type == XML_TEXT_NODE) {
 			cur = cur->next;
 			continue;
 		    }
 
 		    if (! IS_XSLT_ELEM(cur))
 			break;
 		    if (IS_XSLT_NAME(cur, "with-param")) {
 			param = xsltParseStylesheetCallerParam(ctxt, cur);
 			if (param != NULL) {
 			    param->next = withParams;
 			    withParams = param;
 			}
 		    }
 		    if (IS_XSLT_NAME(cur, "sort")) {
 			if (nbsorts >= XSLT_MAX_SORT) {
 			    xsltTransformError(ctxt, NULL, cur,
 				"The number (%d) of xsl:sort instructions exceeds the "
 				"maximum allowed by this processor's settings.\n",
 				nbsorts);
 			    ctxt->state = XSLT_STATE_STOPPED;
 			    break;
 			} else {
 			    sorts[nbsorts++] = cur;
 			}
 		    }
 		    cur = cur->next;
 		}
 		/*
 		* The "current template rule" is cleared for xsl:sort.
 		*/
 		ctxt->currentTemplateRule = NULL;
 		/*
 		* Sort.
 		*/
 		xsltDoSortFunction(ctxt, sorts, nbsorts);
 		ctxt->currentTemplateRule = oldCurTempRule;
 		break;
 	    }
 	    cur = cur->next;
 	}
     }
     xpctxt->contextSize = list->nodeNr;
     /*
     * Apply templates for all selected source nodes.
     */
     for (i = 0; i < list->nodeNr; i++) {
 	cur = list->nodeTab[i];
 	/*
 	* The node becomes the "current node".
 	*/
 	ctxt->node = cur;
 	/*
 	* An xsl:apply-templates can change the current context doc.
 	* OPTIMIZE TODO: Get rid of the need to set the context doc.
 	*/
 	if ((cur->type != XML_NAMESPACE_DECL) && (cur->doc != NULL))
 	    xpctxt->doc = cur->doc;
 
 	xpctxt->proximityPosition = i + 1;
 	/*
 	* Find and apply a template for this node.
 	*/
 	xsltProcessOneNode(ctxt, cur, withParams);
     }
