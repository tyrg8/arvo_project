commit d188c188354158dd94358018881cee0da8e7d041
Author: Ethan Nicholas <ethannicholas@google.com>
Date:   Mon Jun 10 15:55:38 2019 -0400

    fixed SkSL handling of negated literal vectors
    
    Bug: oss-fuzz:14409
    Change-Id: I837083139489d46f7db2f697ce85a0cabf85fb94
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/219997
    Reviewed-by: Brian Osman <brianosman@google.com>
    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>

diff --git a/src/sksl/SkSLCompiler.cpp b/src/sksl/SkSLCompiler.cpp
index cd5962bc0b..5111bf40a6 100644
--- a/src/sksl/SkSLCompiler.cpp
+++ b/src/sksl/SkSLCompiler.cpp
@@ -526,31 +526,37 @@ bool try_replace_expression(BasicBlock* b,
 /**
  * Returns true if the expression is a constant numeric literal with the specified value, or a
  * constant vector with all elements equal to the specified value.
  */
 bool is_constant(const Expression& expr, double value) {
     switch (expr.fKind) {
         case Expression::kIntLiteral_Kind:
             return ((IntLiteral&) expr).fValue == value;
         case Expression::kFloatLiteral_Kind:
             return ((FloatLiteral&) expr).fValue == value;
         case Expression::kConstructor_Kind: {
             Constructor& c = (Constructor&) expr;
+            bool isFloat = c.fType.columns() > 1 ? c.fType.componentType().isFloat()
+                                                 : c.fType.isFloat();
             if (c.fType.kind() == Type::kVector_Kind && c.isConstant()) {
                 for (int i = 0; i < c.fType.columns(); ++i) {
-                    if (!is_constant(*c.getVecComponent(i), value)) {
+                    if (isFloat) {
+                        if (c.getFVecComponent(i) != value) {
+                            return false;
+                        }
+                    } else if (c.getIVecComponent(i) != value) {
                         return false;
                     }
                 }
                 return true;
             }
             return false;
         }
         default:
             return false;
     }
 }
 
 /**
  * Collapses the binary expression pointed to by iter down to just the right side (in both the IR
  * and CFG structures).
  */
diff --git a/src/sksl/SkSLUtil.h b/src/sksl/SkSLUtil.h
index dc430e8df2..aed8af272c 100644
--- a/src/sksl/SkSLUtil.h
+++ b/src/sksl/SkSLUtil.h
@@ -23,7 +23,7 @@
 #endif // SK_SUPPORT_GPU
 #endif // SKSL_STANDALONE
 
-using SKSL_INT = uint32_t;
+using SKSL_INT = int32_t;
 using SKSL_FLOAT = float;
 
 class GrShaderCaps;
diff --git a/src/sksl/ir/SkSLConstructor.h b/src/sksl/ir/SkSLConstructor.h
index 0b9a58b0b8..8d7a4989da 100644
--- a/src/sksl/ir/SkSLConstructor.h
+++ b/src/sksl/ir/SkSLConstructor.h
@@ -19,178 +19,205 @@ namespace SkSL {
 /**
  * Represents the construction of a compound type, such as "float2(x, y)".
  *
  * Vector constructors will always consist of either exactly 1 scalar, or a collection of vectors
  * and scalars totalling exactly the right number of scalar components.
  *
  * Matrix constructors will always consist of either exactly 1 scalar, exactly 1 matrix, or a
  * collection of vectors and scalars totalling exactly the right number of scalar components.
  */
 struct Constructor : public Expression {
     Constructor(int offset, const Type& type, std::vector<std::unique_ptr<Expression>> arguments)
     : INHERITED(offset, kConstructor_Kind, type)
     , fArguments(std::move(arguments)) {}
 
     std::unique_ptr<Expression> constantPropagate(const IRGenerator& irGenerator,
                                                   const DefinitionMap& definitions) override {
         if (fArguments.size() == 1 && fArguments[0]->fKind == Expression::kIntLiteral_Kind) {
             if (fType.isFloat()) {
                 // promote float(1) to 1.0
                 int64_t intValue = ((IntLiteral&) *fArguments[0]).fValue;
                 return std::unique_ptr<Expression>(new FloatLiteral(irGenerator.fContext,
                                                                     fOffset,
                                                                     intValue));
             } else if (fType.isInteger()) {
                 // promote uint(1) to 1u
                 int64_t intValue = ((IntLiteral&) *fArguments[0]).fValue;
                 return std::unique_ptr<Expression>(new IntLiteral(fOffset,
                                                                   intValue,
                                                                   &fType));
             }
         }
         return nullptr;
     }
 
     bool hasSideEffects() const override {
         for (const auto& arg : fArguments) {
             if (arg->hasSideEffects()) {
                 return true;
             }
         }
         return false;
     }
 
     std::unique_ptr<Expression> clone() const override {
         std::vector<std::unique_ptr<Expression>> cloned;
         for (const auto& arg : fArguments) {
             cloned.push_back(arg->clone());
         }
         return std::unique_ptr<Expression>(new Constructor(fOffset, fType, std::move(cloned)));
     }
 
     String description() const override {
         String result = fType.description() + "(";
         String separator;
         for (size_t i = 0; i < fArguments.size(); i++) {
             result += separator;
             result += fArguments[i]->description();
             separator = ", ";
         }
         result += ")";
         return result;
     }
 
     bool isConstant() const override {
         for (size_t i = 0; i < fArguments.size(); i++) {
             if (!fArguments[i]->isConstant()) {
                 return false;
             }
         }
         return true;
     }
 
     bool compareConstant(const Context& context, const Expression& other) const override {
         SkASSERT(other.fKind == Expression::kConstructor_Kind && other.fType == fType);
         Constructor& c = (Constructor&) other;
         if (c.fType.kind() == Type::kVector_Kind) {
+            bool isFloat = c.fType.columns() > 1 ? c.fType.componentType().isFloat()
+                                                 : c.fType.isFloat();
             for (int i = 0; i < fType.columns(); i++) {
-                if (!this->getVecComponent(i)->compareConstant(context, *c.getVecComponent(i))) {
+                if (isFloat) {
+                    if (this->getFVecComponent(i) != c.getFVecComponent(i)) {
+                        return false;
+                    }
+                } else if (this->getIVecComponent(i) != c.getIVecComponent(i)) {
                     return false;
                 }
             }
             return true;
         }
         // shouldn't be possible to have a constant constructor that isn't a vector or matrix;
         // a constant scalar constructor should have been collapsed down to the appropriate
         // literal
         SkASSERT(fType.kind() == Type::kMatrix_Kind);
         for (int col = 0; col < fType.columns(); col++) {
             for (int row = 0; row < fType.rows(); row++) {
                 if (getMatComponent(col, row) != c.getMatComponent(col, row)) {
                     return false;
                 }
             }
         }
         return true;
     }
 
-    const Expression* getVecComponent(int index) const {
+    template<typename type>
+    type getVecComponent(int index) const {
         SkASSERT(fType.kind() == Type::kVector_Kind);
         if (fArguments.size() == 1 && fArguments[0]->fType.kind() == Type::kScalar_Kind) {
-            return fArguments[0].get();
+            if (std::is_floating_point<type>::value) {
+                return fArguments[0]->getConstantFloat();
+            } else {
+                return fArguments[0]->getConstantInt();
+            }
         }
         int current = 0;
         for (const auto& arg : fArguments) {
             SkASSERT(current <= index);
             if (arg->fType.kind() == Type::kScalar_Kind) {
                 if (index == current) {
-                    return arg.get();
+                    if (std::is_floating_point<type>::value) {
+                        return arg.get()->getConstantFloat();
+                    } else {
+                        return arg.get()->getConstantInt();
+                    }
                 }
                 current++;
+            } else if (arg->fKind == kConstructor_Kind) {
+                if (current + arg->fType.columns() > index) {
+                    return ((const Constructor&) *arg).getVecComponent<type>(index - current);
+                }
+                current += arg->fType.columns();
             } else {
                 if (current + arg->fType.columns() > index) {
-                    return ((const Constructor&) *arg).getVecComponent(index - current);
+                    SkASSERT(arg->fKind == kPrefix_Kind);
+                    const PrefixExpression& p = (PrefixExpression&) *arg;
+                    const Constructor& c = (const Constructor&) *p.fOperand;
+                    return -c.getVecComponent<type>(index - current);
                 }
                 current += arg->fType.columns();
             }
         }
         ABORT("failed to find vector component %d in %s\n", index, description().c_str());
     }
 
-    double getFVecComponent(int index) const override {
-        return this->getVecComponent(index)->getConstantFloat();
+    SKSL_FLOAT getFVecComponent(int n) const override {
+        return this->getVecComponent<SKSL_FLOAT>(n);
     }
 
-    int64_t getIVecComponent(int index) const override {
-        return this->getVecComponent(index)->getConstantInt();
+    /**
+     * For a literal vector expression, return the integer value of the n'th vector component. It is
+     * an error to call this method on an expression which is not a literal vector.
+     */
+    SKSL_INT getIVecComponent(int n) const override {
+        return this->getVecComponent<SKSL_INT>(n);
     }
 
-    double getMatComponent(int col, int row) const override {
+    SKSL_FLOAT getMatComponent(int col, int row) const override {
         SkASSERT(this->isConstant());
         SkASSERT(fType.kind() == Type::kMatrix_Kind);
         SkASSERT(col < fType.columns() && row < fType.rows());
         if (fArguments.size() == 1) {
             if (fArguments[0]->fType.kind() == Type::kScalar_Kind) {
                 // single scalar argument, so matrix is of the form:
                 // x 0 0
                 // 0 x 0
                 // 0 0 x
                 // return x if col == row
                 return col == row ? fArguments[0]->getConstantFloat() : 0.0;
             }
             if (fArguments[0]->fType.kind() == Type::kMatrix_Kind) {
                 SkASSERT(fArguments[0]->fKind == Expression::kConstructor_Kind);
                 // single matrix argument. make sure we're within the argument's bounds.
                 const Type& argType = ((Constructor&) *fArguments[0]).fType;
                 if (col < argType.columns() && row < argType.rows()) {
                     // within bounds, defer to argument
                     return ((Constructor&) *fArguments[0]).getMatComponent(col, row);
                 }
                 // out of bounds
                 return 0.0;
             }
         }
         int currentIndex = 0;
         int targetIndex = col * fType.rows() + row;
         for (const auto& arg : fArguments) {
             SkASSERT(targetIndex >= currentIndex);
             SkASSERT(arg->fType.rows() == 1);
             if (currentIndex + arg->fType.columns() > targetIndex) {
                 if (arg->fType.columns() == 1) {
                     return arg->getConstantFloat();
                 } else {
                     return arg->getFVecComponent(targetIndex - currentIndex);
                 }
             }
             currentIndex += arg->fType.columns();
         }
         ABORT("can't happen, matrix component out of bounds");
     }
 
     std::vector<std::unique_ptr<Expression>> fArguments;
 
     typedef Expression INHERITED;
 };
 
 } // namespace
 
 #endif
diff --git a/src/sksl/ir/SkSLExpression.h b/src/sksl/ir/SkSLExpression.h
index 28de7b15af..2302bdf383 100644
--- a/src/sksl/ir/SkSLExpression.h
+++ b/src/sksl/ir/SkSLExpression.h
@@ -23,128 +23,128 @@ typedef std::unordered_map<const Variable*, std::unique_ptr<Expression>*> Defini
 /**
  * Abstract supertype of all expressions.
  */
 struct Expression : public IRNode {
     enum Kind {
         kAppendStage_Kind,
         kBinary_Kind,
         kBoolLiteral_Kind,
         kConstructor_Kind,
         kExternalFunctionCall_Kind,
         kExternalValue_Kind,
         kIntLiteral_Kind,
         kFieldAccess_Kind,
         kFloatLiteral_Kind,
         kFunctionReference_Kind,
         kFunctionCall_Kind,
         kIndex_Kind,
         kNullLiteral_Kind,
         kPrefix_Kind,
         kPostfix_Kind,
         kSetting_Kind,
         kSwizzle_Kind,
         kVariableReference_Kind,
         kTernary_Kind,
         kTypeReference_Kind,
         kDefined_Kind
     };
 
     Expression(int offset, Kind kind, const Type& type)
     : INHERITED(offset)
     , fKind(kind)
     , fType(std::move(type)) {}
 
     /**
      * Returns true if this expression is constant. compareConstant must be implemented for all
      * constants!
      */
     virtual bool isConstant() const {
         return false;
     }
 
     /**
      * Compares this constant expression against another constant expression of the same type. It is
      * an error to call this on non-constant expressions, or if the types of the expressions do not
      * match.
      */
     virtual bool compareConstant(const Context& context, const Expression& other) const {
         ABORT("cannot call compareConstant on this type");
     }
 
     /**
      * For an expression which evaluates to a constant int, returns the value. Otherwise calls
      * ABORT.
      */
     virtual int64_t getConstantInt() const {
         ABORT("not a constant int");
     }
 
     /**
      * For an expression which evaluates to a constant float, returns the value. Otherwise calls
      * ABORT.
      */
     virtual double getConstantFloat() const {
         ABORT("not a constant float");
     }
 
     /**
      * Returns true if evaluating the expression potentially has side effects. Expressions may never
      * return false if they actually have side effects, but it is legal (though suboptimal) to
      * return true if there are not actually any side effects.
      */
     virtual bool hasSideEffects() const = 0;
 
     /**
      * Given a map of known constant variable values, substitute them in for references to those
      * variables occurring in this expression and its subexpressions.  Similar simplifications, such
      * as folding a constant binary expression down to a single value, may also be performed.
      * Returns a new expression which replaces this expression, or null if no replacements were
      * made. If a new expression is returned, this expression is no longer valid.
      */
     virtual std::unique_ptr<Expression> constantPropagate(const IRGenerator& irGenerator,
                                                           const DefinitionMap& definitions) {
         return nullptr;
     }
 
     virtual int coercionCost(const Type& target) const {
         return fType.coercionCost(target);
     }
 
     /**
      * For a literal vector expression, return the floating point value of the n'th vector
      * component. It is an error to call this method on an expression which is not a literal vector.
      */
-    virtual double getFVecComponent(int n) const {
+    virtual SKSL_FLOAT getFVecComponent(int n) const {
         SkASSERT(false);
         return 0;
     }
 
     /**
      * For a literal vector expression, return the integer value of the n'th vector component. It is
      * an error to call this method on an expression which is not a literal vector.
      */
-    virtual int64_t getIVecComponent(int n) const {
+    virtual SKSL_INT getIVecComponent(int n) const {
         SkASSERT(false);
         return 0;
     }
 
     /**
      * For a literal matrix expression, return the floating point value of the component at
      * [col][row]. It is an error to call this method on an expression which is not a literal
      * matrix.
      */
-    virtual double getMatComponent(int col, int row) const {
+    virtual SKSL_FLOAT getMatComponent(int col, int row) const {
         SkASSERT(false);
         return 0;
     }
 
     virtual std::unique_ptr<Expression> clone() const = 0;
 
     const Kind fKind;
     const Type& fType;
 
     typedef IRNode INHERITED;
 };
 
 } // namespace
 
 #endif
diff --git a/src/sksl/ir/SkSLPrefixExpression.h b/src/sksl/ir/SkSLPrefixExpression.h
index 3cdd1fab9b..408f1d0864 100644
--- a/src/sksl/ir/SkSLPrefixExpression.h
+++ b/src/sksl/ir/SkSLPrefixExpression.h
@@ -19,62 +19,62 @@ namespace SkSL {
 /**
  * An expression modified by a unary operator appearing before it, such as '!flag'.
  */
 struct PrefixExpression : public Expression {
     PrefixExpression(Token::Kind op, std::unique_ptr<Expression> operand)
     : INHERITED(operand->fOffset, kPrefix_Kind, operand->fType)
     , fOperand(std::move(operand))
     , fOperator(op) {}
 
     bool isConstant() const override {
         return fOperator == Token::MINUS && fOperand->isConstant();
     }
 
     bool hasSideEffects() const override {
         return fOperator == Token::PLUSPLUS || fOperator == Token::MINUSMINUS ||
                fOperand->hasSideEffects();
     }
 
     std::unique_ptr<Expression> constantPropagate(const IRGenerator& irGenerator,
                                                   const DefinitionMap& definitions) override {
         if (fOperand->fKind == Expression::kFloatLiteral_Kind) {
             return std::unique_ptr<Expression>(new FloatLiteral(
                                                               irGenerator.fContext,
                                                               fOffset,
                                                               -((FloatLiteral&) *fOperand).fValue));
 
         }
         return nullptr;
     }
 
-    double getFVecComponent(int index) const override {
+    SKSL_FLOAT getFVecComponent(int index) const override {
         SkASSERT(fOperator == Token::Kind::MINUS);
         return -fOperand->getFVecComponent(index);
     }
 
-    int64_t getIVecComponent(int index) const override {
+    SKSL_INT getIVecComponent(int index) const override {
         SkASSERT(fOperator == Token::Kind::MINUS);
         return -fOperand->getIVecComponent(index);
     }
 
-    double getMatComponent(int col, int row) const override {
+    SKSL_FLOAT getMatComponent(int col, int row) const override {
         SkASSERT(fOperator == Token::Kind::MINUS);
         return -fOperand->getMatComponent(col, row);
     }
 
     std::unique_ptr<Expression> clone() const override {
         return std::unique_ptr<Expression>(new PrefixExpression(fOperator, fOperand->clone()));
     }
 
     String description() const override {
         return Compiler::OperatorName(fOperator) + fOperand->description();
     }
 
     std::unique_ptr<Expression> fOperand;
     const Token::Kind fOperator;
 
     typedef Expression INHERITED;
 };
 
 } // namespace
 
 #endif
diff --git a/tests/SkSLGLSLTest.cpp b/tests/SkSLGLSLTest.cpp
index f196250e46..e563d077c1 100644
--- a/tests/SkSLGLSLTest.cpp
+++ b/tests/SkSLGLSLTest.cpp
@@ -2296,3 +2296,19 @@ DEF_TEST(SkSLSwizzleConstants, r) {
          SkSL::Program::kFragment_Kind
          );
 }
+
+DEF_TEST(SkSLNegatedVectorLiteral, r) {
+    test(r,
+         "void main() {"
+         "    if (half4(1) == half4(-half2(-1), half2(1)))"
+         "        sk_FragColor = half4(0, 1, 0, 1);"
+         "    else"
+         "        sk_FragColor = half4(1, 0, 0, 1);"
+         "}",
+         *SkSL::ShaderCapsFactory::Default(),
+         "#version 400\n"
+         "out vec4 sk_FragColor;\n"
+         "void main() {\n"
+         "    sk_FragColor = vec4(0.0, 1.0, 0.0, 1.0);\n"
+         "}\n");
+}
