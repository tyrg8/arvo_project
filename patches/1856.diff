commit e5930722d485207ca158612a2b08816337fed7e8
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Tue Nov 14 15:47:55 2017 -0800

    Fix invalid buffer access in OOM times
    
    Hopefully fully fixes
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1856

diff --git a/src/hb-ot-layout-gsubgpos-private.hh b/src/hb-ot-layout-gsubgpos-private.hh
index b0cffa3a8..dcaa2617c 100644
--- a/src/hb-ot-layout-gsubgpos-private.hh
+++ b/src/hb-ot-layout-gsubgpos-private.hh
@@ -970,120 +970,121 @@ static inline void recurse_lookups (context_t *c,
 static inline bool apply_lookup (hb_apply_context_t *c,
 				 unsigned int count, /* Including the first glyph */
 				 unsigned int match_positions[HB_MAX_CONTEXT_LENGTH], /* Including the first glyph */
 				 unsigned int lookupCount,
 				 const LookupRecord lookupRecord[], /* Array of LookupRecords--in design order */
 				 unsigned int match_length)
 {
   TRACE_APPLY (nullptr);
 
   hb_buffer_t *buffer = c->buffer;
   int end;
 
   /* All positions are distance from beginning of *output* buffer.
    * Adjust. */
   {
     unsigned int bl = buffer->backtrack_len ();
     end = bl + match_length;
 
     int delta = bl - buffer->idx;
     /* Convert positions to new indexing. */
     for (unsigned int j = 0; j < count; j++)
       match_positions[j] += delta;
   }
 
   for (unsigned int i = 0; i < lookupCount && !buffer->in_error; i++)
   {
     unsigned int idx = lookupRecord[i].sequenceIndex;
     if (idx >= count)
       continue;
 
     /* Don't recurse to ourself at same position.
      * Note that this test is too naive, it doesn't catch longer loops. */
     if (idx == 0 && lookupRecord[i].lookupListIndex == c->lookup_index)
       continue;
 
-    buffer->move_to (match_positions[idx]);
+    if (unlikely (!buffer->move_to (match_positions[idx])))
+      break;
 
     unsigned int orig_len = buffer->backtrack_len () + buffer->lookahead_len ();
     if (!c->recurse (lookupRecord[i].lookupListIndex))
       continue;
 
     unsigned int new_len = buffer->backtrack_len () + buffer->lookahead_len ();
     int delta = new_len - orig_len;
 
     if (!delta)
         continue;
 
     /* Recursed lookup changed buffer len.  Adjust.
      *
      * TODO:
      *
      * Right now, if buffer length increased by n, we assume n new glyphs
      * were added right after the current position, and if buffer length
      * was decreased by n, we assume n match positions after the current
      * one where removed.  The former (buffer length increased) case is
      * fine, but the decrease case can be improved in at least two ways,
      * both of which are significant:
      *
      *   - If recursed-to lookup is MultipleSubst and buffer length
      *     decreased, then it's current match position that was deleted,
      *     NOT the one after it.
      *
      *   - If buffer length was decreased by n, it does not necessarily
      *     mean that n match positions where removed, as there might
      *     have been marks and default-ignorables in the sequence.  We
      *     should instead drop match positions between current-position
      *     and current-position + n instead.
      *
      * It should be possible to construct tests for both of these cases.
      */
 
     end += delta;
     if (end <= int (match_positions[idx]))
     {
       /* End might end up being smaller than match_positions[idx] if the recursed
        * lookup ended up removing many items, more than we have had matched.
        * Just never rewind end back and get out of here.
        * https://bugs.chromium.org/p/chromium/issues/detail?id=659496 */
       end = match_positions[idx];
       /* There can't be any further changes. */
       break;
     }
 
     unsigned int next = idx + 1; /* next now is the position after the recursed lookup. */
 
     if (delta > 0)
     {
       if (unlikely (delta + count > HB_MAX_CONTEXT_LENGTH))
 	break;
     }
     else
     {
       /* NOTE: delta is negative. */
       delta = MAX (delta, (int) next - (int) count);
       next -= delta;
     }
 
     /* Shift! */
     memmove (match_positions + next + delta, match_positions + next,
 	     (count - next) * sizeof (match_positions[0]));
     next += delta;
     count += delta;
 
     /* Fill in new entries. */
     for (unsigned int j = idx + 1; j < next; j++)
       match_positions[j] = match_positions[j - 1] + 1;
 
     /* And fixup the rest. */
     for (; next < count; next++)
       match_positions[next] += delta;
   }
 
   buffer->move_to (end);
 
   return_trace (true);
 }
 
 
 
 /* Contextual lookups */
