commit 963781a985a777c21987f432dc4a1b766d1db23b
Author: Mike Reed <reed@google.com>
Date:   Tue Apr 17 11:06:31 2018 -0400

    only recheck fNeedsTiling if we computed fSrcBounds
    
    Bug: oss-fuzz:7363
    Change-Id: I64cc83d31e8aaf8221e78c3b5301ffcce45449c1
    Reviewed-on: https://skia-review.googlesource.com/121795
    Reviewed-by: Mike Reed <reed@google.com>
    Commit-Queue: Mike Reed <reed@google.com>

diff --git a/src/core/SkBitmapDevice.cpp b/src/core/SkBitmapDevice.cpp
index f6433afb7e..7c0e0ab540 100644
--- a/src/core/SkBitmapDevice.cpp
+++ b/src/core/SkBitmapDevice.cpp
@@ -61,70 +61,70 @@ class SkDrawTiler {
 public:
     static bool NeedsTiling(SkBitmapDevice* dev) {
         return dev->width() > kMaxDim || dev->height() > kMaxDim;
     }
 
     SkDrawTiler(SkBitmapDevice* dev, const SkRect* bounds) : fDevice(dev) {
         fDone = false;
 
         // we need fDst to be set, and if we're actually drawing, to dirty the genID
         if (!dev->accessPixels(&fRootPixmap)) {
             // NoDrawDevice uses us (why?) so we have to catch this case w/ no pixels
             fRootPixmap.reset(dev->imageInfo(), nullptr, 0);
         }
 
         // do a quick check, so we don't even have to process "bounds" if there is no need
         const SkIRect clipR = dev->fRCStack.rc().getBounds();
         fNeedsTiling = clipR.right() > kMaxDim || clipR.bottom() > kMaxDim;
         if (fNeedsTiling) {
             if (bounds) {
                 SkRect devBounds;
                 dev->ctm().mapRect(&devBounds, *bounds);
                 if (devBounds.intersect(SkRect::Make(clipR))) {
                     fSrcBounds = devBounds.roundOut();
+                    // Check again, now that we have computed srcbounds.
+                    fNeedsTiling = fSrcBounds.right() > kMaxDim || fSrcBounds.bottom() > kMaxDim;
                 } else {
                     fNeedsTiling = false;
                     fDone = true;
                 }
-                // Check again, now that we have computed srcbounds.
-                fNeedsTiling = fSrcBounds.right() > kMaxDim || fSrcBounds.bottom() > kMaxDim;
             } else {
                 fSrcBounds = clipR;
             }
         }
 
         if (fNeedsTiling) {
             // fDraw.fDst is reset each time in setupTileDraw()
             fDraw.fMatrix = &fTileMatrix;
             fDraw.fRC = &fTileRC;
             // we'll step/increase it before using it
             fOrigin.set(fSrcBounds.fLeft - kMaxDim, fSrcBounds.fTop);
         } else {
             // don't reference fSrcBounds, as it may not have been set
             fDraw.fDst = fRootPixmap;
             fDraw.fMatrix = &dev->ctm();
             fDraw.fRC = &dev->fRCStack.rc();
             fOrigin.set(0, 0);
         }
     }
 
     bool needsTiling() const { return fNeedsTiling; }
 
     const SkDraw* next() {
         if (fDone) {
             return nullptr;
         }
         if (fNeedsTiling) {
             do {
                 this->stepAndSetupTileDraw();  // might set the clip to empty and fDone to true
             } while (!fDone && fTileRC.isEmpty());
             // if we exit the loop and we're still empty, we're (past) done
             if (fTileRC.isEmpty()) {
                 SkASSERT(fDone);
                 return nullptr;
             }
             SkASSERT(!fTileRC.isEmpty());
         } else {
             fDone = true;   // only draw untiled once
         }
         return &fDraw;
     }
