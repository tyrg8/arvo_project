commit 042f791a6028cf9ed58a71d0ea7b5bd78b63fc7b
Merge: ea7f3423f 9034f1c9f
Author: Jayaram Sreevalsan <jayaramcs@users.noreply.github.com>
Date:   Thu Jan 13 08:50:26 2022 -0500

    Merge pull request #2656 from APriestman/4936_insertPrep
    
    4936 Add prepared statements for inserts

diff --git a/bindings/java/src/org/sleuthkit/datamodel/CaseDbAccessManager.java b/bindings/java/src/org/sleuthkit/datamodel/CaseDbAccessManager.java
index c009c77b0..8e417fdf3 100644
--- a/bindings/java/src/org/sleuthkit/datamodel/CaseDbAccessManager.java
+++ b/bindings/java/src/org/sleuthkit/datamodel/CaseDbAccessManager.java
@@ -610,53 +610,111 @@ public void select(final String sql, final CaseDbAccessQueryCallback queryCallba
 	/**
 	 * Creates a prepared statement object for the purposes of running a select
 	 * statement.
 	 *
 	 * NOTE: Creating the CaseDbPreparedStatement opens a connection and
 	 * acquires a read lock on the case database. For this reason, it is
 	 * recommended to close the prepared statement as soon as it is no longer
 	 * needed, through either a try-with-resources block or calling close().
 	 * Additionally, calling other methods that access or update the database
 	 * should be avoided while the prepared statement is open to prevent
 	 * possible deadlocks.
 	 *
 	 * @param sql The select statement without the starting select keyword.
 	 *
 	 * @return The prepared statement object.
 	 *
 	 * @throws TskCoreException
 	 */
 	@Beta
 	public CaseDbPreparedStatement prepareSelect(String sql) throws TskCoreException {
 		String selectSQL = "SELECT " + sql; // NON-NLS
 		try {
-			return new CaseDbPreparedStatement(selectSQL, false);
+			return new CaseDbPreparedStatement(StatementType.SELECT, selectSQL, false);
 		} catch (SQLException ex) {
 			throw new TskCoreException("Error creating select prepared statement for query:\n" + selectSQL, ex);
 		}
 	}
 
 	/**
 	 * Performs a select statement query with the given case prepared statement.
 	 *
 	 * @param preparedStatement The case prepared statement.
 	 * @param queryCallback     The callback to handle the result set.
 	 *
 	 * @throws TskCoreException
 	 */
 	@Beta
 	public void select(CaseDbPreparedStatement preparedStatement, CaseDbAccessQueryCallback queryCallback) throws TskCoreException {
+		if (!preparedStatement.getType().equals(StatementType.SELECT)) {
+			throw new TskCoreException("CaseDbPreparedStatement has incorrect type for select operation");
+		}
+		
 		try (ResultSet resultSet = preparedStatement.getStatement().executeQuery()) {
 			queryCallback.process(resultSet);
 		} catch (SQLException ex) {
 			throw new TskCoreException(MessageFormat.format("Error running SELECT query:\n{0}", preparedStatement.getOriginalSql()), ex);
 		}
 	}
+	
+	/**
+	 * Creates a prepared statement object for the purposes of running an insert
+	 * statement. The given SQL should not include the starting "INSERT INTO" 
+	 * or the name of the table.
+	 * 
+	 * For PostGreSQL, the caller must include the ON CONFLICT DO NOTHING clause
+	 *
+	 * @param tableName The name of the table being updated.
+	 * @param sql       The insert statement without the starting "INSERT INTO (table name)" part.
+	 * @param trans     The open transaction.
+	 *
+	 * @return The prepared statement object.
+	 *
+	 * @throws TskCoreException
+	 */
+	@Beta
+	public CaseDbPreparedStatement prepareInsert(String tableName, String sql, CaseDbTransaction trans) throws TskCoreException {
+		validateTableName(tableName);
+		validateSQL(sql);
+		
+		String insertSQL = "INSERT";
+		if (DbType.SQLITE == tskDB.getDatabaseType()) {
+			insertSQL += " OR IGNORE";
+		}
+		insertSQL = insertSQL + " INTO " + tableName + " " + sql; // NON-NLS
+	
+		try {
+			return new CaseDbPreparedStatement(StatementType.INSERT, insertSQL, trans);
+		} catch (SQLException ex) {
+			throw new TskCoreException("Error creating insert prepared statement for query:\n" + insertSQL, ex);
+		}
+	}
+	
+	/**
+	 * Performs a insert statement query with the given case prepared statement.
+	 *
+	 * @param preparedStatement The case prepared statement.
+	 * 
+	 * @throws TskCoreException
+	 */
+	@Beta
+	public void insert(CaseDbPreparedStatement preparedStatement) throws TskCoreException {
+		
+		if (!preparedStatement.getType().equals(StatementType.INSERT)) {
+			throw new TskCoreException("CaseDbPreparedStatement has incorrect type for insert operation");
+		}
+		
+		try {
+			preparedStatement.getStatement().executeUpdate();
+		} catch (SQLException ex) {
+			throw new TskCoreException("Error inserting row in table " + "" + " with sql = "+ "", ex);
+		}
+	}
 
 	/**
 	 * Deletes a row in the specified table.
 	 * 
 	 * @param tableName table from which to delete the row
 	 * @param sql - SQL string specifying the condition to identify the row to delete
 	 * 
 	 * @throws TskCoreException 
 	 */
@@ -716,73 +774,119 @@ private void validateIndexName(String indexName) throws TskCoreException {
 	/**
 	 * Validates given SQL string.
 	 * 
 	 * @param sql The SQL to validate.
 	 * 
 	 * @throws TskCoreException Thrown if the SQL is not valid.
 	 */
 	private void validateSQL(String sql) throws TskCoreException {
 		/*
 		 * TODO (JIRA-5950): Need SQL injection defense in CaseDbAccessManager 
 		 */
 	}
 	
+	/**
+	 * Enum to track which type of lock the CaseDbPreparedStatement holds.
+	 */
+	private enum LockType {
+		READ,
+		WRITE,
+		NONE;
+	}
+	
+	/**
+	 * Enum to track which type of statement the CaseDbPreparedStatement holds.
+	 */
+	private enum StatementType {
+		SELECT,
+		INSERT;
+	}
 	
 	/**
 	 * A wrapper around a PreparedStatement to execute queries against the
 	 * database.
 	 */
 	@Beta
 	public class CaseDbPreparedStatement implements AutoCloseable {
 
 		private final CaseDbConnection connection;
 		private final PreparedStatement preparedStatement;
 		private final String originalSql;
-		private final boolean hasWriteLock;
-
+		private final LockType lockType;
+		private final StatementType type;
+		
 		/**
-		 * Main constructor.
+		 * Construct a prepared statement. This should not be used if a transaction
+		 * is already open.
 		 *
 		 * NOTE: Creating the CaseDbPreparedStatement opens a connection and
 		 * acquires a read lock on the case database. For this reason, it is
 		 * recommended to close the prepared statement as soon as it is no
 		 * longer needed, through either a try-with-resources block or calling
 		 * close(). Additionally, calling other methods that access or update
 		 * the database should be avoided while the prepared statement is open
 		 * to prevent possible deadlocks.
 		 *
+		 * @param type                The type of statement.
 		 * @param query               The query string.
 		 * @param isWriteLockRequired Whether or not a write lock is required.
 		 *                            If a write lock is not required, just a
 		 *                            read lock is acquired.
 		 *
 		 * @throws SQLException
 		 * @throws TskCoreException
 		 */
-		private CaseDbPreparedStatement(String query, boolean isWriteLockRequired) throws SQLException, TskCoreException {		
+		private CaseDbPreparedStatement(StatementType type, String query, boolean isWriteLockRequired) throws SQLException, TskCoreException {		
 			if (isWriteLockRequired) {
-				CaseDbAccessManager.this.tskDB.acquireSingleUserCaseWriteLock();	
+				CaseDbAccessManager.this.tskDB.acquireSingleUserCaseWriteLock();
+				this.lockType = LockType.WRITE;
 			} else {
-				CaseDbAccessManager.this.tskDB.acquireSingleUserCaseReadLock();	
+				CaseDbAccessManager.this.tskDB.acquireSingleUserCaseReadLock();
+				this.lockType = LockType.READ;
 			}
-			
-			this.hasWriteLock = isWriteLockRequired;
 			this.connection = tskDB.getConnection();
 			this.preparedStatement = connection.getPreparedStatement(query, Statement.NO_GENERATED_KEYS);
 			this.originalSql = query;
-			
+			this.type = type;
+		}
+		
+		/**
+		 * Construct a prepared statement using an already open transaction.
+		 *
+		 * @param type                The type of statement.
+		 * @param query               The query string.
+		 * @param trans               The open transaction.
+		 *
+		 * @throws SQLException
+		 * @throws TskCoreException
+		 */
+		private CaseDbPreparedStatement(StatementType type, String query, CaseDbTransaction trans) throws SQLException, TskCoreException {		
+			this.lockType = LockType.NONE;
+			this.connection = trans.getConnection();
+			this.preparedStatement = connection.getPreparedStatement(query, Statement.NO_GENERATED_KEYS);
+			this.originalSql = query;
+			this.type = type;
 		}
 
 		/**
 		 * Returns the delegate prepared statement.
 		 *
 		 * @return The delegate prepared statement.
 		 */
 		private PreparedStatement getStatement() {
 			return preparedStatement;
 		}
+		
+		/**
+		 * Get the type of statement.
+		 * 
+		 * @return The statement type (select or insert).
+		 */
+		private StatementType getType() {
+			return type;
+		}
 
 		/**
 		 * Returns the original sql query.
 		 *
 		 * @return The original sql query.
 		 */
@@ -967,16 +1071,20 @@ public void setObject(int parameterIndex, Object x) throws TskCoreException {
 
 		@Override
 		public void close() throws SQLException {
-
-			preparedStatement.close();
+			
+			// Don't close the statement/connection or release a lock if we were supplied a transaction.
+			// Everything will be handled when the transaction is closed.
+			if (lockType.equals(LockType.NONE)) {
+				return;
+			}
+			
 			connection.close();
-
-			if (hasWriteLock) {
+			if (lockType.equals(LockType.WRITE)) {
 				CaseDbAccessManager.this.tskDB.releaseSingleUserCaseWriteLock();
 			} else {
 				CaseDbAccessManager.this.tskDB.releaseSingleUserCaseReadLock();
 			}
 		}
 	}
 
 }
diff --git a/bindings/java/src/org/sleuthkit/datamodel/SleuthkitCase.java b/bindings/java/src/org/sleuthkit/datamodel/SleuthkitCase.java
index 16d0cfc45..5e14f322b 100644
--- a/bindings/java/src/org/sleuthkit/datamodel/SleuthkitCase.java
+++ b/bindings/java/src/org/sleuthkit/datamodel/SleuthkitCase.java
@@ -13217,22 +13217,22 @@ PreparedStatement getPreparedStatement(PREPARED_STATEMENT statementKey, int gene
 		/**
 		 * Get a prepared statement for the given input. Will cache the prepared
 		 * statement for this connection.
 		 *
 		 * @param sqlStatement The SQL for the prepared statement.
 		 * @param generateKeys The generate keys enum from Statement.
 		 *
 		 * @return The prepared statement
 		 *
 		 * @throws SQLException
 		 */
 		PreparedStatement getPreparedStatement(String sqlStatement, int generateKeys) throws SQLException {
 			PreparedStatement statement;
 			String statementKey = "SQL:" + sqlStatement + " Key:" + generateKeys;
-			if (adHocPreparedStatements.containsKey(statementKey)) {
+			if (adHocPreparedStatements.containsKey(statementKey) && !adHocPreparedStatements.get(statementKey).isClosed()) {
 				statement = this.adHocPreparedStatements.get(statementKey);
 			} else {
 				statement = prepareStatement(sqlStatement, generateKeys);
 				this.adHocPreparedStatements.put(statementKey, statement);
 			}
 			return statement;
 		}
