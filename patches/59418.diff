commit ab9112d95d2af2ca5d9d48ee9d248fbd813c9c2f
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Wed May 31 00:15:49 2023 +0200

    Limit bmp bitmap offset earlier to also limit palette size.
    
    This fixes OSS-fuzz issue 59418.

diff --git a/source/fitz/load-bmp.c b/source/fitz/load-bmp.c
index 3d27d749e..db173ce0a 100644
--- a/source/fitz/load-bmp.c
+++ b/source/fitz/load-bmp.c
@@ -1091,113 +1091,113 @@ static fz_pixmap *
 bmp_read_image(fz_context *ctx, struct info *info, const unsigned char *begin, const unsigned char *end, const unsigned char *p, int only_metadata)
 {
 	const unsigned char *profilebegin;
 
 	memset(info, 0x00, sizeof (*info));
 	info->colorspacetype = 0xffffffff;
 
 	p = profilebegin = bmp_read_file_header(ctx, info, begin, end, p);
 
 	p = bmp_read_info_header(ctx, info, begin, end, p);
 
+	/* clamp bitmap offset to buffer size */
+	if ((uint32_t)(end - begin) < info->bitmapoffset)
+		info->bitmapoffset = end - begin;
+
 	if (has_palette(info))
 		p = bmp_read_palette(ctx, info, begin, end, p);
 
 	if (has_color_masks(info))
 		p = bmp_read_color_masks(ctx, info, begin, end, p);
 
-	/* clamp bitmap offset to buffer size */
-	if ((uint32_t)(end - begin) < info->bitmapoffset)
-		info->bitmapoffset = end - begin;
-
 	info->xres = DPM_TO_DPI(info->xres);
 	info->yres = DPM_TO_DPI(info->yres);
 
 	/* extract topdown/bottomup from height for windows bitmaps */
 	if (is_win_bmp(info))
 	{
 		int bits = info->version == 12 ? 16 : 32;
 
 		info->topdown = (info->height >> (bits - 1)) & 1;
 		if (info->topdown)
 		{
 			info->height--;
 			info->height = ~info->height;
 			info->height &= bits == 16 ? 0xffff : 0xffffffff;
 		}
 	}
 
 	/* GIMP incorrectly writes BMP v5 headers that omit color masks
 	but include colorspace information. This means they look like
 	BMP v4 headers and that we interpret the colorspace information
 	partially as color mask data, partially as colorspace information.
 	Let's work around this... */
 	if (info->version == 108 &&
 			info->rmask == 0x73524742 && /* colorspacetype */
 			info->gmask == 0x00000000 && /* endpoints[0] */
 			info->bmask == 0x00000000 && /* endpoints[1] */
 			info->amask == 0x00000000 && /* endpoints[2] */
 			info->colorspacetype == 0x00000000 && /* endpoints[3] */
 			info->endpoints[0] == 0x00000000 && /* endpoints[4] */
 			info->endpoints[1] == 0x00000000 && /* endpoints[5] */
 			info->endpoints[2] == 0x00000000 && /* endpoints[6] */
 			info->endpoints[3] == 0x00000000 && /* endpoints[7] */
 			info->endpoints[4] == 0x00000000 && /* endpoints[8] */
 			info->endpoints[5] == 0x00000000 && /* gamma[0] */
 			info->endpoints[6] == 0x00000000 && /* gamma[1] */
 			info->endpoints[7] == 0x00000000 && /* gamma[2] */
 			info->endpoints[8] == 0x00000002) /* intent */
 	{
 		info->rmask = 0;
 		info->colorspacetype = 0x73524742;
 		info->intent = 0x00000002;
 	}
 
 	/* get number of bits per component and component shift */
 	compute_mask_info(info->rmask, &info->rshift, &info->rbits);
 	compute_mask_info(info->gmask, &info->gshift, &info->gbits);
 	compute_mask_info(info->bmask, &info->bshift, &info->bbits);
 	compute_mask_info(info->amask, &info->ashift, &info->abits);
 
 	if (info->width == 0 || info->width > SHRT_MAX || info->height == 0 || info->height > SHRT_MAX)
 		fz_throw(ctx, FZ_ERROR_GENERIC, "image dimensions (%u x %u) out of range in bmp image", info->width, info->height);
 	if (!is_valid_compression(info))
 		fz_throw(ctx, FZ_ERROR_GENERIC, "unsupported compression method (%u) in bmp image", info->compression);
 	if (!is_valid_bitcount(info))
 		fz_throw(ctx, FZ_ERROR_GENERIC, "invalid bits per pixel (%u) for compression (%u) in bmp image", info->bitcount, info->compression);
 	if (info->rbits > info->bitcount)
 		fz_throw(ctx, FZ_ERROR_GENERIC, "unsupported %u bit red mask in bmp image", info->rbits);
 	if (info->gbits > info->bitcount)
 		fz_throw(ctx, FZ_ERROR_GENERIC, "unsupported %u bit green mask in bmp image", info->gbits);
 	if (info->bbits > info->bitcount)
 		fz_throw(ctx, FZ_ERROR_GENERIC, "unsupported %u bit blue mask in bmp image", info->bbits);
 	if (info->abits > info->bitcount)
 		fz_throw(ctx, FZ_ERROR_GENERIC, "unsupported %u bit alpha mask in bmp image", info->abits);
 
 	/* Read color profile or default to RGB */
 	if (has_color_profile(info))
 		info->cs = bmp_read_color_profile(ctx, info, profilebegin, end);
 	if (!info->cs)
 		info->cs = fz_keep_colorspace(ctx, fz_device_rgb(ctx));
 
 	if (only_metadata)
 		return NULL;
 
 	/* bitmap cannot begin before headers have ended */
 	if ((uint32_t)(p - begin) < info->bitmapoffset)
 		p = begin + info->bitmapoffset;
 
 	if (is_win_bmp(info) && info->compression == BI_JPEG)
 	{
 		if ((uint32_t)(end - p) < info->bitmapsize)
 			fz_warn(ctx, "premature end in jpeg image embedded in bmp image");
 		return fz_load_jpeg(ctx, p, end - p);
 	}
 	else if (is_win_bmp(info) && info->compression == BI_PNG)
 	{
 		if ((uint32_t)(end - p) < info->bitmapsize)
 			fz_warn(ctx, "premature end in png image embedded in bmp image");
 		return fz_load_png(ctx, p, end - p);
 	}
 	else
 		return bmp_read_bitmap(ctx, info, begin, end, p);
 }
