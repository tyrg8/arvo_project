commit 90d9e92bdbed0af58fdce4eb3b9b3af6698746ab
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Thu Oct 19 19:40:26 2017 +0300

    NefDecoder::DecodeNikonSNef(): don't accept truncated images.

diff --git a/src/librawspeed/decoders/NefDecoder.cpp b/src/librawspeed/decoders/NefDecoder.cpp
index e00cf588..5eb54e3f 100644
--- a/src/librawspeed/decoders/NefDecoder.cpp
+++ b/src/librawspeed/decoders/NefDecoder.cpp
@@ -576,120 +576,114 @@ void NefDecoder::decodeMetaDataInternal(const CameraMetaData* meta) {
 // DecodeNikonYUY2 decodes 12 bit data in an YUY2-like pattern (2 Luma, 1 Chroma per 2 pixels).
 // We un-apply the whitebalance, so output matches lossless.
 // Note that values are scaled. See comment below on details.
 // OPTME: It would be trivial to run this multithreaded.
 void NefDecoder::DecodeNikonSNef(ByteStream* input, uint32 w, uint32 h) {
   if (w < 6)
     ThrowIOE("got a %u wide sNEF, aborting", w);
 
-  if (input->getRemainSize() < (w * h * 3)) {
-    if (static_cast<uint32>(input->getRemainSize()) > w * 3) {
-      h = input->getRemainSize() / (w * 3) - 1;
-      mRaw->setError("Image truncated (file is too short)");
-    } else
-      ThrowIOE(
-          "Not enough data to decode a single line. Image file truncated.");
-  }
+  if (input->getRemainSize() < (w * h * 3))
+    ThrowIOE("Not enough data to decode. Image file truncated.");
 
   // We need to read the applied whitebalance, since we should return
   // data before whitebalance, so we "unapply" it.
   TiffEntry* wb = mRootIFD->getEntryRecursive(static_cast<TiffTag>(12));
   if (!wb)
     ThrowRDE("Unable to locate whitebalance needed for decompression");
 
   assert(wb != nullptr);
   if (wb->count != 4 || wb->type != TIFF_RATIONAL)
     ThrowRDE("Whitebalance has unknown count or type");
 
   float wb_r = wb->getFloat(0);
   float wb_b = wb->getFloat(1);
 
   if (wb_r <= 0.0F || wb_b <= 0.0F)
     ThrowRDE("Whitebalance has zero value");
 
   mRaw->metadata.wbCoeffs[0] = wb_r;
   mRaw->metadata.wbCoeffs[1] = 1.0F;
   mRaw->metadata.wbCoeffs[2] = wb_b;
 
   auto inv_wb_r = static_cast<int>(1024.0 / wb_r);
   auto inv_wb_b = static_cast<int>(1024.0 / wb_b);
 
   auto curve = gammaCurve(1 / 2.4, 12.92, 1, 4095);
 
   // Scale output values to 16 bits.
   for (int i = 0 ; i < 4096; i++) {
     curve[i] = clampBits(static_cast<int>(curve[i]) << 2, 16);
   }
 
   curve.resize(4095);
 
   RawImageCurveGuard curveHandler(&mRaw, curve, false);
 
   ushort16 tmp;
   auto* tmpch = reinterpret_cast<uchar8*>(&tmp);
 
   uchar8* data = mRaw->getData();
   uint32 pitch = mRaw->pitch;
   const uchar8* in = input->getData(w * h * 3);
 
   for (uint32 y = 0; y < h; y++) {
     auto* dest = reinterpret_cast<ushort16*>(&data[y * pitch]);
     uint32 random = in[0] + (in[1] << 8) +  (in[2] << 16);
     for (uint32 x = 0 ; x < w*3; x += 6) {
       uint32 g1 = in[0];
       uint32 g2 = in[1];
       uint32 g3 = in[2];
       uint32 g4 = in[3];
       uint32 g5 = in[4];
       uint32 g6 = in[5];
 
       in+=6;
       auto y1 = static_cast<float>(g1 | ((g2 & 0x0f) << 8));
       auto y2 = static_cast<float>((g2 >> 4) | (g3 << 4));
       auto cb = static_cast<float>(g4 | ((g5 & 0x0f) << 8));
       auto cr = static_cast<float>((g5 >> 4) | (g6 << 4));
 
       float cb2 = cb;
       float cr2 = cr;
       // Interpolate right pixel. We assume the sample is aligned with left pixel.
       if ((x+6) < w*3) {
         g4 = in[3];
         g5 = in[4];
         g6 = in[5];
         cb2 = (static_cast<float>((g4 | ((g5 & 0x0f) << 8))) + cb) * 0.5F;
         cr2 = (static_cast<float>(((g5 >> 4) | (g6 << 4))) + cr) * 0.5F;
       }
 
       cb -= 2048;
       cr -= 2048;
       cb2 -= 2048;
       cr2 -= 2048;
 
       mRaw->setWithLookUp(clampBits(static_cast<int>(y1 + 1.370705 * cr), 12),
                           tmpch, &random);
       dest[x] = clampBits((inv_wb_r * tmp + (1<<9)) >> 10, 15);
 
       mRaw->setWithLookUp(
           clampBits(static_cast<int>(y1 - 0.337633 * cb - 0.698001 * cr), 12),
           reinterpret_cast<uchar8*>(&dest[x + 1]), &random);
 
       mRaw->setWithLookUp(clampBits(static_cast<int>(y1 + 1.732446 * cb), 12),
                           tmpch, &random);
       dest[x+2]   = clampBits((inv_wb_b * tmp + (1<<9)) >> 10, 15);
 
       mRaw->setWithLookUp(clampBits(static_cast<int>(y2 + 1.370705 * cr2), 12),
                           tmpch, &random);
       dest[x+3] = clampBits((inv_wb_r * tmp + (1<<9)) >> 10, 15);
 
       mRaw->setWithLookUp(
           clampBits(static_cast<int>(y2 - 0.337633 * cb2 - 0.698001 * cr2), 12),
           reinterpret_cast<uchar8*>(&dest[x + 4]), &random);
 
       mRaw->setWithLookUp(clampBits(static_cast<int>(y2 + 1.732446 * cb2), 12),
                           tmpch, &random);
       dest[x+5] = clampBits((inv_wb_b * tmp + (1<<9)) >> 10, 15);
     }
   }
 }
 
 // From:  dcraw.c -- Dave Coffin's raw photo decoder
 #define SQR(x) ((x)*(x))
