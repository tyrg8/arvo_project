commit f0395f9ef6051315973f1fdded1804f81458566d
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Thu Aug 18 23:41:57 2022 +0200

    avcodec/speedhq: Check width
    
    Fixes: out of array access
    Fixes: 50014/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_SPEEDHQ_fuzzer-4748914632294400
    
    Alternatively the buffer size can be increased
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavcodec/speedhq.c b/libavcodec/speedhq.c
index 1661b66ae7..4f0e417a82 100644
--- a/libavcodec/speedhq.c
+++ b/libavcodec/speedhq.c
@@ -491,61 +491,61 @@ static void compute_quant_matrix(int *output, int qscale)
 static int speedhq_decode_frame(AVCodecContext *avctx, AVFrame *frame,
                                 int *got_frame, AVPacket *avpkt)
 {
     SHQContext * const s = avctx->priv_data;
     const uint8_t *buf   = avpkt->data;
     int buf_size         = avpkt->size;
     uint8_t quality;
     uint32_t second_field_offset;
     int ret;
 
-    if (buf_size < 4 || avctx->width < 8)
+    if (buf_size < 4 || avctx->width < 8 || avctx->width % 8 != 0)
         return AVERROR_INVALIDDATA;
 
     quality = buf[0];
     if (quality >= 100) {
         return AVERROR_INVALIDDATA;
     }
 
     compute_quant_matrix(s->quant_matrix, 100 - quality);
 
     second_field_offset = AV_RL24(buf + 1);
     if (second_field_offset >= buf_size - 3) {
         return AVERROR_INVALIDDATA;
     }
 
     avctx->coded_width = FFALIGN(avctx->width, 16);
     avctx->coded_height = FFALIGN(avctx->height, 16);
 
     if ((ret = ff_get_buffer(avctx, frame, 0)) < 0) {
         return ret;
     }
     frame->key_frame = 1;
 
     if (second_field_offset == 4 || second_field_offset == (buf_size-4)) {
         /*
          * Overlapping first and second fields is used to signal
          * encoding only a single field. In this case, "height"
          * is ambiguous; it could mean either the height of the
          * frame as a whole, or of the field. The former would make
          * more sense for compatibility with legacy decoders,
          * but this matches the convention used in NDI, which is
          * the primary user of this trick.
          */
         if ((ret = decode_speedhq_field(s, buf, buf_size, frame, 0, 4, buf_size, 1)) < 0)
             return ret;
     } else {
         if ((ret = decode_speedhq_field(s, buf, buf_size, frame, 0, 4, second_field_offset, 2)) < 0)
             return ret;
         if ((ret = decode_speedhq_field(s, buf, buf_size, frame, 1, second_field_offset, buf_size, 2)) < 0)
             return ret;
     }
 
     *got_frame = 1;
     return buf_size;
 }
 
 /*
  * Alpha VLC. Run and level are independently coded, and would be
  * outside the default limits for MAX_RUN/MAX_LEVEL, so we don't
  * bother with combining them into one table.
  */
