commit 97c6d7495e6edb009789cf43ea79e26c54f88538
Author: Sebastian Dr√∂ge <sebastian@centricular.com>
Date:   Tue Jun 13 12:53:13 2023 +0300

    subparse: Look for the closing `>` of a tag after the opening `<`
    
    Previously when fixing up subrip markip, we were looking from the start
    of the remaining buffer instead. Due to how skipping over closing tags
    works, the remaining buffer will still contain the closing `>` of the
    previous tag so if a unexpected closing tag is found after another
    closing tag, we would potentially do an out of bounds memmove().
    
    Fixes ZDI-CAN-20968
    Fixes https://gitlab.freedesktop.org/gstreamer/gstreamer/-/issues/2662
    
    Part-of: <https://gitlab.freedesktop.org/gstreamer/gstreamer/-/merge_requests/4895>

diff --git a/subprojects/gst-plugins-base/gst/subparse/gstsubparse.c b/subprojects/gst-plugins-base/gst/subparse/gstsubparse.c
index 0f7425d863..6a82fb5846 100644
--- a/subprojects/gst-plugins-base/gst/subparse/gstsubparse.c
+++ b/subprojects/gst-plugins-base/gst/subparse/gstsubparse.c
@@ -720,99 +720,99 @@ static void
 subrip_fix_up_markup (gchar ** p_txt, gconstpointer allowed_tags_ptr)
 {
   gchar *cur, *next_tag;
   GPtrArray *open_tags = NULL;
   guint num_open_tags = 0;
   const gchar *iter_tag;
   guint offset = 0;
   guint index;
   gchar *cur_tag;
   gchar *end_tag;
   GRegex *tag_regex;
   GMatchInfo *match_info;
   gchar **allowed_tags = (gchar **) allowed_tags_ptr;
 
   g_assert (*p_txt != NULL);
 
   open_tags = g_ptr_array_new_with_free_func (g_free);
   cur = *p_txt;
   while (*cur != '\0') {
     next_tag = strchr (cur, '<');
     if (next_tag == NULL)
       break;
     offset = 0;
     index = 0;
     while (index < g_strv_length (allowed_tags)) {
       iter_tag = allowed_tags[index];
       /* Look for a white listed tag */
       cur_tag = g_strconcat ("<", iter_tag, ATTRIBUTE_REGEX, ">", NULL);
       tag_regex = g_regex_new (cur_tag, 0, 0, NULL);
       (void) g_regex_match (tag_regex, next_tag, 0, &match_info);
 
       if (g_match_info_matches (match_info)) {
         gint start_pos, end_pos;
         gchar *word = g_match_info_fetch (match_info, 0);
         g_match_info_fetch_pos (match_info, 0, &start_pos, &end_pos);
         if (start_pos == 0) {
           offset = strlen (word);
         }
         g_free (word);
       }
       g_match_info_free (match_info);
       g_regex_unref (tag_regex);
       g_free (cur_tag);
       index++;
       if (offset) {
         /* OK we found a tag, let's keep track of it */
         g_ptr_array_add (open_tags, g_ascii_strdown (iter_tag, -1));
         ++num_open_tags;
         break;
       }
     }
 
     if (offset) {
       next_tag += offset;
       cur = next_tag;
       continue;
     }
 
     if (*next_tag == '<' && *(next_tag + 1) == '/') {
-      end_tag = strchr (cur, '>');
+      end_tag = strchr (next_tag, '>');
       if (end_tag) {
         const gchar *last = NULL;
         if (num_open_tags > 0)
           last = g_ptr_array_index (open_tags, num_open_tags - 1);
         if (num_open_tags == 0
             || g_ascii_strncasecmp (end_tag - 1, last, strlen (last))) {
           GST_LOG ("broken input, closing tag '%s' is not open", next_tag);
           /* Move everything after the tag end, including closing \0 */
           memmove (next_tag, end_tag + 1, strlen (end_tag));
           cur = next_tag;
           continue;
         } else {
           --num_open_tags;
           g_ptr_array_remove_index (open_tags, num_open_tags);
         }
       }
     }
     ++next_tag;
     cur = next_tag;
   }
 
   if (num_open_tags > 0) {
     GString *s;
 
     s = g_string_new (*p_txt);
     while (num_open_tags > 0) {
       GST_LOG ("adding missing closing tag '%s'",
           (char *) g_ptr_array_index (open_tags, num_open_tags - 1));
       g_string_append_c (s, '<');
       g_string_append_c (s, '/');
       g_string_append (s, g_ptr_array_index (open_tags, num_open_tags - 1));
       g_string_append_c (s, '>');
       --num_open_tags;
     }
     g_free (*p_txt);
     *p_txt = g_string_free (s, FALSE);
   }
   g_ptr_array_free (open_tags, TRUE);
 }
