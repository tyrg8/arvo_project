commit 21f223da38cba1e380fd1c47933406e665150500
Author: Wan-Teh Chang <wtc@google.com>
Date:   Wed Nov 25 08:47:06 2020 -0800

    Do not truncate long options in arg_show_usage()
    
    Instead of writing options to a fixed-sized buffer with snprintf(),
    which truncates options longer than the buffer size, simply call
    fprintf() and use its return value to detect if the option is too long
    and its description should start on the next line.
    
    Before:
                --use-intra-default-tx-onl  Use Default-transform only for INTRA modes
    After:
                --use-intra-default-tx-only=<arg>
                                            Use Default-transform only for INTRA modes
    
    BUG=aomedia:2868
    
    Change-Id: I6c0a727b06cd994ef9110bc7871538579ff4d697

diff --git a/common/args.c b/common/args.c
index 068c8d2f6f..d7d7669a89 100644
--- a/common/args.c
+++ b/common/args.c
@@ -202,32 +202,39 @@ char **argv_dup(int argc, const char **argv) {
 }
 
 void arg_show_usage(FILE *fp, const struct arg_def *const *defs) {
-  char option_text[40] = { 0 };
-
   for (; *defs; defs++) {
     const struct arg_def *def = *defs;
     char *short_val = def->has_val ? " <arg>" : "";
     char *long_val = def->has_val ? "=<arg>" : "";
+    int n = 0;
 
+    // Short options are indented with two spaces. Long options are indented
+    // with 12 spaces.
     if (def->short_name && def->long_name) {
       char *comma = def->has_val ? "," : ",      ";
 
-      snprintf(option_text, 37, "-%s%s%s --%s%6s", def->short_name, short_val,
-               comma, def->long_name, long_val);
+      n = fprintf(fp, "  -%s%s%s --%s%s", def->short_name, short_val, comma,
+                  def->long_name, long_val);
     } else if (def->short_name)
-      snprintf(option_text, 37, "-%s%s", def->short_name, short_val);
+      n = fprintf(fp, "  -%s%s", def->short_name, short_val);
     else if (def->long_name)
-      snprintf(option_text, 37, "          --%s%s", def->long_name, long_val);
+      n = fprintf(fp, "            --%s%s", def->long_name, long_val);
 
-    fprintf(fp, "  %-37s\t%s\n", option_text, def->desc);
+    // Descriptions are indented with 40 spaces. If an option is 40 characters
+    // or longer, its description starts on the next line.
+    if (n < 40)
+      for (int i = 0; i < 40 - n; i++) fputc(' ', fp);
+    else
+      fputs("\n                                        ", fp);
+    fprintf(fp, "%s\n", def->desc);
 
     if (def->enums) {
       const struct arg_enum_list *listptr;
 
       fprintf(fp, "  %-37s\t  ", "");
 
       for (listptr = def->enums; listptr->name; listptr++)
         fprintf(fp, "%s%s", listptr->name, listptr[1].name ? ", " : "\n");
     }
   }
 }
