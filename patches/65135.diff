commit c67f6f449c4b5501583a91abcd8fea42289e697d
Author: Dmitry Stogov <dmitry@zend.com>
Date:   Mon Dec 18 11:27:55 2023 +0300

    Fixed incorrect elimination of refcounted check in JIT for BIND_GLOBAL
    
    Fixes oss-fuzz #65135

diff --git a/ext/opcache/jit/zend_jit_arm64.dasc b/ext/opcache/jit/zend_jit_arm64.dasc
index d4e67b6c5a..329eb42507 100644
--- a/ext/opcache/jit/zend_jit_arm64.dasc
+++ b/ext/opcache/jit/zend_jit_arm64.dasc
@@ -11743,79 +11743,79 @@ static int zend_jit_isset_isempty_dim(dasm_State    **Dst,
 static int zend_jit_bind_global(dasm_State **Dst, const zend_op *opline, uint32_t op1_info)
 {
 	zend_jit_addr op1_addr = OP1_ADDR();
 	zend_string *varname = Z_STR_P(RT_CONSTANT(opline, opline->op2));
 
 	|	// idx = (uint32_t)(uintptr_t)CACHED_PTR(opline->extended_value) - 1;
 	|	ldr FCARG2x, EX->run_time_cache
 	|	MEM_ACCESS_64_WITH_UOFFSET ldr, REG0, FCARG2x, opline->extended_value, TMP1
 	|	sub REG0, REG0, #1
 	|	// if (EXPECTED(idx < EG(symbol_table).nNumUsed * sizeof(Bucket)))
 	|	MEM_LOAD_32_ZTS ldr, REG1w, executor_globals, symbol_table.nNumUsed, REG1
 	|	cmp REG0, REG1, lsl #5
 	|	bhs >9
 	|	// Bucket *p = (Bucket*)((char*)EG(symbol_table).arData + idx);
 	|	MEM_LOAD_64_ZTS ldr, TMP1, executor_globals, symbol_table.arData, REG1
 	|	add REG0, REG0, TMP1
 	|	IF_NOT_Z_TYPE REG0, IS_REFERENCE, >9, TMP1w
 	|	// (EXPECTED(p->key == varname))
 	|	ldr TMP1, [REG0, #offsetof(Bucket, key)]
 	|	LOAD_ADDR TMP2, varname
 	|	cmp TMP1, TMP2
 	|	bne >9
 	|	GET_Z_PTR REG0, REG0
 	|	GC_ADDREF REG0, TMP1w
 	|1:
 	if (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
-		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
 			|	// if (UNEXPECTED(Z_REFCOUNTED_P(variable_ptr)))
 			|	IF_ZVAL_REFCOUNTED op1_addr, >2, ZREG_TMP1, ZREG_TMP2
 			|.cold_code
 			|2:
 		}
 		|	// zend_refcounted *garbage = Z_COUNTED_P(variable_ptr);
 		|	GET_ZVAL_PTR FCARG1x, op1_addr, TMP1
 		|	// ZVAL_REF(variable_ptr, ref)
 		|	SET_ZVAL_PTR op1_addr, REG0, TMP1
 		|	SET_ZVAL_TYPE_INFO op1_addr, IS_REFERENCE_EX, TMP1w, TMP2
 		|	// if (GC_DELREF(garbage) == 0)
 		|	GC_DELREF FCARG1x, TMP1w
 		if (op1_info & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) {
 			|	bne >3
 		} else {
 			|	bne >5
 		}
 		|	ZVAL_DTOR_FUNC op1_info, opline, TMP1
 		|	b >5
 		if (op1_info & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) {
 			|3:
 			|	// GC_ZVAL_CHECK_POSSIBLE_ROOT(variable_ptr)
 			|	IF_GC_MAY_NOT_LEAK FCARG1x, >5, TMP1w, TMP2w
 			|	EXT_CALL gc_possible_root, REG0
 			|	b >5
 		}
-		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
 			|.code
 		}
 	}
 
-	if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+	if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
 		|	// ZVAL_REF(variable_ptr, ref)
 		|	SET_ZVAL_PTR op1_addr, REG0, TMP1
 		|	SET_ZVAL_TYPE_INFO op1_addr, IS_REFERENCE_EX, TMP1w, TMP2
 	}
 	|5:
 	//END of handler
 
 	|.cold_code
 	|9:
 	|	LOAD_ADDR FCARG1x, (ptrdiff_t)varname
 	if (opline->extended_value) {
 		|	ADD_SUB_64_WITH_CONST_32 add, FCARG2x, FCARG2x, opline->extended_value, TMP1
 	}
 	|	EXT_CALL zend_jit_fetch_global_helper, REG0
 	|	mov REG0, RETVALx
 	|	b <1
 	|.code
 
 	return 1;
 }
diff --git a/ext/opcache/jit/zend_jit_x86.dasc b/ext/opcache/jit/zend_jit_x86.dasc
index d881b466dd..b0353c0d3d 100644
--- a/ext/opcache/jit/zend_jit_x86.dasc
+++ b/ext/opcache/jit/zend_jit_x86.dasc
@@ -12497,80 +12497,80 @@ static int zend_jit_isset_isempty_dim(dasm_State    **Dst,
 static int zend_jit_bind_global(dasm_State **Dst, const zend_op *opline, uint32_t op1_info)
 {
 	zend_jit_addr op1_addr = OP1_ADDR();
 	zend_string *varname = Z_STR_P(RT_CONSTANT(opline, opline->op2));
 
 	|	// idx = (uint32_t)(uintptr_t)CACHED_PTR(opline->extended_value) - 1;
 	|	mov FCARG2a, EX->run_time_cache
 	|	mov r0, aword [FCARG2a + opline->extended_value]
 	|	sub r0, 1
 	|	// if (EXPECTED(idx < EG(symbol_table).nNumUsed * sizeof(Bucket)))
 	|	MEM_LOAD_ZTS ecx, dword, executor_globals, symbol_table.nNumUsed, r1
 	|.if X64
 		|	shl r1, 5
 	|.else
 		|	imul r1, sizeof(Bucket)
 	|.endif
 	|	cmp r0, r1
 	|	jae >9
 	|	// Bucket *p = (Bucket*)((char*)EG(symbol_table).arData + idx);
 	|	MEM_LOAD_OP_ZTS add, r0, aword, executor_globals, symbol_table.arData, r1
 	|	IF_NOT_Z_TYPE r0, IS_REFERENCE, >9
 	|	// (EXPECTED(p->key == varname))
 	|	ADDR_CMP aword [r0 + offsetof(Bucket, key)], varname, r1
 	|	jne >9
 	|	GET_Z_PTR r0, r0
 	|	GC_ADDREF r0
 	|1:
 	if (op1_info & (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE|MAY_BE_REF)) {
-		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
 			|	// if (UNEXPECTED(Z_REFCOUNTED_P(variable_ptr)))
 			|	IF_ZVAL_REFCOUNTED op1_addr, >2
 			|.cold_code
 			|2:
 		}
 		|	// zend_refcounted *garbage = Z_COUNTED_P(variable_ptr);
 		|	GET_ZVAL_PTR FCARG1a, op1_addr
 		|	// ZVAL_REF(variable_ptr, ref)
 		|	SET_ZVAL_PTR op1_addr, r0
 		|	SET_ZVAL_TYPE_INFO op1_addr, IS_REFERENCE_EX
 		|	// if (GC_DELREF(garbage) == 0)
 		|	GC_DELREF FCARG1a
 		if (op1_info & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) {
 			|	jnz >3
 		} else {
 			|	jnz >5
 		}
 		|	ZVAL_DTOR_FUNC op1_info, opline
 		|	jmp >5
 		if (op1_info & (MAY_BE_REF|MAY_BE_ARRAY|MAY_BE_OBJECT)) {
 			|3:
 			|	// GC_ZVAL_CHECK_POSSIBLE_ROOT(variable_ptr)
 			|	IF_GC_MAY_NOT_LEAK FCARG1a, >5
 			|	EXT_CALL gc_possible_root, r1
 			|	jmp >5
 		}
-		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+		if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
 			|.code
 		}
 	}
 
-	if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_STRING|MAY_BE_ARRAY|MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
+	if (op1_info & ((MAY_BE_ANY|MAY_BE_UNDEF) - (MAY_BE_OBJECT|MAY_BE_RESOURCE))) {
 		|	// ZVAL_REF(variable_ptr, ref)
 		|	SET_ZVAL_PTR op1_addr, r0
 		|	SET_ZVAL_TYPE_INFO op1_addr, IS_REFERENCE_EX
 	}
 	|5:
 	//END of handler
 
 	|.cold_code
 	|9:
 	|	LOAD_ADDR FCARG1a, (ptrdiff_t)varname
 	if (opline->extended_value) {
 		|	add FCARG2a, opline->extended_value
 	}
 	|	EXT_CALL zend_jit_fetch_global_helper, r0
 	|	jmp <1
 	|.code
 
 	return 1;
 }
diff --git a/ext/opcache/tests/jit/bind_global_001.phpt b/ext/opcache/tests/jit/bind_global_001.phpt
new file mode 100644
index 0000000000..5ad6fd2619
--- /dev/null
+++ b/ext/opcache/tests/jit/bind_global_001.phpt
@@ -0,0 +1,17 @@
+--TEST--
+Bind global and immutable string
+--INI--
+opcache.enable=1
+opcache.enable_cli=1
+opcache.file_update_protection=0
+opcache.jit_buffer_size=1M
+--FILE--
+<?php
+function foo($a = '') {
+    global $a;
+}
+foo();
+var_dump($a);
+?>
+--EXPECT--
+NULL
