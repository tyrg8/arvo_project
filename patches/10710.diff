commit b5967cb747416cc377a2b6f3073d270eab5c1291
Author: Yifeng Sun <pkusunyifeng@gmail.com>
Date:   Tue Oct 2 13:20:42 2018 -0700

    lex: Fix buffer overrun parsing overlong hexadecimal constants.
    
    In previous code, if hexit == 0, then the boundary for 'out' is
    not checked. This patch fixes it.
    
    Reported-at: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=10710
    Signed-off-by: Yifeng Sun <pkusunyifeng@gmail.com>
    Signed-off-by: Ben Pfaff <blp@ovn.org>

diff --git a/ovn/lib/lex.c b/ovn/lib/lex.c
index 0514950de..7a2ab4111 100644
--- a/ovn/lib/lex.c
+++ b/ovn/lib/lex.c
@@ -325,20 +325,22 @@ static void
 lex_parse_hex_integer(const char *start, size_t len, struct lex_token *token)
 {
     const char *in = start + (len - 1);
     uint8_t *out = token->value.u8 + (sizeof token->value.u8 - 1);
 
     for (int i = 0; i < len; i++) {
         int hexit = hexit_value(in[-i]);
         if (hexit < 0) {
             lex_error(token, "Invalid syntax in hexadecimal constant.");
             return;
+        } else if (hexit) {
+            /* Check within loop to ignore any number of leading zeros. */
+            if (i / 2 >= sizeof token->value.u8) {
+                lex_error(token, "Hexadecimal constant requires more than "
+                          "%"PRIuSIZE" bits.", 8 * sizeof token->value.u8);
+                return;
+            }
+            out[-(i / 2)] |= i % 2 ? hexit << 4 : hexit;
         }
-        if (hexit && i / 2 >= sizeof token->value.u8) {
-            lex_error(token, "Hexadecimal constant requires more than "
-                      "%"PRIuSIZE" bits.", 8 * sizeof token->value.u8);
-            return;
-        }
-        out[-(i / 2)] |= i % 2 ? hexit << 4 : hexit;
     }
     token->format = LEX_F_HEXADECIMAL;
 }
