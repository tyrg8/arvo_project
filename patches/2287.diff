commit 1487b26a150b898a61b201e849e2f18f7f14de4c
Author: Caolán McNamara <caolanm@redhat.com>
Date:   Sat Jun 17 21:16:34 2017 +0100

    ofz#2287 check multiply
    
    Change-Id: Ibc4c93ac1f5686a476b5e303347dc951daa58e33
    Reviewed-on: https://gerrit.libreoffice.org/38909
    Tested-by: Jenkins <ci@libreoffice.org>
    Reviewed-by: Caolán McNamara <caolanm@redhat.com>
    Tested-by: Caolán McNamara <caolanm@redhat.com>

diff --git a/vcl/headless/svpbmp.cxx b/vcl/headless/svpbmp.cxx
index 15c6fc9c1022..b8c70123a39b 100644
--- a/vcl/headless/svpbmp.cxx
+++ b/vcl/headless/svpbmp.cxx
@@ -41,124 +41,126 @@ SvpSalBitmap::~SvpSalBitmap()
 BitmapBuffer* ImplCreateDIB(
     const Size& rSize,
     sal_uInt16 nBitCount,
     const BitmapPalette& rPal)
 {
     assert(
           (nBitCount ==  0
         || nBitCount ==  1
         || nBitCount ==  4
         || nBitCount ==  8
         || nBitCount == 16
         || nBitCount == 24
         || nBitCount == 32)
         && "Unsupported BitCount!");
 
     if (!rSize.Width() || !rSize.Height())
         return nullptr;
 
     BitmapBuffer* pDIB = nullptr;
 
     try
     {
         pDIB = new BitmapBuffer;
     }
     catch (const std::bad_alloc&)
     {
         return nullptr;
     }
 
     const sal_uInt16 nColors = ( nBitCount <= 8 ) ? ( 1 << nBitCount ) : 0;
 
     switch (nBitCount)
     {
         case 1:
             pDIB->mnFormat = ScanlineFormat::N1BitLsbPal;
             break;
         case 4:
             pDIB->mnFormat = ScanlineFormat::N4BitMsnPal;
             break;
         case 8:
             pDIB->mnFormat = ScanlineFormat::N8BitPal;
             break;
         case 16:
         {
 #ifdef OSL_BIGENDIAN
             pDIB->mnFormat= ScanlineFormat::N16BitTcMsbMask;
 #else
             pDIB->mnFormat= ScanlineFormat::N16BitTcLsbMask;
 #endif
             ColorMaskElement aRedMask(0xf800);
             aRedMask.CalcMaskShift();
             ColorMaskElement aGreenMask(0x07e0);
             aGreenMask.CalcMaskShift();
             ColorMaskElement aBlueMask(0x001f);
             aBlueMask.CalcMaskShift();
             pDIB->maColorMask = ColorMask(aRedMask, aGreenMask, aBlueMask);
             break;
         }
         default:
             nBitCount = 32;
             SAL_FALLTHROUGH;
         case 32:
         {
             pDIB->mnFormat = SVP_CAIRO_FORMAT;
             break;
         }
     }
 
     pDIB->mnFormat |= ScanlineFormat::TopDown;
     pDIB->mnWidth = rSize.Width();
     pDIB->mnHeight = rSize.Height();
     long nScanlineBase;
     bool bFail = o3tl::checked_multiply<long>(pDIB->mnWidth, nBitCount, nScanlineBase);
     if (bFail)
     {
         SAL_WARN("vcl.gdi", "checked multiply failed");
         delete pDIB;
         return nullptr;
     }
     pDIB->mnScanlineSize = AlignedWidth4Bytes(nScanlineBase);
     if (pDIB->mnScanlineSize < nScanlineBase/8)
     {
         SAL_WARN("vcl.gdi", "scanline calculation wraparound");
         delete pDIB;
         return nullptr;
     }
     pDIB->mnBitCount = nBitCount;
 
     if( nColors )
     {
         pDIB->maPalette = rPal;
         pDIB->maPalette.SetEntryCount( nColors );
     }
 
-    const size_t size = pDIB->mnScanlineSize * pDIB->mnHeight;
-    if (size > SAL_MAX_INT32/2)
+    size_t size;
+    bFail = o3tl::checked_multiply<size_t>(pDIB->mnHeight, pDIB->mnScanlineSize, size);
+    SAL_WARN_IF(bFail, "vcl.gdi", "checked multiply failed");
+    if (bFail || size > SAL_MAX_INT32/2)
     {
         delete pDIB;
         return nullptr;
     }
 
     try
     {
         pDIB->mpBits = new sal_uInt8[size];
 #ifdef __SANITIZE_ADDRESS__
         if (!pDIB->mpBits)
         {   // can only happen with ASAN allocator_may_return_null=1
             delete pDIB;
             pDIB = nullptr;
         }
         else
 #endif
         {
             std::memset(pDIB->mpBits, 0, size);
         }
     }
     catch (const std::bad_alloc&)
     {
         delete pDIB;
         pDIB = nullptr;
     }
 
     return pDIB;
 }
