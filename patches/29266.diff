commit 51b880b0383089822f513330cd64f93b54b9f21c
Author: Andreas Kling <kling@serenityos.org>
Date:   Tue Jan 5 12:26:23 2021 +0100

    LibJS: Disable ASAN during the conservative GC stack scan
    
    This allows the JS fuzzer to survive garbage collection (so we can find
    more interesting bugs!)
    
    Found by oss-fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=29266

diff --git a/Libraries/LibJS/Heap/Heap.cpp b/Libraries/LibJS/Heap/Heap.cpp
index 099daf4185..8385b8ff1e 100644
--- a/Libraries/LibJS/Heap/Heap.cpp
+++ b/Libraries/LibJS/Heap/Heap.cpp
@@ -124,58 +124,58 @@ void Heap::gather_roots(HashTable<Cell*>& roots)
 #endif
 }
 
-void Heap::gather_conservative_roots(HashTable<Cell*>& roots)
+__attribute__((no_sanitize("address"))) void Heap::gather_conservative_roots(HashTable<Cell*>& roots)
 {
     FlatPtr dummy;
 
 #ifdef HEAP_DEBUG
     dbgln("gather_conservative_roots:");
 #endif
 
     jmp_buf buf;
     setjmp(buf);
 
     HashTable<FlatPtr> possible_pointers;
 
     const FlatPtr* raw_jmp_buf = reinterpret_cast<const FlatPtr*>(buf);
 
     for (size_t i = 0; i < ((size_t)sizeof(buf)) / sizeof(FlatPtr); i += sizeof(FlatPtr))
         possible_pointers.set(raw_jmp_buf[i]);
 
     FlatPtr stack_reference = reinterpret_cast<FlatPtr>(&dummy);
     auto& stack_info = m_vm.stack_info();
 
     for (FlatPtr stack_address = stack_reference; stack_address < stack_info.top(); stack_address += sizeof(FlatPtr)) {
         auto data = *reinterpret_cast<FlatPtr*>(stack_address);
         possible_pointers.set(data);
     }
 
     HashTable<HeapBlock*> all_live_heap_blocks;
     for_each_block([&](auto& block) {
         all_live_heap_blocks.set(&block);
         return IterationDecision::Continue;
     });
 
     for (auto possible_pointer : possible_pointers) {
         if (!possible_pointer)
             continue;
 #ifdef HEAP_DEBUG
         dbgln("  ? {}", (const void*)possible_pointer);
 #endif
         auto* possible_heap_block = HeapBlock::from_cell(reinterpret_cast<const Cell*>(possible_pointer));
         if (all_live_heap_blocks.contains(possible_heap_block)) {
             if (auto* cell = possible_heap_block->cell_from_possible_pointer(possible_pointer)) {
                 if (cell->is_live()) {
 #ifdef HEAP_DEBUG
                     dbgln("  ?-> {}", (const void*)cell);
 #endif
                     roots.set(cell);
                 } else {
 #ifdef HEAP_DEBUG
                     dbgln("  #-> {}", (const void*)cell);
 #endif
                 }
             }
         }
     }
 }
