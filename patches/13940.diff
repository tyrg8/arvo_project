commit 152b3f31096f83d6507d400b2e43ac02033dc7a0
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Thu Mar 28 15:38:50 2019 +0800

    Bug 700913: Limit number of sub function outputs for stitching functions.
    
    Previously when evaluating stiching functions it was assumed that
    the number of outputs for each sub function was the number of
    outputs of the respective sub functions. This is not correct, as
    the number of outputs for each sub function must be the same and
    limited to the half the number of entries in the /Range array of
    the stitching function.
    
    That is, a stitching function determines the number of expected
    outputs of each sub function. Should the sub function supply too
    few or too many outputs, these should be assumed to be zero or
    ignored respectively. After this commit this is what happens.

diff --git a/source/pdf/pdf-function.c b/source/pdf/pdf-function.c
index e67b9ec54..85a229a06 100644
--- a/source/pdf/pdf-function.c
+++ b/source/pdf/pdf-function.c
@@ -1295,44 +1295,44 @@ static void
 eval_stitching_func(fz_context *ctx, pdf_function *func, float in, float *out)
 {
 	float low, high;
 	int k = func->u.st.k;
 	float *bounds = func->u.st.bounds;
 	int i;
 
 	in = fz_clamp(in, func->domain[0][0], func->domain[0][1]);
 
 	for (i = 0; i < k - 1; i++)
 	{
 		if (in < bounds[i])
 			break;
 	}
 
 	if (i == 0 && k == 1)
 	{
 		low = func->domain[0][0];
 		high = func->domain[0][1];
 	}
 	else if (i == 0)
 	{
 		low = func->domain[0][0];
 		high = bounds[0];
 	}
 	else if (i == k - 1)
 	{
 		low = bounds[k - 2];
 		high = func->domain[0][1];
 	}
 	else
 	{
 		low = bounds[i - 1];
 		high = bounds[i];
 	}
 
 	in = lerp(in, low, high, func->u.st.encode[i * 2 + 0], func->u.st.encode[i * 2 + 1]);
 
-	pdf_eval_function(ctx, func->u.st.funcs[i], &in, 1, out, func->u.st.funcs[i]->n);
+	pdf_eval_function(ctx, func->u.st.funcs[i], &in, 1, out, func->n);
 }
 
 /*
  * Common
  */
