commit 0414d54272d738525ee833a49c880e6220d91200
Author: Zach Reyes <39203661+zasweq@users.noreply.github.com>
Date:   Mon Oct 5 13:04:31 2020 -0400

    [fuzz] Added checks in health check fuzzing (#13383)
    
    Commit Message: Added checks in health checks fuzzing
    Additional Description: Added a validation to further constrain respond search space. Also added a check for custom health checker, which was throwing a crash in OSSFuzz.
    Signed-off-by: Zach <zasweq@google.com>

diff --git a/test/common/upstream/health_check_corpus/custom_health_check b/test/common/upstream/health_check_corpus/custom_health_check
new file mode 100644
index 0000000000..d994dc6033
--- /dev/null
+++ b/test/common/upstream/health_check_corpus/custom_health_check
@@ -0,0 +1,62 @@
+health_check_config {
+  timeout {
+    seconds: 26624
+  }
+  interval {
+    seconds: 8960
+    nanos: 65530
+  }
+  interval_jitter {
+    seconds: 8960
+    nanos: 7
+  }
+  unhealthy_threshold {
+    value: 641007614
+  }
+  healthy_threshold {
+    value: 1024
+  }
+  alt_port {
+    value: 16777216
+  }
+  reuse_connection {
+    value: true
+  }
+  no_traffic_interval {
+    nanos: 2097152
+  }
+  custom_health_check {
+    name: "ssssssssssssssssssssssssssssssssssssssssss"
+  }
+  unhealthy_edge_interval {
+    seconds: 131072
+    nanos: 4104
+  }
+  healthy_edge_interval {
+    seconds: 131072
+    nanos: 128
+  }
+  event_log_path: "A("
+  interval_jitter_percent: 641007544
+  initial_jitter {
+    seconds: 8960
+    nanos: 7
+  }
+  tls_options {
+  }
+}
+actions {
+  raise_event: REMOTE_CLOSE
+}
+actions {
+  raise_event: REMOTE_CLOSE
+}
+actions {
+  trigger_interval_timer {
+  }
+}
+actions {
+  raise_event: CONNECTED
+}
+http_verify_cluster: true
+start_failed: true
diff --git a/test/common/upstream/health_check_corpus/http_out_of_range_status b/test/common/upstream/health_check_corpus/http_out_of_range_status
new file mode 100644
index 0000000000..9a5c4eb5b3
--- /dev/null
+++ b/test/common/upstream/health_check_corpus/http_out_of_range_status
@@ -0,0 +1,47 @@
+health_check_config {
+    timeout {
+        seconds: 1
+    }
+    interval {
+        seconds: 1
+    }
+    no_traffic_interval {
+        seconds: 1
+    }
+    interval_jitter {
+        seconds: 1
+    }
+    unhealthy_threshold {
+        value: 2
+    }
+    healthy_threshold: {
+        value: 2
+    }
+    http_health_check {
+        path: "/healthcheck"
+        service_name_matcher {
+            prefix: "locations"
+        }
+    }
+}
+actions {
+    respond {
+        http_respond {
+            headers {
+                headers {
+                    key: ":status"
+                    value: "200"
+                }
+            }
+            status: 1500
+        }
+        tcp_respond {
+            
+        }
+        grpc_respond {
+            grpc_respond_headers {
+                
+            }
+        }
+    }
+}
diff --git a/test/common/upstream/health_check_fuzz.cc b/test/common/upstream/health_check_fuzz.cc
index 4d9db7e98d..7697040a60 100644
--- a/test/common/upstream/health_check_fuzz.cc
+++ b/test/common/upstream/health_check_fuzz.cc
@@ -478,30 +478,31 @@ HealthCheckFuzz::getEventTypeFromProto(const test::common::upstream::RaiseEvent&
 void HealthCheckFuzz::initializeAndReplay(test::common::upstream::HealthCheckTestCase input) {
   try {
     switch (input.health_check_config().health_checker_case()) {
     case envoy::config::core::v3::HealthCheck::kHttpHealthCheck: {
       type_ = HealthCheckFuzz::Type::HTTP;
       http_fuzz_test_ = std::make_unique<HttpHealthCheckFuzz>();
       http_fuzz_test_->initialize(input);
       break;
     }
     case envoy::config::core::v3::HealthCheck::kTcpHealthCheck: {
       type_ = HealthCheckFuzz::Type::TCP;
       tcp_fuzz_test_ = std::make_unique<TcpHealthCheckFuzz>();
       tcp_fuzz_test_->initialize(input);
       break;
     }
     case envoy::config::core::v3::HealthCheck::kGrpcHealthCheck: {
       type_ = HealthCheckFuzz::Type::GRPC;
       grpc_fuzz_test_ = std::make_unique<GrpcHealthCheckFuzz>();
       grpc_fuzz_test_->initialize(input);
       break;
     }
-    default:
-      break;
+    default: // Handles custom health checkers
+      ENVOY_LOG_MISC(trace, "Custom Health Checker currently unsupported, skipping");
+      return;
     }
   } catch (EnvoyException& e) {
     ENVOY_LOG_MISC(debug, "EnvoyException: {}", e.what());
     return;
   }
   replay(input);
 }
diff --git a/test/common/upstream/health_check_fuzz.proto b/test/common/upstream/health_check_fuzz.proto
index 21f7a5438c..f4d0e26dca 100644
--- a/test/common/upstream/health_check_fuzz.proto
+++ b/test/common/upstream/health_check_fuzz.proto
@@ -9,7 +9,7 @@ import "google/protobuf/empty.proto";
 
 message HttpRespond {
   test.fuzz.Headers headers = 1;
-  uint64 status = 2;
+  uint64 status = 2 [(validate.rules).uint64.lt = 1000];
 }
 
 message TcpRespond {
@@ -25,7 +25,7 @@ enum ServingStatus {
 
 message GrpcRespondHeaders {
   test.fuzz.Headers headers = 1;
-  uint64 status = 2;
+  uint64 status = 2 [(validate.rules).uint64.lt = 1000];
 }
 
 message GrpcRespondUnstructuredBytes {
