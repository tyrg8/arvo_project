commit 3c49ec13f6d143f5a36dcb10a8e3433dbbc25a3c
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Tue Feb 7 20:25:35 2023 -0500

    support filenames with embedded characters (https://github.com/ImageMagick/ImageMagick/issues/6040)

diff --git a/MagickCore/utility.c b/MagickCore/utility.c
index 2b3151129..bbf29f1bf 100644
--- a/MagickCore/utility.c
+++ b/MagickCore/utility.c
@@ -665,342 +665,344 @@ MagickPrivate void ExpandFilename(char *path)
       /*
         Substitute ~ with home directory from password file.
       */
       (void) CopyMagickString(username,path+1,MagickPathExtent);
       p=strchr(username,'/');
       if (p != (char *) NULL)
         *p='\0';
 #if !defined(MAGICKCORE_HAVE_GETPWNAM_R)
       entry=getpwnam(username);
 #else
       entry=(struct passwd *) NULL;
       if (getpwnam_r(username,&pwd,buffer,sizeof(buffer),&entry) < 0)
         return;
 #endif
       if (entry == (struct passwd *) NULL)
         return;
       (void) CopyMagickString(expand_path,entry->pw_dir,MagickPathExtent);
       if (p != (char *) NULL)
         {
           (void) ConcatenateMagickString(expand_path,"/",MagickPathExtent);
           (void) ConcatenateMagickString(expand_path,p+1,MagickPathExtent);
         }
 #endif
     }
   (void) CopyMagickString(path,expand_path,MagickPathExtent);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   E x p a n d F i l e n a m e s                                             %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ExpandFilenames() checks each argument of the given argument array, and
 %  expands it if they have a wildcard character.
 %
 %  Any coder prefix (EG: 'coder:filename') or read modifier postfix (EG:
 %  'filename[...]') are ignored during the file the expansion, but will be
 %  included in the final argument.  If no filename matching the meta-character
 %  'glob' is found the original argument is returned.
 %
 %  For example, an argument of '*.gif[20x20]' will be replaced by the list
 %    'abc.gif[20x20]',  'foobar.gif[20x20]',  'xyzzy.gif[20x20]'
 %  if such filenames exist, (in the current directory in this case).
 %
 %  Meta-characters handled...
 %     @    read a list of filenames (no further expansion performed)
 %     ~    At start of filename expands to HOME environment variable
 %     *    matches any string including an empty string
 %     ?    matches by any single character
 %
 %  WARNING: filenames starting with '.' (hidden files in a UNIX file system)
 %  will never be expanded.  Attempting to expand '.*' will produce no change.
 %
 %  Expansion is ignored for coders "label:" "caption:" "pango:" and "vid:".
 %  Which provide their own '@' meta-character handling.
 %
 %  You can see the results of the expansion using "Configure" log events.
 %
 %  The returned list should be freed using  DestroyStringList().
 %
 %  However the strings in the original pointed to argv are not
 %  freed  (TO BE CHECKED).  So a copy of the original pointer (and count)
 %  should be kept separate if they need to be freed later.
 %
 %  The format of the ExpandFilenames function is:
 %
 %      status=ExpandFilenames(int *number_arguments,char ***arguments)
 %
 %  A description of each parameter follows:
 %
 %    o number_arguments: Specifies a pointer to an integer describing the
 %      number of elements in the argument vector.
 %
 %    o arguments: Specifies a pointer to a text array containing the command
 %      line arguments.
 %
 */
 MagickExport MagickBooleanType ExpandFilenames(int *number_arguments,
   char ***arguments)
 {
   char
     home_directory[MagickPathExtent],
     **vector;
 
   ssize_t
     i,
     j;
 
   size_t
     number_files;
 
   ssize_t
     count,
     parameters;
 
   /*
     Allocate argument vector.
   */
   assert(number_arguments != (int *) NULL);
   assert(arguments != (char ***) NULL);
   if (IsEventLogging() != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"...");
   vector=(char **) AcquireQuantumMemory((size_t) (*number_arguments+1),
     sizeof(*vector));
   if (vector == (char **) NULL)
     ThrowFatalException(ResourceLimitFatalError,"MemoryAllocationFailed");
   /*
     Expand any wildcard filenames.
   */
   *home_directory='\0';
   count=0;
   for (i=0; i < (ssize_t) *number_arguments; i++)
   {
     char
       **filelist,
       filename[MagickPathExtent],
       magick[MagickPathExtent],
       *option,
       path[MagickPathExtent],
       subimage[MagickPathExtent];
 
     MagickBooleanType
       destroy;
 
     option=(*arguments)[i];
     *magick='\0';
     *path='\0';
     *filename='\0';
     *subimage='\0';
     number_files=0;
     vector[count++]=ConstantString(option);
     destroy=MagickTrue;
     parameters=ParseCommandOption(MagickCommandOptions,MagickFalse,option);
     if (parameters > 0)
       {
         /*
           Do not expand command option parameters.
         */
         for (j=0; j < parameters; j++)
         {
           i++;
           if (i == (ssize_t) *number_arguments)
             break;
           option=(*arguments)[i];
           vector[count++]=ConstantString(option);
         }
         continue;
       }
     if ((*option == '"') || (*option == '\''))
       continue;
     GetPathComponent(option,TailPath,filename);
     GetPathComponent(option,MagickPath,magick);
     if ((LocaleCompare(magick,"CAPTION") == 0) ||
         (LocaleCompare(magick,"LABEL") == 0) ||
         (LocaleCompare(magick,"PANGO") == 0) ||
         (LocaleCompare(magick,"VID") == 0))
       continue;
     if ((IsGlob(filename) == MagickFalse) && (*option != '@'))
       continue;
-    if ((*option != '@') && (IsPathAccessible(option) == MagickFalse))
+    if (IsPathAccessible(option) != MagickFalse)
+      continue;
+    if (*option != '@')
       {
         /*
           Generate file list from wildcard filename (e.g. *.jpg).
         */
         GetPathComponent(option,HeadPath,path);
         GetPathComponent(option,SubimagePath,subimage);
         ExpandFilename(path);
         if (*home_directory == '\0')
           getcwd_utf8(home_directory,MagickPathExtent-1);
         filelist=ListFiles(*path == '\0' ? home_directory : path,filename,
           &number_files);
       }
     else
       {
         char
           *files;
 
         ExceptionInfo
           *exception;
 
         int
           length;
 
         /*
           Generate file list from file list (e.g. @filelist.txt).
         */
         exception=AcquireExceptionInfo();
         files=FileToString(option,~0UL,exception);
         exception=DestroyExceptionInfo(exception);
         if (files == (char *) NULL)
           continue;
         filelist=StringToArgv(files,&length);
         if (filelist == (char **) NULL)
           continue;
         files=DestroyString(files);
         filelist[0]=DestroyString(filelist[0]);
         for (j=0; j < (ssize_t) (length-1); j++)
           filelist[j]=filelist[j+1];
         number_files=(size_t) length-1;
       }
     if (filelist == (char **) NULL)
       continue;
     for (j=0; j < (ssize_t) number_files; j++)
       if (IsPathDirectory(filelist[j]) <= 0)
         break;
     if (j == (ssize_t) number_files)
       {
         for (j=0; j < (ssize_t) number_files; j++)
           filelist[j]=DestroyString(filelist[j]);
         filelist=(char **) RelinquishMagickMemory(filelist);
         continue;
       }
     /*
       Transfer file list to argument vector.
     */
     vector=(char **) ResizeQuantumMemory(vector,(size_t) *number_arguments+
       count+number_files+1,sizeof(*vector));
     if (vector == (char **) NULL)
       {
         for (j=0; j < (ssize_t) number_files; j++)
           filelist[j]=DestroyString(filelist[j]);
         filelist=(char **) RelinquishMagickMemory(filelist);
         return(MagickFalse);
       }
     for (j=0; j < (ssize_t) number_files; j++)
     {
       option=filelist[j];
       parameters=ParseCommandOption(MagickCommandOptions,MagickFalse,option);
       if (parameters > 0)
         {
           ssize_t
             k;
 
           /*
             Do not expand command option parameters.
           */
           vector[count++]=ConstantString(option);
           for (k=0; k < parameters; k++)
           {
             j++;
             if (j == (ssize_t) number_files)
               break;
             option=filelist[j];
             vector[count++]=ConstantString(option);
           }
           continue;
         }
       (void) CopyMagickString(filename,path,MagickPathExtent);
       if (*path != '\0')
         (void) ConcatenateMagickString(filename,DirectorySeparator,
           MagickPathExtent);
       if (filelist[j] != (char *) NULL)
         (void) ConcatenateMagickString(filename,filelist[j],MagickPathExtent);
       filelist[j]=DestroyString(filelist[j]);
       if (strlen(filename) >= (MagickPathExtent-1))
         ThrowFatalException(OptionFatalError,"FilenameTruncated");
       if (IsPathDirectory(filename) <= 0)
         {
           char
             file_path[MagickPathExtent];
 
           *file_path='\0';
           if (*magick != '\0')
             {
               (void) ConcatenateMagickString(file_path,magick,
                 MagickPathExtent);
               (void) ConcatenateMagickString(file_path,":",MagickPathExtent);
             }
           (void) ConcatenateMagickString(file_path,filename,MagickPathExtent);
           if (*subimage != '\0')
             {
               (void) ConcatenateMagickString(file_path,"[",MagickPathExtent);
               (void) ConcatenateMagickString(file_path,subimage,
                 MagickPathExtent);
               (void) ConcatenateMagickString(file_path,"]",MagickPathExtent);
             }
           if (strlen(file_path) >= (MagickPathExtent-1))
             ThrowFatalException(OptionFatalError,"FilenameTruncated");
           if (destroy != MagickFalse)
             {
               count--;
               vector[count]=DestroyString(vector[count]);
               destroy=MagickFalse;
             }
           vector[count++]=ConstantString(file_path);
         }
     }
     filelist=(char **) RelinquishMagickMemory(filelist);
   }
   vector[count]=(char *) NULL;
   if (IsEventLogging() != MagickFalse)
     {
       char
         *command_line;
 
       command_line=AcquireString(vector[0]);
       for (i=1; i < count; i++)
       {
         (void) ConcatenateString(&command_line," {");
         (void) ConcatenateString(&command_line,vector[i]);
         (void) ConcatenateString(&command_line,"}");
       }
       (void) LogMagickEvent(ConfigureEvent,GetMagickModule(),
         "Command line: %s",command_line);
       command_line=DestroyString(command_line);
     }
   *number_arguments=(int) count;
   *arguments=vector;
   return(MagickTrue);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   G e t E x e c u t i o n P a t h                                           %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  GetExecutionPath() returns the pathname of the executable that started
 %  the process.  On success MagickTrue is returned, otherwise MagickFalse.
 %
 %  The format of the GetExecutionPath method is:
 %
 %      MagickBooleanType GetExecutionPath(char *path,const size_t extent)
 %
 %  A description of each parameter follows:
 %
 %    o path: the pathname of the executable that started the process.
 %
 %    o extent: the maximum extent of the path.
 %
 */
