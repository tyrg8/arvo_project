commit 77e13728a69c1e4a210f4acfef8362a536c3b314
Author: Lizan Zhou <lizan@tetrate.io>
Date:   Mon Nov 16 17:57:00 2020 -0800

    wasm: use static registration for runtimes (#14014)
    
    Partially addresses #12574. Refactored test instantiate to removes many ifdefs.
    
    Commit Message:
    Additional Description:
    Risk Level: Low
    Testing: CI
    Docs Changes:
    Release Notes:
    Platform Specific Features:
    
    Signed-off-by: Lizan Zhou <lizan@tetrate.io>

diff --git a/CODEOWNERS b/CODEOWNERS
index ab8af77e34..c72b2900ec 100644
--- a/CODEOWNERS
+++ b/CODEOWNERS
@@ -5,143 +5,145 @@
 # api
 /api/ @envoyproxy/api-shepherds
 # access loggers
 /*/extensions/access_loggers/common @auni53 @zuercher
 # compression extensions
 /*/extensions/compression/common/compressor @rojkov @junr03
 /*/extensions/compression/gzip/compressor @rojkov @junr03
 # csrf extension
 /*/extensions/filters/http/csrf @dschaller @mattklein123
 # original_src http filter extension
 /*/extensions/filters/http/original_src @snowp @klarose
 # original_src listener filter extension
 /*/extensions/filters/listener/original_src @snowp @klarose
 # original_src common extension
 extensions/filters/common/original_src @snowp @klarose
 # dubbo_proxy extension
 /*/extensions/filters/network/dubbo_proxy @zyfjeff @lizan
 # rocketmq_proxy extension
 /*/extensions/filters/network/rocketmq_proxy @aaron-ai @lizhanhui @lizan
 # thrift_proxy extension
 /*/extensions/filters/network/thrift_proxy @zuercher @rgs1
 # cdn_loop extension
 /*/extensions/filters/http/cdn_loop @justin-mp @penguingao @alyssawilk
 # compressor used by http compression filters
 /*/extensions/filters/http/common/compressor @gsagula @rojkov @dio
 /*/extensions/filters/http/compressor @rojkov @dio
 # jwt_authn http filter extension
 /*/extensions/filters/http/jwt_authn @qiwzhang @lizan
 # grpc_http1_reverse_bridge http filter extension
 /*/extensions/filters/http/grpc_http1_reverse_bridge @snowp @zuercher
 # header_to_metadata extension
 /*/extensions/filters/http/header_to_metadata @rgs1 @zuercher
 # alts transport socket extension
 /*/extensions/transport_sockets/alts @htuch @yangminzhu
 # tls transport socket extension
 /*/extensions/transport_sockets/tls @PiotrSikora @lizan @asraa @ggreenway
 # proxy protocol socket extension
 /*/extensions/transport_sockets/proxy_protocol @alyssawilk @wez470
 # common transport socket
 /*/extensions/transport_sockets/common @alyssawilk @wez470
 # sni_cluster extension
 /*/extensions/filters/network/sni_cluster @rshriram @lizan
 # sni_dynamic_forward_proxy extension
 /*/extensions/filters/network/sni_dynamic_forward_proxy @rshriram @lizan
 # tracers.datadog extension
 /*/extensions/tracers/datadog @cgilmour @palazzem @mattklein123
 # tracers.xray extension
 /*/extensions/tracers/xray @marcomagdy @lavignes @mattklein123
 # tracers.skywalking extension
 /*/extensions/tracers/skywalking @wbpcode @dio @lizan
 # mysql_proxy extension
 /*/extensions/filters/network/mysql_proxy @rshriram @venilnoronha @mattklein123
 # postgres_proxy extension
 /*/extensions/filters/network/postgres_proxy @fabriziomello @cpakulski @dio
 # quic extension
 /*/extensions/quic_listeners/ @alyssawilk @danzh2010 @mattklein123 @mpwarres @wu-bin @ggreenway
 # zookeeper_proxy extension
 /*/extensions/filters/network/zookeeper_proxy @rgs1 @snowp
 # redis cluster extension
 /*/extensions/clusters/redis @msukalski @henryyyang @mattklein123
 /*/extensions/common/redis @msukalski @henryyyang @mattklein123
 # dynamic forward proxy
 /*/extensions/clusters/dynamic_forward_proxy @mattklein123 @alyssawilk
 /*/extensions/common/dynamic_forward_proxy @mattklein123 @alyssawilk
 /*/extensions/filters/http/dynamic_forward_proxy @mattklein123 @alyssawilk
 # omit_canary_hosts retry predicate
 /*/extensions/retry/host/omit_canary_hosts @sriduth @snowp
 # HTTP caching extension
 /*/extensions/filters/http/cache @toddmgreer @jmarantz
 # aws_iam grpc credentials
 /*/extensions/grpc_credentials/aws_iam @lavignes @mattklein123
 /*/extensions/common/aws @lavignes @mattklein123
 # adaptive concurrency limit extension.
 /*/extensions/filters/http/adaptive_concurrency @tonya11en @mattklein123
 # admission control extension.
 /*/extensions/filters/http/admission_control @tonya11en @mattklein123
 # http inspector
 /*/extensions/filters/listener/http_inspector @yxue @PiotrSikora @lizan
 # attribute context
 /*/extensions/filters/common/expr @kyessenov @yangminzhu @lizan
 # webassembly access logger extensions
 /*/extensions/access_loggers/wasm @PiotrSikora @lizan
 # webassembly bootstrap extensions
 /*/extensions/bootstrap/wasm @PiotrSikora @lizan
 # webassembly http extensions
 /*/extensions/filters/http/wasm @PiotrSikora @lizan
 # webassembly network extensions
 /*/extensions/filters/network/wasm @PiotrSikora @lizan
 # webassembly common extension
 /*/extensions/common/wasm @PiotrSikora @lizan
+# webassembly runtimes
+/*/extensions/wasm_runtime/ @PiotrSikora @lizan
 # common matcher
 /*/extensions/common/matcher @mattklein123 @yangminzhu
 # common crypto extension
 /*/extensions/common/crypto @lizan @PiotrSikora @bdecoste @asraa
 /*/extensions/common/proxy_protocol @alyssawilk @wez470
 /*/extensions/common/sqlutils @cpakulski @dio
 /*/extensions/filters/http/grpc_http1_bridge @snowp @jose
 /*/extensions/filters/http/gzip @gsagula @dio
 /*/extensions/filters/http/fault @rshriram @alyssawilk
 /*/extensions/filters/common/fault @rshriram @alyssawilk
 /*/extensions/filters/http/grpc_json_transcoder @qiwzhang @lizan
 /*/extensions/filters/http/router @alyssawilk @mattklein123 @snowp
 /*/extensions/filters/http/ext_authz @gsagula @dio
 /*/extensions/filters/http/grpc_web @fengli79 @lizan
 /*/extensions/filters/http/grpc_stats @kyessenov @lizan
 /*/extensions/filters/http/squash @yuval-k @alyssawilk
 /*/extensions/filters/common/ext_authz @gsagula @dio
 /*/extensions/filters/common/original_src @klarose @snowp
 /*/extensions/filters/listener/tls_inspector @piotrsikora @htuch @asraa
 /*/extensions/grpc_credentials/example @wozz @htuch
 /*/extensions/grpc_credentials/file_based_metadata @wozz @htuch
 /*/extensions/internal_redirect @alyssawilk @penguingao
 /*/extensions/stat_sinks/dog_statsd @taiki45 @jmarantz
 /*/extensions/stat_sinks/hystrix @trabetti @jmarantz
 /*/extensions/stat_sinks/metrics_service @ramaraochavali @jmarantz
 # webassembly stat-sink extensions
 /*/extensions/stat_sinks/wasm @PiotrSikora @lizan
 /*/extensions/resource_monitors/injected_resource @eziskind @htuch
 /*/extensions/resource_monitors/common @eziskind @htuch
 /*/extensions/resource_monitors/fixed_heap @eziskind @htuch
 /*/extensions/retry/priority @snowp @alyssawilk
 /*/extensions/retry/priority/previous_priorities @snowp @alyssawilk
 /*/extensions/retry/host @snowp @alyssawilk
 /*/extensions/filters/network/http_connection_manager @alyssawilk @mattklein123
 /*/extensions/filters/network/ext_authz @gsagula @dio
 /*/extensions/filters/network/tcp_proxy @alyssawilk @zuercher @ggreenway
 /*/extensions/filters/network/echo @htuch @alyssawilk
 /*/extensions/filters/udp/dns_filter @abaptiste @mattklein123
 /*/extensions/filters/network/direct_response @kyessenov @zuercher
 /*/extensions/filters/udp/udp_proxy @mattklein123 @danzh2010
 /*/extensions/clusters/aggregate @yxue @snowp
 # support for on-demand VHDS requests
 /*/extensions/filters/http/on_demand @dmitri-d @htuch @lambdai
 /*/extensions/filters/network/local_ratelimit @mattklein123 @junr03
 /*/extensions/filters/http/aws_request_signing @rgs1 @derekargueta @mattklein123 @marcomagdy
 /*/extensions/filters/http/aws_lambda @mattklein123 @marcomagdy @lavignes
 # Compression
 /*/extensions/compression/common @junr03 @rojkov
 /*/extensions/compression/gzip @junr03 @rojkov
 /*/extensions/filters/http/decompressor @rojkov @dio
 # Watchdog Extensions
 /*/extensions/watchdog/profile_action @kbaichoo @antoniovicente
 # Core upstream code
diff --git a/api/envoy/extensions/wasm/v3/wasm.proto b/api/envoy/extensions/wasm/v3/wasm.proto
index b42fb75a0b..c6affb8106 100644
--- a/api/envoy/extensions/wasm/v3/wasm.proto
+++ b/api/envoy/extensions/wasm/v3/wasm.proto
@@ -21,35 +21,57 @@ option (udpa.annotations.file_status).package_version_status = ACTIVE;
 // Configuration for a Wasm VM.
 // [#next-free-field: 7]
 message VmConfig {
   // An ID which will be used along with a hash of the wasm code (or the name of the registered Null
   // VM plugin) to determine which VM will be used for the plugin. All plugins which use the same
   // *vm_id* and code will use the same VM. May be left blank. Sharing a VM between plugins can
   // reduce memory utilization and make sharing of data easier which may have security implications.
   // See ref: "TODO: add ref" for details.
   string vm_id = 1;
 
-  // The Wasm runtime type (either "v8" or "null" for code compiled into Envoy).
+  // The Wasm runtime type.
+  // Available Wasm runtime types are registered as extensions. The following runtimes are included
+  // in Envoy code base:
+  //
+  // .. _extension_envoy.wasm.runtime.null:
+  //
+  // **envoy.wasm.runtime.null**: Null sandbox, the Wasm module must be compiled and linked into the
+  // Envoy binary. The registered name is given in the *code* field as *inline_string*.
+  //
+  // .. _extension_envoy.wasm.runtime.v8:
+  //
+  // **envoy.wasm.runtime.v8**: `V8 <https://v8.dev/>`_-based WebAssembly runtime.
+  //
+  // .. _extension_envoy.wasm.runtime.wavm:
+  //
+  // **envoy.wasm.runtime.wavm**: `WAVM <https://wavm.github.io/>`_-based WebAssembly runtime.
+  // This runtime is not enabled in the official build.
+  //
+  // .. _extension_envoy.wasm.runtime.wasmtime:
+  //
+  // **envoy.wasm.runtime.wasmtime**: `Wasmtime <https://wasmtime.dev/>`_-based WebAssembly runtime.
+  // This runtime is not enabled in the official build.
+  //
   string runtime = 2 [(validate.rules).string = {min_len: 1}];
 
   // The Wasm code that Envoy will execute.
   config.core.v3.AsyncDataSource code = 3;
 
   // The Wasm configuration used in initialization of a new VM
   // (proxy_on_start). `google.protobuf.Struct` is serialized as JSON before
   // passing it to the plugin. `google.protobuf.BytesValue` and
   // `google.protobuf.StringValue` are passed directly without the wrapper.
   google.protobuf.Any configuration = 4;
 
   // Allow the wasm file to include pre-compiled code on VMs which support it.
   // Warning: this should only be enable for trusted sources as the precompiled code is not
   // verified.
   bool allow_precompiled = 5;
 
   // If true and the code needs to be remotely fetched and it is not in the cache then NACK the configuration
   // update and do a background fetch to fill the cache, otherwise fetch the code asynchronously and enter
   // warming state.
   bool nack_on_code_cache_miss = 6;
 }
 
 // Base Configuration for Wasm Plugins e.g. filters and services.
 // [#next-free-field: 6]
diff --git a/bazel/repository_locations.bzl b/bazel/repository_locations.bzl
index 643e31c693..1db2cb55e5 100644
--- a/bazel/repository_locations.bzl
+++ b/bazel/repository_locations.bzl
@@ -1,957 +1,998 @@
 # This should match the schema defined in external_deps.bzl.
 REPOSITORY_LOCATIONS_SPEC = dict(
     bazel_compdb = dict(
         project_name = "bazel-compilation-database",
         project_desc = "Clang JSON compilation database support for Bazel",
         project_url = "https://github.com/grailbio/bazel-compilation-database",
         version = "0.4.5",
         sha256 = "bcecfd622c4ef272fd4ba42726a52e140b961c4eac23025f18b346c968a8cfb4",
         strip_prefix = "bazel-compilation-database-{version}",
         urls = ["https://github.com/grailbio/bazel-compilation-database/archive/{version}.tar.gz"],
         release_date = "2020-08-01",
         use_category = ["build"],
     ),
     bazel_gazelle = dict(
         project_name = "Gazelle",
         project_desc = "Bazel BUILD file generator for Go projects",
         project_url = "https://github.com/bazelbuild/bazel-gazelle",
         version = "0.21.1",
         sha256 = "cdb02a887a7187ea4d5a27452311a75ed8637379a1287d8eeb952138ea485f7d",
         urls = ["https://github.com/bazelbuild/bazel-gazelle/releases/download/v{version}/bazel-gazelle-v{version}.tar.gz"],
         release_date = "2020-05-28",
         use_category = ["build"],
     ),
     bazel_toolchains = dict(
         project_name = "bazel-toolchains",
         project_desc = "Bazel toolchain configs for RBE",
         project_url = "https://github.com/bazelbuild/bazel-toolchains",
         version = "3.6.0",
         sha256 = "4fb3ceea08101ec41208e3df9e56ec72b69f3d11c56629d6477c0ff88d711cf7",
         strip_prefix = "bazel-toolchains-{version}",
         urls = [
             "https://github.com/bazelbuild/bazel-toolchains/releases/download/{version}/bazel-toolchains-{version}.tar.gz",
             "https://mirror.bazel.build/github.com/bazelbuild/bazel-toolchains/archive/{version}.tar.gz",
         ],
         release_date = "2020-10-08",
         use_category = ["build"],
     ),
     build_bazel_rules_apple = dict(
         project_name = "Apple Rules for Bazel",
         project_desc = "Bazel rules for Apple platforms",
         project_url = "https://github.com/bazelbuild/rules_apple",
         version = "0.19.0",
         sha256 = "7a7afdd4869bb201c9352eed2daf37294d42b093579b70423490c1b4d4f6ce42",
         urls = ["https://github.com/bazelbuild/rules_apple/releases/download/{version}/rules_apple.{version}.tar.gz"],
         release_date = "2019-10-10",
         use_category = ["build"],
     ),
     envoy_build_tools = dict(
         project_name = "envoy-build-tools",
         project_desc = "Common build tools shared by the Envoy/UDPA ecosystem",
         project_url = "https://github.com/envoyproxy/envoy-build-tools",
         version = "b1a8b205f13ce52143bcb7283c6dd0a53bcd1c6c",
         sha256 = "afd67e399fa27fb703fb74dc39ed1f121dfcebc1556bbd1053fa8f22d8b24230",
         strip_prefix = "envoy-build-tools-{version}",
         urls = ["https://github.com/envoyproxy/envoy-build-tools/archive/{version}.tar.gz"],
         release_date = "2020-10-16",
         use_category = ["build"],
     ),
     boringssl = dict(
         project_name = "BoringSSL",
         project_desc = "Minimal OpenSSL fork",
         project_url = "https://github.com/google/boringssl",
         version = "2192bbc878822cf6ab5977d4257a1339453d9d39",
         sha256 = "bb55b0ed2f0cb548b5dce6a6b8307ce37f7f748eb9f1be6bfe2d266ff2b4d52b",
         strip_prefix = "boringssl-{version}",
         # To update BoringSSL, which tracks Chromium releases:
         # 1. Open https://omahaproxy.appspot.com/ and note <current_version> of linux/stable release.
         # 2. Open https://chromium.googlesource.com/chromium/src/+/refs/tags/<current_version>/DEPS and note <boringssl_revision>.
         # 3. Find a commit in BoringSSL's "master-with-bazel" branch that merges <boringssl_revision>.
         #
         # chromium-86.0.4240.80
         urls = ["https://github.com/google/boringssl/archive/{version}.tar.gz"],
         use_category = ["controlplane", "dataplane_core"],
         release_date = "2020-07-30",
         cpe = "cpe:2.3:a:google:boringssl:*",
     ),
     boringssl_fips = dict(
         project_name = "BoringSSL (FIPS)",
         project_desc = "FIPS compliant BoringSSL",
         project_url = "https://boringssl.googlesource.com/boringssl/+/master/crypto/fipsmodule/FIPS.md",
         version = "fips-20190808",
         sha256 = "3b5fdf23274d4179c2077b5e8fa625d9debd7a390aac1d165b7e47234f648bb8",
         urls = ["https://commondatastorage.googleapis.com/chromium-boringssl-fips/boringssl-ae223d6138807a13006342edfeef32e813246b39.tar.xz"],
         use_category = ["controlplane", "dataplane_core"],
         release_date = "2019-08-08",
         cpe = "cpe:2.3:a:google:boringssl:*",
     ),
     com_google_absl = dict(
         project_name = "Abseil",
         project_desc = "Open source collection of C++ libraries drawn from the most fundamental pieces of Google’s internal codebase",
         project_url = "https://abseil.io/",
         version = "8f1c34a77a2ba04512b7f9cbc6013d405e6a0b31",
         sha256 = "635367c5cac4bbab95d0485ba9e68fa422546b06ce050190c99be7e23aba3ce3",
         strip_prefix = "abseil-cpp-{version}",
         urls = ["https://github.com/abseil/abseil-cpp/archive/{version}.tar.gz"],
         use_category = ["dataplane_core", "controlplane"],
         release_date = "2020-10-17",
         cpe = "N/A",
     ),
     com_github_c_ares_c_ares = dict(
         project_name = "c-ares",
         project_desc = "C library for asynchronous DNS requests",
         project_url = "https://c-ares.haxx.se/",
         version = "c15f403875ababb1149215d49683d720b3d035c7",
         sha256 = "0ad4f9748752909b00a0ca8d2b6a075e0a7a06ee922d9dcf9625d2562d7c894a",
         strip_prefix = "c-ares-{version}",
         urls = ["https://github.com/c-ares/c-ares/archive/{version}.tar.gz"],
         use_category = ["dataplane_core", "controlplane"],
         release_date = "2020-10-21",
         cpe = "cpe:2.3:a:c-ares_project:c-ares:*",
     ),
     com_github_circonus_labs_libcircllhist = dict(
         project_name = "libcircllhist",
         project_desc = "An implementation of Circonus log-linear histograms",
         project_url = "https://github.com/circonus-labs/libcircllhist",
         version = "63a16dd6f2fc7bc841bb17ff92be8318df60e2e1",
         sha256 = "8165aa25e529d7d4b9ae849d3bf30371255a99d6db0421516abcff23214cdc2c",
         strip_prefix = "libcircllhist-{version}",
         urls = ["https://github.com/circonus-labs/libcircllhist/archive/{version}.tar.gz"],
         use_category = ["controlplane", "observability_core", "dataplane_core"],
         release_date = "2019-02-11",
         cpe = "N/A",
     ),
     com_github_cyan4973_xxhash = dict(
         project_name = "xxHash",
         project_desc = "Extremely fast hash algorithm",
         project_url = "https://github.com/Cyan4973/xxHash",
         version = "0.7.3",
         sha256 = "952ebbf5b11fbf59ae5d760a562d1e9112278f244340ad7714e8556cbe54f7f7",
         strip_prefix = "xxHash-{version}",
         urls = ["https://github.com/Cyan4973/xxHash/archive/v{version}.tar.gz"],
         use_category = ["dataplane_core", "controlplane"],
         release_date = "2020-03-05",
         cpe = "N/A",
     ),
     com_github_envoyproxy_sqlparser = dict(
         project_name = "C++ SQL Parser Library",
         project_desc = "Forked from Hyrise SQL Parser",
         project_url = "https://github.com/envoyproxy/sql-parser",
         version = "3b40ba2d106587bdf053a292f7e3bb17e818a57f",
         sha256 = "96c10c8e950a141a32034f19b19cdeb1da48fe859cf96ae5e19f894f36c62c71",
         strip_prefix = "sql-parser-{version}",
         urls = ["https://github.com/envoyproxy/sql-parser/archive/{version}.tar.gz"],
         use_category = ["dataplane_ext"],
         extensions = [
             "envoy.filters.network.mysql_proxy",
             "envoy.filters.network.postgres_proxy",
         ],
         release_date = "2020-06-10",
         cpe = "N/A",
     ),
     com_github_mirror_tclap = dict(
         project_name = "tclap",
         project_desc = "Small, flexible library that provides a simple interface for defining and accessing command line arguments",
         project_url = "http://tclap.sourceforge.net",
         version = "1-2-1",
         sha256 = "f0ede0721dddbb5eba3a47385a6e8681b14f155e1129dd39d1a959411935098f",
         strip_prefix = "tclap-tclap-{version}-release-final",
         urls = ["https://github.com/mirror/tclap/archive/tclap-{version}-release-final.tar.gz"],
         release_date = "2011-04-16",
         use_category = ["other"],
     ),
     com_github_fmtlib_fmt = dict(
         project_name = "fmt",
         project_desc = "{fmt} is an open-source formatting library providing a fast and safe alternative to C stdio and C++ iostreams",
         project_url = "https://fmt.dev",
         version = "7.0.3",
         sha256 = "decfdf9ad274070fa85f26407b816f5a4d82205ae86bac1990be658d0795ea4d",
         strip_prefix = "fmt-{version}",
         urls = ["https://github.com/fmtlib/fmt/releases/download/{version}/fmt-{version}.zip"],
         use_category = ["dataplane_core", "controlplane"],
         release_date = "2020-08-06",
         cpe = "cpe:2.3:a:fmt:fmt:*",
     ),
     com_github_gabime_spdlog = dict(
         project_name = "spdlog",
         project_desc = "Very fast, header-only/compiled, C++ logging library",
         project_url = "https://github.com/gabime/spdlog",
         version = "1.7.0",
         sha256 = "f0114a4d3c88be9e696762f37a7c379619443ce9d668546c61b21d41affe5b62",
         strip_prefix = "spdlog-{version}",
         urls = ["https://github.com/gabime/spdlog/archive/v{version}.tar.gz"],
         use_category = ["dataplane_core", "controlplane"],
         release_date = "2020-07-09",
         cpe = "N/A",
     ),
     com_github_google_libprotobuf_mutator = dict(
         project_name = "libprotobuf-mutator",
         project_desc = "Library to randomly mutate protobuffers",
         project_url = "https://github.com/google/libprotobuf-mutator",
         version = "8942a9ba43d8bb196230c321d46d6a137957a719",
         sha256 = "49a26dbe77c75f2eca1dd8a9fbdb31c4496d9af42df027ff57569c5a7a5d980d",
         strip_prefix = "libprotobuf-mutator-{version}",
         urls = ["https://github.com/google/libprotobuf-mutator/archive/{version}.tar.gz"],
         release_date = "2020-08-18",
         use_category = ["test_only"],
     ),
     com_github_google_tcmalloc = dict(
         project_name = "tcmalloc",
         project_desc = "Fast, multi-threaded malloc implementation",
         project_url = "https://github.com/google/tcmalloc",
         version = "9f385356c34d4fc11f76a000b609e2b446c20667",
         sha256 = "652e48e0b9ef645db04bff8a3d4841c60ce07275f5d98e18e698dc92bd111291",
         strip_prefix = "tcmalloc-{version}",
         urls = ["https://github.com/google/tcmalloc/archive/{version}.tar.gz"],
         use_category = ["dataplane_core", "controlplane"],
         release_date = "2020-11-04",
         cpe = "N/A",
     ),
     com_github_gperftools_gperftools = dict(
         project_name = "gperftools",
         project_desc = "tcmalloc and profiling libraries",
         project_url = "https://github.com/gperftools/gperftools",
         version = "2.8",
         sha256 = "240deacdd628b6459671b83eb0c4db8e97baadf659f25b92e9a078d536bd513e",
         strip_prefix = "gperftools-{version}",
         urls = ["https://github.com/gperftools/gperftools/releases/download/gperftools-{version}/gperftools-{version}.tar.gz"],
         release_date = "2020-07-06",
         use_category = ["dataplane_core", "controlplane"],
         cpe = "cpe:2.3:a:gperftools_project:gperftools:*",
     ),
     com_github_grpc_grpc = dict(
         project_name = "gRPC",
         project_desc = "gRPC C core library",
         project_url = "https://grpc.io",
         # TODO(JimmyCYJ): Bump to release 1.27
         # This sha on grpc:v1.25.x branch is specifically chosen to fix gRPC STS call credential options.
         version = "d8f4928fa779f6005a7fe55a176bdb373b0f910f",
         sha256 = "bbc8f020f4e85ec029b047fab939b8c81f3d67254b5c724e1003a2bc49ddd123",
         strip_prefix = "grpc-{version}",
         urls = ["https://github.com/grpc/grpc/archive/{version}.tar.gz"],
         use_category = ["dataplane_core", "controlplane"],
         release_date = "2020-02-11",
         cpe = "cpe:2.3:a:grpc:grpc:*",
     ),
     com_github_luajit_luajit = dict(
         project_name = "LuaJIT",
         project_desc = "Just-In-Time compiler for Lua",
         project_url = "https://luajit.org",
         # The last release version, 2.1.0-beta3 has a number of CVEs filed
         # against it. These may not impact correct non-malicious Lua code, but for prudence we bump.
         version = "1d8b747c161db457e032a023ebbff511f5de5ec2",
         sha256 = "20a159c38a98ecdb6368e8d655343b6036622a29a1621da9dc303f7ed9bf37f3",
         strip_prefix = "LuaJIT-{version}",
         urls = ["https://github.com/LuaJIT/LuaJIT/archive/{version}.tar.gz"],
         release_date = "2020-10-12",
         use_category = ["dataplane_ext"],
         extensions = ["envoy.filters.http.lua"],
         cpe = "cpe:2.3:a:luajit:luajit:*",
     ),
     com_github_moonjit_moonjit = dict(
         project_name = "Moonjit",
         project_desc = "LuaJIT fork with wider platform support",
         project_url = "https://github.com/moonjit/moonjit",
         version = "2.2.0",
         sha256 = "83deb2c880488dfe7dd8ebf09e3b1e7613ef4b8420de53de6f712f01aabca2b6",
         strip_prefix = "moonjit-{version}",
         urls = ["https://github.com/moonjit/moonjit/archive/{version}.tar.gz"],
         use_category = ["dataplane_ext"],
         extensions = ["envoy.filters.http.lua"],
         release_date = "2020-01-14",
         cpe = "cpe:2.3:a:moonjit_project:moonjit:*",
     ),
     com_github_nghttp2_nghttp2 = dict(
         project_name = "Nghttp2",
         project_desc = "Implementation of HTTP/2 and its header compression algorithm HPACK in Cimplementation of HTTP/2 and its header compression algorithm HPACK in C",
         project_url = "https://nghttp2.org",
         version = "1.41.0",
         sha256 = "eacc6f0f8543583ecd659faf0a3f906ed03826f1d4157b536b4b385fe47c5bb8",
         strip_prefix = "nghttp2-{version}",
         urls = ["https://github.com/nghttp2/nghttp2/releases/download/v{version}/nghttp2-{version}.tar.gz"],
         use_category = ["controlplane", "dataplane_core"],
         release_date = "2020-06-02",
         cpe = "cpe:2.3:a:nghttp2:nghttp2:*",
     ),
     io_opentracing_cpp = dict(
         project_name = "OpenTracing",
         project_desc = "Vendor-neutral APIs and instrumentation for distributed tracing",
         project_url = "https://opentracing.io",
         version = "1.5.1",
         sha256 = "015c4187f7a6426a2b5196f0ccd982aa87f010cf61f507ae3ce5c90523f92301",
         strip_prefix = "opentracing-cpp-{version}",
         urls = ["https://github.com/opentracing/opentracing-cpp/archive/v{version}.tar.gz"],
         use_category = ["observability_ext"],
         extensions = [
             "envoy.tracers.datadog",
             "envoy.tracers.dynamic_ot",
             "envoy.tracers.lightstep",
         ],
         release_date = "2019-01-16",
         cpe = "N/A",
     ),
     com_lightstep_tracer_cpp = dict(
         project_name = "lightstep-tracer-cpp",
         project_desc = "LightStep distributed tracing library for C++",
         project_url = "https://github.com/lightstep/lightstep-tracer-cpp",
         version = "1942b3f142e218ebc143a043f32e3278dafec9aa",
         sha256 = "3238921a8f578beb26c2215cd277e8f6752f3d29b020b881d60d96a240a38aed",
         strip_prefix = "lightstep-tracer-cpp-{version}",
         urls = ["https://github.com/lightstep/lightstep-tracer-cpp/archive/{version}.tar.gz"],
         use_category = ["observability_ext"],
         extensions = ["envoy.tracers.lightstep"],
         release_date = "2020-08-25",
         cpe = "N/A",
     ),
     com_github_datadog_dd_opentracing_cpp = dict(
         project_name = "Datadog OpenTracing C++ Client",
         project_desc = "Datadog OpenTracing C++ Client",
         project_url = "https://github.com/DataDog/dd-opentracing-cpp",
         version = "1.1.5",
         sha256 = "b84fd2fb0bb0578af4901db31d1c0ae909b532a1016fe6534cbe31a6c3ad6924",
         strip_prefix = "dd-opentracing-cpp-{version}",
         urls = ["https://github.com/DataDog/dd-opentracing-cpp/archive/v{version}.tar.gz"],
         use_category = ["observability_ext"],
         extensions = ["envoy.tracers.datadog"],
         release_date = "2020-05-15",
         cpe = "N/A",
     ),
     com_github_google_benchmark = dict(
         project_name = "Benchmark",
         project_desc = "Library to benchmark code snippets",
         project_url = "https://github.com/google/benchmark",
         version = "1.5.1",
         sha256 = "23082937d1663a53b90cb5b61df4bcc312f6dee7018da78ba00dd6bd669dfef2",
         strip_prefix = "benchmark-{version}",
         urls = ["https://github.com/google/benchmark/archive/v{version}.tar.gz"],
         use_category = ["test_only"],
         release_date = "2020-06-09",
     ),
     com_github_libevent_libevent = dict(
         project_name = "libevent",
         project_desc = "Event notification library",
         project_url = "https://libevent.org",
         # This SHA includes the new "prepare" and "check" watchers, used for event loop performance
         # stats (see https://github.com/libevent/libevent/pull/793) and the fix for a race condition
         # in the watchers (see https://github.com/libevent/libevent/pull/802).
         # This also includes the fixes for https://github.com/libevent/libevent/issues/806
         # and https://github.com/lyft/envoy-mobile/issues/215.
         # This also includes the fixes for Phantom events with EV_ET (see
         # https://github.com/libevent/libevent/issues/984).
         # This also includes the wepoll backend for Windows (see
         # https://github.com/libevent/libevent/pull/1006)
         # TODO(adip): Update to v2.2 when it is released.
         version = "62c152d9a7cd264b993dad730c4163c6ede2e0a3",
         sha256 = "4c80e5fe044ce5f8055b20a2f141ee32ec2614000f3e95d2aa81611a4c8f5213",
         strip_prefix = "libevent-{version}",
         urls = ["https://github.com/libevent/libevent/archive/{version}.tar.gz"],
         use_category = ["dataplane_core", "controlplane"],
         release_date = "2020-07-28",
         cpe = "cpe:2.3:a:libevent_project:libevent:*",
     ),
     # This should be removed, see https://github.com/envoyproxy/envoy/issues/13261.
     net_zlib = dict(
         project_name = "zlib",
         project_desc = "zlib compression library",
         project_url = "https://zlib.net",
         version = "79baebe50e4d6b73ae1f8b603f0ef41300110aa3",
         # Use the dev branch of zlib to resolve fuzz bugs and out of bound
         # errors resulting in crashes in zlib 1.2.11.
         # TODO(asraa): Remove when zlib > 1.2.11 is released.
         sha256 = "155a8f8c1a753fb05b16a1b0cc0a0a9f61a78e245f9e0da483d13043b3bcbf2e",
         strip_prefix = "zlib-{version}",
         urls = ["https://github.com/madler/zlib/archive/{version}.tar.gz"],
         use_category = ["controlplane", "dataplane_core"],
         release_date = "2019-04-14",
         cpe = "cpe:2.3:a:gnu:zlib:*",
     ),
     com_github_zlib_ng_zlib_ng = dict(
         project_name = "zlib-ng",
         project_desc = "zlib fork (higher performance)",
         project_url = "https://github.com/zlib-ng/zlib-ng",
         version = "b802a303ce8b6c86fbe3f93d59e0a82333768c0c",
         sha256 = "e051eade607ecbbfa2c7ed3087fe53e5d3a58325375e1e28209594138e4aa93d",
         strip_prefix = "zlib-ng-{version}",
         urls = ["https://github.com/zlib-ng/zlib-ng/archive/{version}.tar.gz"],
         use_category = ["controlplane", "dataplane_core"],
         release_date = "2020-10-18",
         cpe = "N/A",
     ),
     com_github_jbeder_yaml_cpp = dict(
         project_name = "yaml-cpp",
         project_desc = "YAML parser and emitter in C++ matching the YAML 1.2 spec",
         project_url = "https://github.com/jbeder/yaml-cpp",
         version = "98acc5a8874faab28b82c28936f4b400b389f5d6",
         sha256 = "79ab7069ef1c7c3632e7ffe095f7185d4c77b64d8035db3c085c239d4fe96d5f",
         strip_prefix = "yaml-cpp-{version}",
         urls = ["https://github.com/jbeder/yaml-cpp/archive/{version}.tar.gz"],
         # YAML is also used for runtime as well as controlplane. It shouldn't appear on the
         # dataplane but we can't verify this automatically due to code structure today.
         use_category = ["controlplane", "dataplane_core"],
         release_date = "2020-07-27",
         cpe = "cpe:2.3:a:yaml-cpp_project:yaml-cpp:*",
     ),
     com_github_msgpack_msgpack_c = dict(
         project_name = "msgpack for C/C++",
         project_desc = "MessagePack is an efficient binary serialization format",
         project_url = "https://github.com/msgpack/msgpack-c",
         version = "3.3.0",
         sha256 = "6e114d12a5ddb8cb11f669f83f32246e484a8addd0ce93f274996f1941c1f07b",
         strip_prefix = "msgpack-{version}",
         urls = ["https://github.com/msgpack/msgpack-c/releases/download/cpp-{version}/msgpack-{version}.tar.gz"],
         use_category = ["observability_ext"],
         extensions = ["envoy.tracers.datadog"],
         release_date = "2020-06-05",
         cpe = "N/A",
     ),
     com_github_google_jwt_verify = dict(
         project_name = "jwt_verify_lib",
         project_desc = "JWT verification library for C++",
         project_url = "https://github.com/google/jwt_verify_lib",
         version = "28efec2e4df1072db0ed03597591360ec9f80aac",
         sha256 = "7a5c35b7cbf633398503ae12cad8c2833e92b3a796eed68b6256d22d51ace5e1",
         strip_prefix = "jwt_verify_lib-{version}",
         urls = ["https://github.com/google/jwt_verify_lib/archive/{version}.tar.gz"],
         use_category = ["dataplane_ext"],
         extensions = ["envoy.filters.http.jwt_authn"],
         release_date = "2020-11-04",
         cpe = "N/A",
     ),
     com_github_nodejs_http_parser = dict(
         project_name = "HTTP Parser",
         project_desc = "Parser for HTTP messages written in C",
         project_url = "https://github.com/nodejs/http-parser",
         # This SHA includes fix for https://github.com/nodejs/http-parser/issues/517 which allows (opt-in) to serve
         # requests with both Content-Legth and Transfer-Encoding: chunked headers set.
         version = "4f15b7d510dc7c6361a26a7c6d2f7c3a17f8d878",
         sha256 = "6a12896313ce1ca630cf516a0ee43a79b5f13f5a5d8143f56560ac0b21c98fac",
         strip_prefix = "http-parser-{version}",
         urls = ["https://github.com/nodejs/http-parser/archive/{version}.tar.gz"],
         use_category = ["controlplane", "dataplane_core"],
         release_date = "2020-07-10",
         cpe = "cpe:2.3:a:nodejs:node.js:*",
     ),
     com_github_tencent_rapidjson = dict(
         project_name = "RapidJSON",
         project_desc = "Fast JSON parser/generator for C++",
         project_url = "https://rapidjson.org",
         version = "dfbe1db9da455552f7a9ad5d2aea17dd9d832ac1",
         sha256 = "a2faafbc402394df0fa94602df4b5e4befd734aad6bb55dfef46f62fcaf1090b",
         strip_prefix = "rapidjson-{version}",
         urls = ["https://github.com/Tencent/rapidjson/archive/{version}.tar.gz"],
         # We're mostly using com_google_protobuf for JSON, but there are some extensions and hard to
         # disentangle uses on the dataplane, e.g. header_formatter, Squash filter.
         use_category = ["controlplane", "dataplane_core"],
         release_date = "2019-12-03",
         cpe = "cpe:2.3:a:tencent:rapidjson:*",
     ),
     com_github_twitter_common_lang = dict(
         project_name = "twitter.common.lang (Thrift)",
         project_desc = "twitter.common Python language and compatibility facilities",
         project_url = "https://pypi.org/project/twitter.common.lang",
         version = "0.3.9",
         sha256 = "56d1d266fd4767941d11c27061a57bc1266a3342e551bde3780f9e9eb5ad0ed1",
         strip_prefix = "twitter.common.lang-{version}/src",
         urls = ["https://files.pythonhosted.org/packages/08/bc/d6409a813a9dccd4920a6262eb6e5889e90381453a5f58938ba4cf1d9420/twitter.common.lang-{version}.tar.gz"],
         release_date = "2016-10-17",
         use_category = ["test_only"],
     ),
     com_github_twitter_common_rpc = dict(
         project_name = "twitter.common.rpc (Thrift)",
         project_desc = "twitter.common Thrift helpers including Finagle and SSL transports",
         project_url = "https://pypi.org/project/twitter.common.rpc",
         version = "0.3.9",
         sha256 = "0792b63fb2fb32d970c2e9a409d3d00633190a22eb185145fe3d9067fdaa4514",
         strip_prefix = "twitter.common.rpc-{version}/src",
         urls = ["https://files.pythonhosted.org/packages/be/97/f5f701b703d0f25fbf148992cd58d55b4d08d3db785aad209255ee67e2d0/twitter.common.rpc-{version}.tar.gz"],
         release_date = "2016-10-17",
         use_category = ["test_only"],
     ),
     com_github_twitter_common_finagle_thrift = dict(
         project_name = "twitter.common.finagle-thrift",
         project_desc = "twitter.common Thrift stubs for Zipkin RPC tracing support in Finagle",
         project_url = "https://pypi.org/project/twitter.common.finagle-thrift",
         version = "0.3.9",
         sha256 = "1e3a57d11f94f58745e6b83348ecd4fa74194618704f45444a15bc391fde497a",
         strip_prefix = "twitter.common.finagle-thrift-{version}/src",
         urls = ["https://files.pythonhosted.org/packages/f9/e7/4f80d582578f8489226370762d2cf6bc9381175d1929eba1754e03f70708/twitter.common.finagle-thrift-{version}.tar.gz"],
         release_date = "2016-10-17",
         use_category = ["test_only"],
     ),
     com_google_googletest = dict(
         project_name = "Google Test",
         project_desc = "Google's C++ test framework",
         project_url = "https://github.com/google/googletest",
         # Pick up fix for MOCK_METHOD compilation with clang-cl for Windows (resolved after 1.10.0)
         # see https://github.com/google/googletest/issues/2490
         version = "a4ab0abb93620ce26efad9de9296b73b16e88588",
         sha256 = "7897bfaa5ad39a479177cfb5c3ce010184dbaee22a7c3727b212282871918751",
         strip_prefix = "googletest-{version}",
         urls = ["https://github.com/google/googletest/archive/{version}.tar.gz"],
         release_date = "2020-09-10",
         use_category = ["test_only"],
     ),
     com_google_protobuf = dict(
         project_name = "Protocol Buffers",
         project_desc = "Language-neutral, platform-neutral extensible mechanism for serializing structured data",
         project_url = "https://developers.google.com/protocol-buffers",
         version = "3.13.0",
         sha256 = "465fd9367992a9b9c4fba34a549773735da200903678b81b25f367982e8df376",
         strip_prefix = "protobuf-{version}",
         urls = ["https://github.com/protocolbuffers/protobuf/releases/download/v{version}/protobuf-all-{version}.tar.gz"],
         use_category = ["dataplane_core", "controlplane"],
         release_date = "2020-08-14",
         cpe = "cpe:2.3:a:google:protobuf:*",
     ),
     grpc_httpjson_transcoding = dict(
         project_name = "grpc-httpjson-transcoding",
         project_desc = "Library that supports transcoding so that HTTP/JSON can be converted to gRPC",
         project_url = "https://github.com/grpc-ecosystem/grpc-httpjson-transcoding",
         version = "4d095f048889d4fc3b8d4579aa80ca4290319802",
         sha256 = "7af66e0674340932683ab4f04ea6f03e2550849a54741738d94310b84d396a2c",
         strip_prefix = "grpc-httpjson-transcoding-{version}",
         urls = ["https://github.com/grpc-ecosystem/grpc-httpjson-transcoding/archive/{version}.tar.gz"],
         use_category = ["dataplane_ext"],
         extensions = ["envoy.filters.http.grpc_json_transcoder"],
         release_date = "2020-11-12",
         cpe = "N/A",
     ),
     io_bazel_rules_go = dict(
         project_name = "Go rules for Bazel",
         project_desc = "Bazel rules for the Go language",
         project_url = "https://github.com/bazelbuild/rules_go",
         version = "0.23.7",
         sha256 = "0310e837aed522875791750de44408ec91046c630374990edd51827cb169f616",
         urls = ["https://github.com/bazelbuild/rules_go/releases/download/v{version}/rules_go-v{version}.tar.gz"],
         use_category = ["build", "api"],
         release_date = "2020-08-06",
         implied_untracked_deps = [
             "com_github_golang_protobuf",
             "io_bazel_rules_nogo",
             "org_golang_google_protobuf",
             "org_golang_x_tools",
         ],
     ),
     rules_cc = dict(
         project_name = "C++ rules for Bazel",
         project_desc = "Bazel rules for the C++ language",
         project_url = "https://github.com/bazelbuild/rules_cc",
         # TODO(lizan): pin to a point releases when there's a released version.
         version = "818289e5613731ae410efb54218a4077fb9dbb03",
         sha256 = "9d48151ea71b3e225adfb6867e6d2c7d0dce46cbdc8710d9a9a628574dfd40a0",
         strip_prefix = "rules_cc-{version}",
         urls = ["https://github.com/bazelbuild/rules_cc/archive/{version}.tar.gz"],
         release_date = "2020-05-13",
         use_category = ["build"],
     ),
     rules_foreign_cc = dict(
         project_name = "Rules for using foreign build systems in Bazel",
         project_desc = "Rules for using foreign build systems in Bazel",
         project_url = "https://github.com/bazelbuild/rules_foreign_cc",
         version = "d54c78ab86b40770ee19f0949db9d74a831ab9f0",
         sha256 = "e7446144277c9578141821fc91c55a61df7ae01bda890902f7286f5fd2f6ae46",
         strip_prefix = "rules_foreign_cc-{version}",
         urls = ["https://github.com/bazelbuild/rules_foreign_cc/archive/{version}.tar.gz"],
         release_date = "2020-10-26",
         use_category = ["build"],
     ),
     rules_python = dict(
         project_name = "Python rules for Bazel",
         project_desc = "Bazel rules for the Python language",
         project_url = "https://github.com/bazelbuild/rules_python",
         # TODO(htuch): revert back to a point releases when pip3_import appears.
         version = "a0fbf98d4e3a232144df4d0d80b577c7a693b570",
         sha256 = "76a8fd4e7eca2a3590f816958faa0d83c9b2ce9c32634c5c375bcccf161d3bb5",
         strip_prefix = "rules_python-{version}",
         urls = ["https://github.com/bazelbuild/rules_python/archive/{version}.tar.gz"],
         release_date = "2020-04-09",
         use_category = ["build"],
     ),
     six = dict(
         project_name = "Six",
         project_desc = "Python 2 and 3 compatibility library",
         project_url = "https://pypi.org/project/six",
         version = "1.12.0",
         sha256 = "d16a0141ec1a18405cd4ce8b4613101da75da0e9a7aec5bdd4fa804d0e0eba73",
         urls = ["https://files.pythonhosted.org/packages/dd/bf/4138e7bfb757de47d1f4b6994648ec67a51efe58fa907c1e11e350cddfca/six-{version}.tar.gz"],
         release_date = "2018-12-09",
         use_category = ["other"],
     ),
     org_llvm_llvm = dict(
         project_name = "LLVM",
         project_desc = "LLVM Compiler Infrastructure",
         project_url = "https://llvm.org",
         version = "10.0.0",
         sha256 = "df83a44b3a9a71029049ec101fb0077ecbbdf5fe41e395215025779099a98fdf",
         strip_prefix = "llvm-{version}.src",
         urls = ["https://github.com/llvm/llvm-project/releases/download/llvmorg-{version}/llvm-{version}.src.tar.xz"],
         release_date = "2020-03-23",
         use_category = ["dataplane_ext"],
         extensions = [
             "envoy.access_loggers.wasm",
             "envoy.bootstrap.wasm",
             "envoy.filters.http.wasm",
             "envoy.filters.network.wasm",
             "envoy.stat_sinks.wasm",
+            "envoy.wasm.runtime.v8",
+            "envoy.wasm.runtime.wavm",
+            "envoy.wasm.runtime.wasmtime",
         ],
         cpe = "cpe:2.3:a:llvm:*:*",
     ),
     com_github_wavm_wavm = dict(
         project_name = "WAVM",
         project_desc = "WebAssembly Virtual Machine",
         project_url = "https://wavm.github.io",
         version = "e289ba654fe51655ab080819fd85ed9c936aae6e",
         sha256 = "35e2bfa795c67ef70405470f85bd2a15565738fb5cc08dc9c1a9c4676ee51e60",
         strip_prefix = "WAVM-{version}",
         urls = ["https://github.com/WAVM/WAVM/archive/{version}.tar.gz"],
         release_date = "2020-09-17",
         use_category = ["dataplane_ext"],
         extensions = [
             "envoy.access_loggers.wasm",
             "envoy.bootstrap.wasm",
             "envoy.filters.http.wasm",
             "envoy.filters.network.wasm",
             "envoy.stat_sinks.wasm",
+            "envoy.wasm.runtime.v8",
+            "envoy.wasm.runtime.wavm",
+            "envoy.wasm.runtime.wasmtime",
         ],
         cpe = "cpe:2.3:a:webassembly_virtual_machine_project:webassembly_virtual_machine:*",
     ),
     com_github_wasmtime = dict(
         project_name = "wasmtime",
         project_desc = "A standalone runtime for WebAssembly",
         project_url = "https://github.com/bytecodealliance/wasmtime",
         version = "0.21.0",
         sha256 = "7874feb1026bbef06796bd5ab80e73f15b8e83752bde8dc93994f5bc039a4952",
         strip_prefix = "wasmtime-{version}",
         urls = ["https://github.com/bytecodealliance/wasmtime/archive/v{version}.tar.gz"],
         release_date = "2020-11-05",
         use_category = ["dataplane_ext"],
         extensions = [
             "envoy.access_loggers.wasm",
             "envoy.bootstrap.wasm",
             "envoy.filters.http.wasm",
             "envoy.filters.network.wasm",
             "envoy.stat_sinks.wasm",
+            "envoy.wasm.runtime.v8",
+            "envoy.wasm.runtime.wavm",
+            "envoy.wasm.runtime.wasmtime",
         ],
         cpe = "N/A",
     ),
     com_github_wasm_c_api = dict(
         project_name = "wasm-c-api",
         project_desc = "WebAssembly C and C++ API",
         project_url = "https://github.com/WebAssembly/wasm-c-api",
         # this is the submodule's specific commit used by wasmtime
         # https://github.com/bytecodealliance/wasmtime/tree/v0.21.0/crates/c-api
         version = "d9a80099d496b5cdba6f3fe8fc77586e0e505ddc",
         sha256 = "aea8cd095e9937f1e14f2c93e026317b197eb2345e7a817fe3932062eb7b792c",
         strip_prefix = "wasm-c-api-{version}",
         urls = ["https://github.com/WebAssembly/wasm-c-api/archive/{version}.tar.gz"],
         release_date = "2019-11-14",
         use_category = ["dataplane_ext"],
         extensions = [
             "envoy.access_loggers.wasm",
             "envoy.bootstrap.wasm",
             "envoy.filters.http.wasm",
             "envoy.filters.network.wasm",
             "envoy.stat_sinks.wasm",
+            "envoy.wasm.runtime.v8",
+            "envoy.wasm.runtime.wavm",
+            "envoy.wasm.runtime.wasmtime",
         ],
         cpe = "N/A",
     ),
     io_opencensus_cpp = dict(
         project_name = "OpenCensus C++",
         project_desc = "OpenCensus tracing library",
         project_url = "https://github.com/census-instrumentation/opencensus-cpp",
         version = "ba631066779a534267fdb1321b19850eb2b0c000",
         sha256 = "f239a40803f6e2e42b57c9e68771b0990c4ca8b2d76b440073cdf14f4211ad26",
         strip_prefix = "opencensus-cpp-{version}",
         urls = ["https://github.com/census-instrumentation/opencensus-cpp/archive/{version}.tar.gz"],
         use_category = ["observability_ext"],
         extensions = ["envoy.tracers.opencensus"],
         release_date = "2020-10-08",
         cpe = "N/A",
     ),
     # This should be removed, see https://github.com/envoyproxy/envoy/issues/11816.
     com_github_curl = dict(
         project_name = "curl",
         project_desc = "Library for transferring data with URLs",
         project_url = "https://curl.haxx.se",
         version = "7.72.0",
         sha256 = "d4d5899a3868fbb6ae1856c3e55a32ce35913de3956d1973caccd37bd0174fa2",
         strip_prefix = "curl-{version}",
         urls = ["https://github.com/curl/curl/releases/download/curl-{underscore_version}/curl-{version}.tar.gz"],
         use_category = ["dataplane_ext", "observability_ext"],
         extensions = [
             "envoy.filters.http.aws_lambda",
             "envoy.filters.http.aws_request_signing",
             "envoy.grpc_credentials.aws_iam",
             "envoy.tracers.opencensus",
         ],
         release_date = "2020-08-19",
         cpe = "cpe:2.3:a:haxx:curl:*",
     ),
     com_googlesource_chromium_v8 = dict(
         project_name = "V8",
         project_desc = "Google’s open source high-performance JavaScript and WebAssembly engine, written in C++",
         project_url = "https://v8.dev",
         version = "8.7.220.10",
         # This archive was created using https://storage.googleapis.com/envoyproxy-wee8/wee8-archive.sh
         # and contains complete checkout of V8 with all dependencies necessary to build wee8.
         sha256 = "f22734640e0515bc34d1ca3772513aef24374fafa44d0489d3a9a57cadec69fb",
         urls = ["https://storage.googleapis.com/envoyproxy-wee8/wee8-{version}.tar.gz"],
         use_category = ["dataplane_ext"],
         extensions = [
             "envoy.access_loggers.wasm",
             "envoy.bootstrap.wasm",
             "envoy.filters.http.wasm",
             "envoy.filters.network.wasm",
             "envoy.stat_sinks.wasm",
+            "envoy.wasm.runtime.v8",
+            "envoy.wasm.runtime.wavm",
+            "envoy.wasm.runtime.wasmtime",
         ],
         release_date = "2020-10-27",
         cpe = "cpe:2.3:a:google:v8:*",
     ),
     com_googlesource_quiche = dict(
         project_name = "QUICHE",
         project_desc = "QUICHE (QUIC, HTTP/2, Etc) is Google‘s implementation of QUIC and related protocols",
         project_url = "https://quiche.googlesource.com/quiche",
         # Static snapshot of https://quiche.googlesource.com/quiche/+archive/ecc28c0d7428f3323ea26eb1ddb98a5e06b23dea.tar.gz
         version = "ecc28c0d7428f3323ea26eb1ddb98a5e06b23dea",
         sha256 = "52680dea984dbe899c27176155578b97276e1f1516b7c3a63fb16ba593061859",
         urls = ["https://storage.googleapis.com/quiche-envoy-integration/{version}.tar.gz"],
         use_category = ["dataplane_ext"],
         extensions = ["envoy.transport_sockets.quic"],
         release_date = "2020-11-10",
         cpe = "N/A",
     ),
     com_googlesource_googleurl = dict(
         project_name = "Chrome URL parsing library",
         project_desc = "Chrome URL parsing library",
         project_url = "https://quiche.googlesource.com/googleurl",
         # Static snapshot of https://quiche.googlesource.com/quiche/+archive/ef0d23689e240e6c8de4c3a5296b209128c87373.tar.gz.
         version = "ef0d23689e240e6c8de4c3a5296b209128c87373",
         sha256 = "d769283fed1319bca68bae8bdd47fbc3a7933999329eee850eff1f1ea61ce176",
         urls = ["https://storage.googleapis.com/quiche-envoy-integration/googleurl_{version}.tar.gz"],
         use_category = ["dataplane_ext"],
         extensions = [],
         release_date = "2020-07-30",
         cpe = "N/A",
     ),
     com_google_cel_cpp = dict(
         project_name = "Common Expression Language (CEL) C++ library",
         project_desc = "Common Expression Language (CEL) C++ library",
         project_url = "https://opensource.google/projects/cel",
         version = "47244a458e7739ad38e178a3f3892d197de4a574",
         sha256 = "51b1af23cb703a94d18fe7a5e2696f96cde5bc35a279c6c844e6363aea3982fb",
         strip_prefix = "cel-cpp-{version}",
         urls = ["https://github.com/google/cel-cpp/archive/{version}.tar.gz"],
         use_category = ["dataplane_ext"],
         extensions = [
             "envoy.access_loggers.wasm",
             "envoy.bootstrap.wasm",
             "envoy.filters.http.rbac",
             "envoy.filters.http.wasm",
             "envoy.filters.network.rbac",
             "envoy.filters.network.wasm",
             "envoy.stat_sinks.wasm",
+            "envoy.wasm.runtime.null",
+            "envoy.wasm.runtime.v8",
+            "envoy.wasm.runtime.wavm",
+            "envoy.wasm.runtime.wasmtime",
         ],
         release_date = "2020-10-25",
         cpe = "N/A",
     ),
     com_github_google_flatbuffers = dict(
         project_name = "FlatBuffers",
         project_desc = "Cross platform serialization library architected for maximum memory efficiency",
         project_url = "https://github.com/google/flatbuffers",
         version = "a83caf5910644ba1c421c002ef68e42f21c15f9f",
         sha256 = "b8efbc25721e76780752bad775a97c3f77a0250271e2db37fc747b20e8b0f24a",
         strip_prefix = "flatbuffers-{version}",
         urls = ["https://github.com/google/flatbuffers/archive/{version}.tar.gz"],
         use_category = ["dataplane_ext"],
         extensions = [
             "envoy.access_loggers.wasm",
             "envoy.bootstrap.wasm",
             "envoy.filters.http.wasm",
             "envoy.filters.network.wasm",
             "envoy.stat_sinks.wasm",
+            "envoy.wasm.runtime.null",
+            "envoy.wasm.runtime.v8",
+            "envoy.wasm.runtime.wavm",
+            "envoy.wasm.runtime.wasmtime",
         ],
         release_date = "2020-04-02",
         cpe = "N/A",
     ),
     com_googlesource_code_re2 = dict(
         project_name = "RE2",
         project_desc = "RE2, a regular expression library",
         project_url = "https://github.com/google/re2",
         version = "2020-07-06",
         sha256 = "2e9489a31ae007c81e90e8ec8a15d62d58a9c18d4fd1603f6441ef248556b41f",
         strip_prefix = "re2-{version}",
         urls = ["https://github.com/google/re2/archive/{version}.tar.gz"],
         use_category = ["controlplane", "dataplane_core"],
         release_date = "2020-07-06",
         cpe = "N/A",
     ),
     # Included to access FuzzedDataProvider.h. This is compiler agnostic but
     # provided as part of the compiler-rt source distribution. We can't use the
     # Clang variant as we are not a Clang-LLVM only shop today.
     org_llvm_releases_compiler_rt = dict(
         project_name = "compiler-rt",
         project_desc = "LLVM compiler runtime library",
         project_url = "https://compiler-rt.llvm.org",
         version = "10.0.0",
         sha256 = "6a7da64d3a0a7320577b68b9ca4933bdcab676e898b759850e827333c3282c75",
         # Only allow peeking at fuzzer related files for now.
         strip_prefix = "compiler-rt-{version}.src",
         urls = ["https://github.com/llvm/llvm-project/releases/download/llvmorg-{version}/compiler-rt-{version}.src.tar.xz"],
         release_date = "2020-03-23",
         use_category = ["test_only"],
     ),
     upb = dict(
         project_name = "upb",
         project_desc = "A small protobuf implementation in C (gRPC dependency)",
         project_url = "https://github.com/protocolbuffers/upb",
         version = "8a3ae1ef3e3e3f26b45dec735c5776737fc7247f",
         sha256 = "e9f281c56ab1eb1f97a80ca8a83bb7ef73d230eabb8591f83876f4e7b85d9b47",
         strip_prefix = "upb-{version}",
         urls = ["https://github.com/protocolbuffers/upb/archive/{version}.tar.gz"],
         use_category = ["controlplane"],
         release_date = "2019-11-19",
         cpe = "N/A",
     ),
     kafka_source = dict(
         project_name = "Kafka (source)",
         project_desc = "Open-source distributed event streaming platform",
         project_url = "https://kafka.apache.org",
         version = "2.4.1",
         sha256 = "740236f44d66e33ea83382383b4fb7eabdab7093a644b525dd5ec90207f933bd",
         strip_prefix = "kafka-{version}/clients/src/main/resources/common/message",
         urls = ["https://github.com/apache/kafka/archive/{version}.zip"],
         use_category = ["dataplane_ext"],
         extensions = ["envoy.filters.network.kafka_broker"],
         release_date = "2020-03-03",
         cpe = "cpe:2.3:a:apache:kafka:*",
     ),
     kafka_server_binary = dict(
         project_name = "Kafka (server binary)",
         project_desc = "Open-source distributed event streaming platform",
         project_url = "https://kafka.apache.org",
         version = "2.4.1",
         sha256 = "2177cbd14118999e1d76fec628ca78ace7e6f841219dbc6035027c796bbe1a2a",
         strip_prefix = "kafka_2.12-{version}",
         urls = ["https://mirrors.gigenet.com/apache/kafka/{version}/kafka_2.12-{version}.tgz"],
         release_date = "2020-03-12",
         use_category = ["test_only"],
     ),
     kafka_python_client = dict(
         project_name = "Kafka (Python client)",
         project_desc = "Open-source distributed event streaming platform",
         project_url = "https://kafka.apache.org",
         version = "2.0.1",
         sha256 = "05f7c6eecb402f11fcb7e524c903f1ba1c38d3bdc9bf42bc8ec3cf7567b9f979",
         strip_prefix = "kafka-python-{version}",
         urls = ["https://github.com/dpkp/kafka-python/archive/{version}.tar.gz"],
         release_date = "2020-02-20",
         use_category = ["test_only"],
     ),
     proxy_wasm_cpp_sdk = dict(
         project_name = "WebAssembly for Proxies (C++ SDK)",
         project_desc = "WebAssembly for Proxies (C++ SDK)",
         project_url = "https://github.com/proxy-wasm/proxy-wasm-cpp-sdk",
         version = "b5ff880ed13d93dde9faf53d0aa05b216cc60b86",
         sha256 = "17a16355e4556ed8858e4d0be37a5cdf1a0d9cb0e96b3b5b8a52cf22b48ad094",
         strip_prefix = "proxy-wasm-cpp-sdk-{version}",
         urls = ["https://github.com/proxy-wasm/proxy-wasm-cpp-sdk/archive/{version}.tar.gz"],
         use_category = ["dataplane_ext"],
         extensions = [
             "envoy.access_loggers.wasm",
             "envoy.bootstrap.wasm",
             "envoy.filters.http.wasm",
             "envoy.filters.network.wasm",
             "envoy.stat_sinks.wasm",
+            "envoy.wasm.runtime.null",
+            "envoy.wasm.runtime.v8",
+            "envoy.wasm.runtime.wavm",
+            "envoy.wasm.runtime.wasmtime",
         ],
         release_date = "2020-10-22",
         cpe = "N/A",
     ),
     proxy_wasm_cpp_host = dict(
         project_name = "WebAssembly for Proxies (C++ host implementation)",
         project_desc = "WebAssembly for Proxies (C++ host implementation)",
         project_url = "https://github.com/proxy-wasm/proxy-wasm-cpp-host",
         version = "15827110ac35fdac9abdb6b05d04ee7ee2044dae",
         sha256 = "77a2671205eb0973bee375a1bee4099edef991350433981f6e3508780318117d",
         strip_prefix = "proxy-wasm-cpp-host-{version}",
         urls = ["https://github.com/proxy-wasm/proxy-wasm-cpp-host/archive/{version}.tar.gz"],
         use_category = ["dataplane_ext"],
         extensions = [
             "envoy.access_loggers.wasm",
             "envoy.bootstrap.wasm",
             "envoy.filters.http.wasm",
             "envoy.filters.network.wasm",
             "envoy.stat_sinks.wasm",
+            "envoy.wasm.runtime.null",
+            "envoy.wasm.runtime.v8",
+            "envoy.wasm.runtime.wavm",
+            "envoy.wasm.runtime.wasmtime",
         ],
         release_date = "2020-11-12",
         cpe = "N/A",
     ),
     emscripten_toolchain = dict(
         project_name = "Emscripten SDK",
         project_desc = "Emscripten SDK (use by Wasm)",
         project_url = "https://github.com/emscripten-core/emsdk",
         version = "2.0.7",
         sha256 = "ce7a5c76e8b425aca874cea329fd9ac44b203b777053453b6a37b4496c5ce34f",
         strip_prefix = "emsdk-{version}",
         urls = ["https://github.com/emscripten-core/emsdk/archive/{version}.tar.gz"],
         use_category = ["build"],
         release_date = "2020-10-13",
     ),
     io_bazel_rules_rust = dict(
         project_name = "Bazel rust rules",
         project_desc = "Bazel rust rules (used by Wasm)",
         project_url = "https://github.com/bazelbuild/rules_rust",
         version = "7b8219a1955ebd599c275bd292d8153e5616d6a4",
         sha256 = "426a7712af597d90301dcc29e63d62de5c2e09fb347692e89abb775ec97c74fe",
         strip_prefix = "rules_rust-{version}",
         urls = ["https://github.com/bazelbuild/rules_rust/archive/{version}.tar.gz"],
         use_category = ["dataplane_ext"],
         extensions = [
             "envoy.access_loggers.wasm",
             "envoy.bootstrap.wasm",
             "envoy.filters.http.wasm",
             "envoy.filters.network.wasm",
             "envoy.stat_sinks.wasm",
+            "envoy.wasm.runtime.null",
+            "envoy.wasm.runtime.v8",
+            "envoy.wasm.runtime.wavm",
+            "envoy.wasm.runtime.wasmtime",
         ],
         release_date = "2020-10-21",
         cpe = "N/A",
     ),
     rules_antlr = dict(
         project_name = "ANTLR Rules for Bazel",
         project_desc = "Bazel rules for ANTLR",
         project_url = "https://github.com/marcohu/rules_antlr",
         version = "3cc2f9502a54ceb7b79b37383316b23c4da66f9a",
         sha256 = "7249d1569293d9b239e23c65f6b4c81a07da921738bde0dfeb231ed98be40429",
         strip_prefix = "rules_antlr-{version}",
         urls = ["https://github.com/marcohu/rules_antlr/archive/{version}.tar.gz"],
         # ANTLR has a runtime component, so is not purely build.
         use_category = ["dataplane_ext"],
         extensions = [
             "envoy.access_loggers.wasm",
             "envoy.bootstrap.wasm",
             "envoy.filters.http.wasm",
             "envoy.filters.network.wasm",
             "envoy.stat_sinks.wasm",
+            "envoy.wasm.runtime.v8",
+            "envoy.wasm.runtime.wavm",
+            "envoy.wasm.runtime.wasmtime",
         ],
         release_date = "2019-06-21",
         cpe = "N/A",
     ),
     antlr4_runtimes = dict(
         project_name = "ANTLR v4",
         project_desc = "ANTLR (ANother Tool for Language Recognition) is a powerful parser generator for reading, processing, executing, or translating structured text or binary files",
         project_url = "https://github.com/antlr/antlr4",
         version = "4.7.2",
         sha256 = "46f5e1af5f4bd28ade55cb632f9a069656b31fc8c2408f9aa045f9b5f5caad64",
         strip_prefix = "antlr4-{version}",
         urls = ["https://github.com/antlr/antlr4/archive/{version}.tar.gz"],
         use_category = ["dataplane_ext"],
         extensions = [
             "envoy.access_loggers.wasm",
             "envoy.bootstrap.wasm",
             "envoy.filters.http.wasm",
             "envoy.filters.network.wasm",
             "envoy.stat_sinks.wasm",
+            "envoy.wasm.runtime.v8",
+            "envoy.wasm.runtime.wavm",
+            "envoy.wasm.runtime.wasmtime",
         ],
         release_date = "2018-12-18",
         cpe = "N/A",
     ),
 )
diff --git a/generated_api_shadow/envoy/extensions/wasm/v3/wasm.proto b/generated_api_shadow/envoy/extensions/wasm/v3/wasm.proto
index b42fb75a0b..c6affb8106 100644
--- a/generated_api_shadow/envoy/extensions/wasm/v3/wasm.proto
+++ b/generated_api_shadow/envoy/extensions/wasm/v3/wasm.proto
@@ -21,35 +21,57 @@ option (udpa.annotations.file_status).package_version_status = ACTIVE;
 // Configuration for a Wasm VM.
 // [#next-free-field: 7]
 message VmConfig {
   // An ID which will be used along with a hash of the wasm code (or the name of the registered Null
   // VM plugin) to determine which VM will be used for the plugin. All plugins which use the same
   // *vm_id* and code will use the same VM. May be left blank. Sharing a VM between plugins can
   // reduce memory utilization and make sharing of data easier which may have security implications.
   // See ref: "TODO: add ref" for details.
   string vm_id = 1;
 
-  // The Wasm runtime type (either "v8" or "null" for code compiled into Envoy).
+  // The Wasm runtime type.
+  // Available Wasm runtime types are registered as extensions. The following runtimes are included
+  // in Envoy code base:
+  //
+  // .. _extension_envoy.wasm.runtime.null:
+  //
+  // **envoy.wasm.runtime.null**: Null sandbox, the Wasm module must be compiled and linked into the
+  // Envoy binary. The registered name is given in the *code* field as *inline_string*.
+  //
+  // .. _extension_envoy.wasm.runtime.v8:
+  //
+  // **envoy.wasm.runtime.v8**: `V8 <https://v8.dev/>`_-based WebAssembly runtime.
+  //
+  // .. _extension_envoy.wasm.runtime.wavm:
+  //
+  // **envoy.wasm.runtime.wavm**: `WAVM <https://wavm.github.io/>`_-based WebAssembly runtime.
+  // This runtime is not enabled in the official build.
+  //
+  // .. _extension_envoy.wasm.runtime.wasmtime:
+  //
+  // **envoy.wasm.runtime.wasmtime**: `Wasmtime <https://wasmtime.dev/>`_-based WebAssembly runtime.
+  // This runtime is not enabled in the official build.
+  //
   string runtime = 2 [(validate.rules).string = {min_len: 1}];
 
   // The Wasm code that Envoy will execute.
   config.core.v3.AsyncDataSource code = 3;
 
   // The Wasm configuration used in initialization of a new VM
   // (proxy_on_start). `google.protobuf.Struct` is serialized as JSON before
   // passing it to the plugin. `google.protobuf.BytesValue` and
   // `google.protobuf.StringValue` are passed directly without the wrapper.
   google.protobuf.Any configuration = 4;
 
   // Allow the wasm file to include pre-compiled code on VMs which support it.
   // Warning: this should only be enable for trusted sources as the precompiled code is not
   // verified.
   bool allow_precompiled = 5;
 
   // If true and the code needs to be remotely fetched and it is not in the cache then NACK the configuration
   // update and do a background fetch to fill the cache, otherwise fetch the code asynchronously and enter
   // warming state.
   bool nack_on_code_cache_miss = 6;
 }
 
 // Base Configuration for Wasm Plugins e.g. filters and services.
 // [#next-free-field: 6]
diff --git a/source/extensions/common/wasm/BUILD b/source/extensions/common/wasm/BUILD
index e2a03e72fc..2cbdfdc069 100644
--- a/source/extensions/common/wasm/BUILD
+++ b/source/extensions/common/wasm/BUILD
@@ -11,11 +11,21 @@ envoy_extension_package()
 envoy_cc_library(
     name = "well_known_names",
     hdrs = ["well_known_names.h"],
     deps = [
         "//source/common/singleton:const_singleton",
     ],
 )
 
+envoy_cc_library(
+    name = "wasm_runtime_factory_interface",
+    hdrs = [
+        "wasm_runtime_factory.h",
+    ],
+    deps = [
+        ":wasm_hdr",
+    ],
+)
+
 # NB: Used to break the circular dependency between wasm_lib and null_plugin_lib.
 envoy_cc_library(
     name = "wasm_hdr",
@@ -70,50 +80,51 @@ envoy_cc_library(
 envoy_cc_library(
     name = "wasm_lib",
     srcs = [
         "context.cc",
         "foreign.cc",
         "wasm.cc",
         "wasm_extension.cc",
         "wasm_vm.cc",
     ],
     copts = select({
         "//bazel:windows_x86_64": [],  # TODO: fix the windows ANTLR build
         "//conditions:default": [
             "-DWASM_USE_CEL_PARSER",
         ],
     }),
     visibility = ["//visibility:public"],
     deps = [
         ":wasm_hdr",
         ":wasm_interoperation_lib",
+        ":wasm_runtime_factory_interface",
         "//external:abseil_base",
         "//external:abseil_node_hash_map",
         "//include/envoy/server:lifecycle_notifier_interface",
         "//source/common/buffer:buffer_lib",
         "//source/common/common:enum_to_int",
         "//source/common/config:remote_data_fetcher_lib",
         "//source/common/http:message_lib",
         "//source/common/http:utility_lib",
         "//source/common/tracing:http_tracer_lib",
         "//source/extensions/common/wasm/ext:declare_property_cc_proto",
         "//source/extensions/common/wasm/ext:envoy_null_vm_wasm_api",
         "//source/extensions/filters/common/expr:context_lib",
         "@com_google_cel_cpp//eval/public/containers:field_access",
         "@com_google_cel_cpp//eval/public/containers:field_backed_list_impl",
         "@com_google_cel_cpp//eval/public/containers:field_backed_map_impl",
         "@com_google_cel_cpp//eval/public/structs:cel_proto_wrapper",
         "@com_google_cel_cpp//eval/public:builtin_func_registrar",
         "@com_google_cel_cpp//eval/public:cel_expr_builder_factory",
         "@com_google_cel_cpp//eval/public:cel_value",
         "@com_google_cel_cpp//eval/public:value_export_util",
         "@envoy_api//envoy/extensions/wasm/v3:pkg_cc_proto",
         "@proxy_wasm_cpp_host//:lib",
     ] + select(
         {
             "//bazel:windows_x86_64": [],
             "//conditions:default": [
                 "@com_google_cel_cpp//parser",
             ],
         },
     ),
 )
diff --git a/source/extensions/common/wasm/wasm_runtime_factory.h b/source/extensions/common/wasm/wasm_runtime_factory.h
new file mode 100644
index 0000000000..de00551b44
--- /dev/null
+++ b/source/extensions/common/wasm/wasm_runtime_factory.h
@@ -0,0 +1,26 @@
+#pragma once
+
+#include <string_view>
+
+#include "extensions/common/wasm/wasm_vm.h"
+
+namespace Envoy {
+namespace Extensions {
+namespace Common {
+namespace Wasm {
+
+class WasmRuntimeFactory {
+public:
+  virtual ~WasmRuntimeFactory() = default;
+  virtual WasmVmPtr createWasmVm() PURE;
+
+  virtual absl::string_view name() PURE;
+  virtual absl::string_view shortName() PURE;
+
+  std::string category() { return "envoy.wasm.runtime"; }
+};
+
+} // namespace Wasm
+} // namespace Common
+} // namespace Extensions
+} // namespace Envoy
diff --git a/source/extensions/common/wasm/wasm_vm.cc b/source/extensions/common/wasm/wasm_vm.cc
index 5b482e6bb8..b7b8ec0c67 100644
--- a/source/extensions/common/wasm/wasm_vm.cc
+++ b/source/extensions/common/wasm/wasm_vm.cc
@@ -1,26 +1,16 @@
 #include "extensions/common/wasm/wasm_vm.h"
 
 #include <algorithm>
 #include <memory>
 
 #include "extensions/common/wasm/context.h"
 #include "extensions/common/wasm/ext/envoy_null_vm_wasm_api.h"
 #include "extensions/common/wasm/wasm_extension.h"
+#include "extensions/common/wasm/wasm_runtime_factory.h"
 #include "extensions/common/wasm/well_known_names.h"
 
-#include "include/proxy-wasm/null.h"
 #include "include/proxy-wasm/null_plugin.h"
 
-#if defined(ENVOY_WASM_V8)
-#include "include/proxy-wasm/v8.h"
-#endif
-#if defined(ENVOY_WASM_WAVM)
-#include "include/proxy-wasm/wavm.h"
-#endif
-#if defined(ENVOY_WASM_WASMTIME)
-#include "include/proxy-wasm/wasmtime.h"
-#endif
-
 using ContextBase = proxy_wasm::ContextBase;
 using Word = proxy_wasm::Word;
 
@@ -68,41 +58,26 @@ bool EnvoyWasmVmIntegration::getNullVmFunction(absl::string_view function_name,
 WasmVmPtr createWasmVm(absl::string_view runtime, const Stats::ScopeSharedPtr& scope) {
   if (runtime.empty()) {
     ENVOY_LOG_TO_LOGGER(Envoy::Logger::Registry::getLog(Envoy::Logger::Id::wasm), warn,
                         "Failed to create Wasm VM with unspecified runtime");
     return nullptr;
-  } else if (runtime == WasmRuntimeNames::get().Null) {
-    auto wasm = proxy_wasm::createNullVm();
-    wasm->integration() = getWasmExtension()->createEnvoyWasmVmIntegration(scope, runtime, "null");
-    return wasm;
-#if defined(ENVOY_WASM_V8)
-  } else if (runtime == WasmRuntimeNames::get().V8) {
-    auto wasm = proxy_wasm::createV8Vm();
-    wasm->integration() = getWasmExtension()->createEnvoyWasmVmIntegration(scope, runtime, "v8");
-    return wasm;
-#endif
-#if defined(ENVOY_WASM_WAVM)
-  } else if (runtime == WasmRuntimeNames::get().Wavm) {
-    auto wasm = proxy_wasm::createWavmVm();
-    wasm->integration() = getWasmExtension()->createEnvoyWasmVmIntegration(scope, runtime, "wavm");
-    return wasm;
-#endif
-#if defined(ENVOY_WASM_WASMTIME)
-  } else if (runtime == WasmRuntimeNames::get().Wasmtime) {
-    auto wasm = proxy_wasm::createWasmtimeVm();
-    wasm->integration() =
-        getWasmExtension()->createEnvoyWasmVmIntegration(scope, runtime, "wasmtime");
-    return wasm;
-#endif
-  } else {
+  }
+
+  auto runtime_factory = Registry::FactoryRegistry<WasmRuntimeFactory>::getFactory(runtime);
+  if (runtime_factory == nullptr) {
     ENVOY_LOG_TO_LOGGER(
         Envoy::Logger::Registry::getLog(Envoy::Logger::Id::wasm), warn,
         "Failed to create Wasm VM using {} runtime. Envoy was compiled without support for it",
         runtime);
     return nullptr;
   }
+
+  auto wasm = runtime_factory->createWasmVm();
+  wasm->integration() = getWasmExtension()->createEnvoyWasmVmIntegration(
+      scope, runtime_factory->name(), runtime_factory->shortName());
+  return wasm;
 }
 
 } // namespace Wasm
 } // namespace Common
 } // namespace Extensions
 } // namespace Envoy
diff --git a/source/extensions/extensions_build_config.bzl b/source/extensions/extensions_build_config.bzl
index 664b561fb0..8a48fb6782 100644
--- a/source/extensions/extensions_build_config.bzl
+++ b/source/extensions/extensions_build_config.bzl
@@ -1,222 +1,231 @@
 # See bazel/README.md for details on how this system works.
 EXTENSIONS = {
     #
     # Access loggers
     #
 
     "envoy.access_loggers.file":                        "//source/extensions/access_loggers/file:config",
     "envoy.access_loggers.http_grpc":                   "//source/extensions/access_loggers/grpc:http_config",
     "envoy.access_loggers.tcp_grpc":                    "//source/extensions/access_loggers/grpc:tcp_config",
     "envoy.access_loggers.wasm":                        "//source/extensions/access_loggers/wasm:config",
 
     #
     # Clusters
     #
 
     "envoy.clusters.aggregate":                         "//source/extensions/clusters/aggregate:cluster",
     "envoy.clusters.dynamic_forward_proxy":             "//source/extensions/clusters/dynamic_forward_proxy:cluster",
     "envoy.clusters.redis":                             "//source/extensions/clusters/redis:redis_cluster",
 
     #
     # Compression
     #
 
     "envoy.compression.gzip.compressor":                "//source/extensions/compression/gzip/compressor:config",
     "envoy.compression.gzip.decompressor":              "//source/extensions/compression/gzip/decompressor:config",
 
     #
     # gRPC Credentials Plugins
     #
 
     "envoy.grpc_credentials.file_based_metadata":       "//source/extensions/grpc_credentials/file_based_metadata:config",
     "envoy.grpc_credentials.aws_iam":                   "//source/extensions/grpc_credentials/aws_iam:config",
 
     #
     # WASM
     #
     "envoy.bootstrap.wasm":                             "//source/extensions/bootstrap/wasm:config",
 
     #
     # Health checkers
     #
 
     "envoy.health_checkers.redis":                      "//source/extensions/health_checkers/redis:config",
 
     #
     # HTTP filters
     #
 
     "envoy.filters.http.adaptive_concurrency":          "//source/extensions/filters/http/adaptive_concurrency:config",
     "envoy.filters.http.admission_control":             "//source/extensions/filters/http/admission_control:config",
     "envoy.filters.http.aws_lambda":                    "//source/extensions/filters/http/aws_lambda:config",
     "envoy.filters.http.aws_request_signing":           "//source/extensions/filters/http/aws_request_signing:config",
     "envoy.filters.http.buffer":                        "//source/extensions/filters/http/buffer:config",
     "envoy.filters.http.cache":                         "//source/extensions/filters/http/cache:config",
     "envoy.filters.http.cdn_loop":                      "//source/extensions/filters/http/cdn_loop:config",
     "envoy.filters.http.compressor":                    "//source/extensions/filters/http/compressor:config",
     "envoy.filters.http.cors":                          "//source/extensions/filters/http/cors:config",
     "envoy.filters.http.csrf":                          "//source/extensions/filters/http/csrf:config",
     "envoy.filters.http.decompressor":                  "//source/extensions/filters/http/decompressor:config",
     "envoy.filters.http.dynamic_forward_proxy":         "//source/extensions/filters/http/dynamic_forward_proxy:config",
     "envoy.filters.http.dynamo":                        "//source/extensions/filters/http/dynamo:config",
     "envoy.filters.http.ext_authz":                     "//source/extensions/filters/http/ext_authz:config",
     "envoy.filters.http.fault":                         "//source/extensions/filters/http/fault:config",
     "envoy.filters.http.grpc_http1_bridge":             "//source/extensions/filters/http/grpc_http1_bridge:config",
     "envoy.filters.http.grpc_http1_reverse_bridge":     "//source/extensions/filters/http/grpc_http1_reverse_bridge:config",
     "envoy.filters.http.grpc_json_transcoder":          "//source/extensions/filters/http/grpc_json_transcoder:config",
     "envoy.filters.http.grpc_stats":                    "//source/extensions/filters/http/grpc_stats:config",
     "envoy.filters.http.grpc_web":                      "//source/extensions/filters/http/grpc_web:config",
     "envoy.filters.http.gzip":                          "//source/extensions/filters/http/gzip:config",
     "envoy.filters.http.header_to_metadata":            "//source/extensions/filters/http/header_to_metadata:config",
     "envoy.filters.http.health_check":                  "//source/extensions/filters/http/health_check:config",
     "envoy.filters.http.ip_tagging":                    "//source/extensions/filters/http/ip_tagging:config",
     "envoy.filters.http.jwt_authn":                     "//source/extensions/filters/http/jwt_authn:config",
     "envoy.filters.http.local_ratelimit":               "//source/extensions/filters/http/local_ratelimit:config",
     "envoy.filters.http.lua":                           "//source/extensions/filters/http/lua:config",
     "envoy.filters.http.oauth2":                         "//source/extensions/filters/http/oauth2:config",
     "envoy.filters.http.on_demand":                     "//source/extensions/filters/http/on_demand:config",
     "envoy.filters.http.original_src":                  "//source/extensions/filters/http/original_src:config",
     "envoy.filters.http.ratelimit":                     "//source/extensions/filters/http/ratelimit:config",
     "envoy.filters.http.rbac":                          "//source/extensions/filters/http/rbac:config",
     "envoy.filters.http.router":                        "//source/extensions/filters/http/router:config",
     "envoy.filters.http.squash":                        "//source/extensions/filters/http/squash:config",
     "envoy.filters.http.tap":                           "//source/extensions/filters/http/tap:config",
     "envoy.filters.http.wasm":                          "//source/extensions/filters/http/wasm:config",
 
     #
     # Listener filters
     #
 
     "envoy.filters.listener.http_inspector":            "//source/extensions/filters/listener/http_inspector:config",
     # NOTE: The original_dst filter is implicitly loaded if original_dst functionality is
     #       configured on the listener. Do not remove it in that case or configs will fail to load.
     "envoy.filters.listener.original_dst":              "//source/extensions/filters/listener/original_dst:config",
     "envoy.filters.listener.original_src":              "//source/extensions/filters/listener/original_src:config",
     # NOTE: The proxy_protocol filter is implicitly loaded if proxy_protocol functionality is
     #       configured on the listener. Do not remove it in that case or configs will fail to load.
     "envoy.filters.listener.proxy_protocol":            "//source/extensions/filters/listener/proxy_protocol:config",
     "envoy.filters.listener.tls_inspector":             "//source/extensions/filters/listener/tls_inspector:config",
 
     #
     # Network filters
     #
 
     "envoy.filters.network.client_ssl_auth":            "//source/extensions/filters/network/client_ssl_auth:config",
     "envoy.filters.network.direct_response":            "//source/extensions/filters/network/direct_response:config",
     "envoy.filters.network.dubbo_proxy":                "//source/extensions/filters/network/dubbo_proxy:config",
     "envoy.filters.network.echo":                       "//source/extensions/filters/network/echo:config",
     "envoy.filters.network.ext_authz":                  "//source/extensions/filters/network/ext_authz:config",
     "envoy.filters.network.http_connection_manager":    "//source/extensions/filters/network/http_connection_manager:config",
     # WiP
     "envoy.filters.network.kafka_broker":               "//source/extensions/filters/network/kafka:kafka_broker_config_lib",
     "envoy.filters.network.local_ratelimit":            "//source/extensions/filters/network/local_ratelimit:config",
     "envoy.filters.network.mongo_proxy":                "//source/extensions/filters/network/mongo_proxy:config",
     "envoy.filters.network.mysql_proxy":                "//source/extensions/filters/network/mysql_proxy:config",
     "envoy.filters.network.postgres_proxy":             "//source/extensions/filters/network/postgres_proxy:config",
     "envoy.filters.network.ratelimit":                  "//source/extensions/filters/network/ratelimit:config",
     "envoy.filters.network.rbac":                       "//source/extensions/filters/network/rbac:config",
     "envoy.filters.network.redis_proxy":                "//source/extensions/filters/network/redis_proxy:config",
     "envoy.filters.network.rocketmq_proxy":             "//source/extensions/filters/network/rocketmq_proxy:config",
     "envoy.filters.network.tcp_proxy":                  "//source/extensions/filters/network/tcp_proxy:config",
     "envoy.filters.network.thrift_proxy":               "//source/extensions/filters/network/thrift_proxy:config",
     "envoy.filters.network.sni_cluster":                "//source/extensions/filters/network/sni_cluster:config",
     "envoy.filters.network.sni_dynamic_forward_proxy":  "//source/extensions/filters/network/sni_dynamic_forward_proxy:config",
     "envoy.filters.network.wasm":                       "//source/extensions/filters/network/wasm:config",
     "envoy.filters.network.zookeeper_proxy":            "//source/extensions/filters/network/zookeeper_proxy:config",
 
     #
     # UDP filters
     #
 
     "envoy.filters.udp_listener.dns_filter":            "//source/extensions/filters/udp/dns_filter:config",
     "envoy.filters.udp_listener.udp_proxy":             "//source/extensions/filters/udp/udp_proxy:config",
 
     #
     # Resource monitors
     #
 
     "envoy.resource_monitors.fixed_heap":               "//source/extensions/resource_monitors/fixed_heap:config",
     "envoy.resource_monitors.injected_resource":        "//source/extensions/resource_monitors/injected_resource:config",
 
     #
     # Stat sinks
     #
 
     "envoy.stat_sinks.dog_statsd":                      "//source/extensions/stat_sinks/dog_statsd:config",
     "envoy.stat_sinks.hystrix":                         "//source/extensions/stat_sinks/hystrix:config",
     "envoy.stat_sinks.metrics_service":                 "//source/extensions/stat_sinks/metrics_service:config",
     "envoy.stat_sinks.statsd":                          "//source/extensions/stat_sinks/statsd:config",
     "envoy.stat_sinks.wasm":                            "//source/extensions/stat_sinks/wasm:config",
 
     #
     # Thrift filters
     #
 
     "envoy.filters.thrift.router":                      "//source/extensions/filters/network/thrift_proxy/router:config",
     "envoy.filters.thrift.ratelimit":                   "//source/extensions/filters/network/thrift_proxy/filters/ratelimit:config",
 
     #
     # Tracers
     #
 
     "envoy.tracers.dynamic_ot":                         "//source/extensions/tracers/dynamic_ot:config",
     "envoy.tracers.lightstep":                          "//source/extensions/tracers/lightstep:config",
     "envoy.tracers.datadog":                            "//source/extensions/tracers/datadog:config",
     "envoy.tracers.zipkin":                             "//source/extensions/tracers/zipkin:config",
     "envoy.tracers.opencensus":                         "//source/extensions/tracers/opencensus:config",
     # WiP
     "envoy.tracers.xray":                               "//source/extensions/tracers/xray:config",
     "envoy.tracers.skywalking":                         "//source/extensions/tracers/skywalking:config",
 
     #
     # Transport sockets
     #
 
     "envoy.transport_sockets.alts":                     "//source/extensions/transport_sockets/alts:config",
     "envoy.transport_sockets.upstream_proxy_protocol":  "//source/extensions/transport_sockets/proxy_protocol:upstream_config",
     "envoy.transport_sockets.raw_buffer":               "//source/extensions/transport_sockets/raw_buffer:config",
     "envoy.transport_sockets.tap":                      "//source/extensions/transport_sockets/tap:config",
     "envoy.transport_sockets.quic":                     "//source/extensions/quic_listeners/quiche:quic_factory_lib",
 
     #
     # Retry host predicates
     #
 
     "envoy.retry_host_predicates.previous_hosts":       "//source/extensions/retry/host/previous_hosts:config",
     "envoy.retry_host_predicates.omit_canary_hosts":    "//source/extensions/retry/host/omit_canary_hosts:config",
     "envoy.retry_host_predicates.omit_host_metadata":   "//source/extensions/retry/host/omit_host_metadata:config",
 
     #
     # Retry priorities
     #
 
     "envoy.retry_priorities.previous_priorities":       "//source/extensions/retry/priority/previous_priorities:config",
 
     #
     # CacheFilter plugins
     #
 
     "envoy.filters.http.cache.simple_http_cache":       "//source/extensions/filters/http/cache/simple_http_cache:simple_http_cache_lib",
 
     #
     # Internal redirect predicates
     #
     "envoy.internal_redirect_predicates.allow_listed_routes": "//source/extensions/internal_redirect/allow_listed_routes:config",
     "envoy.internal_redirect_predicates.previous_routes":     "//source/extensions/internal_redirect/previous_routes:config",
     "envoy.internal_redirect_predicates.safe_cross_scheme":   "//source/extensions/internal_redirect/safe_cross_scheme:config",
 
     #
     # Http Upstreams (excepting envoy.upstreams.http.generic which is hard-coded into the build so not registered here)
     #
     "envoy.upstreams.http.http":                        "//source/extensions/upstreams/http/http:config",
     "envoy.upstreams.http.tcp":                         "//source/extensions/upstreams/http/tcp:config",
 
     #
     # Watchdog actions
     #
+
     "envoy.watchdog.profile_action":                    "//source/extensions/watchdog/profile_action:config",
 
+    #
+    # WebAssembly runtimes
+    #
+
+    "envoy.wasm.runtime.null":                          "//source/extensions/wasm_runtime/null:config",
+    "envoy.wasm.runtime.v8":                            "//source/extensions/wasm_runtime/v8:config",
+    "envoy.wasm.runtime.wavm":                          "//source/extensions/wasm_runtime/wavm:config",
+    "envoy.wasm.runtime.wasmtime":                      "//source/extensions/wasm_runtime/wasmtime:config",
 }
 
 # These can be changed to ["//visibility:public"], for  downstream builds which
 # need to directly reference Envoy extensions.
diff --git a/source/extensions/wasm_runtime/null/BUILD b/source/extensions/wasm_runtime/null/BUILD
new file mode 100644
index 0000000000..fce183d760
--- /dev/null
+++ b/source/extensions/wasm_runtime/null/BUILD
@@ -0,0 +1,21 @@
+load(
+    "//bazel:envoy_build_system.bzl",
+    "envoy_cc_extension",
+    "envoy_extension_package",
+)
+
+licenses(["notice"])  # Apache 2
+
+envoy_extension_package()
+
+envoy_cc_extension(
+    name = "config",
+    srcs = ["config.cc"],
+    security_posture = "unknown",
+    status = "alpha",
+    deps = [
+        "//include/envoy/registry",
+        "//source/extensions/common/wasm:wasm_hdr",
+        "//source/extensions/common/wasm:wasm_runtime_factory_interface",
+    ],
+)
diff --git a/source/extensions/wasm_runtime/null/config.cc b/source/extensions/wasm_runtime/null/config.cc
new file mode 100644
index 0000000000..3515c9462c
--- /dev/null
+++ b/source/extensions/wasm_runtime/null/config.cc
@@ -0,0 +1,25 @@
+#include "envoy/registry/registry.h"
+
+#include "extensions/common/wasm/wasm_runtime_factory.h"
+
+#include "include/proxy-wasm/null.h"
+
+namespace Envoy {
+namespace Extensions {
+namespace Common {
+namespace Wasm {
+
+class NullRuntimeFactory : public WasmRuntimeFactory {
+public:
+  WasmVmPtr createWasmVm() override { return proxy_wasm::createNullVm(); }
+
+  absl::string_view name() override { return "envoy.wasm.runtime.null"; }
+  absl::string_view shortName() override { return "null"; }
+};
+
+REGISTER_FACTORY(NullRuntimeFactory, WasmRuntimeFactory);
+
+} // namespace Wasm
+} // namespace Common
+} // namespace Extensions
+} // namespace Envoy
diff --git a/source/extensions/wasm_runtime/v8/BUILD b/source/extensions/wasm_runtime/v8/BUILD
new file mode 100644
index 0000000000..55d14af61a
--- /dev/null
+++ b/source/extensions/wasm_runtime/v8/BUILD
@@ -0,0 +1,20 @@
+load(
+    "//bazel:envoy_build_system.bzl",
+    "envoy_cc_extension",
+    "envoy_extension_package",
+)
+
+licenses(["notice"])  # Apache 2
+
+envoy_extension_package()
+
+envoy_cc_extension(
+    name = "config",
+    srcs = ["config.cc"],
+    security_posture = "unknown",
+    status = "alpha",
+    deps = [
+        "//include/envoy/registry",
+        "//source/extensions/common/wasm:wasm_lib",
+    ],
+)
diff --git a/source/extensions/wasm_runtime/v8/config.cc b/source/extensions/wasm_runtime/v8/config.cc
new file mode 100644
index 0000000000..1061b17b2b
--- /dev/null
+++ b/source/extensions/wasm_runtime/v8/config.cc
@@ -0,0 +1,27 @@
+#include "envoy/registry/registry.h"
+
+#include "extensions/common/wasm/wasm_runtime_factory.h"
+
+#include "include/proxy-wasm/v8.h"
+
+namespace Envoy {
+namespace Extensions {
+namespace Common {
+namespace Wasm {
+
+class V8RuntimeFactory : public WasmRuntimeFactory {
+public:
+  WasmVmPtr createWasmVm() override { return proxy_wasm::createV8Vm(); }
+
+  absl::string_view name() override { return "envoy.wasm.runtime.v8"; }
+  absl::string_view shortName() override { return "v8"; }
+};
+
+#if defined(ENVOY_WASM_V8)
+REGISTER_FACTORY(V8RuntimeFactory, WasmRuntimeFactory);
+#endif
+
+} // namespace Wasm
+} // namespace Common
+} // namespace Extensions
+} // namespace Envoy
diff --git a/source/extensions/wasm_runtime/wasmtime/BUILD b/source/extensions/wasm_runtime/wasmtime/BUILD
new file mode 100644
index 0000000000..55d14af61a
--- /dev/null
+++ b/source/extensions/wasm_runtime/wasmtime/BUILD
@@ -0,0 +1,20 @@
+load(
+    "//bazel:envoy_build_system.bzl",
+    "envoy_cc_extension",
+    "envoy_extension_package",
+)
+
+licenses(["notice"])  # Apache 2
+
+envoy_extension_package()
+
+envoy_cc_extension(
+    name = "config",
+    srcs = ["config.cc"],
+    security_posture = "unknown",
+    status = "alpha",
+    deps = [
+        "//include/envoy/registry",
+        "//source/extensions/common/wasm:wasm_lib",
+    ],
+)
diff --git a/source/extensions/wasm_runtime/wasmtime/config.cc b/source/extensions/wasm_runtime/wasmtime/config.cc
new file mode 100644
index 0000000000..a407d847bd
--- /dev/null
+++ b/source/extensions/wasm_runtime/wasmtime/config.cc
@@ -0,0 +1,27 @@
+#include "envoy/registry/registry.h"
+
+#include "extensions/common/wasm/wasm_runtime_factory.h"
+
+#include "include/proxy-wasm/wasmtime.h"
+
+namespace Envoy {
+namespace Extensions {
+namespace Common {
+namespace Wasm {
+
+class WasmtimeRuntimeFactory : public WasmRuntimeFactory {
+public:
+  WasmVmPtr createWasmVm() override { return proxy_wasm::createWasmtimeVm(); }
+
+  absl::string_view name() override { return "envoy.wasm.runtime.wasmtime"; }
+  absl::string_view shortName() override { return "wasmtime"; }
+};
+
+#if defined(ENVOY_WASM_WASMTIME)
+REGISTER_FACTORY(WasmtimeRuntimeFactory, WasmRuntimeFactory);
+#endif
+
+} // namespace Wasm
+} // namespace Common
+} // namespace Extensions
+} // namespace Envoy
diff --git a/source/extensions/wasm_runtime/wavm/BUILD b/source/extensions/wasm_runtime/wavm/BUILD
new file mode 100644
index 0000000000..55d14af61a
--- /dev/null
+++ b/source/extensions/wasm_runtime/wavm/BUILD
@@ -0,0 +1,20 @@
+load(
+    "//bazel:envoy_build_system.bzl",
+    "envoy_cc_extension",
+    "envoy_extension_package",
+)
+
+licenses(["notice"])  # Apache 2
+
+envoy_extension_package()
+
+envoy_cc_extension(
+    name = "config",
+    srcs = ["config.cc"],
+    security_posture = "unknown",
+    status = "alpha",
+    deps = [
+        "//include/envoy/registry",
+        "//source/extensions/common/wasm:wasm_lib",
+    ],
+)
diff --git a/source/extensions/wasm_runtime/wavm/config.cc b/source/extensions/wasm_runtime/wavm/config.cc
new file mode 100644
index 0000000000..d50119cf78
--- /dev/null
+++ b/source/extensions/wasm_runtime/wavm/config.cc
@@ -0,0 +1,27 @@
+#include "envoy/registry/registry.h"
+
+#include "extensions/common/wasm/wasm_runtime_factory.h"
+
+#include "include/proxy-wasm/wavm.h"
+
+namespace Envoy {
+namespace Extensions {
+namespace Common {
+namespace Wasm {
+
+class WavmRuntimeFactory : public WasmRuntimeFactory {
+public:
+  WasmVmPtr createWasmVm() override { return proxy_wasm::createWavmVm(); }
+
+  absl::string_view name() override { return "envoy.wasm.runtime.wavm"; }
+  absl::string_view shortName() override { return "wavm"; }
+};
+
+#if defined(ENVOY_WASM_WAVM)
+REGISTER_FACTORY(WavmRuntimeFactory, WasmRuntimeFactory);
+#endif
+
+} // namespace Wasm
+} // namespace Common
+} // namespace Extensions
+} // namespace Envoy
diff --git a/test/extensions/access_loggers/wasm/BUILD b/test/extensions/access_loggers/wasm/BUILD
index 54ab90482a..fc56bc9b7c 100644
--- a/test/extensions/access_loggers/wasm/BUILD
+++ b/test/extensions/access_loggers/wasm/BUILD
@@ -18,16 +18,17 @@ envoy_package()
 envoy_extension_cc_test(
     name = "config_test",
     srcs = ["config_test.cc"],
     data = envoy_select_wasm([
         "//test/extensions/access_loggers/wasm/test_data:test_cpp.wasm",
     ]),
     extension_name = "envoy.access_loggers.wasm",
     deps = [
         "//source/extensions/access_loggers/wasm:config",
         "//test/extensions/access_loggers/wasm/test_data:test_cpp_plugin",
+        "//test/extensions/common/wasm:wasm_runtime",
         "//test/mocks/server:server_mocks",
         "//test/test_common:environment_lib",
         "//test/test_common:utility_lib",
         "@envoy_api//envoy/extensions/access_loggers/wasm/v3:pkg_cc_proto",
     ],
 )
diff --git a/test/extensions/access_loggers/wasm/config_test.cc b/test/extensions/access_loggers/wasm/config_test.cc
index 744f074fdb..fb570453db 100644
--- a/test/extensions/access_loggers/wasm/config_test.cc
+++ b/test/extensions/access_loggers/wasm/config_test.cc
@@ -1,18 +1,19 @@
 #include "envoy/extensions/access_loggers/wasm/v3/wasm.pb.h"
 #include "envoy/registry/registry.h"
 
 #include "common/access_log/access_log_impl.h"
 #include "common/protobuf/protobuf.h"
 
 #include "extensions/access_loggers/wasm/config.h"
 #include "extensions/access_loggers/wasm/wasm_access_log_impl.h"
 #include "extensions/access_loggers/well_known_names.h"
 #include "extensions/common/wasm/wasm.h"
 
+#include "test/extensions/common/wasm/wasm_runtime.h"
 #include "test/mocks/server/mocks.h"
 #include "test/test_common/environment.h"
 #include "test/test_common/printers.h"
 #include "test/test_common/utility.h"
 
 #include "gmock/gmock.h"
 #include "gtest/gtest.h"
@@ -39,20 +40,8 @@ private:
 
 class WasmAccessLogConfigTest : public testing::TestWithParam<std::string> {};
 
-// NB: this is required by VC++ which can not handle the use of macros in the macro definitions
-// used by INSTANTIATE_TEST_SUITE_P.
-auto testing_values = testing::Values(
-#if defined(ENVOY_WASM_V8)
-    "v8",
-#endif
-#if defined(ENVOY_WASM_WAVM)
-    "wavm",
-#endif
-#if defined(ENVOY_WASM_WASMTIME)
-    "wasmtime",
-#endif
-    "null");
-INSTANTIATE_TEST_SUITE_P(Runtimes, WasmAccessLogConfigTest, testing_values);
+INSTANTIATE_TEST_SUITE_P(Runtimes, WasmAccessLogConfigTest,
+                         Envoy::Extensions::Common::Wasm::runtime_values);
 
 TEST_P(WasmAccessLogConfigTest, CreateWasmFromEmpty) {
   auto factory =
diff --git a/test/extensions/bootstrap/wasm/BUILD b/test/extensions/bootstrap/wasm/BUILD
index 6a6488e2b6..b9c8282420 100644
--- a/test/extensions/bootstrap/wasm/BUILD
+++ b/test/extensions/bootstrap/wasm/BUILD
@@ -19,27 +19,28 @@ envoy_package()
 envoy_extension_cc_test(
     name = "wasm_test",
     srcs = ["wasm_test.cc"],
     data = envoy_select_wasm([
         "//test/extensions/bootstrap/wasm/test_data:asm2wasm_cpp.wasm",
         "//test/extensions/bootstrap/wasm/test_data:bad_signature_cpp.wasm",
         "//test/extensions/bootstrap/wasm/test_data:emscripten_cpp.wasm",
         "//test/extensions/bootstrap/wasm/test_data:logging_cpp.wasm",
         "//test/extensions/bootstrap/wasm/test_data:logging_rust.wasm",
         "//test/extensions/bootstrap/wasm/test_data:segv_cpp.wasm",
         "//test/extensions/bootstrap/wasm/test_data:stats_cpp.wasm",
     ]),
     extension_name = "envoy.bootstrap.wasm",
     external_deps = ["abseil_optional"],
     deps = [
         "//source/common/event:dispatcher_lib",
         "//source/common/stats:isolated_store_lib",
         "//source/common/stats:stats_lib",
         "//source/extensions/bootstrap/wasm:config",
         "//source/extensions/common/wasm:wasm_lib",
         "//test/extensions/bootstrap/wasm/test_data:stats_cpp_plugin",
+        "//test/extensions/common/wasm:wasm_runtime",
         "//test/mocks/server:server_mocks",
         "//test/mocks/upstream:upstream_mocks",
         "//test/test_common:environment_lib",
         "//test/test_common:simulated_time_system_lib",
     ],
 )
@@ -47,22 +48,23 @@ envoy_extension_cc_test(
 envoy_extension_cc_test(
     name = "config_test",
     srcs = ["config_test.cc"],
     data = envoy_select_wasm([
         "//test/extensions/bootstrap/wasm/test_data:missing_cpp.wasm",
         "//test/extensions/bootstrap/wasm/test_data:start_cpp.wasm",
     ]),
     extension_name = "envoy.bootstrap.wasm",
     deps = [
         "//include/envoy/registry",
         "//source/common/stats:isolated_store_lib",
         "//source/extensions/bootstrap/wasm:config",
         "//source/extensions/common/wasm:wasm_lib",
         "//test/extensions/bootstrap/wasm/test_data:start_cpp_plugin",
+        "//test/extensions/common/wasm:wasm_runtime",
         "//test/mocks/event:event_mocks",
         "//test/mocks/server:server_mocks",
         "//test/mocks/thread_local:thread_local_mocks",
         "//test/mocks/upstream:upstream_mocks",
         "//test/test_common:environment_lib",
         "@envoy_api//envoy/extensions/wasm/v3:pkg_cc_proto",
     ],
 )
@@ -70,24 +72,25 @@ envoy_extension_cc_test(
 envoy_extension_cc_test_binary(
     name = "wasm_speed_test",
     srcs = ["wasm_speed_test.cc"],
     data = envoy_select_wasm([
         "//test/extensions/bootstrap/wasm/test_data:speed_cpp.wasm",
     ]),
     extension_name = "envoy.bootstrap.wasm",
     external_deps = [
         "abseil_optional",
         "benchmark",
     ],
     deps = [
         "//source/common/event:dispatcher_lib",
         "//source/common/stats:isolated_store_lib",
         "//source/common/stats:stats_lib",
         "//source/extensions/bootstrap/wasm:config",
         "//source/extensions/common/wasm:wasm_lib",
         "//test/extensions/bootstrap/wasm/test_data:speed_cpp_plugin",
+        "//test/extensions/common/wasm:wasm_runtime",
         "//test/mocks/server:server_mocks",
         "//test/mocks/upstream:upstream_mocks",
         "//test/test_common:environment_lib",
         "//test/test_common:simulated_time_system_lib",
     ],
 )
diff --git a/test/extensions/bootstrap/wasm/config_test.cc b/test/extensions/bootstrap/wasm/config_test.cc
index bd5d4b9471..a0b7274e53 100644
--- a/test/extensions/bootstrap/wasm/config_test.cc
+++ b/test/extensions/bootstrap/wasm/config_test.cc
@@ -1,16 +1,17 @@
 #include "envoy/common/exception.h"
 #include "envoy/extensions/wasm/v3/wasm.pb.validate.h"
 #include "envoy/registry/registry.h"
 
 #include "common/stats/isolated_store_impl.h"
 
 #include "extensions/bootstrap/wasm/config.h"
 
+#include "test/extensions/common/wasm/wasm_runtime.h"
 #include "test/mocks/event/mocks.h"
 #include "test/mocks/server/mocks.h"
 #include "test/mocks/thread_local/mocks.h"
 #include "test/mocks/upstream/mocks.h"
 #include "test/test_common/environment.h"
 
 #include "gmock/gmock.h"
 #include "gtest/gtest.h"
@@ -25,62 +26,50 @@ class WasmFactoryTest : public testing::TestWithParam<std::string> {
 protected:
   WasmFactoryTest() {
     config_.mutable_config()->mutable_vm_config()->set_runtime(
         absl::StrCat("envoy.wasm.runtime.", GetParam()));
     if (GetParam() != "null") {
       config_.mutable_config()->mutable_vm_config()->mutable_code()->mutable_local()->set_filename(
           TestEnvironment::substitute(
               "{{ test_rundir }}/test/extensions/bootstrap/wasm/test_data/start_cpp.wasm"));
     } else {
       config_.mutable_config()
           ->mutable_vm_config()
           ->mutable_code()
           ->mutable_local()
           ->set_inline_bytes("WasmStartCpp");
     }
     config_.mutable_config()->set_name("test");
     config_.set_singleton(true);
   }
 
   void initializeWithConfig(const envoy::extensions::wasm::v3::WasmService& config) {
     auto factory =
         Registry::FactoryRegistry<Server::Configuration::BootstrapExtensionFactory>::getFactory(
             "envoy.bootstrap.wasm");
     ASSERT_NE(factory, nullptr);
     api_ = Api::createApiForTest(stats_store_);
     EXPECT_CALL(context_, api()).WillRepeatedly(testing::ReturnRef(*api_));
     EXPECT_CALL(context_, initManager()).WillRepeatedly(testing::ReturnRef(init_manager_));
     EXPECT_CALL(context_, lifecycleNotifier())
         .WillRepeatedly(testing::ReturnRef(lifecycle_notifier_));
     extension_ = factory->createBootstrapExtension(config, context_);
     static_cast<Bootstrap::Wasm::WasmServiceExtension*>(extension_.get())->wasmService();
     EXPECT_CALL(init_watcher_, ready());
     init_manager_.initialize(init_watcher_);
   }
 
   envoy::extensions::wasm::v3::WasmService config_;
   testing::NiceMock<Server::Configuration::MockServerFactoryContext> context_;
   testing::NiceMock<Server::MockServerLifecycleNotifier> lifecycle_notifier_;
   Init::ExpectableWatcherImpl init_watcher_;
   Stats::IsolatedStoreImpl stats_store_;
   Api::ApiPtr api_;
   Init::ManagerImpl init_manager_{"init_manager"};
   Server::BootstrapExtensionPtr extension_;
 };
 
-// NB: this is required by VC++ which can not handle the use of macros in the macro definitions
-// used by INSTANTIATE_TEST_SUITE_P.
-auto testing_values = testing::Values(
-#if defined(ENVOY_WASM_V8)
-    "v8",
-#endif
-#if defined(ENVOY_WASM_WAVM)
-    "wavm",
-#endif
-#if defined(ENVOY_WASM_WASMTIME)
-    "wasmtime",
-#endif
-    "null");
-INSTANTIATE_TEST_SUITE_P(Runtimes, WasmFactoryTest, testing_values);
+INSTANTIATE_TEST_SUITE_P(Runtimes, WasmFactoryTest,
+                         Envoy::Extensions::Common::Wasm::runtime_values);
 
 TEST_P(WasmFactoryTest, CreateWasmFromWasm) {
   auto factory = std::make_unique<Bootstrap::Wasm::WasmFactory>();
diff --git a/test/extensions/bootstrap/wasm/wasm_test.cc b/test/extensions/bootstrap/wasm/wasm_test.cc
index 5384c66dca..757b086770 100644
--- a/test/extensions/bootstrap/wasm/wasm_test.cc
+++ b/test/extensions/bootstrap/wasm/wasm_test.cc
@@ -1,14 +1,15 @@
 #include "common/event/dispatcher_impl.h"
 #include "common/stats/isolated_store_impl.h"
 
 #include "extensions/common/wasm/wasm.h"
 
+#include "test/extensions/common/wasm/wasm_runtime.h"
 #include "test/mocks/server/mocks.h"
 #include "test/mocks/upstream/mocks.h"
 #include "test/test_common/environment.h"
 #include "test/test_common/utility.h"
 
 #include "absl/types/optional.h"
 #include "gmock/gmock.h"
 #include "gtest/gtest-param-test.h"
 #include "gtest/gtest.h"
@@ -38,100 +39,66 @@ class WasmTestBase {
 public:
   WasmTestBase()
       : api_(Api::createApiForTest(stats_store_)),
         dispatcher_(api_->allocateDispatcher("wasm_test")),
         base_scope_(stats_store_.createScope("")), scope_(base_scope_->createScope("")) {}
 
   void createWasm(absl::string_view runtime) {
     plugin_ = std::make_shared<Extensions::Common::Wasm::Plugin>(
         name_, root_id_, vm_id_, runtime, plugin_configuration_, false,
         envoy::config::core::v3::TrafficDirection::UNSPECIFIED, local_info_, nullptr);
     wasm_ = std::make_shared<Extensions::Common::Wasm::Wasm>(
         absl::StrCat("envoy.wasm.runtime.", runtime), vm_id_, vm_configuration_, vm_key_, scope_,
         cluster_manager, *dispatcher_);
     EXPECT_NE(wasm_, nullptr);
     wasm_->setCreateContextForTesting(
         nullptr,
         [](Extensions::Common::Wasm::Wasm* wasm,
            const std::shared_ptr<Extensions::Common::Wasm::Plugin>& plugin)
             -> proxy_wasm::ContextBase* { return new TestContext(wasm, plugin); });
   }
 
   Stats::IsolatedStoreImpl stats_store_;
   Api::ApiPtr api_;
   Upstream::MockClusterManager cluster_manager;
   Event::DispatcherPtr dispatcher_;
   Stats::ScopeSharedPtr base_scope_;
   Stats::ScopeSharedPtr scope_;
   NiceMock<LocalInfo::MockLocalInfo> local_info_;
   std::string name_;
   std::string root_id_;
   std::string vm_id_;
   std::string vm_configuration_;
   std::string vm_key_;
   std::string plugin_configuration_;
   std::shared_ptr<Extensions::Common::Wasm::Plugin> plugin_;
   std::shared_ptr<Extensions::Common::Wasm::Wasm> wasm_;
 };
 
-#if defined(ENVOY_WASM_V8) || defined(ENVOY_WASM_WAVM) || defined(ENVOY_WASM_WASMTIME)
 class WasmTest : public WasmTestBase, public testing::TestWithParam<std::string> {
 public:
   void createWasm() { WasmTestBase::createWasm(GetParam()); }
 };
 
-// NB: this is required by VC++ which can not handle the use of macros in the macro definitions
-// used by INSTANTIATE_TEST_SUITE_P.
-auto testing_values = testing::Values(
-#if defined(ENVOY_WASM_V8)
-    "v8"
-#endif
-#if defined(ENVOY_WASM_V8) && (defined(ENVOY_WASM_WAVM) || defined(ENVOY_WASM_WASMTIME))
-    ,
-#endif
-#if defined(ENVOY_WASM_WAVM)
-    "wavm"
-#endif
-#if (defined(ENVOY_WASM_V8) || defined(ENVOY_WASM_WAVM)) && defined(ENVOY_WASM_WASMTIME)
-    ,
-#endif
-#if defined(ENVOY_WASM_WASMTIME)
-    "wasmtime"
-#endif
-);
-
-INSTANTIATE_TEST_SUITE_P(Runtimes, WasmTest, testing_values);
-#endif
+INSTANTIATE_TEST_SUITE_P(Runtimes, WasmTest,
+                         Envoy::Extensions::Common::Wasm::sandbox_runtime_values);
+GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(WasmTest);
 
 class WasmNullTest : public WasmTestBase, public testing::TestWithParam<std::string> {
 public:
   void createWasm() {
     WasmTestBase::createWasm(GetParam());
     const auto code =
         GetParam() != "null"
             ? TestEnvironment::readFileToStringForTest(TestEnvironment::substitute(
                   "{{ test_rundir }}/test/extensions/bootstrap/wasm/test_data/stats_cpp.wasm"))
             : "WasmStatsCpp";
     EXPECT_FALSE(code.empty());
     EXPECT_TRUE(wasm_->initialize(code, false));
   }
 };
 
-// NB: this is required by VC++ which can not handle the use of macros in the macro definitions
-// used by INSTANTIATE_TEST_SUITE_P.
-auto testing_null_values = testing::Values(
-#if defined(ENVOY_WASM_V8)
-    "v8",
-#endif
-#if defined(ENVOY_WASM_WAVM)
-    "wavm",
-#endif
-#if defined(ENVOY_WASM_WASMTIME)
-    "wasmtime",
-#endif
-    "null");
-INSTANTIATE_TEST_SUITE_P(Runtimes, WasmNullTest, testing_null_values);
-
-#if defined(ENVOY_WASM_V8) || defined(ENVOY_WASM_WAVM) || defined(ENVOY_WASM_WASMTIME)
+INSTANTIATE_TEST_SUITE_P(Runtimes, WasmNullTest, Envoy::Extensions::Common::Wasm::runtime_values);
+
 class WasmTestMatrix : public WasmTestBase,
                        public testing::TestWithParam<std::tuple<std::string, std::string>> {
 public:
@@ -151,60 +118,43 @@ protected:
 };
 
 INSTANTIATE_TEST_SUITE_P(RuntimesAndLanguages, WasmTestMatrix,
-                         testing::Combine(testing::Values(
-#if defined(ENVOY_WASM_V8)
-                                              "v8"
-#endif
-#if defined(ENVOY_WASM_V8) && (defined(ENVOY_WASM_WAVM) || defined(ENVOY_WASM_WASMTIME))
-                                              ,
-#endif
-#if defined(ENVOY_WASM_WAVM)
-                                              "wavm"
-#endif
-#if (defined(ENVOY_WASM_V8) || defined(ENVOY_WASM_WAVM)) && defined(ENVOY_WASM_WASMTIME)
-                                              ,
-#endif
-#if defined(ENVOY_WASM_WASMTIME)
-                                              "wasmtime"
-#endif
-                                              ),
+                         testing::Combine(Envoy::Extensions::Common::Wasm::sandbox_runtime_values,
                                           testing::Values("cpp", "rust")));
+GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(WasmTestMatrix);
 
 TEST_P(WasmTestMatrix, Logging) {
   plugin_configuration_ = "configure-test";
   createWasm();
   setWasmCode("logging");
 
   auto wasm_weak = std::weak_ptr<Extensions::Common::Wasm::Wasm>(wasm_);
   auto wasm_handler = std::make_unique<Extensions::Common::Wasm::WasmHandle>(std::move(wasm_));
 
   EXPECT_TRUE(wasm_weak.lock()->initialize(code_, false));
   auto context = static_cast<TestContext*>(wasm_weak.lock()->start(plugin_));
 
   if (std::get<1>(GetParam()) == "cpp") {
     EXPECT_CALL(*context, log_(spdlog::level::info, Eq("printf stdout test")));
     EXPECT_CALL(*context, log_(spdlog::level::err, Eq("printf stderr test")));
   }
   EXPECT_CALL(*context, log_(spdlog::level::warn, Eq("warn configure-test")));
   EXPECT_CALL(*context, log_(spdlog::level::trace, Eq("test trace logging")));
   EXPECT_CALL(*context, log_(spdlog::level::debug, Eq("test debug logging")));
   EXPECT_CALL(*context, log_(spdlog::level::err, Eq("test error logging")));
   EXPECT_CALL(*context, log_(spdlog::level::info, Eq("test tick logging")))
       .Times(testing::AtLeast(1));
   EXPECT_CALL(*context, log_(spdlog::level::info, Eq("onDone logging")));
   EXPECT_CALL(*context, log_(spdlog::level::info, Eq("onDelete logging")));
 
   EXPECT_TRUE(wasm_weak.lock()->configure(context, plugin_));
   wasm_handler.reset();
   dispatcher_->run(Event::Dispatcher::RunType::NonBlock);
   // This will `SEGV` on nullptr if wasm has been deleted.
   context->onTick(0);
   dispatcher_->run(Event::Dispatcher::RunType::NonBlock);
   dispatcher_->clearDeferredDeleteList();
 }
-#endif
 
-#if defined(ENVOY_WASM_V8) || defined(ENVOY_WASM_WAVM) || defined(ENVOY_WASM_WASMTIME)
 TEST_P(WasmTest, BadSignature) {
   createWasm();
   const auto code = TestEnvironment::readFileToStringForTest(TestEnvironment::substitute(
@@ -253,20 +203,19 @@ TEST_P(WasmTest, IntrinsicGlobals) {
 // The `asm2wasm.wasm` file uses operations which would require the `asm2wasm` Emscripten module
 // *if* em++ is invoked with the trap mode "clamp". See
 // https://emscripten.org/docs/compiling/WebAssembly.html This test demonstrates that the `asm2wasm`
 // module is not required with the trap mode is set to "allow". Note: future Wasm standards will
 // change this behavior by providing non-trapping instructions, but in the mean time we support the
 // default Emscripten behavior.
 TEST_P(WasmTest, Asm2Wasm) {
   createWasm();
   const auto code = TestEnvironment::readFileToStringForTest(TestEnvironment::substitute(
       "{{ test_rundir }}/test/extensions/bootstrap/wasm/test_data/asm2wasm_cpp.wasm"));
   EXPECT_FALSE(code.empty());
   EXPECT_TRUE(wasm_->initialize(code, false));
   auto context = static_cast<TestContext*>(wasm_->start(plugin_));
   EXPECT_CALL(*context, log_(spdlog::level::info, Eq("out 0 0 0")));
   EXPECT_TRUE(wasm_->configure(context, plugin_));
 }
-#endif
 
 TEST_P(WasmNullTest, Stats) {
   createWasm();
diff --git a/test/extensions/common/wasm/BUILD b/test/extensions/common/wasm/BUILD
index 4e586cb790..b26be4cdb7 100644
--- a/test/extensions/common/wasm/BUILD
+++ b/test/extensions/common/wasm/BUILD
@@ -1,7 +1,8 @@
 load(
     "//bazel:envoy_build_system.bzl",
     "envoy_cc_test",
     "envoy_cc_test_binary",
+    "envoy_cc_test_library",
     "envoy_package",
 )
 load(
@@ -16,13 +17,14 @@ envoy_package()
 envoy_cc_test(
     name = "wasm_vm_test",
     srcs = ["wasm_vm_test.cc"],
     data = envoy_select_wasm([
         "//test/extensions/common/wasm/test_data:test_rust.wasm",
     ]),
     deps = [
         "//source/extensions/common/wasm:wasm_lib",
+        "//test/extensions/common/wasm:wasm_runtime",
         "//test/test_common:environment_lib",
         "//test/test_common:registry_lib",
         "//test/test_common:utility_lib",
     ],
 )
@@ -30,25 +32,26 @@ envoy_cc_test(
 envoy_cc_test(
     name = "wasm_test",
     srcs = ["wasm_test.cc"],
     data = envoy_select_wasm([
         "//test/extensions/common/wasm/test_data:bad_signature_cpp.wasm",
         "//test/extensions/common/wasm/test_data:test_context_cpp.wasm",
         "//test/extensions/common/wasm/test_data:test_cpp.wasm",
     ]),
     external_deps = ["abseil_optional"],
     deps = [
         "//source/common/common:hex_lib",
         "//source/common/crypto:utility_lib",
         "//source/common/event:dispatcher_lib",
         "//source/common/stats:isolated_store_lib",
         "//source/common/stats:stats_lib",
         "//source/extensions/common/crypto:utility_lib",
         "//source/extensions/common/wasm:wasm_lib",
+        "//test/extensions/common/wasm:wasm_runtime",
         "//test/extensions/common/wasm/test_data:test_context_cpp_plugin",
         "//test/extensions/common/wasm/test_data:test_cpp_plugin",
         "//test/mocks/server:server_mocks",
         "//test/test_common:environment_lib",
         "//test/test_common:simulated_time_system_lib",
         "//test/test_common:wasm_lib",
     ],
 )
@@ -56,15 +59,28 @@ envoy_cc_test(
 envoy_cc_test_binary(
     name = "wasm_speed_test",
     srcs = ["wasm_speed_test.cc"],
     external_deps = [
         "abseil_optional",
         "benchmark",
     ],
     deps = [
         "//source/common/event:dispatcher_lib",
         "//source/extensions/common/wasm:wasm_lib",
+        "//test/extensions/common/wasm:wasm_runtime",
         "//test/mocks/server:server_mocks",
         "//test/mocks/upstream:upstream_mocks",
         "//test/test_common:environment_lib",
     ],
 )
+
+envoy_cc_test_library(
+    name = "wasm_runtime",
+    srcs = ["wasm_runtime.cc"],
+    hdrs = ["wasm_runtime.h"],
+    deps = [
+        "//source/extensions/wasm_runtime/null:config",
+        "//source/extensions/wasm_runtime/v8:config",
+        "//source/extensions/wasm_runtime/wasmtime:config",
+        "//source/extensions/wasm_runtime/wavm:config",
+    ],
+)
diff --git a/test/extensions/common/wasm/wasm_runtime.cc b/test/extensions/common/wasm/wasm_runtime.cc
new file mode 100644
index 0000000000..a8451c70df
--- /dev/null
+++ b/test/extensions/common/wasm/wasm_runtime.cc
@@ -0,0 +1,41 @@
+#include "test/extensions/common/wasm/wasm_runtime.h"
+
+namespace Envoy {
+namespace Extensions {
+namespace Common {
+namespace Wasm {
+
+std::vector<std::string> runtimes() {
+  std::vector<std::string> runtimes = sandboxRuntimes();
+  runtimes.push_back("null");
+  return runtimes;
+}
+
+std::vector<std::string> sandboxRuntimes() {
+  std::vector<std::string> runtimes;
+#if defined(ENVOY_WASM_V8)
+  runtimes.push_back("v8");
+#endif
+#if defined(ENVOY_WASM_WAVM)
+  runtimes.push_back("wavm");
+#endif
+#if defined(ENVOY_WASM_WASMTIME)
+  runtimes.push_back("wasmtime");
+#endif
+  return runtimes;
+}
+
+std::vector<std::tuple<std::string, std::string>> runtimesAndLanguages() {
+  std::vector<std::tuple<std::string, std::string>> values;
+  for (const auto& runtime : sandboxRuntimes()) {
+    values.push_back(std::make_tuple(runtime, "cpp"));
+    values.push_back(std::make_tuple(runtime, "rust"));
+  }
+  values.push_back(std::make_tuple("null", "cpp"));
+  return values;
+}
+
+} // namespace Wasm
+} // namespace Common
+} // namespace Extensions
+} // namespace Envoy
diff --git a/test/extensions/common/wasm/wasm_runtime.h b/test/extensions/common/wasm/wasm_runtime.h
new file mode 100644
index 0000000000..ef248d8531
--- /dev/null
+++ b/test/extensions/common/wasm/wasm_runtime.h
@@ -0,0 +1,26 @@
+#pragma once
+
+#include "gtest/gtest.h"
+
+namespace Envoy {
+namespace Extensions {
+namespace Common {
+namespace Wasm {
+
+// All WASM runtimes.
+std::vector<std::string> runtimes();
+
+// All sandboxed WASM runtimes.
+std::vector<std::string> sandboxRuntimes();
+
+// Testable runtime and language combinations
+std::vector<std::tuple<std::string, std::string>> runtimesAndLanguages();
+
+inline auto runtime_values = testing::ValuesIn(runtimes());
+inline auto sandbox_runtime_values = testing::ValuesIn(sandboxRuntimes());
+inline auto runtime_and_language_values = testing::ValuesIn(runtimesAndLanguages());
+
+} // namespace Wasm
+} // namespace Common
+} // namespace Extensions
+} // namespace Envoy
diff --git a/test/extensions/common/wasm/wasm_test.cc b/test/extensions/common/wasm/wasm_test.cc
index 6d903abdbe..cd56089daf 100644
--- a/test/extensions/common/wasm/wasm_test.cc
+++ b/test/extensions/common/wasm/wasm_test.cc
@@ -1,22 +1,23 @@
 #include "envoy/server/lifecycle_notifier.h"
 
 #include "common/common/hex.h"
 #include "common/event/dispatcher_impl.h"
 #include "common/stats/isolated_store_impl.h"
 
 #include "extensions/common/wasm/wasm.h"
 
+#include "test/extensions/common/wasm/wasm_runtime.h"
 #include "test/mocks/server/mocks.h"
 #include "test/mocks/stats/mocks.h"
 #include "test/mocks/upstream/mocks.h"
 #include "test/test_common/environment.h"
 #include "test/test_common/utility.h"
 #include "test/test_common/wasm_base.h"
 
 #include "absl/types/optional.h"
 #include "gmock/gmock.h"
 #include "gtest/gtest.h"
 #include "openssl/bytestring.h"
 #include "openssl/hmac.h"
 #include "openssl/sha.h"
 #include "zlib.h"
@@ -85,24 +86,11 @@ class WasmCommonTest : public testing::TestWithParam<std::string> {
 public:
   void SetUp() override { // NOLINT(readability-identifier-naming)
     Logger::Registry::getLog(Logger::Id::wasm).set_level(spdlog::level::debug);
     clearCodeCacheForTesting();
   }
 };
 
-// NB: this is required by VC++ which can not handle the use of macros in the macro definitions
-// used by INSTANTIATE_TEST_SUITE_P.
-auto test_values = testing::Values(
-#if defined(ENVOY_WASM_V8)
-    "v8",
-#endif
-#if defined(ENVOY_WASM_WAVM)
-    "wavm",
-#endif
-#if defined(ENVOY_WASM_WASMTIME)
-    "wasmtime",
-#endif
-    "null");
-INSTANTIATE_TEST_SUITE_P(Runtimes, WasmCommonTest, test_values);
+INSTANTIATE_TEST_SUITE_P(Runtimes, WasmCommonTest, Envoy::Extensions::Common::Wasm::runtime_values);
 
 TEST_P(WasmCommonTest, EnvoyWasm) {
   auto envoy_wasm = std::make_unique<EnvoyWasm>();
@@ -969,7 +957,8 @@ public:
   std::unique_ptr<TestContext> context_;
 };
 
-INSTANTIATE_TEST_SUITE_P(Runtimes, WasmCommonContextTest, test_values);
+INSTANTIATE_TEST_SUITE_P(Runtimes, WasmCommonContextTest,
+                         Envoy::Extensions::Common::Wasm::runtime_values);
 
 TEST_P(WasmCommonContextTest, OnDnsResolve) {
   std::string code;
diff --git a/test/extensions/filters/http/wasm/BUILD b/test/extensions/filters/http/wasm/BUILD
index f8392be38a..055529c224 100644
--- a/test/extensions/filters/http/wasm/BUILD
+++ b/test/extensions/filters/http/wasm/BUILD
@@ -18,25 +18,26 @@ envoy_package()
 envoy_extension_cc_test(
     name = "wasm_filter_test",
     size = "enormous",  # For WAVM without precompilation. TODO: add precompilation.
     srcs = ["wasm_filter_test.cc"],
     data = envoy_select_wasm([
         "//test/extensions/filters/http/wasm/test_data:async_call_rust.wasm",
         "//test/extensions/filters/http/wasm/test_data:body_rust.wasm",
         "//test/extensions/filters/http/wasm/test_data:headers_rust.wasm",
         "//test/extensions/filters/http/wasm/test_data:metadata_rust.wasm",
         "//test/extensions/filters/http/wasm/test_data:resume_call_rust.wasm",
         "//test/extensions/filters/http/wasm/test_data:shared_data_rust.wasm",
         "//test/extensions/filters/http/wasm/test_data:shared_queue_rust.wasm",
         "//test/extensions/filters/http/wasm/test_data:test_cpp.wasm",
     ]),
     extension_name = "envoy.filters.http.wasm",
     shard_count = 50,
     deps = [
         "//source/common/http:message_lib",
         "//source/extensions/filters/http/wasm:wasm_filter_lib",
+        "//test/extensions/common/wasm:wasm_runtime",
         "//test/extensions/filters/http/wasm/test_data:test_cpp_plugin",
         "//test/mocks/network:connection_mocks",
         "//test/mocks/router:router_mocks",
         "//test/test_common:wasm_lib",
     ],
 )
@@ -44,22 +45,23 @@ envoy_extension_cc_test(
 envoy_extension_cc_test(
     name = "config_test",
     size = "enormous",  # For WAVM without precompilation. TODO: add precompilation.
     srcs = ["config_test.cc"],
     data = envoy_select_wasm([
         "//test/extensions/filters/http/wasm/test_data:test_cpp.wasm",
     ]),
     extension_name = "envoy.filters.http.wasm",
     shard_count = 50,
     deps = [
         "//source/common/common:base64_lib",
         "//source/common/common:hex_lib",
         "//source/common/crypto:utility_lib",
         "//source/common/http:message_lib",
         "//source/extensions/common/crypto:utility_lib",
         "//source/extensions/common/wasm:wasm_lib",
         "//source/extensions/filters/http/wasm:config",
+        "//test/extensions/common/wasm:wasm_runtime",
         "//test/mocks/server:server_mocks",
         "//test/test_common:environment_lib",
         "@envoy_api//envoy/extensions/filters/http/wasm/v3:pkg_cc_proto",
     ],
 )
diff --git a/test/extensions/filters/http/wasm/config_test.cc b/test/extensions/filters/http/wasm/config_test.cc
index 552aa61a93..5d5d92afb6 100644
--- a/test/extensions/filters/http/wasm/config_test.cc
+++ b/test/extensions/filters/http/wasm/config_test.cc
@@ -1,19 +1,20 @@
 #include <chrono>
 
 #include "envoy/extensions/filters/http/wasm/v3/wasm.pb.validate.h"
 
 #include "common/common/base64.h"
 #include "common/common/hex.h"
 #include "common/crypto/utility.h"
 #include "common/http/message_impl.h"
 #include "common/stats/isolated_store_impl.h"
 
 #include "extensions/common/wasm/wasm.h"
 #include "extensions/filters/http/wasm/config.h"
 
+#include "test/extensions/common/wasm/wasm_runtime.h"
 #include "test/mocks/http/mocks.h"
 #include "test/mocks/server/mocks.h"
 #include "test/test_common/environment.h"
 
 #include "gmock/gmock.h"
 #include "gtest/gtest.h"
@@ -29,63 +30,44 @@ using Common::Wasm::WasmException;
 namespace HttpFilters {
 namespace Wasm {
 
-#if defined(ENVOY_WASM_V8) || defined(ENVOY_WASM_WAVM) || defined(ENVOY_WASM_WASMTIME)
 class WasmFilterConfigTest : public Event::TestUsingSimulatedTime,
                              public testing::TestWithParam<std::string> {
 protected:
   WasmFilterConfigTest() : api_(Api::createApiForTest(stats_store_)) {
     ON_CALL(context_, api()).WillByDefault(ReturnRef(*api_));
     ON_CALL(context_, scope()).WillByDefault(ReturnRef(stats_store_));
     ON_CALL(context_, listenerMetadata()).WillByDefault(ReturnRef(listener_metadata_));
     EXPECT_CALL(context_, initManager()).WillRepeatedly(ReturnRef(init_manager_));
     ON_CALL(context_, clusterManager()).WillByDefault(ReturnRef(cluster_manager_));
     ON_CALL(context_, dispatcher()).WillByDefault(ReturnRef(dispatcher_));
   }
 
   void SetUp() override { Envoy::Extensions::Common::Wasm::clearCodeCacheForTesting(); }
 
   void initializeForRemote() {
     retry_timer_ = new Event::MockTimer();
 
     EXPECT_CALL(dispatcher_, createTimer_(_)).WillOnce(Invoke([this](Event::TimerCb timer_cb) {
       retry_timer_cb_ = timer_cb;
       return retry_timer_;
     }));
   }
 
   NiceMock<Server::Configuration::MockFactoryContext> context_;
   Stats::IsolatedStoreImpl stats_store_;
   Api::ApiPtr api_;
   envoy::config::core::v3::Metadata listener_metadata_;
   Init::ManagerImpl init_manager_{"init_manager"};
   NiceMock<Upstream::MockClusterManager> cluster_manager_;
   Init::ExpectableWatcherImpl init_watcher_;
   NiceMock<Event::MockDispatcher> dispatcher_;
   Event::MockTimer* retry_timer_;
   Event::TimerCb retry_timer_cb_;
 };
 
-// NB: this is required by VC++ which can not handle the use of macros in the macro definitions
-// used by INSTANTIATE_TEST_SUITE_P.
-auto testing_values = testing::Values(
-#if defined(ENVOY_WASM_V8)
-    "v8"
-#endif
-#if defined(ENVOY_WASM_V8) && (defined(ENVOY_WASM_WAVM) || defined(ENVOY_WASM_WASMTIME))
-    ,
-#endif
-#if defined(ENVOY_WASM_WAVM)
-    "wavm"
-#endif
-#if (defined(ENVOY_WASM_V8) || defined(ENVOY_WASM_WAVM)) && defined(ENVOY_WASM_WASMTIME)
-    ,
-#endif
-#if defined(ENVOY_WASM_WASMTIME)
-    "wasmtime"
-#endif
-);
-
-INSTANTIATE_TEST_SUITE_P(Runtimes, WasmFilterConfigTest, testing_values);
+INSTANTIATE_TEST_SUITE_P(Runtimes, WasmFilterConfigTest,
+                         Envoy::Extensions::Common::Wasm::sandbox_runtime_values);
+GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(WasmFilterConfigTest);
 
 TEST_P(WasmFilterConfigTest, JsonLoadFromFileWasm) {
   const std::string json = TestEnvironment::substitute(absl::StrCat(R"EOF(
@@ -790,51 +772,50 @@ TEST_P(WasmFilterConfigTest, YamlLoadFromRemoteSuccessBadcode) {
 TEST_P(WasmFilterConfigTest, YamlLoadFromRemoteSuccessBadcodeFailOpen) {
   const std::string code = "foo";
   const std::string sha256 = Hex::encode(
       Envoy::Common::Crypto::UtilitySingleton::get().getSha256Digest(Buffer::OwnedImpl(code)));
   const std::string yaml = TestEnvironment::substitute(absl::StrCat(R"EOF(
   config:
     fail_open: true
     vm_config:
       runtime: "envoy.wasm.runtime.)EOF",
                                                                     GetParam(), R"EOF("
       code:
         remote:
           http_uri:
             uri: https://example.com/data
             cluster: cluster_1
             timeout: 5s
           sha256: )EOF",
                                                                     sha256));
   envoy::extensions::filters::http::wasm::v3::Wasm proto_config;
   TestUtility::loadFromYaml(yaml, proto_config);
   WasmFilterConfig factory;
   NiceMock<Http::MockAsyncClient> client;
   NiceMock<Http::MockAsyncClientRequest> request(&client);
 
   EXPECT_CALL(cluster_manager_, httpAsyncClientForCluster("cluster_1"))
       .WillOnce(ReturnRef(cluster_manager_.async_client_));
   EXPECT_CALL(cluster_manager_.async_client_, send_(_, _, _))
       .WillOnce(
           Invoke([&](Http::RequestMessagePtr&, Http::AsyncClient::Callbacks& callbacks,
                      const Http::AsyncClient::RequestOptions&) -> Http::AsyncClient::Request* {
             Http::ResponseMessagePtr response(
                 new Http::ResponseMessageImpl(Http::ResponseHeaderMapPtr{
                     new Http::TestResponseHeaderMapImpl{{":status", "200"}}}));
             response->body().add(code);
             callbacks.onSuccess(request, std::move(response));
             return nullptr;
           }));
 
   Http::FilterFactoryCb cb = factory.createFilterFactoryFromProto(proto_config, "stats", context_);
   EXPECT_CALL(init_watcher_, ready());
   context_.initManager().initialize(init_watcher_);
   Http::MockFilterChainFactoryCallbacks filter_callback;
   // The filter is not registered.
   cb(filter_callback);
 }
-#endif
 
 } // namespace Wasm
 } // namespace HttpFilters
 } // namespace Extensions
 } // namespace Envoy
diff --git a/test/extensions/filters/http/wasm/wasm_filter_test.cc b/test/extensions/filters/http/wasm/wasm_filter_test.cc
index 9999d453c7..fddde58db4 100644
--- a/test/extensions/filters/http/wasm/wasm_filter_test.cc
+++ b/test/extensions/filters/http/wasm/wasm_filter_test.cc
@@ -1,7 +1,8 @@
 #include "common/http/message_impl.h"
 
 #include "extensions/filters/http/wasm/wasm_filter.h"
 
+#include "test/extensions/common/wasm/wasm_runtime.h"
 #include "test/mocks/network/connection.h"
 #include "test/mocks/router/mocks.h"
 #include "test/test_common/wasm_base.h"
@@ -93,22 +94,10 @@ public:
 protected:
   NiceMock<Grpc::MockAsyncStream> async_stream_;
   Grpc::MockAsyncClientManager async_client_manager_;
 };
 
-// NB: this is required by VC++ which can not handle the use of macros in the macro definitions
-// used by INSTANTIATE_TEST_SUITE_P.
-auto testing_values = testing::Values(
-#if defined(ENVOY_WASM_V8)
-    std::make_tuple("v8", "cpp"), std::make_tuple("v8", "rust"),
-#endif
-#if defined(ENVOY_WASM_WAVM)
-    std::make_tuple("wavm", "cpp"), std::make_tuple("wavm", "rust"),
-#endif
-#if defined(ENVOY_WASM_WASMTIME)
-    std::make_tuple("wasmtime", "cpp"), std::make_tuple("wasmtime", "rust"),
-#endif
-    std::make_tuple("null", "cpp"));
-INSTANTIATE_TEST_SUITE_P(RuntimesAndLanguages, WasmHttpFilterTest, testing_values);
+INSTANTIATE_TEST_SUITE_P(RuntimesAndLanguages, WasmHttpFilterTest,
+                         Envoy::Extensions::Common::Wasm::runtime_and_language_values);
 
 // Bad code in initial config.
 TEST_P(WasmHttpFilterTest, BadCode) {
@@ -1230,96 +1219,97 @@ TEST_P(WasmHttpFilterTest, GrpcStreamCancel) {
 TEST_P(WasmHttpFilterTest, GrpcStreamOpenAtShutdown) {
   if (std::get<1>(GetParam()) == "rust") {
     // TODO(PiotrSikora): gRPC call outs not yet supported in the Rust SDK.
     return;
   }
   Grpc::RawAsyncStreamCallbacks* callbacks = nullptr;
   setupGrpcStreamTest(callbacks);
 
   EXPECT_CALL(rootContext(), log_(spdlog::level::debug, Eq("response response")));
   Http::TestRequestHeaderMapImpl request_headers{{":path", "/"}};
   EXPECT_EQ(Http::FilterHeadersStatus::StopAllIterationAndWatermark,
             filter().decodeHeaders(request_headers, false));
 
   ProtobufWkt::Value value;
   value.set_string_value("response");
   std::string response_string;
   EXPECT_TRUE(value.SerializeToString(&response_string));
   auto response = std::make_unique<Buffer::OwnedImpl>(response_string);
   EXPECT_NE(callbacks, nullptr);
   NiceMock<Tracing::MockSpan> span;
   if (callbacks) {
     Http::TestRequestHeaderMapImpl create_initial_metadata{{"test", "create_initial_metadata"}};
     callbacks->onCreateInitialMetadata(create_initial_metadata);
     callbacks->onReceiveInitialMetadata(std::make_unique<Http::TestResponseHeaderMapImpl>());
     callbacks->onReceiveMessageRaw(std::move(response));
     callbacks->onReceiveTrailingMetadata(std::make_unique<Http::TestResponseTrailerMapImpl>());
   }
 
   // Destroy the Context, Plugin and VM.
   context_.reset();
   plugin_.reset();
   plugin_handle_.reset();
   wasm_.reset();
 }
 
 // Test metadata access including CEL expressions.
-// TODO: re-enable this on Windows if and when the CEL `Antlr` parser compiles on Windows.
-#if defined(ENVOY_WASM_V8) || defined(ENVOY_WASM_WAVM) || defined(ENVOY_WASM_WASMTIME)
 TEST_P(WasmHttpFilterTest, Metadata) {
+#ifdef WIN32
+  // TODO: re-enable this on Windows if and when the CEL `Antlr` parser compiles on Windows.
+  GTEST_SKIP() << "Skipping on Windows";
+#endif
   setupTest("", "metadata");
   setupFilter();
   envoy::config::core::v3::Node node_data;
   ProtobufWkt::Value node_val;
   node_val.set_string_value("wasm_node_get_value");
   (*node_data.mutable_metadata()->mutable_fields())["wasm_node_get_key"] = node_val;
   (*node_data.mutable_metadata()->mutable_fields())["wasm_node_list_key"] =
       ValueUtil::listValue({node_val});
   EXPECT_CALL(local_info_, node()).WillRepeatedly(ReturnRef(node_data));
   EXPECT_CALL(rootContext(),
               log_(spdlog::level::debug, Eq(absl::string_view("onTick wasm_node_get_value"))));
 
   EXPECT_CALL(filter(),
               log_(spdlog::level::err, Eq(absl::string_view("onBody wasm_node_get_value"))));
   EXPECT_CALL(filter(), log_(spdlog::level::info, Eq(absl::string_view("header path /"))));
   EXPECT_CALL(filter(),
               log_(spdlog::level::trace,
                    Eq(absl::string_view("Struct wasm_request_get_value wasm_request_get_value"))));
   if (std::get<1>(GetParam()) != "rust") {
     // TODO(PiotrSikora): not yet supported in the Rust SDK.
     EXPECT_CALL(filter(), log_(spdlog::level::info, Eq(absl::string_view("server is envoy-wasm"))));
   }
 
   request_stream_info_.metadata_.mutable_filter_metadata()->insert(
       Protobuf::MapPair<std::string, ProtobufWkt::Struct>(
           HttpFilters::HttpFilterNames::get().Wasm,
           MessageUtil::keyValueStruct("wasm_request_get_key", "wasm_request_get_value")));
 
   rootContext().onTick(0);
 
   EXPECT_CALL(encoder_callbacks_, streamInfo()).WillRepeatedly(ReturnRef(request_stream_info_));
   absl::optional<std::chrono::nanoseconds> dur = std::chrono::nanoseconds(15000000);
   EXPECT_CALL(request_stream_info_, requestComplete()).WillRepeatedly(Return(dur));
   EXPECT_CALL(filter(), log_(spdlog::level::info, Eq(absl::string_view("duration is 15000000"))));
   if (std::get<1>(GetParam()) != "rust") {
     // TODO(PiotrSikora): not yet supported in the Rust SDK.
     EXPECT_CALL(filter(), log_(spdlog::level::info, Eq(absl::string_view("grpc service: test"))));
   }
   Http::TestRequestHeaderMapImpl request_headers{{":path", "/"}, {"biz", "baz"}};
   EXPECT_EQ(Http::FilterHeadersStatus::Continue, filter().decodeHeaders(request_headers, false));
   Buffer::OwnedImpl data("hello");
   EXPECT_EQ(Http::FilterDataStatus::Continue, filter().decodeData(data, true));
 
   StreamInfo::MockStreamInfo log_stream_info;
   filter().log(&request_headers, nullptr, nullptr, log_stream_info);
 
   const auto& result = request_stream_info_.filterState()->getDataReadOnly<Common::Wasm::WasmState>(
       "wasm.wasm_request_set_key");
   EXPECT_EQ("wasm_request_set_value", result.value());
 
   filter().onDestroy();
   filter().onDestroy(); // Does nothing.
 }
-#endif
 
 TEST_P(WasmHttpFilterTest, Property) {
   if (std::get<1>(GetParam()) == "rust") {
diff --git a/test/extensions/filters/network/wasm/BUILD b/test/extensions/filters/network/wasm/BUILD
index d21eba6c08..bfbd34124d 100644
--- a/test/extensions/filters/network/wasm/BUILD
+++ b/test/extensions/filters/network/wasm/BUILD
@@ -18,20 +18,21 @@ envoy_package()
 envoy_extension_cc_test(
     name = "config_test",
     srcs = ["config_test.cc"],
     data = envoy_select_wasm([
         "//test/extensions/filters/network/wasm/test_data:test_cpp.wasm",
     ]),
     extension_name = "envoy.filters.network.wasm",
     deps = [
         "//source/common/common:base64_lib",
         "//source/common/common:hex_lib",
         "//source/common/crypto:utility_lib",
         "//source/extensions/common/crypto:utility_lib",
         "//source/extensions/common/wasm:wasm_lib",
         "//source/extensions/filters/network/wasm:config",
+        "//test/extensions/common/wasm:wasm_runtime",
         "//test/extensions/filters/network/wasm/test_data:test_cpp_plugin",
         "//test/mocks/server:server_mocks",
         "//test/test_common:environment_lib",
         "@envoy_api//envoy/extensions/filters/network/wasm/v3:pkg_cc_proto",
     ],
 )
@@ -39,16 +40,17 @@ envoy_extension_cc_test(
 envoy_extension_cc_test(
     name = "wasm_filter_test",
     srcs = ["wasm_filter_test.cc"],
     data = envoy_select_wasm([
         "//test/extensions/filters/network/wasm/test_data:logging_rust.wasm",
         "//test/extensions/filters/network/wasm/test_data:test_cpp.wasm",
     ]),
     extension_name = "envoy.filters.network.wasm",
     deps = [
         "//source/extensions/filters/network/wasm:wasm_filter_lib",
+        "//test/extensions/common/wasm:wasm_runtime",
         "//test/extensions/filters/network/wasm/test_data:test_cpp_plugin",
         "//test/mocks/network:network_mocks",
         "//test/mocks/server:server_mocks",
         "//test/test_common:wasm_lib",
     ],
 )
diff --git a/test/extensions/filters/network/wasm/config_test.cc b/test/extensions/filters/network/wasm/config_test.cc
index 68541490a8..6d93a167f6 100644
--- a/test/extensions/filters/network/wasm/config_test.cc
+++ b/test/extensions/filters/network/wasm/config_test.cc
@@ -1,15 +1,16 @@
 #include "envoy/extensions/filters/network/wasm/v3/wasm.pb.validate.h"
 
 #include "common/common/base64.h"
 #include "common/common/hex.h"
 #include "common/crypto/utility.h"
 
 #include "extensions/common/wasm/wasm.h"
 #include "extensions/filters/network/wasm/config.h"
 #include "extensions/filters/network/wasm/wasm_filter.h"
 
+#include "test/extensions/common/wasm/wasm_runtime.h"
 #include "test/mocks/server/mocks.h"
 #include "test/test_common/environment.h"
 
 #include "gmock/gmock.h"
 #include "gtest/gtest.h"
@@ -26,50 +27,38 @@ class WasmNetworkFilterConfigTest : public testing::TestWithParam<std::string> {
 protected:
   WasmNetworkFilterConfigTest() : api_(Api::createApiForTest(stats_store_)) {
     ON_CALL(context_, api()).WillByDefault(ReturnRef(*api_));
     ON_CALL(context_, scope()).WillByDefault(ReturnRef(stats_store_));
     ON_CALL(context_, listenerMetadata()).WillByDefault(ReturnRef(listener_metadata_));
     ON_CALL(context_, initManager()).WillByDefault(ReturnRef(init_manager_));
     ON_CALL(context_, clusterManager()).WillByDefault(ReturnRef(cluster_manager_));
     ON_CALL(context_, dispatcher()).WillByDefault(ReturnRef(dispatcher_));
   }
 
   void SetUp() override { Envoy::Extensions::Common::Wasm::clearCodeCacheForTesting(); }
 
   void initializeForRemote() {
     retry_timer_ = new Event::MockTimer();
 
     EXPECT_CALL(dispatcher_, createTimer_(_)).WillOnce(Invoke([this](Event::TimerCb timer_cb) {
       retry_timer_cb_ = timer_cb;
       return retry_timer_;
     }));
   }
 
   NiceMock<Server::Configuration::MockFactoryContext> context_;
   Stats::IsolatedStoreImpl stats_store_;
   Api::ApiPtr api_;
   envoy::config::core::v3::Metadata listener_metadata_;
   Init::ManagerImpl init_manager_{"init_manager"};
   NiceMock<Upstream::MockClusterManager> cluster_manager_;
   Init::ExpectableWatcherImpl init_watcher_;
   NiceMock<Event::MockDispatcher> dispatcher_;
   Event::MockTimer* retry_timer_;
   Event::TimerCb retry_timer_cb_;
 };
 
-// NB: this is required by VC++ which can not handle the use of macros in the macro definitions
-// used by INSTANTIATE_TEST_SUITE_P.
-auto testing_values = testing::Values(
-#if defined(ENVOY_WASM_V8)
-    "v8",
-#endif
-#if defined(ENVOY_WASM_WAVM)
-    "wavm",
-#endif
-#if defined(ENVOY_WASM_WASMTIME)
-    "wasmtime",
-#endif
-    "null");
-INSTANTIATE_TEST_SUITE_P(Runtimes, WasmNetworkFilterConfigTest, testing_values);
+INSTANTIATE_TEST_SUITE_P(Runtimes, WasmNetworkFilterConfigTest,
+                         Envoy::Extensions::Common::Wasm::runtime_values);
 
 TEST_P(WasmNetworkFilterConfigTest, YamlLoadFromFileWasm) {
   if (GetParam() == "null") {
diff --git a/test/extensions/filters/network/wasm/wasm_filter_test.cc b/test/extensions/filters/network/wasm/wasm_filter_test.cc
index 517d37cee3..0b60242808 100644
--- a/test/extensions/filters/network/wasm/wasm_filter_test.cc
+++ b/test/extensions/filters/network/wasm/wasm_filter_test.cc
@@ -1,11 +1,12 @@
 #include "envoy/server/lifecycle_notifier.h"
 
 #include "extensions/common/wasm/wasm.h"
 #include "extensions/filters/network/wasm/wasm_filter.h"
 
+#include "test/extensions/common/wasm/wasm_runtime.h"
 #include "test/mocks/network/mocks.h"
 #include "test/mocks/server/mocks.h"
 #include "test/test_common/wasm_base.h"
 
 #include "gmock/gmock.h"
 #include "gtest/gtest.h"
@@ -81,21 +82,9 @@ private:
 protected:
   std::string code_;
 };
 
-// NB: this is required by VC++ which can not handle the use of macros in the macro definitions
-// used by INSTANTIATE_TEST_SUITE_P.
-auto testing_values = testing::Values(
-#if defined(ENVOY_WASM_V8)
-    std::make_tuple("v8", "cpp"), std::make_tuple("v8", "rust"),
-#endif
-#if defined(ENVOY_WASM_WAVM)
-    std::make_tuple("wavm", "cpp"), std::make_tuple("wavm", "rust"),
-#endif
-#if defined(ENVOY_WASM_WASMTIME)
-    std::make_tuple("wasmtime", "cpp"), std::make_tuple("wasmtime", "rust"),
-#endif
-    std::make_tuple("null", "cpp"));
-INSTANTIATE_TEST_SUITE_P(RuntimesAndLanguages, WasmNetworkFilterTest, testing_values);
+INSTANTIATE_TEST_SUITE_P(RuntimesAndLanguages, WasmNetworkFilterTest,
+                         Envoy::Extensions::Common::Wasm::runtime_and_language_values);
 
 // Bad code in initial config.
 TEST_P(WasmNetworkFilterTest, BadCode) {
diff --git a/test/extensions/stats_sinks/wasm/BUILD b/test/extensions/stats_sinks/wasm/BUILD
index 6135c8cfcf..b0911d7aaa 100644
--- a/test/extensions/stats_sinks/wasm/BUILD
+++ b/test/extensions/stats_sinks/wasm/BUILD
@@ -18,14 +18,15 @@ envoy_package()
 envoy_extension_cc_test(
     name = "config_test",
     srcs = ["config_test.cc"],
     data = envoy_select_wasm([
         "//test/extensions/stats_sinks/wasm/test_data:test_context_cpp.wasm",
     ]),
     extension_name = "envoy.stat_sinks.wasm",
     deps = [
         "//source/extensions/stat_sinks/wasm:config",
+        "//test/extensions/common/wasm:wasm_runtime",
         "//test/extensions/stats_sinks/wasm/test_data:test_context_cpp_plugin",
         "//test/mocks/server:server_mocks",
         "@envoy_api//envoy/extensions/stat_sinks/wasm/v3:pkg_cc_proto",
     ],
 )
@@ -33,16 +34,17 @@ envoy_extension_cc_test(
 envoy_extension_cc_test(
     name = "wasm_stat_sink_test",
     srcs = ["wasm_stat_sink_test.cc"],
     data = envoy_select_wasm([
         "//test/extensions/stats_sinks/wasm/test_data:test_context_cpp.wasm",
     ]),
     extension_name = "envoy.stat_sinks.wasm",
     external_deps = ["abseil_optional"],
     deps = [
         "//source/common/stats:stats_lib",
         "//source/extensions/common/wasm:wasm_lib",
+        "//test/extensions/common/wasm:wasm_runtime",
         "//test/extensions/stats_sinks/wasm/test_data:test_context_cpp_plugin",
         "//test/mocks/stats:stats_mocks",
         "//test/test_common:wasm_lib",
     ],
 )
diff --git a/test/extensions/stats_sinks/wasm/config_test.cc b/test/extensions/stats_sinks/wasm/config_test.cc
index d9b1263215..012f4ecc2c 100644
--- a/test/extensions/stats_sinks/wasm/config_test.cc
+++ b/test/extensions/stats_sinks/wasm/config_test.cc
@@ -1,17 +1,18 @@
 #include "envoy/extensions/stat_sinks/wasm/v3/wasm.pb.validate.h"
 #include "envoy/registry/registry.h"
 
 #include "common/protobuf/protobuf.h"
 
 #include "extensions/common/wasm/wasm.h"
 #include "extensions/stat_sinks/wasm/config.h"
 #include "extensions/stat_sinks/wasm/wasm_stat_sink_impl.h"
 #include "extensions/stat_sinks/well_known_names.h"
 
+#include "test/extensions/common/wasm/wasm_runtime.h"
 #include "test/mocks/server/mocks.h"
 #include "test/test_common/environment.h"
 #include "test/test_common/printers.h"
 #include "test/test_common/utility.h"
 
 #include "gmock/gmock.h"
 #include "gtest/gtest.h"
@@ -25,60 +26,48 @@ class WasmStatSinkConfigTest : public testing::TestWithParam<std::string> {
 protected:
   WasmStatSinkConfigTest() {
     config_.mutable_config()->mutable_vm_config()->set_runtime(
         absl::StrCat("envoy.wasm.runtime.", GetParam()));
     if (GetParam() != "null") {
       config_.mutable_config()->mutable_vm_config()->mutable_code()->mutable_local()->set_filename(
           TestEnvironment::substitute(
               "{{ test_rundir "
               "}}/test/extensions/stats_sinks/wasm/test_data/test_context_cpp.wasm"));
     } else {
       config_.mutable_config()
           ->mutable_vm_config()
           ->mutable_code()
           ->mutable_local()
           ->set_inline_bytes("CommonWasmTestContextCpp");
     }
     config_.mutable_config()->set_name("test");
   }
 
   void initializeWithConfig(const envoy::extensions::stat_sinks::wasm::v3::Wasm& config) {
     auto factory = Registry::FactoryRegistry<Server::Configuration::StatsSinkFactory>::getFactory(
         StatsSinkNames::get().Wasm);
     ASSERT_NE(factory, nullptr);
     api_ = Api::createApiForTest(stats_store_);
     EXPECT_CALL(context_, api()).WillRepeatedly(testing::ReturnRef(*api_));
     EXPECT_CALL(context_, initManager()).WillRepeatedly(testing::ReturnRef(init_manager_));
     EXPECT_CALL(context_, lifecycleNotifier())
         .WillRepeatedly(testing::ReturnRef(lifecycle_notifier_));
     sink_ = factory->createStatsSink(config, context_);
     EXPECT_CALL(init_watcher_, ready());
     init_manager_.initialize(init_watcher_);
   }
 
   envoy::extensions::stat_sinks::wasm::v3::Wasm config_;
   testing::NiceMock<Server::Configuration::MockServerFactoryContext> context_;
   testing::NiceMock<Server::MockServerLifecycleNotifier> lifecycle_notifier_;
   Init::ExpectableWatcherImpl init_watcher_;
   Stats::IsolatedStoreImpl stats_store_;
   Api::ApiPtr api_;
   Init::ManagerImpl init_manager_{"init_manager"};
   Stats::SinkPtr sink_;
 };
 
-// NB: this is required by VC++ which can not handle the use of macros in the macro definitions
-// used by INSTANTIATE_TEST_SUITE_P.
-auto testing_values = testing::Values(
-#if defined(ENVOY_WASM_V8)
-    "v8",
-#endif
-#if defined(ENVOY_WASM_WAVM)
-    "wavm",
-#endif
-#if defined(ENVOY_WASM_WASMTIME)
-    "wasmtime",
-#endif
-    "null");
-INSTANTIATE_TEST_SUITE_P(Runtimes, WasmStatSinkConfigTest, testing_values);
+INSTANTIATE_TEST_SUITE_P(Runtimes, WasmStatSinkConfigTest,
+                         Envoy::Extensions::Common::Wasm::runtime_values);
 
 TEST_P(WasmStatSinkConfigTest, CreateWasmFromEmpty) {
   envoy::extensions::stat_sinks::wasm::v3::Wasm config;
diff --git a/test/extensions/stats_sinks/wasm/wasm_stat_sink_test.cc b/test/extensions/stats_sinks/wasm/wasm_stat_sink_test.cc
index 716925bfd1..db9f4108ae 100644
--- a/test/extensions/stats_sinks/wasm/wasm_stat_sink_test.cc
+++ b/test/extensions/stats_sinks/wasm/wasm_stat_sink_test.cc
@@ -1,10 +1,11 @@
 #include "envoy/server/lifecycle_notifier.h"
 
 #include "extensions/common/wasm/wasm.h"
 
+#include "test/extensions/common/wasm/wasm_runtime.h"
 #include "test/mocks/upstream/mocks.h"
 #include "test/test_common/wasm_base.h"
 
 #include "absl/types/optional.h"
 #include "gmock/gmock.h"
 #include "gtest/gtest.h"
@@ -34,40 +35,28 @@ class WasmCommonContextTest
     : public Common::Wasm::WasmTestBase<testing::TestWithParam<std::string>> {
 public:
   WasmCommonContextTest() = default;
 
   void setup(const std::string& code, std::string root_id = "") {
     setupBase(
         GetParam(), code,
         [](Wasm* wasm, const std::shared_ptr<Plugin>& plugin) -> ContextBase* {
           return new TestContext(wasm, plugin);
         },
         root_id);
   }
   void setupContext() {
     context_ = std::make_unique<TestContext>(wasm_->wasm().get(), root_context_->id(), plugin_);
     context_->onCreate();
   }
 
   TestContext& rootContext() { return *static_cast<TestContext*>(root_context_); }
   TestContext& context() { return *context_; }
 
   std::unique_ptr<TestContext> context_;
 };
 
-// NB: this is required by VC++ which can not handle the use of macros in the macro definitions
-// used by INSTANTIATE_TEST_SUITE_P.
-auto testing_values = testing::Values(
-#if defined(ENVOY_WASM_V8)
-    "v8",
-#endif
-#if defined(ENVOY_WASM_WAVM)
-    "wavm",
-#endif
-#if defined(ENVOY_WASM_WASMTIME)
-    "wasmtime",
-#endif
-    "null");
-INSTANTIATE_TEST_SUITE_P(Runtimes, WasmCommonContextTest, testing_values);
+INSTANTIATE_TEST_SUITE_P(Runtimes, WasmCommonContextTest,
+                         Envoy::Extensions::Common::Wasm::runtime_values);
 
 TEST_P(WasmCommonContextTest, OnStat) {
   std::string code;
diff --git a/test/per_file_coverage.sh b/test/per_file_coverage.sh
index 13526f0eeb..8de0092d29 100755
--- a/test/per_file_coverage.sh
+++ b/test/per_file_coverage.sh
@@ -3,75 +3,78 @@
 # directory:coverage_percent
 # for existing directories with low coverage.
 declare -a KNOWN_LOW_COVERAGE=(
 "source/common/network:95.6"
 "source/common/http/http3:50.0"
 "source/common/tracing:94.9"
 "source/common/protobuf:94.3"
 "source/common/secret:95.2"
 "source/common/singleton:95.1"
 "source/common/api:72.9"
 "source/common/api/posix:71.8"
 "source/common/filter:96.3"
 "source/common/filter/http:96.3"
 "source/common/init:96.2"
 "source/common/json:90.6"
 "source/common/thread:0.0" # Death tests don't report LCOV
 "source/common/thread_local:95.7"
 "source/common/crypto:0.0"
 "source/common/common:96.1"
 "source/common/common/posix:94.1"
 "source/common/signal:90.4"
 "source/common/watchdog:42.9" # Death tests don't report LCOV
 "source/exe:93.7"
 "source/extensions:96.3"
 "source/extensions/common:94.4"
 "source/extensions/common/crypto:91.5"
 "source/extensions/common/tap:95.1"
 "source/extensions/common/wasm:85.4"
 "source/extensions/common/wasm/v8:85.4"
 "source/extensions/common/wasm/null:77.8"
 "source/extensions/filters/network/sni_cluster:90.3"
 "source/extensions/filters/network/sni_dynamic_forward_proxy:90.9"
 "source/extensions/filters/network/dubbo_proxy:96.1"
 "source/extensions/filters/network/dubbo_proxy/router:95.1"
 "source/extensions/filters/network/mongo_proxy:94.0"
 "source/extensions/filters/network/common:96.1"
 "source/extensions/filters/network/common/redis:96.2"
 "source/extensions/filters/network/http_connection_manager:95.2"
 "source/extensions/filters/http/cache:92.4"
 "source/extensions/filters/http/cache/simple_http_cache:95.2"
 "source/extensions/filters/http/dynamic_forward_proxy:94.9"
 "source/extensions/filters/http/ip_tagging:91.2"
 "source/extensions/filters/http/grpc_json_transcoder:93.3"
 "source/extensions/filters/http/oauth2:96.5"
 "source/extensions/filters/listener:96.0"
 "source/extensions/filters/listener/tls_inspector:92.4"
 "source/extensions/filters/listener/http_inspector:93.3"
 "source/extensions/filters/udp:91.1"
 "source/extensions/filters/udp/dns_filter:96.9"
 "source/extensions/filters/common:94.7"
 "source/extensions/filters/common/expr:92.2"
 "source/extensions/filters/common/rbac:87.1"
 "source/extensions/filters/common/fault:94.3"
 "source/extensions/grpc_credentials:92.0"
 "source/extensions/health_checkers:95.9"
 "source/extensions/health_checkers/redis:95.9"
 "source/extensions/quic_listeners:84.8"
 "source/extensions/quic_listeners/quiche:84.8"
 "source/extensions/stat_sinks/statsd:85.2"
 "source/extensions/tracers:96.0"
 "source/extensions/tracers/opencensus:91.2"
 "source/extensions/tracers/xray:94.0"
 "source/extensions/transport_sockets:95.3"
 "source/extensions/transport_sockets/tap:95.6"
 "source/extensions/transport_sockets/tls:94.2"
 "source/extensions/transport_sockets/tls/ocsp:95.3"
 "source/extensions/transport_sockets/tls/private_key:76.9"
+"source/extensions/wasm_runtime:50.0" 
+"source/extensions/wasm_runtime/wasmtime:0.0" # Not enabled in coverage build
+"source/extensions/wasm_runtime/wavm:0.0" # Noe enabled in coverage build
 "source/extensions/watchdog:69.6" # Death tests within extensions
 "source/extensions/watchdog/profile_action:84.9"
 "source/server:94.6"
 "source/server/config_validation:76.6"
 "source/server/admin:95.2"
 )
 
 [[ -z "${SRCDIR}" ]] && SRCDIR="${PWD}"
