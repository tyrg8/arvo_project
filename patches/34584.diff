commit 6af596d9e8a0dfd9c175b7e56b848b969af191ae
Author: Ali Mohammad Pur <mpfard@serenityos.org>
Date:   Sat May 22 23:33:26 2021 +0430

    LibJS+LibWeb: Make Uint8ClampedArray use TypedArray
    
    Instead of being its own separate unrelated class.
    This automatically makes typed array properties available to it,
    as well as making it available to the runtime.

diff --git a/Userland/Libraries/LibJS/CMakeLists.txt b/Userland/Libraries/LibJS/CMakeLists.txt
index 86a78ff059..6bf8f45258 100644
--- a/Userland/Libraries/LibJS/CMakeLists.txt
+++ b/Userland/Libraries/LibJS/CMakeLists.txt
@@ -1,91 +1,90 @@
 set(SOURCES
     AST.cpp
     Console.cpp
     Heap/Allocator.cpp
     Heap/Handle.cpp
     Heap/HeapBlock.cpp
     Heap/Heap.cpp
     Interpreter.cpp
     Lexer.cpp
     MarkupGenerator.cpp
     Parser.cpp
     Runtime/Array.cpp
     Runtime/ArrayBuffer.cpp
     Runtime/ArrayBufferConstructor.cpp
     Runtime/ArrayBufferPrototype.cpp
     Runtime/ArrayConstructor.cpp
     Runtime/ArrayIterator.cpp
     Runtime/ArrayIteratorPrototype.cpp
     Runtime/ArrayPrototype.cpp
     Runtime/BigInt.cpp
     Runtime/BigIntConstructor.cpp
     Runtime/BigIntObject.cpp
     Runtime/BigIntPrototype.cpp
     Runtime/BooleanConstructor.cpp
     Runtime/BooleanObject.cpp
     Runtime/BooleanPrototype.cpp
     Runtime/BoundFunction.cpp
     Runtime/ConsoleObject.cpp
     Runtime/DateConstructor.cpp
     Runtime/Date.cpp
     Runtime/DatePrototype.cpp
     Runtime/ErrorConstructor.cpp
     Runtime/Error.cpp
     Runtime/ErrorPrototype.cpp
     Runtime/ErrorTypes.cpp
     Runtime/Exception.cpp
     Runtime/FunctionConstructor.cpp
     Runtime/Function.cpp
     Runtime/FunctionPrototype.cpp
     Runtime/GlobalObject.cpp
     Runtime/IndexedProperties.cpp
     Runtime/IteratorOperations.cpp
     Runtime/IteratorPrototype.cpp
     Runtime/JSONObject.cpp
     Runtime/LexicalEnvironment.cpp
     Runtime/MarkedValueList.cpp
     Runtime/MathObject.cpp
     Runtime/NativeFunction.cpp
     Runtime/NativeProperty.cpp
     Runtime/NumberConstructor.cpp
     Runtime/NumberObject.cpp
     Runtime/NumberPrototype.cpp
     Runtime/ObjectConstructor.cpp
     Runtime/Object.cpp
     Runtime/ObjectPrototype.cpp
     Runtime/PrimitiveString.cpp
     Runtime/Promise.cpp
     Runtime/PromiseConstructor.cpp
     Runtime/PromiseJobs.cpp
     Runtime/PromisePrototype.cpp
     Runtime/PromiseReaction.cpp
     Runtime/PromiseResolvingFunction.cpp
     Runtime/ProxyConstructor.cpp
     Runtime/ProxyObject.cpp
     Runtime/Reference.cpp
     Runtime/ReflectObject.cpp
     Runtime/RegExpConstructor.cpp
     Runtime/RegExpObject.cpp
     Runtime/RegExpPrototype.cpp
     Runtime/ScopeObject.cpp
     Runtime/ScriptFunction.cpp
     Runtime/Shape.cpp
     Runtime/StringConstructor.cpp
     Runtime/StringIterator.cpp
     Runtime/StringIteratorPrototype.cpp
     Runtime/StringObject.cpp
     Runtime/StringPrototype.cpp
     Runtime/Symbol.cpp
     Runtime/SymbolConstructor.cpp
     Runtime/SymbolObject.cpp
     Runtime/SymbolPrototype.cpp
     Runtime/TypedArray.cpp
     Runtime/TypedArrayConstructor.cpp
     Runtime/TypedArrayPrototype.cpp
-    Runtime/Uint8ClampedArray.cpp
     Runtime/VM.cpp
     Runtime/Value.cpp
     Runtime/WithScope.cpp
     SyntaxHighlighter.cpp
     Token.cpp
 )
diff --git a/Userland/Libraries/LibJS/Forward.h b/Userland/Libraries/LibJS/Forward.h
index 7914f42003..3d5737ec85 100644
--- a/Userland/Libraries/LibJS/Forward.h
+++ b/Userland/Libraries/LibJS/Forward.h
@@ -1,98 +1,99 @@
 /*
  * Copyright (c) 2020, Andreas Kling <kling@serenityos.org>
  *
  * SPDX-License-Identifier: BSD-2-Clause
  */
 
 #pragma once
 
 #define JS_DECLARE_NATIVE_FUNCTION(name) \
     static JS::Value name(JS::VM&, JS::GlobalObject&)
 
 #define JS_DECLARE_NATIVE_GETTER(name) \
     static JS::Value name(JS::VM&, JS::GlobalObject&)
 
 #define JS_DECLARE_NATIVE_SETTER(name) \
     static void name(JS::VM&, JS::GlobalObject&, JS::Value)
 
 #define JS_DEFINE_NATIVE_FUNCTION(name) \
     JS::Value name([[maybe_unused]] JS::VM& vm, [[maybe_unused]] JS::GlobalObject& global_object)
 
 #define JS_DEFINE_NATIVE_GETTER(name) \
     JS::Value name([[maybe_unused]] JS::VM& vm, [[maybe_unused]] JS::GlobalObject& global_object)
 
 #define JS_DEFINE_NATIVE_SETTER(name) \
     void name([[maybe_unused]] JS::VM& vm, [[maybe_unused]] JS::GlobalObject& global_object, [[maybe_unused]] JS::Value value)
 
 // NOTE: Proxy is not included here as it doesn't have a prototype - m_proxy_constructor is initialized separately.
 #define JS_ENUMERATE_NATIVE_OBJECTS_EXCLUDING_TEMPLATES                                           \
     __JS_ENUMERATE(Array, array, ArrayPrototype, ArrayConstructor, void)                          \
     __JS_ENUMERATE(ArrayBuffer, array_buffer, ArrayBufferPrototype, ArrayBufferConstructor, void) \
     __JS_ENUMERATE(BigIntObject, bigint, BigIntPrototype, BigIntConstructor, void)                \
     __JS_ENUMERATE(BooleanObject, boolean, BooleanPrototype, BooleanConstructor, void)            \
     __JS_ENUMERATE(Date, date, DatePrototype, DateConstructor, void)                              \
     __JS_ENUMERATE(Error, error, ErrorPrototype, ErrorConstructor, void)                          \
     __JS_ENUMERATE(Function, function, FunctionPrototype, FunctionConstructor, void)              \
     __JS_ENUMERATE(NumberObject, number, NumberPrototype, NumberConstructor, void)                \
     __JS_ENUMERATE(Object, object, ObjectPrototype, ObjectConstructor, void)                      \
     __JS_ENUMERATE(Promise, promise, PromisePrototype, PromiseConstructor, void)                  \
     __JS_ENUMERATE(RegExpObject, regexp, RegExpPrototype, RegExpConstructor, void)                \
     __JS_ENUMERATE(StringObject, string, StringPrototype, StringConstructor, void)                \
     __JS_ENUMERATE(SymbolObject, symbol, SymbolPrototype, SymbolConstructor, void)
 
 #define JS_ENUMERATE_NATIVE_OBJECTS                 \
     JS_ENUMERATE_NATIVE_OBJECTS_EXCLUDING_TEMPLATES \
     __JS_ENUMERATE(TypedArray, typed_array, TypedArrayPrototype, TypedArrayConstructor, void)
 
 #define JS_ENUMERATE_ERROR_SUBCLASSES                                                                                                      \
     __JS_ENUMERATE(EvalError, eval_error, EvalErrorPrototype, EvalErrorConstructor, void)                                                  \
     __JS_ENUMERATE(InternalError, internal_error, InternalErrorPrototype, InternalErrorConstructor, void)                                  \
     __JS_ENUMERATE(InvalidCharacterError, invalid_character_error, InvalidCharacterErrorPrototype, InvalidCharacterErrorConstructor, void) \
     __JS_ENUMERATE(RangeError, range_error, RangeErrorPrototype, RangeErrorConstructor, void)                                              \
     __JS_ENUMERATE(ReferenceError, reference_error, ReferenceErrorPrototype, ReferenceErrorConstructor, void)                              \
     __JS_ENUMERATE(SyntaxError, syntax_error, SyntaxErrorPrototype, SyntaxErrorConstructor, void)                                          \
     __JS_ENUMERATE(TypeError, type_error, TypeErrorPrototype, TypeErrorConstructor, void)                                                  \
     __JS_ENUMERATE(URIError, uri_error, URIErrorPrototype, URIErrorConstructor, void)
 
-#define JS_ENUMERATE_TYPED_ARRAYS                                                                      \
-    __JS_ENUMERATE(Uint8Array, uint8_array, Uint8ArrayPrototype, Uint8ArrayConstructor, u8)            \
-    __JS_ENUMERATE(Uint16Array, uint16_array, Uint16ArrayPrototype, Uint16ArrayConstructor, u16)       \
-    __JS_ENUMERATE(Uint32Array, uint32_array, Uint32ArrayPrototype, Uint32ArrayConstructor, u32)       \
-    __JS_ENUMERATE(Int8Array, int8_array, Int8ArrayPrototype, Int8ArrayConstructor, i8)                \
-    __JS_ENUMERATE(Int16Array, int16_array, Int16ArrayPrototype, Int16ArrayConstructor, i16)           \
-    __JS_ENUMERATE(Int32Array, int32_array, Int32ArrayPrototype, Int32ArrayConstructor, i32)           \
-    __JS_ENUMERATE(Float32Array, float32_array, Float32ArrayPrototype, Float32ArrayConstructor, float) \
+#define JS_ENUMERATE_TYPED_ARRAYS                                                                                               \
+    __JS_ENUMERATE(Uint8Array, uint8_array, Uint8ArrayPrototype, Uint8ArrayConstructor, u8)                                     \
+    __JS_ENUMERATE(Uint8ClampedArray, uint8_clamped_array, Uint8ClampedArrayPrototype, Uint8ClampedArrayConstructor, ClampedU8) \
+    __JS_ENUMERATE(Uint16Array, uint16_array, Uint16ArrayPrototype, Uint16ArrayConstructor, u16)                                \
+    __JS_ENUMERATE(Uint32Array, uint32_array, Uint32ArrayPrototype, Uint32ArrayConstructor, u32)                                \
+    __JS_ENUMERATE(Int8Array, int8_array, Int8ArrayPrototype, Int8ArrayConstructor, i8)                                         \
+    __JS_ENUMERATE(Int16Array, int16_array, Int16ArrayPrototype, Int16ArrayConstructor, i16)                                    \
+    __JS_ENUMERATE(Int32Array, int32_array, Int32ArrayPrototype, Int32ArrayConstructor, i32)                                    \
+    __JS_ENUMERATE(Float32Array, float32_array, Float32ArrayPrototype, Float32ArrayConstructor, float)                          \
     __JS_ENUMERATE(Float64Array, float64_array, Float64ArrayPrototype, Float64ArrayConstructor, double)
 
 #define JS_ENUMERATE_ITERATOR_PROTOTYPES          \
     __JS_ENUMERATE(Iterator, iterator)            \
     __JS_ENUMERATE(ArrayIterator, array_iterator) \
     __JS_ENUMERATE(StringIterator, string_iterator)
 
 #define JS_ENUMERATE_BUILTIN_TYPES \
     JS_ENUMERATE_NATIVE_OBJECTS    \
     JS_ENUMERATE_ERROR_SUBCLASSES  \
     JS_ENUMERATE_TYPED_ARRAYS
 
 #define JS_ENUMERATE_WELL_KNOWN_SYMBOLS                      \
     __JS_ENUMERATE(iterator, iterator)                       \
     __JS_ENUMERATE(asyncIterator, async_iterator)            \
     __JS_ENUMERATE(match, match)                             \
     __JS_ENUMERATE(matchAll, match_all)                      \
     __JS_ENUMERATE(replace, replace)                         \
     __JS_ENUMERATE(search, search)                           \
     __JS_ENUMERATE(split, split)                             \
     __JS_ENUMERATE(hasInstance, has_instance)                \
     __JS_ENUMERATE(isConcatSpreadable, is_concat_spreadable) \
     __JS_ENUMERATE(unscopables, unscopables)                 \
     __JS_ENUMERATE(species, species)                         \
     __JS_ENUMERATE(toPrimitive, to_primitive)                \
     __JS_ENUMERATE(toStringTag, to_string_tag)
 
 #define JS_ENUMERATE_REGEXP_FLAGS                           \
     __JS_ENUMERATE(global, global, g, Global)               \
     __JS_ENUMERATE(ignoreCase, ignore_case, i, Insensitive) \
     __JS_ENUMERATE(multiline, multiline, m, Multiline)      \
     __JS_ENUMERATE(dotAll, dot_all, s, SingleLine)          \
     __JS_ENUMERATE(unicode, unicode, u, Unicode)            \
     __JS_ENUMERATE(sticky, sticky, y, Sticky)
@@ -131,7 +132,6 @@ class Shape;
 class Statement;
 class Symbol;
 class Token;
-class Uint8ClampedArray;
 class VM;
 class Value;
 enum class DeclarationKind;
@@ -146,7 +146,10 @@ class ProxyConstructor;
 class TypedArrayConstructor;
 class TypedArrayPrototype;
 
+// Tag type used to differentiate between u8 as used by Uint8Array and u8 as used by Uint8ClampedArray.
+struct ClampedU8;
+
 #define __JS_ENUMERATE(ClassName, snake_name, ConstructorName, PrototypeName, ArrayType) \
     class ClassName;                                                                     \
     class ConstructorName;                                                               \
     class PrototypeName;
diff --git a/Userland/Libraries/LibJS/Runtime/TypedArray.h b/Userland/Libraries/LibJS/Runtime/TypedArray.h
index 30bcc0f246..49a9f2ce10 100644
--- a/Userland/Libraries/LibJS/Runtime/TypedArray.h
+++ b/Userland/Libraries/LibJS/Runtime/TypedArray.h
@@ -44,75 +44,82 @@ private:
     virtual void visit_edges(Visitor&) override;
 };
 
+struct ClampedU8 {
+};
+
 template<typename T>
 class TypedArray : public TypedArrayBase {
     JS_OBJECT(TypedArray, TypedArrayBase);
 
+    using UnderlyingBufferDataType = Conditional<IsSame<ClampedU8, T>, u8, T>;
+
 public:
     virtual bool put_by_index(u32 property_index, Value value) override
     {
         if (property_index >= m_array_length)
             return Base::put_by_index(property_index, value);
 
-        if constexpr (sizeof(T) < 4) {
+        if constexpr (sizeof(UnderlyingBufferDataType) < 4) {
             auto number = value.to_i32(global_object());
             if (vm().exception())
                 return {};
+            if constexpr (IsSame<T, ClampedU8>)
+                number = clamp(number, 0, 255);
             data()[property_index] = number;
-        } else if constexpr (sizeof(T) == 4 || sizeof(T) == 8) {
+        } else if constexpr (sizeof(UnderlyingBufferDataType) == 4 || sizeof(UnderlyingBufferDataType) == 8) {
             auto number = value.to_double(global_object());
             if (vm().exception())
                 return {};
             data()[property_index] = number;
         } else {
             static_assert(DependentFalse<T>, "TypedArray::put_by_index with unhandled type size");
         }
         return true;
     }
 
     virtual Value get_by_index(u32 property_index) const override
     {
         if (property_index >= m_array_length)
             return Base::get_by_index(property_index);
 
-        if constexpr (sizeof(T) < 4) {
+        if constexpr (sizeof(UnderlyingBufferDataType) < 4) {
             return Value((i32)data()[property_index]);
-        } else if constexpr (sizeof(T) == 4 || sizeof(T) == 8) {
+        } else if constexpr (sizeof(UnderlyingBufferDataType) == 4 || sizeof(UnderlyingBufferDataType) == 8) {
             auto value = data()[property_index];
-            if constexpr (IsFloatingPoint<T>) {
+            if constexpr (IsFloatingPoint<UnderlyingBufferDataType>) {
                 return Value((double)value);
-            } else if constexpr (NumericLimits<T>::is_signed()) {
+            } else if constexpr (NumericLimits<UnderlyingBufferDataType>::is_signed()) {
                 if (value > NumericLimits<i32>::max() || value < NumericLimits<i32>::min())
                     return Value((double)value);
             } else {
                 if (value > NumericLimits<i32>::max())
                     return Value((double)value);
             }
             return Value((i32)value);
         } else {
             static_assert(DependentFalse<T>, "TypedArray::get_by_index with unhandled type size");
         }
     }
 
-    Span<const T> data() const
+    Span<const UnderlyingBufferDataType> data() const
     {
-        return { reinterpret_cast<const T*>(m_viewed_array_buffer->buffer().data() + m_byte_offset), m_array_length };
+        return { reinterpret_cast<const UnderlyingBufferDataType*>(m_viewed_array_buffer->buffer().data() + m_byte_offset), m_array_length };
     }
-    Span<T> data()
+    Span<UnderlyingBufferDataType> data()
     {
-        return { reinterpret_cast<T*>(m_viewed_array_buffer->buffer().data() + m_byte_offset), m_array_length };
+        return { reinterpret_cast<UnderlyingBufferDataType*>(m_viewed_array_buffer->buffer().data() + m_byte_offset), m_array_length };
     }
 
-    virtual size_t element_size() const override { return sizeof(T); };
+    virtual size_t element_size() const override { return sizeof(UnderlyingBufferDataType); };
 
 protected:
     TypedArray(u32 array_length, Object& prototype)
         : TypedArrayBase(prototype)
     {
-        VERIFY(!Checked<u32>::multiplication_would_overflow(array_length, sizeof(T)));
-        m_viewed_array_buffer = ArrayBuffer::create(global_object(), array_length * sizeof(T));
+        VERIFY(!Checked<u32>::multiplication_would_overflow(array_length, sizeof(UnderlyingBufferDataType)));
+        m_viewed_array_buffer = ArrayBuffer::create(global_object(), array_length * sizeof(UnderlyingBufferDataType));
         if (array_length)
             VERIFY(!data().is_null());
         m_array_length = array_length;
         m_byte_length = m_viewed_array_buffer->byte_length();
     }
diff --git a/Userland/Libraries/LibJS/Runtime/Uint8ClampedArray.cpp b/Userland/Libraries/LibJS/Runtime/Uint8ClampedArray.cpp
deleted file mode 100644
index f801c90dfd..0000000000
--- a/Userland/Libraries/LibJS/Runtime/Uint8ClampedArray.cpp
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- * Copyright (c) 2020, Andreas Kling <kling@serenityos.org>
- *
- * SPDX-License-Identifier: BSD-2-Clause
- */
-
-#include <AK/Function.h>
-#include <LibJS/Runtime/Error.h>
-#include <LibJS/Runtime/GlobalObject.h>
-#include <LibJS/Runtime/Uint8ClampedArray.h>
-
-namespace JS {
-
-Uint8ClampedArray* Uint8ClampedArray::create(GlobalObject& global_object, u32 length)
-{
-    return global_object.heap().allocate<Uint8ClampedArray>(global_object, length, *global_object.array_prototype());
-}
-
-Uint8ClampedArray::Uint8ClampedArray(u32 length, Object& prototype)
-    : Object(prototype)
-    , m_length(length)
-{
-    auto& vm = this->vm();
-    define_native_property(vm.names.length, length_getter, {});
-    m_data = (u8*)calloc(m_length, 1);
-}
-
-Uint8ClampedArray::~Uint8ClampedArray()
-{
-    VERIFY(m_data);
-    free(m_data);
-    m_data = nullptr;
-}
-
-JS_DEFINE_NATIVE_GETTER(Uint8ClampedArray::length_getter)
-{
-    auto* this_object = vm.this_value(global_object).to_object(global_object);
-    if (!this_object)
-        return {};
-    if (StringView(this_object->class_name()) != "Uint8ClampedArray") {
-        vm.throw_exception<TypeError>(global_object, ErrorType::NotA, "Uint8ClampedArray");
-        return {};
-    }
-    return Value(static_cast<const Uint8ClampedArray*>(this_object)->length());
-}
-
-bool Uint8ClampedArray::put_by_index(u32 property_index, Value value)
-{
-    if (property_index >= m_length)
-        return Base::put_by_index(property_index, value);
-    auto number = value.to_i32(global_object());
-    if (vm().exception())
-        return {};
-    m_data[property_index] = clamp(number, 0, 255);
-    return true;
-}
-
-Value Uint8ClampedArray::get_by_index(u32 property_index) const
-{
-    if (property_index >= m_length)
-        return Base::get_by_index(property_index);
-    return Value((i32)m_data[property_index]);
-}
-
-}
diff --git a/Userland/Libraries/LibJS/Runtime/Uint8ClampedArray.h b/Userland/Libraries/LibJS/Runtime/Uint8ClampedArray.h
deleted file mode 100644
index a9480096c7..0000000000
--- a/Userland/Libraries/LibJS/Runtime/Uint8ClampedArray.h
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Copyright (c) 2020, Andreas Kling <kling@serenityos.org>
- *
- * SPDX-License-Identifier: BSD-2-Clause
- */
-
-#pragma once
-
-#include <LibJS/Runtime/Object.h>
-
-namespace JS {
-
-class Uint8ClampedArray final : public Object {
-    JS_OBJECT(Uint8ClampedArray, Object);
-
-public:
-    static Uint8ClampedArray* create(GlobalObject&, u32 length);
-
-    Uint8ClampedArray(u32 length, Object& prototype);
-    virtual ~Uint8ClampedArray() override;
-
-    i32 length() const { return m_length; }
-
-    virtual bool put_by_index(u32 property_index, Value value) override;
-    virtual Value get_by_index(u32 property_index) const override;
-
-    u8* data() { return m_data; }
-    const u8* data() const { return m_data; }
-
-private:
-    JS_DECLARE_NATIVE_GETTER(length_getter);
-
-    u8* m_data { nullptr };
-    u32 m_length { 0 };
-};
-
-}
diff --git a/Userland/Libraries/LibWeb/CodeGenerators/WrapperGenerator.cpp b/Userland/Libraries/LibWeb/CodeGenerators/WrapperGenerator.cpp
index 72fc832e64..b315645c44 100644
--- a/Userland/Libraries/LibWeb/CodeGenerators/WrapperGenerator.cpp
+++ b/Userland/Libraries/LibWeb/CodeGenerators/WrapperGenerator.cpp
@@ -842,46 +842,46 @@ private:
 void generate_implementation(const IDL::Interface& interface)
 {
     StringBuilder builder;
     SourceGenerator generator { builder };
 
     generator.set("name", interface.name);
     generator.set("wrapper_class", interface.wrapper_class);
     generator.set("wrapper_base_class", interface.wrapper_base_class);
     generator.set("prototype_class", interface.prototype_class);
     generator.set("fully_qualified_name", interface.fully_qualified_name);
 
     generator.append(R"~~~(
 #include <AK/FlyString.h>
 #include <LibJS/Runtime/Array.h>
 #include <LibJS/Runtime/Error.h>
 #include <LibJS/Runtime/Function.h>
 #include <LibJS/Runtime/GlobalObject.h>
-#include <LibJS/Runtime/Uint8ClampedArray.h>
+#include <LibJS/Runtime/TypedArray.h>
 #include <LibJS/Runtime/Value.h>
 #include <LibWeb/Bindings/@prototype_class@.h>
 #include <LibWeb/Bindings/@wrapper_class@.h>
 #include <LibWeb/Bindings/CanvasRenderingContext2DWrapper.h>
 #include <LibWeb/Bindings/CommentWrapper.h>
 #include <LibWeb/Bindings/DOMImplementationWrapper.h>
 #include <LibWeb/Bindings/DocumentFragmentWrapper.h>
 #include <LibWeb/Bindings/DocumentTypeWrapper.h>
 #include <LibWeb/Bindings/DocumentWrapper.h>
 #include <LibWeb/Bindings/EventTargetWrapperFactory.h>
 #include <LibWeb/Bindings/EventWrapperFactory.h>
 #include <LibWeb/Bindings/HTMLCanvasElementWrapper.h>
 #include <LibWeb/Bindings/HTMLCollectionWrapper.h>
 #include <LibWeb/Bindings/HTMLFormElementWrapper.h>
 #include <LibWeb/Bindings/HTMLHeadElementWrapper.h>
 #include <LibWeb/Bindings/HTMLImageElementWrapper.h>
 #include <LibWeb/Bindings/HTMLTableCaptionElementWrapper.h>
 #include <LibWeb/Bindings/HTMLTableSectionElementWrapper.h>
 #include <LibWeb/Bindings/ImageDataWrapper.h>
 #include <LibWeb/Bindings/NodeWrapperFactory.h>
 #include <LibWeb/Bindings/TextWrapper.h>
 #include <LibWeb/Bindings/WindowObject.h>
 #include <LibWeb/DOM/Element.h>
 #include <LibWeb/DOM/EventListener.h>
 #include <LibWeb/HTML/HTMLElement.h>
 #include <LibWeb/Origin.h>
 
 // FIXME: This is a total hack until we can figure out the namespace for a given type somehow.
@@ -1183,80 +1183,80 @@ private:
 void generate_prototype_implementation(const IDL::Interface& interface)
 {
     StringBuilder builder;
     SourceGenerator generator { builder };
 
     generator.set("name", interface.name);
     generator.set("parent_name", interface.parent_name);
     generator.set("prototype_class", interface.prototype_class);
     generator.set("prototype_base_class", interface.prototype_base_class);
     generator.set("wrapper_class", interface.wrapper_class);
     generator.set("constructor_class", interface.constructor_class);
     generator.set("prototype_class:snakecase", interface.prototype_class.to_snakecase());
     generator.set("fully_qualified_name", interface.fully_qualified_name);
 
     generator.append(R"~~~(
 #include <AK/Function.h>
 #include <LibJS/Runtime/Array.h>
 #include <LibJS/Runtime/Error.h>
 #include <LibJS/Runtime/Function.h>
 #include <LibJS/Runtime/GlobalObject.h>
-#include <LibJS/Runtime/Uint8ClampedArray.h>
+#include <LibJS/Runtime/TypedArray.h>
 #include <LibWeb/Bindings/@prototype_class@.h>
 #include <LibWeb/Bindings/@wrapper_class@.h>
 #include <LibWeb/Bindings/CSSStyleDeclarationWrapper.h>
 #include <LibWeb/Bindings/CSSStyleSheetWrapper.h>
 #include <LibWeb/Bindings/CanvasRenderingContext2DWrapper.h>
 #include <LibWeb/Bindings/CommentWrapper.h>
 #include <LibWeb/Bindings/DOMImplementationWrapper.h>
 #include <LibWeb/Bindings/DocumentFragmentWrapper.h>
 #include <LibWeb/Bindings/DocumentTypeWrapper.h>
 #include <LibWeb/Bindings/DocumentWrapper.h>
 #include <LibWeb/Bindings/EventTargetWrapperFactory.h>
 #include <LibWeb/Bindings/EventWrapper.h>
 #include <LibWeb/Bindings/EventWrapperFactory.h>
 #include <LibWeb/Bindings/ExceptionOrUtils.h>
 #include <LibWeb/Bindings/HTMLCanvasElementWrapper.h>
 #include <LibWeb/Bindings/HTMLCollectionWrapper.h>
 #include <LibWeb/Bindings/HTMLFormElementWrapper.h>
 #include <LibWeb/Bindings/HTMLHeadElementWrapper.h>
 #include <LibWeb/Bindings/HTMLImageElementWrapper.h>
 #include <LibWeb/Bindings/HTMLTableCaptionElementWrapper.h>
 #include <LibWeb/Bindings/HTMLTableSectionElementWrapper.h>
 #include <LibWeb/Bindings/ImageDataWrapper.h>
 #include <LibWeb/Bindings/NodeWrapperFactory.h>
 #include <LibWeb/Bindings/PerformanceTimingWrapper.h>
 #include <LibWeb/Bindings/RangeWrapper.h>
 #include <LibWeb/Bindings/StyleSheetListWrapper.h>
 #include <LibWeb/Bindings/TextWrapper.h>
 #include <LibWeb/Bindings/WindowObject.h>
 #include <LibWeb/DOM/Element.h>
 #include <LibWeb/DOM/EventListener.h>
 #include <LibWeb/DOM/Range.h>
 #include <LibWeb/DOM/Window.h>
 #include <LibWeb/HTML/EventHandler.h>
 #include <LibWeb/HTML/HTMLElement.h>
 #include <LibWeb/NavigationTiming/PerformanceTiming.h>
 #include <LibWeb/Origin.h>
 
 #if __has_include(<LibWeb/Bindings/@prototype_base_class@.h>)
 #    include <LibWeb/Bindings/@prototype_base_class@.h>
 #endif
 #if __has_include(<LibWeb/CSS/@name@.h>)
 #    include <LibWeb/CSS/@name@.h>
 #elif __has_include(<LibWeb/DOM/@name@.h>)
 #    include <LibWeb/DOM/@name@.h>
 #elif __has_include(<LibWeb/HTML/@name@.h>)
 #    include <LibWeb/HTML/@name@.h>
 #elif __has_include(<LibWeb/UIEvents/@name@.h>)
 #    include <LibWeb/UIEvents/@name@.h>
 #elif __has_include(<LibWeb/HighResolutionTime/@name@.h>)
 #    include <LibWeb/HighResolutionTime/@name@.h>
 #elif __has_include(<LibWeb/NavigationTiming/@name@.h>)
 #    include <LibWeb/NavigationTiming/@name@.h>
 #elif __has_include(<LibWeb/SVG/@name@.h>)
 #    include <LibWeb/SVG/@name@.h>
 #elif __has_include(<LibWeb/XHR/@name@.h>)
 #    include <LibWeb/XHR/@name@.h>
 #endif
 
 // FIXME: This is a total hack until we can figure out the namespace for a given type somehow.
diff --git a/Userland/Libraries/LibWeb/HTML/ImageData.cpp b/Userland/Libraries/LibWeb/HTML/ImageData.cpp
index b44bb247a2..e9044829ed 100644
--- a/Userland/Libraries/LibWeb/HTML/ImageData.cpp
+++ b/Userland/Libraries/LibWeb/HTML/ImageData.cpp
@@ -1,11 +1,11 @@
 /*
  * Copyright (c) 2020, Andreas Kling <kling@serenityos.org>
  *
  * SPDX-License-Identifier: BSD-2-Clause
  */
 
 #include <LibGfx/Bitmap.h>
-#include <LibJS/Runtime/Uint8ClampedArray.h>
+#include <LibJS/Runtime/TypedArray.h>
 #include <LibWeb/HTML/ImageData.h>
 
 namespace Web::HTML {
@@ -13,21 +13,21 @@ namespace Web::HTML {
 RefPtr<ImageData> ImageData::create_with_size(JS::GlobalObject& global_object, int width, int height)
 {
     if (width <= 0 || height <= 0)
         return nullptr;
 
     if (width > 16384 || height > 16384)
         return nullptr;
 
     dbgln("Creating ImageData with {}x{}", width, height);
 
     auto* data = JS::Uint8ClampedArray::create(global_object, width * height * 4);
     if (!data)
         return nullptr;
 
     auto data_handle = JS::make_handle(data);
 
-    auto bitmap = Gfx::Bitmap::create_wrapper(Gfx::BitmapFormat::RGBA8888, Gfx::IntSize(width, height), 1, width * sizeof(u32), (u32*)data->data());
+    auto bitmap = Gfx::Bitmap::create_wrapper(Gfx::BitmapFormat::RGBA8888, Gfx::IntSize(width, height), 1, width * sizeof(u32), data->data().data());
     if (!bitmap)
         return nullptr;
     return adopt_ref(*new ImageData(bitmap.release_nonnull(), move(data_handle)));
 }
