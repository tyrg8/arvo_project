commit cc44b3bce0a7be5536df7df910b5bc73a5e4a741
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Thu Jun 29 16:12:10 2023 -0600

    [subset/cff1] Handle an error condition
    
    Fixes https://oss-fuzz.com/testcase-detail/5191907895279616

diff --git a/src/hb-subset-cff1.cc b/src/hb-subset-cff1.cc
index fb93448dc..fcd7ba421 100644
--- a/src/hb-subset-cff1.cc
+++ b/src/hb-subset-cff1.cc
@@ -419,362 +419,365 @@ namespace OT {
 struct cff1_subset_plan
 {
   cff1_subset_plan ()
   {
     for (unsigned int i = 0; i < name_dict_values_t::ValCount; i++)
       topDictModSIDs[i] = CFF_UNDEF_SID;
   }
 
   void plan_subset_encoding (const OT::cff1::accelerator_subset_t &acc, hb_subset_plan_t *plan)
   {
     const Encoding *encoding = acc.encoding;
     unsigned int  size0, size1;
     unsigned code, last_code = CFF_UNDEF_CODE - 1;
     hb_vector_t<hb_codepoint_t> supp_codes;
 
     if (unlikely (!subset_enc_code_ranges.resize (0)))
     {
       plan->check_success (false);
       return;
     }
 
     supp_codes.init ();
 
     code_pair_t glyph_to_sid_cache {0, HB_CODEPOINT_INVALID};
     subset_enc_num_codes = plan->num_output_glyphs () - 1;
     unsigned int glyph;
     auto it = hb_iter (plan->new_to_old_gid_list);
     if (it->first == 0) it++;
     auto _ = *it;
     for (glyph = 1; glyph < num_glyphs; glyph++)
     {
       hb_codepoint_t old_glyph;
       if (glyph == _.first)
       {
 	old_glyph = _.second;
 	_ = *++it;
       }
       else
       {
 	/* Retain the SID for the old missing glyph ID */
 	old_glyph = glyph;
       }
       code = acc.glyph_to_code (old_glyph, &glyph_to_sid_cache);
       if (code == CFF_UNDEF_CODE)
       {
 	subset_enc_num_codes = glyph - 1;
 	break;
       }
 
       if (code != last_code + 1)
 	subset_enc_code_ranges.push (code_pair_t {code, glyph});
       last_code = code;
 
       if (encoding != &Null (Encoding))
       {
 	hb_codepoint_t  sid = acc.glyph_to_sid (old_glyph, &glyph_to_sid_cache);
 	encoding->get_supplement_codes (sid, supp_codes);
 	for (unsigned int i = 0; i < supp_codes.length; i++)
 	  subset_enc_supp_codes.push (code_pair_t {supp_codes[i], sid});
       }
     }
     supp_codes.fini ();
 
     subset_enc_code_ranges.complete (glyph);
 
     assert (subset_enc_num_codes <= 0xFF);
     size0 = Encoding0::min_size + HBUINT8::static_size * subset_enc_num_codes;
     size1 = Encoding1::min_size + Encoding1_Range::static_size * subset_enc_code_ranges.length;
 
     if (size0 < size1)
       subset_enc_format = 0;
     else
       subset_enc_format = 1;
   }
 
-  void plan_subset_charset (const OT::cff1::accelerator_subset_t &acc, hb_subset_plan_t *plan)
+  bool plan_subset_charset (const OT::cff1::accelerator_subset_t &acc, hb_subset_plan_t *plan)
   {
     unsigned int  size0, size_ranges;
     unsigned last_sid = CFF_UNDEF_CODE - 1;
 
     if (unlikely (!subset_charset_ranges.resize (0)))
     {
       plan->check_success (false);
-      return;
+      return false;
     }
 
     code_pair_t glyph_to_sid_cache {0, HB_CODEPOINT_INVALID};
 
     unsigned num_glyphs = plan->num_output_glyphs ();
 
     if (unlikely (!subset_charset_ranges.alloc (hb_min (num_glyphs,
 							acc.num_charset_entries))))
     {
       plan->check_success (false);
-      return;
+      return false;
     }
 
     glyph_to_sid_map_t *glyph_to_sid_map = acc.cff_accelerator ?
 					   acc.cff_accelerator->glyph_to_sid_map.get_acquire () :
 					   nullptr;
     bool created_map = false;
     if (!glyph_to_sid_map && acc.cff_accelerator)
     {
       created_map = true;
       glyph_to_sid_map = acc.create_glyph_to_sid_map ();
     }
 
     auto it = hb_iter (plan->new_to_old_gid_list);
     if (it->first == 0) it++;
     auto _ = *it;
     bool not_is_cid = !acc.is_CID ();
     bool skip = !not_is_cid && glyph_to_sid_map;
     if (not_is_cid)
       sidmap.alloc (num_glyphs);
     for (hb_codepoint_t glyph = 1; glyph < num_glyphs; glyph++)
     {
       hb_codepoint_t old_glyph;
       if (glyph == _.first)
       {
 	old_glyph = _.second;
 	_ = *++it;
       }
       else
       {
 	/* Retain the SID for the old missing glyph ID */
 	old_glyph = glyph;
       }
       unsigned sid = glyph_to_sid_map ?
 		     glyph_to_sid_map->arrayZ[old_glyph].code :
 		     acc.glyph_to_sid (old_glyph, &glyph_to_sid_cache);
 
       if (not_is_cid)
 	sid = sidmap.add (sid);
 
       if (sid != last_sid + 1)
       {
 	subset_charset_ranges.push (code_pair_t {sid, glyph});
 
 	if (glyph == old_glyph && skip)
 	{
 	  glyph = hb_min (_.first - 1, glyph_to_sid_map->arrayZ[old_glyph].glyph);
 	  sid += glyph - old_glyph;
 	}
       }
       last_sid = sid;
     }
 
     if (created_map)
     {
       if ((!plan->accelerator && acc.cff_accelerator) ||
 	  !acc.cff_accelerator->glyph_to_sid_map.cmpexch (nullptr, glyph_to_sid_map))
       {
 	glyph_to_sid_map->~glyph_to_sid_map_t ();
 	hb_free (glyph_to_sid_map);
       }
     }
 
     bool two_byte = subset_charset_ranges.complete (num_glyphs);
 
     size0 = Charset0::get_size (plan->num_output_glyphs ());
     if (!two_byte)
       size_ranges = Charset1::get_size_for_ranges (subset_charset_ranges.length);
     else
       size_ranges = Charset2::get_size_for_ranges (subset_charset_ranges.length);
 
     if (size0 < size_ranges)
       subset_charset_format = 0;
     else if (!two_byte)
       subset_charset_format = 1;
     else
       subset_charset_format = 2;
+
+    return true;
   }
 
   bool collect_sids_in_dicts (const OT::cff1::accelerator_subset_t &acc)
   {
     for (unsigned int i = 0; i < name_dict_values_t::ValCount; i++)
     {
       unsigned int sid = acc.topDict.nameSIDs[i];
       if (sid != CFF_UNDEF_SID)
       {
 	topDictModSIDs[i] = sidmap.add (sid);
       }
     }
 
     if (acc.fdArray != &Null (CFF1FDArray))
       for (unsigned int i = 0; i < orig_fdcount; i++)
 	if (fdmap.has (i))
 	  (void)sidmap.add (acc.fontDicts[i].fontName);
 
     return true;
   }
 
   bool create (const OT::cff1::accelerator_subset_t &acc,
 	       hb_subset_plan_t *plan)
   {
     /* make sure notdef is first */
     hb_codepoint_t old_glyph;
     if (!plan->old_gid_for_new_gid (0, &old_glyph) || (old_glyph != 0)) return false;
 
     num_glyphs = plan->num_output_glyphs ();
     orig_fdcount = acc.fdCount;
     drop_hints = plan->flags & HB_SUBSET_FLAGS_NO_HINTING;
     desubroutinize = plan->flags & HB_SUBSET_FLAGS_DESUBROUTINIZE;
 
     subset_charset = !acc.is_predef_charset ();
     if (!subset_charset)
       /* check whether the subset renumbers any glyph IDs */
       for (const auto &_ : plan->new_to_old_gid_list)
       {
 	if (_.first != _.second)
 	{
 	  subset_charset = true;
 	  break;
 	}
       }
 
     subset_encoding = !acc.is_CID() && !acc.is_predef_encoding ();
 
     /* top dict INDEX */
     {
       /* Add encoding/charset to a (copy of) top dict as necessary */
       topdict_mod.init (&acc.topDict);
       bool need_to_add_enc = (subset_encoding && !acc.topDict.has_op (OpCode_Encoding));
       bool need_to_add_set = (subset_charset && !acc.topDict.has_op (OpCode_charset));
       if (need_to_add_enc || need_to_add_set)
       {
 	if (need_to_add_enc)
 	  topdict_mod.add_op (OpCode_Encoding);
 	if (need_to_add_set)
 	  topdict_mod.add_op (OpCode_charset);
       }
     }
 
     /* Determine re-mapping of font index as fdmap among other info */
     if (acc.fdSelect != &Null (CFF1FDSelect))
     {
 	if (unlikely (!hb_plan_subset_cff_fdselect (plan,
 				  orig_fdcount,
 				  *acc.fdSelect,
 				  subset_fdcount,
 				  info.fd_select.size,
 				  subset_fdselect_format,
 				  subset_fdselect_ranges,
 				  fdmap)))
 	return false;
     }
     else
       fdmap.identity (1);
 
     /* remove unused SIDs & reassign SIDs */
     {
       /* SIDs for name strings in dicts are added before glyph names so they fit in 16-bit int range */
       if (unlikely (!collect_sids_in_dicts (acc)))
 	return false;
       if (unlikely (sidmap.get_population () > 0x8000))	/* assumption: a dict won't reference that many strings */
 	return false;
 
-      if (subset_charset) plan_subset_charset (acc, plan);
+      if (subset_charset && !plan_subset_charset (acc, plan))
+        return false;
 
       topdict_mod.reassignSIDs (sidmap);
     }
 
     if (desubroutinize)
     {
       /* Flatten global & local subrs */
       subr_flattener_t<const OT::cff1::accelerator_subset_t, cff1_cs_interp_env_t, cff1_cs_opset_flatten_t, OpCode_endchar>
 		    flattener(acc, plan);
       if (!flattener.flatten (subset_charstrings))
 	return false;
     }
     else
     {
       cff1_subr_subsetter_t       subr_subsetter (acc, plan);
 
       /* Subset subrs: collect used subroutines, leaving all unused ones behind */
       if (!subr_subsetter.subset ())
 	return false;
 
       /* encode charstrings, global subrs, local subrs with new subroutine numbers */
       if (!subr_subsetter.encode_charstrings (subset_charstrings))
 	return false;
 
       if (!subr_subsetter.encode_globalsubrs (subset_globalsubrs))
 	return false;
 
       /* local subrs */
       if (!subset_localsubrs.resize (orig_fdcount))
 	return false;
       for (unsigned int fd = 0; fd < orig_fdcount; fd++)
       {
 	subset_localsubrs[fd].init ();
 	if (fdmap.has (fd))
 	{
 	  if (!subr_subsetter.encode_localsubrs (fd, subset_localsubrs[fd]))
 	    return false;
 	}
       }
     }
 
     /* Encoding */
     if (subset_encoding)
       plan_subset_encoding (acc, plan);
 
     /* private dicts & local subrs */
     if (!acc.is_CID ())
       fontdicts_mod.push (cff1_font_dict_values_mod_t ());
     else
     {
       + hb_iter (acc.fontDicts)
       | hb_filter ([&] (const cff1_font_dict_values_t &_)
 	{ return fdmap.has (&_ - &acc.fontDicts[0]); } )
       | hb_map ([&] (const cff1_font_dict_values_t &_)
 	{
 	  cff1_font_dict_values_mod_t mod;
 	  mod.init (&_, sidmap[_.fontName]);
 	  return mod;
 	})
       | hb_sink (fontdicts_mod)
       ;
     }
 
     return ((subset_charstrings.length == plan->num_output_glyphs ())
 	   && (fontdicts_mod.length == subset_fdcount));
   }
 
   cff1_top_dict_values_mod_t	topdict_mod;
   cff1_sub_table_info_t		info;
 
   unsigned int    num_glyphs;
   unsigned int    orig_fdcount = 0;
   unsigned int    subset_fdcount = 1;
   unsigned int    subset_fdselect_format = 0;
   hb_vector_t<code_pair_t>   subset_fdselect_ranges;
 
   /* font dict index remap table from fullset FDArray to subset FDArray.
    * set to CFF_UNDEF_CODE if excluded from subset */
   hb_inc_bimap_t   fdmap;
 
   str_buff_vec_t		subset_charstrings;
   str_buff_vec_t		subset_globalsubrs;
   hb_vector_t<str_buff_vec_t>	subset_localsubrs;
   hb_vector_t<cff1_font_dict_values_mod_t>  fontdicts_mod;
 
   bool		drop_hints = false;
 
   bool		gid_renum;
   bool		subset_encoding;
   uint8_t	subset_enc_format;
   unsigned int	subset_enc_num_codes;
   range_list_t	subset_enc_code_ranges;
   hb_vector_t<code_pair_t>  subset_enc_supp_codes;
 
   uint8_t	subset_charset_format;
   range_list_t	subset_charset_ranges;
   bool		subset_charset;
 
   remap_sid_t	sidmap;
   unsigned int	topDictModSIDs[name_dict_values_t::ValCount];
 
   bool		desubroutinize = false;
 };
 } // namespace OT
diff --git a/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5191907895279616 b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5191907895279616
new file mode 100644
index 000000000..a1936d04f
Binary files /dev/null and b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5191907895279616 differ
