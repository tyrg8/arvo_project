commit 359c74415c2b78bf2b2be3bd3e013d78f298350d
Author: Alan Modra <amodra@gmail.com>
Date:   Wed Nov 3 14:50:18 2021 +1030

    asan: assert (addr_ranges) <= (start)
    
    That assert would be more obvious if it were reported as
    "addr_ranges <= end_ranges".  Fix that by using the obvious variable
    in the final loop.  Stop the assertion by using a signed comparison:
    It's possible for the rounding up of the arange pointer to exceed the
    end of the block when the block size is fuzzed.
    
            * dwarf.c (display_debug_aranges): Use "end_ranges" in loop
            displaying ranges rather that "start".  Simplify rounding up
            to 2*address_size boundary.  Use signed comparison in loop.

diff --git a/binutils/dwarf.c b/binutils/dwarf.c
index d42dc64b397..a118c5b794e 100644
--- a/binutils/dwarf.c
+++ b/binutils/dwarf.c
@@ -7174,130 +7174,129 @@ static int
 display_debug_aranges (struct dwarf_section *section,
 		       void *file ATTRIBUTE_UNUSED)
 {
   unsigned char *start = section->start;
   unsigned char *end = start + section->size;
 
   introduce (section, false);
 
   /* It does not matter if this load fails,
      we test for that later on.  */
   load_debug_info (file);
 
   while (start < end)
     {
       unsigned char *hdrptr;
       DWARF2_Internal_ARange arange;
       unsigned char *addr_ranges;
       dwarf_vma length;
       dwarf_vma address;
       unsigned long sec_off;
       unsigned char address_size;
-      int excess;
       unsigned int offset_size;
       unsigned char *end_ranges;
 
       hdrptr = start;
       sec_off = hdrptr - section->start;
 
       SAFE_BYTE_GET_AND_INC (arange.ar_length, hdrptr, 4, end);
       if (arange.ar_length == 0xffffffff)
 	{
 	  SAFE_BYTE_GET_AND_INC (arange.ar_length, hdrptr, 8, end);
 	  offset_size = 8;
 	}
       else
 	offset_size = 4;
 
       if (arange.ar_length > (size_t) (end - hdrptr))
 	{
 	  warn (_("Debug info is corrupted, %s header at %#lx has length %s\n"),
 		section->name,
 		sec_off,
 		dwarf_vmatoa ("x", arange.ar_length));
 	  break;
 	}
       end_ranges = hdrptr + arange.ar_length;
 
       SAFE_BYTE_GET_AND_INC (arange.ar_version, hdrptr, 2, end_ranges);
       SAFE_BYTE_GET_AND_INC (arange.ar_info_offset, hdrptr, offset_size,
 			     end_ranges);
 
       if (num_debug_info_entries != DEBUG_INFO_UNAVAILABLE
 	  && num_debug_info_entries > 0
 	  && find_debug_info_for_offset (arange.ar_info_offset) == NULL)
 	warn (_(".debug_info offset of 0x%lx in %s section does not point to a CU header.\n"),
 	      (unsigned long) arange.ar_info_offset, section->name);
 
       SAFE_BYTE_GET_AND_INC (arange.ar_pointer_size, hdrptr, 1, end_ranges);
       SAFE_BYTE_GET_AND_INC (arange.ar_segment_size, hdrptr, 1, end_ranges);
 
       if (arange.ar_version != 2 && arange.ar_version != 3)
 	{
 	  /* PR 19872: A version number of 0 probably means that there is
 	     padding at the end of the .debug_aranges section.  Gold puts
 	     it there when performing an incremental link, for example.
 	     So do not generate a warning in this case.  */
 	  if (arange.ar_version)
 	    warn (_("Only DWARF 2 and 3 aranges are currently supported.\n"));
 	  break;
 	}
 
       printf (_("  Length:                   %ld\n"),
 	      (long) arange.ar_length);
       printf (_("  Version:                  %d\n"), arange.ar_version);
       printf (_("  Offset into .debug_info:  0x%lx\n"),
 	      (unsigned long) arange.ar_info_offset);
       printf (_("  Pointer Size:             %d\n"), arange.ar_pointer_size);
       printf (_("  Segment Size:             %d\n"), arange.ar_segment_size);
 
       address_size = arange.ar_pointer_size + arange.ar_segment_size;
 
       /* PR 17512: file: 001-108546-0.001:0.1.  */
       if (address_size == 0 || address_size > 8)
 	{
 	  error (_("Invalid address size in %s section!\n"),
 		 section->name);
 	  break;
 	}
 
       /* The DWARF spec does not require that the address size be a power
 	 of two, but we do.  This will have to change if we ever encounter
 	 an uneven architecture.  */
       if ((address_size & (address_size - 1)) != 0)
 	{
 	  warn (_("Pointer size + Segment size is not a power of two.\n"));
 	  break;
 	}
 
       if (address_size > 4)
 	printf (_("\n    Address            Length\n"));
       else
 	printf (_("\n    Address    Length\n"));
 
       addr_ranges = hdrptr;
 
       /* Must pad to an alignment boundary that is twice the address size.  */
-      excess = (hdrptr - start) % (2 * address_size);
-      if (excess)
-	addr_ranges += (2 * address_size) - excess;
+      addr_ranges += (2 * address_size - 1
+		      - (hdrptr - start - 1) % (2 * address_size));
 
-      start = end_ranges;
-
-      while (2u * address_size <= (size_t) (start - addr_ranges))
+      while (2 * address_size <= end_ranges - addr_ranges)
 	{
-	  SAFE_BYTE_GET_AND_INC (address, addr_ranges, address_size, start);
-	  SAFE_BYTE_GET_AND_INC (length, addr_ranges, address_size, start);
-
+	  SAFE_BYTE_GET_AND_INC (address, addr_ranges, address_size,
+				 end_ranges);
+	  SAFE_BYTE_GET_AND_INC (length, addr_ranges, address_size,
+				 end_ranges);
 	  printf ("    ");
 	  print_dwarf_vma (address, address_size);
 	  print_dwarf_vma (length, address_size);
 	  putchar ('\n');
 	}
+
+      start = end_ranges;
     }
 
   printf ("\n");
 
   return 1;
 }
 
 /* Comparison function for qsort.  */
