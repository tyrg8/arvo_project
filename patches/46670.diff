commit 4775be3d85434d4e385f43a47b783844bbfb2571
Author: Ivan Nardi <12729895+IvanNardi@users.noreply.github.com>
Date:   Wed Apr 13 18:10:56 2022 +0200

    Kerberos: fix some memory access errors (#1514)
    
    ```
    ==19724==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60e00000045e at pc 0x5620b8b3d3cc bp 0x7ffe0fda6b50 sp 0x7ffe0fda6310
    READ of size 2 at 0x60e00000045e thread T0
        #0 0x5620b8b3d3cb in __interceptor_strncpy (/home/ivan/svnrepos/nDPI/fuzz/fuzz_process_packet_with_main+0x63f3cb) (BuildId: ee53ff920c8cd4c226d8520a0d4846d8864726b6)
        #1 0x5620b8d9b69c in strncpy_lower /home/ivan/svnrepos/nDPI/src/lib/protocols/kerberos.c:208:4
        #2 0x5620b8d995a0 in krb_parse /home/ivan/svnrepos/nDPI/src/lib/protocols/kerberos.c:316:5
        #3 0x5620b8d97a90 in ndpi_search_kerberos /home/ivan/svnrepos/nDPI/src/lib/protocols/kerberos.c:687:12
        #4 0x5620b8bcef35 in check_ndpi_detection_func /home/ivan/svnrepos/nDPI/src/lib/ndpi_main.c:4996:4
        #5 0x5620b8bd1be8 in check_ndpi_udp_flow_func /home/ivan/svnrepos/nDPI/src/lib/ndpi_main.c:5072:10
        #6 0x5620b8bd159c in ndpi_check_flow_func /home/ivan/svnrepos/nDPI/src/lib/ndpi_main.c:5105:12
        #7 0x5620b8be323a in ndpi_detection_process_packet /home/ivan/svnrepos/nDPI/src/lib/ndpi_main.c:5924:15
        #8 0x5620b8b8f7e0 in LLVMFuzzerTestOneInput /home/ivan/svnrepos/nDPI/fuzz/fuzz_process_packet.c:24:3
        #9 0x5620b8b8fd1b in main /home/ivan/svnrepos/nDPI/fuzz/fuzz_process_packet.c:84:17
        #10 0x7f45b32b90b2 in __libc_start_main /build/glibc-sMfBJT/glibc-2.31/csu/../csu/libc-start.c:308:16
        #11 0x5620b8acf47d in _start (/home/ivan/svnrepos/nDPI/fuzz/fuzz_process_packet_with_main+0x5d147d) (BuildId: ee53ff920c8cd4c226d8520a0d4846d8864726b6)
    
    0x60e00000045e is located 0 bytes to the right of 158-byte region [0x60e0000003c0,0x60e00000045e)
    allocated by thread T0 here:
        #0 0x5620b8b5283e in malloc (/home/ivan/svnrepos/nDPI/fuzz/fuzz_process_packet_with_main+0x65483e) (BuildId: ee53ff920c8cd4c226d8520a0d4846d8864726b6)
        #1 0x5620b8b8fc86 in main /home/ivan/svnrepos/nDPI/fuzz/fuzz_process_packet.c:70:17
        #2 0x7f45b32b90b2 in __libc_start_main /build/glibc-sMfBJT/glibc-2.31/csu/../csu/libc-start.c:308:16
    ```
    
    ```
    protocols/kerberos.c:79:52: runtime error: left shift of 255 by 24 places cannot be represented in type 'int'
    ```
    
    Found by oss-fuzz:
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=46670
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=46636

diff --git a/src/lib/protocols/kerberos.c b/src/lib/protocols/kerberos.c
index 2694b072..e22dd9a9 100644
--- a/src/lib/protocols/kerberos.c
+++ b/src/lib/protocols/kerberos.c
@@ -39,54 +39,54 @@ static int ndpi_search_kerberos_extra(struct ndpi_detection_module_struct *ndpi_
 /* Reference: https://en.wikipedia.org/wiki/X.690#Length_octets */
 static int krb_decode_asn1_length(struct ndpi_detection_module_struct *ndpi_struct,
                                   size_t * const kasn1_offset)
 {
   struct ndpi_packet_struct * const packet = &ndpi_struct->packet;
   unsigned char length_octet;
   int length;
 
   length_octet = packet->payload[*kasn1_offset];
 
   if (length_octet == 0xFF)
   {
     /* Malformed Packet */
     return -1;
   }
 
   if ((length_octet & 0x80) == 0)
   {
     /* Definite, short */
     length = length_octet & 0x7F;
     (*kasn1_offset)++;
   } else {
     /* Definite, long or indefinite (not support by this implementation) */
     if ((length_octet & 0x7F) == 0)
     {
       /* indefinite, unsupported */
       return -1;
     }
 
     length_octet &= 0x7F;
     if (length_octet > 4 /* We support only 4 additional length octets. */ ||
         packet->payload_packet_len <= *kasn1_offset + length_octet + 1)
     {
       return -1;
     }
 
     int i = 1;
     length = 0;
     for (; i <= length_octet; ++i)
     {
-      length |= packet->payload[*kasn1_offset + i] << (length_octet - i) * 8;
+      length |= (unsigned int)packet->payload[*kasn1_offset + i] << (length_octet - i) * 8;
     }
     *kasn1_offset += i;
   }
 
   if (packet->payload_packet_len < *kasn1_offset + length)
   {
     return -1;
   }
 
   return length;
 }
 
 /* Reference: https://en.wikipedia.org/wiki/X.690#Identifier_octets */
@@ -217,107 +217,107 @@ static void strncpy_lower(char * const dst, size_t dst_siz,
 /* Reference: https://datatracker.ietf.org/doc/html/rfc4120 */
 static int krb_parse(struct ndpi_detection_module_struct * const ndpi_struct,
                      struct ndpi_flow_struct * const flow,
                      size_t payload_offset)
 {
   size_t kasn1_offset = payload_offset;
   int length, krb_version, msg_type;
   char const * text;
 
   length = krb_decode_asn1_sequence_type(ndpi_struct, &kasn1_offset);
   if (length < 0)
   {
     return -1;
   }
 
   length = krb_decode_asn1_blocks_skip(ndpi_struct, &kasn1_offset);
   if (length < 0)
   {
     return -1;
   }
 
   length = krb_decode_asn1_int_type(ndpi_struct, &kasn1_offset, &krb_version); /* pvno */
   if (length != 1 || krb_version != 5)
   {
     return -1;
   }
 
   length = krb_decode_asn1_blocks_skip(ndpi_struct, &kasn1_offset);
   if (length < 0)
   {
     return -1;
   }
 
   length = krb_decode_asn1_int_type(ndpi_struct, &kasn1_offset, &msg_type); /* msg-type */
   if (length != 1 || msg_type != 0x0d /* TGS-REP */)
   {
     return -1;
   }
 
   krb_decode_asn1_blocks_skip(ndpi_struct, &kasn1_offset);
 
   length = krb_decode_asn1_sequence_type(ndpi_struct, &kasn1_offset); /* Optional PADATA */
   if (length > 0)
   {
     kasn1_offset += length;
   }
 
   length = krb_decode_asn1_string_type(ndpi_struct, &kasn1_offset, &text);
-  if (length < 0)
+  if (length < 3)
   {
     return -1;
   }
 
   kasn1_offset += length;
   text += 2;
   length -= 2;
   if (flow->protos.kerberos.domain[0] == '\0')
   {
     strncpy_lower(flow->protos.kerberos.domain, sizeof(flow->protos.kerberos.domain),
                   text, length);
   }
 
   length = krb_decode_asn1_string_type(ndpi_struct, &kasn1_offset, NULL);
   if (length < 0)
   {
     return -1;
   }
 
   length = krb_decode_asn1_sequence_type(ndpi_struct, &kasn1_offset);
   if (length < 0)
   {
     return -1;
   }
 
   length = krb_decode_asn1_blocks_skip(ndpi_struct, &kasn1_offset);
   if (length < 0)
   {
     return -1;
   }
   kasn1_offset += length;
 
   length = krb_decode_asn1_blocks_skip(ndpi_struct, &kasn1_offset);
   if (length < 0)
   {
     return -1;
   }
 
   length = krb_decode_asn1_string_type(ndpi_struct, &kasn1_offset, &text);
-  if (length < 0)
+  if (length < 3)
   {
     return -1;
   }
 
   kasn1_offset += length;
   text += 2;
   length -= 2;
   if (flow->protos.kerberos.hostname[0] == '\0' && text[length - 1] != '$')
   {
     strncpy_lower(flow->protos.kerberos.hostname, sizeof(flow->protos.kerberos.hostname),
                   text, length);
   } else if (flow->protos.kerberos.username[0] == '\0') {
     strncpy_lower(flow->protos.kerberos.username, sizeof(flow->protos.kerberos.username),
                   text, length - 1);
   }
 
   return 0;
 }
