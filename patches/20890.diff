commit 84b066fa6e4fc29f13f96589965ad68f030c604b
Author: Cristy <mikayla-grace@urban-warrior.org>
Date:   Wed Feb 26 19:58:37 2020 -0500

    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=20890

diff --git a/coders/gradient.c b/coders/gradient.c
index 28a35afcc..f8eaefab4 100644
--- a/coders/gradient.c
+++ b/coders/gradient.c
@@ -166,119 +166,119 @@ static Image *ReadXCImage(const ImageInfo *image_info,ExceptionInfo *exception)
 static Image *ReadGRADIENTImage(const ImageInfo *image_info,
   ExceptionInfo *exception)
 {
   char
     start_color[MagickPathExtent],
     stop_color[MagickPathExtent];
 
   Image
     *image;
 
   ImageInfo
     *read_info;
 
   MagickBooleanType
     status;
 
   StopInfo
     *stops;
 
   /*
     Identify start and stop gradient colors.
   */
   assert(image_info != (const ImageInfo *) NULL);
   assert(image_info->signature == MagickCoreSignature);
   if (image_info->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",
       image_info->filename);
   assert(exception != (ExceptionInfo *) NULL);
   assert(exception->signature == MagickCoreSignature);
   (void) CopyMagickString(start_color,"white",MagickPathExtent);
   (void) CopyMagickString(stop_color,"black",MagickPathExtent);
   if (*image_info->filename != '\0')
     {
       register char
         *p;
 
       (void) CopyMagickString(start_color,image_info->filename,
         MagickPathExtent);
       for (p=start_color; (*p != '-') && (*p != '\0'); p++)
         if (*p == '(')
           {
             for (p++; (*p != ')') && (*p != '\0'); p++);
             if (*p == '\0')
               break;
           }
       if (*p == '-')
         (void) CopyMagickString(stop_color,p+1,MagickPathExtent);
       *p='\0';
     }
   /*
     Create base gradient image from start color.
   */
   read_info=CloneImageInfo(image_info);
   SetImageInfoBlob(read_info,(void *) NULL,0);
   (void) CopyMagickString(read_info->filename,start_color,MagickPathExtent);
   image=ReadXCImage(read_info,exception);
   read_info=DestroyImageInfo(read_info);
   if (image == (Image *) NULL)
     return((Image *) NULL);
   /*
     Create gradient stops.
   */
   stops=(StopInfo *) AcquireQuantumMemory(2,sizeof(*stops));
   if (stops == (StopInfo *) NULL)
     ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
   stops[0].offset=0.0;
   stops[1].offset=1.0;
   status=QueryColorCompliance(start_color,AllCompliance,&stops[0].color,
     exception);
   if (status != MagickFalse)
     status=QueryColorCompliance(stop_color,AllCompliance,&stops[1].color,
       exception);
   if (status == MagickFalse)
     {
       stops=(StopInfo *) RelinquishMagickMemory(stops);
       image=DestroyImage(image);
       return((Image *) NULL);
     }
   (void) SetImageColorspace(image,stops[0].color.colorspace,exception);
-  image->alpha_trait=stops[0].color.alpha_trait;
-  if (stops[1].color.alpha_trait != UndefinedPixelTrait)
-    image->alpha_trait=stops[1].color.alpha_trait;
+  if ((stops[0].color.alpha_trait != UndefinedPixelTrait) ||
+      (stops[1].color.alpha_trait != UndefinedPixelTrait))
+    SetImageAlpha(image,TransparentAlpha,exception);
   /*
     Paint gradient.
   */
   status=GradientImage(image,LocaleCompare(image_info->magick,"GRADIENT") == 0 ?
     LinearGradient : RadialGradient,PadSpread,stops,2,exception);
   stops=(StopInfo *) RelinquishMagickMemory(stops);
   if (status == MagickFalse)
     {
       image=DestroyImageList(image);
       return((Image *) NULL);
     }
   return(GetFirstImageInList(image));
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   R e g i s t e r G R A D I E N T I m a g e                                 %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  RegisterGRADIENTImage() adds attributes for the GRADIENT image format
 %  to the list of supported formats.  The attributes include the image format
 %  tag, a method to read and/or write the format, whether the format
 %  supports the saving of more than one frame to the same file or blob,
 %  whether the format supports native in-memory I/O, and a brief
 %  description of the format.
 %
 %  The format of the RegisterGRADIENTImage method is:
 %
 %      size_t RegisterGRADIENTImage(void)
 %
 */
