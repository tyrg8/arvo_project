commit 147aa20720112bb8d3c814c6a3cfa95837df4256
Merge: f27fa54 e47a4cc
Author: David Garske <david@wolfssl.com>
Date:   Tue Feb 22 09:59:20 2022 -0800

    Merge pull request #283 from embhorn/fix_mt_cont
    
    Allow MqttClient_WaitType to return MQTT_CODE_CONTINUE with MT

diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index 1ca1da4..ff79f72 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -245,50 +245,53 @@ static void MqttClient_RespList_Remove(MqttClient *client, MqttPendResp *rmResp)
 static int MqttClient_RespList_Find(MqttClient *client,
     MqttPacketType packet_type, word16 packet_id, MqttPendResp **retResp)
 {
     int rc = 0;
     MqttPendResp *tmpResp;
 
     if (client == NULL)
         return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_BAD_ARG);
 
 #ifdef WOLFMQTT_DEBUG_CLIENT
     #ifdef WOLFMQTT_NONBLOCK
     if (client->lastRc != MQTT_CODE_CONTINUE)
     #endif
     {
         PRINTF("PendResp Find: Type %s (%d), ID %d",
             MqttPacket_TypeDesc(packet_type), packet_type, packet_id);
     }
 #endif
 
     if (retResp)
         *retResp = NULL; /* clear */
 
     /* Find pending response entry */
     for (tmpResp = client->firstPendResp;
          tmpResp != NULL;
          tmpResp = tmpResp->next)
     {
         if (packet_type == tmpResp->packet_type &&
            (packet_id == tmpResp->packet_id))
         {
         #ifdef WOLFMQTT_DEBUG_CLIENT
-            if (client->lastRc != MQTT_CODE_CONTINUE) {
+            #if defined(WOLFMQTT_NONBLOCK) && defined(WOLFMQTT_DEBUG_CLIENT)
+            if (client->lastRc != MQTT_CODE_CONTINUE)
+            #endif
+            {
             PRINTF("PendResp Found: %p, Type %s (%d), ID %d, InProc %d, Done %d",
                 tmpResp, MqttPacket_TypeDesc(tmpResp->packet_type),
                 tmpResp->packet_type, tmpResp->packet_id,
                 tmpResp->packetProcessing, tmpResp->packetDone);
             }
         #endif
 
             if (retResp)
                 *retResp = tmpResp;
             rc = 1;
             break;
         }
     }
     return rc;
 }
 #endif /* WOLFMQTT_MULTITHREAD */
 
 #ifdef WOLFMQTT_V5
@@ -835,367 +838,365 @@ static int MqttClient_WaitType(MqttClient *client, void *packet_obj,
 wait_again:
 
     /* initialize variables */
     packet_id = 0;
     packet_type = MQTT_PACKET_TYPE_RESERVED;
 #ifdef WOLFMQTT_MULTITHREAD
     pendResp = NULL;
 #endif
     waitMatchFound = 0;
 
 #ifdef WOLFMQTT_DEBUG_CLIENT
     #ifdef WOLFMQTT_NONBLOCK
     if (client->lastRc != MQTT_CODE_CONTINUE)
     #endif
     {
         PRINTF("MqttClient_WaitType: Type %s (%d), ID %d, State %d",
             MqttPacket_TypeDesc((MqttPacketType)wait_type),
                 wait_type, wait_packet_id, mms_stat->read);
     }
 #endif
 
     switch (mms_stat->read)
     {
         case MQTT_MSG_BEGIN:
         {
         #ifdef WOLFMQTT_MULTITHREAD
             /* Check to see if packet type and id have already completed */
             rc = MqttClient_CheckPendResp(client, wait_type, wait_packet_id);
             if (rc != MQTT_CODE_ERROR_NOT_FOUND
-            #ifdef WOLFMQTT_NONBLOCK
                 && rc != MQTT_CODE_CONTINUE
-            #endif
             ) {
                 return rc;
             }
 
             /* Lock recv socket mutex */
             rc = wm_SemLock(&client->lockRecv);
             if (rc != 0) {
                 PRINTF("MqttClient_WaitType: recv lock error!");
                 return rc;
             }
             mms_stat->isReadLocked = 1;
             MQTT_TRACE_MSG("lockRecv");
         #endif
 
             /* reset the packet state used by MqttPacket_Read */
             client->packet.stat = MQTT_PK_BEGIN;
 
             mms_stat->read = MQTT_MSG_WAIT;
         }
         FALL_THROUGH;
 
         case MQTT_MSG_WAIT:
         {
             /* Wait for packet */
             rc = MqttPacket_Read(client, client->rx_buf, client->rx_buf_len,
                     timeout_ms);
             /* handle failure */
             if (rc <= 0) {
                 break;
             }
 
             /* capture length read */
             client->packet.buf_len = rc;
 
             /* Decode Packet - get type, qos and id */
             rc = MqttClient_DecodePacket(client, client->rx_buf,
                 client->packet.buf_len, NULL, &packet_type, &packet_qos,
                 &packet_id);
             if (rc < 0) {
                 break;
             }
 
         #ifdef WOLFMQTT_DEBUG_CLIENT
             PRINTF("Read Packet: Len %d, Type %d, ID %d",
                 client->packet.buf_len, packet_type, packet_id);
         #endif
 
             mms_stat->read = MQTT_MSG_HEADER;
         }
         FALL_THROUGH;
 
         case MQTT_MSG_HEADER:
         case MQTT_MSG_PAYLOAD:
         {
             MqttPublishResp resp;
             MqttPacketType use_packet_type;
 
             /* Determine if we received data for this request */
             if ((wait_type == MQTT_PACKET_TYPE_ANY ||
                  wait_type == packet_type ||
                  (MqttIsPubRespPacket(packet_type) &&
                   MqttIsPubRespPacket(wait_type))) &&
                 (wait_packet_id == 0 || wait_packet_id == packet_id))
             {
                 use_packet_obj = packet_obj;
                 if (packet_type == wait_type || wait_type == MQTT_PACKET_TYPE_ANY) {
                     /* Only stop waiting when matched or waiting for "any" */
                     waitMatchFound = 1;
                 }
             }
             else {
             #ifdef WOLFMQTT_MULTITHREAD
                 rc = wm_SemLock(&client->lockClient);
                 if (rc != 0) {
                     break; /* error */
                 }
             #endif
 
                 /* use generic packet object */
                 use_packet_obj = &client->msg;
                 /* make sure the generic client message is zero initialized */
                 XMEMSET(use_packet_obj, 0, sizeof(client->msg));
 
             #ifdef WOLFMQTT_MULTITHREAD
                 wm_SemUnlock(&client->lockClient);
             #endif
             }
             use_packet_type = packet_type;
 
         #ifdef WOLFMQTT_MULTITHREAD
             /* Check to see if we have a pending response for this packet */
             pendResp = NULL;
             rc = wm_SemLock(&client->lockClient);
             if (rc == 0) {
                 if (MqttClient_RespList_Find(client, packet_type, packet_id,
                                                                &pendResp)) {
                     /* we found packet match this incoming read packet */
                     pendResp->packetProcessing = 1;
                     if (pendResp->packet_obj != packet_obj) {
                         use_packet_obj = pendResp->packet_obj;
                         use_packet_type = pendResp->packet_type;
                         /* req from another thread... not a match */
                         waitMatchFound = 0;
                     }
                 }
                 wm_SemUnlock(&client->lockClient);
             }
             else {
                 break; /* error */
             }
         #endif /* WOLFMQTT_MULTITHREAD */
 
             /* cache publish packet id and qos for MqttClient_HandlePacket payload */
             if (use_packet_type == MQTT_PACKET_TYPE_PUBLISH &&
                   mms_stat->read == MQTT_MSG_HEADER && use_packet_obj != NULL) {
                 MqttObject* obj = (MqttObject*)use_packet_obj;
                 obj->publish.qos = packet_qos;
                 obj->publish.packet_id = packet_id;
             }
 
             /* Perform packet handling for publish callback and QoS */
             XMEMSET(&resp, 0, sizeof(resp));
             rc = MqttClient_HandlePacket(client, use_packet_type,
                 use_packet_obj, &resp, timeout_ms);
 
         #ifdef WOLFMQTT_NONBLOCK
             if (rc == MQTT_CODE_CONTINUE) {
                 break;
             }
         #endif
 
             /* handle success case */
             if (rc >= 0) {
                 rc = MQTT_CODE_SUCCESS;
             }
 
         #ifdef WOLFMQTT_MULTITHREAD
             if (pendResp) {
                 /* Mark pending response entry done */
                 if (wm_SemLock(&client->lockClient) == 0) {
                     pendResp->packetDone = 1;
                     pendResp->packet_ret = rc;
                 #ifdef WOLFMQTT_DEBUG_CLIENT
                     PRINTF("PendResp Done %p", pendResp);
                 #endif
                     pendResp = NULL;
                     wm_SemUnlock(&client->lockClient);
                 }
             }
         #endif /* WOLFMQTT_MULTITHREAD */
 
             /* are we sending ACK or done with message? */
             if (MqttIsPubRespPacket(resp.packet_type)) {
                 mms_stat->read = MQTT_MSG_ACK;
             }
             else {
                 mms_stat->read = MQTT_MSG_BEGIN;
             }
 
         #ifdef WOLFMQTT_MULTITHREAD
             /* release read lock, done reading */
             if (mms_stat->isReadLocked) {
                 mms_stat->isReadLocked = 0;
                 MQTT_TRACE_MSG("unlockRecv");
                 wm_SemUnlock(&client->lockRecv);
             }
         #endif
 
             /* if error, leave */
             if (rc != MQTT_CODE_SUCCESS) {
                 break;
             }
 
             /* if not sending an ACK, we are done */
             if (!MqttIsPubRespPacket(resp.packet_type)) {
                 break;
             }
 
         #ifdef WOLFMQTT_MULTITHREAD
             /* Lock send socket mutex */
             rc = wm_SemLock(&client->lockSend);
             if (rc != 0) break;
             mms_stat->isWriteLocked = 1;
             MQTT_TRACE_MSG("lockSend");
         #endif
 
             /* setup ACK in shared context */
             XMEMCPY(&client->packetAck, &resp, sizeof(MqttPublishResp));
         #ifdef WOLFMQTT_V5
             /* Publish QoS response needs success reason code,
              * otherwise will cause disconnect at broker */
             client->packetAck.reason_code = MQTT_REASON_SUCCESS;
         #endif
             mms_stat->write = MQTT_MSG_ACK;
             break;
         }
 
         case MQTT_MSG_ACK:
             /* go to write section below */
             break;
 
         case MQTT_MSG_AUTH:
         default:
         {
         #ifdef WOLFMQTT_DEBUG_CLIENT
             PRINTF("MqttClient_WaitType: Invalid read state %d!",
                 mms_stat->read);
         #endif
             rc = MQTT_CODE_ERROR_STAT;
             break;
         }
     } /* switch (mms_stat->read) */
 
     switch (mms_stat->write)
     {
         case MQTT_MSG_BEGIN:
         case MQTT_MSG_WAIT:
             /* wait for read to set ack */
             break;
 
         case MQTT_MSG_ACK:
         {
         #ifdef WOLFMQTT_MULTITHREAD
             if (!mms_stat->isWriteLocked) {
                 rc = wm_SemLock(&client->lockSend);
                 if (rc != 0) break;
                 mms_stat->isWriteLocked = 1;
                 MQTT_TRACE_MSG("lockSend");
             }
         #endif
 
             /* send ack */
             rc = MqttEncode_PublishResp(client->tx_buf, client->tx_buf_len,
                 client->packetAck.packet_type, &client->packetAck);
         #ifdef WOLFMQTT_DEBUG_CLIENT
             PRINTF("MqttEncode_PublishResp: Len %d, Type %s (%d), ID %d",
                 rc, MqttPacket_TypeDesc(client->packetAck.packet_type),
                     client->packetAck.packet_type, client->packetAck.packet_id);
         #endif
             if (rc > 0) {
                 client->write.len = rc;
 
                 /* Send publish response packet */
                 rc = MqttPacket_Write(client, client->tx_buf,
                     client->write.len);
                 if (rc == client->write.len) {
                     rc = 0; /* success */
                 }
             }
 
             mms_stat->write = MQTT_MSG_BEGIN;
         #ifdef WOLFMQTT_MULTITHREAD
             MQTT_TRACE_MSG("unlockSend");
             mms_stat->isWriteLocked = 0;
             wm_SemUnlock(&client->lockSend);
         #endif
             break;
         }
 
         case MQTT_MSG_AUTH:
         case MQTT_MSG_HEADER:
         case MQTT_MSG_PAYLOAD:
         default:
         #ifdef WOLFMQTT_DEBUG_CLIENT
             PRINTF("MqttClient_WaitType: Invalid write state %d!",
                 mms_stat->write);
         #endif
             rc = MQTT_TRACE_ERROR(MQTT_CODE_ERROR_STAT);
             break;
     } /* switch (mms_stat->write) */
 
 #ifdef WOLFMQTT_DEBUG_CLIENT
     if (rc != MQTT_CODE_CONTINUE) {
         PRINTF("MqttClient_WaitType: rc %d, state %d", rc, mms_stat->read);
     }
 #endif
 
     /* no data read, reset state */
     if (mms_stat->read == MQTT_MSG_WAIT) {
         mms_stat->read = MQTT_MSG_BEGIN;
     }
 
 #ifdef WOLFMQTT_NONBLOCK
     /* if nonblocking and some data has been read, do not release read lock */
     if (rc == MQTT_CODE_CONTINUE && mms_stat->read > MQTT_MSG_WAIT) {
         return rc;
     }
 #endif
 
 #ifdef WOLFMQTT_MULTITHREAD
     if (mms_stat->isReadLocked) {
         mms_stat->isReadLocked = 0;
         MQTT_TRACE_MSG("unlockRecv");
         wm_SemUnlock(&client->lockRecv);
     }
 #endif
 
 #ifdef WOLFMQTT_NONBLOCK
     #ifdef WOLFMQTT_DEBUG_CLIENT
     client->lastRc = rc;
     #endif
     if (rc == MQTT_CODE_CONTINUE) {
         return rc;
     }
 #endif
 
     if (rc < 0) {
     #ifdef WOLFMQTT_DEBUG_CLIENT
         if (rc != MQTT_CODE_CONTINUE) {
             PRINTF("MqttClient_WaitType: Failure: %s (%d)",
                 MqttClient_ReturnCodeToString(rc), rc);
         }
     #endif
         return rc;
     }
 
     if (!waitMatchFound) {
         /* if we get here, then the we are still waiting for a packet */
         mms_stat->read = MQTT_MSG_BEGIN;
         MQTT_TRACE_MSG("Wait Again");
     #ifdef WOLFMQTT_NONBLOCK
         /* for non-blocking return with code continue instead of waiting again
          * if called with packet type and id of 'any' */
         if (wait_type == MQTT_PACKET_TYPE_ANY && wait_packet_id == 0) {
             return MQTT_CODE_CONTINUE;
         }
     #endif
         goto wait_again;
     }
 
     return rc;
 }
 
 
 /* Public Functions */
@@ -1301,155 +1302,155 @@ int MqttClient_SetPropertyCallback(MqttClient *client, MqttPropertyCb propCb,
 int MqttClient_Connect(MqttClient *client, MqttConnect *mc_connect)
 {
     int rc;
 
     /* Validate required arguments */
     if (client == NULL || mc_connect == NULL) {
         return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_BAD_ARG);
     }
 
     if (mc_connect->stat.write == MQTT_MSG_BEGIN) {
     #ifdef WOLFMQTT_MULTITHREAD
         /* Lock send socket mutex */
         rc = wm_SemLock(&client->lockSend);
         if (rc != 0) {
             return rc;
         }
     #endif
 
     #ifdef WOLFMQTT_V5
         /* Use specified protocol version if set */
         mc_connect->protocol_level = client->protocol_level;
     #endif
 
         /* Encode the connect packet */
         rc = MqttEncode_Connect(client->tx_buf, client->tx_buf_len, mc_connect);
     #ifdef WOLFMQTT_DEBUG_CLIENT
         PRINTF("MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d, QoS %d",
             rc, MqttPacket_TypeDesc(MQTT_PACKET_TYPE_CONNECT),
             MQTT_PACKET_TYPE_CONNECT, 0, 0);
     #endif
         if (rc <= 0) {
             #ifdef WOLFMQTT_MULTITHREAD
                 wm_SemUnlock(&client->lockSend);
             #endif
             return rc;
         }
         client->write.len = rc;
 
     #ifdef WOLFMQTT_MULTITHREAD
         rc = wm_SemLock(&client->lockClient);
         if (rc == 0) {
             /* inform other threads of expected response */
             rc = MqttClient_RespList_Add(client, MQTT_PACKET_TYPE_CONNECT_ACK,
                     0, &mc_connect->pendResp, &mc_connect->ack);
             wm_SemUnlock(&client->lockClient);
         }
         if (rc != 0) {
             wm_SemUnlock(&client->lockSend);
             return rc; /* Error locking client */
         }
     #endif
 
         /* Send connect packet */
         rc = MqttPacket_Write(client, client->tx_buf, client->write.len);
     #ifdef WOLFMQTT_MULTITHREAD
         wm_SemUnlock(&client->lockSend);
     #endif
         if (rc != client->write.len) {
     #ifdef WOLFMQTT_MULTITHREAD
             if ((rc != MQTT_CODE_CONTINUE) &&
                 (wm_SemLock(&client->lockClient)) == 0) {
                 MqttClient_RespList_Remove(client, &mc_connect->pendResp);
                 wm_SemUnlock(&client->lockClient);
             }
     #endif
             return rc;
         }
     #ifdef WOLFMQTT_V5
         /* Enhanced authentication */
         if (client->enable_eauth == 1) {
             mc_connect->stat.write = MQTT_MSG_AUTH;
         }
         else
     #endif
         {
             mc_connect->stat.write = MQTT_MSG_WAIT;
         }
     }
 
 #ifdef WOLFMQTT_V5
     /* Enhanced authentication */
     if (mc_connect->protocol_level > MQTT_CONNECT_PROTOCOL_LEVEL_4 &&
             mc_connect->stat.write == MQTT_MSG_AUTH)
     {
         MqttAuth auth, *p_auth = &auth;
         MqttProp* prop, *conn_prop;
 
         /* Find the AUTH property in the connect structure */
         for (conn_prop = mc_connect->props;
              (conn_prop != NULL) && (conn_prop->type != MQTT_PROP_AUTH_METHOD);
              conn_prop = conn_prop->next) {
         }
         if (conn_prop == NULL) {
         #ifdef WOLFMQTT_MULTITHREAD
             if (wm_SemLock(&client->lockClient) == 0) {
                 MqttClient_RespList_Remove(client, &mc_connect->pendResp);
                 wm_SemUnlock(&client->lockClient);
             }
         #endif
             /* AUTH property was not set in connect structure */
             return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_BAD_ARG);
         }
 
         XMEMSET((void*)p_auth, 0, sizeof(MqttAuth));
 
         /* Set the authentication reason */
         p_auth->reason_code = MQTT_REASON_CONT_AUTH;
 
         /* Use the same authentication method property from connect */
         prop = MqttProps_Add(&p_auth->props);
         prop->type = MQTT_PROP_AUTH_METHOD;
         prop->data_str.str = conn_prop->data_str.str;
         prop->data_str.len = conn_prop->data_str.len;
 
         /* Send the AUTH packet */
         rc = MqttClient_Auth(client, p_auth);
         MqttClient_PropsFree(p_auth->props);
     #ifdef WOLFMQTT_NONBLOCK
         if (rc == MQTT_CODE_CONTINUE)
             return rc;
     #endif
         if (rc < 0) {
         #ifdef WOLFMQTT_MULTITHREAD
             if (wm_SemLock(&client->lockClient) == 0) {
                 MqttClient_RespList_Remove(client, &mc_connect->pendResp);
                 wm_SemUnlock(&client->lockClient);
             }
         #endif
             return rc;
         }
     }
 #endif /* WOLFMQTT_V5 */
 
     /* Wait for connect ack packet */
     rc = MqttClient_WaitType(client, &mc_connect->ack,
         MQTT_PACKET_TYPE_CONNECT_ACK, 0, client->cmd_timeout_ms);
-#ifdef WOLFMQTT_NONBLOCK
+#if defined(WOLFMQTT_NONBLOCK) || defined(WOLFMQTT_MULTITHREAD)
     if (rc == MQTT_CODE_CONTINUE)
         return rc;
 #endif
 
 #ifdef WOLFMQTT_MULTITHREAD
     if (wm_SemLock(&client->lockClient) == 0) {
         MqttClient_RespList_Remove(client, &mc_connect->pendResp);
         wm_SemUnlock(&client->lockClient);
     }
 #endif
 
     /* reset state */
     mc_connect->stat.write = MQTT_MSG_BEGIN;
 
     return rc;
 }
 
 #ifdef WOLFMQTT_TEST_NONBLOCK
@@ -1668,204 +1669,204 @@ static int MqttClient_Publish_WritePayload(MqttClient *client,
 static int MqttPublishMsg(MqttClient *client, MqttPublish *publish,
                           MqttPublishCb pubCb, int writeOnly)
 {
     int rc = MQTT_CODE_SUCCESS;
     MqttPacketType resp_type;
 
     /* Validate required arguments */
     if (client == NULL || publish == NULL) {
         return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_BAD_ARG);
     }
 
 #ifdef WOLFMQTT_V5
     /* Use specified protocol version if set */
     publish->protocol_level = client->protocol_level;
 
     /* Validate publish request against server properties */
     if ((publish->qos > client->max_qos) ||
         ((publish->retain == 1) && (client->retain_avail == 0)))
     {
         return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_SERVER_PROP);
     }
 #endif
 
     switch (publish->stat.write)
     {
         case MQTT_MSG_BEGIN:
         {
         #ifdef WOLFMQTT_MULTITHREAD
             /* Lock send socket mutex */
             rc = wm_SemLock(&client->lockSend);
             if (rc != 0) {
                 return rc;
             }
             publish->stat.isWriteLocked = 1;
             MQTT_TRACE_MSG("lockSend");
         #endif
 
             /* Encode the publish packet */
             rc = MqttEncode_Publish(client->tx_buf, client->tx_buf_len,
                     publish, pubCb ? 1 : 0);
         #ifdef WOLFMQTT_DEBUG_CLIENT
             PRINTF("MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d,"
                     " QoS %d",
                 rc, MqttPacket_TypeDesc(MQTT_PACKET_TYPE_PUBLISH),
                 MQTT_PACKET_TYPE_PUBLISH, publish->packet_id,
                 publish->qos);
         #endif
             if (rc <= 0) {
             #ifdef WOLFMQTT_MULTITHREAD
                 MQTT_TRACE_MSG("unlockSend");
                 publish->stat.isWriteLocked = 0;
                 wm_SemUnlock(&client->lockSend);
             #endif
                 return rc;
             }
             client->write.len = rc;
 
         #ifdef WOLFMQTT_MULTITHREAD
             if (publish->qos > MQTT_QOS_0) {
                 resp_type = (publish->qos == MQTT_QOS_1) ?
                         MQTT_PACKET_TYPE_PUBLISH_ACK :
                         MQTT_PACKET_TYPE_PUBLISH_COMP;
 
                 rc = wm_SemLock(&client->lockClient);
                 if (rc == 0) {
                     /* inform other threads of expected response */
                     rc = MqttClient_RespList_Add(client, resp_type,
                         publish->packet_id, &publish->pendResp, &publish->resp);
                     wm_SemUnlock(&client->lockClient);
                 }
                 if (rc != 0) {
                     MQTT_TRACE_MSG("unlockSend");
                     publish->stat.isWriteLocked = 0;
                     wm_SemUnlock(&client->lockSend);
                     return rc; /* Error locking client */
                 }
             }
         #endif
 
             publish->stat.write = MQTT_MSG_HEADER;
         }
         FALL_THROUGH;
 
         case MQTT_MSG_HEADER:
         {
             /* Send packet */
             rc = MqttPacket_Write(client, client->tx_buf, client->write.len);
         #ifdef WOLFMQTT_NONBLOCK
             if (rc == MQTT_CODE_CONTINUE)
                 return rc;
         #endif
             if (rc < 0) {
             #ifdef WOLFMQTT_MULTITHREAD
                 MQTT_TRACE_MSG("unlockSend");
                 publish->stat.isWriteLocked = 0;
                 wm_SemUnlock(&client->lockSend);
             #endif
             #ifdef WOLFMQTT_MULTITHREAD
                 if (wm_SemLock(&client->lockClient) == 0) {
                     MqttClient_RespList_Remove(client, &publish->pendResp);
                     wm_SemUnlock(&client->lockClient);
                 }
             #endif
                 return rc;
             }
 
             /* advance state */
             publish->stat.write = MQTT_MSG_PAYLOAD;
         }
         FALL_THROUGH;
 
         case MQTT_MSG_PAYLOAD:
         {
             rc = MqttClient_Publish_WritePayload(client, publish, pubCb);
         #ifdef WOLFMQTT_NONBLOCK
             if (rc == MQTT_CODE_CONTINUE)
                 return rc;
         #endif
         #ifdef WOLFMQTT_MULTITHREAD
             MQTT_TRACE_MSG("unlockSend");
             publish->stat.isWriteLocked = 0;
             wm_SemUnlock(&client->lockSend);
         #endif
 
             if (rc < 0) {
             #ifdef WOLFMQTT_MULTITHREAD
                 if (wm_SemLock(&client->lockClient) == 0) {
                     MqttClient_RespList_Remove(client, &publish->pendResp);
                     wm_SemUnlock(&client->lockClient);
                 }
             #endif
                 break;
             }
 
             /* if not expecting a reply then we are done */
             if (publish->qos == MQTT_QOS_0) {
                 break;
             }
             publish->stat.write = MQTT_MSG_WAIT;
         }
         FALL_THROUGH;
 
         case MQTT_MSG_WAIT:
         {
             /* Handle QoS */
             if (publish->qos > MQTT_QOS_0) {
                 /* Determine packet type to wait for */
                 resp_type = (publish->qos == MQTT_QOS_1) ?
                     MQTT_PACKET_TYPE_PUBLISH_ACK :
                     MQTT_PACKET_TYPE_PUBLISH_COMP;
 
             #ifdef WOLFMQTT_MULTITHREAD
                 if (writeOnly) {
                     /* another thread will handle the wait type */
                     rc = MqttClient_CheckPendResp(client, resp_type,
                         publish->packet_id);
                 }
                 else
             #endif
                 {
                     (void)writeOnly; /* not used */
                     /* Wait for publish response packet */
                     rc = MqttClient_WaitType(client, &publish->resp, resp_type,
                         publish->packet_id, client->cmd_timeout_ms);
                 }
-            #ifdef WOLFMQTT_NONBLOCK
+            #if defined(WOLFMQTT_NONBLOCK) || defined(WOLFMQTT_MULTITHREAD)
                 if (rc == MQTT_CODE_CONTINUE)
                     break;
             #endif
             #ifdef WOLFMQTT_MULTITHREAD
                 if (wm_SemLock(&client->lockClient) == 0) {
                     MqttClient_RespList_Remove(client, &publish->pendResp);
                     wm_SemUnlock(&client->lockClient);
                 }
             #endif
             }
             break;
         }
 
         case MQTT_MSG_ACK:
         case MQTT_MSG_AUTH:
         #ifdef WOLFMQTT_DEBUG_CLIENT
             PRINTF("MqttClient_Publish: Invalid state %d!",
                 publish->stat.write);
         #endif
             rc = MQTT_TRACE_ERROR(MQTT_CODE_ERROR_STAT);
             break;
     } /* switch (publish->stat) */
 
     /* reset state */
     if ((rc != MQTT_CODE_PUB_CONTINUE)
 #ifdef WOLFMQTT_NONBLOCK
          && (rc != MQTT_CODE_CONTINUE)
 #endif
         )
     {
         publish->stat.write = MQTT_MSG_BEGIN;
     }
     if (rc > 0) {
         rc = MQTT_CODE_SUCCESS;
     }
 
     return rc;
 }
@@ -1893,101 +1894,101 @@ int MqttClient_Publish_WriteOnly(MqttClient *client, MqttPublish *publish,
 int MqttClient_Subscribe(MqttClient *client, MqttSubscribe *subscribe)
 {
     int rc, i;
     MqttTopic* topic;
 
     /* Validate required arguments */
     if (client == NULL || subscribe == NULL) {
         return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_BAD_ARG);
     }
 
 #ifdef WOLFMQTT_V5
     /* Use specified protocol version if set */
     subscribe->protocol_level = client->protocol_level;
 #endif
 
     if (subscribe->stat.write == MQTT_MSG_BEGIN) {
     #ifdef WOLFMQTT_MULTITHREAD
         /* Lock send socket mutex */
         rc = wm_SemLock(&client->lockSend);
         if (rc != 0) {
             return rc;
         }
     #endif
 
         /* Encode the subscribe packet */
         rc = MqttEncode_Subscribe(client->tx_buf, client->tx_buf_len,
                 subscribe);
     #ifdef WOLFMQTT_DEBUG_CLIENT
         PRINTF("MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d",
             rc, MqttPacket_TypeDesc(MQTT_PACKET_TYPE_SUBSCRIBE),
             MQTT_PACKET_TYPE_SUBSCRIBE, subscribe->packet_id);
     #endif
         if (rc <= 0) {
         #ifdef WOLFMQTT_MULTITHREAD
             wm_SemUnlock(&client->lockSend);
         #endif
             return rc;
         }
         client->write.len = rc;
 
     #ifdef WOLFMQTT_MULTITHREAD
         rc = wm_SemLock(&client->lockClient);
         if (rc == 0) {
             /* inform other threads of expected response */
             rc = MqttClient_RespList_Add(client, MQTT_PACKET_TYPE_SUBSCRIBE_ACK,
                 subscribe->packet_id, &subscribe->pendResp, &subscribe->ack);
             wm_SemUnlock(&client->lockClient);
         }
         if (rc != 0) {
             wm_SemUnlock(&client->lockSend);
             return rc; /* Error locking client */
         }
     #endif
 
         /* Send subscribe packet */
         rc = MqttPacket_Write(client, client->tx_buf, client->write.len);
     #ifdef WOLFMQTT_MULTITHREAD
         wm_SemUnlock(&client->lockSend);
     #endif
         if (rc != client->write.len) {
         #ifdef WOLFMQTT_MULTITHREAD
             if (wm_SemLock(&client->lockClient) == 0) {
                 MqttClient_RespList_Remove(client, &subscribe->pendResp);
                 wm_SemUnlock(&client->lockClient);
             }
         #endif
             return rc;
         }
 
         subscribe->stat.write = MQTT_MSG_WAIT;
     }
 
     /* Wait for subscribe ack packet */
     rc = MqttClient_WaitType(client, &subscribe->ack,
         MQTT_PACKET_TYPE_SUBSCRIBE_ACK, subscribe->packet_id,
         client->cmd_timeout_ms);
-#ifdef WOLFMQTT_NONBLOCK
+#if defined(WOLFMQTT_NONBLOCK) || defined(WOLFMQTT_MULTITHREAD)
     if (rc == MQTT_CODE_CONTINUE)
         return rc;
 #endif
 
 #ifdef WOLFMQTT_MULTITHREAD
     if (wm_SemLock(&client->lockClient) == 0) {
         MqttClient_RespList_Remove(client, &subscribe->pendResp);
         wm_SemUnlock(&client->lockClient);
     }
 #endif
 
     /* Populate return codes */
     if (rc == MQTT_CODE_SUCCESS) {
         for (i = 0; i < subscribe->topic_count && i < MAX_MQTT_TOPICS; i++) {
             topic = &subscribe->topics[i];
             topic->return_code = subscribe->ack.return_codes[i];
         }
     }
 
     /* reset state */
     subscribe->stat.write = MQTT_MSG_BEGIN;
 
     return rc;
 }
@@ -1995,100 +1996,100 @@ int MqttClient_Subscribe(MqttClient *client, MqttSubscribe *subscribe)
 int MqttClient_Unsubscribe(MqttClient *client, MqttUnsubscribe *unsubscribe)
 {
     int rc;
 
     /* Validate required arguments */
     if (client == NULL || unsubscribe == NULL) {
         return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_BAD_ARG);
     }
 
 #ifdef WOLFMQTT_V5
     /* Use specified protocol version if set */
     unsubscribe->protocol_level = client->protocol_level;
 #endif
 
     if (unsubscribe->stat.write == MQTT_MSG_BEGIN) {
     #ifdef WOLFMQTT_MULTITHREAD
         /* Lock send socket mutex */
         rc = wm_SemLock(&client->lockSend);
         if (rc != 0) {
             return rc;
         }
     #endif
 
         /* Encode the subscribe packet */
         rc = MqttEncode_Unsubscribe(client->tx_buf, client->tx_buf_len,
             unsubscribe);
     #ifdef WOLFMQTT_DEBUG_CLIENT
         PRINTF("MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d, QoS %d",
             rc, MqttPacket_TypeDesc(MQTT_PACKET_TYPE_UNSUBSCRIBE),
             MQTT_PACKET_TYPE_UNSUBSCRIBE, unsubscribe->packet_id, 0);
     #endif
         if (rc <= 0) {
         #ifdef WOLFMQTT_MULTITHREAD
             wm_SemUnlock(&client->lockSend);
         #endif
             return rc;
         }
         client->write.len = rc;
 
     #ifdef WOLFMQTT_MULTITHREAD
         rc = wm_SemLock(&client->lockClient);
         if (rc == 0) {
             /* inform other threads of expected response */
             rc = MqttClient_RespList_Add(client,
                 MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK, unsubscribe->packet_id,
                 &unsubscribe->pendResp, &unsubscribe->ack);
             wm_SemUnlock(&client->lockClient);
         }
         if (rc != 0) {
             wm_SemUnlock(&client->lockSend); /* Error locking client */
             return rc;
         }
     #endif
 
         /* Send unsubscribe packet */
         rc = MqttPacket_Write(client, client->tx_buf, client->write.len);
     #ifdef WOLFMQTT_MULTITHREAD
         wm_SemUnlock(&client->lockSend);
     #endif
         if (rc != client->write.len) {
         #ifdef WOLFMQTT_MULTITHREAD
             if (wm_SemLock(&client->lockClient) == 0) {
                 MqttClient_RespList_Remove(client, &unsubscribe->pendResp);
                 wm_SemUnlock(&client->lockClient);
             }
         #endif
             return rc;
         }
 
         unsubscribe->stat.write = MQTT_MSG_WAIT;
     }
 
     /* Wait for unsubscribe ack packet */
     rc = MqttClient_WaitType(client, &unsubscribe->ack,
         MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK, unsubscribe->packet_id,
         client->cmd_timeout_ms);
-#ifdef WOLFMQTT_NONBLOCK
+#if defined(WOLFMQTT_NONBLOCK) || defined(WOLFMQTT_MULTITHREAD)
     if (rc == MQTT_CODE_CONTINUE)
         return rc;
 #endif
 
 #ifdef WOLFMQTT_MULTITHREAD
     if (wm_SemLock(&client->lockClient) == 0) {
         MqttClient_RespList_Remove(client, &unsubscribe->pendResp);
         wm_SemUnlock(&client->lockClient);
     }
 #endif
 
 #ifdef WOLFMQTT_V5
     if (unsubscribe->ack.props != NULL) {
         /* Release the allocated properties */
         MqttClient_PropsFree(unsubscribe->ack.props);
     }
 #endif
 
     /* reset state */
     unsubscribe->stat.write = MQTT_MSG_BEGIN;
 
     return rc;
 }
@@ -2096,85 +2097,85 @@ int MqttClient_Unsubscribe(MqttClient *client, MqttUnsubscribe *unsubscribe)
 int MqttClient_Ping_ex(MqttClient *client, MqttPing* ping)
 {
     int rc;
 
     /* Validate required arguments */
     if (client == NULL || ping == NULL) {
         return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_BAD_ARG);
     }
 
     if (ping->stat.write == MQTT_MSG_BEGIN) {
     #ifdef WOLFMQTT_MULTITHREAD
         /* Lock send socket mutex */
         rc = wm_SemLock(&client->lockSend);
         if (rc != 0) {
             return rc;
         }
     #endif
 
         /* Encode the subscribe packet */
         rc = MqttEncode_Ping(client->tx_buf, client->tx_buf_len, ping);
     #ifdef WOLFMQTT_DEBUG_CLIENT
         PRINTF("MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d, QoS %d",
             rc, MqttPacket_TypeDesc(MQTT_PACKET_TYPE_PING_REQ),
             MQTT_PACKET_TYPE_PING_REQ, 0, 0);
     #endif
         if (rc <= 0) {
         #ifdef WOLFMQTT_MULTITHREAD
             wm_SemUnlock(&client->lockSend);
         #endif
             return rc;
         }
         client->write.len = rc;
 
     #ifdef WOLFMQTT_MULTITHREAD
         rc = wm_SemLock(&client->lockClient);
         if (rc == 0) {
             /* inform other threads of expected response */
             rc = MqttClient_RespList_Add(client, MQTT_PACKET_TYPE_PING_RESP, 0,
                 &ping->pendResp, ping);
             wm_SemUnlock(&client->lockClient);
         }
         if (rc != 0) {
             wm_SemUnlock(&client->lockSend);
             return rc; /* Error locking client */
         }
     #endif
 
         /* Send ping req packet */
         rc = MqttPacket_Write(client, client->tx_buf, client->write.len);
     #ifdef WOLFMQTT_MULTITHREAD
         wm_SemUnlock(&client->lockSend);
     #endif
         if (rc != client->write.len) {
         #ifdef WOLFMQTT_MULTITHREAD
             if (wm_SemLock(&client->lockClient) == 0) {
                 MqttClient_RespList_Remove(client, &ping->pendResp);
                 wm_SemUnlock(&client->lockClient);
             }
         #endif
             return rc;
         }
 
         ping->stat.write = MQTT_MSG_WAIT;
     }
 
     /* Wait for ping resp packet */
     rc = MqttClient_WaitType(client, ping, MQTT_PACKET_TYPE_PING_RESP, 0,
         client->cmd_timeout_ms);
-#ifdef WOLFMQTT_NONBLOCK
+#if defined(WOLFMQTT_NONBLOCK) || defined(WOLFMQTT_MULTITHREAD)
     if (rc == MQTT_CODE_CONTINUE)
         return rc;
 #endif
 
 #ifdef WOLFMQTT_MULTITHREAD
     if (wm_SemLock(&client->lockClient) == 0) {
         MqttClient_RespList_Remove(client, &ping->pendResp);
         wm_SemUnlock(&client->lockClient);
     }
 #endif
 
     /* reset state */
     ping->stat.write = MQTT_MSG_BEGIN;
 
     return rc;
 }
@@ -2245,86 +2246,86 @@ int MqttClient_Disconnect_ex(MqttClient *client, MqttDisconnect *disconnect)
 #ifdef WOLFMQTT_V5
 int MqttClient_Auth(MqttClient *client, MqttAuth* auth)
 {
     int rc;
 
     /* Validate required arguments */
     if (client == NULL) {
         return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_BAD_ARG);
     }
 
     if (auth->stat.write == MQTT_MSG_BEGIN) {
     #ifdef WOLFMQTT_MULTITHREAD
         /* Lock send socket mutex */
         rc = wm_SemLock(&client->lockSend);
         if (rc != 0) {
             return rc;
         }
     #endif
 
         /* Encode the authentication packet */
         rc = MqttEncode_Auth(client->tx_buf, client->tx_buf_len, auth);
     #ifdef WOLFMQTT_DEBUG_CLIENT
         PRINTF("MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d, QoS %d",
             rc, MqttPacket_TypeDesc(MQTT_PACKET_TYPE_AUTH),
             MQTT_PACKET_TYPE_AUTH, 0, 0);
     #endif
         if (rc <= 0) {
         #ifdef WOLFMQTT_MULTITHREAD
             wm_SemUnlock(&client->lockSend);
         #endif
             return rc;
         }
         client->write.len = rc;
 
     #ifdef WOLFMQTT_MULTITHREAD
         rc = wm_SemLock(&client->lockClient);
         if (rc == 0) {
             /* inform other threads of expected response */
             rc = MqttClient_RespList_Add(client, MQTT_PACKET_TYPE_AUTH, 0,
                 &auth->pendResp, auth);
             wm_SemUnlock(&client->lockClient);
         }
         if (rc != 0) {
             wm_SemUnlock(&client->lockSend);
             return rc; /* Error locking client */
         }
     #endif
 
         /* Send authentication packet */
         rc = MqttPacket_Write(client, client->tx_buf, client->write.len);
     #ifdef WOLFMQTT_MULTITHREAD
         wm_SemUnlock(&client->lockSend);
     #endif
         if (rc != client->write.len) {
         #ifdef WOLFMQTT_MULTITHREAD
             if (wm_SemLock(&client->lockClient) == 0) {
                 MqttClient_RespList_Remove(client, &auth->pendResp);
                 wm_SemUnlock(&client->lockClient);
             }
         #endif
             return rc;
         }
 
         auth->stat.write = MQTT_MSG_WAIT;
     }
 
     /* Wait for auth packet */
     rc = MqttClient_WaitType(client, auth, MQTT_PACKET_TYPE_AUTH, 0,
         client->cmd_timeout_ms);
-#ifdef WOLFMQTT_NONBLOCK
+#if defined(WOLFMQTT_NONBLOCK) || defined(WOLFMQTT_MULTITHREAD)
     if (rc == MQTT_CODE_CONTINUE)
         return rc;
 #endif
 
 #ifdef WOLFMQTT_MULTITHREAD
     if (wm_SemLock(&client->lockClient) == 0) {
         MqttClient_RespList_Remove(client, &auth->pendResp);
         wm_SemUnlock(&client->lockClient);
     }
 #endif
 
     /* reset state */
     auth->stat.write = MQTT_MSG_BEGIN;
 
     return rc;
 }
