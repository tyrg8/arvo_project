commit 8e5e96239c4e4b4725dbff14ce9f1019e3058de8
Author: Yukihiro "Matz" Matsumoto <matz@ruby.or.jp>
Date:   Sat Aug 14 14:58:09 2021 +0900

    pack.c: fixed a overwriting bug in `pack_w` and `pack_M`.

diff --git a/mrbgems/mruby-pack/src/pack.c b/mrbgems/mruby-pack/src/pack.c
index d953ce898..e191c1d58 100644
--- a/mrbgems/mruby-pack/src/pack.c
+++ b/mrbgems/mruby-pack/src/pack.c
@@ -387,22 +387,22 @@ static int
 pack_w(mrb_state *mrb, mrb_value o, mrb_value str, mrb_int sidx, unsigned int flags)
 {
   mrb_int n = mrb_integer(o);
   size_t i;
   char *p;
 
   if (n < 0) {
     mrb_raise(mrb, E_ARGUMENT_ERROR, "can't compress negative numbers");
   }
   for (i=1; i<sizeof(mrb_int)+1; i++) {
     mrb_int mask = ~((1L<<(7*i))-1);
     if ((n & mask) == 0) break;
   }
   str = str_len_ensure(mrb, str, sidx + i);
-  p = RSTRING_PTR(str);
+  p = RSTRING_PTR(str)+sidx;
   for (size_t j=i; j>0; p++,j--) {
     mrb_int x = (n>>(7*(j-1)))&0x7f;
     *p = (char)x;
     if (j > 1) *p |= 0x80;
   }
   return i;
 }
@@ -959,59 +959,59 @@ static int
 pack_M(mrb_state *mrb, mrb_value src, mrb_value dst, mrb_int didx, int count)
 {
   static const char hex_table[] = "0123456789ABCDEF";
   char buff[1024];
   char *s = RSTRING_PTR(src);
   char *send = s + RSTRING_LEN(src);
   int i = 0, n = 0, prev = EOF;
   int dlen = 0;
 
   if (count <= 1) count = 72;
   while (s < send) {
     if ((*s > 126) ||
         (*s < 32 && *s != '\n' && *s != '\t') ||
         (*s == '=')) {
       buff[i++] = '=';
       buff[i++] = hex_table[(*s & 0xf0) >> 4];
       buff[i++] = hex_table[*s & 0x0f];
       n += 3;
       prev = EOF;
     }
     else if (*s == '\n') {
       if (prev == ' ' || prev == '\t') {
         buff[i++] = '=';
         buff[i++] = *s;
       }
       buff[i++] = *s;
       n = 0;
       prev = *s;
     }
     else {
       buff[i++] = *s;
       n++;
       prev = *s;
     }
     if (n > count) {
       buff[i++] = '=';
       buff[i++] = '\n';
       n = 0;
       prev = '\n';
     }
     if (i > 1024 - 5) {
-      str_len_ensure(mrb, dst, didx+i);
-      memcpy(RSTRING_PTR(dst), buff, i);
+      str_len_ensure(mrb, dst, didx+dlen+i);
+      memcpy(RSTRING_PTR(dst)+didx+dlen, buff, i);
       dlen += i;
       i = 0;
     }
     s++;
   }
   if (n > 0) {
     buff[i++] = '=';
     buff[i++] = '\n';
   }
   if (i > 0) {
-    str_len_ensure(mrb, dst, didx+i);
-    memcpy(RSTRING_PTR(dst), buff, i);
+    str_len_ensure(mrb, dst, didx+dlen+i);
+    memcpy(RSTRING_PTR(dst)+didx+dlen, buff, i);
     dlen += i;
   }
   return dlen;
 }
