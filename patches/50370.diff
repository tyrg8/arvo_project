commit c43a98a5ad48b9160d0b3741fe7319f4f580e26b
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Mon Aug 22 16:15:24 2022 +0100

    oss-fuzz 50370: Always fully tidy up a filter pipeline
    
    When shutting down the device, pdfwrite would flush and close the pipeline
    of filters in place for the main output stream. But s_close_filters() would
    stop the process if a filter in the pipeline threw an error. As pdfwrite
    immediately then closes the ouput file, the ultimate target of the pipeline,
    this would then later cause a crash then the garbager attempted to "sweep up"
    the errant stream objects. Or, in the non-gc use case, it would cause a
    memory leak.
    
    So change s_close_filters() to continue to destroy the filters in the pipeline
    even after an error (but strill return the relevant error), meaning the filter
    pipelines are always cleaned up, even if one or more filters has an error.

diff --git a/base/stream.c b/base/stream.c
index 6f68d7c24..6b5847257 100644
--- a/base/stream.c
+++ b/base/stream.c
@@ -1,25 +1,25 @@
-/* Copyright (C) 2001-2021 Artifex Software, Inc.
+/* Copyright (C) 2001-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 
 /* Stream package for Ghostscript interpreter */
 #include "stdio_.h"		/* includes std.h */
 #include "memory_.h"
 #include "gdebug.h"
 #include "gpcheck.h"
 #include "stream.h"
 #include "strimpl.h"
 
 /* Forward declarations */
@@ -1294,40 +1294,41 @@ s_add_filter(stream **ps, const stream_template *templat,
 int
 s_close_filters(stream **ps, stream *target)
 {
+    int code = 0;
     while (*ps != target) {
         stream *s = *ps;
         gs_memory_t *mem = s->state->memory;
         gs_memory_t *cbuf_string_memory = s->cbuf_string_memory;
         byte *sbuf = s->cbuf;
         byte *cbuf = s->cbuf_string.data;
         stream *next = s->strm;
         int status = sclose(s);
         stream_state *ss = s->state; /* sclose may set this to s */
 
-        if (status < 0)
-            return status;
+        if (code == 0)
+            code = status;
 
         if (s->cbuf_string_memory != NULL) { /* stream owns string buffer, so free it */
             gs_free_object(cbuf_string_memory, cbuf, "s_close_filters(cbuf)");
         }
 
         if (mem) {
             if (sbuf != cbuf)
                 gs_free_object(mem, sbuf, "s_close_filters(buf)");
             gs_free_object(mem, s, "s_close_filters(stream)");
             if (ss != (stream_state *)s)
                 gs_free_object(mem, ss, "s_close_filters(state)");
         }
         *ps = next;
     }
-    return 0;
+    return code;
 }
 
 /* ------ Stream closing ------ */
 
 /*
  * Finish closing a file stream.  This used to check whether it was
  * currentfile, but we don't have to do this any longer.  This replaces the
  * close procedure for the std* streams, which cannot actually be closed.
  *
  * This is exported for ziodev.c.  */
