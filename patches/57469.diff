commit 1061537efdf3874c91fd50d18f98c4b8a3518e52
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Sun Mar 26 22:40:54 2023 +0200

    malloc-fail: Fix buffer overread with HTML doctype declarations
    
    Found by OSS-Fuzz, see #344.

diff --git a/HTMLparser.c b/HTMLparser.c
index b8b6bd23..abcdfe24 100644
--- a/HTMLparser.c
+++ b/HTMLparser.c
@@ -2981,50 +2981,50 @@ static xmlChar *
 htmlParseSystemLiteral(htmlParserCtxtPtr ctxt) {
     size_t len = 0, startPosition = 0;
     int err = 0;
     int quote;
     xmlChar *ret = NULL;
 
     if ((CUR != '"') && (CUR != '\'')) {
 	htmlParseErr(ctxt, XML_ERR_LITERAL_NOT_STARTED,
 	             "SystemLiteral \" or ' expected\n", NULL, NULL);
         return(NULL);
     }
     quote = CUR;
     NEXT;
 
     if (CUR_PTR < BASE_PTR)
         return(ret);
     startPosition = CUR_PTR - BASE_PTR;
 
     while ((CUR != 0) && (CUR != quote)) {
         /* TODO: Handle UTF-8 */
         if (!IS_CHAR_CH(CUR)) {
             htmlParseErrInt(ctxt, XML_ERR_INVALID_CHAR,
                             "Invalid char in SystemLiteral 0x%X\n", CUR);
             err = 1;
         }
         NEXT;
         len++;
     }
     if (CUR != quote) {
         htmlParseErr(ctxt, XML_ERR_LITERAL_NOT_FINISHED,
                      "Unfinished SystemLiteral\n", NULL, NULL);
     } else {
-        NEXT;
         if (err == 0)
             ret = xmlStrndup((BASE_PTR+startPosition), len);
+        NEXT;
     }
 
     return(ret);
 }
 
 /**
  * htmlParsePubidLiteral:
  * @ctxt:  an HTML parser context
  *
  * parse an HTML public literal
  *
  * [12] PubidLiteral ::= '"' PubidChar* '"' | "'" (PubidChar - "'")* "'"
  *
  * Returns the PubidLiteral parsed or NULL.
  */
@@ -3033,64 +3033,64 @@ static xmlChar *
 htmlParsePubidLiteral(htmlParserCtxtPtr ctxt) {
     size_t len = 0, startPosition = 0;
     int err = 0;
     int quote;
     xmlChar *ret = NULL;
 
     if ((CUR != '"') && (CUR != '\'')) {
 	htmlParseErr(ctxt, XML_ERR_LITERAL_NOT_STARTED,
 	             "PubidLiteral \" or ' expected\n", NULL, NULL);
         return(NULL);
     }
     quote = CUR;
     NEXT;
 
     /*
      * Name ::= (Letter | '_') (NameChar)*
      */
     if (CUR_PTR < BASE_PTR)
         return(ret);
     startPosition = CUR_PTR - BASE_PTR;
 
     while ((CUR != 0) && (CUR != quote)) {
         if (!IS_PUBIDCHAR_CH(CUR)) {
             htmlParseErrInt(ctxt, XML_ERR_INVALID_CHAR,
                             "Invalid char in PubidLiteral 0x%X\n", CUR);
             err = 1;
         }
         len++;
         NEXT;
     }
 
     if (CUR != quote) {
         htmlParseErr(ctxt, XML_ERR_LITERAL_NOT_FINISHED,
                      "Unfinished PubidLiteral\n", NULL, NULL);
     } else {
-        NEXT;
         if (err == 0)
             ret = xmlStrndup((BASE_PTR + startPosition), len);
+        NEXT;
     }
 
     return(ret);
 }
 
 /**
  * htmlParseScript:
  * @ctxt:  an HTML parser context
  *
  * parse the content of an HTML SCRIPT or STYLE element
  * http://www.w3.org/TR/html4/sgml/dtd.html#Script
  * http://www.w3.org/TR/html4/sgml/dtd.html#StyleSheet
  * http://www.w3.org/TR/html4/types.html#type-script
  * http://www.w3.org/TR/html4/types.html#h-6.15
  * http://www.w3.org/TR/html4/appendix/notes.html#h-B.3.2.1
  *
  * Script data ( %Script; in the DTD) can be the content of the SCRIPT
  * element and the value of intrinsic event attributes. User agents must
  * not evaluate script data as HTML markup but instead must pass it on as
  * data to a script engine.
  * NOTES:
  * - The content is passed like CDATA
  * - the attributes for style and scripting "onXXX" are also described
  *   as CDATA but SGML allows entities references in attributes so their
  *   processing is identical as other attributes
  */
