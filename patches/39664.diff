commit 6e649e0cb6d45d72600198c25f4069f4aeb1e121
Author: Luca Deri <deri@ntop.org>
Date:   Wed Oct 13 19:21:27 2021 +0200

    Fixed issue on DGA numeric IP detection

diff --git a/src/lib/ndpi_main.c b/src/lib/ndpi_main.c
index 06edfa28..68729e07 100644
--- a/src/lib/ndpi_main.c
+++ b/src/lib/ndpi_main.c
@@ -7482,300 +7482,299 @@ static int ndpi_is_vowel(char c) {
 int ndpi_check_dga_name(struct ndpi_detection_module_struct *ndpi_str,
 			struct ndpi_flow_struct *flow,
 			char *name, u_int8_t is_hostname) {
   if(ndpi_dga_function != NULL) {
     /* A custom DGA function is defined */
     int rc = ndpi_dga_function(name, is_hostname);
 
     if(rc) {
       if(flow)
 	ndpi_set_risk(ndpi_str, flow, NDPI_SUSPICIOUS_DGA_DOMAIN);  	
     }
 
     return(rc);
   } else {
     int len, rc = 0, trigram_char_skip = 0;
     u_int8_t max_num_char_repetitions = 0, last_char = 0, num_char_repetitions = 0, num_dots = 0, num_trigram_dots = 0;
     u_int8_t max_domain_element_len = 0, curr_domain_element_len = 0, first_element_is_numeric = 1;
     ndpi_protocol_match_result ret_match;
     
     if((!name)
        || (strchr(name, '_') != NULL)
        || (endsWith(name, "in-addr.arpa", 12))
        || (endsWith(name, "ip6.arpa", 8))
        /* Ignore TLD .local .lan and .home */
        || (endsWith(name, ".local", 6))
        || (endsWith(name, ".lan", 4))
        || (endsWith(name, ".home", 5))
        )
       return(0);
 
     if(flow && (flow->detected_protocol_stack[1] != NDPI_PROTOCOL_UNKNOWN))
       return(0); /* Ignore DGA check for protocols already fully detected */
 
     if(ndpi_match_string_subprotocol(ndpi_str, name, strlen(name), &ret_match, 1) > 0)
       return(0); /* Ignore DGA for known domain names */
 
     if(isdigit(name[0])) {
       struct in_addr ip_addr;
-      char buf[22];
       
-      ip_addr.s_addr = inet_addr(buf);
-      if(strcmp(inet_ntoa(ip_addr), buf) == 0)
+      ip_addr.s_addr = inet_addr(name);
+      if(strcmp(inet_ntoa(ip_addr), name) == 0)
 	return(0); /* Ignore numeric IPs */
     }
     
     if(strncmp(name, "www.", 4) == 0)
       name = &name[4];
 
     if(ndpi_verbose_dga_detection)
       printf("[DGA check] %s\n", name);
 
     len = strlen(name);
 
     if(len >= 5) {
       int num_found = 0, num_impossible = 0, num_bigram_checks = 0,
 	num_trigram_found = 0, num_trigram_checked = 0, num_dash = 0,
 	num_digits = 0, num_vowels = 0, num_trigram_vowels = 0, num_words = 0, skip_next_bigram = 0;
       char tmp[128], *word, *tok_tmp;
       u_int i, j, max_tmp_len = sizeof(tmp)-1;
 
       len = snprintf(tmp, max_tmp_len, "%s", name);
       if(len < 0) {
 
 	if(ndpi_verbose_dga_detection)
 	  printf("[DGA] Too short");
 
 	return(0);
       } else
 	tmp[(u_int)len < max_tmp_len ? (u_int)len : max_tmp_len] = '\0';
 
       for(i=0, j=0; (i<(u_int)len) && (j<max_tmp_len); i++) {
 	tmp[j] = tolower(name[i]);
 
 	if(tmp[j] == '.') {
 	  num_dots++;
 	} else if(num_dots == 0) {
 	  if(!isdigit(tmp[j]))
 	    first_element_is_numeric = 0;
 	}
 
 	if(ndpi_is_vowel(tmp[j]))
 	  num_vowels++;
 
 	if(last_char == tmp[j]) {
 	  if(++num_char_repetitions > max_num_char_repetitions)
 	    max_num_char_repetitions = num_char_repetitions;
 	} else
 	  num_char_repetitions = 1, last_char = tmp[j];
 
 	if(isdigit(tmp[j])) {
 	  num_digits++;
 
 	  if(((j+2)<(u_int)len) && isdigit(tmp[j+1]) && (tmp[j+2] == '.')) {
 	    /* Check if there are too many digits */
 	    if(num_digits < 4)
 	      return(0); /* Double digits */
 	  }
 	}
 
 	switch(tmp[j]) {
 	case '.':
 	case '-':
 	case '_':
 	case '/':
 	case ')':
 	case '(':
 	case ';':
 	case ':':
 	case '[':
 	case ']':
 	case ' ':
 	  /*
 	    Domain/word separator chars
 
 	    NOTE:
 	    this function is used also to detect other type of issues
 	    such as invalid/suspiciuous user agent
 	  */
 	  if(curr_domain_element_len > max_domain_element_len)
 	    max_domain_element_len = curr_domain_element_len;
 
 	  curr_domain_element_len = 0;
 	  break;
 
 	default:
 	  curr_domain_element_len++;
 	  break;
 	}
 
 	j++;
       }
 
       if(num_dots == 0) /* Doesn't look like a domain name */
 	return(0);
 
       if(curr_domain_element_len > max_domain_element_len)
 	max_domain_element_len = curr_domain_element_len;
 
       if(ndpi_verbose_dga_detection)
 	printf("[DGA] [max_num_char_repetitions: %u][max_domain_element_len: %u]\n",
 	       max_num_char_repetitions, max_domain_element_len);
 
       if(
 	 (is_hostname
 	  && (num_dots > 5)
 	  && (!first_element_is_numeric)
 	  )
 	 || (max_num_char_repetitions > 5 /* num or consecutive repeated chars */)
 	 /*
 	   In case of a name with too many consecutive chars an alert is triggered
 	   This is the case for instance of the wildcard DNS query used by NetBIOS
 	   (ckaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa) and that can be exploited
 	   for reflection attacks
 	   - https://www.akamai.com/uk/en/multimedia/documents/state-of-the-internet/ddos-reflection-netbios-name-server-rpc-portmap-sentinel-udp-threat-advisory.pdf
 	   - http://ubiqx.org/cifs/NetBIOS.html
 	 */
 	 || ((max_domain_element_len >= 19 /* word too long. Example bbcbedxhgjmdobdprmen.com */) && ((num_char_repetitions > 1) || (num_digits > 1)))
 	 ) {
 	if(flow) {
 	  ndpi_set_risk(ndpi_str, flow, NDPI_SUSPICIOUS_DGA_DOMAIN);
 	}
 
 	if(ndpi_verbose_dga_detection)
 	  printf("[DGA] Found!");
 
 	return(1);
       }
 
       tmp[j] = '\0';
       len = j;
 
       for(word = strtok_r(tmp, ".", &tok_tmp); ; word = strtok_r(NULL, ".", &tok_tmp)) {
 	if(!word) break;
 
 	num_words++;
 
 	if(strlen(word) < 3) continue;
 
 	if(ndpi_verbose_dga_detection)
 	  printf("-> word(%s) [%s][len: %u]\n", word, name, (unsigned int)strlen(word));
 
 	trigram_char_skip = 0;
 
 	for(i = 0; word[i+1] != '\0'; i++) {
 	  switch(word[i]) {
 	  case '-':
 	    num_dash++;
 	    /*
 	      Let's check for double+consecutive --
 	      that are usually ok
 	      r2---sn-uxaxpu5ap5-2n5e.gvt1.com
 	    */
 	    if(word[i+1] == '-')
 	      return(0); /* Double dash */
 	    continue;
 
 	  case '_':
 	  case ':':
 	    continue;
 	    break;
 
 	  case '.':
 	    continue;
 	    break;
 	  }
 	  num_bigram_checks++;
 
 	  if(ndpi_verbose_dga_detection)
 	    printf("-> Checking %c%c\n", word[i], word[i+1]);
 
 	  if(ndpi_match_impossible_bigram(&word[i])) {
 	    if(ndpi_verbose_dga_detection)
 	      printf("IMPOSSIBLE %s\n", &word[i]);
 
 	    num_impossible++;
 	  } else {
 	    if(!skip_next_bigram) {
 	      if(ndpi_match_bigram(&word[i])) {
 		num_found++, skip_next_bigram = 1;
 	      }
 	    } else
 	      skip_next_bigram = 0;
 	  }
 
 	  if((num_trigram_dots < 2) && (word[i+2] != '\0')) {
 	    if(ndpi_verbose_dga_detection)
 	      printf("***> %s [trigram_char_skip: %u]\n", &word[i], trigram_char_skip);
 
 	    if(ndpi_is_trigram_char(word[i]) && ndpi_is_trigram_char(word[i+1]) && ndpi_is_trigram_char(word[i+2])) {
 	      if(trigram_char_skip) {
 		trigram_char_skip--;
 	      } else {
 		num_trigram_checked++;
 
 		if(ndpi_match_trigram(&word[i]))
 		  num_trigram_found++, trigram_char_skip = 2 /* 1 char overlap */;
 		else if(ndpi_verbose_dga_detection)
 		  printf("[NDPI] NO Trigram %c%c%c\n", word[i], word[i+1], word[i+2]);
 
 		/* Count vowels */
 		num_trigram_vowels += ndpi_is_vowel(word[i]) + ndpi_is_vowel(word[i+1]) + ndpi_is_vowel(word[i+2]);
 	      }
 	    } else {
 	      if(word[i] == '.')
 		num_trigram_dots++;
 
 	      trigram_char_skip = 0;
 	    }
 	  }
 	} /* for */
       } /* for */
 
       if(ndpi_verbose_dga_detection)
 	printf("[%s][num_found: %u][num_impossible: %u][num_digits: %u][num_bigram_checks: %u][num_vowels: %u/%u][num_trigram_vowels: %u][num_trigram_found: %u/%u][vowels: %u][rc: %u]\n",
 	       name, num_found, num_impossible, num_digits, num_bigram_checks, num_vowels, len, num_trigram_vowels,
 	       num_trigram_checked, num_trigram_found, num_vowels, rc);
 
       if((len > 16) && (num_dots < 3) && ((num_vowels*4) < (len-num_dots))) {
 	if((num_trigram_checked > 2) && (num_trigram_vowels >= (num_trigram_found-1)))
 	  ; /* skip me */
 	else
 	  rc = 1;
       }
 
       if(num_bigram_checks
 	 && (num_dots > 0)
 	 && ((num_found == 0) || ((num_digits > 5) && (num_words <= 3))
 	     || enough(num_found, num_impossible)
 	     || ((num_trigram_checked > 2)
 		 && ((num_trigram_found < (num_trigram_checked/2))
 		     || ((num_trigram_vowels < (num_trigram_found-1)) && (num_dash == 0) && (num_dots > 1) && (num_impossible > 0)))
 		 )
 	     )
 	 )
 	rc = 1;
 
       if((num_trigram_checked > 2) && (num_vowels == 0))
 	rc = 1;
 
       if(num_dash > 2)
 	rc = 0;
 
       if(ndpi_verbose_dga_detection) {
 	if(rc)
 	  printf("DGA %s [num_found: %u][num_impossible: %u]\n",
 		 name, num_found, num_impossible);
       }
     }
 
     if(ndpi_verbose_dga_detection)
       printf("[DGA] Result: %u\n", rc);
 
     if(rc && flow)
       ndpi_set_risk(ndpi_str, flow, NDPI_SUSPICIOUS_DGA_DOMAIN);
 
     return(rc);
   }
 }
 
 /* ******************************************************************** */
