commit 8cfb60ebb04d52d915407e149c72319379128025
Author: jeanlf <jeanlf@gpac.io>
Date:   Sun Dec 17 12:07:27 2023 +0100

    fixed potential crash on unknown uuid boxes

diff --git a/include/gpac/internal/isomedia_dev.h b/include/gpac/internal/isomedia_dev.h
index 4061f9487..dbb459b69 100644
--- a/include/gpac/internal/isomedia_dev.h
+++ b/include/gpac/internal/isomedia_dev.h
@@ -660,7 +660,7 @@ typedef struct
 /*constructor*/
 GF_Box *gf_isom_box_new(u32 boxType);
 //some boxes may have different syntax based on container. Use this constructor for this case
-GF_Box *gf_isom_box_new_ex(u32 boxType, u32 parentType, Bool skip_logs, Bool is_root_box);
+GF_Box *gf_isom_box_new_ex(u32 boxType, u32 parentType, Bool skip_logs, Bool is_root_box, Bool is_uuid);
 
 GF_Err gf_isom_box_write(GF_Box *ptr, GF_BitStream *bs);
 GF_Err gf_isom_box_read(GF_Box *ptr, GF_BitStream *bs);
diff --git a/src/isomedia/box_funcs.c b/src/isomedia/box_funcs.c
index 26993b9aa..b4b8b188a 100644
--- a/src/isomedia/box_funcs.c
+++ b/src/isomedia/box_funcs.c
@@ -95,295 +95,295 @@ u64 unused_bytes = 0;
 GF_Err gf_isom_box_parse_ex(GF_Box **outBox, GF_BitStream *bs, u32 parent_type, Bool is_root_box, u64 parent_size)
 {
 	u32 type, uuid_type, hdr_size, restore_type;
 	u64 size, start, comp_start, end;
 	char uuid[16];
 	GF_Err e;
 	GF_BitStream *uncomp_bs = NULL;
 	GF_BitStream *orig_bs = NULL;
 	u8 *uncomp_data = NULL;
 	u32 compressed_size=0;
 	GF_Box *newBox;
 	Bool skip_logs = (gf_bs_get_cookie(bs) & GF_ISOM_BS_COOKIE_NO_LOGS ) ? GF_TRUE : GF_FALSE;
 	Bool is_special = GF_TRUE;
 
 	if ((bs == NULL) || (outBox == NULL) ) return GF_BAD_PARAM;
 	*outBox = NULL;
 	if (gf_bs_available(bs) < 8) {
 		return GF_ISOM_INCOMPLETE_FILE;
 	}
 
 	comp_start = start = gf_bs_get_position(bs);
 
 	uuid_type = 0;
 	size = (u64) gf_bs_read_u32(bs);
 	hdr_size = 4;
 	/*fix for some boxes found in some old hinted files*/
 	if ((size >= 2) && (size <= 4)) {
 		size = 4;
 		type = GF_ISOM_BOX_TYPE_VOID;
 	} else {
 		type = gf_bs_read_u32(bs);
 		hdr_size += 4;
 		/*no size means till end of file - EXCEPT FOR some old QuickTime boxes...*/
 		if (type == GF_ISOM_BOX_TYPE_TOTL)
 			size = 12;
 		if (!size) {
 			if (is_root_box) {
 				if (!skip_logs) {
 					GF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, ("[iso file] Warning Read Box type %s (0x%08X) size 0 reading till the end of file\n", gf_4cc_to_str(type), type));
 				}
 				size = gf_bs_available(bs) + 8;
 			} else {
 				if (!skip_logs) {
 					GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, ("[iso file] Read Box type %s (0x%08X) at position "LLU" has size 0 but is not at root/file level. Forbidden, skipping end of parent box !\n", gf_4cc_to_str(type), type, start));
 					return GF_SKIP_BOX;
 				}
 				return GF_OK;
 			}
 		}
 		if ((is_root_box && (size>=8))
 			|| (type==GF_QT_BOX_TYPE_CMOV)
 		) {
 			u32 do_uncompress = 0;
 			u8 *compb = NULL;
 			u32 extra_bytes = 0;
 			u32 osize = 0;
 			u32 otype = type;
 
 			if (type==GF_4CC('!', 'm', 'o', 'v')) {
 				do_uncompress = 1;
 				type = GF_ISOM_BOX_TYPE_MOOV;
 			}
 			else if (type==GF_QT_BOX_TYPE_CMOV) {
 				do_uncompress = 2;
 				u32 cbtype, cbsize, ctype;
 				//parse child boxes directly
 				cbsize = gf_bs_read_u32(bs);
 				if (cbsize != 12) return GF_ISOM_INVALID_FILE;
 				cbtype = gf_bs_read_u32(bs);
 				if (cbtype != GF_QT_BOX_TYPE_DCOM) return GF_ISOM_INVALID_FILE;
 				ctype = gf_bs_read_u32(bs);
 				if (ctype != GF_4CC('z', 'l', 'i', 'b')) return GF_NOT_SUPPORTED;
 				cbsize = gf_bs_read_u32(bs);
 				if (cbsize <= 12) return GF_ISOM_INVALID_FILE;
 				cbtype = gf_bs_read_u32(bs);
 				if (cbtype != GF_QT_BOX_TYPE_CMVD) return GF_ISOM_INVALID_FILE;
 
 				//uncompressed size
 				gf_bs_read_u32(bs);
 				extra_bytes = 6*4;
 				parent_size=0;
 				parent_type=type;
 				type = cbtype;
 			}
 #ifndef GPAC_DISABLE_ISOM_FRAGMENTS
 			else if (type==GF_4CC('!', 'm', 'o', 'f')) {
 				do_uncompress = 1;
 				type = GF_ISOM_BOX_TYPE_MOOF;
 			}
 			else if (type==GF_4CC('!', 's', 'i', 'x')) {
 				do_uncompress = 1;
 				type = GF_ISOM_BOX_TYPE_SIDX;
 			}
 			else if (type==GF_4CC('!', 's', 's', 'x')) {
 				do_uncompress = 1;
 				type = GF_ISOM_BOX_TYPE_SSIX;
 			}
 #endif
 			if (do_uncompress) {
 				compb = gf_malloc((u32) (size-8));
 				if (!compb) return GF_OUT_OF_MEM;
 
 				compressed_size = (u32) (size - 8 - extra_bytes);
 				gf_bs_read_data(bs, compb, compressed_size);
 				e = gf_gz_decompress_payload_ex(compb, compressed_size, &uncomp_data, &osize, GF_FALSE);
 				if (e) {
 					gf_free(compb);
 					GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, ("[iso file] Failed to uncompress payload for box type %s (0x%08X)\n", gf_4cc_to_str(otype), otype));
 					return e;
 				}
 
 				//keep size as complete box size for tests below
 				size = osize + 8;
 				uncomp_bs = gf_bs_new(uncomp_data, osize, GF_BITSTREAM_READ);
 				orig_bs = bs;
 				bs = uncomp_bs;
 				start = 0;
 				gf_free(compb);
 			}
 		}
 	}
 
 #define ERR_EXIT(_e) { \
 		if (uncomp_bs) {\
 			gf_free(uncomp_data);\
 			gf_bs_del(uncomp_bs); \
 		}\
 		return _e;\
 	}
 
 	/*handle uuid*/
 	memset(uuid, 0, 16);
 	if (type == GF_ISOM_BOX_TYPE_UUID ) {
 		if (gf_bs_available(bs) < 16) {
 			ERR_EXIT(GF_ISOM_INCOMPLETE_FILE);
 		}
 		gf_bs_read_data(bs, uuid, 16);
 		hdr_size += 16;
 		uuid_type = gf_isom_solve_uuid_box(uuid);
 	}
 
 	//handle large box
 	if (size == 1) {
 		if (gf_bs_available(bs) < 8) {
 			ERR_EXIT(GF_ISOM_INCOMPLETE_FILE);
 		}
 		size = gf_bs_read_u64(bs);
 		hdr_size += 8;
 	}
 	if (!skip_logs)
 		GF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, ("[iso file] Read Box type %s size "LLD" start "LLD"\n", gf_4cc_to_str(type), size,  start));
 
 	if ( size < hdr_size ) {
 		GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, ("[iso file] Box %s size "LLD" less than box header size %d\n", gf_4cc_to_str(type), size, hdr_size));
 		ERR_EXIT(GF_ISOM_INVALID_FILE);
 	}
 	//if parent size is given, make sure box fits within parent
 	if (parent_size && (parent_size<size)) {
 		GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, ("[iso file] Box %s size "LLU" is larger than remaining parent size "LLU"\n", gf_4cc_to_str(type), size, parent_size ));
 		ERR_EXIT(GF_ISOM_INVALID_FILE);
 	}
 	restore_type = 0;
 	if ((parent_type==GF_ISOM_BOX_TYPE_STSD) && (type==GF_QT_SUBTYPE_RAW) ) {
 		u64 cookie = gf_bs_get_cookie(bs);
 		restore_type = type;
 		if (cookie & GF_ISOM_BS_COOKIE_VISUAL_TRACK)
 			type = GF_QT_SUBTYPE_RAW_VID;
 		else
 			type = GF_QT_SUBTYPE_RAW_AUD;
 
 	}
 
 	//some special boxes (references and track groups) are handled by a single generic box with an associated ref/group type
 	if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_TREF)) {
 		newBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_REFT);
 		if (!newBox) ERR_EXIT(GF_OUT_OF_MEM);
 		((GF_TrackReferenceTypeBox*)newBox)->reference_type = type;
 	} else if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_IREF)) {
 		newBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_REFI);
 		if (!newBox) ERR_EXIT(GF_OUT_OF_MEM);
 		((GF_ItemReferenceTypeBox*)newBox)->reference_type = type;
 	} else if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_TRGR)) {
 		newBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_TRGT);
 		if (!newBox) ERR_EXIT(GF_OUT_OF_MEM);
 		((GF_TrackGroupTypeBox*)newBox)->group_type = type;
 	} else if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_GRPL)) {
 		newBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_GRPT);
 		if (!newBox) ERR_EXIT(GF_OUT_OF_MEM);
 		((GF_EntityToGroupTypeBox*)newBox)->grouping_type = type;
 	} else {
 		//OK, create the box based on the type
 		is_special = GF_FALSE;
-		newBox = gf_isom_box_new_ex(uuid_type ? uuid_type : type, parent_type, skip_logs, is_root_box);
+		newBox = gf_isom_box_new_ex(uuid_type ? uuid_type : type, parent_type, skip_logs, is_root_box, uuid_type ? GF_TRUE : GF_FALSE);
 		if (!newBox) ERR_EXIT(GF_OUT_OF_MEM);
 	}
 
 	//OK, init and read this box
 	if (type==GF_ISOM_BOX_TYPE_UUID && !is_special) {
 		memcpy(((GF_UUIDBox *)newBox)->uuid, uuid, 16);
 		((GF_UUIDBox *)newBox)->internal_4cc = uuid_type;
 	}
 
 	if (!newBox->type) newBox->type = type;
 	if (restore_type)
 		newBox->type = restore_type;
 
 	end = gf_bs_available(bs);
 	if (size - hdr_size > end ) {
 		newBox->size = size - hdr_size - end;
 		*outBox = newBox;
 		ERR_EXIT(GF_ISOM_INCOMPLETE_FILE);
 	}
 
 	newBox->size = size - hdr_size;
 
 	e = gf_isom_full_box_read(newBox, bs);
 	if (!e) e = gf_isom_box_read(newBox, bs);
 	if (e) {
 		if (gf_opts_get_bool("core", "no-check"))
 			e = GF_OK;
 	}
 	newBox->size = size;
 	end = gf_bs_get_position(bs);
 
 	if (uncomp_bs) {
 		gf_free(uncomp_data);
 		gf_bs_del(uncomp_bs);
 		if (e) {
 			gf_isom_box_del(newBox);
 			*outBox = NULL;
 			return e;
 		}
 		//move size to real bitstream offsets for tests below
 		size -= 8;
 		//remember compressed vs real size info for moov in order to properly recompute chunk offset
 		if (type==GF_ISOM_BOX_TYPE_MOOV) {
 			((GF_MovieBox *)newBox)->compressed_diff = (s32)size - (s32)compressed_size;
 			((GF_MovieBox *)newBox)->file_offset = comp_start;
 		}
 		else if (type==GF_QT_BOX_TYPE_CMVD) {
 			//do not store compressed diff or file offset, cmov uses offsets in the compressed file
 			newBox->size = compressed_size + 8 + 6*4;
 		}
 #ifndef GPAC_DISABLE_ISOM_FRAGMENTS
 		//remember compressed vs real size info for moof in order to properly recompute data_offset/base_data_offset
 		else if (type==GF_ISOM_BOX_TYPE_MOOF) {
 			((GF_MovieFragmentBox *)newBox)->compressed_diff = (s32)size - (s32)compressed_size;
 		}
 		//remember compressed vs real size info for dump
 		else if (type==GF_ISOM_BOX_TYPE_SIDX) {
 			((GF_SegmentIndexBox *)newBox)->compressed_diff = (s32)size - (s32)compressed_size;
 		}
 		//remember compressed vs real size info for dump
 		else if (type==GF_ISOM_BOX_TYPE_SSIX) {
 			((GF_SubsegmentIndexBox *)newBox)->compressed_diff = (s32)size - (s32)compressed_size;
 		}
 #endif
 		newBox->internal_flags = GF_ISOM_BOX_COMPRESSED;
 		bs = orig_bs;
 	}
 
 
 	if (e && (e != GF_ISOM_INCOMPLETE_FILE)) {
 		gf_isom_box_del(newBox);
 		*outBox = NULL;
 		if (is_root_box && (e==GF_SKIP_BOX))
 			e = GF_ISOM_INVALID_FILE;
 
 		if (!skip_logs && (e!=GF_SKIP_BOX)) {
 			GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, ("[iso file] Read Box \"%s\" (start "LLU") failed (%s) - skipping\n", gf_4cc_to_str(type), start, gf_error_to_string(e)));
 		}
 		//we don't try to reparse known boxes that have been failing (too dangerous)
 		return e;
 	}
 
 	if (end-start > size) {
 		if (!skip_logs) {
 			GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, ("[iso file] Box \"%s\" size "LLU" (start "LLU") invalid (read "LLU")\n", gf_4cc_to_str(type), size, start, (end-start) ));
 		}
 		/*let's still try to load the file since no error was notified*/
 		gf_bs_seek(bs, start+size);
 	} else if (end-start < size) {
 		u32 to_skip = (u32) (size-(end-start));
 		if (!skip_logs) {
 			if ((to_skip!=4) || gf_bs_peek_bits(bs, 32, 0)) {
 				GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, ("[iso file] Box \"%s\" (start "LLU") has %u extra bytes\n", gf_4cc_to_str(type), start, to_skip));
 				unused_bytes += to_skip;
 			}
 		}
 		gf_bs_skip_bytes(bs, to_skip);
 	}
 	*outBox = newBox;
 
 	return e;
 }
@@ -1816,76 +1816,76 @@ static u32 get_box_reg_idx(u32 boxCode, u32 parent_type, u32 start_from)
 	return 0;
 }
 
-GF_Box *gf_isom_box_new_ex(u32 boxType, u32 parentType, Bool skip_logs, Bool is_root_box)
+GF_Box *gf_isom_box_new_ex(u32 boxType, u32 parentType, Bool skip_logs, Bool is_root_box, Bool is_uuid)
 {
 	GF_Box *a;
 	const char *opt;
 	s32 idx = get_box_reg_idx(boxType, parentType, 0);
 	if (idx==0) {
 #ifndef GPAC_DISABLE_LOG
 		if (!skip_logs && (boxType != GF_ISOM_BOX_TYPE_UNKNOWN) && (boxType != GF_ISOM_BOX_TYPE_UUID)) {
 			switch (parentType) {
 			case GF_ISOM_BOX_TYPE_ILST:
 			case GF_ISOM_BOX_TYPE_META:
 			case GF_ISOM_BOX_TYPE_UDTA:
 			case GF_ISOM_BOX_TYPE_UNKNOWN:
 			case GF_ISOM_BOX_TYPE_iTunesSpecificInfo:
 			case GF_QT_BOX_TYPE_WAVE:
 				break;
 			//some sample descritions are handled as generic ones but we know them, don't warn
 			case GF_ISOM_BOX_TYPE_STSD:
 				//fallthrough
 			default:
 				if (boxType==GF_ISOM_BOX_TYPE_GDAT) break;
 
 				opt = gf_opts_get_key("core", "boxdir");
 				if (opt) {
 					char szPath[GF_MAX_PATH], szType[GF_4CC_MSIZE];
 					snprintf(szPath, GF_MAX_PATH-1, "%s/%s.js", opt, gf_4cc_to_str_safe(boxType, szType) );
 					if (gf_file_exists(szPath))
 						break;
 				}
 
 				if (is_root_box) {
 					GF_LOG(GF_LOG_INFO, GF_LOG_CONTAINER, ("[iso file] Unknown top-level box type %s\n", gf_4cc_to_str(boxType)));
 				} else if (parentType) {
 					GF_LOG(GF_LOG_INFO, GF_LOG_CONTAINER, ("[iso file] Unknown box type %s in parent %s\n", gf_4cc_to_str(boxType), gf_4cc_to_str(parentType) ));
 				} else {
 					GF_LOG(GF_LOG_INFO, GF_LOG_CONTAINER, ("[iso file] Unknown box type %s\n", gf_4cc_to_str(boxType)));
 				}
 				break;
 			}
 		}
 #endif
-        if (boxType==GF_ISOM_BOX_TYPE_UUID) {
+        if (is_uuid || (boxType==GF_ISOM_BOX_TYPE_UUID)) {
             a = uuid_box_new();
             if (a) a->registry = &box_registry[1];
         } else {
             a = unkn_box_new();
             if (a) {
             	((GF_UnknownBox *)a)->original_4cc = boxType;
 				((GF_UnknownBox *)a)->parent_4cc = parentType;
             	a->registry = &box_registry[0];
 			}
         }
 		return a;
 	}
 	a = box_registry[idx].new_fn();
 
 	if (a) {
 		if (a->type!=GF_ISOM_BOX_TYPE_UUID) {
 			if (a->type==GF_ISOM_BOX_TYPE_UNKNOWN) {
 				((GF_UnknownBox *)a)->original_4cc = boxType;
 			} else {
 				a->type = boxType;
 			}
 		}
 		a->registry = &box_registry[idx];
 
 		if ((a->type==GF_ISOM_BOX_TYPE_COLR) && (parentType==GF_ISOM_BOX_TYPE_JP2H)) {
 			((GF_ColourInformationBox *)a)->is_jp2 = GF_TRUE;
 		}
 
 	}
 	return a;
 }
@@ -1893,7 +1893,7 @@ GF_Box *gf_isom_box_new_ex(u32 boxType, u32 parentType, Bool skip_logs, Bool is_
 GF_EXPORT
 GF_Box *gf_isom_box_new(u32 boxType)
 {
-	return gf_isom_box_new_ex(boxType, 0, 0, GF_FALSE);
+	return gf_isom_box_new_ex(boxType, 0, 0, GF_FALSE, GF_FALSE);
 }
 
 GF_Err gf_isom_box_array_read(GF_Box *parent, GF_BitStream *bs)
diff --git a/src/isomedia/hint_track.c b/src/isomedia/hint_track.c
index 619ba7efa..a35a2961a 100644
--- a/src/isomedia/hint_track.c
+++ b/src/isomedia/hint_track.c
@@ -823,63 +823,63 @@ GF_EXPORT
 GF_Err gf_isom_sdp_add_line(GF_ISOFile *movie, const char *text)
 {
 	GF_UserDataMap *map;
 	GF_RTPBox *rtp;
 	GF_Err e;
 	GF_HintTrackInfoBox *hnti;
 	char *buf;
 
 	if (!movie->moov) return GF_BAD_PARAM;
 
 	//check if we have a udta ...
 	if (!movie->moov->udta) {
 		e = moov_on_child_box((GF_Box*)movie->moov, gf_isom_box_new_parent(&movie->moov->child_boxes, GF_ISOM_BOX_TYPE_UDTA), GF_FALSE);
 		if (e) return e;
 	}
 	//find a hnti in the udta
 	map = udta_getEntry(movie->moov->udta, GF_ISOM_BOX_TYPE_HNTI, NULL);
 	if (!map) {
 		e = udta_on_child_box((GF_Box *)movie->moov->udta, gf_isom_box_new(GF_ISOM_BOX_TYPE_HNTI), GF_FALSE);
 		if (e) return e;
 		map = udta_getEntry(movie->moov->udta, GF_ISOM_BOX_TYPE_HNTI, NULL);
 	}
 
 	//there should be one and only one hnti
 	if (!gf_list_count(map->boxes) ) {
 		e = udta_on_child_box((GF_Box *)movie->moov->udta, gf_isom_box_new(GF_ISOM_BOX_TYPE_HNTI), GF_FALSE);
 		if (e) return e;
 	}
 	else if (gf_list_count(map->boxes) < 1) return GF_ISOM_INVALID_FILE;
 
 	hnti = (GF_HintTrackInfoBox *)gf_list_get(map->boxes, 0);
 
 	if (!hnti->SDP) {
-		GF_Box *a = gf_isom_box_new_ex(GF_ISOM_BOX_TYPE_RTP, GF_ISOM_BOX_TYPE_HNTI, 0, GF_FALSE);
+		GF_Box *a = gf_isom_box_new_ex(GF_ISOM_BOX_TYPE_RTP, GF_ISOM_BOX_TYPE_HNTI, 0, GF_FALSE, GF_FALSE);
 		if (!a) return GF_OUT_OF_MEM;
 		hnti_on_child_box((GF_Box*)hnti, a, GF_FALSE);
 		if (!hnti->child_boxes) hnti->child_boxes = gf_list_new();
 		gf_list_add(hnti->child_boxes, a);
 	}
 	rtp = (GF_RTPBox *) hnti->SDP;
 
 	if (!rtp->sdpText) {
 		rtp->sdpText = (char*)gf_malloc(sizeof(char) * (strlen(text) + 3));
 		if (!rtp->sdpText) return GF_OUT_OF_MEM;
 
 		strcpy(rtp->sdpText, text);
 		strcat(rtp->sdpText, "\r\n");
 		return GF_OK;
 	}
 	buf = (char*)gf_malloc(sizeof(char) * (strlen(rtp->sdpText) + strlen(text) + 3));
 	if (!buf) return GF_OUT_OF_MEM;
 	
 	strcpy(buf, rtp->sdpText);
 	strcat(buf, text);
 	strcat(buf, "\r\n");
 	gf_free(rtp->sdpText);
 	ReorderSDP(buf, GF_TRUE);
 	rtp->sdpText = buf;
 	return GF_OK;
 }
 
 
 //remove all SDP info at the movie level
diff --git a/src/isomedia/sample_descs.c b/src/isomedia/sample_descs.c
index 3bd84c4c7..60f5139d1 100644
--- a/src/isomedia/sample_descs.c
+++ b/src/isomedia/sample_descs.c
@@ -1649,60 +1649,60 @@ GF_EXPORT
 GF_Err gf_isom_tmcd_config_new(GF_ISOFile *the_file, u32 trackNumber, u32 fps_num, u32 fps_den, s32 frames_per_counter_tick, Bool is_drop, Bool is_counter, u32 *outDescriptionIndex)
 {
 	GF_TrackBox *trak;
 	GF_Err e;
 	u32 dataRefIndex;
 	GF_Box *tmcd;
 	GF_GenericMediaHeaderInfoBox *gmin;
 	GF_TimeCodeMediaInformationBox *tcmi;
 	GF_TimeCodeSampleEntryBox *entry;
 
 	e = CanAccessMovie(the_file, GF_ISOM_OPEN_WRITE);
 	if (e) return e;
 
 	trak = gf_isom_get_track_from_file(the_file, trackNumber);
 	if (!trak || !trak->Media) return GF_BAD_PARAM;
 
 	//get or create the data ref
 	e = Media_FindDataRef(trak->Media->information->dataInformation->dref, NULL, NULL, &dataRefIndex);
 	if (e) return e;
 	if (!dataRefIndex) {
 		e = Media_CreateDataRef(the_file, trak->Media->information->dataInformation->dref, NULL, NULL, &dataRefIndex);
 		if (e) return e;
 	}
 	if (!the_file->keep_utc)
 		trak->Media->mediaHeader->modificationTime = gf_isom_get_mp4time();
 
 	gmin = (GF_GenericMediaHeaderInfoBox *) gf_isom_box_find_child(trak->Media->information->InfoHeader->child_boxes, GF_QT_BOX_TYPE_GMIN);
 	if (!gmin) {
 		gmin = (GF_GenericMediaHeaderInfoBox *) gf_isom_box_new_parent(&trak->Media->information->InfoHeader->child_boxes, GF_QT_BOX_TYPE_GMIN);
 		if (!gmin) return GF_OUT_OF_MEM;
 	}
 
 	tmcd = gf_isom_box_find_child(trak->Media->information->InfoHeader->child_boxes, GF_QT_BOX_TYPE_TMCD);
 	if (!tmcd) {
 		//default container box, use GMHD to create it
 		tmcd = gf_isom_box_new_parent(&trak->Media->information->InfoHeader->child_boxes, GF_ISOM_BOX_TYPE_GMHD);
 		if (!tmcd) return GF_OUT_OF_MEM;
 		tmcd->type = GF_QT_BOX_TYPE_TMCD;
 	}
 	tcmi = (GF_TimeCodeMediaInformationBox *) gf_isom_box_find_child(tmcd->child_boxes, GF_QT_BOX_TYPE_TCMI);
 	if (!tcmi) {
 		tcmi = (GF_TimeCodeMediaInformationBox *) gf_isom_box_new_parent(&tmcd->child_boxes, GF_QT_BOX_TYPE_TCMI);
 		if (!tcmi) return GF_OUT_OF_MEM;
 	}
 
-	entry = (GF_TimeCodeSampleEntryBox *) gf_isom_box_new_ex(GF_QT_BOX_TYPE_TMCD, GF_ISOM_BOX_TYPE_STSD, GF_FALSE, GF_FALSE);
+	entry = (GF_TimeCodeSampleEntryBox *) gf_isom_box_new_ex(GF_QT_BOX_TYPE_TMCD, GF_ISOM_BOX_TYPE_STSD, GF_FALSE, GF_FALSE, GF_FALSE);
 	if (!entry) return GF_OUT_OF_MEM;
 	entry->flags = 0;
 	if (is_drop) entry->flags |= 0x00000001;
 	if (is_counter) entry->flags |= 0x00000008;
 
 	entry->timescale = fps_num;
 	entry->frame_duration = fps_den;
 	entry->frames_per_counter_tick = (u8) frames_per_counter_tick;
 	
 	entry->dataReferenceIndex = dataRefIndex;
 	e = gf_list_add(trak->Media->information->sampleTable->SampleDescription->child_boxes, entry);
 	*outDescriptionIndex = gf_list_count(trak->Media->information->sampleTable->SampleDescription->child_boxes);
 	return e;
 }
