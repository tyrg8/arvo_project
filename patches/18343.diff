commit 20c3fc7cb4a4ec2a67642bd83ddb6e403488b0fe
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Tue Oct 22 13:11:57 2019 +0200

    PDF: fix build against Poppler 0.82.0dev

diff --git a/gdal/frmts/pdf/pdfdataset.cpp b/gdal/frmts/pdf/pdfdataset.cpp
index 15537ca7fd..8f944c40d3 100644
--- a/gdal/frmts/pdf/pdfdataset.cpp
+++ b/gdal/frmts/pdf/pdfdataset.cpp
@@ -145,196 +145,200 @@ public:
 class GDALPDFOutputDev : public SplashOutputDev
 {
     private:
         int bEnableVector;
         int bEnableText;
         int bEnableBitmap;
 
         void skipBytes(Stream *str,
                        int width, int height,
                        int nComps, int nBits)
         {
             int nVals = width * nComps;
             int nLineSize = (nVals * nBits + 7) >> 3;
             int nBytes = nLineSize * height;
             for (int i = 0; i < nBytes; i++)
             {
                 if( str->getChar() == EOF)
                     break;
             }
         }
 
     public:
         GDALPDFOutputDev(SplashColorMode colorModeA, int bitmapRowPadA,
                          GBool reverseVideoA, SplashColorPtr paperColorA) :
                 SplashOutputDev(colorModeA, bitmapRowPadA,
                                 reverseVideoA, paperColorA),
                 bEnableVector(TRUE),
                 bEnableText(TRUE),
                 bEnableBitmap(TRUE) {}
 
         void SetEnableVector(int bFlag) { bEnableVector = bFlag; }
         void SetEnableText(int bFlag) { bEnableText = bFlag; }
         void SetEnableBitmap(int bFlag) { bEnableBitmap = bFlag; }
 
         virtual void startPage(int pageNum, GfxState *state,XRef* xrefIn
         ) override
         {
             SplashOutputDev::startPage(pageNum, state,xrefIn);
             SplashBitmap* poBitmap = getBitmap();
             memset(poBitmap->getDataPtr(), 255, poBitmap->getRowSize() * poBitmap->getHeight());
         }
 
         virtual void stroke(GfxState * state) override
         {
             if (bEnableVector)
                 SplashOutputDev::stroke(state);
         }
 
         virtual void fill(GfxState * state) override
         {
             if (bEnableVector)
                 SplashOutputDev::fill(state);
         }
 
         virtual void eoFill(GfxState * state) override
         {
             if (bEnableVector)
                 SplashOutputDev::eoFill(state);
         }
 
         virtual void drawChar(GfxState *state, double x, double y,
                               double dx, double dy,
                               double originX, double originY,
-                              CharCode code, int nBytes, Unicode *u, int uLen) override
+                              CharCode code, int nBytes,
+#if POPPLER_MAJOR_VERSION >= 1 || POPPLER_MINOR_VERSION >= 82
+                              const
+#endif
+                              Unicode *u, int uLen) override
         {
             if (bEnableText)
                 SplashOutputDev::drawChar(state, x, y, dx, dy,
                                           originX, originY,
                                           code, nBytes, u, uLen);
         }
 
         virtual void beginTextObject(GfxState *state) override
         {
             if (bEnableText)
                 SplashOutputDev::beginTextObject(state);
         }
 
         virtual void endTextObject(GfxState *state) override
         {
             if (bEnableText)
                 SplashOutputDev::endTextObject(state);
         }
 
         virtual void drawImageMask(GfxState *state, Object *ref, Stream *str,
                                    int width, int height, GBool invert,
                                    GBool interpolate, GBool inlineImg) override
         {
             if (bEnableBitmap)
                 SplashOutputDev::drawImageMask(state, ref, str,
                                                width, height, invert,
                                                interpolate, inlineImg);
             else
             {
                 str->reset();
                 if (inlineImg)
                 {
                     skipBytes(str, width, height, 1, 1);
                 }
                 str->close();
             }
         }
 
         virtual void setSoftMaskFromImageMask(GfxState *state,
                             Object *ref, Stream *str,
                             int width, int height, GBool invert,
                             GBool inlineImg, double *baseMatrix) override
         {
             if (bEnableBitmap)
                 SplashOutputDev::setSoftMaskFromImageMask(state, ref, str,
                                                width, height, invert,
                                                inlineImg, baseMatrix);
             else
                 str->close();
         }
 
         virtual void unsetSoftMaskFromImageMask(GfxState *state, double *baseMatrix) override
         {
             if (bEnableBitmap)
                 SplashOutputDev::unsetSoftMaskFromImageMask(state, baseMatrix);
         }
 
         virtual void drawImage(GfxState *state, Object *ref, Stream *str,
                                int width, int height, GfxImageColorMap *colorMap,
                                GBool interpolate,
 #if POPPLER_MAJOR_VERSION >= 1 || POPPLER_MINOR_VERSION >= 82
                                const
 #endif
                                int *maskColors,
                                GBool inlineImg) override
         {
             if (bEnableBitmap)
                 SplashOutputDev::drawImage(state, ref, str,
                                            width, height, colorMap,
                                            interpolate, maskColors, inlineImg);
             else
             {
                 str->reset();
                 if (inlineImg)
                 {
                     skipBytes(str, width, height,
                               colorMap->getNumPixelComps(),
                               colorMap->getBits());
                 }
                 str->close();
             }
         }
 
         virtual void drawMaskedImage(GfxState *state, Object *ref, Stream *str,
                                      int width, int height,
                                      GfxImageColorMap *colorMap,
                                      GBool interpolate,
                                      Stream *maskStr, int maskWidth, int maskHeight,
                                      GBool maskInvert, GBool maskInterpolate) override
         {
             if (bEnableBitmap)
                 SplashOutputDev::drawMaskedImage(state, ref, str,
                                                  width, height, colorMap,
                                                  interpolate,
                                                  maskStr, maskWidth, maskHeight,
                                                  maskInvert, maskInterpolate);
             else
                 str->close();
         }
 
         virtual void drawSoftMaskedImage(GfxState *state, Object *ref, Stream *str,
                                          int width, int height,
                                          GfxImageColorMap *colorMap,
                                          GBool interpolate,
                                          Stream *maskStr,
                                          int maskWidth, int maskHeight,
                                          GfxImageColorMap *maskColorMap,
                                          GBool maskInterpolate) override
         {
             if (bEnableBitmap)
             {
                 if( maskColorMap->getBits() <= 0 ) /* workaround poppler bug (robustness) */
                 {
                     str->close();
                     return;
                 }
                 SplashOutputDev::drawSoftMaskedImage(state, ref, str,
                                                      width, height, colorMap,
                                                      interpolate,
                                                      maskStr, maskWidth, maskHeight,
                                                      maskColorMap, maskInterpolate);
             }
             else
                 str->close();
         }
 };
 
 #endif  // ~ HAVE_POPPLER
 
 /************************************************************************/
 /*                         Dump routines                                */
 /************************************************************************/
