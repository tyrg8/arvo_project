commit 8958762daf5c75ebd7f076f5140376acd09652b4
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Mon Aug 1 09:03:28 2022 +0100

    oss-fuzz 49641/49654: Add missing error code assignment

diff --git a/pdf/pdf_font.c b/pdf/pdf_font.c
index 61e7734bd..93d266f23 100644
--- a/pdf/pdf_font.c
+++ b/pdf/pdf_font.c
@@ -181,192 +181,194 @@ static int
 pdfi_open_CIDFont_substitute_file(pdf_context *ctx, pdf_dict *font_dict, pdf_dict *fontdesc, bool fallback, byte ** buf, int64_t * buflen, int *findex)
 {
     int code = 0;
     char fontfname[gp_file_name_sizeof];
     stream *s;
     pdf_name *cidname = NULL;
     gs_const_string fname;
 
     (void)pdfi_dict_get(ctx, font_dict, "BaseFont", (pdf_obj **)&cidname);
 
     if (fallback == true) {
         pdf_string *mname = NULL;
         pdf_dict *csi = NULL;
 
         code = pdfi_dict_get(ctx, font_dict, "CIDSystemInfo", (pdf_obj **)&csi);
         if (code >= 0 && pdfi_type_of(csi) == PDF_DICT) {
             pdf_string *csi_reg = NULL, *csi_ord = NULL;
 
             if (pdfi_dict_get(ctx, csi, "Registry", (pdf_obj **)&csi_reg) >= 0
              && pdfi_dict_get(ctx, csi, "Ordering", (pdf_obj **)&csi_ord) >= 0
              && pdfi_type_of(csi_reg) == PDF_STRING && pdfi_type_of(csi_ord) == PDF_STRING
              && csi_reg->length + csi_ord->length + 1 < gp_file_name_sizeof - 1) {
                 pdf_name *reg_ord;
                 memcpy(fontfname, csi_reg->data, csi_reg->length);
                 memcpy(fontfname + csi_reg->length, "-", 1);
                 memcpy(fontfname + csi_reg->length + 1, csi_ord->data, csi_ord->length);
                 fontfname[csi_reg->length + csi_ord->length + 1] = '\0';
 
                 code = pdfi_name_alloc(ctx, (byte *)fontfname, strlen(fontfname), (pdf_obj **) &reg_ord);
                 if (code >= 0) {
                     pdfi_countup(reg_ord);
                     code = pdf_fontmap_lookup_cidfont(ctx, font_dict, reg_ord, (pdf_obj **)&mname, findex);
                     pdfi_countdown(reg_ord);
                 }
             }
             pdfi_countdown(csi_reg);
             pdfi_countdown(csi_ord);
         }
         pdfi_countdown(csi);
 
         if (mname == NULL || pdfi_type_of(mname) != PDF_STRING)
             code = pdf_fontmap_lookup_cidfont(ctx, font_dict, NULL, (pdf_obj **)&mname, findex);
 
         if (code < 0 || pdfi_type_of(mname) != PDF_STRING) {
             const char *fsprefix = "CIDFSubst/";
             int fsprefixlen = strlen(fsprefix);
             const char *defcidfallack = "DroidSansFallback.ttf";
             int defcidfallacklen = strlen(defcidfallack);
 
             pdfi_countdown(mname);
 
             if (ctx->args.nocidfallback == true) {
                 code = gs_note_error(gs_error_invalidfont);
             }
             else {
                 if (ctx->args.cidfsubstpath.data == NULL) {
                     memcpy(fontfname, fsprefix, fsprefixlen);
                 }
                 else {
                     memcpy(fontfname, ctx->args.cidfsubstpath.data, ctx->args.cidfsubstpath.size);
                     fsprefixlen = ctx->args.cidfsubstpath.size;
                 }
 
                 if (ctx->args.cidfsubstfont.data == NULL) {
                     int len = 0;
                     if (gp_getenv("CIDFSUBSTFONT", (char *)0, &len) < 0 && len + fsprefixlen + 1 < gp_file_name_sizeof) {
                         (void)gp_getenv("CIDFSUBSTFONT", (char *)(fontfname + fsprefixlen), &defcidfallacklen);
                     }
                     else {
                         memcpy(fontfname + fsprefixlen, defcidfallack, defcidfallacklen);
                     }
                 }
                 else {
                     memcpy(fontfname, ctx->args.cidfsubstfont.data, ctx->args.cidfsubstfont.size);
                     defcidfallacklen = ctx->args.cidfsubstfont.size;
                 }
                 fontfname[fsprefixlen + defcidfallacklen] = '\0';
 
                 code = pdfi_open_resource_file(ctx, fontfname, strlen(fontfname), &s);
                 if (code < 0) {
                     code = gs_note_error(gs_error_invalidfont);
                 }
                 else {
                     if (cidname) {
                         pdfi_print_cstring(ctx, "Loading CIDFont ");
                         pdfi_print_font_name(ctx, (pdf_name *)cidname);
                         pdfi_print_cstring(ctx, " substitute from ");
                     }
                     else {
                         pdfi_print_cstring(ctx, "Loading nameless CIDFont from ");
                     }
                     sfilename(s, &fname);
                     if (fname.size < gp_file_name_sizeof) {
                         memcpy(fontfname, fname.data, fname.size);
                         fontfname[fname.size] = '\0';
                     }
                     else {
                         strcpy(fontfname, "unnamed file");
                     }
                     pdfi_print_cstring(ctx, fontfname);
                     pdfi_print_cstring(ctx, "\n");
 
 
                     sfseek(s, 0, SEEK_END);
                     *buflen = sftell(s);
                     sfseek(s, 0, SEEK_SET);
                     *buf = gs_alloc_bytes(ctx->memory, *buflen, "pdfi_open_CIDFont_file(buf)");
                     if (*buf != NULL) {
                         sfread(*buf, 1, *buflen, s);
                     }
                     else {
                         code = gs_note_error(gs_error_VMerror);
                     }
                     sfclose(s);
                 }
             }
         }
         else {
             if (mname->length + 1 > gp_file_name_sizeof) {
                 pdfi_countdown(mname);
                 return_error(gs_error_invalidfont);
             }
             memcpy(fontfname, mname->data, mname->length);
             fontfname[mname->length] = '\0';
             code = pdfi_open_resource_file(ctx, (const char *)fontfname, mname->length, &s);
             pdfi_countdown(mname);
             if (code < 0) {
                 code = gs_note_error(gs_error_invalidfont);
             }
             else {
                 if (cidname) {
                     pdfi_print_cstring(ctx, "Loading CIDFont ");
                     pdfi_print_font_name(ctx, (pdf_name *)cidname);
                     pdfi_print_cstring(ctx, " (or substitute) from ");
                 }
                 else {
                     pdfi_print_cstring(ctx, "Loading nameless CIDFont from ");
                 }
                 sfilename(s, &fname);
                 if (fname.size < gp_file_name_sizeof) {
                     memcpy(fontfname, fname.data, fname.size);
                     fontfname[fname.size] = '\0';
                 }
                 else {
                     strcpy(fontfname, "unnamed file");
                 }
                 pdfi_print_cstring(ctx, fontfname);
                 pdfi_print_cstring(ctx, "\n");
                 sfseek(s, 0, SEEK_END);
                 *buflen = sftell(s);
                 sfseek(s, 0, SEEK_SET);
                 *buf = gs_alloc_bytes(ctx->memory, *buflen, "pdfi_open_CIDFont_file(buf)");
                 if (*buf != NULL) {
                     sfread(*buf, 1, *buflen, s);
                 }
                 else {
                     code = gs_note_error(gs_error_VMerror);
                 }
                 sfclose(s);
             }
         }
     }
     else {
         const char *fsprefix = "CIDFont/";
         const int fsprefixlen = strlen(fsprefix);
 
         if (cidname == NULL || pdfi_type_of(cidname) != PDF_NAME
-         || fsprefixlen + cidname->length >= gp_file_name_sizeof)
+         || fsprefixlen + cidname->length >= gp_file_name_sizeof) {
+            code = gs_note_error(gs_error_invalidfont);
             goto exit;
+        }
 
         memcpy(fontfname, fsprefix, fsprefixlen);
         memcpy(fontfname + fsprefixlen, cidname->data, cidname->length);
         fontfname[fsprefixlen + cidname->length] = '\0';
 
         code = pdfi_open_resource_file(ctx, fontfname, strlen(fontfname), &s);
         if (code < 0) {
             code = gs_note_error(gs_error_invalidfont);
         }
         else {
             sfseek(s, 0, SEEK_END);
             *buflen = sftell(s);
             sfseek(s, 0, SEEK_SET);
             *buf = gs_alloc_bytes(ctx->memory, *buflen, "pdfi_open_CIDFont_file(buf)");
             if (*buf != NULL) {
                 sfread(*buf, 1, *buflen, s);
             }
             else {
                 code = gs_note_error(gs_error_invalidfont);
             }
             sfclose(s);
         }
     }
