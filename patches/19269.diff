commit 6d7f3976f33b0d4fbbece60d6b7d549b13107674
Author: Luca Deri <deri@ntop.org>
Date:   Mon Dec 9 18:02:48 2019 +0100

    Code cleanup

diff --git a/src/lib/protocols/dns.c b/src/lib/protocols/dns.c
index 3fbb3991..6ef1b951 100644
--- a/src/lib/protocols/dns.c
+++ b/src/lib/protocols/dns.c
@@ -231,118 +231,121 @@ static int search_dns_again(struct ndpi_detection_module_struct *ndpi_struct, st
 static void ndpi_search_dns(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {
   int payload_offset;
   u_int8_t is_query;
   u_int16_t s_port = 0, d_port = 0;
 
   NDPI_LOG_DBG(ndpi_struct, "search DNS\n");
 
   if(flow->packet.udp != NULL) {
     s_port = ntohs(flow->packet.udp->source);
     d_port = ntohs(flow->packet.udp->dest);
     payload_offset = 0;
   } else if(flow->packet.tcp != NULL) /* pkt size > 512 bytes */ {
     s_port = ntohs(flow->packet.tcp->source);
     d_port = ntohs(flow->packet.tcp->dest);
     payload_offset = 2;
   } else {
     NDPI_EXCLUDE_PROTO(ndpi_struct, flow);
     return;
   }
 
   if((s_port == 53 || d_port == 53 || d_port == 5355)
      && (flow->packet.payload_packet_len > sizeof(struct ndpi_dns_packet_header)+payload_offset)) {
     struct ndpi_dns_packet_header dns_header;
     int j = 0, max_len, off;
     int invalid = search_valid_dns(ndpi_struct, flow, &dns_header, payload_offset, &is_query);
     ndpi_protocol ret;
 
     ret.master_protocol   = NDPI_PROTOCOL_UNKNOWN;
     ret.app_protocol      = (d_port == 5355) ? NDPI_PROTOCOL_LLMNR : NDPI_PROTOCOL_DNS;
 
     if(invalid) {
       NDPI_EXCLUDE_PROTO(ndpi_struct, flow);
       return;
     }
 
     /* extract host name server */
     max_len = sizeof(flow->host_server_name)-1;
     off = sizeof(struct ndpi_dns_packet_header) + payload_offset;
 
     while(j < max_len && off < flow->packet.payload_packet_len && flow->packet.payload[off] != '\0') {
       uint8_t c, cl = flow->packet.payload[off++];
 
       if( (cl & 0xc0) != 0 || // we not support compressed names in query
 	  off + cl  >= flow->packet.payload_packet_len) {
 	j = 0;
 	break;
       }
 
       if(j && j < max_len) flow->host_server_name[j++] = '.';
 
       while(j < max_len && cl != 0) {
+	u_int32_t shift;
+	
 	c = flow->packet.payload[off++];
-	flow->host_server_name[j++] = tolower((dns_validchar[c >> 5] & (1 << (c & 0x1f))) ? c : '_');
+	shift = 1 << (c & 0x1f);
+	flow->host_server_name[j++] = tolower((dns_validchar[c >> 5] & shift) ? c : '_');
 	cl--;
       }
     }
     flow->host_server_name[j] = '\0';
 
     if(j > 0) {
       ndpi_protocol_match_result ret_match;
 
       ret.app_protocol = ndpi_match_host_subprotocol(ndpi_struct, flow,
 						     (char *)flow->host_server_name,
 						     strlen((const char*)flow->host_server_name),
 						     &ret_match,
 						     NDPI_PROTOCOL_DNS);
 
       if(ret_match.protocol_category != NDPI_PROTOCOL_CATEGORY_UNSPECIFIED)
 	flow->category = ret_match.protocol_category;
 
       if(ret.app_protocol == NDPI_PROTOCOL_UNKNOWN)
 	ret.master_protocol = (d_port == 5355) ? NDPI_PROTOCOL_LLMNR : NDPI_PROTOCOL_DNS;
       else
 	ret.master_protocol = NDPI_PROTOCOL_DNS;
     }
 
     /* Report if this is a DNS query or reply */
     flow->protos.dns.is_query = is_query;
 
     if(is_query) {
       /* In this case we say that the protocol has been detected just to let apps carry on with their activities */
       ndpi_set_detected_protocol(ndpi_struct, flow, ret.app_protocol, ret.master_protocol);
 
       /* This is necessary to inform the core to call this dissector again */
       flow->check_extra_packets = 1;
 
       /* Don't use just 1 as in TCP DNS more packets could be returned (e.g. ACK). */
       flow->max_extra_packets_to_check = 5;
       flow->extra_packets_func = search_dns_again;
       return; /* The response will set the verdict */
     }
 
     flow->protos.dns.num_queries = (u_int8_t)dns_header.num_queries,
       flow->protos.dns.num_answers = (u_int8_t) (dns_header.num_answers + dns_header.authority_rrs + dns_header.additional_rrs);
 
 #ifdef DNS_DEBUG
     NDPI_LOG_DBG2(ndpi_struct, "[num_queries=%d][num_answers=%d][reply_code=%u][rsp_type=%u][host_server_name=%s]\n",
 		  flow->protos.dns.num_queries, flow->protos.dns.num_answers,
 		  flow->protos.dns.reply_code, flow->protos.dns.rsp_type, flow->host_server_name
 		  );
 #endif
 
     if(flow->packet.detected_protocol_stack[0] == NDPI_PROTOCOL_UNKNOWN) {
       /**
 	 Do not set the protocol with DNS if ndpi_match_host_subprotocol() has
 	 matched a subprotocol
       **/
       NDPI_LOG_INFO(ndpi_struct, "found DNS\n");
       ndpi_set_detected_protocol(ndpi_struct, flow, ret.app_protocol, ret.master_protocol);
     } else {
       if((flow->packet.detected_protocol_stack[0] == NDPI_PROTOCOL_DNS)
 	 || (flow->packet.detected_protocol_stack[1] == NDPI_PROTOCOL_DNS))
 	;
       else
 	NDPI_EXCLUDE_PROTO(ndpi_struct, flow);
     }
   }
 }
diff --git a/src/lib/protocols/stun.c b/src/lib/protocols/stun.c
index e95965f6..d5114204 100644
--- a/src/lib/protocols/stun.c
+++ b/src/lib/protocols/stun.c
@@ -140,323 +140,327 @@ static int is_messenger_ip_address(u_int32_t host) {
 static ndpi_int_stun_t ndpi_int_check_stun(struct ndpi_detection_module_struct *ndpi_struct,
 					   struct ndpi_flow_struct *flow,
 					   const u_int8_t * payload,
 					   const u_int16_t payload_length) {
   u_int16_t msg_type, msg_len;
   struct stun_packet_header *h = (struct stun_packet_header*)payload;
   int rc;
   
   /* STUN over TCP does not look good */
   if(flow->packet.tcp)
     return(NDPI_IS_NOT_STUN);
 
   /* No need to do ntohl() with 0xFFFFFFFF */
   if(flow->packet.iph && (flow->packet.iph->daddr == 0xFFFFFFFF /* 255.255.255.255 */)) {
     NDPI_EXCLUDE_PROTO(ndpi_struct, flow);
     return(NDPI_IS_NOT_STUN);;
   }
 
   if(payload_length >= 512) {
     return(NDPI_IS_NOT_STUN);
   } else if(payload_length < sizeof(struct stun_packet_header)) {
     /* This looks like an invalid packet */
 
     if(flow->protos.stun_ssl.stun.num_udp_pkts > 0) {
       flow->guessed_host_protocol_id = NDPI_PROTOCOL_WHATSAPP_CALL;
       return(NDPI_IS_STUN);
     } else
       return(NDPI_IS_NOT_STUN);
   }
 
   if((strncmp((const char*)payload, (const char*)"RSP/", 4) == 0)
      && (strncmp((const char*)&payload[7], (const char*)" STUN_", 6) == 0)) {
     NDPI_LOG_INFO(ndpi_struct, "found stun\n");
     goto udp_stun_found;
   }
 
   msg_type = ntohs(h->msg_type), msg_len = ntohs(h->msg_len);
 
   if(msg_type == 0)
     return(NDPI_IS_NOT_STUN);  
   
   /* https://www.iana.org/assignments/stun-parameters/stun-parameters.xhtml */
   if((msg_type & 0x3EEF) > 0x000B && msg_type != 0x0800) {
 #ifdef DEBUG_STUN
     printf("[STUN] msg_type = %04X\n", msg_type);
 #endif
 
     /*
      If we're here it's because this does not look like STUN anymore
      as this was a flow that started as STUN and turned into something
      else. Let's investigate what is that about
      */
     if(payload[0] == 0x16) {
       /* Let's check if this is DTLS used by some socials */
       struct ndpi_packet_struct *packet = &flow->packet;
       u_int16_t total_len, version = htons(*((u_int16_t*) &packet->payload[1]));
 
       switch (version) {
         case 0xFEFF: /* DTLS 1.0 */
         case 0xFEFD: /* DTLS 1.2 */
           total_len = ntohs(*((u_int16_t*) &packet->payload[11])) + 13;
 
           if(payload_length == total_len) {
             /* This is DTLS and the only protocol we know behaves like this is signal */
             flow->guessed_host_protocol_id = NDPI_PROTOCOL_SIGNAL;
             return(NDPI_IS_STUN);
           }
       }
     }
 
     return(NDPI_IS_NOT_STUN);
   }
 
 #if 0
   if((flow->packet.udp->dest == htons(3480)) ||
      (flow->packet.udp->source == htons(3480))
     )
     printf("[STUN] Here we go\n");;
 #endif
 
   if(ndpi_struct->stun_cache) {
     u_int16_t proto;
     u_int32_t key = get_stun_lru_key(flow, 0);
     int rc = ndpi_lru_find_cache(ndpi_struct->stun_cache, key, &proto,
                                  0 /* Don't remove it as it can be used for other connections */);
 
 #ifdef DEBUG_LRU
     printf("[LRU] Searching %u\n", key);
 #endif
 
     if(!rc) {
       key = get_stun_lru_key(flow, 1);
       rc = ndpi_lru_find_cache(ndpi_struct->stun_cache, key, &proto,
                                0 /* Don't remove it as it can be used for other connections */);
 
 #ifdef DEBUG_LRU
       printf("[LRU] Searching %u\n", key);
 #endif
     }
 
     if(rc) {
 #ifdef DEBUG_LRU
       printf("[LRU] Cache FOUND %u / %u\n", key, proto);
 #endif
 
       flow->guessed_host_protocol_id = proto;
       return(NDPI_IS_STUN);
     } else {
 #ifdef DEBUG_LRU
       printf("[LRU] NOT FOUND %u\n", key);
 #endif
     }
   } else {
 #ifdef DEBUG_LRU
     printf("[LRU] NO/EMPTY CACHE\n");
 #endif
   }
 
   if(msg_type == 0x01 /* Binding Request */) {
     flow->protos.stun_ssl.stun.num_binding_requests++;
 
     if(!msg_len && flow->guessed_host_protocol_id == NDPI_PROTOCOL_GOOGLE)
       flow->guessed_host_protocol_id = NDPI_PROTOCOL_HANGOUT_DUO;
     else
       flow->guessed_protocol_id = NDPI_PROTOCOL_STUN;
 
     if(!msg_len) {
       /* flow->protos.stun_ssl.stun.num_udp_pkts++; */
       return(NDPI_IS_NOT_STUN); /* This to keep analyzing STUN instead of giving up */
     }
   }
 
   if(!msg_len && flow->guessed_host_protocol_id == NDPI_PROTOCOL_UNKNOWN) {
     NDPI_EXCLUDE_PROTO(ndpi_struct, flow);
     return(NDPI_IS_NOT_STUN);
   }
 
   flow->protos.stun_ssl.stun.num_udp_pkts++;
 
   if((payload[0] == 0x80 && payload_length < 512 && ((msg_len+20) <= payload_length))) {
     flow->guessed_host_protocol_id = NDPI_PROTOCOL_WHATSAPP_CALL;
     return(NDPI_IS_STUN); /* This is WhatsApp Call */
   } else if((payload[0] == 0x90) && (((msg_len+11) == payload_length) ||
                 (flow->protos.stun_ssl.stun.num_binding_requests >= 4))) {
     flow->guessed_host_protocol_id = NDPI_PROTOCOL_WHATSAPP_CALL;
     return(NDPI_IS_STUN); /* This is WhatsApp Call */
   }
 
   if(payload[0] != 0x80 && (msg_len + 20) > payload_length)
     return(NDPI_IS_NOT_STUN);
   else {
     switch(flow->guessed_protocol_id) {
     case NDPI_PROTOCOL_HANGOUT_DUO:
     case NDPI_PROTOCOL_MESSENGER:
     case NDPI_PROTOCOL_WHATSAPP_CALL:
       /* Don't overwrite the protocol with sub-STUN protocols */
       break;
 
     default:
       flow->guessed_protocol_id = NDPI_PROTOCOL_STUN;
       break;
     }
   }
 
   if(payload_length == (msg_len+20)) {
     if((msg_type & 0x3EEF) <= 0x000B) /* http://www.3cx.com/blog/voip-howto/stun-details/ */ {
       u_int offset = 20;
 
       /*
        This can either be the standard RTCP or Ms Lync RTCP that
        later will become Ms Lync RTP. In this case we need to
        be careful before deciding about the protocol before dissecting the packet
 
        MS Lync = Skype
        https://en.wikipedia.org/wiki/Skype_for_Business
        */
 
       while((offset+2) < payload_length) {
         u_int16_t attribute = ntohs(*((u_int16_t*)&payload[offset]));
         u_int16_t len = ntohs(*((u_int16_t*)&payload[offset+2]));
         u_int16_t x = (len + 4) % 4;
 
         if(x)
           len += 4-x;
 
 #ifdef DEBUG_STUN
         printf("==> Attribute: %04X\n", attribute);
 #endif
 
         switch(attribute) {
 	case 0x0103:
           flow->guessed_host_protocol_id = NDPI_PROTOCOL_ZOOM;
           return(NDPI_IS_STUN);
 	  break;
 	  
         case 0x4000:
         case 0x4001:
         case 0x4002:
           /* These are the only messages apparently whatsapp voice can use */
           flow->guessed_host_protocol_id = NDPI_PROTOCOL_WHATSAPP_CALL;
           return(NDPI_IS_STUN);
           break;
 
         case 0x0014: /* Realm */
         {
           u_int16_t realm_len = ntohs(*((u_int16_t*)&payload[offset+2]));
 
           if(flow->host_server_name[0] == '\0') {
             u_int j, i = (realm_len > sizeof(flow->host_server_name)) ? sizeof(flow->host_server_name) : realm_len;
             u_int k = offset+4;
 
             memset(flow->host_server_name, 0, sizeof(flow->host_server_name));
 
-            for(j=0; j<i; j++)
-              flow->host_server_name[j] = payload[k++];
-
+            for(j=0; j<i; j++) {
+	      if((k+i) < payload_length)
+		flow->host_server_name[j] = payload[k++];
+	      else
+		break;
+	    }
+	    
 #ifdef DEBUG_STUN
             printf("==> [%s]\n", flow->host_server_name);
 #endif
 
             if(strstr((char*) flow->host_server_name, "google.com") != NULL) {
                 flow->guessed_host_protocol_id = NDPI_PROTOCOL_HANGOUT_DUO;
                 return(NDPI_IS_STUN);
             } else if(strstr((char*) flow->host_server_name, "whispersystems.org") != NULL) {
               flow->guessed_host_protocol_id = NDPI_PROTOCOL_SIGNAL;
               return(NDPI_IS_STUN);
             }
           }
         }
         break;
 
         case 0xC057: /* Messeger */
           if(msg_type == 0x0001) {
             if((msg_len == 100) || (msg_len == 104)) {
               flow->guessed_host_protocol_id = NDPI_PROTOCOL_MESSENGER;
               return(NDPI_IS_STUN);
             } else if(msg_len == 76) {
 #if 0
               if(1) {
                 flow->guessed_host_protocol_id = NDPI_PROTOCOL_HANGOUT_DUO;
                 return(NDPI_IS_NOT_STUN); /* This case is found also with signal traffic */
               } else
                 return(NDPI_IS_STUN);
 #endif
             }
           }
           break;
 
         case 0x8054: /* Candidate Identifier */
           if((len == 4)
              && ((offset+7) < payload_length)
              && (payload[offset+5] == 0x00)
              && (payload[offset+6] == 0x00)
              && (payload[offset+7] == 0x00)) {
             /* Either skype for business or "normal" skype with multiparty call */
 #ifdef DEBUG_STUN
             printf("==> Skype found\n");
 #endif
             flow->guessed_host_protocol_id = NDPI_PROTOCOL_SKYPE_CALL;
             return(NDPI_IS_STUN);
           }
 
           break;
 
         case 0x8055: /* MS Service Quality (skype?) */
           break;
 
           /* Proprietary fields found on skype calls */
         case 0x24DF:
         case 0x3802:
         case 0x8036:
         case 0x8095:
         case 0x0800:
         case 0x8006: /* This is found on skype calls) */
           /* printf("====>>>> %04X\n", attribute); */
 #ifdef DEBUG_STUN
           printf("==> Skype (2) found\n");
 #endif
 
           flow->guessed_host_protocol_id = NDPI_PROTOCOL_SKYPE_CALL;
           return(NDPI_IS_STUN);
           break;
 
         case 0x8070: /* Implementation Version */
           if(len == 4 && ((offset+7) < payload_length)
              && (payload[offset+4] == 0x00) && (payload[offset+5] == 0x00) && (payload[offset+6] == 0x00) &&
              ((payload[offset+7] == 0x02) || (payload[offset+7] == 0x03))) {
 #ifdef DEBUG_STUN
             printf("==> Skype (3) found\n");
 #endif
 
             flow->guessed_host_protocol_id = NDPI_PROTOCOL_SKYPE_CALL;
             return(NDPI_IS_STUN);
           }
           break;
 
         case 0xFF03:
           flow->guessed_host_protocol_id = NDPI_PROTOCOL_HANGOUT_DUO;
           return(NDPI_IS_STUN);
           break;
 
         default:
 #ifdef DEBUG_STUN
           printf("==> %04X\n", attribute);
 #endif
           break;
         }
 
         offset += len + 4;
       }
 
       goto udp_stun_found;
     } else if(msg_type == 0x0800) {
       flow->guessed_host_protocol_id = NDPI_PROTOCOL_WHATSAPP_CALL;
       return(NDPI_IS_STUN);
     }
   }
 
   if((flow->protos.stun_ssl.stun.num_udp_pkts > 0) && (msg_type <= 0x00FF)) {
     flow->guessed_host_protocol_id = NDPI_PROTOCOL_WHATSAPP_CALL;
     return(NDPI_IS_STUN);
   } else
     return(NDPI_IS_NOT_STUN);
diff --git a/src/lib/protocols/tls.c b/src/lib/protocols/tls.c
index fb9ad4c4..f46686bb 100644
--- a/src/lib/protocols/tls.c
+++ b/src/lib/protocols/tls.c
@@ -201,558 +201,561 @@ struct ja3_info {
 int getTLScertificate(struct ndpi_detection_module_struct *ndpi_struct,
 		      struct ndpi_flow_struct *flow,
 		      char *buffer, int buffer_len) {
   struct ndpi_packet_struct *packet = &flow->packet;
   struct ja3_info ja3;
   u_int8_t invalid_ja3 = 0;
   u_int16_t pkt_tls_version = (packet->payload[1] << 8) + packet->payload[2], ja3_str_len;
   char ja3_str[JA3_STR_LEN];
   ndpi_MD5_CTX ctx;
   u_char md5_hash[16];
   int i;
 
   if(packet->udp) {
     /* Check if this is DTLS or return */
     if((packet->payload[1] != 0xfe)
        || ((packet->payload[2] != 0xff) && (packet->payload[2] != 0xfd))) {
       NDPI_EXCLUDE_PROTO(ndpi_struct, flow);
       return(0);
     }
   }
 
   flow->protos.stun_ssl.ssl.ssl_version = pkt_tls_version;
 
   memset(&ja3, 0, sizeof(ja3));
 
 #ifdef DEBUG_TLS
   {
     u_int16_t tls_len = (packet->payload[3] << 8) + packet->payload[4];
 
     printf("SSL Record [version: 0x%04X][len: %u]\n", pkt_tls_version, tls_len);
   }
 #endif
 
   /*
     Nothing matched so far: let's decode the certificate with some heuristics
     Patches courtesy of Denys Fedoryshchenko <nuclearcat@nuclearcat.com>
   */
   if(packet->payload[0] == 0x16 /* Handshake */) {
     u_int16_t total_len;
     u_int8_t handshake_protocol, header_len;
 
     if(packet->tcp) {
       header_len = 5; /* SSL Header */
       handshake_protocol = packet->payload[5]; /* handshake protocol a bit misleading, it is message type according TLS specs */
       total_len = (packet->payload[3] << 8) + packet->payload[4];
     } else {
       header_len = 13; /* DTLS header */
       handshake_protocol = packet->payload[13];
       total_len = ntohs(*((u_int16_t*)&packet->payload[11]));
     }
 
     total_len += header_len;
 
     memset(buffer, 0, buffer_len);
 
     /* Truncate total len, search at least in incomplete packet */
     if(total_len > packet->payload_packet_len)
       total_len = packet->payload_packet_len;
 
     /* At least "magic" 3 bytes, null for string end, otherwise no need to waste cpu cycles */
     if(total_len > 4) {
       u_int16_t base_offset = packet->tcp ? 43 : 59;
 
 #ifdef DEBUG_TLS
       printf("SSL [len: %u][handshake_protocol: %02X]\n", packet->payload_packet_len, handshake_protocol);
 #endif
 
       if((handshake_protocol == 0x02)
 	 || (handshake_protocol == 0x0b) /* Server Hello and Certificate message types are interesting for us */) {
 	u_int num_found = 0;
 	u_int16_t tls_version;
 	int i;
 	
 	if(packet->tcp)
 	  tls_version = ntohs(*((u_int16_t*)&packet->payload[header_len+4]));
 	else
 	  tls_version = ntohs(*((u_int16_t*)&packet->payload[header_len+12]));
 
 	ja3.tls_handshake_version = tls_version;
 
 	if(handshake_protocol == 0x02) {
 	  u_int16_t offset = base_offset, extension_len, j;
 	  u_int8_t  session_id_len = packet->payload[offset];
 
 #ifdef DEBUG_TLS
 	  printf("SSL Server Hello [version: 0x%04X]\n", tls_version);
 #endif
 
 	  /*
 	     The server hello decides about the SSL version of this flow
 	     https://networkengineering.stackexchange.com/questions/55752/why-does-wireshark-show-version-tls-1-2-here-instead-of-tls-1-3
 	  */
 	  flow->protos.stun_ssl.ssl.ssl_version = tls_version;
 
 	  if(packet->udp)
 	    offset += 1;
 	  else {
 	    if(tls_version < 0x7F15 /* TLS 1.3 lacks of session id */)
 	      offset += session_id_len+1;
 	  }
 
 	  ja3.num_cipher = 1, ja3.cipher[0] = ntohs(*((u_int16_t*)&packet->payload[offset]));
 	  flow->protos.stun_ssl.ssl.server_unsafe_cipher = ndpi_is_safe_ssl_cipher(ja3.cipher[0]);
 	  flow->protos.stun_ssl.ssl.server_cipher = ja3.cipher[0];
 
 #ifdef DEBUG_TLS
 	  printf("TLS [server][session_id_len: %u][cipher: %04X]\n", session_id_len, ja3.cipher[0]);
 #endif
 
 	  offset += 2 + 1;
 
 	  if((offset + 1) < packet->payload_packet_len) /* +1 because we are goint to read 2 bytes */
 	    extension_len = ntohs(*((u_int16_t*)&packet->payload[offset]));
 	  else
 	    extension_len = 0;
 
 #ifdef DEBUG_TLS
 	  printf("TLS [server][extension_len: %u]\n", extension_len);
 #endif
 	  offset += 2;
 
 	  for(i=0; i<extension_len; ) {
 	    u_int16_t extension_id, extension_len;
 
 	    if(offset >= (packet->payload_packet_len+4)) break;
 
 	    extension_id  = ntohs(*((u_int16_t*)&packet->payload[offset]));
 	    extension_len = ntohs(*((u_int16_t*)&packet->payload[offset+2]));
 
 	    if(ja3.num_tls_extension < MAX_NUM_JA3)
 	      ja3.tls_extension[ja3.num_tls_extension++] = extension_id;
 
 #ifdef DEBUG_TLS
 	    printf("TLS [server][extension_id: %u/0x%04X][len: %u]\n",
 		   extension_id, extension_id, extension_len);
 #endif
 
 	    if(extension_id == 43 /* supported versions */) {
 	      if(extension_len >= 2) {
 		u_int16_t tls_version = ntohs(*((u_int16_t*)&packet->payload[offset+4]));
 
 #ifdef DEBUG_TLS
 		printf("TLS [server] [TLS version: 0x%04X]\n", tls_version);
 #endif
 		
 		flow->protos.stun_ssl.ssl.ssl_version = tls_version;
 	      }
 	    }
 	    
 	    i += 4 + extension_len, offset += 4 + extension_len;
 	  }
 
 	  ja3_str_len = snprintf(ja3_str, sizeof(ja3_str), "%u,", ja3.tls_handshake_version);
 
 	  for(i=0; i<ja3.num_cipher; i++) {
 	    int rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, "%s%u", (i > 0) ? "-" : "", ja3.cipher[i]);
 
 	    if(rc <= 0) break; else ja3_str_len += rc;
 	  }
 	  
 	  ja3_str_len += snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, ",");
 
 	  /* ********** */
 
 	  for(i=0; i<ja3.num_tls_extension; i++) {
 	    int rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, "%s%u", (i > 0) ? "-" : "", ja3.tls_extension[i]);
 
 	    if(rc <= 0) break; else ja3_str_len += rc;
 	  }
 	  
 #ifdef DEBUG_TLS
 	  printf("TLS [server] %s\n", ja3_str);
 #endif
 
 #ifdef DEBUG_TLS
 	  printf("[JA3] Server: %s \n", ja3_str);
 #endif
 
 	  ndpi_MD5Init(&ctx);
 	  ndpi_MD5Update(&ctx, (const unsigned char *)ja3_str, strlen(ja3_str));
 	  ndpi_MD5Final(md5_hash, &ctx);
 
 	  for(i=0, j=0; i<16; i++) {
 	    int rc = snprintf(&flow->protos.stun_ssl.ssl.ja3_server[j],
 			      sizeof(flow->protos.stun_ssl.ssl.ja3_server)-j, "%02x", md5_hash[i]);
 	    if(rc <= 0) break; else j += rc;
 	  }
 	  
 #ifdef DEBUG_TLS
 	  printf("[JA3] Server: %s \n", flow->protos.stun_ssl.ssl.ja3_server);
 #endif
 
 	  flow->l4.tcp.tls_seen_server_cert = 1;
 	} else
 	  flow->l4.tcp.tls_seen_certificate = 1;
 
 	/* Check after handshake protocol header (5 bytes) and message header (4 bytes) */
 	for(i = 9; i < packet->payload_packet_len-3; i++) {
 	  if(((packet->payload[i] == 0x04) && (packet->payload[i+1] == 0x03) && (packet->payload[i+2] == 0x0c))
 	     || ((packet->payload[i] == 0x04) && (packet->payload[i+1] == 0x03) && (packet->payload[i+2] == 0x13))
 	     || ((packet->payload[i] == 0x55) && (packet->payload[i+1] == 0x04) && (packet->payload[i+2] == 0x03))) {
 	    u_int8_t server_len = packet->payload[i+3];
 
 	    if(packet->payload[i] == 0x55) {
 	      num_found++;
 
 	      if(num_found != 2) continue;
 	    }
 
 	    if((server_len+i+3) < packet->payload_packet_len) {
 	      char *server_name = (char*)&packet->payload[i+4];
 	      u_int8_t begin = 0, len, j, num_dots;
 
 	      while(begin < server_len) {
 		if(!ndpi_isprint(server_name[begin]))
 		  begin++;
 		else
 		  break;
 	      }
 
 	      // len = ndpi_min(server_len-begin, buffer_len-1);
 	      len = buffer_len-1;
 	      strncpy(buffer, &server_name[begin], len);
 	      buffer[len] = '\0';
 
 	      /* We now have to check if this looks like an IP address or host name */
 	      for(j=0, num_dots = 0; j<len; j++) {
 		if(!ndpi_isprint((buffer[j]))) {
 		  num_dots = 0; /* This is not what we look for */
 		  break;
 		} else if(buffer[j] == '.') {
 		  num_dots++;
 		  if(num_dots >=1) break;
 		}
 	      }
 
 	      if(num_dots >= 1) {
 		if(!ndpi_struct->disable_metadata_export) {
 		  ndpi_protocol_match_result ret_match;
 		  u_int16_t subproto;
 		  
 		  stripCertificateTrailer(buffer, buffer_len);
 		  snprintf(flow->protos.stun_ssl.ssl.server_certificate,
 			   sizeof(flow->protos.stun_ssl.ssl.server_certificate), "%s", buffer);
 		  
 #ifdef DEBUG_TLS
 		  printf("[server_certificate: %s]\n", flow->protos.stun_ssl.ssl.server_certificate);
 #endif
 		  
 		  subproto = ndpi_match_host_subprotocol(ndpi_struct, flow,
 							 flow->protos.stun_ssl.ssl.server_certificate,
 							 strlen(flow->protos.stun_ssl.ssl.server_certificate),
 							 &ret_match,
 							 NDPI_PROTOCOL_TLS);
 
 		  if(subproto != NDPI_PROTOCOL_UNKNOWN)
 		    ndpi_set_detected_protocol(ndpi_struct, flow, subproto, NDPI_PROTOCOL_TLS);
 		}
 
 		return(1 /* Server Certificate */);
 	      }
 	    }
 	  }
 	}
       } else if(handshake_protocol == 0x01 /* Client Hello */) {
 	u_int offset;
 
 #ifdef DEBUG_TLS
 	printf("[base_offset: %u][payload_packet_len: %u]\n", base_offset, packet->payload_packet_len);
 #endif
 
 	if(base_offset + 2 <= packet->payload_packet_len) {
 	  u_int16_t session_id_len;
 	  u_int16_t tls_version;
 
 	  if(packet->tcp)
 	    tls_version = ntohs(*((u_int16_t*)&packet->payload[header_len+4]));
 	  else
 	    tls_version = ntohs(*((u_int16_t*)&packet->payload[header_len+12]));
 
 	  session_id_len = packet->payload[base_offset];
 
 	  ja3.tls_handshake_version = tls_version;
 
 	  if((session_id_len+base_offset+2) <= total_len) {
 	    u_int16_t cipher_len, cipher_offset;
 
 	    if(packet->tcp) {
 	      cipher_len = packet->payload[session_id_len+base_offset+2] + (packet->payload[session_id_len+base_offset+1] << 8);
 	      cipher_offset = base_offset + session_id_len + 3;
 	    } else {
 	      cipher_len = ntohs(*((u_int16_t*)&packet->payload[base_offset+2]));
 	      cipher_offset = base_offset+4;
 	    }
 
 #ifdef DEBUG_TLS
 	    printf("Client SSL [client cipher_len: %u][tls_version: 0x%04X]\n", cipher_len, tls_version);
 #endif
 
 	    if((cipher_offset+cipher_len) <= total_len) {
 	      for(i=0; i<cipher_len;) {
 		u_int16_t *id = (u_int16_t*)&packet->payload[cipher_offset+i];
 
 #ifdef DEBUG_TLS
 		printf("Client SSL [cipher suite: %u/0x%04X] [%d/%u]\n", ntohs(*id), ntohs(*id), i, cipher_len);
 #endif
 		if((*id == 0) || (packet->payload[cipher_offset+i] != packet->payload[cipher_offset+i+1])) {
 		  /*
 		    Skip GREASE [https://tools.ietf.org/id/draft-ietf-tls-grease-01.html]
 		    https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967
 		  */
 
 		  if(ja3.num_cipher < MAX_NUM_JA3)
 		    ja3.cipher[ja3.num_cipher++] = ntohs(*id);
 		  else {
 		    invalid_ja3 = 1;
 #ifdef DEBUG_TLS
 		    printf("Client SSL Invalid cipher %u\n", ja3.num_cipher);
 #endif
 		  }
 		}
 
 		i += 2;
 	      }
 	    } else {
 	      invalid_ja3 = 1;
 #ifdef DEBUG_TLS
 	      printf("Client SSL Invalid len %u vs %u\n", (cipher_offset+cipher_len), total_len);
 #endif
 	    }
 
 	    offset = base_offset + session_id_len + cipher_len + 2;
 
 	    flow->l4.tcp.tls_seen_client_cert = 1;
 
 	    if(offset < total_len) {
 	      u_int16_t compression_len;
 	      u_int16_t extensions_len;
 
 	      offset += packet->tcp ? 1 : 2;
 	      compression_len = packet->payload[offset];
 	      offset++;
 
 #ifdef DEBUG_TLS
 	      printf("Client SSL [compression_len: %u]\n", compression_len);
 #endif
 
 	      // offset += compression_len + 3;
 	      offset += compression_len;
 
 	      if(offset < total_len) {
 		extensions_len = ntohs(*((u_int16_t*)&packet->payload[offset]));
 		offset += 2;
 
 #ifdef DEBUG_TLS
 		printf("Client SSL [extensions_len: %u]\n", extensions_len);
 #endif
 
 		if((extensions_len+offset) <= total_len) {
 		  /* Move to the first extension
 		     Type is u_int to avoid possible overflow on extension_len addition */
 		  u_int extension_offset = 0;
 		  u_int32_t j;
 
 		  while(extension_offset < extensions_len) {
 		    u_int16_t extension_id, extension_len, extn_off = offset+extension_offset;
 
 		    extension_id = ntohs(*((u_int16_t*)&packet->payload[offset+extension_offset]));
 		    extension_offset += 2;
 
 		    extension_len = ntohs(*((u_int16_t*)&packet->payload[offset+extension_offset]));
 		    extension_offset += 2;
 
 #ifdef DEBUG_TLS
 		    printf("Client SSL [extension_id: %u][extension_len: %u]\n", extension_id, extension_len);
 #endif
 
 		    if((extension_id == 0) || (packet->payload[extn_off] != packet->payload[extn_off+1])) {
 		      /* Skip GREASE */
 
 		      if(ja3.num_tls_extension < MAX_NUM_JA3)
 			ja3.tls_extension[ja3.num_tls_extension++] = extension_id;
 		      else {
 			invalid_ja3 = 1;
 #ifdef DEBUG_TLS
 			printf("Client SSL Invalid extensions %u\n", ja3.num_tls_extension);
 #endif
 		      }
 		    }
 		   
 		    if(extension_id == 0 /* server name */) {
 		      u_int16_t len;
 
 		      len = (packet->payload[offset+extension_offset+3] << 8) + packet->payload[offset+extension_offset+4];
 		      len = (u_int)ndpi_min(len, buffer_len-1);
-		      strncpy(buffer, (char*)&packet->payload[offset+extension_offset+5], len);
-		      buffer[len] = '\0';
 
-		      stripCertificateTrailer(buffer, buffer_len);
-
-		      if(!ndpi_struct->disable_metadata_export) {
-			snprintf(flow->protos.stun_ssl.ssl.client_certificate,
-				 sizeof(flow->protos.stun_ssl.ssl.client_certificate), "%s", buffer);
+		      if((offset+extension_offset+5+len) < packet->payload_packet_len) {
+			strncpy(buffer, (char*)&packet->payload[offset+extension_offset+5], len);
+			buffer[len] = '\0';
+			
+			stripCertificateTrailer(buffer, buffer_len);
+			
+			if(!ndpi_struct->disable_metadata_export) {
+			  snprintf(flow->protos.stun_ssl.ssl.client_certificate,
+				   sizeof(flow->protos.stun_ssl.ssl.client_certificate), "%s", buffer);
+			}
 		      }
 		    } else if(extension_id == 10 /* supported groups */) {
 		      u_int16_t s_offset = offset+extension_offset + 2;
 
 #ifdef DEBUG_TLS
 		      printf("Client SSL [EllipticCurveGroups: len=%u]\n", extension_len);
 #endif
 
 		      if((s_offset+extension_len-2) <= total_len) {
 			for(i=0; i<extension_len-2;) {
 			  u_int16_t s_group = ntohs(*((u_int16_t*)&packet->payload[s_offset+i]));
 
 #ifdef DEBUG_TLS
 			  printf("Client SSL [EllipticCurve: %u/0x%04X]\n", s_group, s_group);
 #endif
 			  if((s_group == 0) || (packet->payload[s_offset+i] != packet->payload[s_offset+i+1])) {
 			    /* Skip GREASE */
 			    if(ja3.num_elliptic_curve < MAX_NUM_JA3)
 			      ja3.elliptic_curve[ja3.num_elliptic_curve++] = s_group;
 			    else {
 			      invalid_ja3 = 1;
 #ifdef DEBUG_TLS
 			      printf("Client SSL Invalid num elliptic %u\n", ja3.num_elliptic_curve);
 #endif
 			    }
 			  }
 
 			  i += 2;
 			}
 		      } else {
 			invalid_ja3 = 1;
 #ifdef DEBUG_TLS
 			printf("Client SSL Invalid len %u vs %u\n", (s_offset+extension_len-1), total_len);
 #endif
 		      }
 		    } else if(extension_id == 11 /* ec_point_formats groups */) {
 		      u_int16_t s_offset = offset+extension_offset + 1;
 
 #ifdef DEBUG_TLS
 		      printf("Client SSL [EllipticCurveFormat: len=%u]\n", extension_len);
 #endif
 		      if((s_offset+extension_len) < total_len) {
 			for(i=0; i<extension_len-1;i++) {
 			  u_int8_t s_group = packet->payload[s_offset+i];
 
 #ifdef DEBUG_TLS
 			  printf("Client SSL [EllipticCurveFormat: %u]\n", s_group);
 #endif
 
 			  if(ja3.num_elliptic_curve_point_format < MAX_NUM_JA3)
 			    ja3.elliptic_curve_point_format[ja3.num_elliptic_curve_point_format++] = s_group;
 			  else {
 			    invalid_ja3 = 1;
 #ifdef DEBUG_TLS
 			    printf("Client SSL Invalid num elliptic %u\n", ja3.num_elliptic_curve_point_format);
 #endif
 			  }
 			}
 		      } else {
 			invalid_ja3 = 1;
 #ifdef DEBUG_TLS
 			printf("Client SSL Invalid len %u vs %u\n", s_offset+extension_len, total_len);
 #endif
 		      }
 		    } else if(extension_id == 43 /* supported versions */) {
 		      u_int8_t version_len = packet->payload[offset+4];
 		      
 		      if(version_len == (extension_len-1)) {
 #ifdef DEBUG_TLS
 			u_int8_t j;
 			
 			for(j=0; j<version_len; j += 2) {
 			  u_int16_t tls_version = ntohs(*((u_int16_t*)&packet->payload[offset+5+j]));
 			  
 			  printf("Client SSL [TLS version: 0x%04X]\n", tls_version);
 			}
 #endif
 		      }
 		    }
 
 		    extension_offset += extension_len;
 
 #ifdef DEBUG_TLS
 		    printf("Client SSL [extension_offset/len: %u/%u]\n", extension_offset, extension_len);
 #endif
 		  } /* while */
 
 		  if(!invalid_ja3) {
 		  compute_ja3c:
 		    ja3_str_len = snprintf(ja3_str, sizeof(ja3_str), "%u,", ja3.tls_handshake_version);
 
 		    for(i=0; i<ja3.num_cipher; i++) {
 		      ja3_str_len += snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, "%s%u",
 					      (i > 0) ? "-" : "", ja3.cipher[i]);
 		    }
 
 		    ja3_str_len += snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, ",");
 
 		    /* ********** */
 
 		    for(i=0; i<ja3.num_tls_extension; i++)
 		      ja3_str_len += snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, "%s%u",
 					      (i > 0) ? "-" : "", ja3.tls_extension[i]);
 
 		    ja3_str_len += snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, ",");
 
 		    /* ********** */
 
 		    for(i=0; i<ja3.num_elliptic_curve; i++)
 		      ja3_str_len += snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, "%s%u",
 					      (i > 0) ? "-" : "", ja3.elliptic_curve[i]);
 
 		    ja3_str_len += snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, ",");
 
 		    for(i=0; i<ja3.num_elliptic_curve_point_format; i++)
 		      ja3_str_len += snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, "%s%u",
 					      (i > 0) ? "-" : "", ja3.elliptic_curve_point_format[i]);
 
 #ifdef DEBUG_TLS
 		    printf("[JA3] Client: %s \n", ja3_str);
 #endif
 
 		    ndpi_MD5Init(&ctx);
 		    ndpi_MD5Update(&ctx, (const unsigned char *)ja3_str, strlen(ja3_str));
 		    ndpi_MD5Final(md5_hash, &ctx);
 
 		    for(i=0, j=0; i<16; i++)
 		      j += snprintf(&flow->protos.stun_ssl.ssl.ja3_client[j],
 				    sizeof(flow->protos.stun_ssl.ssl.ja3_client)-j, "%02x",
 				    md5_hash[i]);
 
 #ifdef DEBUG_TLS
 		    printf("[JA3] Client: %s \n", flow->protos.stun_ssl.ssl.ja3_client);
 #endif
 		  }
 
 		  return(2 /* Client Certificate */);
 		}
 	      } else if(offset == total_len) {
 		/* SSL does not have extensions etc */
 		goto compute_ja3c;
 	      }
 	    }
 	  }
 	}
       }
     }
   }
 
   return(0); /* Not found */
 }
 
 /* **************************************** */
 
 /* See https://blog.catchpoint.com/2017/05/12/dissecting-tls-using-wireshark/ */
