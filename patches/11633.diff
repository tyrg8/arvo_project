commit 1bd99df3535ac053f182a7e4e2246dae3e4c53ed
Author: Jaap Keuter <jaap.keuter@xs4all.nl>
Date:   Mon Dec 3 17:15:27 2018 +0100

    CDMA2000: Improper offset handling
    
    Somewhere in the code the handling of the offset goes wrong.
    Instead of incrementing the offset it's the pointer to the offset
    which is being incremented, leading to all sorts of problems.
    Add a dereference to these few statements which lack them.
    
    Bug: 15322
    Change-Id: If575711a5b120f25f0172e0efb26e01f07244e8b
    Signed-off-by: Jaap Keuter <jaap.keuter@xs4all.nl>
    Reviewed-on: https://code.wireshark.org/review/30899
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Anders Broman <a.broman58@gmail.com>

diff --git a/epan/dissectors/packet-cdma2k.c b/epan/dissectors/packet-cdma2k.c
index 3a1e20c6e0..285275e555 100644
--- a/epan/dissectors/packet-cdma2k.c
+++ b/epan/dissectors/packet-cdma2k.c
@@ -3782,317 +3782,317 @@ static void cdma2k_message_ALERT_WITH_INFO(proto_item *item,tvbuff_t *tvb,proto_
 /* Helper function to decode Active Set Record Field Parameters */
 static void cdma2k_message_ACTIVE_SET_RECORD_FIELDS(proto_item *item _U_, tvbuff_t *tvb, proto_tree *subtree, guint16 *l_offset, guint16 chInd, guint16 schIncl)
 {
     guint16 loop = -1, numForSch = -1, numRevSch = -1, pilotCnt = -1, srchOffsetIncl = -1;
     guint16 pilotInfoIncl = -1, recLen = -1, schCnt = -1, fchInfoIncl = -1, fchLowIncl = -1;
     guint16 fchHighIncl = -1, schInfoIncl = -1, schLowIncl = -1, ccshIncl = -1, ccshEncIncl = -1;
     guint16 pilotIncl = -1, schHighIncl = -1, dcchInfoIncl = -1, dcchLowIncl = -1, dcchHighIncl = -1;
     guint16 bcmcFunIncl = -1, addPlcmFchIncl = -1, cpcchInfoIncl = -1, addPlcmFchType = -1;
     proto_tree *subtree1 = NULL, *subtree2 = NULL;
     proto_item *item1 = NULL, *item2 = NULL;
 
     if(schIncl != 0)
     {
         proto_tree_add_bits_item(subtree, hf_cdma2k_Num_For_Sch, tvb, *l_offset, 5, ENC_BIG_ENDIAN);
         numForSch = tvb_get_bits8(tvb,*l_offset, 5);
         *l_offset+=5;
         if(numForSch != 0)
         {
             for(loop = 1; loop <= numForSch; loop++)
             {
                 item1 = proto_tree_add_item(subtree, hf_cdma2k_Record_For_Sch, tvb, *l_offset/8,numForSch*2, ENC_NA);
                 proto_item_append_text(item1," : [%d]", loop);
                 subtree1 = proto_item_add_subtree(item1,ett_cdma2k_subtree2);
                 proto_tree_add_bits_item(subtree1, hf_cdma2k_Sch_Id, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
                 *l_offset+=1;
                 proto_tree_add_bits_item(subtree1, hf_cdma2k_Sccl_Index, tvb, *l_offset, 4, ENC_BIG_ENDIAN);
                 *l_offset+=4;
                 proto_tree_add_bits_item(subtree1, hf_cdma2k_Sch_Num_Bits_Idx, tvb, *l_offset, 4, ENC_BIG_ENDIAN);
                 *l_offset+=4;
             }
         }
         proto_tree_add_bits_item(subtree, hf_cdma2k_Num_Rev_Sch, tvb, *l_offset, 5, ENC_BIG_ENDIAN);
         numRevSch = tvb_get_bits8(tvb,*l_offset, 5);
         *l_offset+=5;
         if(numRevSch != 0)
         {
             for(loop = 1; loop <= numRevSch; loop++)
             {
                 item1 = proto_tree_add_item(subtree, hf_cdma2k_Record_Rev_Sch, tvb, *l_offset/8,numRevSch*1, ENC_NA);
                 proto_item_append_text(item1," : [%d]", loop);
                 subtree1 = proto_item_add_subtree(item1,ett_cdma2k_subtree2);
                 proto_tree_add_bits_item(subtree1, hf_cdma2k_Sch_Id, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
                 *l_offset+=1;
                 proto_tree_add_bits_item(subtree1, hf_cdma2k_Walsh_Id, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
                 *l_offset+=1;
                 proto_tree_add_bits_item(subtree1, hf_cdma2k_Sch_Num_Bits_Idx, tvb, *l_offset, 4, ENC_BIG_ENDIAN);
                 *l_offset+=4;
             }
         }
     } /* schIncl */
 
     proto_tree_add_bits_item(subtree, hf_cdma2k_Num_Pilots, tvb, *l_offset, 3, ENC_BIG_ENDIAN);
     pilotCnt = tvb_get_bits8(tvb,*l_offset, 3);
     *l_offset+=3;
     proto_tree_add_bits_item(subtree, hf_cdma2k_Srch_Offset_Incl, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
     srchOffsetIncl = tvb_get_bits8(tvb,*l_offset, 1);
     *l_offset+=1;
     for(loop = 1; loop <= pilotCnt; loop++)
     {
         item1 = proto_tree_add_item(subtree, hf_cdma2k_Record_Pilots, tvb, *l_offset/8,1, ENC_NA);
         proto_item_append_text(item1," : [%d]", loop);
         subtree1 = proto_item_add_subtree(item1,ett_cdma2k_subtree2);
         proto_tree_add_bits_item(subtree1, hf_cdma2k_Pilot_Pn, tvb, *l_offset, 9, ENC_BIG_ENDIAN);
         *l_offset+=9;
         if(srchOffsetIncl == 1)
         {
             proto_tree_add_bits_item(subtree1, hf_cdma2k_Srch_Offset, tvb, *l_offset, 3, ENC_BIG_ENDIAN);
             *l_offset+=3;
         }
         proto_tree_add_bits_item(subtree1, hf_cdma2k_Add_Pilot_Rec_Incl, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
         pilotInfoIncl = tvb_get_bits8(tvb,*l_offset, 1);
         *l_offset+=1;
         if(pilotInfoIncl == 1)
         {
             proto_tree_add_bits_item(subtree1, hf_cdma2k_Pilot_Rec_Type, tvb, *l_offset, 3, ENC_BIG_ENDIAN);
             *l_offset+=3;
             proto_tree_add_bits_item(subtree1, hf_cdma2k_Record_Len, tvb, *l_offset, 3, ENC_BIG_ENDIAN);
             recLen = tvb_get_bits8(tvb,*l_offset, 3);
-            l_offset+=3;
+            *l_offset+=3;
             item2 = proto_tree_add_item(subtree1, hf_cdma2k_Type_Specific_Fields, tvb, (*l_offset/8),recLen+1, ENC_NA);
             while(recLen > 0)
             {
                 proto_item_append_text(item2," 0x%02x",tvb_get_bits8(tvb,*l_offset, 8));
-                l_offset+=8;
+                *l_offset+=8;
                 recLen-=1;
             }
         }
         proto_tree_add_bits_item(subtree1, hf_cdma2k_Pwr_Comb_Ind, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
         *l_offset+=1;
         if(chInd == 5 || chInd == 7)
         {
             proto_tree_add_bits_item(subtree1, hf_cdma2k_Code_Chan_Fch, tvb, *l_offset, 11, ENC_BIG_ENDIAN);
             *l_offset+=11;
             proto_tree_add_bits_item(subtree1, hf_cdma2k_Qof_Mask_Id_Fch, tvb, *l_offset, 2, ENC_BIG_ENDIAN);
             *l_offset+=2;
         }
         if(chInd == 2 || chInd == 6 || chInd == 7)
         {
             proto_tree_add_bits_item(subtree1, hf_cdma2k_Code_Chan_Dcch, tvb, *l_offset, 11, ENC_BIG_ENDIAN);
             *l_offset+=11;
             proto_tree_add_bits_item(subtree1, hf_cdma2k_Qof_Mask_Id_Dcch, tvb, *l_offset, 2, ENC_BIG_ENDIAN);
             *l_offset+=2;
         }
 
         if(schIncl != 0)
         {
             proto_tree_add_bits_item(subtree1, hf_cdma2k_Num_Sch, tvb, *l_offset, 5, ENC_BIG_ENDIAN);
             schCnt = tvb_get_bits8(tvb,*l_offset, 5);
             *l_offset+=5;
             for(loop = 1; loop <= schCnt; loop++)
             {
                 item2 = proto_tree_add_item(subtree1, hf_cdma2k_Record_Sch, tvb, *l_offset/8,-1, ENC_NA);
                 proto_item_append_text(item2," : [%d]", loop);
                 subtree2 = proto_item_add_subtree(item2,ett_cdma2k_subtree2);
                 proto_tree_add_bits_item(subtree2,hf_cdma2k_Sch_Id, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
                 *l_offset+=1;
                 proto_tree_add_bits_item(subtree2,hf_cdma2k_Sccl_Index, tvb, *l_offset, 4, ENC_BIG_ENDIAN);
                 *l_offset+=4;
                 proto_tree_add_bits_item(subtree2,hf_cdma2k_Pilot_Incl, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
                 pilotIncl = tvb_get_bits8(tvb,*l_offset, 1);
                 *l_offset+=1;
                 if(pilotIncl == 1)
                 {
                     proto_tree_add_bits_item(subtree2,hf_cdma2k_Code_Chan_Sch, tvb, *l_offset, 11, ENC_BIG_ENDIAN);
                     *l_offset+=11;
                     proto_tree_add_bits_item(subtree2,hf_cdma2k_Qof_Mask_Id_Sch, tvb, *l_offset, 2, ENC_BIG_ENDIAN);
                     *l_offset+=2;
                 }
             }
         } /* schIncl  */
     } /* loop  */
 
     if(chInd == 5 || chInd == 7)
     {
         proto_tree_add_bits_item(subtree, hf_cdma2k_3xFch_Info_Incl, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
         fchInfoIncl = tvb_get_bits8(tvb,*l_offset, 1);
         *l_offset+=1;
     }
     if(chInd == 2 || chInd == 6 || chInd == 7)
     {
         proto_tree_add_bits_item(subtree, hf_cdma2k_3xDcch_Info_Incl, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
         dcchInfoIncl = tvb_get_bits8(tvb,*l_offset, 1);
         *l_offset+=1;
     }
     if((fchInfoIncl == 1) || (dcchInfoIncl == 1))
     {
         for(loop = 1; loop <= pilotCnt; loop++)
         {
             item1 = proto_tree_add_item(subtree, hf_cdma2k_Record_Pilots, tvb, *l_offset/8,-1, ENC_NA);
             proto_item_append_text(item1," : [%d]", loop);
             subtree1 = proto_item_add_subtree(item1,ett_cdma2k_subtree2);
             if(fchInfoIncl == 1)
             {
                 proto_tree_add_bits_item(subtree1, hf_cdma2k_3xFch_Low_Incl, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
                 fchLowIncl = tvb_get_bits8(tvb,*l_offset, 1);
                 *l_offset+=1;
                 if(fchLowIncl == 1)
                 {
                     proto_tree_add_bits_item(subtree1, hf_cdma2k_Qof_Mask_Id_Fch_Low, tvb, *l_offset, 2, ENC_BIG_ENDIAN);
                     *l_offset+=2;
                     proto_tree_add_bits_item(subtree1, hf_cdma2k_Code_Chan_Fch_Low, tvb, *l_offset, 11, ENC_BIG_ENDIAN);
                     *l_offset+=11;
                 }
                 proto_tree_add_bits_item(subtree1, hf_cdma2k_3xFch_High_Incl, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
                 fchHighIncl = tvb_get_bits8(tvb,*l_offset, 1);
                 *l_offset+=1;
                 if(fchHighIncl == 1)
                 {
                     proto_tree_add_bits_item(subtree1, hf_cdma2k_Qof_Mask_Id_Fch_High, tvb, *l_offset, 2, ENC_BIG_ENDIAN);
                     *l_offset+=2;
                     proto_tree_add_bits_item(subtree1, hf_cdma2k_Code_Chan_Fch_High, tvb, *l_offset, 11, ENC_BIG_ENDIAN);
                     *l_offset+=11;
                 }
             }
             if(dcchInfoIncl == 1)
             {
                 proto_tree_add_bits_item(subtree1, hf_cdma2k_3xDcch_Low_Incl, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
                 dcchLowIncl = tvb_get_bits8(tvb,*l_offset, 1);
                 *l_offset+=1;
                 if(dcchLowIncl == 1)
                 {
                     proto_tree_add_bits_item(subtree1, hf_cdma2k_Qof_Mask_Id_Dcch_Low, tvb, *l_offset, 2, ENC_BIG_ENDIAN);
                     *l_offset+=2;
                     proto_tree_add_bits_item(subtree1, hf_cdma2k_Code_Chan_Dcch_Low, tvb, *l_offset, 11, ENC_BIG_ENDIAN);
                     *l_offset+=11;
                 }
                 proto_tree_add_bits_item(subtree1, hf_cdma2k_3xDcch_High_Incl, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
                 dcchHighIncl = tvb_get_bits8(tvb,*l_offset, 1);
                 *l_offset+=1;
                 if(dcchHighIncl == 1)
                 {
                     proto_tree_add_bits_item(subtree1, hf_cdma2k_Qof_Mask_Id_Dcch_High, tvb, *l_offset, 2, ENC_BIG_ENDIAN);
                     *l_offset+=2;
                     proto_tree_add_bits_item(subtree1, hf_cdma2k_Code_Chan_Dcch_High, tvb, *l_offset, 11, ENC_BIG_ENDIAN);
                     *l_offset+=11;
                 }
             }
             if(schIncl != 0)
             {
                 proto_tree_add_bits_item(subtree1, hf_cdma2k_3xSch_Info_Incl, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
                 schInfoIncl = tvb_get_bits8(tvb,*l_offset, 1);
                 *l_offset+=1;
                 if(schInfoIncl == 1)
                 {
                     for(loop = 1; loop <= schCnt; loop++)
                     {
                         item2 = proto_tree_add_item(subtree1, hf_cdma2k_Record_Sch, tvb, *l_offset/8,-1, ENC_NA);
                         proto_item_append_text(item2," : [%d]", loop);
                         subtree2 = proto_item_add_subtree(item2,ett_cdma2k_subtree2);
                         proto_tree_add_bits_item(subtree2,hf_cdma2k_Sch_Id, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
                         *l_offset+=1;
                         proto_tree_add_bits_item(subtree2,hf_cdma2k_3xSch_Low_Incl, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
                         schLowIncl = tvb_get_bits8(tvb,*l_offset, 1);
                         *l_offset+=1;
                         if(schLowIncl == 1)
                         {
                             proto_tree_add_bits_item(subtree2,hf_cdma2k_Qof_Mask_Id_Sch_Low, tvb, *l_offset, 2, ENC_BIG_ENDIAN);
                             *l_offset+=2;
                             proto_tree_add_bits_item(subtree2,hf_cdma2k_Code_Chan_Sch_Low, tvb, *l_offset, 11, ENC_BIG_ENDIAN);
                             *l_offset+=11;
                         }
                         proto_tree_add_bits_item(subtree2,hf_cdma2k_3xSch_High_Incl, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
                         schHighIncl = tvb_get_bits8(tvb,*l_offset, 1);
                         *l_offset+=1;
                         if(schHighIncl == 1)
                         {
                             proto_tree_add_bits_item(subtree2,hf_cdma2k_Qof_Mask_Id_Sch_High, tvb, *l_offset, 2, ENC_BIG_ENDIAN);
                             *l_offset+=2;
                             proto_tree_add_bits_item(subtree2,hf_cdma2k_Code_Chan_Sch_High, tvb, *l_offset, 11, ENC_BIG_ENDIAN);
                             *l_offset+=11;
                         }
                     } /* Sch loop */
                 } /* schInfoIncl */
             } /* schIncl */
         } /* Pilot loop */
     } /* FchInfoIncl */
 
     proto_tree_add_bits_item(subtree, hf_cdma2k_Ccsh_Included, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
     ccshIncl = tvb_get_bits8(tvb,*l_offset, 1);
     *l_offset+=1;
     if(ccshIncl  == 1)
     {
         proto_tree_add_bits_item(subtree, hf_cdma2k_Use_Ccsh_Encoder_Time, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
         ccshEncIncl = tvb_get_bits8(tvb,*l_offset, 1);
         *l_offset+=1;
         if(ccshEncIncl  == 1)
         {
             proto_tree_add_bits_item(subtree, hf_cdma2k_Ccsh_Encoder_Action_Time, tvb, *l_offset, 6, ENC_BIG_ENDIAN);
             *l_offset+=6;
         }
         for(loop = 1; loop <= pilotCnt; loop++)
         {
             item1 = proto_tree_add_item(subtree, hf_cdma2k_Record_Pilots, tvb, *l_offset/8,-1, ENC_NA);
             proto_item_append_text(item1," : [%d]", loop);
             subtree1 = proto_item_add_subtree(item1,ett_cdma2k_subtree2);
             for(loop = 1; loop <= schCnt; loop++)
             {
                 item2 = proto_tree_add_item(subtree1, hf_cdma2k_Record_Sch, tvb, *l_offset/8,-1, ENC_NA);
                 proto_item_append_text(item2," : [%d]", loop);
                 subtree2 = proto_item_add_subtree(item2,ett_cdma2k_subtree2);
                 proto_tree_add_bits_item(subtree2,hf_cdma2k_Ccsh_Encoder_Type, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
                 *l_offset+=1;
             }
         }
     }
 
     if(chInd == 2 || chInd == 6 || chInd == 7)
     {
         proto_tree_add_bits_item(subtree, hf_cdma2k_Fundicated_Bcmc_Ind, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
         bcmcFunIncl = tvb_get_bits8(tvb,*l_offset, 1);
         *l_offset+=1;
         if(chInd == 7 && bcmcFunIncl == 1)
         {
             proto_tree_add_bits_item(subtree, hf_cdma2k_Rev_Fch_Assigned, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
             *l_offset+=1;
             proto_tree_add_bits_item(subtree, hf_cdma2k_Add_Plcm_For_Fch_Incl, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
             addPlcmFchIncl = tvb_get_bits8(tvb,*l_offset, 1);
             *l_offset+=1;
             if(addPlcmFchIncl == 1)
             {
                 proto_tree_add_bits_item(subtree, hf_cdma2k_Add_Plcm_For_Fch_Type, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
                 addPlcmFchType = tvb_get_bits8(tvb,*l_offset, 1);
                 *l_offset+=1;
                 if(addPlcmFchType == 1)
                 {
                     proto_tree_add_bits_item(subtree, hf_cdma2k_Add_Plcm_For_Fch_39, tvb, *l_offset, 39, ENC_BIG_ENDIAN);
                     *l_offset+=39;
                 }
             }
             proto_tree_add_bits_item(subtree, hf_cdma2k_For_Cpcch_Info_Incl, tvb, *l_offset, 1, ENC_BIG_ENDIAN);
             cpcchInfoIncl = tvb_get_bits8(tvb,*l_offset, 1);
             *l_offset+=1;
         }
 
         if(((chInd == 2 || chInd == 6) && (bcmcFunIncl == 1)) || ((chInd == 7) && (cpcchInfoIncl == 1)))
         {
             for(loop = 1; loop <= pilotCnt; loop++)
             {
                 item1 = proto_tree_add_item(subtree, hf_cdma2k_Record_Pilots, tvb, *l_offset/8,-1, ENC_NA);
                 proto_item_append_text(item1," : [%d]", loop);
                 subtree1 = proto_item_add_subtree(item1,ett_cdma2k_subtree2);
                 proto_tree_add_bits_item(subtree1, hf_cdma2k_For_Cpcch_Walsh, tvb, *l_offset, 7, ENC_BIG_ENDIAN);
                 *l_offset+=7;
                 proto_tree_add_bits_item(subtree1, hf_cdma2k_For_Cpcsch, tvb, *l_offset, 5, ENC_BIG_ENDIAN);
                 *l_offset+=5;
             }
         }
     }
 
     if(*l_offset%8 != 0)
     {
         proto_tree_add_bits_item(subtree, hf_cdma2k_Reserved, tvb, *l_offset, (8-(*l_offset%8)), ENC_BIG_ENDIAN);
     }
 }
 
 
 /* Helper function to decode Authentication Field Parameters */
