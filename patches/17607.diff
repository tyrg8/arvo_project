commit 0e8ed9a34e04cc4e56b31f4057c267630c4a7656
Author: Albert Astals Cid <aacid@kde.org>
Date:   Mon Sep 23 10:01:18 2019 +0200

    Annot: Fix uninitialized memory read on broken files
    
    By initializing width and charCount earlier in Annot::layoutText,
    there's two early return that need the values to be initialized and
    we were initializing them later in the function anyway so just move the
    block to the beginning of the function

diff --git a/poppler/Annot.cc b/poppler/Annot.cc
index e896468b..b51eeae4 100644
--- a/poppler/Annot.cc
+++ b/poppler/Annot.cc
@@ -3834,218 +3834,219 @@ void AnnotWidget::setNewAppearance(Object &&newAppearance)
 // Grand unified handler for preparing text strings to be drawn into form
 // fields.  Takes as input a text string (in PDFDocEncoding or UTF-16).
 // Converts some or all of this string to the appropriate encoding for the
 // specified font, and computes the width of the text.  Can optionally stop
 // converting when a specified width has been reached, to perform line-breaking
 // for multi-line fields.
 //
 // Parameters:
 //   text: input text string to convert
 //   outBuf: buffer for writing re-encoded string
 //   i: index at which to start converting; will be updated to point just after
 //      last character processed
 //   font: the font which will be used for display
 //   width: computed width (unscaled by font size) will be stored here
 //   widthLimit: if non-zero, stop converting to keep width under this value
 //      (should be scaled down by font size)
 //   charCount: count of number of characters will be stored here
 //   noReencode: if set, do not try to translate the character encoding
 //      (useful for Zapf Dingbats or other unusual encodings)
 //      can only be used with simple fonts, not CID-keyed fonts
 //
 // TODO: Handle surrogate pairs in UTF-16.
 //       Should be able to generate output for any CID-keyed font.
 //       Doesn't handle vertical fonts--should it?
 void Annot::layoutText(const GooString *text, GooString *outBuf, int *i,
                              const GfxFont *font, double *width, double widthLimit,
                              int *charCount, bool noReencode)
 {
   CharCode c;
   Unicode uChar, *uAux;
   double w = 0.0;
   int uLen, n;
   double dx, dy, ox, oy;
+
+  if (width != nullptr)
+    *width = 0.0;
+  if (charCount != nullptr)
+    *charCount = 0;
+
   if (!text) {
     return;
   }
   bool unicode = text->hasUnicodeMarker();
   bool spacePrev;              // previous character was a space
 
   // State for backtracking when more text has been processed than fits within
   // widthLimit.  We track for both input (text) and output (outBuf) the offset
   // to the first character to discard.
   //
   // We keep track of several points:
   //   1 - end of previous completed word which fits
   //   2 - previous character which fit
   int last_i1, last_i2, last_o1, last_o2;
 
   if (unicode && text->getLength() % 2 != 0) {
     error(errSyntaxError, -1, "AnnotWidget::layoutText, bad unicode string");
     return;
   }
 
   // skip Unicode marker on string if needed
   if (unicode && *i == 0)
     *i = 2;
 
   // Start decoding and copying characters, until either:
   //   we reach the end of the string
   //   we reach the maximum width
   //   we reach a newline character
   // As we copy characters, keep track of the last full word to fit, so that we
   // can backtrack if we exceed the maximum width.
   last_i1 = last_i2 = *i;
   last_o1 = last_o2 = 0;
   spacePrev = false;
   outBuf->clear();
 
   while (*i < text->getLength()) {
     last_i2 = *i;
     last_o2 = outBuf->getLength();
 
     if (unicode) {
       uChar = (unsigned char)(text->getChar(*i)) << 8;
       uChar += (unsigned char)(text->getChar(*i + 1));
       *i += 2;
     } else {
       if (noReencode)
         uChar = text->getChar(*i) & 0xff;
       else
         uChar = pdfDocEncoding[text->getChar(*i) & 0xff];
       *i += 1;
     }
 
     // Explicit line break?
     if (uChar == '\r' || uChar == '\n') {
       // Treat a <CR><LF> sequence as a single line break
       if (uChar == '\r' && *i < text->getLength()) {
         if (unicode && text->getChar(*i) == '\0'
             && text->getChar(*i + 1) == '\n')
           *i += 2;
         else if (!unicode && text->getChar(*i) == '\n')
           *i += 1;
       }
 
       break;
     }
 
     if (noReencode) {
       outBuf->append(uChar);
     } else {
       const CharCodeToUnicode *ccToUnicode = font->getToUnicode();
       if (!ccToUnicode) {
         // This assumes an identity CMap.
         outBuf->append((uChar >> 8) & 0xff);
         outBuf->append(uChar & 0xff);
       } else if (ccToUnicode->mapToCharCode(&uChar, &c, 1)) {
         if (font->isCIDFont()) {
           // TODO: This assumes an identity CMap.  It should be extended to
           // handle the general case.
           outBuf->append((c >> 8) & 0xff);
           outBuf->append(c & 0xff);
         } else {
           // 8-bit font
           outBuf->append(c);
         }
       } else {
         error(errSyntaxError, -1, "AnnotWidget::layoutText, cannot convert U+{0:04uX}", uChar);
       }
     }
 
     // If we see a space, then we have a linebreak opportunity.
     if (uChar == ' ') {
       last_i1 = *i;
       if (!spacePrev)
         last_o1 = last_o2;
       spacePrev = true;
     } else {
       spacePrev = false;
     }
 
     // Compute width of character just output
     if (outBuf->getLength() > last_o2) {
       dx = 0.0;
       font->getNextChar(outBuf->c_str() + last_o2,
                         outBuf->getLength() - last_o2,
                         &c, &uAux, &uLen, &dx, &dy, &ox, &oy);
       w += dx;
     }
 
     // Current line over-full now?
     if (widthLimit > 0.0 && w > widthLimit) {
       if (last_o1 > 0) {
         // Back up to the previous word which fit, if there was a previous
         // word.
         *i = last_i1;
         outBuf->del(last_o1, outBuf->getLength() - last_o1);
       } else if (last_o2 > 0) {
         // Otherwise, back up to the previous character (in the only word on
         // this line)
         *i = last_i2;
         outBuf->del(last_o2, outBuf->getLength() - last_o2);
       } else {
         // Otherwise, we were trying to fit the first character; include it
         // anyway even if it overflows the space--no updates to make.
       }
       break;
     }
   }
 
   // If splitting input into lines because we reached the width limit, then
   // consume any remaining trailing spaces that would go on this line from the
   // input.  If in doing so we reach a newline, consume that also.  This code
   // won't run if we stopped at a newline above, since in that case w <=
   // widthLimit still.
   if (widthLimit > 0.0 && w > widthLimit) {
     if (unicode) {
       while (*i < text->getLength()
              && text->getChar(*i) == '\0' && text->getChar(*i + 1) == ' ')
         *i += 2;
       if (*i < text->getLength()
           && text->getChar(*i) == '\0' && text->getChar(*i + 1) == '\r')
         *i += 2;
       if (*i < text->getLength()
           && text->getChar(*i) == '\0' && text->getChar(*i + 1) == '\n')
         *i += 2;
     } else {
       while (*i < text->getLength() && text->getChar(*i) == ' ')
         *i += 1;
       if (*i < text->getLength() && text->getChar(*i) == '\r')
         *i += 1;
       if (*i < text->getLength() && text->getChar(*i) == '\n')
         *i += 1;
     }
   }
 
   // Compute the actual width and character count of the final string, based on
   // breakpoint, if this information is requested by the caller.
   if (width != nullptr || charCount != nullptr) {
     const char *s = outBuf->c_str();
     int len = outBuf->getLength();
 
-    if (width != nullptr)
-      *width = 0.0;
-    if (charCount != nullptr)
-      *charCount = 0;
-
     while (len > 0) {
       dx = 0.0;
       n = font->getNextChar(s, len, &c, &uAux, &uLen, &dx, &dy, &ox, &oy);
 
       if (n == 0) {
         break;
       }
 
       if (width != nullptr)
         *width += dx;
       if (charCount != nullptr)
         *charCount += 1;
 
       s += n;
       len -= n;
     }
   }
 }
 
 // Copy the given string to appearBuf, adding parentheses around it and
 // escaping characters as appropriate.
