commit 48b2bcf7d33f8d29e36fc7e3c07e4c7dddd43982
Author: Ram Mohan <ram.mohan@ittiam.com>
Date:   Thu Oct 19 19:07:32 2023 +0530

    Allocate width aligned to MCU size for boundary rows
    
    jpeg_write_raw_data() expects input size to be aligned to MCU.
    If the image dimensions are not aligned then padding is done for
    boundary rows. The padded rows allocation is not proper and this
    is corrected.
    
    Bug: oss-fuzz-63314
    Test: ultrahdr_enc_fuzzer

diff --git a/jpegencoderhelper.cpp b/jpegencoderhelper.cpp
index ff0b48a..88b33ba 100644
--- a/jpegencoderhelper.cpp
+++ b/jpegencoderhelper.cpp
@@ -143,81 +143,81 @@ void JpegEncoderHelper::setJpegCompressStruct(int width, int height, int quality
 bool JpegEncoderHelper::compressYuv(jpeg_compress_struct* cinfo, const uint8_t* yBuffer,
                                     const uint8_t* uvBuffer, int lumaStride, int chromaStride) {
     JSAMPROW y[kCompressBatchSize];
     JSAMPROW cb[kCompressBatchSize / 2];
     JSAMPROW cr[kCompressBatchSize / 2];
     JSAMPARRAY planes[3]{y, cb, cr};
 
+    const int aligned_width = ALIGNM(cinfo->image_width, kCompressBatchSize);
+    const bool need_padding = (lumaStride < aligned_width);
     size_t u_plane_size = chromaStride * cinfo->image_height / 2;
     uint8_t* y_plane = const_cast<uint8_t*>(yBuffer);
     uint8_t* u_plane = const_cast<uint8_t*>(uvBuffer);
     uint8_t* v_plane = const_cast<uint8_t*>(u_plane + u_plane_size);
-    std::unique_ptr<uint8_t[]> empty = std::make_unique<uint8_t[]>(cinfo->image_width);
-    memset(empty.get(), 0, cinfo->image_width);
+    std::unique_ptr<uint8_t[]> empty = std::make_unique<uint8_t[]>(aligned_width);
+    memset(empty.get(), 0, aligned_width);
 
-    const int aligned_width = ALIGNM(cinfo->image_width, kCompressBatchSize);
-    const bool need_padding = (lumaStride < aligned_width);
     std::unique_ptr<uint8_t[]> buffer_intrm = nullptr;
     uint8_t* y_plane_intrm = nullptr;
     uint8_t* u_plane_intrm = nullptr;
     uint8_t* v_plane_intrm = nullptr;
     JSAMPROW y_intrm[kCompressBatchSize];
     JSAMPROW cb_intrm[kCompressBatchSize / 2];
     JSAMPROW cr_intrm[kCompressBatchSize / 2];
     JSAMPARRAY planes_intrm[3]{y_intrm, cb_intrm, cr_intrm};
     if (need_padding) {
         size_t mcu_row_size = aligned_width * kCompressBatchSize * 3 / 2;
         buffer_intrm = std::make_unique<uint8_t[]>(mcu_row_size);
         y_plane_intrm = buffer_intrm.get();
         u_plane_intrm = y_plane_intrm + (aligned_width * kCompressBatchSize);
         v_plane_intrm = u_plane_intrm + (aligned_width * kCompressBatchSize) / 4;
         for (int i = 0; i < kCompressBatchSize; ++i) {
             y_intrm[i] = y_plane_intrm + i * aligned_width;
             memset(y_intrm[i] + cinfo->image_width, 0, aligned_width - cinfo->image_width);
         }
         for (int i = 0; i < kCompressBatchSize / 2; ++i) {
             int offset_intrm = i * (aligned_width / 2);
             cb_intrm[i] = u_plane_intrm + offset_intrm;
             cr_intrm[i] = v_plane_intrm + offset_intrm;
             memset(cb_intrm[i] + cinfo->image_width / 2, 0,
                    (aligned_width - cinfo->image_width) / 2);
             memset(cr_intrm[i] + cinfo->image_width / 2, 0,
                    (aligned_width - cinfo->image_width) / 2);
         }
     }
 
     while (cinfo->next_scanline < cinfo->image_height) {
         for (int i = 0; i < kCompressBatchSize; ++i) {
             size_t scanline = cinfo->next_scanline + i;
             if (scanline < cinfo->image_height) {
                 y[i] = y_plane + scanline * lumaStride;
             } else {
                 y[i] = empty.get();
             }
             if (need_padding) {
                 memcpy(y_intrm[i], y[i], cinfo->image_width);
             }
         }
         // cb, cr only have half scanlines
         for (int i = 0; i < kCompressBatchSize / 2; ++i) {
             size_t scanline = cinfo->next_scanline / 2 + i;
             if (scanline < cinfo->image_height / 2) {
                 int offset = scanline * chromaStride;
                 cb[i] = u_plane + offset;
                 cr[i] = v_plane + offset;
             } else {
                 cb[i] = cr[i] = empty.get();
             }
             if (need_padding) {
                 memcpy(cb_intrm[i], cb[i], cinfo->image_width / 2);
                 memcpy(cr_intrm[i], cr[i], cinfo->image_width / 2);
             }
         }
         int processed = jpeg_write_raw_data(cinfo, need_padding ? planes_intrm : planes,
                                             kCompressBatchSize);
         if (processed != kCompressBatchSize) {
             ALOGE("Number of processed lines does not equal input lines.");
             return false;
         }
     }
     return true;
 }
@@ -225,48 +225,48 @@ bool JpegEncoderHelper::compressYuv(jpeg_compress_struct* cinfo, const uint8_t*
 bool JpegEncoderHelper::compressY(jpeg_compress_struct* cinfo, const uint8_t* yBuffer,
                                   int lumaStride) {
     JSAMPROW y[kCompressBatchSize];
     JSAMPARRAY planes[1]{y};
 
-    uint8_t* y_plane = const_cast<uint8_t*>(yBuffer);
-    std::unique_ptr<uint8_t[]> empty = std::make_unique<uint8_t[]>(cinfo->image_width);
-    memset(empty.get(), 0, cinfo->image_width);
-
     const int aligned_width = ALIGNM(cinfo->image_width, kCompressBatchSize);
     const bool need_padding = (lumaStride < aligned_width);
+
+    uint8_t* y_plane = const_cast<uint8_t*>(yBuffer);
+    std::unique_ptr<uint8_t[]> empty = std::make_unique<uint8_t[]>(aligned_width);
+    memset(empty.get(), 0, aligned_width);
     std::unique_ptr<uint8_t[]> buffer_intrm = nullptr;
     uint8_t* y_plane_intrm = nullptr;
     JSAMPROW y_intrm[kCompressBatchSize];
     JSAMPARRAY planes_intrm[]{y_intrm};
     if (need_padding) {
         size_t mcu_row_size = aligned_width * kCompressBatchSize;
         buffer_intrm = std::make_unique<uint8_t[]>(mcu_row_size);
         y_plane_intrm = buffer_intrm.get();
         for (int i = 0; i < kCompressBatchSize; ++i) {
             y_intrm[i] = y_plane_intrm + i * aligned_width;
             memset(y_intrm[i] + cinfo->image_width, 0, aligned_width - cinfo->image_width);
         }
     }
 
     while (cinfo->next_scanline < cinfo->image_height) {
         for (int i = 0; i < kCompressBatchSize; ++i) {
             size_t scanline = cinfo->next_scanline + i;
             if (scanline < cinfo->image_height) {
                 y[i] = y_plane + scanline * lumaStride;
             } else {
                 y[i] = empty.get();
             }
             if (need_padding) {
                 memcpy(y_intrm[i], y[i], cinfo->image_width);
             }
         }
         int processed = jpeg_write_raw_data(cinfo, need_padding ? planes_intrm : planes,
                                             kCompressBatchSize);
         if (processed != kCompressBatchSize / 2) {
             ALOGE("Number of processed lines does not equal input lines.");
             return false;
         }
     }
     return true;
 }
 
 } // namespace ultrahdr
