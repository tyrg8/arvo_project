commit 62b60979f6a281b2b3cf883abc84299431fe2f76
Author: Martin Mitas <mity@morous.org>
Date:   Fri Jan 14 10:00:09 2022 +0100

    Reset TABLECELLBOUNDARIES with ordinary opener chains.
    
    This is needed because special handling of '|' is now done also if the
    wiki-links extension is enabled so the chain is populated even with that
    extension.
    
    Fixes #174.

diff --git a/CHANGELOG.md b/CHANGELOG.md
index ccf7c74..eccf901 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -27,31 +27,31 @@ Changes:
 Fixes:
 
  * [#163](https://github.com/mity/md4c/issues/163):
    Make HTML renderer to emit `'\n'` after the root tag when in the XHTML mode.
 
  * [#165](https://github.com/mity/md4c/issues/165):
    Make HTML renderer not to percent-encode `'~'` in URLs. Although it does
    work, it's not needed, and it can actually be confusing with URLs such as
    `http://www.example.com/~johndoe/`.
 
  * [#167](https://github.com/mity/md4c/issues/167):
    [#168](https://github.com/mity/md4c/issues/168):
    Fix multiple instances of various buffer overflow bugs, found mostly using
    a fuzz testing. Contributed by [dtldarek](https://github.com/dtldarek) and
    [Thierry Coppey](https://github.com/TCKnet).
 
  * [#169](https://github.com/mity/md4c/issues/169):
    Table underline now does not require 3 characters per table column anymore.
    One dash (optionally with a leading or tailing `:` appended or prepended)
    is now sufficient. This improves compatibility with the GFM.
 
  * [#172](https://github.com/mity/md4c/issues/172):
    Fix quadratic time behavior caused by unnecessary lookup for link reference
    definition even if the potential label contains nested brackets.
 
- * [#173](https://github.com/mity/md4c/issues/173):
-   Fix broken internal state invoked by devilish combination of syntax
-   constructions.
+ * [#173](https://github.com/mity/md4c/issues/173),
+   [#174](https://github.com/mity/md4c/issues/174):
+   Multiple bugs identified with oss-fuzz were fixed.
 
 
 ## Version 0.4.8
diff --git a/src/md4c.c b/src/md4c.c
index 779f808..5cdffe1 100644
--- a/src/md4c.c
+++ b/src/md4c.c
@@ -145,91 +145,91 @@ typedef struct MD_CTX_tag MD_CTX;
 struct MD_CTX_tag {
     /* Immutable stuff (parameters of md_parse()). */
     const CHAR* text;
     SZ size;
     MD_PARSER parser;
     void* userdata;
 
     /* When this is true, it allows some optimizations. */
     int doc_ends_with_newline;
 
     /* Helper temporary growing buffer. */
     CHAR* buffer;
     unsigned alloc_buffer;
 
     /* Reference definitions. */
     MD_REF_DEF* ref_defs;
     int n_ref_defs;
     int alloc_ref_defs;
     void** ref_def_hashtable;
     int ref_def_hashtable_size;
 
     /* Stack of inline/span markers.
      * This is only used for parsing a single block contents but by storing it
      * here we may reuse the stack for subsequent blocks; i.e. we have fewer
      * (re)allocations. */
     MD_MARK* marks;
     int n_marks;
     int alloc_marks;
 
 #if defined MD4C_USE_UTF16
     char mark_char_map[128];
 #else
     char mark_char_map[256];
 #endif
 
     /* For resolving of inline spans. */
     MD_MARKCHAIN mark_chains[13];
 #define PTR_CHAIN                               (ctx->mark_chains[0])
 #define TABLECELLBOUNDARIES                     (ctx->mark_chains[1])
 #define ASTERISK_OPENERS_extraword_mod3_0       (ctx->mark_chains[2])
 #define ASTERISK_OPENERS_extraword_mod3_1       (ctx->mark_chains[3])
 #define ASTERISK_OPENERS_extraword_mod3_2       (ctx->mark_chains[4])
 #define ASTERISK_OPENERS_intraword_mod3_0       (ctx->mark_chains[5])
 #define ASTERISK_OPENERS_intraword_mod3_1       (ctx->mark_chains[6])
 #define ASTERISK_OPENERS_intraword_mod3_2       (ctx->mark_chains[7])
 #define UNDERSCORE_OPENERS                      (ctx->mark_chains[8])
 #define TILDE_OPENERS_1                         (ctx->mark_chains[9])
 #define TILDE_OPENERS_2                         (ctx->mark_chains[10])
 #define BRACKET_OPENERS                         (ctx->mark_chains[11])
 #define DOLLAR_OPENERS                          (ctx->mark_chains[12])
-#define OPENERS_CHAIN_FIRST                     2
+#define OPENERS_CHAIN_FIRST                     1
 #define OPENERS_CHAIN_LAST                      12
 
     int n_table_cell_boundaries;
 
     /* For resolving links. */
     int unresolved_link_head;
     int unresolved_link_tail;
 
     /* For resolving raw HTML. */
     OFF html_comment_horizon;
     OFF html_proc_instr_horizon;
     OFF html_decl_horizon;
     OFF html_cdata_horizon;
 
     /* For block analysis.
      * Notes:
      *   -- It holds MD_BLOCK as well as MD_LINE structures. After each
      *      MD_BLOCK, its (multiple) MD_LINE(s) follow.
      *   -- For MD_BLOCK_HTML and MD_BLOCK_CODE, MD_VERBATIMLINE(s) are used
      *      instead of MD_LINE(s).
      */
     void* block_bytes;
     MD_BLOCK* current_block;
     int n_block_bytes;
     int alloc_block_bytes;
 
     /* For container block analysis. */
     MD_CONTAINER* containers;
     int n_containers;
     int alloc_containers;
 
     /* Minimal indentation to call the block "indented code block". */
     unsigned code_indent_offset;
 
     /* Contextual info for line analysis. */
     SZ code_fence_length;   /* For checking closing fence length. */
     int html_block_type;    /* For checking closing raw HTML condition. */
     int last_line_has_list_loosening_effect;
     int last_list_item_starts_with_two_blank_lines;
 };
@@ -2648,70 +2648,74 @@ static void
 md_rollback(MD_CTX* ctx, int opener_index, int closer_index, int how)
 {
     int i;
     int mark_index;
 
+    fprintf(stderr, "md_rollback: %d ... %d [%s]\n",
+            ctx->marks[opener_index].beg, ctx->marks[closer_index].beg,
+            (how == MD_ROLLBACK_ALL ? "all" : "crossing"));
+
     /* Cut all unresolved openers at the mark index. */
     for(i = OPENERS_CHAIN_FIRST; i < OPENERS_CHAIN_LAST+1; i++) {
         MD_MARKCHAIN* chain = &ctx->mark_chains[i];
 
         while(chain->tail >= opener_index) {
             int same = chain->tail == opener_index;
             chain->tail = ctx->marks[chain->tail].prev;
             if (same) break;
         }
 
         if(chain->tail >= 0)
             ctx->marks[chain->tail].next = -1;
         else
             chain->head = -1;
     }
 
     /* Go backwards so that unresolved openers are re-added into their
      * respective chains, in the right order. */
     mark_index = closer_index - 1;
     while(mark_index > opener_index) {
         MD_MARK* mark = &ctx->marks[mark_index];
         int mark_flags = mark->flags;
         int discard_flag = (how == MD_ROLLBACK_ALL);
 
         if(mark->flags & MD_MARK_CLOSER) {
             int mark_opener_index = mark->prev;
 
             /* Undo opener BEFORE the range. */
             if(mark_opener_index < opener_index) {
                 MD_MARK* mark_opener = &ctx->marks[mark_opener_index];
                 MD_MARKCHAIN* chain;
 
                 mark_opener->flags &= ~(MD_MARK_OPENER | MD_MARK_CLOSER | MD_MARK_RESOLVED);
                 chain = md_mark_chain(ctx, opener_index);
                 if(chain != NULL) {
                     md_mark_chain_append(ctx, chain, mark_opener_index);
                     discard_flag = 1;
                 }
             }
         }
 
         /* And reset our flags. */
         if(discard_flag) {
             mark->flags &= ~(MD_MARK_OPENER | MD_MARK_CLOSER | MD_MARK_RESOLVED);
             /* Make zero-length closer a dummy mark as that's how it was born */
             if((mark->flags & MD_MARK_CLOSER)  &&  mark->beg == mark->end)
                 mark->ch = 'D';
         }
 
         /* Jump as far as we can over unresolved or non-interesting marks. */
         switch(how) {
             case MD_ROLLBACK_CROSSING:
                 if((mark_flags & MD_MARK_CLOSER)  &&  mark->prev > opener_index) {
                     /* If we are closer with opener INSIDE the range, there may
                      * not be any other crosser inside the subrange. */
                     mark_index = mark->prev;
                     break;
                 }
                 MD_FALLTHROUGH();
             default:
                 mark_index--;
                 break;
         }
     }
 }
@@ -3424,262 +3428,264 @@ static int
 md_resolve_links(MD_CTX* ctx, const MD_LINE* lines, int n_lines)
 {
     int opener_index = ctx->unresolved_link_head;
     OFF last_link_beg = 0;
     OFF last_link_end = 0;
     OFF last_img_beg = 0;
     OFF last_img_end = 0;
 
     while(opener_index >= 0) {
         MD_MARK* opener = &ctx->marks[opener_index];
         int closer_index = opener->next;
         MD_MARK* closer = &ctx->marks[closer_index];
         int next_index = opener->prev;
         MD_MARK* next_opener;
         MD_MARK* next_closer;
         MD_LINK_ATTR attr;
         int is_link = FALSE;
 
+        fprintf(stderr, "md_resolve_links: %d ... %d\n", opener->beg, closer->beg);
+
         if(next_index >= 0) {
             next_opener = &ctx->marks[next_index];
             next_closer = &ctx->marks[next_opener->next];
         } else {
             next_opener = NULL;
             next_closer = NULL;
         }
 
         /* If nested ("[ [ ] ]"), we need to make sure that:
          *   - The outer does not end inside of (...) belonging to the inner.
          *   - The outer cannot be link if the inner is link (i.e. not image).
          *
          * (Note we here analyze from inner to outer as the marks are ordered
          * by closer->beg.)
          */
         if((opener->beg < last_link_beg  &&  closer->end < last_link_end)  ||
            (opener->beg < last_img_beg  &&  closer->end < last_img_end)  ||
            (opener->beg < last_link_end  &&  opener->ch == '['))
         {
             opener_index = next_index;
             continue;
         }
 
         /* Recognize and resolve wiki links.
          * Wiki-links maybe '[[destination]]' or '[[destination|label]]'.
          */
         if ((ctx->parser.flags & MD_FLAG_WIKILINKS) &&
             (opener->end - opener->beg == 1) &&         /* not image */
             next_opener != NULL &&                      /* double '[' opener */
             next_opener->ch == '[' &&
             (next_opener->beg == opener->beg - 1) &&
             (next_opener->end - next_opener->beg == 1) &&
             next_closer != NULL &&                      /* double ']' closer */
             next_closer->ch == ']' &&
             (next_closer->beg == closer->beg + 1) &&
             (next_closer->end - next_closer->beg == 1))
         {
             MD_MARK* delim = NULL;
             int delim_index;
             OFF dest_beg, dest_end;
 
             is_link = TRUE;
 
             /* We don't allow destination to be longer than 100 characters.
              * Lets scan to see whether there is '|'. (If not then the whole
              * wiki-link has to be below the 100 characters.) */
             delim_index = opener_index + 1;
             while(delim_index < closer_index) {
                 MD_MARK* m = &ctx->marks[delim_index];
                 if(m->ch == '|') {
                     delim = m;
                     break;
                 }
                 if(m->ch != 'D'  &&  m->beg - opener->end > 100)
                     break;
                 delim_index++;
             }
             dest_beg = opener->end;
             dest_end = (delim != NULL) ? delim->beg : closer->beg;
             if(dest_end - dest_beg == 0 || dest_end - dest_beg > 100)
                 is_link = FALSE;
 
             /* There may not be any new line in the destination. */
             if(is_link) {
                 OFF off;
                 for(off = dest_beg; off < dest_end; off++) {
                     if(ISNEWLINE(off)) {
                         is_link = FALSE;
                         break;
                     }
                 }
             }
 
             if(is_link) {
                 if(delim != NULL) {
                     if(delim->end < closer->beg) {
                         md_rollback(ctx, opener_index, delim_index, MD_ROLLBACK_ALL);
                         md_rollback(ctx, delim_index, closer_index, MD_ROLLBACK_CROSSING);
                         delim->flags |= MD_MARK_RESOLVED;
                         opener->end = delim->beg;
                     } else {
                         /* The pipe is just before the closer: [[foo|]] */
                         md_rollback(ctx, opener_index, closer_index, MD_ROLLBACK_ALL);
                         closer->beg = delim->beg;
                         delim = NULL;
                     }
                 }
 
                 opener->beg = next_opener->beg;
                 opener->next = closer_index;
                 opener->flags |= MD_MARK_OPENER | MD_MARK_RESOLVED;
 
                 closer->end = next_closer->end;
                 closer->prev = opener_index;
                 closer->flags |= MD_MARK_CLOSER | MD_MARK_RESOLVED;
 
                 last_link_beg = opener->beg;
                 last_link_end = closer->end;
 
                 if(delim != NULL)
                     md_analyze_link_contents(ctx, lines, n_lines, delim_index+1, closer_index);
 
                 opener_index = next_opener->prev;
                 continue;
             }
         }
 
         if(next_opener != NULL  &&  next_opener->beg == closer->end) {
             if(next_closer->beg > closer->end + 1) {
                 /* Might be full reference link. */
                 if(!(next_opener->flags & MD_MARK_HASNESTEDBRACKETS))
                     is_link = md_is_link_reference(ctx, lines, n_lines, next_opener->beg, next_closer->end, &attr);
             } else {
                 /* Might be shortcut reference link. */
                 if(!(opener->flags & MD_MARK_HASNESTEDBRACKETS))
                     is_link = md_is_link_reference(ctx, lines, n_lines, opener->beg, closer->end, &attr);
             }
 
             if(is_link < 0)
                 return -1;
 
             if(is_link) {
                 /* Eat the 2nd "[...]". */
                 closer->end = next_closer->end;
 
                 /* Do not analyze the label as a standalone link in the next
                  * iteration. */
                 next_index = ctx->marks[next_index].prev;
             }
         } else {
             if(closer->end < ctx->size  &&  CH(closer->end) == _T('(')) {
                 /* Might be inline link. */
                 OFF inline_link_end = UINT_MAX;
 
                 is_link = md_is_inline_link_spec(ctx, lines, n_lines, closer->end, &inline_link_end, &attr);
                 if(is_link < 0)
                     return -1;
 
                 /* Check the closing ')' is not inside an already resolved range
                  * (i.e. a range with a higher priority), e.g. a code span. */
                 if(is_link) {
                     int i = closer_index + 1;
 
                     while(i < ctx->n_marks) {
                         MD_MARK* mark = &ctx->marks[i];
 
                         if(mark->beg >= inline_link_end)
                             break;
                         if((mark->flags & (MD_MARK_OPENER | MD_MARK_RESOLVED)) == (MD_MARK_OPENER | MD_MARK_RESOLVED)) {
                             if(ctx->marks[mark->next].beg >= inline_link_end) {
                                 /* Cancel the link status. */
                                 if(attr.title_needs_free)
                                     free(attr.title);
                                 is_link = FALSE;
                                 break;
                             }
 
                             i = mark->next + 1;
                         } else {
                             i++;
                         }
                     }
                 }
 
                 if(is_link) {
                     /* Eat the "(...)" */
                     closer->end = inline_link_end;
                 }
             }
 
             if(!is_link) {
                 /* Might be collapsed reference link. */
                 if(!(opener->flags & MD_MARK_HASNESTEDBRACKETS))
                     is_link = md_is_link_reference(ctx, lines, n_lines, opener->beg, closer->end, &attr);
                 if(is_link < 0)
                     return -1;
             }
         }
 
         if(is_link) {
             /* Resolve the brackets as a link. */
             opener->flags |= MD_MARK_OPENER | MD_MARK_RESOLVED;
             closer->flags |= MD_MARK_CLOSER | MD_MARK_RESOLVED;
 
             /* If it is a link, we store the destination and title in the two
              * dummy marks after the opener. */
             MD_ASSERT(ctx->marks[opener_index+1].ch == 'D');
             ctx->marks[opener_index+1].beg = attr.dest_beg;
             ctx->marks[opener_index+1].end = attr.dest_end;
 
             MD_ASSERT(ctx->marks[opener_index+2].ch == 'D');
             md_mark_store_ptr(ctx, opener_index+2, attr.title);
             /* The title might or might not have been allocated for us. */
             if(attr.title_needs_free)
                 md_mark_chain_append(ctx, &PTR_CHAIN, opener_index+2);
             ctx->marks[opener_index+2].prev = attr.title_size;
 
             if(opener->ch == '[') {
                 last_link_beg = opener->beg;
                 last_link_end = closer->end;
             } else {
                 last_img_beg = opener->beg;
                 last_img_end = closer->end;
             }
 
             md_analyze_link_contents(ctx, lines, n_lines, opener_index+1, closer_index);
 
             /* If the link text is formed by nothing but permissive autolink,
              * suppress the autolink.
              * See https://github.com/mity/md4c/issues/152 for more info. */
             if(ctx->parser.flags & MD_FLAG_PERMISSIVEAUTOLINKS) {
                 MD_MARK* first_nested;
                 MD_MARK* last_nested;
 
                 first_nested = opener + 1;
                 while(first_nested->ch == _T('D')  &&  first_nested < closer)
                     first_nested++;
 
                 last_nested = closer - 1;
                 while(first_nested->ch == _T('D')  &&  last_nested > opener)
                     last_nested--;
 
                 if((first_nested->flags & MD_MARK_RESOLVED)  &&
                    first_nested->beg == opener->end  &&
                    ISANYOF_(first_nested->ch, _T("@:."))  &&
                    first_nested->next == (last_nested - ctx->marks)  &&
                    last_nested->end == closer->beg)
                 {
                     first_nested->ch = _T('D');
                     first_nested->flags &= ~MD_MARK_RESOLVED;
                     last_nested->ch = _T('D');
                     last_nested->flags &= ~MD_MARK_RESOLVED;
                 }
             }
         }
 
         opener_index = next_index;
     }
 
     return 0;
 }
 
 /* Analyze whether the mark '&' starts a HTML entity.
  * If so, update its flags as well as flags of corresponding closer ';'. */
