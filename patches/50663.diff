commit 0843d7284f98535760f6c539841358b44a01441a
Author: Alex <aleksandrosansan@gmail.com>
Date:   Fri Dec 30 10:36:32 2022 +0200

    Fix pcl:ply_reader_fuzzer: Crash in pcl::PLYReader::read (#5552)
    
    * Fixes pcl:ply_reader_fuzzer: Crash in pcl::PLYReader::read
    
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=50663
    
    The root cause is that `srcIdx` is very big and `srcIdx + cloud_->point_step` leads to integer overflow, that bypasses the `cloud_->data.size()` check.
    
    * Update ply_io.cpp

diff --git a/io/src/ply_io.cpp b/io/src/ply_io.cpp
index ea6e306b3..85d132fef 100644
--- a/io/src/ply_io.cpp
+++ b/io/src/ply_io.cpp
@@ -582,96 +582,96 @@ int
 pcl::PLYReader::read (const std::string &file_name, pcl::PCLPointCloud2 &cloud,
                       Eigen::Vector4f &origin, Eigen::Quaternionf &orientation, int &ply_version, const int)
 {
   // kept only for backward compatibility
   int data_type;
   unsigned int data_idx;
 
   if (!fs::exists (file_name))
   {
     PCL_ERROR ("[pcl::PLYReader::read] File (%s) not found!\n",file_name.c_str ());
     return (-1);
   }
 
   if (this->readHeader (file_name, cloud, origin, orientation, ply_version, data_type, data_idx))
   {
     PCL_ERROR ("[pcl::PLYReader::read] problem parsing header!\n");
     return (-1);
   }
 
   // a range_grid element was found ?
   std::size_t r_size;
   if ((r_size  = (*range_grid_).size ()) > 0 && r_size != vertex_count_)
   {
     //cloud.header = cloud_->header;
     std::vector<std::uint8_t> data ((*range_grid_).size () * cloud.point_step);
     const static float f_nan = std::numeric_limits <float>::quiet_NaN ();
     const static double d_nan = std::numeric_limits <double>::quiet_NaN ();
     for (std::size_t r = 0; r < r_size; ++r)
     {
       if ((*range_grid_)[r].empty ())
       {
         for (const auto &field : cloud_->fields)
           if (field.datatype == ::pcl::PCLPointField::FLOAT32)
           {
             const auto idx = r * cloud_->point_step + field.offset;
             if (idx + sizeof (float) > data.size())
             {
               PCL_ERROR ("[pcl::PLYReader::read] invalid data index (%lu)!\n", idx);
               return (-1);
             }
             memcpy (&data[idx],
                     reinterpret_cast<const char*> (&f_nan), sizeof (float));
           }
           else if (field.datatype == ::pcl::PCLPointField::FLOAT64)
           {
             const auto idx = r * cloud_->point_step + field.offset;
             if (idx + sizeof (double) > data.size())
             {
               PCL_ERROR ("[pcl::PLYReader::read] invalid data index (%lu)!\n", idx);
               return (-1);
             }
             memcpy (&data[idx],
                     reinterpret_cast<const char*> (&d_nan), sizeof (double));
           }
           else
           {
             const auto idx = r * cloud_->point_step + field.offset;
             if (idx + pcl::getFieldSize (field.datatype) * field.count > data.size())
             {
               PCL_ERROR ("[pcl::PLYReader::read] invalid data index (%lu)!\n", idx);
               return (-1);
             }
             std::fill_n(&data[idx],
                         pcl::getFieldSize (field.datatype) * field.count, 0);
           }
       }
       else
       {
-        const auto srcIdx = (*range_grid_)[r][0] * cloud_->point_step;
+        const std::size_t srcIdx = (*range_grid_)[r][0] * cloud_->point_step;
         if (srcIdx + cloud_->point_step > cloud_->data.size())
         {
           PCL_ERROR ("[pcl::PLYReader::read] invalid data index (%lu)!\n", srcIdx);
           return (-1);
         }
         memcpy (&data[r* cloud_->point_step], &cloud_->data[srcIdx], cloud_->point_step);
       }
     }
     cloud_->data.swap (data);
   }
 
   orientation_ = Eigen::Quaternionf (orientation);
   origin_ = origin;
 
   for (auto &field : cloud_->fields)
   {
     if (field.name == "nx")
       field.name = "normal_x";
     if (field.name == "ny")
       field.name = "normal_y";
     if (field.name == "nz")
       field.name = "normal_z";
   }
   return (0);
 }
 
 ////////////////////////////////////////////////////////////////////////////////////////
@@ -679,98 +679,98 @@ int
 pcl::PLYReader::read (const std::string &file_name, pcl::PolygonMesh &mesh,
                       Eigen::Vector4f &origin, Eigen::Quaternionf &orientation,
                       int &ply_version, const int offset)
 {
   // kept only for backward compatibility
   int data_type;
   unsigned int data_idx;
   polygons_ = &(mesh.polygons);
 
   if (!fs::exists (file_name))
   {
     PCL_ERROR ("[pcl::PLYReader::read] File (%s) not found!\n",file_name.c_str ());
     return (-1);
   }
 
   if (this->readHeader (file_name, mesh.cloud, origin, orientation, ply_version, data_type, data_idx, offset))
   {
     PCL_ERROR ("[pcl::PLYReader::read] problem parsing header!\n");
     return (-1);
   }
 
   // a range_grid element was found ?
   std::size_t r_size;
   if ((r_size  = (*range_grid_).size ()) > 0 && r_size != vertex_count_)
   {
     //cloud.header = cloud_->header;
     std::vector<std::uint8_t> data ((*range_grid_).size () * mesh.cloud.point_step);
     const static float f_nan = std::numeric_limits <float>::quiet_NaN ();
     const static double d_nan = std::numeric_limits <double>::quiet_NaN ();
     for (std::size_t r = 0; r < r_size; ++r)
     {
       if ((*range_grid_)[r].empty ())
       {
         for (const auto &field : cloud_->fields)
           if (field.datatype == ::pcl::PCLPointField::FLOAT32)
           {
             const auto idx = r * cloud_->point_step + field.offset;
             if (idx + sizeof (float) > data.size())
             {
               PCL_ERROR ("[pcl::PLYReader::read] invalid data index (%lu)!\n", idx);
               return (-1);
             }
             memcpy (&data[idx],
                     reinterpret_cast<const char*> (&f_nan), sizeof (float));
           }
           else if (field.datatype == ::pcl::PCLPointField::FLOAT64)
           {
             const auto idx = r * cloud_->point_step + field.offset;
             if (idx + sizeof (double) > data.size())
             {
               PCL_ERROR ("[pcl::PLYReader::read] invalid data index (%lu)!\n", idx);
               return (-1);
             }
             memcpy (&data[idx],
                     reinterpret_cast<const char*> (&d_nan), sizeof (double));
           }
           else
           {
             const auto idx = r * cloud_->point_step + field.offset;
             if (idx + pcl::getFieldSize (field.datatype) * field.count > data.size())
             {
               PCL_ERROR ("[pcl::PLYReader::read] invalid data index (%lu)!\n", idx);
               return (-1);
             }
             std::fill_n(&data[idx],
                         pcl::getFieldSize (field.datatype) * field.count, 0);
           }
       }
       else
       {
-        const auto srcIdx = (*range_grid_)[r][0] * cloud_->point_step;
+        const std::size_t srcIdx = (*range_grid_)[r][0] * cloud_->point_step;
         if (srcIdx + cloud_->point_step > cloud_->data.size())
         {
           PCL_ERROR ("[pcl::PLYReader::read] invalid data index (%lu)!\n", srcIdx);
           return (-1);
         }
         memcpy (&data[r* cloud_->point_step], &cloud_->data[srcIdx], cloud_->point_step);
       }
     }
     cloud_->data.swap (data);
   }
 
   orientation_ = Eigen::Quaternionf (orientation);
   origin_ = origin;
 
   for (auto &field : cloud_->fields)
   {
     if (field.name == "nx")
       field.name = "normal_x";
     if (field.name == "ny")
       field.name = "normal_y";
     if (field.name == "nz")
       field.name = "normal_z";
   }
   return (0);
 }
 
 ////////////////////////////////////////////////////////////////////////////////////////
