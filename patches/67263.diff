commit b5dc2164d7456bd61bfa3a8415f468bab1dc517e
Author: Aurelien David <aurelien.david@telecom-paristech.fr>
Date:   Fri Mar 8 10:32:57 2024 +0100

    fix overflow in rtip satip get
    
    ossfuzz issue 67263

diff --git a/src/filters/in_rtp.c b/src/filters/in_rtp.c
index 85d2d0fc0..20087c61a 100644
--- a/src/filters/in_rtp.c
+++ b/src/filters/in_rtp.c
@@ -71,59 +71,59 @@ static GF_FilterProbeScore rtpin_probe_url(const char *url, const char *mime)
 //simplified version of RTSP_UnpackURL for SAT>IP
 void rtpin_satip_get_server_ip(const char *sURL, char *Server)
 {
 	char schema[10], *test, text[1024], *retest;
 	u32 i, len;
 	Bool is_ipv6;
 	if (!sURL) return;
 
 	strcpy(Server, "");
 
 	//extract the schema
 	i = 0;
-	while (i <= strlen(sURL)) {
+	while (i < strlen(sURL)) {
 		if (sURL[i] == ':')
 			goto found;
 		schema[i] = sURL[i];
 		i += 1;
 	}
 	return;
 
 found:
-	schema[i] = 0;
+	schema[MIN(i, GF_ARRAY_LENGTH(schema)-1)] = 0;
 	if (stricmp(schema, "satip")) {
 		GF_LOG(GF_LOG_ERROR, GF_LOG_RTP, ("[RTP] Wrong SATIP schema %s - not setting up\n", schema));
 		return;
 	}
 	test = strstr(sURL, "://");
 	test += 3;
 
 	//check for port
 	retest = strrchr(test, ':');
 	/*IPV6 address*/
 	if (retest && strchr(retest, ']')) retest = NULL;
 
 	if (retest && strstr(retest, "/")) {
 		retest += 1;
 		i = 0;
 		while (i<strlen(retest)) {
 			if (retest[i] == '/') break;
 			text[i] = retest[i];
 			i += 1;
 		}
-		text[i] = 0;
+		text[MIN(i, GF_ARRAY_LENGTH(text)-1)] = 0;
 	}
 	//get the server name
 	is_ipv6 = GF_FALSE;
 	len = (u32)strlen(test);
 	i = 0;
 	while (i<len) {
 		if (test[i] == '[') is_ipv6 = GF_TRUE;
 		else if (test[i] == ']') is_ipv6 = GF_FALSE;
 		if ((test[i] == '/') || (!is_ipv6 && (test[i] == ':'))) break;
 		text[i] = test[i];
 		i += 1;
 	}
-	text[i] = 0;
+	text[MIN(i, GF_ARRAY_LENGTH(text)-1)] = 0;
 	strcpy(Server, text);
 }
 
@@ -777,105 +777,105 @@ void rtpin_do_authenticate(GF_RTPIn *ctx)
 static GF_Err rtpin_initialize(GF_Filter *filter)
 {
 	GF_RTPIn *ctx = gf_filter_get_udta(filter);
 	char *the_ext;
 
 	ctx->streams = gf_list_new();
 	ctx->filter = filter;
 	//turn on interleave on http port
 	if (ctx->transport==RTP_TRANSPORT_AUTO) {
 		if ((ctx->default_port == 80) || (ctx->default_port == 8080))
 			ctx->transport = RTP_TRANSPORT_TCP_ONLY;
 		if (ctx->src && !strnicmp(ctx->src, "rtsph://", 8))
 			ctx->transport = RTP_TRANSPORT_TCP_ONLY;
 	}
 
 	ctx->last_start_range = -1.0;
 
 	ctx->sockgroup = gf_sk_group_new();
 	//prevent blocking so that we are always called even if output is full
 	gf_filter_prevent_blocking(filter, GF_TRUE);
 
 	//sdp mode, we will have a configure_pid
 	if (!ctx->src) return GF_OK;
 
 	/*rtsp and rtsp over udp*/
 
 	the_ext = strrchr(ctx->src, '#');
 	if (the_ext) {
 		if (!stricmp(the_ext, "#audio")) ctx->stream_type = GF_STREAM_AUDIO;
 		else if (!stricmp(the_ext, "#video")) ctx->stream_type = GF_STREAM_VISUAL;
 		the_ext[0] = 0;
 	}
 	gf_filter_disable_inputs(filter);
 
 	if (!strnicmp(ctx->src, "rtp://", 6)) {
 		GF_RTPInStream *stream;
 		GF_Err e = GF_OK;
 		u32 port = 1234;
 		char *ip = ctx->src + 6;
 		char *sep = strchr(ip, ':');
 		if (sep) {
 			port = atoi(sep+1);
 			sep[0] = 0;
 			ip = gf_strdup(ip);
 			sep[0] = ':';
 		} else {
 			ip = gf_strdup(ip);
 		}
 		stream = rtpin_stream_new_standalone(ctx, ip, port, GF_FALSE);
 		gf_free(ip);
 		if (!stream)
 			e = GF_OUT_OF_MEM;
 
 		if (!e)
 			e = rtpin_add_stream(ctx, stream, NULL);
 
 		if (!e)
 			e = rtpin_stream_init(stream, GF_FALSE);
 
 		if (e) {
 			GF_LOG(GF_LOG_ERROR, GF_LOG_RTP, ("[RTPIn]] Couldn't setup RTP stream: %s\n", gf_error_to_string(e) ));
 			return e;
 		}
 		stream->status = RTP_Running;
 		return GF_OK;
 	}
 	ctx->session = rtpin_rtsp_new(ctx, (char *) ctx->src);
 	if (!ctx->session)
 		return GF_NOT_SUPPORTED;
 
 	if (!strnicmp(ctx->src, "satip://", 8)) {
 		ctx->session->satip = GF_TRUE;
 		ctx->session->satip_server = gf_malloc(GF_MAX_PATH);
 		rtpin_satip_get_server_ip(ctx->src, ctx->session->satip_server);
 	}
 
 	ctx->dm = gf_filter_get_download_manager(filter);
 	if (!strnicmp(ctx->src, "rtsps://", 8)
-		|| (!strnicmp(ctx->src, "rtsph://", 8) && 
+		|| (!strnicmp(ctx->src, "rtsph://", 8) &&
 			((gf_rtsp_get_session_port(ctx->session->session) == 443) || (gf_rtsp_get_session_port(ctx->session->session) == 8443)))
 	) {
 #ifdef GPAC_HAS_SSL
 
 #ifdef GPAC_ENABLE_COVERAGE
 		//all our tests directly detect ssl from above conditions
 		if (gf_sys_is_cov_mode())
 			gf_rtsp_session_needs_ssl(ctx->session->session);
 #endif
 
 		GF_Err e = gf_rtsp_set_ssl_ctx(ctx->session->session, gf_dm_ssl_init(ctx->dm, 0) );
 		if (e) return e;
 #else
 		return GF_NOT_SUPPORTED;
 #endif
 	}
 
 	const char *user = gf_rtsp_get_user(ctx->session->session);
 	if (user) {
 		ctx->check_creds = 1;
 		return GF_OK;
 	}
 
 	rtpin_rtsp_describe_send(ctx->session, 0, NULL);
 	return GF_OK;
 }
@@ -1013,12 +1013,11 @@ GF_FilterRegister RTPInRegister = {
 const GF_FilterRegister *rtpin_register(GF_FilterSession *session)
 {
 #ifndef GPAC_DISABLE_STREAMING
 	if (gf_opts_get_bool("temp", "get_proto_schemes")) {
 		gf_opts_set_key("temp_in_proto", RTPInRegister.name, "rtp,rtsp,rtspu,rtsph,satip,rtsps");
 	}
 	return &RTPInRegister;
 #else
 	return NULL;
 #endif
 }
-
