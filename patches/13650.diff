commit f7206618d27c2e69d977abf40e3035a33e5f6be0
Author: Cristy <mikayla-grace@urban-warrior.org>
Date:   Sat Apr 27 08:32:23 2019 -0400

    https://github.com/ImageMagick/ImageMagick/issues/1554

diff --git a/coders/mat.c b/coders/mat.c
index 776ed9a0f..8d704fde2 100644
--- a/coders/mat.c
+++ b/coders/mat.c
@@ -590,225 +590,226 @@ UnlinkFile:
 static Image *ReadMATImageV4(const ImageInfo *image_info,Image *image,
   ExceptionInfo *exception)
 {
   typedef struct {
     unsigned char Type[4];
     unsigned int nRows;
     unsigned int nCols;
     unsigned int imagf;
     unsigned int nameLen;
   } MAT4_HDR;
 
   long
     ldblk;
 
   EndianType
     endian;
 
   Image
     *rotated_image;
 
   MagickBooleanType
     status;
 
   MAT4_HDR
     HDR;
 
   QuantumInfo
     *quantum_info;
 
   QuantumFormatType
     format_type;
 
   register ssize_t
     i;
 
   ssize_t
     count,
     y;
 
   unsigned char
     *pixels;
 
   unsigned int
     depth;
 
   quantum_info=(QuantumInfo *) NULL;
   (void) SeekBlob(image,0,SEEK_SET);
   status=MagickTrue;
   while (EOFBlob(image) == MagickFalse)
   {
     /*
      Object parser loop.
     */
     ldblk=ReadBlobLSBLong(image);
+    if(EOFBlob(image)) break;
     if ((ldblk > 9999) || (ldblk < 0))
       break;
     HDR.Type[3]=ldblk % 10; ldblk /= 10;  /* T digit */
     HDR.Type[2]=ldblk % 10; ldblk /= 10;  /* P digit */
     HDR.Type[1]=ldblk % 10; ldblk /= 10;  /* O digit */
     HDR.Type[0]=ldblk;        /* M digit */
     if (HDR.Type[3] != 0)
       break;  /* Data format */
     if (HDR.Type[2] != 0)
       break;  /* Always 0 */
     if (HDR.Type[0] == 0)
       {
         HDR.nRows=ReadBlobLSBLong(image);
         HDR.nCols=ReadBlobLSBLong(image);
         HDR.imagf=ReadBlobLSBLong(image);
         HDR.nameLen=ReadBlobLSBLong(image);
         endian=LSBEndian;
       }
     else
       {
         HDR.nRows=ReadBlobMSBLong(image);
         HDR.nCols=ReadBlobMSBLong(image);
         HDR.imagf=ReadBlobMSBLong(image);
         HDR.nameLen=ReadBlobMSBLong(image);
         endian=MSBEndian;
       }
     if ((HDR.imagf != 0) && (HDR.imagf != 1))
       break;
     if (HDR.nameLen > 0xFFFF)
       return(DestroyImageList(image));
     for (i=0; i < (ssize_t) HDR.nameLen; i++)
     {
       int
         byte;
 
       /*
         Skip matrix name.
       */
       byte=ReadBlobByte(image);
       if (byte == EOF)
         {
           ThrowFileException(exception,CorruptImageError,"UnexpectedEndOfFile",
             image->filename);
           break;
         }
     }
     image->columns=(size_t) HDR.nRows;
     image->rows=(size_t) HDR.nCols;
     if ((image->columns == 0) || (image->rows == 0))
       return(DestroyImageList(image));
     if (image_info->ping != MagickFalse)
       {
         Swap(image->columns,image->rows);
         if(HDR.imagf==1) ldblk *= 2;
         SeekBlob(image, HDR.nCols*ldblk, SEEK_CUR);
         if ((image->columns == 0) || (image->rows == 0))
           return(image->previous == (Image *) NULL ? DestroyImageList(image)
             : image);
         goto skip_reading_current;
       }
     status=SetImageExtent(image,image->columns,image->rows,exception);
     if (status == MagickFalse)
       return(DestroyImageList(image));
     (void) SetImageBackgroundColor(image,exception);
     (void) SetImageColorspace(image,GRAYColorspace,exception);
     quantum_info=AcquireQuantumInfo(image_info,image);
     if (quantum_info == (QuantumInfo *) NULL)
       return(DestroyImageList(image));
     switch(HDR.Type[1])
     {
       case 0:
         format_type=FloatingPointQuantumFormat;
         depth=64;
         break;
       case 1:
         format_type=FloatingPointQuantumFormat;
         depth=32;
         break;
       case 2:
         format_type=UnsignedQuantumFormat;
         depth=16;
         break;
       case 3:
         format_type=SignedQuantumFormat;
         depth=16;
         break;
       case 4:
         format_type=UnsignedQuantumFormat;
         depth=8;
         break;
       default:
         format_type=UnsignedQuantumFormat;
         depth=8;
         break;
     }
     image->depth=depth;
     if (HDR.Type[0] != 0)
       SetQuantumEndian(image,quantum_info,MSBEndian);
     status=SetQuantumFormat(image,quantum_info,format_type);
     status=SetQuantumDepth(image,quantum_info,depth);
     status=SetQuantumEndian(image,quantum_info,endian);
     SetQuantumScale(quantum_info,1.0);
     pixels=(unsigned char *) GetQuantumPixels(quantum_info);
     for (y=0; y < (ssize_t) image->rows; y++)
     {
       register Quantum
         *magick_restrict q;
 
       count=ReadBlob(image,depth/8*image->columns,(char *) pixels);
       if (count == -1)
         break;
       q=QueueAuthenticPixels(image,0,image->rows-y-1,image->columns,1,
         exception);
       if (q == (Quantum *) NULL)
         break;
       (void) ImportQuantumPixels(image,(CacheView *) NULL,quantum_info,
         GrayQuantum,pixels,exception);
       if ((HDR.Type[1] == 2) || (HDR.Type[1] == 3))
         FixSignedValues(image,q,(int) image->columns);
       if (SyncAuthenticPixels(image,exception) == MagickFalse)
         break;
       if (image->previous == (Image *) NULL)
         {
           status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,
             image->rows);
           if (status == MagickFalse)
             break;
         }
     }
     if (HDR.imagf == 1)
       for (y=0; y < (ssize_t) image->rows; y++)
       {
         /*
           Read complex pixels.
         */
         count=ReadBlob(image,depth/8*image->columns,(char *) pixels);
         if (count == -1)
           break;
         if (HDR.Type[1] == 0)
           InsertComplexDoubleRow(image,(double *) pixels,y,0,0,exception);
         else
           InsertComplexFloatRow(image,(float *) pixels,y,0,0,exception);
       }
     if (quantum_info != (QuantumInfo *) NULL)
       quantum_info=DestroyQuantumInfo(quantum_info);
     if (EOFBlob(image) != MagickFalse)
       {
         ThrowFileException(exception,CorruptImageError,"UnexpectedEndOfFile",
           image->filename);
         break;
       }
     rotated_image=RotateImage(image,90.0,exception);
     if (rotated_image != (Image *) NULL)
       {
         rotated_image->page.x=0;
         rotated_image->page.y=0;
         rotated_image->colors = image->colors;
         DestroyBlob(rotated_image);
         rotated_image->blob=ReferenceBlob(image->blob);
         AppendImageToList(&image,rotated_image);
         DeleteImageFromList(&image);
       }
     /*
       Proceed to next image.
     */
     if (image_info->number_scenes != 0)
       if (image->scene >= (image_info->scene+image_info->number_scenes-1))
         break;
     /*
       Allocate next image structure.
     */
@@ -934,234 +935,234 @@ static Image *ReadMATImage(const ImageInfo *image_info,ExceptionInfo *exception)
   if (logging)
     (void) LogMagickEvent(CoderEvent,GetMagickModule(),"  Endian %c%c",
       MATLAB_HDR.EndianIndicator[0],MATLAB_HDR.EndianIndicator[1]);
   if (!strncmp(MATLAB_HDR.EndianIndicator, "IM", 2))
   {
     ReadBlobXXXLong = ReadBlobLSBLong;
     ReadBlobXXXShort = ReadBlobLSBShort;
     ReadBlobDoublesXXX = ReadBlobDoublesLSB;
     ReadBlobFloatsXXX = ReadBlobFloatsLSB;
     image->endian = LSBEndian;
   }
   else if (!strncmp(MATLAB_HDR.EndianIndicator, "MI", 2))
   {
     ReadBlobXXXLong = ReadBlobMSBLong;
     ReadBlobXXXShort = ReadBlobMSBShort;
     ReadBlobDoublesXXX = ReadBlobDoublesMSB;
     ReadBlobFloatsXXX = ReadBlobFloatsMSB;
     image->endian = MSBEndian;
   }
   else
     {
 MATLAB_KO:
       if ((image != image2) && (image2 != (Image *) NULL))
         image2=DestroyImage(image2);
       if (clone_info != (ImageInfo *) NULL)
         clone_info=DestroyImageInfo(clone_info);
       ThrowReaderException(CorruptImageError,"ImproperImageHeader");
     }
 
   filepos = TellBlob(image);
-  while(!EOFBlob(image)) /* object parser loop */
+  while(filepos < GetBlobSize(image) && !EOFBlob(image)) /* object parser loop */
   {
     Frames = 1;
-    if (filepos != (unsigned int) filepos)
+    if(filepos > GetBlobSize(image) || filepos < 0)
       break;
     if(SeekBlob(image,filepos,SEEK_SET) != filepos) break;
     /* printf("pos=%X\n",TellBlob(image)); */
 
     MATLAB_HDR.DataType = ReadBlobXXXLong(image);
     if(EOFBlob(image)) break;
     MATLAB_HDR.ObjectSize = ReadBlobXXXLong(image);
     if(EOFBlob(image)) break;
-    if((MagickSizeType) (MATLAB_HDR.ObjectSize+filepos) > GetBlobSize(image))
+    if((MagickSizeType) (MATLAB_HDR.ObjectSize+filepos) >= GetBlobSize(image))
       goto MATLAB_KO;
     filepos += (MagickOffsetType) MATLAB_HDR.ObjectSize + 4 + 4;
 
     if (clone_info != (ImageInfo *) NULL)
       clone_info=DestroyImageInfo(clone_info);
     clone_info=CloneImageInfo(image_info);
     if ((image != image2) && (image2 != (Image *) NULL))
       image2=DestroyImage(image2);
     image2 = image;
 #if defined(MAGICKCORE_ZLIB_DELEGATE)
     if(MATLAB_HDR.DataType == miCOMPRESSED)
     {
       image2 = decompress_block(image,&MATLAB_HDR.ObjectSize,clone_info,exception);
       if(image2==NULL) continue;
       MATLAB_HDR.DataType = ReadBlobXXXLong(image2); /* replace compressed object type. */
     }
 #endif
 
     if (MATLAB_HDR.DataType != miMATRIX)
       {
         clone_info=DestroyImageInfo(clone_info);
 #if defined(MAGICKCORE_ZLIB_DELEGATE)
         if (image2 != image)
           DeleteImageFromList(&image2);
 #endif
         continue;  /* skip another objects. */
       }
 
     MATLAB_HDR.unknown1 = ReadBlobXXXLong(image2);
     MATLAB_HDR.unknown2 = ReadBlobXXXLong(image2);
 
     MATLAB_HDR.unknown5 = ReadBlobXXXLong(image2);
     MATLAB_HDR.StructureClass = MATLAB_HDR.unknown5 & 0xFF;
     MATLAB_HDR.StructureFlag = (MATLAB_HDR.unknown5>>8) & 0xFF;
 
     MATLAB_HDR.unknown3 = ReadBlobXXXLong(image2);
     if(image!=image2)
       MATLAB_HDR.unknown4 = ReadBlobXXXLong(image2);  /* ??? don't understand why ?? */
     MATLAB_HDR.unknown4 = ReadBlobXXXLong(image2);
     MATLAB_HDR.DimFlag = ReadBlobXXXLong(image2);
     MATLAB_HDR.SizeX = ReadBlobXXXLong(image2);
     MATLAB_HDR.SizeY = ReadBlobXXXLong(image2);
 
 
     switch(MATLAB_HDR.DimFlag)
     {
       case  8: z2=z=1; break;      /* 2D matrix*/
       case 12: z2=z = ReadBlobXXXLong(image2);  /* 3D matrix RGB*/
            (void) ReadBlobXXXLong(image2);
          if(z!=3)
            {
              if (clone_info != (ImageInfo *) NULL)
                clone_info=DestroyImageInfo(clone_info);
              if ((image != image2) && (image2 != (Image *) NULL))
                image2=DestroyImage(image2);
              ThrowReaderException(CoderError,
                "MultidimensionalMatricesAreNotSupported");
            }
          break;
       case 16: z2=z = ReadBlobXXXLong(image2);  /* 4D matrix animation */
          if(z!=3 && z!=1)
            {
              if (clone_info != (ImageInfo *) NULL)
                clone_info=DestroyImageInfo(clone_info);
              if ((image != image2) && (image2 != (Image *) NULL))
                image2=DestroyImage(image2);
              ThrowReaderException(CoderError,
                "MultidimensionalMatricesAreNotSupported");
            }
           Frames = ReadBlobXXXLong(image2);
           if (Frames == 0)
             {
               if (clone_info != (ImageInfo *) NULL)
                 clone_info=DestroyImageInfo(clone_info);
               if ((image != image2) && (image2 != (Image *) NULL))
                 image2=DestroyImage(image2);
               ThrowReaderException(CorruptImageError,"ImproperImageHeader");
             }
           if (AcquireMagickResource(ListLengthResource,Frames) == MagickFalse)
             {
               if (clone_info != (ImageInfo *) NULL)
                 clone_info=DestroyImageInfo(clone_info);
               if ((image != image2) && (image2 != (Image *) NULL))
                 image2=DestroyImage(image2);
               ThrowReaderException(ResourceLimitError,"ListLengthExceedsLimit");
             }
          break;
       default:
         if (clone_info != (ImageInfo *) NULL)
           clone_info=DestroyImageInfo(clone_info);
         if ((image != image2) && (image2 != (Image *) NULL))
           image2=DestroyImage(image2);
         ThrowReaderException(CoderError, "MultidimensionalMatricesAreNotSupported");
     }
 
     MATLAB_HDR.Flag1 = ReadBlobXXXShort(image2);
     MATLAB_HDR.NameFlag = ReadBlobXXXShort(image2);
 
     if (logging) (void)LogMagickEvent(CoderEvent,GetMagickModule(),
           "MATLAB_HDR.StructureClass %d",MATLAB_HDR.StructureClass);
     if (MATLAB_HDR.StructureClass != mxCHAR_CLASS &&
         MATLAB_HDR.StructureClass != mxSINGLE_CLASS &&    /* float + complex float */
         MATLAB_HDR.StructureClass != mxDOUBLE_CLASS &&    /* double + complex double */
         MATLAB_HDR.StructureClass != mxINT8_CLASS &&
         MATLAB_HDR.StructureClass != mxUINT8_CLASS &&    /* uint8 + uint8 3D */
         MATLAB_HDR.StructureClass != mxINT16_CLASS &&
         MATLAB_HDR.StructureClass != mxUINT16_CLASS &&    /* uint16 + uint16 3D */
         MATLAB_HDR.StructureClass != mxINT32_CLASS &&
         MATLAB_HDR.StructureClass != mxUINT32_CLASS &&    /* uint32 + uint32 3D */
         MATLAB_HDR.StructureClass != mxINT64_CLASS &&
         MATLAB_HDR.StructureClass != mxUINT64_CLASS)    /* uint64 + uint64 3D */
       {
         if ((image2 != (Image*) NULL) && (image2 != image))
           {
             CloseBlob(image2);
             DeleteImageFromList(&image2);
           }
         if (clone_info != (ImageInfo *) NULL)
           clone_info=DestroyImageInfo(clone_info);
         ThrowReaderException(CoderError,"UnsupportedCellTypeInTheMatrix");
       }
 
     switch (MATLAB_HDR.NameFlag)
     {
       case 0:
         size = ReadBlobXXXLong(image2);  /* Object name string size */
         size = 4 * (((size_t) size + 3 + 1) / 4);
         (void) SeekBlob(image2, size, SEEK_CUR);
         break;
       case 1:
       case 2:
       case 3:
       case 4:
         (void) ReadBlob(image2, 4, (unsigned char *) &size); /* Object name string */
         break;
       default:
         goto MATLAB_KO;
     }
 
     CellType = ReadBlobXXXLong(image2);    /* Additional object type */
     if (logging)
       (void) LogMagickEvent(CoderEvent,GetMagickModule(),
         "MATLAB_HDR.CellType: %.20g",(double) CellType);
 
     /* data size */
     if (ReadBlob(image2, 4, (unsigned char *) &size) != 4)
       goto MATLAB_KO;
 
     NEXT_FRAME:
     switch (CellType)
     {
       case miINT8:
       case miUINT8:
         sample_size = 8;
         if(MATLAB_HDR.StructureFlag & FLAG_LOGICAL)
           image->depth = 1;
         else
           image->depth = 8;         /* Byte type cell */
         ldblk = (ssize_t) MATLAB_HDR.SizeX;
         break;
       case miINT16:
       case miUINT16:
         sample_size = 16;
         image->depth = 16;        /* Word type cell */
         ldblk = (ssize_t) (2 * MATLAB_HDR.SizeX);
         break;
       case miINT32:
       case miUINT32:
         sample_size = 32;
         image->depth = 32;        /* Dword type cell */
         ldblk = (ssize_t) (4 * MATLAB_HDR.SizeX);
         break;
       case miINT64:
       case miUINT64:
         sample_size = 64;
         image->depth = 64;        /* Qword type cell */
         ldblk = (ssize_t) (8 * MATLAB_HDR.SizeX);
         break;
       case miSINGLE:
         sample_size = 32;
         image->depth = 32;        /* double type cell */
         (void) SetImageOption(clone_info,"quantum:format","floating-point");
         if (MATLAB_HDR.StructureFlag & FLAG_COMPLEX)
           {              /* complex float type cell */
           }
         ldblk = (ssize_t) (4 * MATLAB_HDR.SizeX);
         break;
       case miDOUBLE:
         sample_size = 64;
         image->depth = 64;        /* double type cell */
         (void) SetImageOption(clone_info,"quantum:format","floating-point");
@@ -1169,117 +1170,118 @@ DisableMSCWarning(4127)
         if (sizeof(double) != 8)
 RestoreMSCWarning
           {
             if (clone_info != (ImageInfo *) NULL)
               clone_info=DestroyImageInfo(clone_info);
             if ((image != image2) && (image2 != (Image *) NULL))
               image2=DestroyImage(image2);
             ThrowReaderException(CoderError, "IncompatibleSizeOfDouble");
           }
         if (MATLAB_HDR.StructureFlag & FLAG_COMPLEX)
           {                         /* complex double type cell */
           }
         ldblk = (ssize_t) (8 * MATLAB_HDR.SizeX);
         break;
       default:
         if ((image != image2) && (image2 != (Image *) NULL))
           image2=DestroyImage(image2);
         if (clone_info)
           clone_info=DestroyImageInfo(clone_info);
         ThrowReaderException(CoderError, "UnsupportedCellTypeInTheMatrix");
     }
     (void) sample_size;
     image->columns = MATLAB_HDR.SizeX;
     image->rows = MATLAB_HDR.SizeY;
     image->colors = GetQuantumRange(image->depth);
     if (image->columns == 0 || image->rows == 0)
       goto MATLAB_KO;
     if((unsigned int)ldblk*MATLAB_HDR.SizeY > MATLAB_HDR.ObjectSize)
       goto MATLAB_KO;
     /* Image is gray when no complex flag is set and 2D Matrix */
     if ((MATLAB_HDR.DimFlag == 8) &&
         ((MATLAB_HDR.StructureFlag & FLAG_COMPLEX) == 0))
       {
         image->type=GrayscaleType;
         SetImageColorspace(image,GRAYColorspace,exception);
       }
 
 
     /*
       If ping is true, then only set image size and colors without
       reading any image data.
     */
     if (image_info->ping)
     {
       size_t temp = image->columns;
       image->columns = image->rows;
       image->rows = temp;
       goto done_reading; /* !!!!!! BAD  !!!! */
     }
     status=SetImageExtent(image,image->columns,image->rows,exception);
     if (status == MagickFalse)
       {
         if (clone_info != (ImageInfo *) NULL)
           clone_info=DestroyImageInfo(clone_info);
         if ((image != image2) && (image2 != (Image *) NULL))
           image2=DestroyImage(image2);
         return(DestroyImageList(image));
       }
     (void) SetImageBackgroundColor(image,exception);
     quantum_info=AcquireQuantumInfo(clone_info,image);
     if (quantum_info == (QuantumInfo *) NULL)
       {
         if (clone_info != (ImageInfo *) NULL)
           clone_info=DestroyImageInfo(clone_info);
         if ((image != image2) && (image2 != (Image *) NULL))
           image2=DestroyImage(image2);
         ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
       }
 
   /* ----- Load raster data ----- */
     BImgBuff = (unsigned char *) AcquireQuantumMemory((size_t) (ldblk),sizeof(double));    /* Ldblk was set in the check phase */
     if (BImgBuff == NULL)
       {
         if (clone_info != (ImageInfo *) NULL)
           clone_info=DestroyImageInfo(clone_info);
         if ((image != image2) && (image2 != (Image *) NULL))
           image2=DestroyImage(image2);
         if (quantum_info != (QuantumInfo *) NULL)
           quantum_info=DestroyQuantumInfo(quantum_info);
         ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
       }
     (void) memset(BImgBuff,0,ldblk*sizeof(double));
 
     MinVal = 0;
     MaxVal = 0;
     if (CellType==miDOUBLE || CellType==miSINGLE)        /* Find Min and Max Values for floats */
       {
         CalcMinMax(image2,image_info->endian,MATLAB_HDR.SizeX,MATLAB_HDR.SizeY,
           CellType,ldblk,BImgBuff,&quantum_info->minimum,
           &quantum_info->maximum);
       }
 
     /* Main loop for reading all scanlines */
     if(z==1) z=0; /* read grey scanlines */
     /* else read color scanlines */
     do
     {
       for (i = 0; i < (ssize_t) MATLAB_HDR.SizeY; i++)
       {
         q=GetAuthenticPixels(image,0,MATLAB_HDR.SizeY-i-1,image->columns,1,exception);
         if (q == (Quantum *) NULL)
           {
             if (logging) (void)LogMagickEvent(CoderEvent,GetMagickModule(),
               "  MAT set image pixels returns unexpected NULL on a row %u.", (unsigned)(MATLAB_HDR.SizeY-i-1));
             goto done_reading;    /* Skip image rotation, when cannot set image pixels    */
           }
         if(ReadBlob(image2,ldblk,(unsigned char *)BImgBuff) != (ssize_t) ldblk)
           {
             if (logging) (void)LogMagickEvent(CoderEvent,GetMagickModule(),
               "  MAT cannot read scanrow %u from a file.", (unsigned)(MATLAB_HDR.SizeY-i-1));
+            ThrowReaderException(CorruptImageError,"UnexpectedEndOfFile");
             goto ExitLoop;
           }
         if((CellType==miINT8 || CellType==miUINT8) && (MATLAB_HDR.StructureFlag & FLAG_LOGICAL))
         {
           FixLogical((unsigned char *)BImgBuff,ldblk);
           if(ImportQuantumPixels(image,(CacheView *) NULL,quantum_info,z2qtype[z],BImgBuff,exception) <= 0)
             {
