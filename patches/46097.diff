commit 4560df3ddd9e7031a450acdca28884884bd4f5ff
Author: oscargm98 <soscargm98@gmail.com>
Date:   Mon Mar 14 21:20:21 2022 +0100

    implementing 3rd partition in blosc2_getitem_ctx()

diff --git a/blosc/blosc2.c b/blosc/blosc2.c
index 8b17c81e..7f869f5e 100644
--- a/blosc/blosc2.c
+++ b/blosc/blosc2.c
@@ -2738,154 +2738,169 @@ int blosc_decompress(const void* src, void* dest, size_t destsize) {
 /* Specific routine optimized for decompression a small number of
    items out of a compressed chunk.  This does not use threads because
    it would affect negatively to performance. */
 int _blosc_getitem(blosc2_context* context, blosc_header* header, const void* src, int32_t srcsize,
                    int start, int nitems, void* dest, int32_t destsize) {
   uint8_t* _src = (uint8_t*)(src);  /* current pos for source buffer */
   uint8_t* _dest = (uint8_t*)(dest);
   int32_t ntbytes = 0;              /* the number of uncompressed bytes */
   int32_t bsize, bsize2, ebsize, leftoverblock;
   int32_t cbytes;
   int32_t startb, stopb;
   int32_t stop = start + nitems;
   int j, rc;
 
   if (nitems == 0) {
     // We have nothing to do
     return 0;
   }
   if (nitems * header->typesize > destsize) {
     BLOSC_TRACE_ERROR("`nitems`*`typesize` out of dest bounds.");
     return BLOSC2_ERROR_WRITE_BUFFER;
   }
 
   context->bstarts = (int32_t*)(_src + context->header_overhead);
 
   /* Check region boundaries */
   if ((start < 0) || (start * header->typesize > header->nbytes)) {
     BLOSC_TRACE_ERROR("`start` out of bounds.");
     return BLOSC2_ERROR_INVALID_PARAM;
   }
 
   if ((stop < 0) || (stop * header->typesize > header->nbytes)) {
     BLOSC_TRACE_ERROR("`start`+`nitems` out of bounds.");
     return BLOSC2_ERROR_INVALID_PARAM;
   }
 
   int chunk_memcpy = header->flags & 0x1;
   if (!context->special_type && !chunk_memcpy &&
       ((uint8_t *)(_src + srcsize) < (uint8_t *)(context->bstarts + context->nblocks))) {
     BLOSC_TRACE_ERROR("`bstarts` out of bounds.");
     return BLOSC2_ERROR_READ_BUFFER;
   }
 
   bool memcpyed = header->flags & (uint8_t)BLOSC_MEMCPYED;
   if (context->special_type) {
     // Fake a runlen as if its a memcpyed chunk
     memcpyed = true;
   }
 
   bool is_lazy = ((context->header_overhead == BLOSC_EXTENDED_HEADER_LENGTH) &&
                   (context->blosc2_flags & 0x08u) && !context->special_type);
   if (memcpyed && !is_lazy && !context->postfilter) {
     // Short-circuit for (non-lazy) memcpyed or special values
     ntbytes = nitems * header->typesize;
     switch (context->special_type) {
       case BLOSC2_SPECIAL_VALUE:
         // All repeated values
         rc = set_values(context->typesize, _src, _dest, ntbytes);
         if (rc < 0) {
           BLOSC_TRACE_ERROR("set_values failed");
           return BLOSC2_ERROR_DATA;
         }
         break;
       case BLOSC2_SPECIAL_NAN:
         rc = set_nans(context->typesize, _dest, ntbytes);
         if (rc < 0) {
           BLOSC_TRACE_ERROR("set_nans failed");
           return BLOSC2_ERROR_DATA;
         }
         break;
       case BLOSC2_SPECIAL_ZERO:
         memset(_dest, 0, ntbytes);
         break;
       case BLOSC2_SPECIAL_UNINIT:
         // We do nothing here
         break;
       case BLOSC2_NO_SPECIAL:
         _src += context->header_overhead + start * context->typesize;
         memcpy(_dest, _src, ntbytes);
         break;
       default:
         BLOSC_TRACE_ERROR("Unhandled special value case");
         return -1;
     }
     return ntbytes;
   }
 
   ebsize = header->blocksize + header->typesize * (signed)sizeof(int32_t);
   struct thread_context* scontext = context->serial_context;
   /* Resize the temporaries in serial context if needed */
   if (header->blocksize > scontext->tmp_blocksize) {
     my_free(scontext->tmp);
     scontext->tmp_nbytes = (size_t)4 * ebsize;
     scontext->tmp = my_malloc(scontext->tmp_nbytes);
     BLOSC_ERROR_NULL(scontext->tmp, BLOSC2_ERROR_MEMORY_ALLOC);
     scontext->tmp2 = scontext->tmp + ebsize;
     scontext->tmp3 = scontext->tmp2 + ebsize;
     scontext->tmp4 = scontext->tmp3 + ebsize;
     scontext->tmp_blocksize = (int32_t)header->blocksize;
   }
 
   for (j = 0; j < context->nblocks; j++) {
     bsize = header->blocksize;
     leftoverblock = 0;
     if ((j == context->nblocks - 1) && (context->leftover > 0)) {
       bsize = context->leftover;
       leftoverblock = 1;
     }
 
     /* Compute start & stop for each block */
     startb = start * header->typesize - j * header->blocksize;
     stopb = stop * header->typesize - j * header->blocksize;
     if (stopb <= 0) {
       // We can exit as soon as this block is beyond stop
       break;
     }
     if (startb >= header->blocksize) {
       continue;
     }
     if (startb < 0) {
       startb = 0;
     }
     if (stopb > header->blocksize) {
       stopb = header->blocksize;
     }
     bsize2 = stopb - startb;
+#if defined(HAVE_PLUGINS)
+  uint8_t ndim;
+  for (int nmetalayer = 0; nmetalayer < context->schunk->nmetalayers; nmetalayer++) {
+      if (strcmp("caterva", context->schunk->metalayers[nmetalayer]->name) == 0) {
+          ndim = context->schunk->metalayers[nmetalayer]->content[2];
+      }
+  }
+  int cell_nitems = (int) (1u << (2 * ndim));
+  if ((context->compcode == BLOSC_CODEC_ZFP_FIXED_RATE) && (nitems <= cell_nitems)) {
+    context->cell_start = startb;
+    context->zfp_nitems = nitems;
+}
+#endif /* HAVE_PLUGINS */
 
     /* Do the actual data copy */
     // Regular decompression.  Put results in tmp2.
     // If the block is aligned and the worst case fits in destination, let's avoid a copy
     bool get_single_block = ((startb == 0) && (bsize == nitems * header->typesize));
     uint8_t* tmp2 = get_single_block ? dest : scontext->tmp2;
 
     // If memcpyed we don't have a bstarts section (because it is not needed)
     int32_t src_offset = memcpyed ?
       context->header_overhead + j * bsize : sw32_(context->bstarts + j);
 
     int cbytes = blosc_d(context->serial_context, bsize, leftoverblock, memcpyed,
                          src, srcsize, src_offset, j,
                          tmp2, 0, scontext->tmp, scontext->tmp3);
     if (cbytes < 0) {
       ntbytes = cbytes;
       break;
     }
     if (!get_single_block) {
       /* Copy to destination */
       memcpy((uint8_t *) dest + ntbytes, tmp2 + startb, (unsigned int) bsize2);
     }
     ntbytes += bsize2;
   }
 
+  context->cell_start = -1;
+
   return ntbytes;
 }
 
diff --git a/blosc/context.h b/blosc/context.h
index 25582005..a6e2f56c 100644
--- a/blosc/context.h
+++ b/blosc/context.h
@@ -36,107 +36,111 @@
 struct blosc2_context_s {
   const uint8_t* src;
   /* The source buffer */
   uint8_t* dest;
   /* The destination buffer */
   uint8_t header_flags;
   /* Flags for header */
   uint8_t blosc2_flags;
   /* Flags specific for blosc2 */
   int32_t sourcesize;
   /* Number of bytes in source buffer */
   int32_t header_overhead;
   /* The number of bytes in chunk header */
   int32_t nblocks;
   /* Number of total blocks in buffer */
   int32_t leftover;
   /* Extra bytes at end of buffer */
   int32_t blocksize;
   /* Length of the block in bytes */
   int32_t splitmode;
   /* Whether the blocks should be split or not */
   int32_t output_bytes;
   /* Counter for the number of input bytes */
   int32_t srcsize;
   /* Counter for the number of output bytes */
   int32_t destsize;
   /* Maximum size for destination buffer */
   int32_t typesize;
   /* Type size */
   int32_t* bstarts;
   /* Starts for every block inside the compressed buffer */
+  int32_t cell_start;
+  /* Cell starter index for ZFP fixed-rate mode */
+  int32_t zfp_nitems;
+  /* Number of items to get for ZFP fixed-rate mode */
   int32_t special_type;
   /* Special type for chunk.  0 if not special. */
   int compcode;
   /* Compressor code to use */
   uint8_t compcode_meta;
   /* The metainfo for the compressor code */
   int clevel;
   /* Compression level (1-9) */
   int use_dict;
   /* Whether to use dicts or not */
   void* dict_buffer;
   /* The buffer to keep the trained dictionary */
   int32_t dict_size;
   /* The size of the trained dictionary */
   void* dict_cdict;
   /* The dictionary in digested form for compression */
   void* dict_ddict;
   /* The dictionary in digested form for decompression */
   uint8_t filter_flags;
   /* The filter flags in the filter pipeline */
   uint8_t filters[BLOSC2_MAX_FILTERS];
   /* the (sequence of) filters */
   uint8_t filters_meta[BLOSC2_MAX_FILTERS];
   /* the metainfo for filters */
   blosc2_filter urfilters[BLOSC2_MAX_UDFILTERS];
   /* The user-defined filters */
   blosc2_prefilter_fn prefilter;
   /* prefilter function */
   blosc2_postfilter_fn postfilter;
   /* postfilter function */
   blosc2_prefilter_params *preparams;
   /* prefilter params */
   blosc2_postfilter_params *postparams;
   /* postfilter params */
   bool* block_maskout;
   /* The blocks that are not meant to be decompressed.
    * If NULL (default), all blocks in a chunk should be read. */
   int block_maskout_nitems;
   /* The number of items in block_maskout array (must match
    * the number of blocks in chunk) */
   blosc2_schunk* schunk;
   /* Associated super-chunk (if available) */
   struct thread_context* serial_context;
   /* Cache for temporaries for serial operation */
   int do_compress;
   /* 1 if we are compressing, 0 if decompressing */
   void *btune;
   /* Entry point for BTune persistence between runs */
   blosc2_btune *udbtune;
   /* User-defined BTune parameters */
   /* Threading */
   int16_t nthreads;
   int16_t new_nthreads;
   int16_t threads_started;
   int16_t end_threads;
   pthread_t *threads;
   struct thread_context *thread_contexts; /* only for user-managed threads */
   pthread_mutex_t count_mutex;
 #ifdef BLOSC_POSIX_BARRIERS
   pthread_barrier_t barr_init;
   pthread_barrier_t barr_finish;
 #else
   int count_threads;
   pthread_mutex_t count_threads_mutex;
   pthread_cond_t count_threads_cv;
 #endif
 #if !defined(_WIN32)
   pthread_attr_t ct_attr;      /* creation time attrs for threads */
 #endif
   int thread_giveup_code;
   /* error code when give up */
   int thread_nblock;       /* block counter */
   int dref_not_init;       /* data ref in delta not initialized */
   pthread_mutex_t delta_mutex;
   pthread_cond_t delta_cv;
 };
