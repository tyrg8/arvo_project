commit 267b00e0a2ac5b7a4d5375113329d03ddc4c5456
Merge: 85faf974a a3cc4110b
Author: toddouska <todd@wolfssl.com>
Date:   Mon Jan 18 15:21:03 2021 -0800

    Merge pull request #3620 from haydenroche5/zd11434
    
    Clamp the normalization value at the end of sp_mont_norm.

diff --git a/wolfcrypt/src/sp_int.c b/wolfcrypt/src/sp_int.c
index 600a90fd6..eacae69c8 100644
--- a/wolfcrypt/src/sp_int.c
+++ b/wolfcrypt/src/sp_int.c
@@ -12264,54 +12264,55 @@ int sp_mont_setup(sp_int* m, sp_int_digit* rho)
 #if defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)
 /* Calculate the normalization value of m.
  *   norm = 2^k - m, where k is the number of bits in m
  *
  * @param  [out]  norm   SP integer that normalises numbers into Montgomery
  *                       form.
  * @param  [in]   m      SP integer that is the modulus.
  *
  * @return  MP_OKAY on success.
  * @return  MP_VAL when norm or m is NULL, or number of bits in m is maximual.
  */
 int sp_mont_norm(sp_int* norm, sp_int* m)
 {
     int err = MP_OKAY;
     int bits = 0;
 
     if ((norm == NULL) || (m == NULL)) {
         err = MP_VAL;
     }
     if (err == MP_OKAY) {
         bits = sp_count_bits(m);
         if (bits == m->size * SP_WORD_SIZE) {
             err = MP_VAL;
         }
     }
     if (err == MP_OKAY) {
         if (bits < SP_WORD_SIZE) {
             bits = SP_WORD_SIZE;
         }
         _sp_zero(norm);
         sp_set_bit(norm, bits);
         err = sp_sub(norm, m, norm);
     }
     if ((err == MP_OKAY) && (bits == SP_WORD_SIZE)) {
         norm->dp[0] %= m->dp[0];
     }
+    sp_clamp(norm);
 
     return err;
 }
 #endif /* WOLFSSL_SP_MATH_ALL || !WOLFSSL_RSA_VERIFY_ONLY */
 
 /*********************************
  * To and from binary and strings.
  *********************************/
 
 /* Calculate the number of 8-bit values required to represent the
  * multi-precision number.
  *
  * When a is NULL, return s 0.
  *
  * @param  [in]  a  SP integer.
  *
  * @return  The count of 8-bit values.
  */
