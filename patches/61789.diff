commit 89310eebc88e3fef1baae237ac39013aae236792
Author: Yash Patil <yash.patil@ittiam.com>
Date:   Fri Sep 1 15:49:57 2023 +0530

    Fix for index out of bounds in ixheaacd_calc_m1m2_7272
    
    These changes handle the Index-out-of-bounds
    runtime error reported when there is invalid access for some buffers.
    It is prevented by propagating error appropriately.
    
    Bug: ossFuzz:61789
    Test: poc in bug

diff --git a/decoder/ixheaacd_mps_bitdec.c b/decoder/ixheaacd_mps_bitdec.c
index ffc43f6..d4c4bc0 100644
--- a/decoder/ixheaacd_mps_bitdec.c
+++ b/decoder/ixheaacd_mps_bitdec.c
@@ -47,12 +47,30 @@
 #include "ixheaacd_mps_mdct_2_qmf.h"
 #include "ixheaac_sbr_const.h"
 
-static WORD32 ixheaacd_mps_bound_check(WORD32 var, WORD32 lower_bound, WORD32 upper_bound) {
+static WORD32 ixheaacd_bound_check(WORD32 var, WORD32 lower_bound, WORD32 upper_bound) {
   var = min(var, upper_bound);
   var = max(var, lower_bound);
   return var;
 }
 
+static VOID ixheaacd_mps_check_index_bounds(
+    WORD32 output_idx_data[][MAX_PARAMETER_SETS][MAX_PARAMETER_BANDS],
+    WORD32 num_parameter_sets, WORD32 start_band, WORD32 stop_band,
+    WORD32 param_type, WORD32 xtt_idx) {
+  WORD32 i, band;
+  for (i = 0; i < num_parameter_sets; i++) {
+    for (band = start_band; band < stop_band; band++) {
+      if (param_type == CLD) {
+        output_idx_data[xtt_idx][i][band] =
+          ixheaacd_bound_check(output_idx_data[xtt_idx][i][band], -15, 15);
+      } else if (param_type == ICC) {
+        output_idx_data[xtt_idx][i][band] =
+        ixheaacd_bound_check(output_idx_data[xtt_idx][i][band], 0, 7);
+      }
+    }
+  }
+}
+
 static IA_ERRORCODE ixheaacd_parse_extension_config(
     ia_mps_spatial_bs_config_struct *config, WORD32 num_ott_boxes, WORD32 num_ttt_boxes,
     WORD32 num_out_chan, WORD32 bits_available, ia_bit_buf_struct *it_bit_buff,
@@ -1322,198 +1340,189 @@ static VOID ixheaacd_factor_cld(WORD32 *idx, WORD32 ott_vs_tot_db, WORD32 *ott_v
 static IA_ERRORCODE ixheaacd_map_index_data(
     ia_mps_dec_lossless_data_struct *ll_data,
     WORD32 output_data[][MAX_PARAMETER_SETS][MAX_PARAMETER_BANDS],
     WORD32 output_idx_data[][MAX_PARAMETER_SETS][MAX_PARAMETER_BANDS],
     WORD32 cmp_idx_data[][MAX_PARAMETER_SETS][MAX_PARAMETER_BANDS],
     WORD32 diff_idx_data[][MAX_PARAMETER_SETS][MAX_PARAMETER_BANDS], WORD32 xtt_idx,
     WORD32 idx_prev[MAX_NUM_OTT][MAX_PARAMETER_BANDS], WORD32 param_idx, WORD32 param_type,
     WORD32 start_band, WORD32 stop_band, WORD32 default_value, WORD32 num_parameter_sets,
     WORD32 *param_slot, WORD32 extend_frame, WORD32 quant_mode, WORD32 *ott_vs_tot_db_in,
     WORD32 *ott_vs_tot_db_1, WORD32 *ott_vs_tot_db_2,
     ia_mps_dec_bitdec_tables_struct *ixheaacd_mps_dec_bitdec_tables, VOID *scratch) {
   WORD32 *a_param_slots;
   WORD32 *a_interpolate;
 
   WORD32 data_sets;
   WORD32 *a_map;
   VOID *free_scratch;
 
   WORD32 set_idx, i, band, parm_slot;
   WORD32 data_bands, stride;
   WORD32 ps, pb;
 
   WORD32 i1, i2, x1, xi, x2;
   WORD32 *db_in;
   WORD32 *db_1, *db_2;
   db_in = ott_vs_tot_db_in;
   db_1 = ott_vs_tot_db_1;
   db_2 = ott_vs_tot_db_2;
   a_param_slots = scratch;
   a_interpolate = a_param_slots + MAX_PARAMETER_SETS;
   a_map = a_interpolate + MAX_PARAMETER_SETS;
   free_scratch = a_map + MAX_PARAMETER_BANDS_PLUS_1;
 
   data_sets = 0;
   for (i = 0; i < num_parameter_sets; i++) {
     if (ll_data->bs_xxx_data_mode[param_idx][i] == 3) {
       a_param_slots[data_sets] = i;
       data_sets++;
     }
   }
 
   set_idx = 0;
 
   for (i = 0; i < num_parameter_sets; i++) {
     if (ll_data->bs_xxx_data_mode[param_idx][i] == 0) {
       ll_data->no_cmp_quant_coarse_xxx[param_idx][i] = 0;
       for (band = start_band; band < stop_band; band++) {
         output_idx_data[xtt_idx][i][band] = default_value;
       }
       for (band = start_band; band < stop_band; band++) {
         idx_prev[xtt_idx][band] = output_idx_data[xtt_idx][i][band];
       }
     }
 
     if (ll_data->bs_xxx_data_mode[param_idx][i] == 1) {
       for (band = start_band; band < stop_band; band++) {
         output_idx_data[xtt_idx][i][band] = idx_prev[xtt_idx][band];
       }
       ll_data->no_cmp_quant_coarse_xxx[param_idx][i] =
           ll_data->bs_quant_coarse_xxx_prev[param_idx];
     }
 
     if (ll_data->bs_xxx_data_mode[param_idx][i] == 2) {
       for (band = start_band; band < stop_band; band++) {
         output_idx_data[xtt_idx][i][band] = idx_prev[xtt_idx][band];
       }
       a_interpolate[i] = 1;
     } else {
       a_interpolate[i] = 0;
     }
 
     if (ll_data->bs_xxx_data_mode[param_idx][i] == 3) {
       parm_slot = a_param_slots[set_idx];
       stride = ixheaacd_mps_dec_bitdec_tables
                    ->pb_stride_table[ll_data->bs_freq_res_stride_xxx[param_idx][set_idx]];
       data_bands = (stop_band - start_band - 1) / stride + 1;
       ixheaacd_create_mapping(a_map, start_band, stop_band, stride, free_scratch);
       ixheaacd_map_frequency(&cmp_idx_data[xtt_idx][set_idx][0],
                              &output_idx_data[xtt_idx][parm_slot][0], a_map, data_bands);
 
       for (band = start_band; band < stop_band; band++) {
         idx_prev[xtt_idx][band] = output_idx_data[xtt_idx][parm_slot][band];
       }
 
       ll_data->bs_quant_coarse_xxx_prev[param_idx] =
           ll_data->bs_quant_coarse_xxx[param_idx][set_idx];
       ll_data->no_cmp_quant_coarse_xxx[param_idx][i] =
           ll_data->bs_quant_coarse_xxx[param_idx][set_idx];
 
       set_idx++;
     }
 
     if (diff_idx_data != NULL) {
       for (band = start_band; band < stop_band; band++) {
         output_idx_data[xtt_idx][i][band] += diff_idx_data[xtt_idx][i][band];
       }
     }
   }
 
   for (i = 0; i < num_parameter_sets; i++) {
     if (a_interpolate[i] != 1) {
       if (ll_data->no_cmp_quant_coarse_xxx[param_idx][i] == 1) {
         for (band = start_band; band < stop_band; band++) {
           ixheaacd_deq_coarse(output_idx_data[xtt_idx][i][band], param_type,
                               &(output_data[xtt_idx][i][band]), ixheaacd_mps_dec_bitdec_tables);
         }
       } else {
         for (band = start_band; band < stop_band; band++) {
           ia_mps_dec_deq(output_idx_data[xtt_idx][i][band], param_type,
                          &(output_data[xtt_idx][i][band]), ixheaacd_mps_dec_bitdec_tables);
         }
       }
     }
   }
 
   if (quant_mode && (param_type == CLD)) {
     if (db_in == 0 || db_1 == 0 || db_2 == 0)
       return IA_XHEAAC_MPS_DEC_EXE_FATAL_INVALID_MPS_PARAM;
 
     for (ps = 0; ps < num_parameter_sets; ps++) {
       if (a_interpolate[ps] != 1) {
         if (ll_data->no_cmp_quant_coarse_xxx[param_idx][ps]) {
           ixheaacd_coarse_2_fine(output_idx_data[xtt_idx][ps], param_type, start_band,
                                  stop_band - start_band);
         }
         for (pb = start_band; pb < stop_band; pb++) {
           ll_data->no_cmp_quant_coarse_xxx[param_idx][ps] = 1;
           ixheaacd_factor_cld(&(output_idx_data[xtt_idx][ps][pb]), *db_in++, &(*db_1++),
                               &(*db_2++), quant_mode, ixheaacd_mps_dec_bitdec_tables);
           ia_mps_dec_deq(output_idx_data[xtt_idx][ps][pb], param_type,
                          &(output_data[xtt_idx][ps][pb]), ixheaacd_mps_dec_bitdec_tables);
         }
       }
     }
   }
 
   i1 = 0;
   x1 = 0;
   i2 = 0;
   for (i = 0; i < num_parameter_sets; i++) {
     if (a_interpolate[i] != 1) {
       i1 = i;
     }
     i2 = i;
     while (a_interpolate[i2] == 1) {
       i2++;
     }
     x1 = param_slot[i1];
     xi = param_slot[i];
     x2 = param_slot[i2];
 
     if (a_interpolate[i] == 1) {
       if (i2 >= num_parameter_sets) return IA_XHEAAC_MPS_DEC_EXE_FATAL_INVALID_PARAMETER_SETS;
       if (ll_data->no_cmp_quant_coarse_xxx[param_idx][i1]) {
         ixheaacd_coarse_2_fine(output_idx_data[xtt_idx][i1], param_type, start_band,
                                stop_band - start_band);
       }
       if (ll_data->no_cmp_quant_coarse_xxx[param_idx][i2]) {
         ixheaacd_coarse_2_fine(output_idx_data[xtt_idx][i2], param_type, start_band,
                                stop_band - start_band);
       }
       for (band = start_band; band < stop_band; band++) {
         WORD32 yi = 0, y1, y2;
         y1 = output_idx_data[xtt_idx][i1][band];
         y2 = output_idx_data[xtt_idx][i2][band];
 
         if (x2 != x1) {
           yi = y1 + (xi - x1) * (y2 - y1) / (x2 - x1);
         }
         output_idx_data[xtt_idx][i][band] = yi;
         ia_mps_dec_deq(output_idx_data[xtt_idx][i][band], param_type,
                        &(output_data[xtt_idx][i][band]), ixheaacd_mps_dec_bitdec_tables);
       }
     }
   }
 
-  for (ps = 0; ps < num_parameter_sets; ps++) {
-    for (band = start_band; band < stop_band; band++) {
-      if (param_type == CLD) {
-        output_idx_data[xtt_idx][ps][band] =
-          ixheaacd_mps_bound_check(output_idx_data[xtt_idx][ps][band], -15, 15);
-      } else if (param_type == ICC)
-      {
-        output_idx_data[xtt_idx][ps][band] =
-          ixheaacd_mps_bound_check(output_idx_data[xtt_idx][ps][band], 0, 7);
-      }
-    }
-  }
+  ixheaacd_mps_check_index_bounds(output_idx_data, num_parameter_sets, start_band,
+                                  stop_band, param_type, xtt_idx);
+
   if (extend_frame) {
     for (band = start_band; band < stop_band; band++) {
       output_data[xtt_idx][num_parameter_sets][band] =
           output_data[xtt_idx][num_parameter_sets - 1][band];
       output_idx_data[xtt_idx][num_parameter_sets][band] =
           output_idx_data[xtt_idx][num_parameter_sets - 1][band];
     }
   }
   return IA_NO_ERROR;
 }
@@ -1585,291 +1594,316 @@ static VOID ixheaacd_map_data_to_28_bands(
   return;
 }
 
-static VOID ixheaacd_decode_and_map_frame_ott(ia_heaac_mps_state_struct *pstr_mps_state) {
-  ia_mps_dec_spatial_bs_frame_struct *p_cur_bs = pstr_mps_state->bs_frame;
+static IA_ERRORCODE ixheaacd_decode_and_map_frame_ott(ia_heaac_mps_state_struct *pstr_mps_state)
+{
+  IA_ERRORCODE error_code = IA_NO_ERROR;
+  ia_mps_dec_spatial_bs_frame_struct *p_cur_bs;
   ia_heaac_mps_state_struct *curr_state = pstr_mps_state;
   ia_mps_dec_auxilary_struct *p_aux_struct = pstr_mps_state->aux_struct;
   ia_mps_dec_bitdec_tables_struct *bitdec_table =
       pstr_mps_state->ia_mps_dec_mps_table.bitdec_table_ptr;
   WORD32 *param_slot = pstr_mps_state->aux_struct->param_slot;
 
   WORD32 i, num_parameter_sets, ott_idx, band;
   WORD32 num_ott_boxes;
   VOID *free_scratch;
 
   WORD32 ps, pb;
 
   WORD32 *tot_db;
   WORD32 *ott_vs_tot_db_fc;
   WORD32 *ott_vs_tot_db_s;
   WORD32 *ott_vs_tot_db_f;
   WORD32 *ott_vs_tot_db_c;
   WORD32 *ott_vs_tot_db_lr;
   WORD32 *ott_vs_tot_db_l;
   WORD32 *ott_vs_tot_db_r;
   WORD32 *tmp1;
   WORD32 *tmp2;
 
   WORD32 bitstream_parameter_bands = curr_state->bitstream_parameter_bands;
   WORD32 *b_ott_bands = curr_state->bitstream_ott_bands;
   WORD32 *ott_cld_default = curr_state->ott_cld_default;
   WORD32 parameter_sets = curr_state->num_parameter_sets;
   WORD32 extend_frame = curr_state->extend_frame;
   WORD32 quant_mode = curr_state->quant_mode;
 
   tot_db = pstr_mps_state->mps_scratch_mem_v;
   ott_vs_tot_db_fc = tot_db + MAX_PSXPB;
   ott_vs_tot_db_s = ott_vs_tot_db_fc + MAX_PSXPB;
   ott_vs_tot_db_f = ott_vs_tot_db_s + MAX_PSXPB;
   ott_vs_tot_db_c = ott_vs_tot_db_f + MAX_PSXPB;
   ott_vs_tot_db_lr = ott_vs_tot_db_c + MAX_PSXPB;
   ott_vs_tot_db_l = ott_vs_tot_db_lr + MAX_PSXPB;
   ott_vs_tot_db_r = ott_vs_tot_db_l + MAX_PSXPB;
   tmp1 = ott_vs_tot_db_r + MAX_PSXPB;
   tmp2 = tmp1 + MAX_PSXPB;
   free_scratch = tmp2 + MAX_PSXPB;
 
   p_cur_bs = pstr_mps_state->bs_frame;
   num_ott_boxes = curr_state->num_ott_boxes;
 
   pb = MAX_PSXPB;
   for (i = 0; i < pb; i++) tot_db[i] = 0;
 
   switch (curr_state->tree_config) {
     case TREE_5151:
       i = 0;
-
-      ixheaacd_map_index_data(
+      error_code = ixheaacd_map_index_data(
           &p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld, p_cur_bs->ott_cld_idx,
           p_cur_bs->cmp_ott_cld_idx, NULL, i, p_cur_bs->ott_cld_idx_prev, i, CLD, 0,
           b_ott_bands[i], ott_cld_default[i], parameter_sets, param_slot, extend_frame,
           quant_mode, tot_db, ott_vs_tot_db_fc, ott_vs_tot_db_s, bitdec_table, free_scratch);
+      if (error_code) return error_code;
 
       i = 1;
-
-      ixheaacd_map_index_data(&p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld,
+      error_code = ixheaacd_map_index_data(&p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld,
                               p_cur_bs->ott_cld_idx, p_cur_bs->cmp_ott_cld_idx, NULL, i,
                               p_cur_bs->ott_cld_idx_prev, i, CLD, 0, b_ott_bands[i],
                               ott_cld_default[i], parameter_sets, param_slot, extend_frame,
                               quant_mode, ott_vs_tot_db_fc, ott_vs_tot_db_f, ott_vs_tot_db_c,
                               bitdec_table, free_scratch);
+      if (error_code) return error_code;
 
       i = 2;
-      ixheaacd_map_index_data(
+      error_code = ixheaacd_map_index_data(
           &p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld, p_cur_bs->ott_cld_idx,
           p_cur_bs->cmp_ott_cld_idx, NULL, i, p_cur_bs->ott_cld_idx_prev, i, CLD, 0,
           b_ott_bands[i], ott_cld_default[i], parameter_sets, param_slot, extend_frame,
           quant_mode, ott_vs_tot_db_s, tmp1, tmp2, bitdec_table, free_scratch);
+      if (error_code) return error_code;
 
       i = 3;
-      ixheaacd_map_index_data(
+      error_code = ixheaacd_map_index_data(
           &p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld, p_cur_bs->ott_cld_idx,
           p_cur_bs->cmp_ott_cld_idx, NULL, i, p_cur_bs->ott_cld_idx_prev, i, CLD, 0,
           b_ott_bands[i], ott_cld_default[i], parameter_sets, param_slot, extend_frame,
           quant_mode, ott_vs_tot_db_f, tmp1, tmp2, bitdec_table, free_scratch);
+      if (error_code) return error_code;
 
       i = 4;
-      ixheaacd_map_index_data(&p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld,
+      error_code = ixheaacd_map_index_data(&p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld,
                               p_cur_bs->ott_cld_idx, p_cur_bs->cmp_ott_cld_idx, NULL, i,
                               p_cur_bs->ott_cld_idx_prev, i, CLD, 0, b_ott_bands[i],
                               ott_cld_default[i], parameter_sets, param_slot, extend_frame,
                               quant_mode, tot_db, tmp1, tmp2, bitdec_table, free_scratch);
+      if (error_code) return error_code;
 
       break;
 
     case TREE_5152:
       i = 0;
-      ixheaacd_map_index_data(
+      error_code = ixheaacd_map_index_data(
           &p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld, p_cur_bs->ott_cld_idx,
           p_cur_bs->cmp_ott_cld_idx, NULL, i, p_cur_bs->ott_cld_idx_prev, i, CLD, 0,
           b_ott_bands[i], ott_cld_default[i], parameter_sets, param_slot, extend_frame,
           quant_mode, tot_db, ott_vs_tot_db_lr, ott_vs_tot_db_c, bitdec_table, free_scratch);
+      if (error_code) return error_code;
+
       i = 1;
-      ixheaacd_map_index_data(&p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld,
+      error_code = ixheaacd_map_index_data(&p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld,
                               p_cur_bs->ott_cld_idx, p_cur_bs->cmp_ott_cld_idx, NULL, i,
                               p_cur_bs->ott_cld_idx_prev, i, CLD, 0, b_ott_bands[i],
                               ott_cld_default[i], parameter_sets, param_slot, extend_frame,
                               quant_mode, ott_vs_tot_db_lr, ott_vs_tot_db_l, ott_vs_tot_db_r,
                               bitdec_table, free_scratch);
+      if (error_code) return error_code;
+
       i = 2;
-      ixheaacd_map_index_data(&p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld,
+      error_code = ixheaacd_map_index_data(&p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld,
                               p_cur_bs->ott_cld_idx, p_cur_bs->cmp_ott_cld_idx, NULL, i,
                               p_cur_bs->ott_cld_idx_prev, i, CLD, 0, b_ott_bands[i],
                               ott_cld_default[i], parameter_sets, param_slot, extend_frame,
                               quant_mode, tot_db, tmp1, tmp2, bitdec_table, free_scratch);
+      if (error_code) return error_code;
+
       i = 3;
-      ixheaacd_map_index_data(
+      error_code = ixheaacd_map_index_data(
           &p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld, p_cur_bs->ott_cld_idx,
           p_cur_bs->cmp_ott_cld_idx, NULL, i, p_cur_bs->ott_cld_idx_prev, i, CLD, 0,
           b_ott_bands[i], ott_cld_default[i], parameter_sets, param_slot, extend_frame,
           quant_mode, ott_vs_tot_db_l, tmp1, tmp2, bitdec_table, free_scratch);
+      if (error_code) return error_code;
+
       i = 4;
-      ixheaacd_map_index_data(
+      error_code = ixheaacd_map_index_data(
           &p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld, p_cur_bs->ott_cld_idx,
           p_cur_bs->cmp_ott_cld_idx, NULL, i, p_cur_bs->ott_cld_idx_prev, i, CLD, 0,
           b_ott_bands[i], ott_cld_default[i], parameter_sets, param_slot, extend_frame,
           quant_mode, ott_vs_tot_db_r, tmp1, tmp2, bitdec_table, free_scratch);
+      if (error_code) return error_code;
       break;
 
     default:
       for (i = 0; i < num_ott_boxes; i++) {
-        ixheaacd_map_index_data(&p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld,
+        error_code = ixheaacd_map_index_data(&p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld,
                                 p_cur_bs->ott_cld_idx, p_cur_bs->cmp_ott_cld_idx, NULL, i,
                                 p_cur_bs->ott_cld_idx_prev, i, CLD, 0, b_ott_bands[i],
                                 ott_cld_default[i], parameter_sets, param_slot, extend_frame,
                                 (curr_state->tree_config == TREE_525) ? 0 : quant_mode, NULL,
                                 NULL, NULL, bitdec_table, free_scratch);
+        if (error_code) return error_code;
       }
       break;
   }
 
   if (curr_state->one_icc == 1) {
     if (extend_frame == 0) {
       num_parameter_sets = parameter_sets;
     } else {
       num_parameter_sets = parameter_sets + 1;
     }
 
     for (ott_idx = 1; ott_idx < num_ott_boxes; ott_idx++) {
       if (curr_state->ott_mode_lfe[ott_idx] == 0) {
         for (i = 0; i < num_parameter_sets; i++) {
           for (band = 0; band < bitstream_parameter_bands; band++) {
             p_cur_bs->cmp_ott_icc_idx[ott_idx][i][band] = p_cur_bs->cmp_ott_icc_idx[0][i][band];
           }
         }
       }
     }
 
     for (ott_idx = 0; ott_idx < num_ott_boxes; ott_idx++) {
       if (curr_state->ott_mode_lfe[ott_idx] == 0) {
-        ixheaacd_map_index_data(&p_cur_bs->icc_lossless_data, p_aux_struct->ott_icc,
+        error_code = ixheaacd_map_index_data(&p_cur_bs->icc_lossless_data, p_aux_struct->ott_icc,
                                 p_cur_bs->ott_icc_idx, p_cur_bs->cmp_ott_icc_idx,
                                 p_cur_bs->ott_icc_diff_idx, ott_idx, p_cur_bs->ott_icc_idx_prev,
                                 0, ICC, 0, b_ott_bands[ott_idx], curr_state->icc_default,
                                 parameter_sets, param_slot, extend_frame, quant_mode, NULL, NULL,
                                 NULL, bitdec_table, free_scratch);
+        if (error_code) return error_code;
       }
     }
   } else {
     for (ott_idx = 0; ott_idx < num_ott_boxes; ott_idx++) {
       if (curr_state->ott_mode_lfe[ott_idx] == 0) {
-        ixheaacd_map_index_data(&p_cur_bs->icc_lossless_data, p_aux_struct->ott_icc,
+        error_code = ixheaacd_map_index_data(&p_cur_bs->icc_lossless_data, p_aux_struct->ott_icc,
                                 p_cur_bs->ott_icc_idx, p_cur_bs->cmp_ott_icc_idx,
                                 p_cur_bs->ott_icc_diff_idx, ott_idx, p_cur_bs->ott_icc_idx_prev,
                                 ott_idx, ICC, 0, b_ott_bands[ott_idx], curr_state->icc_default,
                                 parameter_sets, param_slot, extend_frame, quant_mode, NULL, NULL,
                                 NULL, bitdec_table, free_scratch);
+        if (error_code) return error_code;
       }
     }
   }
 
   if (curr_state->up_mix_type == 2) {
     WORD32 num_parameter_sets = parameter_sets;
 
     if (extend_frame) {
       num_parameter_sets++;
     }
 
     for (ott_idx = 0; ott_idx < curr_state->num_ott_boxes; ott_idx++) {
       for (ps = 0; ps < num_parameter_sets; ps++) {
         ixheaacd_map_data_to_28_bands(p_aux_struct->ott_cld[ott_idx][ps],
                                       bitstream_parameter_bands, bitdec_table);
         ixheaacd_map_data_to_28_bands(p_aux_struct->ott_icc[ott_idx][ps],
                                       bitstream_parameter_bands, bitdec_table);
       }
     }
   }
-  return;
+  return error_code;
 }
 
-static VOID ixheaacd_decode_and_map_frame_ttt(ia_heaac_mps_state_struct *pstr_mps_state) {
-  ia_mps_dec_spatial_bs_frame_struct *p_cur_bs = pstr_mps_state->bs_frame;
+static IA_ERRORCODE ixheaacd_decode_and_map_frame_ttt(ia_heaac_mps_state_struct *pstr_mps_state)
+{
+  IA_ERRORCODE error_code = IA_NO_ERROR;
+  ia_mps_dec_spatial_bs_frame_struct *p_cur_bs;
   ia_mps_dec_bitdec_tables_struct *bitdec_table =
       pstr_mps_state->ia_mps_dec_mps_table.bitdec_table_ptr;
   ia_mps_dec_auxilary_struct *p_aux_struct = pstr_mps_state->aux_struct;
   WORD32 *param_slot = pstr_mps_state->aux_struct->param_slot;
 
   WORD32 num_bands;
 
   WORD32 i, j, offset;
   WORD32 num_ttt_boxes;
   VOID *free_scratch;
 
   p_cur_bs = pstr_mps_state->bs_frame;
   num_bands = pstr_mps_state->bitstream_parameter_bands;
   offset = pstr_mps_state->num_ott_boxes;
   num_ttt_boxes = pstr_mps_state->num_ttt_boxes;
   free_scratch = pstr_mps_state->mps_scratch_mem_v;
 
   for (i = 0; i < num_ttt_boxes; i++) {
     for (j = 0;
          (j < 2) &&
          p_aux_struct->ttt_config[j][i].start_band < p_aux_struct->ttt_config[j][i].stop_band;
          j++) {
       if (p_aux_struct->ttt_config[j][i].mode < 2) {
-        ixheaacd_map_index_data(
+        error_code = ixheaacd_map_index_data(
             &p_cur_bs->cpc_lossless_data, p_aux_struct->ttt_cpc_1, p_cur_bs->ttt_cpc_1_idx,
             p_cur_bs->cmp_ttt_cpc_1_idx, NULL, i, p_cur_bs->ttt_cpc_1_idx_prev,
             offset + 4 * i + 2 * j, CPC, p_aux_struct->ttt_config[j][i].bitstream_start_band,
             p_aux_struct->ttt_config[j][i].bitstream_stop_band, pstr_mps_state->cpc_default,
             pstr_mps_state->num_parameter_sets, param_slot, pstr_mps_state->extend_frame,
             pstr_mps_state->quant_mode, NULL, NULL, NULL, bitdec_table, free_scratch);
+        if (error_code) return error_code;
 
-        ixheaacd_map_index_data(
+        error_code = ixheaacd_map_index_data(
             &p_cur_bs->cpc_lossless_data, p_aux_struct->ttt_cpc_2, p_cur_bs->ttt_cpc_2_idx,
             p_cur_bs->cmp_ttt_cpc_2_idx, NULL, i, p_cur_bs->ttt_cpc_2_idx_prev,
             offset + 4 * i + 1 + 2 * j, CPC, p_aux_struct->ttt_config[j][i].bitstream_start_band,
             p_aux_struct->ttt_config[j][i].bitstream_stop_band, pstr_mps_state->cpc_default,
             pstr_mps_state->num_parameter_sets, param_slot, pstr_mps_state->extend_frame,
             pstr_mps_state->quant_mode, NULL, NULL, NULL, bitdec_table, free_scratch);
+        if (error_code) return error_code;
 
-        ixheaacd_map_index_data(
+        error_code = ixheaacd_map_index_data(
             &p_cur_bs->icc_lossless_data, p_aux_struct->ttt_icc, p_cur_bs->ttt_icc_idx,
             p_cur_bs->cmp_ttt_icc_idx, NULL, i, p_cur_bs->ttt_icc_idx_prev,
             offset + 4 * i + 2 * j, ICC, p_aux_struct->ttt_config[j][i].bitstream_start_band,
             p_aux_struct->ttt_config[j][i].bitstream_stop_band, pstr_mps_state->icc_default,
             pstr_mps_state->num_parameter_sets, param_slot, pstr_mps_state->extend_frame,
             pstr_mps_state->quant_mode, NULL, NULL, NULL, bitdec_table, free_scratch);
+        if (error_code) return error_code;
       }
 
       else {
-        ixheaacd_map_index_data(
+        error_code = ixheaacd_map_index_data(
             &p_cur_bs->cld_lossless_data, p_aux_struct->ttt_cld_1, p_cur_bs->ttt_cld_1_idx,
             p_cur_bs->cmp_ttt_cld_1_idx, NULL, i, p_cur_bs->ttt_cld_1_idx_prev,
             offset + 4 * i + 2 * j, CLD, p_aux_struct->ttt_config[j][i].bitstream_start_band,
             p_aux_struct->ttt_config[j][i].bitstream_stop_band,
             pstr_mps_state->ttt_cld_1_default[i], pstr_mps_state->num_parameter_sets, param_slot,
             pstr_mps_state->extend_frame, pstr_mps_state->quant_mode, NULL, NULL, NULL,
             bitdec_table, free_scratch);
+        if (error_code) return error_code;
 
-        ixheaacd_map_index_data(
+        error_code = ixheaacd_map_index_data(
             &p_cur_bs->cld_lossless_data, p_aux_struct->ttt_cld_2, p_cur_bs->ttt_cld_2_idx,
             p_cur_bs->cmp_ttt_cld_2_idx, NULL, i, p_cur_bs->ttt_cld_2_idx_prev,
             offset + 4 * i + 1 + 2 * j, CLD, p_aux_struct->ttt_config[j][i].bitstream_start_band,
             p_aux_struct->ttt_config[j][i].bitstream_stop_band,
             pstr_mps_state->ttt_cld_2_default[i], pstr_mps_state->num_parameter_sets, param_slot,
             pstr_mps_state->extend_frame, pstr_mps_state->quant_mode, NULL, NULL, NULL,
             bitdec_table, free_scratch);
+        if (error_code) return error_code;
       }
 
       if (pstr_mps_state->up_mix_type == 2) {
         WORD32 num_parameter_sets = pstr_mps_state->num_parameter_sets;
         WORD32 ps;
 
         if (pstr_mps_state->extend_frame) {
           num_parameter_sets++;
         }
 
         for (ps = 0; ps < num_parameter_sets; ps++) {
           ixheaacd_map_data_to_28_bands(p_aux_struct->ttt_cpc_1[i][ps], num_bands, bitdec_table);
           ixheaacd_map_data_to_28_bands(p_aux_struct->ttt_cpc_2[i][ps], num_bands, bitdec_table);
           ixheaacd_map_data_to_28_bands(p_aux_struct->ttt_cld_1[i][ps], num_bands, bitdec_table);
           ixheaacd_map_data_to_28_bands(p_aux_struct->ttt_cld_2[i][ps], num_bands, bitdec_table);
           ixheaacd_map_data_to_28_bands(p_aux_struct->ttt_icc[i][ps], num_bands, bitdec_table);
         }
       }
     }
   }
+  return error_code;
 }
 
 static VOID ixheaacd_decode_and_map_frame_smg(ia_heaac_mps_state_struct *pstr_mps_state) {
@@ -1976,100 +2010,170 @@ static VOID ixheaacd_decode_and_map_frame_smg(ia_heaac_mps_state_struct *pstr_mp
   return;
 }
 
-static VOID ixheaacd_decode_and_map_frame_arbdmx(ia_heaac_mps_state_struct *pstr_mps_state) {
+static IA_ERRORCODE ixheaacd_decode_and_map_frame_arbdmx(
+  ia_heaac_mps_state_struct *pstr_mps_state) {
+  IA_ERRORCODE error_code = IA_NO_ERROR;
   ia_mps_dec_spatial_bs_frame_struct *frame = pstr_mps_state->bs_frame;
   ia_mps_dec_bitdec_tables_struct *bitdec_table =
       pstr_mps_state->ia_mps_dec_mps_table.bitdec_table_ptr;
   ia_mps_dec_auxilary_struct *p_aux_struct = pstr_mps_state->aux_struct;
   WORD32 *param_slot = p_aux_struct->param_slot;
   WORD32 offset = pstr_mps_state->num_ott_boxes + 4 * pstr_mps_state->num_ttt_boxes;
   WORD32 ch;
 
   VOID *scratch = pstr_mps_state->mps_scratch_mem_v;
 
   for (ch = 0; ch < pstr_mps_state->num_input_channels; ch++) {
-    ixheaacd_map_index_data(
+    error_code = ixheaacd_map_index_data(
         &frame->cld_lossless_data, p_aux_struct->arbdmx_gain, frame->arbdmx_gain_idx,
         frame->cmp_arbdmx_gain_idx, NULL, ch, frame->arbdmx_gain_idx_prev, offset + ch, CLD, 0,
         pstr_mps_state->bitstream_parameter_bands, pstr_mps_state->arbdmx_gain_default,
         pstr_mps_state->num_parameter_sets, param_slot, pstr_mps_state->extend_frame, 0, NULL,
         NULL, NULL, bitdec_table, scratch);
+    if (error_code) return error_code;
 
     p_aux_struct->arbdmx_residual_abs[ch] = frame->bs_arbitrary_downmix_residual_abs[ch];
     p_aux_struct->arbdmx_alpha_upd_set[ch] =
         frame->bs_arbitrary_downmix_residual_alpha_update_set[ch];
 
     if (pstr_mps_state->up_mix_type == 2) {
       WORD32 num_parameter_sets = pstr_mps_state->num_parameter_sets;
       WORD32 ps;
 
       if (pstr_mps_state->extend_frame) {
         num_parameter_sets++;
       }
 
       for (ps = 0; ps < num_parameter_sets; ps++) {
         ixheaacd_map_data_to_28_bands(p_aux_struct->arbdmx_gain[ch][ps],
                                       pstr_mps_state->bitstream_parameter_bands, bitdec_table);
       }
     }
   }
+  return error_code;
 }
 
-static VOID ixheaacd_decode_and_map_frame_arb_tree(ia_heaac_mps_state_struct *pstr_mps_state) {
+static IA_ERRORCODE ixheaacd_decode_and_map_frame_arb_tree(
+  ia_heaac_mps_state_struct *pstr_mps_state) {
+  IA_ERRORCODE error_code = IA_NO_ERROR;
   ia_mps_dec_spatial_bs_frame_struct *p_cur_bs = pstr_mps_state->bs_frame;
   ia_mps_spatial_bs_config_struct *p_config = &(pstr_mps_state->bs_config);
   ia_mps_dec_auxilary_struct *p_aux_struct = pstr_mps_state->aux_struct;
   WORD32 *param_slot = p_aux_struct->param_slot;
   WORD32 offset = pstr_mps_state->num_ott_boxes;
 
   VOID *scratch = pstr_mps_state->mps_scratch_mem_v;
 
   WORD32 i;
 
   for (i = 0; i < p_config->num_ott_boxes_at; i++) {
-    ixheaacd_map_index_data(&p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld,
+    error_code = ixheaacd_map_index_data(&p_cur_bs->cld_lossless_data, p_aux_struct->ott_cld,
                             p_cur_bs->ott_cld_idx, p_cur_bs->cmp_ott_cld_idx, NULL, offset + i,
                             p_cur_bs->ott_cld_idx_prev, offset + i, CLD, 0,
                             p_config->bs_ott_bands_at[i], p_config->bs_ott_default_cld_at[i],
                             pstr_mps_state->num_parameter_sets, param_slot,
                             pstr_mps_state->extend_frame, pstr_mps_state->quant_mode, NULL, NULL,
                             NULL, pstr_mps_state->ia_mps_dec_mps_table.bitdec_table_ptr, scratch);
+    if (error_code) return error_code;
   }
+  return error_code;
 }
 
 IA_ERRORCODE ixheaacd_decode_frame(ia_heaac_mps_state_struct *pstr_mps_state) {
+  IA_ERRORCODE error_code = IA_NO_ERROR;
   ia_mps_spatial_bs_config_struct *p_bs_config = &pstr_mps_state->bs_config;
   WORD32 *param_slot = pstr_mps_state->aux_struct->param_slot;
 
   pstr_mps_state->extend_frame = 0;
   if (param_slot[pstr_mps_state->num_parameter_sets - 1] != pstr_mps_state->time_slots - 1) {
     pstr_mps_state->extend_frame = 1;
   }
   if (pstr_mps_state->extend_frame)
   {
     if (pstr_mps_state->num_parameter_sets == MAX_PARAMETER_SETS) {
       if (pstr_mps_state->ec_flag)
         pstr_mps_state->num_parameter_sets = 1;
       else
         return IA_FATAL_ERROR;
     }
   }
 
-  ixheaacd_decode_and_map_frame_ott(pstr_mps_state);
-  ixheaacd_decode_and_map_frame_ttt(pstr_mps_state);
+  error_code = ixheaacd_decode_and_map_frame_ott(pstr_mps_state);
+  if (error_code)
+  {
+    if (pstr_mps_state->ec_flag)
+    {
+      pstr_mps_state->frame_ok = 0;
+      for (WORD32 idx = 0; idx < MAX_NUM_OTT; idx++)
+      {
+        ixheaacd_mps_check_index_bounds(pstr_mps_state->bs_frame->ott_cld_idx,
+            pstr_mps_state->num_parameter_sets, 0, pstr_mps_state->bitstream_ott_bands[idx],
+            CLD, idx);
+        ixheaacd_mps_check_index_bounds(pstr_mps_state->bs_frame->ott_icc_idx,
+            pstr_mps_state->num_parameter_sets, 0, pstr_mps_state->bitstream_ott_bands[idx],
+            ICC, idx);
+      }
+    }
+    else
+      return error_code;
+  }
+
+  error_code = ixheaacd_decode_and_map_frame_ttt(pstr_mps_state);
+  if (error_code)
+  {
+    if (pstr_mps_state->ec_flag)
+    {
+      pstr_mps_state->frame_ok = 0;
+      ixheaacd_mps_check_index_bounds(pstr_mps_state->bs_frame->ttt_icc_idx,
+          pstr_mps_state->num_parameter_sets, 0, MAX_PARAMETER_BANDS,
+          ICC, 0);
+    }
+    else
+      return error_code;
+  }
 
   ixheaacd_decode_and_map_frame_smg(pstr_mps_state);
   if (p_bs_config->arbitrary_tree != 0) {
-    ixheaacd_decode_and_map_frame_arb_tree(pstr_mps_state);
+    error_code = ixheaacd_decode_and_map_frame_arb_tree(pstr_mps_state);
+    if (error_code)
+    {
+      if (pstr_mps_state->ec_flag)
+      {
+        pstr_mps_state->frame_ok = 0;
+        for (WORD32 idx = 0; idx < MAX_NUM_OTT; idx++)
+        {
+          ixheaacd_mps_check_index_bounds(pstr_mps_state->bs_frame->ott_cld_idx,
+              pstr_mps_state->num_parameter_sets, 0, MAX_PARAMETER_BANDS,
+              CLD, idx);
+        }
+      }
+      else
+        return error_code;
+    }
   }
 
   if (pstr_mps_state->arbitrary_downmix != 0) {
-    ixheaacd_decode_and_map_frame_arbdmx(pstr_mps_state);
+    error_code = ixheaacd_decode_and_map_frame_arbdmx(pstr_mps_state);
+    if (error_code)
+    {
+      if (pstr_mps_state->ec_flag)
+      {
+        pstr_mps_state->frame_ok = 0;
+        for (WORD32 idx = 0; idx < MAX_INPUT_CHANNELS_MPS; idx++)
+        {
+          ixheaacd_mps_check_index_bounds(pstr_mps_state->bs_frame->arbdmx_gain_idx,
+              pstr_mps_state->num_parameter_sets, 0, MAX_PARAMETER_BANDS,
+              CLD, idx);
+        }
+      }
+      else
+        return error_code;
+    }
   }
 
   if (pstr_mps_state->extend_frame) {
     pstr_mps_state->num_parameter_sets++;
     param_slot[pstr_mps_state->num_parameter_sets - 1] = pstr_mps_state->time_slots - 1;
   }
   return IA_NO_ERROR;
 }
