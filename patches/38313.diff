commit 8f702156e8c9ecc8bbcbabfc0d8ee38bc294dddd
Author: Francesc Alted <francesc@blosc.org>
Date:   Tue Sep 28 18:19:59 2021 +0200

    BloscLZ version bumped to 2.5.1

diff --git a/blosc/blosc.h b/blosc/blosc.h
index c1ff394..77a2411 100644
--- a/blosc/blosc.h
+++ b/blosc/blosc.h
@@ -15,114 +15,114 @@
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 /* Version numbers */
 #define BLOSC_VERSION_MAJOR    1    /* for major interface/format changes  */
 #define BLOSC_VERSION_MINOR    21   /* for minor interface/format changes  */
 #define BLOSC_VERSION_RELEASE  1    /* for tweaks, bug-fixes, or development */
 
 #define BLOSC_VERSION_STRING   "1.21.1.dev0"  /* string version.  Sync with above! */
 #define BLOSC_VERSION_REVISION "$Rev$"   /* revision version */
 #define BLOSC_VERSION_DATE     "$Date:: 2020-12-22 #$"    /* date version */
 
-#define BLOSCLZ_VERSION_STRING "2.5.0"   /* the internal compressor version */
+#define BLOSCLZ_VERSION_STRING "2.5.1"   /* the internal compressor version */
 
 /* The *_FORMAT symbols should be just 1-byte long */
 #define BLOSC_VERSION_FORMAT    2   /* Blosc format version, starting at 1 */
 
 /* Minimum header length */
 #define BLOSC_MIN_HEADER_LENGTH 16
 
 /* The maximum overhead during compression in bytes.  This equals to
    BLOSC_MIN_HEADER_LENGTH now, but can be higher in future
    implementations */
 #define BLOSC_MAX_OVERHEAD BLOSC_MIN_HEADER_LENGTH
 
 /* Maximum source buffer size to be compressed */
 #define BLOSC_MAX_BUFFERSIZE (INT_MAX - BLOSC_MAX_OVERHEAD)
 
 /* Maximum typesize before considering source buffer as a stream of bytes */
 #define BLOSC_MAX_TYPESIZE 255         /* Cannot be larger than 255 */
 
 /* Maximum supported blocksize.  Decompression (getitem) requires a temporary
    buffer of size 3*blocksize + sizeof(int32_t) * typesize. */
 #define BLOSC_MAX_BLOCKSIZE \
   ((INT_MAX - BLOSC_MAX_TYPESIZE * sizeof(int32_t)) / 3)
 
 /* The maximum number of threads (for some static arrays) */
 #define BLOSC_MAX_THREADS 256
 
 /* Codes for shuffling (see blosc_compress) */
 #define BLOSC_NOSHUFFLE   0  /* no shuffle */
 #define BLOSC_SHUFFLE     1  /* byte-wise shuffle */
 #define BLOSC_BITSHUFFLE  2  /* bit-wise shuffle */
 
 /* Codes for internal flags (see blosc_cbuffer_metainfo) */
 #define BLOSC_DOSHUFFLE    0x1	/* byte-wise shuffle */
 #define BLOSC_MEMCPYED     0x2	/* plain copy */
 #define BLOSC_DOBITSHUFFLE 0x4  /* bit-wise shuffle */
 
 /* Codes for the different compressors shipped with Blosc */
 #define BLOSC_BLOSCLZ   0
 #define BLOSC_LZ4       1
 #define BLOSC_LZ4HC     2
 #define BLOSC_SNAPPY    3
 #define BLOSC_ZLIB      4
 #define BLOSC_ZSTD      5
 
 /* Names for the different compressors shipped with Blosc */
 #define BLOSC_BLOSCLZ_COMPNAME   "blosclz"
 #define BLOSC_LZ4_COMPNAME       "lz4"
 #define BLOSC_LZ4HC_COMPNAME     "lz4hc"
 #define BLOSC_SNAPPY_COMPNAME    "snappy"
 #define BLOSC_ZLIB_COMPNAME      "zlib"
 #define BLOSC_ZSTD_COMPNAME      "zstd"
 
 /* Codes for compression libraries shipped with Blosc (code must be < 8) */
 #define BLOSC_BLOSCLZ_LIB   0
 #define BLOSC_LZ4_LIB       1
 #define BLOSC_SNAPPY_LIB    2
 #define BLOSC_ZLIB_LIB      3
 #define BLOSC_ZSTD_LIB      4
 
 /* Names for the different compression libraries shipped with Blosc */
 #define BLOSC_BLOSCLZ_LIBNAME   "BloscLZ"
 #define BLOSC_LZ4_LIBNAME       "LZ4"
 #define BLOSC_SNAPPY_LIBNAME    "Snappy"
 #define BLOSC_ZLIB_LIBNAME      "Zlib"
 #define BLOSC_ZSTD_LIBNAME      "Zstd"
 
 /* The codes for compressor formats shipped with Blosc */
 #define BLOSC_BLOSCLZ_FORMAT  BLOSC_BLOSCLZ_LIB
 #define BLOSC_LZ4_FORMAT      BLOSC_LZ4_LIB
 #define BLOSC_LZ4HC_FORMAT    BLOSC_LZ4_LIB /* LZ4HC and LZ4 share the same format */
 #define BLOSC_SNAPPY_FORMAT   BLOSC_SNAPPY_LIB
 #define BLOSC_ZLIB_FORMAT     BLOSC_ZLIB_LIB
 #define BLOSC_ZSTD_FORMAT     BLOSC_ZSTD_LIB
 
 
 /* The version formats for compressors shipped with Blosc */
 /* All versions here starts at 1 */
 #define BLOSC_BLOSCLZ_VERSION_FORMAT  1
 #define BLOSC_LZ4_VERSION_FORMAT      1
 #define BLOSC_LZ4HC_VERSION_FORMAT    1  /* LZ4HC and LZ4 share the same format */
 #define BLOSC_SNAPPY_VERSION_FORMAT   1
 #define BLOSC_ZLIB_VERSION_FORMAT     1
 #define BLOSC_ZSTD_VERSION_FORMAT     1
 
 /* Split mode for blocks.  NEVER and ALWAYS are for experimenting with best compression ratio,
  * AUTO for optimal behaviour (based on experiments), and FORWARD_COMPAT provides
  * best forward compatibility */
 #define BLOSC_ALWAYS_SPLIT 1
 #define BLOSC_NEVER_SPLIT 2
 #define BLOSC_AUTO_SPLIT 3
 #define BLOSC_FORWARD_COMPAT_SPLIT 4
 
 /**
   Initialize the Blosc library environment.
 
   You must call this previous to any other Blosc call, unless you want
   Blosc to be used simultaneously in a multi-threaded environment, in
   which case you should *exclusively* use the
   blosc_compress_ctx()/blosc_decompress_ctx() pair (see below).
   */
diff --git a/blosc/blosclz.c b/blosc/blosclz.c
index 4e1f648..a0552c2 100644
--- a/blosc/blosclz.c
+++ b/blosc/blosclz.c
@@ -422,200 +422,200 @@ static double get_cratio(uint8_t* ibase, int maxlen, int minlen, int ipshift) {
 int blosclz_compress(const int clevel, const void* input, int length,
                      void* output, int maxout, const int split_block) {
   uint8_t* ibase = (uint8_t*)input;
 
   // Experiments say that checking 1/4 of the buffer is enough to figure out approx cratio
   int maxlen = length / 4;
   // Start probing somewhere inside the buffer
   int shift = length - maxlen;
   // Actual entropy probing!
   double cratio = get_cratio(ibase + shift, maxlen, 3, 3);
   // discard probes with small compression ratios (too expensive)
   double cratio_[10] = {0, 2, 1.5, 1.2, 1.2, 1.2, 1.2, 1.15, 1.1, 1.0};
   if (cratio < cratio_[clevel]) {
     goto out;
   }
 
   /* When we go back in a match (shift), we obtain quite different compression properties.
    * It looks like 4 is more useful in combination with bitshuffle and small typesizes
    * Fallback to 4 because it provides more consistent results for large cratios.
    *
    * In this block we also check cratios for the beginning of the buffers and
    * eventually discard those that are small (take too long to decompress).
    * This process is called _entropy probing_.
    */
   unsigned ipshift = 4;
   // Compute optimal shift and minimum lengths for encoding
   // Use 4 by default, except for low entropy data, where we should do a best effort
   unsigned minlen = 4;
   // BloscLZ works better with splits mostly, so when data is not split, do a best effort
   // Why using cratio < 4 is based in experiments with low and high entropy
   if (!split_block || cratio < 4) {
     ipshift = 3;
     minlen = 3;
   }
 
   uint8_t hashlog_[10] = {0, HASH_LOG - 2, HASH_LOG - 1, HASH_LOG, HASH_LOG,
                           HASH_LOG, HASH_LOG, HASH_LOG, HASH_LOG, HASH_LOG};
   uint8_t hashlog = hashlog_[clevel];
 
   uint8_t* ip = ibase;
   const uint8_t* ip_bound = ibase + length - 1;
   const uint8_t* ip_limit = ibase + length - 12;
   uint8_t* op = (uint8_t*)output;
+  const uint8_t* op_limit = op + maxout;
 
   /* input and output buffer cannot be less than 16 and 66 bytes or we can get into trouble */
   if (length < 16 || maxout < 66) {
     return 0;
   }
 
   // Initialize the hash table
   uint32_t htab[1U << (uint8_t)HASH_LOG];
   memset(htab, 0, (1U << hashlog) * sizeof(uint32_t));
 
   /* we start with literal copy */
   uint8_t copy = 4;
   *op++ = MAX_COPY - 1;
   *op++ = *ip++;
   *op++ = *ip++;
   *op++ = *ip++;
   *op++ = *ip++;
 
   /* main loop */
-  const uint8_t* op_limit = op + maxout;
   while (BLOSCLZ_LIKELY(ip < ip_limit)) {
     const uint8_t* ref;
     unsigned distance;
     uint8_t* anchor = ip;    /* comparison starting-point */
 
     /* find potential match */
     uint32_t seq = BLOSCLZ_READU32(ip);
     uint32_t hval;
     HASH_FUNCTION(hval, seq, hashlog)
     ref = ibase + htab[hval];
 
     /* calculate distance to the match */
     distance = (unsigned int)(anchor - ref);
 
     /* update hash table */
     htab[hval] = (uint32_t) (anchor - ibase);
 
     if (distance == 0 || (distance >= MAX_FARDISTANCE)) {
       LITERAL(ip, op, op_limit, anchor, copy)
       continue;
     }
 
     /* is this a match? check the first 4 bytes */
     if (BLOSCLZ_UNLIKELY(BLOSCLZ_READU32(ref) == BLOSCLZ_READU32(ip))) {
       ref += 4;
     } else {
       /* no luck, copy as a literal */
       LITERAL(ip, op, op_limit, anchor, copy)
       continue;
     }
 
     /* last matched byte */
     ip = anchor + 4;
 
     /* distance is biased */
     distance--;
 
     /* get runs or matches; zero distance means a run */
     ip = get_run_or_match(ip, ip_bound, ref, !distance);
 
     /* length is biased, '1' means a match of 3 bytes */
     ip -= ipshift;
 
     unsigned len = (int)(ip - anchor);
 
     // Encoding short lengths is expensive during decompression
     if (len < minlen || (len <= 5 && distance >= MAX_DISTANCE)) {
       LITERAL(ip, op, op_limit, anchor, copy)
       continue;
     }
 
     /* if we have copied something, adjust the copy count */
     if (copy)
       /* copy is biased, '0' means 1 byte copy */
       *(op - copy - 1) = (uint8_t)(copy - 1);
     else
       /* back, to overwrite the copy count */
       op--;
     /* reset literal counter */
     copy = 0;
 
     /* encode the match */
     if (distance < MAX_DISTANCE) {
       if (len < 7) {
         MATCH_SHORT(op, op_limit, len, distance)
       } else {
         MATCH_LONG(op, op_limit, len, distance)
       }
     } else {
       /* far away, but not yet in the another galaxy... */
       distance -= MAX_DISTANCE;
       if (len < 7) {
         MATCH_SHORT_FAR(op, op_limit, len, distance)
       } else {
         MATCH_LONG_FAR(op, op_limit, len, distance)
       }
     }
 
     /* update the hash at match boundary */
     seq = BLOSCLZ_READU32(ip);
     HASH_FUNCTION(hval, seq, hashlog)
     htab[hval] = (uint32_t) (ip++ - ibase);
     if (clevel == 9) {
       // In some situations, including a second hash proves to be useful,
       // but not in others.  Activating here in max clevel only.
       seq >>= 8U;
       HASH_FUNCTION(hval, seq, hashlog)
       htab[hval] = (uint32_t) (ip++ - ibase);
     }
     else {
       ip++;
     }
 
     if (BLOSCLZ_UNLIKELY(op + 1 > op_limit))
       goto out;
 
     /* assuming literal copy */
     *op++ = MAX_COPY - 1;
   }
 
   /* left-over as literal copy */
   while (BLOSCLZ_UNLIKELY(ip <= ip_bound)) {
     if (BLOSCLZ_UNLIKELY(op + 2 > op_limit)) goto out;
     *op++ = *ip++;
     copy++;
     if (BLOSCLZ_UNLIKELY(copy == MAX_COPY)) {
       copy = 0;
       *op++ = MAX_COPY - 1;
     }
   }
 
   /* if we have copied something, adjust the copy length */
   if (copy)
     *(op - copy - 1) = (uint8_t)(copy - 1);
   else
     op--;
 
   /* marker for blosclz */
   *(uint8_t*)output |= (1U << 5U);
 
   return (int)(op - (uint8_t*)output);
 
   out:
   return 0;
 }
 
 // See https://habr.com/en/company/yandex/blog/457612/
 #if defined(__AVX2__)
 
 #if defined(_MSC_VER)
 #define ALIGNED_(x) __declspec(align(x))
 #else
 #if defined(__GNUC__)
 #define ALIGNED_(x) __attribute__ ((aligned(x)))
 #endif
 #endif
 #define ALIGNED_TYPE_(t, x) t ALIGNED_(x)
