commit d615985b8a1b68bbdc0f31e0e6e648f93c434095
Author: John Reiser <jreiser@BitWagon.com>
Date:   Thu Jan 18 19:11:12 2024 -0800

    elf_find_table_size() did not check for empty table
    
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=65765&q=label%3AProj-upx
    https://github.com/upx/upx/issues/771
            modified:   p_lx_elf.cpp

diff --git a/src/p_lx_elf.cpp b/src/p_lx_elf.cpp
index 52a84efd..c7541ab7 100644
--- a/src/p_lx_elf.cpp
+++ b/src/p_lx_elf.cpp
@@ -2039,23 +2039,26 @@ unsigned PackLinuxElf32::find_dt_ndx(unsigned rva)
 unsigned PackLinuxElf32::elf_find_table_size(unsigned dt_type, unsigned sh_type)
 {
     Elf32_Shdr const *sec = elf_find_section_type(sh_type);
     if (sec) { // Cheat the easy way: use _Shdr.  (No _Shdr anyway for de-compression)
         return get_te32(&sec->sh_size);
     }
     // Honest hard work: use _Phdr
     unsigned x_rva;
     if (dt_type < DT_NUM) {
         unsigned const x_ndx = dt_table[dt_type];
+        if (!x_ndx) { // no such entry
+            return 0;
+        }
         x_rva = get_te32(&dynseg[-1+ x_ndx].d_val);
     }
     else {
         x_rva = elf_unsigned_dynamic(dt_type);
     }
     Elf32_Phdr const *const x_phdr = elf_find_Phdr_for_va(x_rva, phdri, e_phnum);
     unsigned const           d_off =             x_rva - get_te32(&x_phdr->p_vaddr);
     unsigned const           y_ndx = find_dt_ndx(d_off + get_te32(&x_phdr->p_offset));
     if (~0u != y_ndx) {
         return dt_offsets[1+ y_ndx] - dt_offsets[y_ndx];
     }
     return ~0u;
 }
@@ -7928,23 +7931,26 @@ unsigned PackLinuxElf64::find_dt_ndx(u64_t rva)
 unsigned PackLinuxElf64::elf_find_table_size(unsigned dt_type, unsigned sh_type)
 {
     Elf64_Shdr const *sec = elf_find_section_type(sh_type);
     if (sec) { // Cheat the easy way: use _Shdr.  (No _Shdr anyway for de-compression)
         return get_te64(&sec->sh_size);
     }
     // Honest hard work: use _Phdr
     unsigned x_rva;
     if (dt_type < DT_NUM) {
         unsigned const x_ndx = dt_table[dt_type];
+        if (!x_ndx) { // no such entry
+            return 0;
+        }
         x_rva = get_te64(&dynseg[-1+ x_ndx].d_val);
     }
     else {
         x_rva = elf_unsigned_dynamic(dt_type);
     }
     Elf64_Phdr const *const x_phdr = elf_find_Phdr_for_va(x_rva, phdri, e_phnum);
     unsigned const           d_off =             x_rva - get_te64(&x_phdr->p_vaddr);
     unsigned const           y_ndx = find_dt_ndx(d_off + get_te64(&x_phdr->p_offset));
     if (~0u != y_ndx) {
         return dt_offsets[1+ y_ndx] - dt_offsets[y_ndx];
     }
     return ~0u;
 }
