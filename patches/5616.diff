commit 86b5034359a45254e1f07eca84469db0d44005ad
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Mon Feb 5 18:26:12 2018 +0100

    Bug 698989: Throw upon unsupported bpc when unpacking image.
    
    Previously mupdf would silently ignore this situation and leave the
    buffer uninitialized leading to further issues. Thanks to oss-fuzz
    for reporting.

diff --git a/source/fitz/draw-unpack.c b/source/fitz/draw-unpack.c
index 2b6a241ea..7544c5aca 100644
--- a/source/fitz/draw-unpack.c
+++ b/source/fitz/draw-unpack.c
@@ -73,132 +73,134 @@ void
 fz_unpack_tile(fz_context *ctx, fz_pixmap *dst, unsigned char * restrict src, int n, int depth, size_t stride, int scale)
 {
 	int pad, x, y, k, skip;
 	int w = dst->w;
 
 	pad = 0;
 	skip = 0;
 	if (dst->n > n)
 		pad = 255;
 	if (dst->n < n)
 	{
 		skip = n - dst->n;
 		n = dst->n;
 	}
 
 	if (depth == 1)
 		init_get1_tables();
 
 	if (scale == 0)
 	{
 		switch (depth)
 		{
 		case 1: scale = 255; break;
 		case 2: scale = 85; break;
 		case 4: scale = 17; break;
 		}
 	}
 
 	for (y = 0; y < dst->h; y++)
 	{
 		unsigned char *sp = src + (y * stride);
 		unsigned char *dp = dst->samples + (y * dst->stride);
 
 		/* Specialized loops */
 
 		if (n == 1 && depth == 1 && scale == 1 && !pad && !skip)
 		{
 			int w3 = w >> 3;
 			for (x = 0; x < w3; x++)
 			{
 				memcpy(dp, get1_tab_1[*sp++], 8);
 				dp += 8;
 			}
 			x = x << 3;
 			if (x < w)
 				memcpy(dp, get1_tab_1[VGMASK(*sp, w - x)], w - x);
 		}
 
 		else if (n == 1 && depth == 1 && scale == 255 && !pad && !skip)
 		{
 			int w3 = w >> 3;
 			for (x = 0; x < w3; x++)
 			{
 				memcpy(dp, get1_tab_255[*sp++], 8);
 				dp += 8;
 			}
 			x = x << 3;
 			if (x < w)
 				memcpy(dp, get1_tab_255[VGMASK(*sp, w - x)], w - x);
 		}
 
 		else if (n == 1 && depth == 1 && scale == 1 && pad && !skip)
 		{
 			int w3 = w >> 3;
 			for (x = 0; x < w3; x++)
 			{
 				memcpy(dp, get1_tab_1p[*sp++], 16);
 				dp += 16;
 			}
 			x = x << 3;
 			if (x < w)
 				memcpy(dp, get1_tab_1p[VGMASK(*sp, w - x)], (w - x) << 1);
 		}
 
 		else if (n == 1 && depth == 1 && scale == 255 && pad && !skip)
 		{
 			int w3 = w >> 3;
 			for (x = 0; x < w3; x++)
 			{
 				memcpy(dp, get1_tab_255p[*sp++], 16);
 				dp += 16;
 			}
 			x = x << 3;
 			if (x < w)
 				memcpy(dp, get1_tab_255p[VGMASK(*sp, w - x)], (w - x) << 1);
 		}
 
 		else if (depth == 8 && !pad && !skip)
 		{
 			int len = w * n;
 			while (len--)
 				*dp++ = *sp++;
 		}
 
 		else if (depth == 8 && pad && !skip)
 		{
 			for (x = 0; x < w; x++)
 			{
 				for (k = 0; k < n; k++)
 					*dp++ = *sp++;
 				*dp++ = 255;
 			}
 		}
 
 		else
 		{
 			int b = 0;
 			for (x = 0; x < w; x++)
 			{
 				for (k = 0; k < n; k++)
 				{
 					switch (depth)
 					{
 					case 1: *dp++ = get1(sp, b) * scale; break;
 					case 2: *dp++ = get2(sp, b) * scale; break;
 					case 4: *dp++ = get4(sp, b) * scale; break;
 					case 8: *dp++ = get8(sp, b); break;
 					case 16: *dp++ = get16(sp, b); break;
 					case 24: *dp++ = get24(sp, b); break;
 					case 32: *dp++ = get32(sp, b); break;
+					default:
+						fz_throw(ctx, FZ_ERROR_GENERIC, "cannot unpack tile with %d bits per component", depth);
 					}
 					b++;
 				}
 				b += skip;
 				if (pad)
 					*dp++ = 255;
 			}
 		}
 	}
 }
 
 /* Apply decode array */
