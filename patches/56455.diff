commit 2d33a6b4dfdcd751eba242637c863d810a4a803c
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Tue Feb 28 15:31:45 2023 -0700

    [subset-fuzzer] Protect against overflow
    
    Fixes
    https://github.com/harfbuzz/harfbuzz/issues/4137#issuecomment-1448994447

diff --git a/test/fuzzing/hb-subset-fuzzer.cc b/test/fuzzing/hb-subset-fuzzer.cc
index 52dc343dd..caeafb115 100644
--- a/test/fuzzing/hb-subset-fuzzer.cc
+++ b/test/fuzzing/hb-subset-fuzzer.cc
@@ -46,74 +46,74 @@ trySubset (hb_face_t *face,
 extern "C" int LLVMFuzzerTestOneInput (const uint8_t *data, size_t size)
 {
   alloc_state = _fuzzing_alloc_state (data, size);
 
   hb_blob_t *blob = hb_blob_create ((const char *) data, size,
 				    HB_MEMORY_MODE_READONLY, nullptr, nullptr);
   hb_face_t *face = hb_face_create (blob, 0);
 
   /* Just test this API here quickly. */
   hb_set_t *output = hb_set_create ();
   hb_face_collect_unicodes (face, output);
   hb_set_destroy (output);
 
   unsigned flags = HB_SUBSET_FLAGS_DEFAULT;
   const hb_codepoint_t text[] =
       {
 	'A', 'B', 'C', 'D', 'E', 'X', 'Y', 'Z', '1', '2',
 	'3', '@', '_', '%', '&', ')', '*', '$', '!'
       };
 
   hb_subset_input_t *input = hb_subset_input_create_or_fail ();
   trySubset (face, text, sizeof (text) / sizeof (hb_codepoint_t), flags, input);
 
   unsigned num_axes;
   hb_codepoint_t text_from_data[16];
   if (size > sizeof (text_from_data) + sizeof (flags) + sizeof(num_axes)) {
     hb_subset_input_t *input = hb_subset_input_create_or_fail ();
     size -= sizeof (text_from_data);
     memcpy (text_from_data,
 	    data + size,
 	    sizeof (text_from_data));
 
     size -= sizeof (flags);
     memcpy (&flags,
 	    data + size,
 	    sizeof (flags));
 
     size -= sizeof (num_axes);
     memcpy (&num_axes,
 	    data + size,
 	    sizeof (num_axes));
 
-    if (num_axes > 0 && size > num_axes * (sizeof(hb_tag_t) + sizeof(float)))
+    if (num_axes > 0 && num_axes < 8 && size > num_axes * (sizeof(hb_tag_t) + sizeof(int)))
     {
       for (unsigned i = 0; i < num_axes; i++) {
         hb_tag_t tag;
         int value;
         size -= sizeof (tag);
         memcpy (&tag,
                 data + size,
                 sizeof (tag));
         size -= sizeof (value);
         memcpy (&value,
                 data + size,
                 sizeof (value));
 
         hb_subset_input_pin_axis_location(input,
                                           face,
                                           tag,
                                           (float) value);
       }
     }
 
 
 
     unsigned int text_size = sizeof (text_from_data) / sizeof (hb_codepoint_t);
     trySubset (face, text_from_data, text_size, flags, input);
   }
 
   hb_face_destroy (face);
   hb_blob_destroy (blob);
 
   return 0;
 }
