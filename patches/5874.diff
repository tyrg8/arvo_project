commit 1318d7942ed6256665b5d83b62ce51ec8893f5c7
Author: Jonathan Hui <jonhui@nestlabs.com>
Date:   Fri Feb 2 17:03:36 2018 +0000

    [network-data] add length validation to Service TLV (#2527)
    
    Credit to OSS-Fuzz.

diff --git a/src/core/thread/network_data_leader_ftd.cpp b/src/core/thread/network_data_leader_ftd.cpp
index 5ba4297e7..b6422dfe1 100644
--- a/src/core/thread/network_data_leader_ftd.cpp
+++ b/src/core/thread/network_data_leader_ftd.cpp
@@ -433,148 +433,149 @@ exit:
 otError Leader::RlocLookup(uint16_t aRloc16, bool &aIn, bool &aStable, uint8_t *aTlvs, uint8_t aTlvsLength)
 {
     otError error = OT_ERROR_NONE;
     NetworkDataTlv *cur = reinterpret_cast<NetworkDataTlv *>(aTlvs);
     NetworkDataTlv *end = reinterpret_cast<NetworkDataTlv *>(aTlvs + aTlvsLength);
     NetworkDataTlv *subCur;
     NetworkDataTlv *subEnd;
     PrefixTlv *prefix;
     BorderRouterTlv *borderRouter;
     HasRouteTlv *hasRoute;
     BorderRouterEntry *borderRouterEntry;
     HasRouteEntry *hasRouteEntry;
 #if OPENTHREAD_ENABLE_SERVICE
     ServiceTlv *service;
     ServerTlv *server;
 #endif
 
     while (cur < end)
     {
         VerifyOrExit((cur + 1) <= end && cur->GetNext() <= end, error = OT_ERROR_PARSE);
 
         switch (cur->GetType())
         {
         case NetworkDataTlv::kTypePrefix:
         {
             prefix = static_cast<PrefixTlv *>(cur);
             VerifyOrExit(prefix->IsValid(), error = OT_ERROR_PARSE);
 
             subCur = prefix->GetSubTlvs();
             subEnd = prefix->GetNext();
 
             VerifyOrExit(subEnd <= end, error = OT_ERROR_PARSE);
 
             while (subCur < subEnd)
             {
                 VerifyOrExit((subCur + 1) <= subEnd && subCur->GetNext() <= subEnd, error = OT_ERROR_PARSE);
 
                 switch (subCur->GetType())
                 {
                 case NetworkDataTlv::kTypeBorderRouter:
                     borderRouter = static_cast<BorderRouterTlv *>(subCur);
 
                     for (uint8_t i = 0; i < borderRouter->GetNumEntries(); i++)
                     {
                         borderRouterEntry = borderRouter->GetEntry(i);
 
                         if (borderRouterEntry->GetRloc() == aRloc16)
                         {
                             aIn = true;
 
                             if (borderRouter->IsStable())
                             {
                                 aStable = true;
                             }
                         }
                     }
 
                     break;
 
                 case NetworkDataTlv::kTypeHasRoute:
                     hasRoute = static_cast<HasRouteTlv *>(subCur);
 
                     for (uint8_t i = 0; i < hasRoute->GetNumEntries(); i++)
                     {
                         hasRouteEntry = hasRoute->GetEntry(i);
 
                         if (hasRouteEntry->GetRloc() == aRloc16)
                         {
                             aIn = true;
 
                             if (hasRoute->IsStable())
                             {
                                 aStable = true;
                             }
                         }
                     }
 
                     break;
 
                 default:
                     break;
                 }
 
                 if (aIn && aStable)
                 {
                     ExitNow();
                 }
 
                 subCur = subCur->GetNext();
             }
         }
         break;
 
 #if OPENTHREAD_ENABLE_SERVICE
 
         case NetworkDataTlv::kTypeService:
         {
             service = static_cast<ServiceTlv *>(cur);
+            VerifyOrExit(service->IsValid(), error = OT_ERROR_PARSE);
 
             subCur = service->GetSubTlvs();
             subEnd = service->GetNext();
 
             VerifyOrExit(subEnd <= end, error = OT_ERROR_PARSE);
 
             while (subCur < subEnd)
             {
                 VerifyOrExit((subCur + 1) <= subEnd && subCur->GetNext() <= subEnd, error = OT_ERROR_PARSE);
 
                 switch (subCur->GetType())
                 {
                 case NetworkDataTlv::kTypeServer:
                     server = static_cast<ServerTlv *>(subCur);
 
                     if (server->GetServer16() == aRloc16)
                     {
                         aIn = true;
 
                         if (server->IsStable())
                         {
                             aStable = true;
                         }
                     }
 
                     break;
 
                 default:
                     break;
                 }
 
                 if (aIn && aStable)
                 {
                     ExitNow();
                 }
 
                 subCur = subCur->GetNext();
             }
 
             break;
         }
 
 #endif
 
         default:
             break;
         }
 
         cur = cur->GetNext();
     }
diff --git a/src/core/thread/network_data_tlvs.hpp b/src/core/thread/network_data_tlvs.hpp
index 50efb65b5..94ad90eb3 100644
--- a/src/core/thread/network_data_tlvs.hpp
+++ b/src/core/thread/network_data_tlvs.hpp
@@ -273,85 +273,85 @@ class PrefixTlv: public NetworkDataTlv
 {
 public:
     /**
      * This method initializes the TLV.
      *
      * @param[in]  aDomainId      The Domain ID.
      * @param[in]  aPrefixLength  The Prefix Length
      * @param[in]  aPrefix        A pointer to the prefix.
      *
      */
     void Init(uint8_t aDomainId, uint8_t aPrefixLength, const uint8_t *aPrefix) {
         NetworkDataTlv::Init();
         SetType(kTypePrefix);
         mDomainId = aDomainId;
         mPrefixLength = aPrefixLength;
         memcpy(GetPrefix(), aPrefix, BitVectorBytes(aPrefixLength));
         SetSubTlvsLength(0);
     }
 
     /**
      * This method indicates whether or not the TLV appears to be well-formed.
      *
      * @retval TRUE   If the TLV appears to be well-formed.
      * @retval FALSE  If the TLV does not appear to be well-formed.
      *
      */
     bool IsValid(void) const {
-        return ((GetLength() >= sizeof(*this) - sizeof(Tlv)) &&
-                (GetLength() >= BitVectorBytes(mPrefixLength) + sizeof(*this) - sizeof(Tlv)));
+        return ((GetLength() >= sizeof(*this) - sizeof(NetworkDataTlv)) &&
+                (GetLength() >= BitVectorBytes(mPrefixLength) + sizeof(*this) - sizeof(NetworkDataTlv)));
     }
 
     /**
      * This method returns the Domain ID value.
      *
      * @returns The Domain ID value.
      *
      */
     uint8_t GetDomainId(void) const { return mDomainId; }
 
     /**
      * This method returns the Prefix Length value.
      *
      * @returns The Prefix Length value.
      *
      */
     uint8_t GetPrefixLength(void) const { return mPrefixLength; }
 
     /**
      * This method returns a pointer to the Prefix.
      *
      * @returns A pointer to the Prefix.
      *
      */
     uint8_t *GetPrefix(void) { return reinterpret_cast<uint8_t *>(this) + sizeof(*this); }
 
     /**
      * This method returns a pointer to the Sub-TLVs.
      *
      * @returns A pointer to the Sub-TLVs.
      *
      */
     NetworkDataTlv *GetSubTlvs(void) {
         return reinterpret_cast<NetworkDataTlv *>(GetPrefix() +
                                                   BitVectorBytes(mPrefixLength));
     }
 
     /**
      * This method returns the Sub-TLVs length in bytes.
      *
      * @returns The Sub-TLVs length in bytes.
      *
      */
     uint8_t GetSubTlvsLength(void) const {
         return GetLength() - (sizeof(*this) - sizeof(NetworkDataTlv) + BitVectorBytes(mPrefixLength));
     }
 
     /**
      * This method sets the Sub-TLVs length in bytes.
      *
      * @param[in]  aLength  The Sub-TLVs length in bytes.
      *
      */
     void SetSubTlvsLength(uint8_t aLength) {
         SetLength(sizeof(*this) - sizeof(NetworkDataTlv) + BitVectorBytes(mPrefixLength) + aLength);
     }
@@ -707,155 +707,172 @@ class ServiceTlv: public NetworkDataTlv
 {
 public:
     /**
      * This method initializes the TLV.
      * Initial length is set to 2, to hold S_service_data_length field.
      */
     void Init(void) { NetworkDataTlv::Init(); SetType(kTypeService); SetLength(2); mTResSId = kTMask; SetServiceDataLength(0); }
 
+    /**
+     * This method indicates whether or not the TLV appears to be well-formed.
+     *
+     * @retval TRUE   If the TLV appears to be well-formed.
+     * @retval FALSE  If the TLV does not appear to be well-formed.
+     *
+     */
+    bool IsValid(void) {
+        uint8_t length = GetLength();
+        return ((length >= (sizeof(*this) - sizeof(NetworkDataTlv))) &&
+                (length >= ((sizeof(*this) - sizeof(NetworkDataTlv)) +
+                            (IsThreadEnterprise() ? 0 : sizeof(uint32_t)) + sizeof(uint8_t))) &&
+                (length >= ((sizeof(*this) - sizeof(NetworkDataTlv)) +
+                            (IsThreadEnterprise() ? 0 : sizeof(uint32_t)) + sizeof(uint8_t) +
+                            GetServiceDataLength())));
+    }
+
     /**
      * This method gets Service Data length.
      *
      * @returns length of the Service Data field in bytes.
      */
     uint8_t GetServiceDataLength(void) {
         return *GetServiceDataLengthLocation();
     }
 
     /**
      * This method sets Service Data length.
      *
      * @param aServiceDataLength desired length of the Service Data field in bytes.
      */
     void SetServiceDataLength(uint8_t aServiceDataLength) {
         *GetServiceDataLengthLocation() = aServiceDataLength;
     }
 
     /**
      * This method returns a pointer to the Service Data.
      *
      * @returns A pointer to the Service Data.
      */
     uint8_t *GetServiceData(void) { return GetServiceDataLengthLocation() + sizeof(uint8_t); }
 
     /**
      * This method sets Service Data to the given values.
      *
      * Caller must ensure that there is enough memory allocated.
      *
      * @param aServiceData       pointer to the service data to use
      * @param aServiceDataLength length of the provided service data in bytes
      */
     void SetServiceData(const uint8_t *aServiceData, uint8_t aServiceDataLength) {
         SetServiceDataLength(aServiceDataLength);
 
         memcpy(GetServiceData(), aServiceData, aServiceDataLength);
     }
 
     /**
      * This method returns Enterprise Number field.
      *
      * @returns Enterprise Number
      */
     uint32_t GetEnterpriseNumber(void) {
         if (IsThreadEnterprise()) {
             return THREAD_ENTERPRISE_NUMBER;
         }
         else {
             // This memory access most likely will not be aligned to 4 bytes
             return HostSwap32(*reinterpret_cast<uint32_t *>(GetEnterpriseNumberLocation()));
         }
     }
 
     /**
      * This method returns the T flag. It is set when Enterprise Number is equal to THREAD_ENTERPRISE_NUMBER.
      *
      * @returns Flag whether Enterprise Number is equal to THREAD_ENTERPRISE_NUMBER
      */
     bool IsThreadEnterprise(void) const {
         return (mTResSId & kTMask) != 0;
     }
 
     /**
      * This method sets Enterprise Number and updates the T flag.
      *
      * Note: this method does not preserve service data / sub-TLV fields. Changing the T flag and inserting
      * few bytes in the middle of this TLV effectively destroys rest of the content of this TLV (and might lead to
      * memory corruption) so modification of Enterprise Number must be done before adding any content to the TLV.
      *
      * @param [in] aEnterpriseNumber Enterprise Number
      */
     void SetEnterpriseNumber(uint32_t aEnterpriseNumber) {
         if (aEnterpriseNumber == THREAD_ENTERPRISE_NUMBER) {
             mTResSId |= kTMask;
         }
         else {
             mTResSId &= ~kTMask;
 
             // This memory access most likely will not be aligned to 4 bytes
             *reinterpret_cast<uint32_t *>(GetEnterpriseNumberLocation()) = HostSwap32(aEnterpriseNumber);
         }
     }
 
     /**
      * This method returns length of the S_enterprise_number TLV field in bytes, for given Enterprise Number.
      *
      * @returns length of the S_enterprise_number field in bytes
      */
     static uint8_t GetEnterpriseNumberFieldLength(uint32_t aEnterpriseNumber) {
         if (aEnterpriseNumber == THREAD_ENTERPRISE_NUMBER) {
             return 0;
         }
         else {
             return (sizeof(aEnterpriseNumber));
         }
     }
 
     /**
      * This method returns Service ID. It is in range 0x00-0x0f.
      *
      * @returns Service ID
      */
     uint8_t GetServiceID(void) const {
         return (mTResSId & kSIdMask) >> kSIdOffset;
     }
 
     /**
      * This method sets Service ID.
      *
      * @param [in] aServiceID Service ID to be set. Expected range: 0x00-0x0f.
      */
     void SetServiceID(uint8_t aServiceID) {
         mTResSId = static_cast<uint8_t>((mTResSId & ~kSIdMask) | (aServiceID << kSIdOffset));
     }
 
     /**
      * This method returns the Sub-TLVs length in bytes.
      *
      * @returns The Sub-TLVs length in bytes.
      *
      */
     uint8_t GetSubTlvsLength(void) {
         return GetLength() - (sizeof(*this) - sizeof(NetworkDataTlv)) - (IsThreadEnterprise() ? 0 : sizeof(uint32_t))
                - sizeof(uint8_t)/* mServiceDataLength */ - GetServiceDataLength();
     }
 
     /**
      * This method sets the Sub-TLVs length in bytes.
      *
      * @param[in]  aLength  The Sub-TLVs length in bytes.
      *
      */
     void SetSubTlvsLength(uint8_t aLength) {
         SetLength(sizeof(*this) - sizeof(NetworkDataTlv) + (IsThreadEnterprise() ? 0 : sizeof(uint32_t))
                   + sizeof(uint8_t)/* mServiceDataLength */ + GetServiceDataLength() + aLength);
     }
 
     /**
      * This method returns a pointer to the Sub-TLVs.
      *
      * @returns A pointer to the Sub-TLVs.
      *
      */
     NetworkDataTlv *GetSubTlvs(void) {
         return reinterpret_cast<NetworkDataTlv *>(GetServiceDataLengthLocation() + sizeof(uint8_t) + GetServiceDataLength());
     }
