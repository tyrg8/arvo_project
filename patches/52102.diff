commit 122126fdb6c534a44dc189428972081551876695
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Tue Oct 4 14:59:00 2022 +0200

    msLoadMap(): fix double-free related to labels
    
    Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=52102

diff --git a/mapfile.c b/mapfile.c
index 69e2c42a5..bad543363 100755
--- a/mapfile.c
+++ b/mapfile.c
@@ -1571,274 +1571,273 @@ static int loadLeader(labelLeaderObj *leader)
 static int loadLabel(labelObj *label)
 {
   int symbol;
 
   for(;;) {
     switch(msyylex()) {
       case(ANGLE):
         if((symbol = getSymbol(5, MS_NUMBER,MS_AUTO,MS_AUTO2,MS_FOLLOW,MS_BINDING)) == -1)
           return(-1);
 
         if(symbol == MS_NUMBER) {
           if(msCheckNumber(msyynumber, MS_NUM_CHECK_RANGE, -360.0, 360.0) == MS_FAILURE) {
             msSetError(MS_MISCERR, "Invalid ANGLE, must be between -360 and 360 (line %d)", "loadLabel()", msyylineno);
             return(MS_FAILURE);
           }
           label->angle = (double) msyynumber;
         } else if(symbol == MS_BINDING) {
           if (label->bindings[MS_LABEL_BINDING_ANGLE].item != NULL)
             msFree(label->bindings[MS_LABEL_BINDING_ANGLE].item);
           label->bindings[MS_LABEL_BINDING_ANGLE].item = msStrdup(msyystring_buffer);
           label->numbindings++;
         } else {
           label->anglemode = symbol;
         }
         break;
       case(ALIGN):
         if((symbol = getSymbol(4, MS_ALIGN_LEFT,MS_ALIGN_CENTER,MS_ALIGN_RIGHT,MS_BINDING)) == -1)
           return(-1);
         if((symbol == MS_ALIGN_LEFT)||(symbol == MS_ALIGN_CENTER)||(symbol == MS_ALIGN_RIGHT)) {
           label->align = symbol;
         } else {
           if (label->bindings[MS_LABEL_BINDING_ALIGN].item != NULL)
             msFree(label->bindings[MS_LABEL_BINDING_ALIGN].item);
           label->bindings[MS_LABEL_BINDING_ALIGN].item = msStrdup(msyystring_buffer);
           label->numbindings++;
         }
         break;
       case(ANTIALIAS): /*ignore*/
         msyylex();
         break;
       case(BUFFER):
         if(getInteger(&(label->buffer), MS_NUM_CHECK_NONE, -1, -1) == -1) return(-1);
         break;
       case(COLOR):
         if(loadColor(&(label->color), &(label->bindings[MS_LABEL_BINDING_COLOR])) != MS_SUCCESS) return(-1);
         if(label->bindings[MS_LABEL_BINDING_COLOR].item) label->numbindings++;
         break;
       case(ENCODING):
         if((getString(&label->encoding)) == MS_FAILURE) return(-1);
         break;
       case(END):
         return(0);
         break;
       case(EOF):
         msSetError(MS_EOFERR, NULL, "loadLabel()");
-        freeLabel(label);       /* free any structures allocated before EOF */
         return(-1);
       case(EXPRESSION):
         if(loadExpression(&(label->expression)) == -1) return(-1); /* loadExpression() cleans up previously allocated expression */
         break;
       case(FONT):
         if((symbol = getSymbol(2, MS_STRING, MS_BINDING)) == -1)
           return(-1);
 
         if(symbol == MS_STRING) {
           if (label->font != NULL)
             msFree(label->font);
           label->font = msStrdup(msyystring_buffer);
         } else {
           if (label->bindings[MS_LABEL_BINDING_FONT].item != NULL)
             msFree(label->bindings[MS_LABEL_BINDING_FONT].item);
           label->bindings[MS_LABEL_BINDING_FONT].item = msStrdup(msyystring_buffer);
           label->numbindings++;
         }
         break;
       case(FORCE):
         switch(msyylex()) {
           case MS_ON:
             label->force = MS_ON;
             break;
           case MS_OFF:
             label->force = MS_OFF;
             break;
           case GROUP:
             label->force = MS_LABEL_FORCE_GROUP;
             break;
           default:
             msSetError(MS_MISCERR, "Invalid FORCE, must be ON,OFF,or GROUP (line %d)" , "loadLabel()", msyylineno);
             return(-1);
         }
         break;
       case(LABEL):
         break; /* for string loads */
       case(LEADER):
         msSetError(MS_MISCERR, "LABEL LEADER not implemented. LEADER goes at the CLASS level (line %d)" , "loadLabel()", msyylineno);
         return(-1);
       case(MAXSIZE):
         if(getInteger(&(label->maxsize), MS_NUM_CHECK_GT, 0, -1) == -1) return(-1);
         break;
       case(MAXSCALEDENOM):
         if(getDouble(&(label->maxscaledenom), MS_NUM_CHECK_GTE, 0, -1) == -1) return(-1);
         break;
       case(MAXLENGTH):
         if(getInteger(&(label->maxlength), MS_NUM_CHECK_GT, 0, -1) == -1) return(-1);
         break;
       case(MINDISTANCE):
         if(getInteger(&(label->mindistance), MS_NUM_CHECK_GT, 0, -1) == -1) return(-1);
         break;
       case(REPEATDISTANCE):
         if(getInteger(&(label->repeatdistance), MS_NUM_CHECK_GT, 0, -1) == -1) return(-1);
         break;
       case(MAXOVERLAPANGLE):
         if(getDouble(&(label->maxoverlapangle), MS_NUM_CHECK_RANGE, 0, 360) == -1) return(-1);
         break;
       case(MINFEATURESIZE):
         if((symbol = getSymbol(2, MS_NUMBER,MS_AUTO)) == -1) return(-1);
         if(symbol == MS_NUMBER) {
 	  if(msCheckNumber(msyynumber, MS_NUM_CHECK_GT, 0, -1) == MS_FAILURE) {
             msSetError(MS_MISCERR, "Invalid MINFEATURESIZE, must be greater than 0 (line %d)", "loadLabel()", msyylineno);
             return(MS_FAILURE);
           }
           label->minfeaturesize = (int)msyynumber;
         } else
           label->autominfeaturesize = MS_TRUE;
         break;
       case(MINSCALEDENOM):
         if(getDouble(&(label->minscaledenom), MS_NUM_CHECK_GTE, 0, -1) == -1) return(-1);
         break;
       case(MINSIZE):
         if(getInteger(&(label->minsize), MS_NUM_CHECK_GT, 0, -1) == -1) return(-1);
         break;
       case(OFFSET):
         if((symbol = getSymbol(2, MS_NUMBER,MS_BINDING)) == -1) return(MS_FAILURE);
         if(symbol == MS_NUMBER)
           label->offsetx = (int) msyynumber; // any integer ok
         else {
           if (label->bindings[MS_LABEL_BINDING_OFFSET_X].item != NULL)
             msFree(label->bindings[MS_LABEL_BINDING_OFFSET_X].item);
           label->bindings[MS_LABEL_BINDING_OFFSET_X].item = msStrdup(msyystring_buffer);
           label->numbindings++;
         }
 
         if((symbol = getSymbol(2, MS_NUMBER,MS_BINDING)) == -1) return(MS_FAILURE);
         if(symbol == MS_NUMBER)
           label->offsety = (int) msyynumber; // any integer ok
         else {
           if (label->bindings[MS_LABEL_BINDING_OFFSET_Y].item != NULL)
             msFree(label->bindings[MS_LABEL_BINDING_OFFSET_Y].item);
           label->bindings[MS_LABEL_BINDING_OFFSET_Y].item = msStrdup(msyystring_buffer);
           label->numbindings++;
         }
         break;
       case(OUTLINECOLOR):
         if(loadColor(&(label->outlinecolor), &(label->bindings[MS_LABEL_BINDING_OUTLINECOLOR])) != MS_SUCCESS) return(-1);
         if(label->bindings[MS_LABEL_BINDING_OUTLINECOLOR].item) label->numbindings++;
         break;
       case(OUTLINEWIDTH):
         if(getInteger(&(label->outlinewidth), MS_NUM_CHECK_GT, 0, -1) == -1) return(-1);
         break;
       case(PARTIALS):
         if((label->partials = getSymbol(2, MS_TRUE,MS_FALSE)) == -1) return(-1);
         break;
       case(POSITION):
         if((label->position = getSymbol(11, MS_UL,MS_UC,MS_UR,MS_CL,MS_CC,MS_CR,MS_LL,MS_LC,MS_LR,MS_AUTO,MS_BINDING)) == -1)
           return(-1);
         if(label->position == MS_BINDING) {
           if(label->bindings[MS_LABEL_BINDING_POSITION].item != NULL)
             msFree(label->bindings[MS_LABEL_BINDING_POSITION].item);
           label->bindings[MS_LABEL_BINDING_POSITION].item = msStrdup(msyystring_buffer);
           label->numbindings++;
         }
         break;
       case(PRIORITY):
         if((symbol = getSymbol(2, MS_NUMBER,MS_BINDING)) == -1) return(-1);
         if(symbol == MS_NUMBER) {
           if(msCheckNumber(msyynumber, MS_NUM_CHECK_RANGE, 1, MS_MAX_LABEL_PRIORITY) == MS_FAILURE) {
             msSetError(MS_MISCERR, "Invalid PRIORITY, must be an integer between 1 and %d (line %d)" , "loadLabel()", MS_MAX_LABEL_PRIORITY, msyylineno);
             return(-1);
           }
           label->priority = (int) msyynumber;
         } else {
           if (label->bindings[MS_LABEL_BINDING_PRIORITY].item != NULL)
             msFree(label->bindings[MS_LABEL_BINDING_PRIORITY].item);
           label->bindings[MS_LABEL_BINDING_PRIORITY].item = msStrdup(msyystring_buffer);
           label->numbindings++;
         }
         break;
       case(SHADOWCOLOR):
         if(loadColor(&(label->shadowcolor), NULL) != MS_SUCCESS) return(-1);
         break;
       case(SHADOWSIZE):
         if((symbol = getSymbol(2, MS_NUMBER,MS_BINDING)) == -1) return(-1);
         if(symbol == MS_NUMBER) {
           label->shadowsizex = (int) msyynumber; // x offset, any int ok
         } else {
           if (label->bindings[MS_LABEL_BINDING_SHADOWSIZEX].item != NULL)
             msFree(label->bindings[MS_LABEL_BINDING_SHADOWSIZEX].item);
           label->bindings[MS_LABEL_BINDING_SHADOWSIZEX].item = msStrdup(msyystring_buffer);
           label->numbindings++;
         }
 
         if((symbol = getSymbol(2, MS_NUMBER,MS_BINDING)) == -1) return(-1);
         if(symbol == MS_NUMBER) {
           label->shadowsizey = (int) msyynumber; // y offset, any int ok
         } else {
           if (label->bindings[MS_LABEL_BINDING_SHADOWSIZEY].item != NULL)
             msFree(label->bindings[MS_LABEL_BINDING_SHADOWSIZEY].item);
           label->bindings[MS_LABEL_BINDING_SHADOWSIZEY].item = msStrdup(msyystring_buffer);
           label->numbindings++;
         }
         break;
       case(SIZE):
         if(label->bindings[MS_LABEL_BINDING_SIZE].item) {
           msFree(label->bindings[MS_LABEL_BINDING_SIZE].item);
           label->bindings[MS_LABEL_BINDING_SIZE].item = NULL;
           label->numbindings--;
         }
         if (label->exprBindings[MS_LABEL_BINDING_SIZE].string) {
           msFreeExpression(&label->exprBindings[MS_LABEL_BINDING_SIZE]);
           label->nexprbindings--;
         }
 
         if((symbol = getSymbol(8, MS_EXPRESSION,MS_NUMBER,MS_BINDING,MS_TINY,MS_SMALL,MS_MEDIUM,MS_LARGE,MS_GIANT)) == -1)
           return(-1);
 
         if(symbol == MS_NUMBER) {
           if(msCheckNumber(msyynumber, MS_NUM_CHECK_GT, 0, -1) == MS_FAILURE) {
             msSetError(MS_MISCERR, "Invalid SIZE, must be greater than 0 (line %d)" , "loadLabel()", msyylineno);
             return(-1);
           }
           label->size = (double) msyynumber;
         } else if(symbol == MS_BINDING) {
           label->bindings[MS_LABEL_BINDING_SIZE].item = msStrdup(msyystring_buffer);
           label->numbindings++;
         } else if (symbol == MS_EXPRESSION) {
           msFree(label->exprBindings[MS_LABEL_BINDING_SIZE].string);
           label->exprBindings[MS_LABEL_BINDING_SIZE].string = msStrdup(msyystring_buffer);
           label->exprBindings[MS_LABEL_BINDING_SIZE].type = MS_EXPRESSION;
           label->nexprbindings++;
         } else
           label->size = symbol;
         break;
       case(STYLE):
         if(msGrowLabelStyles(label) == NULL)
           return(-1);
         initStyle(label->styles[label->numstyles]);
         if(loadStyle(label->styles[label->numstyles]) != MS_SUCCESS) return(-1);
         if(label->styles[label->numstyles]->_geomtransform.type == MS_GEOMTRANSFORM_NONE)
           label->styles[label->numstyles]->_geomtransform.type = MS_GEOMTRANSFORM_LABELPOINT; /* set a default, a marker? */
         label->numstyles++;
         break;
       case(TEXT):
         if(loadExpression(&(label->text)) == -1) return(-1); /* loadExpression() cleans up previously allocated expression */
         if((label->text.type != MS_STRING) && (label->text.type != MS_EXPRESSION)) {
           msSetError(MS_MISCERR, "Text expressions support constant or tagged replacement strings." , "loadLabel()");
           return(-1);
         }
         break;
       case(TYPE):
         if(getSymbol(2, MS_TRUETYPE,MS_BITMAP) == -1) return(-1); /* ignore TYPE */
         break;
       case(WRAP):
         if(getCharacter(&(label->wrap)) == -1) return(-1);
         break;
       default:
         if(strlen(msyystring_buffer) > 0) {
           msSetError(MS_IDENTERR, "Parsing error near (%s):(line %d)", "loadLabel()", msyystring_buffer, msyylineno);
           return(-1);
         } else {
           return(0); /* end of a string, not an error */
         }
     }
   } /* next token */
 }
@@ -3194,105 +3193,107 @@ labelObj *msGrowClassLabels( classObj *class )
 int loadClass(classObj *class, layerObj *layer)
 {
   if(!class || !layer) return(-1);
 
   class->layer = (layerObj *) layer;
 
   for(;;) {
     switch(msyylex()) {
       case(CLASS):
         break; /* for string loads */
       case(DEBUG):
         if((class->debug = getSymbol(3, MS_ON,MS_OFF, MS_NUMBER)) == -1) return(-1);
         if(class->debug == MS_NUMBER) {
 	  if(msCheckNumber(msyynumber, MS_NUM_CHECK_RANGE, 0, 5) == MS_FAILURE) {
             msSetError(MS_MISCERR, "Invalid DEBUG level, must be between 0 and 5 (line %d)", "loadClass()", msyylineno);
             return(-1);
           }
           class->debug = (int) msyynumber;
         }
         break;
       case(EOF):
         msSetError(MS_EOFERR, NULL, "loadClass()");
         return(-1);
       case(END):
         return(0);
         break;
       case(EXPRESSION):
         if(loadExpression(&(class->expression)) == -1) return(-1); /* loadExpression() cleans up previously allocated expression */
         break;
       case(GROUP):
         if(getString(&class->group) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(KEYIMAGE):
         if(getString(&class->keyimage) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(LABEL):
         if(msGrowClassLabels(class) == NULL) return(-1);
         initLabel(class->labels[class->numlabels]);
         class->labels[class->numlabels]->size = MS_MEDIUM; /* only set a default if the LABEL section is present */
         if(loadLabel(class->labels[class->numlabels]) == -1) {
-          msFree(class->labels[class->numlabels]);
+          freeLabel(class->labels[class->numlabels]);
+          free(class->labels[class->numlabels]);
+          class->labels[class->numlabels] = NULL;
           return(-1);
         }
         class->numlabels++;
         break;
       case(LEADER):
         if(!class->leader) {
           class->leader = msSmallMalloc(sizeof(labelLeaderObj));
           initLeader(class->leader);
         }
         if(loadLeader(class->leader) == -1) return(-1);
         break;
       case(MAXSCALE):
       case(MAXSCALEDENOM):
         if(getDouble(&(class->maxscaledenom), MS_NUM_CHECK_GTE, 0, -1) == -1) return(-1);
         break;
       case(METADATA):
         if(loadHashTable(&(class->metadata)) != MS_SUCCESS) return(-1);
         break;
       case(MINSCALE):
       case(MINSCALEDENOM):
         if(getDouble(&(class->minscaledenom), MS_NUM_CHECK_GTE, 0, -1) == -1) return(-1);
         break;
       case(MINFEATURESIZE):
         if(getInteger(&(class->minfeaturesize), MS_NUM_CHECK_GT, 0, -1) == -1) return(-1);
         break;
       case(NAME):
         if(getString(&class->name) == MS_FAILURE) return(-1);
         break;
       case(STATUS):
         if((class->status = getSymbol(2, MS_ON,MS_OFF)) == -1) return(-1);
         break;
       case(STYLE):
         if(msGrowClassStyles(class) == NULL)
           return(-1);
         initStyle(class->styles[class->numstyles]);
         if(loadStyle(class->styles[class->numstyles]) != MS_SUCCESS) return(-1);
         class->numstyles++;
         break;
       case(TEMPLATE):
         if(getString(&class->template) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(TEXT):
         if(loadExpression(&(class->text)) == -1) return(-1); /* loadExpression() cleans up previously allocated expression */
         if((class->text.type != MS_STRING) && (class->text.type != MS_EXPRESSION)) {
           msSetError(MS_MISCERR, "Text expressions support constant or tagged replacement strings." , "loadClass()");
           return(-1);
         }
         break;
       case(TITLE):
         if(getString(&class->title) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(VALIDATION):
         if(loadHashTable(&(class->validation)) != MS_SUCCESS) return(-1);
         break;
       default:
         if(strlen(msyystring_buffer) > 0) {
           msSetError(MS_IDENTERR, "Parsing error near (%s):(line %d)", "loadClass()", msyystring_buffer, msyylineno);
           return(-1);
         } else {
           return(0); /* end of a string, not an error */
         }
     }
   }
 }
