commit fba5a9e8a7731f0eb187cfd1841037235d5eddd1
Author: Tristan Penman <tristan@tristanpenman.com>
Date:   Sun Jan 17 13:34:52 2021 +1100

    Reject JSON references that index into empty arrays

diff --git a/include/valijson/internal/json_pointer.hpp b/include/valijson/internal/json_pointer.hpp
index 122fdef..e1c4903 100644
--- a/include/valijson/internal/json_pointer.hpp
+++ b/include/valijson/internal/json_pointer.hpp
@@ -148,106 +148,108 @@ template<typename AdapterType>
 inline AdapterType resolveJsonPointer(
         const AdapterType &node,
         const std::string &jsonPointer,
         const std::string::const_iterator jsonPointerItr)
 {
     // TODO: This function will probably need to implement support for
     // fetching documents referenced by JSON Pointers, similar to the
     // populateSchema function.
 
     const std::string::const_iterator jsonPointerEnd = jsonPointer.end();
 
     // Terminate recursion if all reference tokens have been consumed
     if (jsonPointerItr == jsonPointerEnd) {
         return node;
     }
 
     // Reference tokens must begin with a leading slash
     if (*jsonPointerItr != '/') {
         throwRuntimeError("Expected reference token to begin with "
                 "leading slash; remaining tokens: " +
                 std::string(jsonPointerItr, jsonPointerEnd));
     }
 
     // Find iterator that points to next slash or newline character; this is
     // one character past the end of the current reference token
     std::string::const_iterator jsonPointerNext =
             std::find(jsonPointerItr + 1, jsonPointerEnd, '/');
 
     // Extract the next reference token
     const std::string referenceToken = extractReferenceToken(
             jsonPointerItr + 1, jsonPointerNext);
 
     // Empty reference tokens should be ignored
     if (referenceToken.empty()) {
         return resolveJsonPointer(node, jsonPointer, jsonPointerNext);
 
     } else if (node.isArray()) {
         if (referenceToken == "-") {
             throwRuntimeError("Hyphens cannot be used as array indices "
                     "since the requested array element does not yet exist");
         }
 
 #if VALIJSON_USE_EXCEPTIONS
         try {
 #endif
             // Fragment must be non-negative integer
             const uint64_t index = std::stoul(referenceToken);
             typedef typename AdapterType::Array Array;
-            typename Array::const_iterator itr = node.asArray().begin();
+            const Array arr = node.asArray();
+            typename Array::const_iterator itr = arr.begin();
+            const uint64_t arrSize = arr.size();
 
-            if (index > node.asArray().size() - 1) {
+            if (arrSize == 0 || index > arrSize - 1) {
                 throwRuntimeError("Expected reference token to identify "
                         "an element in the current array, but array index is "
                         "out of bounds; actual token: " + referenceToken);
             }
 
             if (index > static_cast<uint64_t>(std::numeric_limits<std::ptrdiff_t>::max())) {
                 throwRuntimeError("Array index out of bounds; hard "
                         "limit is " + std::to_string(
                                 std::numeric_limits<std::ptrdiff_t>::max()));
             }
 
             itr.advance(static_cast<std::ptrdiff_t>(index));
 
             // Recursively process the remaining tokens
             return resolveJsonPointer(*itr, jsonPointer, jsonPointerNext);
 
 #if VALIJSON_USE_EXCEPTIONS
         } catch (std::invalid_argument &) {
             throwRuntimeError("Expected reference token to contain a "
                     "non-negative integer to identify an element in the "
                     "current array; actual token: " + referenceToken);
         }
 #endif
     } else if (node.maybeObject()) {
         // Fragment must identify a member of the candidate object
         typedef typename AdapterType::Object Object;
 
         const Object object = node.asObject();
         typename Object::const_iterator itr = object.find(
                 referenceToken);
         if (itr == object.end()) {
             throwRuntimeError("Expected reference token to identify an "
                     "element in the current object; "
                     "actual token: " + referenceToken);
             abort();
         }
 
         // Recursively process the remaining tokens
         return resolveJsonPointer(itr->second, jsonPointer, jsonPointerNext);
     }
 
     throwRuntimeError("Expected end of JSON Pointer, but at least "
             "one reference token has not been processed; remaining tokens: " +
             std::string(jsonPointerNext, jsonPointerEnd));
     abort();
 }
 
 /**
  * @brief   Return the JSON Value referenced by a JSON Pointer
  *
  * @param   rootNode     node to use as root for JSON Pointer resolution
  * @param   jsonPointer  string containing JSON Pointer
  *
  * @return  an instance AdapterType in the specified document
  */
