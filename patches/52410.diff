commit f4dd92750c85236c79a90a81433854c4dab39836
Author: Steve Lime <steve.lime@state.mn.us>
Date:   Fri Oct 14 23:09:49 2022 -0500

    Make sure a POINT block doesn't contain too many points.

diff --git a/mapsymbol.c b/mapsymbol.c
index 82e578e61..9a1ef7499 100644
--- a/mapsymbol.c
+++ b/mapsymbol.c
@@ -153,134 +153,138 @@ int msFreeSymbol(symbolObj *s)
 int loadSymbol(symbolObj *s, char *symbolpath)
 {
   int done=MS_FALSE;
   char szPath[MS_MAXPATHLEN];
 
   initSymbol(s);
 
   for(;;) {
     switch(msyylex()) {
       case(ANCHORPOINT):
 	if(getDouble(&(s->anchorpoint_x), MS_NUM_CHECK_RANGE, 0, 1) == -1) {
 	  msSetError(MS_SYMERR, "ANCHORPOINT must be between 0 and 1", "loadSymbol()");
           return -1;
         }
         if(getDouble(&(s->anchorpoint_y), MS_NUM_CHECK_RANGE, 0, 1) == -1) {        
           msSetError(MS_SYMERR, "ANCHORPOINT must be between 0 and 1", "loadSymbol()");
           return(-1);
 	}
         break;
 
       case(ANTIALIAS): /*ignore*/
         msyylex();
         break;
       case(CHARACTER):
         if(getString(&s->character) == MS_FAILURE) return(-1);
         break;
       case(END): /* do some error checking */
         if((s->type == MS_SYMBOL_SVG) && (s->imagepath == NULL)) {
           msSetError(MS_SYMERR, "Symbol of type SVG has no file path specified.", "loadSymbol()");
           return(-1);
         }
         if((s->type == MS_SYMBOL_PIXMAP) && (s->full_pixmap_path == NULL)) {
           msSetError(MS_SYMERR, "Symbol of type PIXMAP has no image data.", "loadSymbol()");
           return(-1);
         }
         if(((s->type == MS_SYMBOL_ELLIPSE) || (s->type == MS_SYMBOL_VECTOR)) && (s->numpoints == 0)) {
           msSetError(MS_SYMERR, "Symbol of type VECTOR or ELLIPSE has no point data.", "loadSymbol()");
           return(-1);
         }
         if(s->type == MS_SYMBOL_VECTOR) {
           double minx = s->points[0].x;
           double miny = s->points[0].y;
           /* should only negative points be shifted? (#4116)*/
           int shiftpositive = ((s->anchorpoint_x!=0.5)||(s->anchorpoint_y!=0.5));
           int i;
           for(i=1; i<s->numpoints; i++) {
             if(s->points[i].x != -99 && s->points[i].y != -99) {
               if(s->points[i].x<minx) minx = s->points[i].x;
               if(s->points[i].y<miny) miny = s->points[i].y;
             }
           }
           if(minx<0 || miny<0 || (shiftpositive && (minx!=0 || miny!=0))) {
             for(i=0; i<s->numpoints; i++) {
               if(s->points[i].x != -99 && s->points[i].y != -99) {
                 s->points[i].x -= minx;
                 s->points[i].y -= miny;
               }
             }
             s->sizex -= minx;
             s->sizey -= miny;
           }
         }
 
         return(0);
         break;
       case(EOF):
         msSetError(MS_EOFERR, NULL, "loadSymbol()");
         return(-1);
         break;
       case(FILLED):
         if((s->filled = getSymbol(2,MS_TRUE,MS_FALSE)) == -1)
           return(-1);
         break;
       case(FONT):
         if(getString(&s->font) == MS_FAILURE) return(-1);
         break;
       case(IMAGE):
         if(msyylex() != MS_STRING) { /* get image location from next token */
           msSetError(MS_TYPEERR, "Parsing error near (%s):(line %d)", "loadSymbol()", msyystring_buffer, msyylineno);
           return(-1);
         }
         msFree(s->full_pixmap_path);
         s->full_pixmap_path = msStrdup(msBuildPath(szPath, symbolpath, msyystring_buffer));
         /* Set imagepath */
         msFree(s->imagepath);
         s->imagepath = msStrdup(msyystring_buffer);
         break;
       case(NAME):
         if(getString(&s->name) == MS_FAILURE) return(-1);
         break;
       case(POINTS):
         done = MS_FALSE;
         s->sizex = 0;
         s->sizey = 0;
         for(;;) {
           switch(msyylex()) {
             case(END):
               done = MS_TRUE;
               break;
             case(MS_NUMBER):
+              if(s->numpoints == MS_MAXVECTORPOINTS) {
+                msSetError(MS_SYMERR, "POINT block contains too many points.", "loadSymbol()");
+		return(-1);
+	      }
               s->points[s->numpoints].x = atof(msyystring_buffer); /* grab the x */
               if(getDouble(&(s->points[s->numpoints].y), MS_NUM_CHECK_NONE, -1, -1) == -1) return(-1); /* grab the y */
               if(s->points[s->numpoints].x!=-99) {
                 s->sizex = MS_MAX(s->sizex, s->points[s->numpoints].x);
                 s->sizey = MS_MAX(s->sizey, s->points[s->numpoints].y);
               }
               s->numpoints++;
               break;
             default:
               msSetError(MS_TYPEERR, "Parsing error near (%s):(line %d)", "loadSymbol()", msyystring_buffer, msyylineno);
               return(-1);
           }
 
           if(done == MS_TRUE)
             break;
         }
         break;
       case(TRANSPARENT):
         s->transparent = MS_TRUE;
         if(getInteger(&(s->transparentcolor), MS_NUM_CHECK_RANGE, 0, 255) == -1) return(-1);
         break;
       case(TYPE):
         if((s->type = getSymbol(8,MS_SYMBOL_VECTOR,MS_SYMBOL_ELLIPSE,MS_SYMBOL_PIXMAP,MS_SYMBOL_SIMPLE,MS_TRUETYPE,MS_SYMBOL_HATCH,MS_SYMBOL_SVG)) == -1)
           return(-1);
         if(s->type == MS_TRUETYPE) /* TrueType keyword is valid several place in map files and symbol files, this simplifies the lexer */
           s->type = MS_SYMBOL_TRUETYPE;
         break;
       default:
         msSetError(MS_IDENTERR, "Parsing error near (%s):(line %d)", "loadSymbol()", msyystring_buffer, msyylineno);
         return(-1);
     } /* end switch */
   } /* end for */
   return done;
 }
