commit ea001b439a134f4e0e4245d29988547103c047b4
Author: Luca Deri <deri@ntop.org>
Date:   Sat Dec 14 16:17:34 2019 +0100

    TLS decoding improvements

diff --git a/src/lib/protocols/tls.c b/src/lib/protocols/tls.c
index 4fdd8b7c..9cc5e8fe 100644
--- a/src/lib/protocols/tls.c
+++ b/src/lib/protocols/tls.c
@@ -203,561 +203,566 @@ struct ja3_info {
 int getTLScertificate(struct ndpi_detection_module_struct *ndpi_struct,
 		      struct ndpi_flow_struct *flow,
 		      char *buffer, int buffer_len) {
   struct ndpi_packet_struct *packet = &flow->packet;
   struct ja3_info ja3;
   u_int8_t invalid_ja3 = 0;
   u_int16_t pkt_tls_version = (packet->payload[1] << 8) + packet->payload[2], ja3_str_len;
   char ja3_str[JA3_STR_LEN];
   ndpi_MD5_CTX ctx;
   u_char md5_hash[16];
   int i;
 
   if(packet->udp) {
     /* Check if this is DTLS or return */
     if((packet->payload[1] != 0xfe)
        || ((packet->payload[2] != 0xff) && (packet->payload[2] != 0xfd))) {
       NDPI_EXCLUDE_PROTO(ndpi_struct, flow);
       return(0);
     }
   }
 
   flow->protos.stun_ssl.ssl.ssl_version = pkt_tls_version;
 
   memset(&ja3, 0, sizeof(ja3));
 
 #ifdef DEBUG_TLS
   {
     u_int16_t tls_len = (packet->payload[3] << 8) + packet->payload[4];
 
     printf("SSL Record [version: 0x%04X][len: %u]\n", pkt_tls_version, tls_len);
   }
 #endif
 
   /*
     Nothing matched so far: let's decode the certificate with some heuristics
     Patches courtesy of Denys Fedoryshchenko <nuclearcat@nuclearcat.com>
   */
   if(packet->payload[0] == 0x16 /* Handshake */) {
     u_int16_t total_len;
     u_int8_t handshake_protocol, header_len;
 
     if(packet->tcp) {
       header_len = 5; /* SSL Header */
       handshake_protocol = packet->payload[5]; /* handshake protocol a bit misleading, it is message type according TLS specs */
       total_len = (packet->payload[3] << 8) + packet->payload[4];
     } else {
       header_len = 13; /* DTLS header */
       handshake_protocol = packet->payload[13];
       total_len = ntohs(*((u_int16_t*)&packet->payload[11]));
     }
 
     total_len += header_len;
 
     memset(buffer, 0, buffer_len);
 
     /* Truncate total len, search at least in incomplete packet */
     if(total_len > packet->payload_packet_len)
       total_len = packet->payload_packet_len;
 
     /* At least "magic" 3 bytes, null for string end, otherwise no need to waste cpu cycles */
     if(total_len > 4) {
       u_int16_t base_offset = packet->tcp ? 43 : 59;
 
 #ifdef DEBUG_TLS
       printf("SSL [len: %u][handshake_protocol: %02X]\n", packet->payload_packet_len, handshake_protocol);
 #endif
 
       if((handshake_protocol == 0x02)
 	 || (handshake_protocol == 0x0b) /* Server Hello and Certificate message types are interesting for us */) {
 	u_int num_found = 0;
 	u_int16_t tls_version;
 	int i;
 	
 	if(packet->tcp)
 	  tls_version = ntohs(*((u_int16_t*)&packet->payload[header_len+4]));
 	else
 	  tls_version = ntohs(*((u_int16_t*)&packet->payload[header_len+12]));
 
 	ja3.tls_handshake_version = tls_version;
 
 	if(handshake_protocol == 0x02) {
 	  u_int16_t offset = base_offset, extension_len, j;
 	  u_int8_t  session_id_len = packet->payload[offset];
 
 #ifdef DEBUG_TLS
 	  printf("SSL Server Hello [version: 0x%04X]\n", tls_version);
 #endif
 
 	  /*
 	     The server hello decides about the SSL version of this flow
 	     https://networkengineering.stackexchange.com/questions/55752/why-does-wireshark-show-version-tls-1-2-here-instead-of-tls-1-3
 	  */
 	  flow->protos.stun_ssl.ssl.ssl_version = tls_version;
 
 	  if(packet->udp)
 	    offset += 1;
 	  else {
 	    if(tls_version < 0x7F15 /* TLS 1.3 lacks of session id */)
 	      offset += session_id_len+1;
 	  }
 
 	  ja3.num_cipher = 1, ja3.cipher[0] = ntohs(*((u_int16_t*)&packet->payload[offset]));
 	  flow->protos.stun_ssl.ssl.server_unsafe_cipher = ndpi_is_safe_ssl_cipher(ja3.cipher[0]);
 	  flow->protos.stun_ssl.ssl.server_cipher = ja3.cipher[0];
 
 #ifdef DEBUG_TLS
 	  printf("TLS [server][session_id_len: %u][cipher: %04X]\n", session_id_len, ja3.cipher[0]);
 #endif
 
 	  offset += 2 + 1;
 
 	  if((offset + 1) < packet->payload_packet_len) /* +1 because we are goint to read 2 bytes */
 	    extension_len = ntohs(*((u_int16_t*)&packet->payload[offset]));
 	  else
 	    extension_len = 0;
 
 #ifdef DEBUG_TLS
 	  printf("TLS [server][extension_len: %u]\n", extension_len);
 #endif
 	  offset += 2;
 
 	  for(i=0; i<extension_len; ) {
 	    u_int16_t extension_id, extension_len;
 
 	    if(offset >= (packet->payload_packet_len+4)) break;
 
 	    extension_id  = ntohs(*((u_int16_t*)&packet->payload[offset]));
 	    extension_len = ntohs(*((u_int16_t*)&packet->payload[offset+2]));
 
 	    if(ja3.num_tls_extension < MAX_NUM_JA3)
 	      ja3.tls_extension[ja3.num_tls_extension++] = extension_id;
 
 #ifdef DEBUG_TLS
 	    printf("TLS [server][extension_id: %u/0x%04X][len: %u]\n",
 		   extension_id, extension_id, extension_len);
 #endif
 
 	    if(extension_id == 43 /* supported versions */) {
 	      if(extension_len >= 2) {
 		u_int16_t tls_version = ntohs(*((u_int16_t*)&packet->payload[offset+4]));
 
 #ifdef DEBUG_TLS
 		printf("TLS [server] [TLS version: 0x%04X]\n", tls_version);
 #endif
 		
 		flow->protos.stun_ssl.ssl.ssl_version = tls_version;
 	      }
 	    }
 	    
 	    i += 4 + extension_len, offset += 4 + extension_len;
 	  }
 
 	  ja3_str_len = snprintf(ja3_str, sizeof(ja3_str), "%u,", ja3.tls_handshake_version);
 
 	  for(i=0; i<ja3.num_cipher; i++) {
 	    int rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, "%s%u", (i > 0) ? "-" : "", ja3.cipher[i]);
 
 	    if(rc <= 0) break; else ja3_str_len += rc;
 	  }
 	  
 	  ja3_str_len += snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, ",");
 
 	  /* ********** */
 
 	  for(i=0; i<ja3.num_tls_extension; i++) {
 	    int rc = snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, "%s%u", (i > 0) ? "-" : "", ja3.tls_extension[i]);
 
 	    if(rc <= 0) break; else ja3_str_len += rc;
 	  }
 	  
 #ifdef DEBUG_TLS
 	  printf("TLS [server] %s\n", ja3_str);
 #endif
 
 #ifdef DEBUG_TLS
 	  printf("[JA3] Server: %s \n", ja3_str);
 #endif
 
 	  ndpi_MD5Init(&ctx);
 	  ndpi_MD5Update(&ctx, (const unsigned char *)ja3_str, strlen(ja3_str));
 	  ndpi_MD5Final(md5_hash, &ctx);
 
 	  for(i=0, j=0; i<16; i++) {
 	    int rc = snprintf(&flow->protos.stun_ssl.ssl.ja3_server[j],
 			      sizeof(flow->protos.stun_ssl.ssl.ja3_server)-j, "%02x", md5_hash[i]);
 	    if(rc <= 0) break; else j += rc;
 	  }
 	  
 #ifdef DEBUG_TLS
 	  printf("[JA3] Server: %s \n", flow->protos.stun_ssl.ssl.ja3_server);
 #endif
 
 	  flow->l4.tcp.tls_seen_server_cert = 1;
 	} else
 	  flow->l4.tcp.tls_seen_certificate = 1;
 
 	/* Check after handshake protocol header (5 bytes) and message header (4 bytes) */
 	for(i = 9; i < packet->payload_packet_len-3; i++) {
 	  if(((packet->payload[i] == 0x04) && (packet->payload[i+1] == 0x03) && (packet->payload[i+2] == 0x0c))
 	     || ((packet->payload[i] == 0x04) && (packet->payload[i+1] == 0x03) && (packet->payload[i+2] == 0x13))
 	     || ((packet->payload[i] == 0x55) && (packet->payload[i+1] == 0x04) && (packet->payload[i+2] == 0x03))) {
-	    u_int8_t server_len = packet->payload[i+3];
+	    u_int8_t server_len, off = 0;
 
 	    if(packet->payload[i] == 0x55) {
-	      num_found++;
+	      num_found++, off++;
 
 	      if(num_found != 2) continue;
 	    }
 
+	    server_len = packet->payload[i+3+off];
+	    
 	    if((server_len+i+3) < packet->payload_packet_len) {
-	      char *server_name = (char*)&packet->payload[i+4];
+	      char *server_name = (char*)&packet->payload[i+4+off];
 	      u_int8_t begin = 0, len, j, num_dots;
 
 	      while(begin < server_len) {
 		if(!ndpi_isprint(server_name[begin]))
 		  begin++;
 		else
 		  break;
 	      }
 
-	      // len = ndpi_min(server_len-begin, buffer_len-1);
-	      len = buffer_len-1;
+	      len = ndpi_min(server_len-begin, buffer_len-1);
+	      // len = buffer_len-1;
+
 	      strncpy(buffer, &server_name[begin], len);
 	      buffer[len] = '\0';
 
+	      // if(len != (buffer_len-1)) printf("len=%u  / buffer_len-1=%u\n", len, buffer_len-1);
+	      
 	      /* We now have to check if this looks like an IP address or host name */
 	      for(j=0, num_dots = 0; j<len; j++) {
 		if(!ndpi_isprint((buffer[j]))) {
 		  num_dots = 0; /* This is not what we look for */
 		  break;
 		} else if(buffer[j] == '.') {
 		  num_dots++;
 		  if(num_dots >=1) break;
 		}
 	      }
 
 	      if(num_dots >= 1) {
 		if(!ndpi_struct->disable_metadata_export) {
 		  ndpi_protocol_match_result ret_match;
 		  u_int16_t subproto;
 		  
 		  stripCertificateTrailer(buffer, buffer_len);
 		  snprintf(flow->protos.stun_ssl.ssl.server_certificate,
 			   sizeof(flow->protos.stun_ssl.ssl.server_certificate), "%s", buffer);
 		  
 #ifdef DEBUG_TLS
 		  printf("[server_certificate: %s]\n", flow->protos.stun_ssl.ssl.server_certificate);
 #endif
 		  
 		  subproto = ndpi_match_host_subprotocol(ndpi_struct, flow,
 							 flow->protos.stun_ssl.ssl.server_certificate,
 							 strlen(flow->protos.stun_ssl.ssl.server_certificate),
 							 &ret_match,
 							 NDPI_PROTOCOL_TLS);
 
 		  if(subproto != NDPI_PROTOCOL_UNKNOWN)
 		    ndpi_set_detected_protocol(ndpi_struct, flow, subproto, NDPI_PROTOCOL_TLS);
 		}
 
 		return(1 /* Server Certificate */);
 	      }
 	    }
 	  }
 	}
       } else if(handshake_protocol == 0x01 /* Client Hello */) {
 	u_int offset;
 
 #ifdef DEBUG_TLS
 	printf("[base_offset: %u][payload_packet_len: %u]\n", base_offset, packet->payload_packet_len);
 #endif
 
 	if(base_offset + 2 <= packet->payload_packet_len) {
 	  u_int16_t session_id_len;
 	  u_int16_t tls_version;
 
 	  if(packet->tcp)
 	    tls_version = ntohs(*((u_int16_t*)&packet->payload[header_len+4]));
 	  else
 	    tls_version = ntohs(*((u_int16_t*)&packet->payload[header_len+12]));
 
 	  session_id_len = packet->payload[base_offset];
 
 	  ja3.tls_handshake_version = tls_version;
 
 	  if((session_id_len+base_offset+2) <= total_len) {
 	    u_int16_t cipher_len, cipher_offset;
 
 	    if(packet->tcp) {
 	      cipher_len = packet->payload[session_id_len+base_offset+2] + (packet->payload[session_id_len+base_offset+1] << 8);
 	      cipher_offset = base_offset + session_id_len + 3;
 	    } else {
 	      cipher_len = ntohs(*((u_int16_t*)&packet->payload[base_offset+2]));
 	      cipher_offset = base_offset+4;
 	    }
 
 #ifdef DEBUG_TLS
 	    printf("Client SSL [client cipher_len: %u][tls_version: 0x%04X]\n", cipher_len, tls_version);
 #endif
 
 	    if((cipher_offset+cipher_len) <= total_len) {
 	      for(i=0; i<cipher_len;) {
 		u_int16_t *id = (u_int16_t*)&packet->payload[cipher_offset+i];
 
 #ifdef DEBUG_TLS
 		printf("Client SSL [cipher suite: %u/0x%04X] [%d/%u]\n", ntohs(*id), ntohs(*id), i, cipher_len);
 #endif
 		if((*id == 0) || (packet->payload[cipher_offset+i] != packet->payload[cipher_offset+i+1])) {
 		  /*
 		    Skip GREASE [https://tools.ietf.org/id/draft-ietf-tls-grease-01.html]
 		    https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967
 		  */
 
 		  if(ja3.num_cipher < MAX_NUM_JA3)
 		    ja3.cipher[ja3.num_cipher++] = ntohs(*id);
 		  else {
 		    invalid_ja3 = 1;
 #ifdef DEBUG_TLS
 		    printf("Client SSL Invalid cipher %u\n", ja3.num_cipher);
 #endif
 		  }
 		}
 
 		i += 2;
 	      }
 	    } else {
 	      invalid_ja3 = 1;
 #ifdef DEBUG_TLS
 	      printf("Client SSL Invalid len %u vs %u\n", (cipher_offset+cipher_len), total_len);
 #endif
 	    }
 
 	    offset = base_offset + session_id_len + cipher_len + 2;
 
 	    flow->l4.tcp.tls_seen_client_cert = 1;
 
 	    if(offset < total_len) {
 	      u_int16_t compression_len;
 	      u_int16_t extensions_len;
 
 	      offset += packet->tcp ? 1 : 2;
 	      compression_len = packet->payload[offset];
 	      offset++;
 
 #ifdef DEBUG_TLS
 	      printf("Client SSL [compression_len: %u]\n", compression_len);
 #endif
 
 	      // offset += compression_len + 3;
 	      offset += compression_len;
 
 	      if(offset < total_len) {
 		extensions_len = ntohs(*((u_int16_t*)&packet->payload[offset]));
 		offset += 2;
 
 #ifdef DEBUG_TLS
 		printf("Client SSL [extensions_len: %u]\n", extensions_len);
 #endif
 
 		if((extensions_len+offset) <= total_len) {
 		  /* Move to the first extension
 		     Type is u_int to avoid possible overflow on extension_len addition */
 		  u_int extension_offset = 0;
 		  u_int32_t j;
 
 		  while(extension_offset < extensions_len) {
 		    u_int16_t extension_id, extension_len, extn_off = offset+extension_offset;
 
 		    extension_id = ntohs(*((u_int16_t*)&packet->payload[offset+extension_offset]));
 		    extension_offset += 2;
 
 		    extension_len = ntohs(*((u_int16_t*)&packet->payload[offset+extension_offset]));
 		    extension_offset += 2;
 
 #ifdef DEBUG_TLS
 		    printf("Client SSL [extension_id: %u][extension_len: %u]\n", extension_id, extension_len);
 #endif
 
 		    if((extension_id == 0) || (packet->payload[extn_off] != packet->payload[extn_off+1])) {
 		      /* Skip GREASE */
 
 		      if(ja3.num_tls_extension < MAX_NUM_JA3)
 			ja3.tls_extension[ja3.num_tls_extension++] = extension_id;
 		      else {
 			invalid_ja3 = 1;
 #ifdef DEBUG_TLS
 			printf("Client SSL Invalid extensions %u\n", ja3.num_tls_extension);
 #endif
 		      }
 		    }
 		   
 		    if(extension_id == 0 /* server name */) {
 		      u_int16_t len;
 
 		      len = (packet->payload[offset+extension_offset+3] << 8) + packet->payload[offset+extension_offset+4];
 		      len = (u_int)ndpi_min(len, buffer_len-1);
 
 		      if((offset+extension_offset+5+len) < packet->payload_packet_len) {
 			strncpy(buffer, (char*)&packet->payload[offset+extension_offset+5], len);
 			buffer[len] = '\0';
 			
 			stripCertificateTrailer(buffer, buffer_len);
 			
 			if(!ndpi_struct->disable_metadata_export) {
 			  snprintf(flow->protos.stun_ssl.ssl.client_certificate,
 				   sizeof(flow->protos.stun_ssl.ssl.client_certificate), "%s", buffer);
 			}
 		      }
 		    } else if(extension_id == 10 /* supported groups */) {
 		      u_int16_t s_offset = offset+extension_offset + 2;
 
 #ifdef DEBUG_TLS
 		      printf("Client SSL [EllipticCurveGroups: len=%u]\n", extension_len);
 #endif
 
 		      if((s_offset+extension_len-2) <= total_len) {
 			for(i=0; i<extension_len-2;) {
 			  u_int16_t s_group = ntohs(*((u_int16_t*)&packet->payload[s_offset+i]));
 
 #ifdef DEBUG_TLS
 			  printf("Client SSL [EllipticCurve: %u/0x%04X]\n", s_group, s_group);
 #endif
 			  if((s_group == 0) || (packet->payload[s_offset+i] != packet->payload[s_offset+i+1])) {
 			    /* Skip GREASE */
 			    if(ja3.num_elliptic_curve < MAX_NUM_JA3)
 			      ja3.elliptic_curve[ja3.num_elliptic_curve++] = s_group;
 			    else {
 			      invalid_ja3 = 1;
 #ifdef DEBUG_TLS
 			      printf("Client SSL Invalid num elliptic %u\n", ja3.num_elliptic_curve);
 #endif
 			    }
 			  }
 
 			  i += 2;
 			}
 		      } else {
 			invalid_ja3 = 1;
 #ifdef DEBUG_TLS
 			printf("Client SSL Invalid len %u vs %u\n", (s_offset+extension_len-1), total_len);
 #endif
 		      }
 		    } else if(extension_id == 11 /* ec_point_formats groups */) {
 		      u_int16_t s_offset = offset+extension_offset + 1;
 
 #ifdef DEBUG_TLS
 		      printf("Client SSL [EllipticCurveFormat: len=%u]\n", extension_len);
 #endif
 		      if((s_offset+extension_len) < total_len) {
 			for(i=0; i<extension_len-1;i++) {
 			  u_int8_t s_group = packet->payload[s_offset+i];
 
 #ifdef DEBUG_TLS
 			  printf("Client SSL [EllipticCurveFormat: %u]\n", s_group);
 #endif
 
 			  if(ja3.num_elliptic_curve_point_format < MAX_NUM_JA3)
 			    ja3.elliptic_curve_point_format[ja3.num_elliptic_curve_point_format++] = s_group;
 			  else {
 			    invalid_ja3 = 1;
 #ifdef DEBUG_TLS
 			    printf("Client SSL Invalid num elliptic %u\n", ja3.num_elliptic_curve_point_format);
 #endif
 			  }
 			}
 		      } else {
 			invalid_ja3 = 1;
 #ifdef DEBUG_TLS
 			printf("Client SSL Invalid len %u vs %u\n", s_offset+extension_len, total_len);
 #endif
 		      }
 		    } else if(extension_id == 43 /* supported versions */) {
 		      u_int8_t version_len = packet->payload[offset+4];
 		      
 		      if(version_len == (extension_len-1)) {
 #ifdef DEBUG_TLS
 			u_int8_t j;
 			
 			for(j=0; j<version_len; j += 2) {
 			  u_int16_t tls_version = ntohs(*((u_int16_t*)&packet->payload[offset+5+j]));
 			  
 			  printf("Client SSL [TLS version: 0x%04X]\n", tls_version);
 			}
 #endif
 		      }
 		    }
 
 		    extension_offset += extension_len;
 
 #ifdef DEBUG_TLS
 		    printf("Client SSL [extension_offset/len: %u/%u]\n", extension_offset, extension_len);
 #endif
 		  } /* while */
 
 		  if(!invalid_ja3) {
 		  compute_ja3c:
 		    ja3_str_len = snprintf(ja3_str, sizeof(ja3_str), "%u,", ja3.tls_handshake_version);
 
 		    for(i=0; i<ja3.num_cipher; i++) {
 		      ja3_str_len += snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, "%s%u",
 					      (i > 0) ? "-" : "", ja3.cipher[i]);
 		    }
 
 		    ja3_str_len += snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, ",");
 
 		    /* ********** */
 
 		    for(i=0; i<ja3.num_tls_extension; i++)
 		      ja3_str_len += snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, "%s%u",
 					      (i > 0) ? "-" : "", ja3.tls_extension[i]);
 
 		    ja3_str_len += snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, ",");
 
 		    /* ********** */
 
 		    for(i=0; i<ja3.num_elliptic_curve; i++)
 		      ja3_str_len += snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, "%s%u",
 					      (i > 0) ? "-" : "", ja3.elliptic_curve[i]);
 
 		    ja3_str_len += snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, ",");
 
 		    for(i=0; i<ja3.num_elliptic_curve_point_format; i++)
 		      ja3_str_len += snprintf(&ja3_str[ja3_str_len], sizeof(ja3_str)-ja3_str_len, "%s%u",
 					      (i > 0) ? "-" : "", ja3.elliptic_curve_point_format[i]);
 
 #ifdef DEBUG_TLS
 		    printf("[JA3] Client: %s \n", ja3_str);
 #endif
 
 		    ndpi_MD5Init(&ctx);
 		    ndpi_MD5Update(&ctx, (const unsigned char *)ja3_str, strlen(ja3_str));
 		    ndpi_MD5Final(md5_hash, &ctx);
 
 		    for(i=0, j=0; i<16; i++)
 		      j += snprintf(&flow->protos.stun_ssl.ssl.ja3_client[j],
 				    sizeof(flow->protos.stun_ssl.ssl.ja3_client)-j, "%02x",
 				    md5_hash[i]);
 
 #ifdef DEBUG_TLS
 		    printf("[JA3] Client: %s \n", flow->protos.stun_ssl.ssl.ja3_client);
 #endif
 		  }
 
 		  return(2 /* Client Certificate */);
 		}
 	      } else if(offset == total_len) {
 		/* SSL does not have extensions etc */
 		goto compute_ja3c;
 	      }
 	    }
 	  }
 	}
       }
     }
   }
 
   return(0); /* Not found */
 }
 
 /* **************************************** */
 
 /* See https://blog.catchpoint.com/2017/05/12/dissecting-tls-using-wireshark/ */
diff --git a/tests/result/signal.pcap.out b/tests/result/signal.pcap.out
index 8a4d57ee..61bfa048 100644
--- a/tests/result/signal.pcap.out
+++ b/tests/result/signal.pcap.out
@@ -9,24 +9,24 @@ AppleiTunes	90	29795	2
 JA3 Host Stats: 
 		 IP Address                  	 # JA3C     
 	1	 192.168.2.17             	 3      
 
 
 	1	TCP 192.168.2.17:57027 <-> 13.35.253.42:443 [proto: 91.39/TLS.Signal][cat: Chat/9][170 pkts/206962 bytes <-> 95 pkts/9293 bytes][Goodput ratio: 94.6/32.3][0.48 sec][bytes ratio: 0.914 (Upload)][IAT c2s/s2c min/avg/max/stddev: 0/0 1.8/3.4 39/47 6.0/9.5][Pkt Len c2s/s2c min/avg/max/stddev: 66/66 1217.4/97.8 1506/1506 547.8/174.6][TLSv1.2][Client: cdn.signal.org][JA3C: 6725ca90906e1036febcbfd464e2e326][Server: cdn.signal.org][JA3S: c4b2785a87896e19d37eee932070cb22][Organization: Open Whisper Systems][Certificate SHA-1: 81:3D:8A:2E:EE:B2:E1:F4:1C:2B:6D:20:16:54:B2:C1:87:D0:1E:12][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
-	2	TCP 192.168.2.17:57026 <-> 35.169.3.40:443 [proto: 91.39/TLS.Signal][cat: Chat/9][22 pkts/13757 bytes <-> 16 pkts/6493 bytes][Goodput ratio: 89.4/83.6][0.57 sec][bytes ratio: 0.359 (Upload)][IAT c2s/s2c min/avg/max/stddev: 0/0 12.7/19.6 112/114 34.8/41.4][Pkt Len c2s/s2c min/avg/max/stddev: 66/66 625.3/405.8 1506/1506 628.8/565.5][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: 6725ca90906e1036febcbfd464e2e326][JA3S: 1089ea6f0461a29006cc96dfe7a11d80][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
+	2	TCP 192.168.2.17:57026 <-> 35.169.3.40:443 [proto: 91.39/TLS.Signal][cat: Chat/9][22 pkts/13757 bytes <-> 16 pkts/6493 bytes][Goodput ratio: 89.4/83.6][0.57 sec][bytes ratio: 0.359 (Upload)][IAT c2s/s2c min/avg/max/stddev: 0/0 12.7/19.6 112/114 34.8/41.4][Pkt Len c2s/s2c min/avg/max/stddev: 66/66 625.3/405.8 1506/1506 628.8/565.5][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: 6725ca90906e1036febcbfd464e2e326][Server: textsecure-service.whispersystems.org][JA3S: 1089ea6f0461a29006cc96dfe7a11d80][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
 	3	TCP 192.168.2.17:57022 <-> 23.57.24.16:443 [proto: 91.145/TLS.AppleiTunes][cat: Streaming/17][24 pkts/2540 bytes <-> 21 pkts/12673 bytes][Goodput ratio: 37.6/89.0][0.40 sec][bytes ratio: -0.666 (Download)][IAT c2s/s2c min/avg/max/stddev: 0/0 16.9/14.0 124/83 34.8/27.7][Pkt Len c2s/s2c min/avg/max/stddev: 54/66 105.8/603.5 583/1506 104.9/573.8][TLSv1.3][Client: itunes.apple.com][JA3C: 17305a56a62a10f6b0ee8edcc3b1769c][JA3S: 15af977ce25de452b96affa2addb1036][Cipher: TLS_AES_256_GCM_SHA384]
 	4	TCP 192.168.2.17:57018 <-> 23.57.24.16:443 [proto: 91.145/TLS.AppleiTunes][cat: Streaming/17][25 pkts/2582 bytes <-> 20 pkts/12000 bytes][Goodput ratio: 37.0/88.9][0.24 sec][bytes ratio: -0.646 (Download)][IAT c2s/s2c min/avg/max/stddev: 0/0 7.4/9.7 47/52 16.2/19.2][Pkt Len c2s/s2c min/avg/max/stddev: 54/66 103.3/600.0 583/1506 103.5/587.8][TLSv1.3][Client: itunes.apple.com][JA3C: 17305a56a62a10f6b0ee8edcc3b1769c][JA3S: 15af977ce25de452b96affa2addb1036][Cipher: TLS_AES_256_GCM_SHA384]
-	5	TCP 192.168.2.17:49227 <-> 35.169.3.40:443 [proto: 91.39/TLS.Signal][cat: Chat/9][13 pkts/1808 bytes <-> 12 pkts/4355 bytes][Goodput ratio: 51.9/81.6][3.03 sec][bytes ratio: -0.413 (Download)][IAT c2s/s2c min/avg/max/stddev: 1/0 62.1/293.1 115/2199 52.5/677.0][Pkt Len c2s/s2c min/avg/max/stddev: 66/66 139.1/362.9 502/1506 119.5/470.7][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: e4d448cdfe06dc1243c1eb026c74ac9a][JA3S: 303951d4c50efb2e991652225a6f02b1][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
-	6	TCP 192.168.2.17:57024 <-> 35.169.3.40:443 [proto: 91.39/TLS.Signal][cat: Chat/9][15 pkts/2054 bytes <-> 11 pkts/3775 bytes][Goodput ratio: 51.2/80.5][0.59 sec][bytes ratio: -0.295 (Download)][IAT c2s/s2c min/avg/max/stddev: 0/0 29.9/59.0 167/186 54.6/77.3][Pkt Len c2s/s2c min/avg/max/stddev: 66/66 136.9/343.2 583/1506 133.5/472.0][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: 6725ca90906e1036febcbfd464e2e326][JA3S: 1089ea6f0461a29006cc96dfe7a11d80][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
-	7	TCP 192.168.2.17:57021 <-> 34.225.240.173:443 [proto: 91.39/TLS.Signal][cat: Chat/9][16 pkts/2108 bytes <-> 10 pkts/3709 bytes][Goodput ratio: 49.9/82.0][13.48 sec][bytes ratio: -0.275 (Download)][IAT c2s/s2c min/avg/max/stddev: 0/0 1019.6/49.6 13018/120 3463.9/56.7][Pkt Len c2s/s2c min/avg/max/stddev: 54/66 131.8/370.9 583/1506 130.8/486.5][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: 6725ca90906e1036febcbfd464e2e326][JA3S: 1089ea6f0461a29006cc96dfe7a11d80][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
-	8	TCP 192.168.2.17:57020 <-> 34.225.240.173:443 [proto: 91.39/TLS.Signal][cat: Chat/9][16 pkts/2103 bytes <-> 11 pkts/3562 bytes][Goodput ratio: 49.8/79.4][13.49 sec][bytes ratio: -0.258 (Download)][IAT c2s/s2c min/avg/max/stddev: 0/0 1019.4/44.5 13011/122 3461.9/56.7][Pkt Len c2s/s2c min/avg/max/stddev: 54/66 131.4/323.8 583/1506 130.5/472.3][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: 6725ca90906e1036febcbfd464e2e326][JA3S: 1089ea6f0461a29006cc96dfe7a11d80][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
-	9	TCP 192.168.2.17:57019 <-> 34.225.240.173:443 [proto: 91.39/TLS.Signal][cat: Chat/9][16 pkts/2095 bytes <-> 11 pkts/3527 bytes][Goodput ratio: 49.6/79.2][13.49 sec][bytes ratio: -0.255 (Download)][IAT c2s/s2c min/avg/max/stddev: 0/0 1020.2/43.2 13026/120 3466.0/54.9][Pkt Len c2s/s2c min/avg/max/stddev: 54/66 130.9/320.6 583/1506 129.9/473.1][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: 6725ca90906e1036febcbfd464e2e326][JA3S: 1089ea6f0461a29006cc96dfe7a11d80][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
-	10	TCP 192.168.2.17:57023 <-> 35.169.3.40:443 [proto: 91.39/TLS.Signal][cat: Chat/9][15 pkts/2049 bytes <-> 11 pkts/3562 bytes][Goodput ratio: 51.1/79.4][0.58 sec][bytes ratio: -0.270 (Download)][IAT c2s/s2c min/avg/max/stddev: 0/0 30.0/58.0 168/181 54.2/76.1][Pkt Len c2s/s2c min/avg/max/stddev: 66/66 136.6/323.8 583/1506 133.1/472.3][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: 6725ca90906e1036febcbfd464e2e326][JA3S: 1089ea6f0461a29006cc96dfe7a11d80][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
-	11	TCP 192.168.2.17:57025 <-> 35.169.3.40:443 [proto: 91.39/TLS.Signal][cat: Chat/9][15 pkts/2041 bytes <-> 11 pkts/3527 bytes][Goodput ratio: 50.9/79.2][0.58 sec][bytes ratio: -0.267 (Download)][IAT c2s/s2c min/avg/max/stddev: 0/0 29.8/58.4 166/184 54.4/76.7][Pkt Len c2s/s2c min/avg/max/stddev: 66/66 136.1/320.6 583/1506 132.6/473.1][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: 6725ca90906e1036febcbfd464e2e326][JA3S: 1089ea6f0461a29006cc96dfe7a11d80][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
-	12	TCP 192.168.2.17:49226 <-> 34.225.240.173:443 [proto: 91.39/TLS.Signal][cat: Chat/9][13 pkts/1688 bytes <-> 11 pkts/3569 bytes][Goodput ratio: 48.4/79.4][9.90 sec][bytes ratio: -0.358 (Download)][IAT c2s/s2c min/avg/max/stddev: 0/0 58.4/57.4 113/154 53.2/65.8][Pkt Len c2s/s2c min/avg/max/stddev: 66/66 129.8/324.5 502/1506 120.2/473.3][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: e4d448cdfe06dc1243c1eb026c74ac9a][JA3S: 303951d4c50efb2e991652225a6f02b1][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
+	5	TCP 192.168.2.17:49227 <-> 35.169.3.40:443 [proto: 91.39/TLS.Signal][cat: Chat/9][13 pkts/1808 bytes <-> 12 pkts/4355 bytes][Goodput ratio: 51.9/81.6][3.03 sec][bytes ratio: -0.413 (Download)][IAT c2s/s2c min/avg/max/stddev: 1/0 62.1/293.1 115/2199 52.5/677.0][Pkt Len c2s/s2c min/avg/max/stddev: 66/66 139.1/362.9 502/1506 119.5/470.7][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: e4d448cdfe06dc1243c1eb026c74ac9a][Server: textsecure-service.whispersystems.org][JA3S: 303951d4c50efb2e991652225a6f02b1][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
+	6	TCP 192.168.2.17:57024 <-> 35.169.3.40:443 [proto: 91.39/TLS.Signal][cat: Chat/9][15 pkts/2054 bytes <-> 11 pkts/3775 bytes][Goodput ratio: 51.2/80.5][0.59 sec][bytes ratio: -0.295 (Download)][IAT c2s/s2c min/avg/max/stddev: 0/0 29.9/59.0 167/186 54.6/77.3][Pkt Len c2s/s2c min/avg/max/stddev: 66/66 136.9/343.2 583/1506 133.5/472.0][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: 6725ca90906e1036febcbfd464e2e326][Server: textsecure-service.whispersystems.org][JA3S: 1089ea6f0461a29006cc96dfe7a11d80][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
+	7	TCP 192.168.2.17:57021 <-> 34.225.240.173:443 [proto: 91.39/TLS.Signal][cat: Chat/9][16 pkts/2108 bytes <-> 10 pkts/3709 bytes][Goodput ratio: 49.9/82.0][13.48 sec][bytes ratio: -0.275 (Download)][IAT c2s/s2c min/avg/max/stddev: 0/0 1019.6/49.6 13018/120 3463.9/56.7][Pkt Len c2s/s2c min/avg/max/stddev: 54/66 131.8/370.9 583/1506 130.8/486.5][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: 6725ca90906e1036febcbfd464e2e326][Server: textsecure-service.whispersystems.org][JA3S: 1089ea6f0461a29006cc96dfe7a11d80][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
+	8	TCP 192.168.2.17:57020 <-> 34.225.240.173:443 [proto: 91.39/TLS.Signal][cat: Chat/9][16 pkts/2103 bytes <-> 11 pkts/3562 bytes][Goodput ratio: 49.8/79.4][13.49 sec][bytes ratio: -0.258 (Download)][IAT c2s/s2c min/avg/max/stddev: 0/0 1019.4/44.5 13011/122 3461.9/56.7][Pkt Len c2s/s2c min/avg/max/stddev: 54/66 131.4/323.8 583/1506 130.5/472.3][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: 6725ca90906e1036febcbfd464e2e326][Server: textsecure-service.whispersystems.org][JA3S: 1089ea6f0461a29006cc96dfe7a11d80][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
+	9	TCP 192.168.2.17:57019 <-> 34.225.240.173:443 [proto: 91.39/TLS.Signal][cat: Chat/9][16 pkts/2095 bytes <-> 11 pkts/3527 bytes][Goodput ratio: 49.6/79.2][13.49 sec][bytes ratio: -0.255 (Download)][IAT c2s/s2c min/avg/max/stddev: 0/0 1020.2/43.2 13026/120 3466.0/54.9][Pkt Len c2s/s2c min/avg/max/stddev: 54/66 130.9/320.6 583/1506 129.9/473.1][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: 6725ca90906e1036febcbfd464e2e326][Server: textsecure-service.whispersystems.org][JA3S: 1089ea6f0461a29006cc96dfe7a11d80][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
+	10	TCP 192.168.2.17:57023 <-> 35.169.3.40:443 [proto: 91.39/TLS.Signal][cat: Chat/9][15 pkts/2049 bytes <-> 11 pkts/3562 bytes][Goodput ratio: 51.1/79.4][0.58 sec][bytes ratio: -0.270 (Download)][IAT c2s/s2c min/avg/max/stddev: 0/0 30.0/58.0 168/181 54.2/76.1][Pkt Len c2s/s2c min/avg/max/stddev: 66/66 136.6/323.8 583/1506 133.1/472.3][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: 6725ca90906e1036febcbfd464e2e326][Server: textsecure-service.whispersystems.org][JA3S: 1089ea6f0461a29006cc96dfe7a11d80][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
+	11	TCP 192.168.2.17:57025 <-> 35.169.3.40:443 [proto: 91.39/TLS.Signal][cat: Chat/9][15 pkts/2041 bytes <-> 11 pkts/3527 bytes][Goodput ratio: 50.9/79.2][0.58 sec][bytes ratio: -0.267 (Download)][IAT c2s/s2c min/avg/max/stddev: 0/0 29.8/58.4 166/184 54.4/76.7][Pkt Len c2s/s2c min/avg/max/stddev: 66/66 136.1/320.6 583/1506 132.6/473.1][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: 6725ca90906e1036febcbfd464e2e326][Server: textsecure-service.whispersystems.org][JA3S: 1089ea6f0461a29006cc96dfe7a11d80][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
+	12	TCP 192.168.2.17:49226 <-> 34.225.240.173:443 [proto: 91.39/TLS.Signal][cat: Chat/9][13 pkts/1688 bytes <-> 11 pkts/3569 bytes][Goodput ratio: 48.4/79.4][9.90 sec][bytes ratio: -0.358 (Download)][IAT c2s/s2c min/avg/max/stddev: 0/0 58.4/57.4 113/154 53.2/65.8][Pkt Len c2s/s2c min/avg/max/stddev: 66/66 129.8/324.5 502/1506 120.2/473.3][TLSv1.2][Client: textsecure-service.whispersystems.org][JA3C: e4d448cdfe06dc1243c1eb026c74ac9a][Server: textsecure-service.whispersystems.org][JA3S: 303951d4c50efb2e991652225a6f02b1][Organization: Open Whisper Systems][Certificate SHA-1: 5E:9E:63:F5:69:45:C7:DC:E6:4D:26:68:36:7E:C2:68:DB:02:60:8B][Validity: 2013-03-25 22:18:35 - 2023-03-23 22:18:35][Cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]
 	13	UDP 0.0.0.0:68 -> 255.255.255.255:67 [proto: 18/DHCP][cat: Network/14][4 pkts/1368 bytes -> 0 pkts/0 bytes][Goodput ratio: 87.7/0.0][15.76 sec][Host: lucas-imac][DHCP Fingerprint: 1,121,3,6,15,119,252,95,44,46]
 	14	TCP 23.57.24.16:443 <-> 192.168.2.17:57016 [proto: 91/TLS][cat: Web/5][6 pkts/408 bytes <-> 6 pkts/471 bytes][Goodput ratio: 11.7/13.3][0.65 sec][bytes ratio: -0.072 (Mixed)][IAT c2s/s2c min/avg/max/stddev: 7/16 158.5/4.0 347/16 156.8/6.9][Pkt Len c2s/s2c min/avg/max/stddev: 54/66 68.0/78.5 90/105 16.1/14.7]
 	15	TCP 192.168.2.17:56996 <-> 17.248.146.144:443 [proto: 91.140/TLS.Apple][cat: Web/5][4 pkts/341 bytes <-> 4 pkts/264 bytes][Goodput ratio: 22.5/0.0][0.03 sec][bytes ratio: 0.127 (Mixed)][IAT c2s/s2c min/avg/max/stddev: 25/0 8.3/0.0 25/0 11.8/0.0][Pkt Len c2s/s2c min/avg/max/stddev: 66/66 85.2/66.0 112/66 20.0/0.0]
 	16	TCP 192.168.2.17:57017 <-> 2.18.232.118:443 [proto: 91/TLS][cat: Web/5][5 pkts/317 bytes <-> 3 pkts/221 bytes][Goodput ratio: 7.2/10.4][0.03 sec][bytes ratio: 0.178 (Mixed)][IAT c2s/s2c min/avg/max/stddev: 0/0 6.0/0.0 24/0 10.4/0.0][Pkt Len c2s/s2c min/avg/max/stddev: 54/66 63.4/73.7 89/89 13.6/10.8]
 	17	UDP 192.168.2.17:56263 <-> 192.168.2.1:53 [proto: 5.39/DNS.Signal][cat: Chat/9][1 pkts/97 bytes <-> 1 pkts/193 bytes][Goodput ratio: 56.1/77.8][0.03 sec][Host: textsecure-service.whispersystems.org][PLAIN TEXT (textsecure)]
 	18	UDP 192.168.2.17:60793 <-> 192.168.2.1:53 [proto: 5/DNS][cat: Network/14][1 pkts/85 bytes <-> 1 pkts/101 bytes][Goodput ratio: 50.0/57.8][0.04 sec][Host: e673.dsce9.akamaiedge.net][PLAIN TEXT (akamaiedge)]
 	19	ICMP 192.168.2.17:0 -> 192.168.2.1:0 [proto: 81/ICMP][cat: Network/14][1 pkts/70 bytes -> 0 pkts/0 bytes][Goodput ratio: 39.4/0.0][< 1 sec]
