commit 93c9e0c703b98f5082413920a62067ae0b68671e
Author: Qianqian Fang <fangqq@gmail.com>
Date:   Wed May 18 12:38:15 2022 -0400

    Discard optimized containers with negative counts in UBJSON/BJData (#3491,#3492,#3490) (#3500)
    
    * Discard optimized containers with negative counts in UBJSON/BJData (#3491,#3492,#3490)
    
    * fix msvc error
    
    * update unit tests for negative sized containers
    
    * use a loop to test 0 ndarray dimension
    
    * throw an error when count is negative, merge CHECK_THROW_AS and _WITH with _WITH_AS

diff --git a/include/nlohmann/detail/input/binary_reader.hpp b/include/nlohmann/detail/input/binary_reader.hpp
index 703e6c0f..10f8f000 100644
--- a/include/nlohmann/detail/input/binary_reader.hpp
+++ b/include/nlohmann/detail/input/binary_reader.hpp
@@ -61,2844 +61,2873 @@ template<typename BasicJsonType, typename InputAdapterType, typename SAX = json_
 class binary_reader
 {
     using number_integer_t = typename BasicJsonType::number_integer_t;
     using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
     using number_float_t = typename BasicJsonType::number_float_t;
     using string_t = typename BasicJsonType::string_t;
     using binary_t = typename BasicJsonType::binary_t;
     using json_sax_t = SAX;
     using char_type = typename InputAdapterType::char_type;
     using char_int_type = typename std::char_traits<char_type>::int_type;
 
   public:
     /*!
     @brief create a binary reader
 
     @param[in] adapter  input adapter to read from
     */
     explicit binary_reader(InputAdapterType&& adapter, const input_format_t format = input_format_t::json) noexcept : ia(std::move(adapter)), input_format(format)
     {
         (void)detail::is_sax_static_asserts<SAX, BasicJsonType> {};
     }
 
     // make class move-only
     binary_reader(const binary_reader&) = delete;
     binary_reader(binary_reader&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
     binary_reader& operator=(const binary_reader&) = delete;
     binary_reader& operator=(binary_reader&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
     ~binary_reader() = default;
 
     /*!
     @param[in] format  the binary format to parse
     @param[in] sax_    a SAX event processor
     @param[in] strict  whether to expect the input to be consumed completed
     @param[in] tag_handler  how to treat CBOR tags
 
     @return whether parsing was successful
     */
     JSON_HEDLEY_NON_NULL(3)
     bool sax_parse(const input_format_t format,
                    json_sax_t* sax_,
                    const bool strict = true,
                    const cbor_tag_handler_t tag_handler = cbor_tag_handler_t::error)
     {
         sax = sax_;
         bool result = false;
 
         switch (format)
         {
             case input_format_t::bson:
                 result = parse_bson_internal();
                 break;
 
             case input_format_t::cbor:
                 result = parse_cbor_internal(true, tag_handler);
                 break;
 
             case input_format_t::msgpack:
                 result = parse_msgpack_internal();
                 break;
 
             case input_format_t::ubjson:
             case input_format_t::bjdata:
                 result = parse_ubjson_internal();
                 break;
 
             case input_format_t::json: // LCOV_EXCL_LINE
             default:            // LCOV_EXCL_LINE
                 JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
         }
 
         // strict mode: next byte must be EOF
         if (result && strict)
         {
             if (input_format == input_format_t::ubjson || input_format == input_format_t::bjdata)
             {
                 get_ignore_noop();
             }
             else
             {
                 get();
             }
 
             if (JSON_HEDLEY_UNLIKELY(current != std::char_traits<char_type>::eof()))
             {
                 return sax->parse_error(chars_read, get_token_string(), parse_error::create(110, chars_read,
                                         exception_message(input_format, concat("expected end of input; last byte: 0x", get_token_string()), "value"), nullptr));
             }
         }
 
         return result;
     }
 
   private:
     //////////
     // BSON //
     //////////
 
     /*!
     @brief Reads in a BSON-object and passes it to the SAX-parser.
     @return whether a valid BSON-value was passed to the SAX parser
     */
     bool parse_bson_internal()
     {
         std::int32_t document_size{};
         get_number<std::int32_t, true>(input_format_t::bson, document_size);
 
         if (JSON_HEDLEY_UNLIKELY(!sax->start_object(static_cast<std::size_t>(-1))))
         {
             return false;
         }
 
         if (JSON_HEDLEY_UNLIKELY(!parse_bson_element_list(/*is_array*/false)))
         {
             return false;
         }
 
         return sax->end_object();
     }
 
     /*!
     @brief Parses a C-style string from the BSON input.
     @param[in,out] result  A reference to the string variable where the read
                             string is to be stored.
     @return `true` if the \x00-byte indicating the end of the string was
              encountered before the EOF; false` indicates an unexpected EOF.
     */
     bool get_bson_cstr(string_t& result)
     {
         auto out = std::back_inserter(result);
         while (true)
         {
             get();
             if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::bson, "cstring")))
             {
                 return false;
             }
             if (current == 0x00)
             {
                 return true;
             }
             *out++ = static_cast<typename string_t::value_type>(current);
         }
     }
 
     /*!
     @brief Parses a zero-terminated string of length @a len from the BSON
            input.
     @param[in] len  The length (including the zero-byte at the end) of the
                     string to be read.
     @param[in,out] result  A reference to the string variable where the read
                             string is to be stored.
     @tparam NumberType The type of the length @a len
     @pre len >= 1
     @return `true` if the string was successfully parsed
     */
     template<typename NumberType>
     bool get_bson_string(const NumberType len, string_t& result)
     {
         if (JSON_HEDLEY_UNLIKELY(len < 1))
         {
             auto last_token = get_token_string();
             return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                     exception_message(input_format_t::bson, concat("string length must be at least 1, is ", std::to_string(len)), "string"), nullptr));
         }
 
         return get_string(input_format_t::bson, len - static_cast<NumberType>(1), result) && get() != std::char_traits<char_type>::eof();
     }
 
     /*!
     @brief Parses a byte array input of length @a len from the BSON input.
     @param[in] len  The length of the byte array to be read.
     @param[in,out] result  A reference to the binary variable where the read
                             array is to be stored.
     @tparam NumberType The type of the length @a len
     @pre len >= 0
     @return `true` if the byte array was successfully parsed
     */
     template<typename NumberType>
     bool get_bson_binary(const NumberType len, binary_t& result)
     {
         if (JSON_HEDLEY_UNLIKELY(len < 0))
         {
             auto last_token = get_token_string();
             return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                     exception_message(input_format_t::bson, concat("byte array length cannot be negative, is ", std::to_string(len)), "binary"), nullptr));
         }
 
         // All BSON binary values have a subtype
         std::uint8_t subtype{};
         get_number<std::uint8_t>(input_format_t::bson, subtype);
         result.set_subtype(subtype);
 
         return get_binary(input_format_t::bson, len, result);
     }
 
     /*!
     @brief Read a BSON document element of the given @a element_type.
     @param[in] element_type The BSON element type, c.f. http://bsonspec.org/spec.html
     @param[in] element_type_parse_position The position in the input stream,
                where the `element_type` was read.
     @warning Not all BSON element types are supported yet. An unsupported
              @a element_type will give rise to a parse_error.114:
              Unsupported BSON record type 0x...
     @return whether a valid BSON-object/array was passed to the SAX parser
     */
     bool parse_bson_element_internal(const char_int_type element_type,
                                      const std::size_t element_type_parse_position)
     {
         switch (element_type)
         {
             case 0x01: // double
             {
                 double number{};
                 return get_number<double, true>(input_format_t::bson, number) && sax->number_float(static_cast<number_float_t>(number), "");
             }
 
             case 0x02: // string
             {
                 std::int32_t len{};
                 string_t value;
                 return get_number<std::int32_t, true>(input_format_t::bson, len) && get_bson_string(len, value) && sax->string(value);
             }
 
             case 0x03: // object
             {
                 return parse_bson_internal();
             }
 
             case 0x04: // array
             {
                 return parse_bson_array();
             }
 
             case 0x05: // binary
             {
                 std::int32_t len{};
                 binary_t value;
                 return get_number<std::int32_t, true>(input_format_t::bson, len) && get_bson_binary(len, value) && sax->binary(value);
             }
 
             case 0x08: // boolean
             {
                 return sax->boolean(get() != 0);
             }
 
             case 0x0A: // null
             {
                 return sax->null();
             }
 
             case 0x10: // int32
             {
                 std::int32_t value{};
                 return get_number<std::int32_t, true>(input_format_t::bson, value) && sax->number_integer(value);
             }
 
             case 0x12: // int64
             {
                 std::int64_t value{};
                 return get_number<std::int64_t, true>(input_format_t::bson, value) && sax->number_integer(value);
             }
 
             default: // anything else not supported (yet)
             {
                 std::array<char, 3> cr{{}};
                 static_cast<void>((std::snprintf)(cr.data(), cr.size(), "%.2hhX", static_cast<unsigned char>(element_type))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
                 std::string cr_str{cr.data()};
                 return sax->parse_error(element_type_parse_position, cr_str,
                                         parse_error::create(114, element_type_parse_position, concat("Unsupported BSON record type 0x", cr_str), nullptr));
             }
         }
     }
 
     /*!
     @brief Read a BSON element list (as specified in the BSON-spec)
 
     The same binary layout is used for objects and arrays, hence it must be
     indicated with the argument @a is_array which one is expected
     (true --> array, false --> object).
 
     @param[in] is_array Determines if the element list being read is to be
                         treated as an object (@a is_array == false), or as an
                         array (@a is_array == true).
     @return whether a valid BSON-object/array was passed to the SAX parser
     */
     bool parse_bson_element_list(const bool is_array)
     {
         string_t key;
 
         while (auto element_type = get())
         {
             if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::bson, "element list")))
             {
                 return false;
             }
 
             const std::size_t element_type_parse_position = chars_read;
             if (JSON_HEDLEY_UNLIKELY(!get_bson_cstr(key)))
             {
                 return false;
             }
 
             if (!is_array && !sax->key(key))
             {
                 return false;
             }
 
             if (JSON_HEDLEY_UNLIKELY(!parse_bson_element_internal(element_type, element_type_parse_position)))
             {
                 return false;
             }
 
             // get_bson_cstr only appends
             key.clear();
         }
 
         return true;
     }
 
     /*!
     @brief Reads an array from the BSON input and passes it to the SAX-parser.
     @return whether a valid BSON-array was passed to the SAX parser
     */
     bool parse_bson_array()
     {
         std::int32_t document_size{};
         get_number<std::int32_t, true>(input_format_t::bson, document_size);
 
         if (JSON_HEDLEY_UNLIKELY(!sax->start_array(static_cast<std::size_t>(-1))))
         {
             return false;
         }
 
         if (JSON_HEDLEY_UNLIKELY(!parse_bson_element_list(/*is_array*/true)))
         {
             return false;
         }
 
         return sax->end_array();
     }
 
     //////////
     // CBOR //
     //////////
 
     /*!
     @param[in] get_char  whether a new character should be retrieved from the
                          input (true) or whether the last read character should
                          be considered instead (false)
     @param[in] tag_handler how CBOR tags should be treated
 
     @return whether a valid CBOR value was passed to the SAX parser
     */
     bool parse_cbor_internal(const bool get_char,
                              const cbor_tag_handler_t tag_handler)
     {
         switch (get_char ? get() : current)
         {
             // EOF
             case std::char_traits<char_type>::eof():
                 return unexpect_eof(input_format_t::cbor, "value");
 
             // Integer 0x00..0x17 (0..23)
             case 0x00:
             case 0x01:
             case 0x02:
             case 0x03:
             case 0x04:
             case 0x05:
             case 0x06:
             case 0x07:
             case 0x08:
             case 0x09:
             case 0x0A:
             case 0x0B:
             case 0x0C:
             case 0x0D:
             case 0x0E:
             case 0x0F:
             case 0x10:
             case 0x11:
             case 0x12:
             case 0x13:
             case 0x14:
             case 0x15:
             case 0x16:
             case 0x17:
                 return sax->number_unsigned(static_cast<number_unsigned_t>(current));
 
             case 0x18: // Unsigned integer (one-byte uint8_t follows)
             {
                 std::uint8_t number{};
                 return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);
             }
 
             case 0x19: // Unsigned integer (two-byte uint16_t follows)
             {
                 std::uint16_t number{};
                 return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);
             }
 
             case 0x1A: // Unsigned integer (four-byte uint32_t follows)
             {
                 std::uint32_t number{};
                 return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);
             }
 
             case 0x1B: // Unsigned integer (eight-byte uint64_t follows)
             {
                 std::uint64_t number{};
                 return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);
             }
 
             // Negative integer -1-0x00..-1-0x17 (-1..-24)
             case 0x20:
             case 0x21:
             case 0x22:
             case 0x23:
             case 0x24:
             case 0x25:
             case 0x26:
             case 0x27:
             case 0x28:
             case 0x29:
             case 0x2A:
             case 0x2B:
             case 0x2C:
             case 0x2D:
             case 0x2E:
             case 0x2F:
             case 0x30:
             case 0x31:
             case 0x32:
             case 0x33:
             case 0x34:
             case 0x35:
             case 0x36:
             case 0x37:
                 return sax->number_integer(static_cast<std::int8_t>(0x20 - 1 - current));
 
             case 0x38: // Negative integer (one-byte uint8_t follows)
             {
                 std::uint8_t number{};
                 return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1) - number);
             }
 
             case 0x39: // Negative integer -1-n (two-byte uint16_t follows)
             {
                 std::uint16_t number{};
                 return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1) - number);
             }
 
             case 0x3A: // Negative integer -1-n (four-byte uint32_t follows)
             {
                 std::uint32_t number{};
                 return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1) - number);
             }
 
             case 0x3B: // Negative integer -1-n (eight-byte uint64_t follows)
             {
                 std::uint64_t number{};
                 return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1)
                         - static_cast<number_integer_t>(number));
             }
 
             // Binary data (0x00..0x17 bytes follow)
             case 0x40:
             case 0x41:
             case 0x42:
             case 0x43:
             case 0x44:
             case 0x45:
             case 0x46:
             case 0x47:
             case 0x48:
             case 0x49:
             case 0x4A:
             case 0x4B:
             case 0x4C:
             case 0x4D:
             case 0x4E:
             case 0x4F:
             case 0x50:
             case 0x51:
             case 0x52:
             case 0x53:
             case 0x54:
             case 0x55:
             case 0x56:
             case 0x57:
             case 0x58: // Binary data (one-byte uint8_t for n follows)
             case 0x59: // Binary data (two-byte uint16_t for n follow)
             case 0x5A: // Binary data (four-byte uint32_t for n follow)
             case 0x5B: // Binary data (eight-byte uint64_t for n follow)
             case 0x5F: // Binary data (indefinite length)
             {
                 binary_t b;
                 return get_cbor_binary(b) && sax->binary(b);
             }
 
             // UTF-8 string (0x00..0x17 bytes follow)
             case 0x60:
             case 0x61:
             case 0x62:
             case 0x63:
             case 0x64:
             case 0x65:
             case 0x66:
             case 0x67:
             case 0x68:
             case 0x69:
             case 0x6A:
             case 0x6B:
             case 0x6C:
             case 0x6D:
             case 0x6E:
             case 0x6F:
             case 0x70:
             case 0x71:
             case 0x72:
             case 0x73:
             case 0x74:
             case 0x75:
             case 0x76:
             case 0x77:
             case 0x78: // UTF-8 string (one-byte uint8_t for n follows)
             case 0x79: // UTF-8 string (two-byte uint16_t for n follow)
             case 0x7A: // UTF-8 string (four-byte uint32_t for n follow)
             case 0x7B: // UTF-8 string (eight-byte uint64_t for n follow)
             case 0x7F: // UTF-8 string (indefinite length)
             {
                 string_t s;
                 return get_cbor_string(s) && sax->string(s);
             }
 
             // array (0x00..0x17 data items follow)
             case 0x80:
             case 0x81:
             case 0x82:
             case 0x83:
             case 0x84:
             case 0x85:
             case 0x86:
             case 0x87:
             case 0x88:
             case 0x89:
             case 0x8A:
             case 0x8B:
             case 0x8C:
             case 0x8D:
             case 0x8E:
             case 0x8F:
             case 0x90:
             case 0x91:
             case 0x92:
             case 0x93:
             case 0x94:
             case 0x95:
             case 0x96:
             case 0x97:
                 return get_cbor_array(static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x1Fu), tag_handler);
 
             case 0x98: // array (one-byte uint8_t for n follows)
             {
                 std::uint8_t len{};
                 return get_number(input_format_t::cbor, len) && get_cbor_array(static_cast<std::size_t>(len), tag_handler);
             }
 
             case 0x99: // array (two-byte uint16_t for n follow)
             {
                 std::uint16_t len{};
                 return get_number(input_format_t::cbor, len) && get_cbor_array(static_cast<std::size_t>(len), tag_handler);
             }
 
             case 0x9A: // array (four-byte uint32_t for n follow)
             {
                 std::uint32_t len{};
                 return get_number(input_format_t::cbor, len) && get_cbor_array(static_cast<std::size_t>(len), tag_handler);
             }
 
             case 0x9B: // array (eight-byte uint64_t for n follow)
             {
                 std::uint64_t len{};
                 return get_number(input_format_t::cbor, len) && get_cbor_array(detail::conditional_static_cast<std::size_t>(len), tag_handler);
             }
 
             case 0x9F: // array (indefinite length)
                 return get_cbor_array(static_cast<std::size_t>(-1), tag_handler);
 
             // map (0x00..0x17 pairs of data items follow)
             case 0xA0:
             case 0xA1:
             case 0xA2:
             case 0xA3:
             case 0xA4:
             case 0xA5:
             case 0xA6:
             case 0xA7:
             case 0xA8:
             case 0xA9:
             case 0xAA:
             case 0xAB:
             case 0xAC:
             case 0xAD:
             case 0xAE:
             case 0xAF:
             case 0xB0:
             case 0xB1:
             case 0xB2:
             case 0xB3:
             case 0xB4:
             case 0xB5:
             case 0xB6:
             case 0xB7:
                 return get_cbor_object(static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x1Fu), tag_handler);
 
             case 0xB8: // map (one-byte uint8_t for n follows)
             {
                 std::uint8_t len{};
                 return get_number(input_format_t::cbor, len) && get_cbor_object(static_cast<std::size_t>(len), tag_handler);
             }
 
             case 0xB9: // map (two-byte uint16_t for n follow)
             {
                 std::uint16_t len{};
                 return get_number(input_format_t::cbor, len) && get_cbor_object(static_cast<std::size_t>(len), tag_handler);
             }
 
             case 0xBA: // map (four-byte uint32_t for n follow)
             {
                 std::uint32_t len{};
                 return get_number(input_format_t::cbor, len) && get_cbor_object(static_cast<std::size_t>(len), tag_handler);
             }
 
             case 0xBB: // map (eight-byte uint64_t for n follow)
             {
                 std::uint64_t len{};
                 return get_number(input_format_t::cbor, len) && get_cbor_object(detail::conditional_static_cast<std::size_t>(len), tag_handler);
             }
 
             case 0xBF: // map (indefinite length)
                 return get_cbor_object(static_cast<std::size_t>(-1), tag_handler);
 
             case 0xC6: // tagged item
             case 0xC7:
             case 0xC8:
             case 0xC9:
             case 0xCA:
             case 0xCB:
             case 0xCC:
             case 0xCD:
             case 0xCE:
             case 0xCF:
             case 0xD0:
             case 0xD1:
             case 0xD2:
             case 0xD3:
             case 0xD4:
             case 0xD8: // tagged item (1 bytes follow)
             case 0xD9: // tagged item (2 bytes follow)
             case 0xDA: // tagged item (4 bytes follow)
             case 0xDB: // tagged item (8 bytes follow)
             {
                 switch (tag_handler)
                 {
                     case cbor_tag_handler_t::error:
                     {
                         auto last_token = get_token_string();
                         return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                                 exception_message(input_format_t::cbor, concat("invalid byte: 0x", last_token), "value"), nullptr));
                     }
 
                     case cbor_tag_handler_t::ignore:
                     {
                         // ignore binary subtype
                         switch (current)
                         {
                             case 0xD8:
                             {
                                 std::uint8_t subtype_to_ignore{};
                                 get_number(input_format_t::cbor, subtype_to_ignore);
                                 break;
                             }
                             case 0xD9:
                             {
                                 std::uint16_t subtype_to_ignore{};
                                 get_number(input_format_t::cbor, subtype_to_ignore);
                                 break;
                             }
                             case 0xDA:
                             {
                                 std::uint32_t subtype_to_ignore{};
                                 get_number(input_format_t::cbor, subtype_to_ignore);
                                 break;
                             }
                             case 0xDB:
                             {
                                 std::uint64_t subtype_to_ignore{};
                                 get_number(input_format_t::cbor, subtype_to_ignore);
                                 break;
                             }
                             default:
                                 break;
                         }
                         return parse_cbor_internal(true, tag_handler);
                     }
 
                     case cbor_tag_handler_t::store:
                     {
                         binary_t b;
                         // use binary subtype and store in binary container
                         switch (current)
                         {
                             case 0xD8:
                             {
                                 std::uint8_t subtype{};
                                 get_number(input_format_t::cbor, subtype);
                                 b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));
                                 break;
                             }
                             case 0xD9:
                             {
                                 std::uint16_t subtype{};
                                 get_number(input_format_t::cbor, subtype);
                                 b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));
                                 break;
                             }
                             case 0xDA:
                             {
                                 std::uint32_t subtype{};
                                 get_number(input_format_t::cbor, subtype);
                                 b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));
                                 break;
                             }
                             case 0xDB:
                             {
                                 std::uint64_t subtype{};
                                 get_number(input_format_t::cbor, subtype);
                                 b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));
                                 break;
                             }
                             default:
                                 return parse_cbor_internal(true, tag_handler);
                         }
                         get();
                         return get_cbor_binary(b) && sax->binary(b);
                     }
 
                     default:                 // LCOV_EXCL_LINE
                         JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
                         return false;        // LCOV_EXCL_LINE
                 }
             }
 
             case 0xF4: // false
                 return sax->boolean(false);
 
             case 0xF5: // true
                 return sax->boolean(true);
 
             case 0xF6: // null
                 return sax->null();
 
             case 0xF9: // Half-Precision Float (two-byte IEEE 754)
             {
                 const auto byte1_raw = get();
                 if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, "number")))
                 {
                     return false;
                 }
                 const auto byte2_raw = get();
                 if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, "number")))
                 {
                     return false;
                 }
 
                 const auto byte1 = static_cast<unsigned char>(byte1_raw);
                 const auto byte2 = static_cast<unsigned char>(byte2_raw);
 
                 // code from RFC 7049, Appendix D, Figure 3:
                 // As half-precision floating-point numbers were only added
                 // to IEEE 754 in 2008, today's programming platforms often
                 // still only have limited support for them. It is very
                 // easy to include at least decoding support for them even
                 // without such support. An example of a small decoder for
                 // half-precision floating-point numbers in the C language
                 // is shown in Fig. 3.
                 const auto half = static_cast<unsigned int>((byte1 << 8u) + byte2);
                 const double val = [&half]
                 {
                     const int exp = (half >> 10u) & 0x1Fu;
                     const unsigned int mant = half & 0x3FFu;
                     JSON_ASSERT(0 <= exp&& exp <= 32);
                     JSON_ASSERT(mant <= 1024);
                     switch (exp)
                     {
                         case 0:
                             return std::ldexp(mant, -24);
                         case 31:
                             return (mant == 0)
                             ? std::numeric_limits<double>::infinity()
                             : std::numeric_limits<double>::quiet_NaN();
                         default:
                             return std::ldexp(mant + 1024, exp - 25);
                     }
                 }();
                 return sax->number_float((half & 0x8000u) != 0
                                          ? static_cast<number_float_t>(-val)
                                          : static_cast<number_float_t>(val), "");
             }
 
             case 0xFA: // Single-Precision Float (four-byte IEEE 754)
             {
                 float number{};
                 return get_number(input_format_t::cbor, number) && sax->number_float(static_cast<number_float_t>(number), "");
             }
 
             case 0xFB: // Double-Precision Float (eight-byte IEEE 754)
             {
                 double number{};
                 return get_number(input_format_t::cbor, number) && sax->number_float(static_cast<number_float_t>(number), "");
             }
 
             default: // anything else (0xFF is handled inside the other types)
             {
                 auto last_token = get_token_string();
                 return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                         exception_message(input_format_t::cbor, concat("invalid byte: 0x", last_token), "value"), nullptr));
             }
         }
     }
 
     /*!
     @brief reads a CBOR string
 
     This function first reads starting bytes to determine the expected
     string length and then copies this number of bytes into a string.
     Additionally, CBOR's strings with indefinite lengths are supported.
 
     @param[out] result  created string
 
     @return whether string creation completed
     */
     bool get_cbor_string(string_t& result)
     {
         if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, "string")))
         {
             return false;
         }
 
         switch (current)
         {
             // UTF-8 string (0x00..0x17 bytes follow)
             case 0x60:
             case 0x61:
             case 0x62:
             case 0x63:
             case 0x64:
             case 0x65:
             case 0x66:
             case 0x67:
             case 0x68:
             case 0x69:
             case 0x6A:
             case 0x6B:
             case 0x6C:
             case 0x6D:
             case 0x6E:
             case 0x6F:
             case 0x70:
             case 0x71:
             case 0x72:
             case 0x73:
             case 0x74:
             case 0x75:
             case 0x76:
             case 0x77:
             {
                 return get_string(input_format_t::cbor, static_cast<unsigned int>(current) & 0x1Fu, result);
             }
 
             case 0x78: // UTF-8 string (one-byte uint8_t for n follows)
             {
                 std::uint8_t len{};
                 return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);
             }
 
             case 0x79: // UTF-8 string (two-byte uint16_t for n follow)
             {
                 std::uint16_t len{};
                 return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);
             }
 
             case 0x7A: // UTF-8 string (four-byte uint32_t for n follow)
             {
                 std::uint32_t len{};
                 return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);
             }
 
             case 0x7B: // UTF-8 string (eight-byte uint64_t for n follow)
             {
                 std::uint64_t len{};
                 return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);
             }
 
             case 0x7F: // UTF-8 string (indefinite length)
             {
                 while (get() != 0xFF)
                 {
                     string_t chunk;
                     if (!get_cbor_string(chunk))
                     {
                         return false;
                     }
                     result.append(chunk);
                 }
                 return true;
             }
 
             default:
             {
                 auto last_token = get_token_string();
                 return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,
                                         exception_message(input_format_t::cbor, concat("expected length specification (0x60-0x7B) or indefinite string type (0x7F); last byte: 0x", last_token), "string"), nullptr));
             }
         }
     }
 
     /*!
     @brief reads a CBOR byte array
 
     This function first reads starting bytes to determine the expected
     byte array length and then copies this number of bytes into the byte array.
     Additionally, CBOR's byte arrays with indefinite lengths are supported.
 
     @param[out] result  created byte array
 
     @return whether byte array creation completed
     */
     bool get_cbor_binary(binary_t& result)
     {
         if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, "binary")))
         {
             return false;
         }
 
         switch (current)
         {
             // Binary data (0x00..0x17 bytes follow)
             case 0x40:
             case 0x41:
             case 0x42:
             case 0x43:
             case 0x44:
             case 0x45:
             case 0x46:
             case 0x47:
             case 0x48:
             case 0x49:
             case 0x4A:
             case 0x4B:
             case 0x4C:
             case 0x4D:
             case 0x4E:
             case 0x4F:
             case 0x50:
             case 0x51:
             case 0x52:
             case 0x53:
             case 0x54:
             case 0x55:
             case 0x56:
             case 0x57:
             {
                 return get_binary(input_format_t::cbor, static_cast<unsigned int>(current) & 0x1Fu, result);
             }
 
             case 0x58: // Binary data (one-byte uint8_t for n follows)
             {
                 std::uint8_t len{};
                 return get_number(input_format_t::cbor, len) &&
                        get_binary(input_format_t::cbor, len, result);
             }
 
             case 0x59: // Binary data (two-byte uint16_t for n follow)
             {
                 std::uint16_t len{};
                 return get_number(input_format_t::cbor, len) &&
                        get_binary(input_format_t::cbor, len, result);
             }
 
             case 0x5A: // Binary data (four-byte uint32_t for n follow)
             {
                 std::uint32_t len{};
                 return get_number(input_format_t::cbor, len) &&
                        get_binary(input_format_t::cbor, len, result);
             }
 
             case 0x5B: // Binary data (eight-byte uint64_t for n follow)
             {
                 std::uint64_t len{};
                 return get_number(input_format_t::cbor, len) &&
                        get_binary(input_format_t::cbor, len, result);
             }
 
             case 0x5F: // Binary data (indefinite length)
             {
                 while (get() != 0xFF)
                 {
                     binary_t chunk;
                     if (!get_cbor_binary(chunk))
                     {
                         return false;
                     }
                     result.insert(result.end(), chunk.begin(), chunk.end());
                 }
                 return true;
             }
 
             default:
             {
                 auto last_token = get_token_string();
                 return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,
                                         exception_message(input_format_t::cbor, concat("expected length specification (0x40-0x5B) or indefinite binary array type (0x5F); last byte: 0x", last_token), "binary"), nullptr));
             }
         }
     }
 
     /*!
     @param[in] len  the length of the array or static_cast<std::size_t>(-1) for an
                     array of indefinite size
     @param[in] tag_handler how CBOR tags should be treated
     @return whether array creation completed
     */
     bool get_cbor_array(const std::size_t len,
                         const cbor_tag_handler_t tag_handler)
     {
         if (JSON_HEDLEY_UNLIKELY(!sax->start_array(len)))
         {
             return false;
         }
 
         if (len != static_cast<std::size_t>(-1))
         {
             for (std::size_t i = 0; i < len; ++i)
             {
                 if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(true, tag_handler)))
                 {
                     return false;
                 }
             }
         }
         else
         {
             while (get() != 0xFF)
             {
                 if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(false, tag_handler)))
                 {
                     return false;
                 }
             }
         }
 
         return sax->end_array();
     }
 
     /*!
     @param[in] len  the length of the object or static_cast<std::size_t>(-1) for an
                     object of indefinite size
     @param[in] tag_handler how CBOR tags should be treated
     @return whether object creation completed
     */
     bool get_cbor_object(const std::size_t len,
                          const cbor_tag_handler_t tag_handler)
     {
         if (JSON_HEDLEY_UNLIKELY(!sax->start_object(len)))
         {
             return false;
         }
 
         if (len != 0)
         {
             string_t key;
             if (len != static_cast<std::size_t>(-1))
             {
                 for (std::size_t i = 0; i < len; ++i)
                 {
                     get();
                     if (JSON_HEDLEY_UNLIKELY(!get_cbor_string(key) || !sax->key(key)))
                     {
                         return false;
                     }
 
                     if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(true, tag_handler)))
                     {
                         return false;
                     }
                     key.clear();
                 }
             }
             else
             {
                 while (get() != 0xFF)
                 {
                     if (JSON_HEDLEY_UNLIKELY(!get_cbor_string(key) || !sax->key(key)))
                     {
                         return false;
                     }
 
                     if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(true, tag_handler)))
                     {
                         return false;
                     }
                     key.clear();
                 }
             }
         }
 
         return sax->end_object();
     }
 
     /////////////
     // MsgPack //
     /////////////
 
     /*!
     @return whether a valid MessagePack value was passed to the SAX parser
     */
     bool parse_msgpack_internal()
     {
         switch (get())
         {
             // EOF
             case std::char_traits<char_type>::eof():
                 return unexpect_eof(input_format_t::msgpack, "value");
 
             // positive fixint
             case 0x00:
             case 0x01:
             case 0x02:
             case 0x03:
             case 0x04:
             case 0x05:
             case 0x06:
             case 0x07:
             case 0x08:
             case 0x09:
             case 0x0A:
             case 0x0B:
             case 0x0C:
             case 0x0D:
             case 0x0E:
             case 0x0F:
             case 0x10:
             case 0x11:
             case 0x12:
             case 0x13:
             case 0x14:
             case 0x15:
             case 0x16:
             case 0x17:
             case 0x18:
             case 0x19:
             case 0x1A:
             case 0x1B:
             case 0x1C:
             case 0x1D:
             case 0x1E:
             case 0x1F:
             case 0x20:
             case 0x21:
             case 0x22:
             case 0x23:
             case 0x24:
             case 0x25:
             case 0x26:
             case 0x27:
             case 0x28:
             case 0x29:
             case 0x2A:
             case 0x2B:
             case 0x2C:
             case 0x2D:
             case 0x2E:
             case 0x2F:
             case 0x30:
             case 0x31:
             case 0x32:
             case 0x33:
             case 0x34:
             case 0x35:
             case 0x36:
             case 0x37:
             case 0x38:
             case 0x39:
             case 0x3A:
             case 0x3B:
             case 0x3C:
             case 0x3D:
             case 0x3E:
             case 0x3F:
             case 0x40:
             case 0x41:
             case 0x42:
             case 0x43:
             case 0x44:
             case 0x45:
             case 0x46:
             case 0x47:
             case 0x48:
             case 0x49:
             case 0x4A:
             case 0x4B:
             case 0x4C:
             case 0x4D:
             case 0x4E:
             case 0x4F:
             case 0x50:
             case 0x51:
             case 0x52:
             case 0x53:
             case 0x54:
             case 0x55:
             case 0x56:
             case 0x57:
             case 0x58:
             case 0x59:
             case 0x5A:
             case 0x5B:
             case 0x5C:
             case 0x5D:
             case 0x5E:
             case 0x5F:
             case 0x60:
             case 0x61:
             case 0x62:
             case 0x63:
             case 0x64:
             case 0x65:
             case 0x66:
             case 0x67:
             case 0x68:
             case 0x69:
             case 0x6A:
             case 0x6B:
             case 0x6C:
             case 0x6D:
             case 0x6E:
             case 0x6F:
             case 0x70:
             case 0x71:
             case 0x72:
             case 0x73:
             case 0x74:
             case 0x75:
             case 0x76:
             case 0x77:
             case 0x78:
             case 0x79:
             case 0x7A:
             case 0x7B:
             case 0x7C:
             case 0x7D:
             case 0x7E:
             case 0x7F:
                 return sax->number_unsigned(static_cast<number_unsigned_t>(current));
 
             // fixmap
             case 0x80:
             case 0x81:
             case 0x82:
             case 0x83:
             case 0x84:
             case 0x85:
             case 0x86:
             case 0x87:
             case 0x88:
             case 0x89:
             case 0x8A:
             case 0x8B:
             case 0x8C:
             case 0x8D:
             case 0x8E:
             case 0x8F:
                 return get_msgpack_object(static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x0Fu));
 
             // fixarray
             case 0x90:
             case 0x91:
             case 0x92:
             case 0x93:
             case 0x94:
             case 0x95:
             case 0x96:
             case 0x97:
             case 0x98:
             case 0x99:
             case 0x9A:
             case 0x9B:
             case 0x9C:
             case 0x9D:
             case 0x9E:
             case 0x9F:
                 return get_msgpack_array(static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x0Fu));
 
             // fixstr
             case 0xA0:
             case 0xA1:
             case 0xA2:
             case 0xA3:
             case 0xA4:
             case 0xA5:
             case 0xA6:
             case 0xA7:
             case 0xA8:
             case 0xA9:
             case 0xAA:
             case 0xAB:
             case 0xAC:
             case 0xAD:
             case 0xAE:
             case 0xAF:
             case 0xB0:
             case 0xB1:
             case 0xB2:
             case 0xB3:
             case 0xB4:
             case 0xB5:
             case 0xB6:
             case 0xB7:
             case 0xB8:
             case 0xB9:
             case 0xBA:
             case 0xBB:
             case 0xBC:
             case 0xBD:
             case 0xBE:
             case 0xBF:
             case 0xD9: // str 8
             case 0xDA: // str 16
             case 0xDB: // str 32
             {
                 string_t s;
                 return get_msgpack_string(s) && sax->string(s);
             }
 
             case 0xC0: // nil
                 return sax->null();
 
             case 0xC2: // false
                 return sax->boolean(false);
 
             case 0xC3: // true
                 return sax->boolean(true);
 
             case 0xC4: // bin 8
             case 0xC5: // bin 16
             case 0xC6: // bin 32
             case 0xC7: // ext 8
             case 0xC8: // ext 16
             case 0xC9: // ext 32
             case 0xD4: // fixext 1
             case 0xD5: // fixext 2
             case 0xD6: // fixext 4
             case 0xD7: // fixext 8
             case 0xD8: // fixext 16
             {
                 binary_t b;
                 return get_msgpack_binary(b) && sax->binary(b);
             }
 
             case 0xCA: // float 32
             {
                 float number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_float(static_cast<number_float_t>(number), "");
             }
 
             case 0xCB: // float 64
             {
                 double number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_float(static_cast<number_float_t>(number), "");
             }
 
             case 0xCC: // uint 8
             {
                 std::uint8_t number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);
             }
 
             case 0xCD: // uint 16
             {
                 std::uint16_t number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);
             }
 
             case 0xCE: // uint 32
             {
                 std::uint32_t number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);
             }
 
             case 0xCF: // uint 64
             {
                 std::uint64_t number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);
             }
 
             case 0xD0: // int 8
             {
                 std::int8_t number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_integer(number);
             }
 
             case 0xD1: // int 16
             {
                 std::int16_t number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_integer(number);
             }
 
             case 0xD2: // int 32
             {
                 std::int32_t number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_integer(number);
             }
 
             case 0xD3: // int 64
             {
                 std::int64_t number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_integer(number);
             }
 
             case 0xDC: // array 16
             {
                 std::uint16_t len{};
                 return get_number(input_format_t::msgpack, len) && get_msgpack_array(static_cast<std::size_t>(len));
             }
 
             case 0xDD: // array 32
             {
                 std::uint32_t len{};
                 return get_number(input_format_t::msgpack, len) && get_msgpack_array(static_cast<std::size_t>(len));
             }
 
             case 0xDE: // map 16
             {
                 std::uint16_t len{};
                 return get_number(input_format_t::msgpack, len) && get_msgpack_object(static_cast<std::size_t>(len));
             }
 
             case 0xDF: // map 32
             {
                 std::uint32_t len{};
                 return get_number(input_format_t::msgpack, len) && get_msgpack_object(static_cast<std::size_t>(len));
             }
 
             // negative fixint
             case 0xE0:
             case 0xE1:
             case 0xE2:
             case 0xE3:
             case 0xE4:
             case 0xE5:
             case 0xE6:
             case 0xE7:
             case 0xE8:
             case 0xE9:
             case 0xEA:
             case 0xEB:
             case 0xEC:
             case 0xED:
             case 0xEE:
             case 0xEF:
             case 0xF0:
             case 0xF1:
             case 0xF2:
             case 0xF3:
             case 0xF4:
             case 0xF5:
             case 0xF6:
             case 0xF7:
             case 0xF8:
             case 0xF9:
             case 0xFA:
             case 0xFB:
             case 0xFC:
             case 0xFD:
             case 0xFE:
             case 0xFF:
                 return sax->number_integer(static_cast<std::int8_t>(current));
 
             default: // anything else
             {
                 auto last_token = get_token_string();
                 return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                         exception_message(input_format_t::msgpack, concat("invalid byte: 0x", last_token), "value"), nullptr));
             }
         }
     }
 
     /*!
     @brief reads a MessagePack string
 
     This function first reads starting bytes to determine the expected
     string length and then copies this number of bytes into a string.
 
     @param[out] result  created string
 
     @return whether string creation completed
     */
     bool get_msgpack_string(string_t& result)
     {
         if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::msgpack, "string")))
         {
             return false;
         }
 
         switch (current)
         {
             // fixstr
             case 0xA0:
             case 0xA1:
             case 0xA2:
             case 0xA3:
             case 0xA4:
             case 0xA5:
             case 0xA6:
             case 0xA7:
             case 0xA8:
             case 0xA9:
             case 0xAA:
             case 0xAB:
             case 0xAC:
             case 0xAD:
             case 0xAE:
             case 0xAF:
             case 0xB0:
             case 0xB1:
             case 0xB2:
             case 0xB3:
             case 0xB4:
             case 0xB5:
             case 0xB6:
             case 0xB7:
             case 0xB8:
             case 0xB9:
             case 0xBA:
             case 0xBB:
             case 0xBC:
             case 0xBD:
             case 0xBE:
             case 0xBF:
             {
                 return get_string(input_format_t::msgpack, static_cast<unsigned int>(current) & 0x1Fu, result);
             }
 
             case 0xD9: // str 8
             {
                 std::uint8_t len{};
                 return get_number(input_format_t::msgpack, len) && get_string(input_format_t::msgpack, len, result);
             }
 
             case 0xDA: // str 16
             {
                 std::uint16_t len{};
                 return get_number(input_format_t::msgpack, len) && get_string(input_format_t::msgpack, len, result);
             }
 
             case 0xDB: // str 32
             {
                 std::uint32_t len{};
                 return get_number(input_format_t::msgpack, len) && get_string(input_format_t::msgpack, len, result);
             }
 
             default:
             {
                 auto last_token = get_token_string();
                 return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,
                                         exception_message(input_format_t::msgpack, concat("expected length specification (0xA0-0xBF, 0xD9-0xDB); last byte: 0x", last_token), "string"), nullptr));
             }
         }
     }
 
     /*!
     @brief reads a MessagePack byte array
 
     This function first reads starting bytes to determine the expected
     byte array length and then copies this number of bytes into a byte array.
 
     @param[out] result  created byte array
 
     @return whether byte array creation completed
     */
     bool get_msgpack_binary(binary_t& result)
     {
         // helper function to set the subtype
         auto assign_and_return_true = [&result](std::int8_t subtype)
         {
             result.set_subtype(static_cast<std::uint8_t>(subtype));
             return true;
         };
 
         switch (current)
         {
             case 0xC4: // bin 8
             {
                 std::uint8_t len{};
                 return get_number(input_format_t::msgpack, len) &&
                        get_binary(input_format_t::msgpack, len, result);
             }
 
             case 0xC5: // bin 16
             {
                 std::uint16_t len{};
                 return get_number(input_format_t::msgpack, len) &&
                        get_binary(input_format_t::msgpack, len, result);
             }
 
             case 0xC6: // bin 32
             {
                 std::uint32_t len{};
                 return get_number(input_format_t::msgpack, len) &&
                        get_binary(input_format_t::msgpack, len, result);
             }
 
             case 0xC7: // ext 8
             {
                 std::uint8_t len{};
                 std::int8_t subtype{};
                 return get_number(input_format_t::msgpack, len) &&
                        get_number(input_format_t::msgpack, subtype) &&
                        get_binary(input_format_t::msgpack, len, result) &&
                        assign_and_return_true(subtype);
             }
 
             case 0xC8: // ext 16
             {
                 std::uint16_t len{};
                 std::int8_t subtype{};
                 return get_number(input_format_t::msgpack, len) &&
                        get_number(input_format_t::msgpack, subtype) &&
                        get_binary(input_format_t::msgpack, len, result) &&
                        assign_and_return_true(subtype);
             }
 
             case 0xC9: // ext 32
             {
                 std::uint32_t len{};
                 std::int8_t subtype{};
                 return get_number(input_format_t::msgpack, len) &&
                        get_number(input_format_t::msgpack, subtype) &&
                        get_binary(input_format_t::msgpack, len, result) &&
                        assign_and_return_true(subtype);
             }
 
             case 0xD4: // fixext 1
             {
                 std::int8_t subtype{};
                 return get_number(input_format_t::msgpack, subtype) &&
                        get_binary(input_format_t::msgpack, 1, result) &&
                        assign_and_return_true(subtype);
             }
 
             case 0xD5: // fixext 2
             {
                 std::int8_t subtype{};
                 return get_number(input_format_t::msgpack, subtype) &&
                        get_binary(input_format_t::msgpack, 2, result) &&
                        assign_and_return_true(subtype);
             }
 
             case 0xD6: // fixext 4
             {
                 std::int8_t subtype{};
                 return get_number(input_format_t::msgpack, subtype) &&
                        get_binary(input_format_t::msgpack, 4, result) &&
                        assign_and_return_true(subtype);
             }
 
             case 0xD7: // fixext 8
             {
                 std::int8_t subtype{};
                 return get_number(input_format_t::msgpack, subtype) &&
                        get_binary(input_format_t::msgpack, 8, result) &&
                        assign_and_return_true(subtype);
             }
 
             case 0xD8: // fixext 16
             {
                 std::int8_t subtype{};
                 return get_number(input_format_t::msgpack, subtype) &&
                        get_binary(input_format_t::msgpack, 16, result) &&
                        assign_and_return_true(subtype);
             }
 
             default:           // LCOV_EXCL_LINE
                 return false;  // LCOV_EXCL_LINE
         }
     }
 
     /*!
     @param[in] len  the length of the array
     @return whether array creation completed
     */
     bool get_msgpack_array(const std::size_t len)
     {
         if (JSON_HEDLEY_UNLIKELY(!sax->start_array(len)))
         {
             return false;
         }
 
         for (std::size_t i = 0; i < len; ++i)
         {
             if (JSON_HEDLEY_UNLIKELY(!parse_msgpack_internal()))
             {
                 return false;
             }
         }
 
         return sax->end_array();
     }
 
     /*!
     @param[in] len  the length of the object
     @return whether object creation completed
     */
     bool get_msgpack_object(const std::size_t len)
     {
         if (JSON_HEDLEY_UNLIKELY(!sax->start_object(len)))
         {
             return false;
         }
 
         string_t key;
         for (std::size_t i = 0; i < len; ++i)
         {
             get();
             if (JSON_HEDLEY_UNLIKELY(!get_msgpack_string(key) || !sax->key(key)))
             {
                 return false;
             }
 
             if (JSON_HEDLEY_UNLIKELY(!parse_msgpack_internal()))
             {
                 return false;
             }
             key.clear();
         }
 
         return sax->end_object();
     }
 
     ////////////
     // UBJSON //
     ////////////
 
     /*!
     @param[in] get_char  whether a new character should be retrieved from the
                          input (true, default) or whether the last read
                          character should be considered instead
 
     @return whether a valid UBJSON value was passed to the SAX parser
     */
     bool parse_ubjson_internal(const bool get_char = true)
     {
         return get_ubjson_value(get_char ? get_ignore_noop() : current);
     }
 
     /*!
     @brief reads a UBJSON string
 
     This function is either called after reading the 'S' byte explicitly
     indicating a string, or in case of an object key where the 'S' byte can be
     left out.
 
     @param[out] result   created string
     @param[in] get_char  whether a new character should be retrieved from the
                          input (true, default) or whether the last read
                          character should be considered instead
 
     @return whether string creation completed
     */
     bool get_ubjson_string(string_t& result, const bool get_char = true)
     {
         if (get_char)
         {
             get();  // TODO(niels): may we ignore N here?
         }
 
         if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "value")))
         {
             return false;
         }
 
         switch (current)
         {
             case 'U':
             {
                 std::uint8_t len{};
                 return get_number(input_format, len) && get_string(input_format, len, result);
             }
 
             case 'i':
             {
                 std::int8_t len{};
                 return get_number(input_format, len) && get_string(input_format, len, result);
             }
 
             case 'I':
             {
                 std::int16_t len{};
                 return get_number(input_format, len) && get_string(input_format, len, result);
             }
 
             case 'l':
             {
                 std::int32_t len{};
                 return get_number(input_format, len) && get_string(input_format, len, result);
             }
 
             case 'L':
             {
                 std::int64_t len{};
                 return get_number(input_format, len) && get_string(input_format, len, result);
             }
 
             case 'u':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint16_t len{};
                 return get_number(input_format, len) && get_string(input_format, len, result);
             }
 
             case 'm':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint32_t len{};
                 return get_number(input_format, len) && get_string(input_format, len, result);
             }
 
             case 'M':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint64_t len{};
                 return get_number(input_format, len) && get_string(input_format, len, result);
             }
 
             default:
                 break;
         }
         auto last_token = get_token_string();
         std::string message;
 
         if (input_format != input_format_t::bjdata)
         {
             message = "expected length type specification (U, i, I, l, L); last byte: 0x" + last_token;
         }
         else
         {
             message = "expected length type specification (U, i, u, I, m, l, M, L); last byte: 0x" + last_token;
         }
         return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format, message, "string"), nullptr));
     }
 
     /*!
     @param[out] dim  an integer vector storing the ND array dimensions
     @return whether reading ND array size vector is successful
     */
     bool get_ubjson_ndarray_size(std::vector<size_t>& dim)
     {
         std::pair<std::size_t, char_int_type> size_and_type;
         size_t dimlen = 0;
         bool is_ndarray = false;
 
         if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_type(size_and_type)))
         {
             return false;
         }
 
         if (size_and_type.first != string_t::npos)
         {
             if (size_and_type.second != 0)
             {
                 if (size_and_type.second != 'N')
                 {
                     for (std::size_t i = 0; i < size_and_type.first; ++i)
                     {
                         if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_value(dimlen, is_ndarray, size_and_type.second)))
                         {
                             return false;
                         }
                         dim.push_back(dimlen);
                     }
                 }
             }
             else
             {
                 for (std::size_t i = 0; i < size_and_type.first; ++i)
                 {
                     if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_value(dimlen, is_ndarray)))
                     {
                         return false;
                     }
                     dim.push_back(dimlen);
                 }
             }
         }
         else
         {
             while (current != ']')
             {
                 if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_value(dimlen, is_ndarray, current)))
                 {
                     return false;
                 }
                 dim.push_back(dimlen);
                 get_ignore_noop();
             }
         }
         return true;
     }
 
     /*!
     @param[out] result  determined size
     @return whether size determination completed
     */
     bool get_ubjson_size_value(std::size_t& result, bool& is_ndarray, char_int_type prefix = 0)
     {
         is_ndarray = false;
         if (prefix == 0)
         {
             prefix = get_ignore_noop();
         }
 
         switch (prefix)
         {
             case 'U':
             {
                 std::uint8_t number{};
                 if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                 {
                     return false;
                 }
                 result = static_cast<std::size_t>(number);
                 return true;
             }
 
             case 'i':
             {
                 std::int8_t number{};
                 if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                 {
                     return false;
                 }
+                if (number < 0)
+                {
+                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,
+                                            exception_message(input_format, "count in an optimized container must be positive", "size"), nullptr));
+                }
                 result = static_cast<std::size_t>(number); // NOLINT(bugprone-signed-char-misuse,cert-str34-c): number is not a char
                 return true;
             }
 
             case 'I':
             {
                 std::int16_t number{};
                 if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                 {
                     return false;
                 }
+                if (number < 0)
+                {
+                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,
+                                            exception_message(input_format, "count in an optimized container must be positive", "size"), nullptr));
+                }
                 result = static_cast<std::size_t>(number);
                 return true;
             }
 
             case 'l':
             {
                 std::int32_t number{};
                 if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                 {
                     return false;
                 }
+                if (number < 0)
+                {
+                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,
+                                            exception_message(input_format, "count in an optimized container must be positive", "size"), nullptr));
+                }
                 result = static_cast<std::size_t>(number);
                 return true;
             }
 
             case 'L':
             {
                 std::int64_t number{};
                 if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                 {
                     return false;
                 }
+                if (number < 0)
+                {
+                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,
+                                            exception_message(input_format, "count in an optimized container must be positive", "size"), nullptr));
+                }
                 result = static_cast<std::size_t>(number);
                 return true;
             }
 
             case 'u':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint16_t number{};
                 if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                 {
                     return false;
                 }
                 result = static_cast<std::size_t>(number);
                 return true;
             }
 
             case 'm':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint32_t number{};
                 if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                 {
                     return false;
                 }
                 result = static_cast<std::size_t>(number);
                 return true;
             }
 
             case 'M':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint64_t number{};
                 if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                 {
                     return false;
                 }
                 result = detail::conditional_static_cast<std::size_t>(number);
                 return true;
             }
 
             case '[':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::vector<size_t> dim;
                 if (JSON_HEDLEY_UNLIKELY(!get_ubjson_ndarray_size(dim)))
                 {
                     return false;
                 }
                 if (dim.size() == 1 || (dim.size() == 2 && dim.at(0) == 1)) // return normal array size if 1D row vector
                 {
                     result = dim.at(dim.size() - 1);
                     return true;
                 }
                 if (!dim.empty())  // if ndarray, convert to an object in JData annotated array format
                 {
+                    for (auto i : dim) // test if any dimension in an ndarray is 0, if so, return a 1D empty container
+                    {
+                        if ( i == 0 )
+                        {
+                            result = 0;
+                            return true;
+                        }
+                    }
+
                     string_t key = "_ArraySize_";
                     if (JSON_HEDLEY_UNLIKELY(!sax->start_object(3) || !sax->key(key) || !sax->start_array(dim.size())))
                     {
                         return false;
                     }
                     result = 1;
                     for (auto i : dim)
                     {
                         result *= i;
                         if (JSON_HEDLEY_UNLIKELY(!sax->number_integer(static_cast<number_integer_t>(i))))
                         {
                             return false;
                         }
                     }
                     is_ndarray = true;
                     return sax->end_array();
                 }
                 result = 0;
                 return true;
             }
 
             default:
                 break;
         }
         auto last_token = get_token_string();
         std::string message;
 
         if (input_format != input_format_t::bjdata)
         {
             message = "expected length type specification (U, i, I, l, L) after '#'; last byte: 0x" + last_token;
         }
         else
         {
             message = "expected length type specification (U, i, u, I, m, l, M, L) after '#'; last byte: 0x" + last_token;
         }
         return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format, message, "size"), nullptr));
     }
 
     /*!
     @brief determine the type and size for a container
 
     In the optimized UBJSON format, a type and a size can be provided to allow
     for a more compact representation.
 
     @param[out] result  pair of the size and the type
 
     @return whether pair creation completed
     */
     bool get_ubjson_size_type(std::pair<std::size_t, char_int_type>& result)
     {
         bool is_ndarray = false;
         result.first = string_t::npos; // size
         result.second = 0; // type
 
         get_ignore_noop();
 
         if (current == '$')
         {
             std::vector<char_int_type> bjdx = {'[', '{', 'S', 'H', 'T', 'F', 'N', 'Z'}; // excluded markers in bjdata optimized type
 
             result.second = get();  // must not ignore 'N', because 'N' maybe the type
             if (JSON_HEDLEY_UNLIKELY( input_format == input_format_t::bjdata && std::find(bjdx.begin(), bjdx.end(), result.second) != bjdx.end() ))
             {
                 auto last_token = get_token_string();
                 return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                         exception_message(input_format, concat("marker 0x", last_token, " is not a permitted optimized array type"), "type"), nullptr));
             }
 
             if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "type")))
             {
                 return false;
             }
 
             get_ignore_noop();
             if (JSON_HEDLEY_UNLIKELY(current != '#'))
             {
                 if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "value")))
                 {
                     return false;
                 }
                 auto last_token = get_token_string();
                 return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                         exception_message(input_format, concat("expected '#' after type information; last byte: 0x", last_token), "size"), nullptr));
             }
 
             bool is_error = get_ubjson_size_value(result.first, is_ndarray);
             if (input_format == input_format_t::bjdata && is_ndarray)
             {
                 result.second |= (1 << 8); // use bit 8 to indicate ndarray, all UBJSON and BJData markers should be ASCII letters
             }
             return is_error;
         }
 
         if (current == '#')
         {
             bool is_error = get_ubjson_size_value(result.first, is_ndarray);
             if (input_format == input_format_t::bjdata && is_ndarray)
             {
                 result.second |= (1 << 8); // use bit 8 to indicate ndarray, all UBJSON and BJData markers should be ASCII letters
             }
             return is_error;
         }
 
         return true;
     }
 
     /*!
     @param prefix  the previously read or set type prefix
     @return whether value creation completed
     */
     bool get_ubjson_value(const char_int_type prefix)
     {
         switch (prefix)
         {
             case std::char_traits<char_type>::eof():  // EOF
                 return unexpect_eof(input_format, "value");
 
             case 'T':  // true
                 return sax->boolean(true);
             case 'F':  // false
                 return sax->boolean(false);
 
             case 'Z':  // null
                 return sax->null();
 
             case 'U':
             {
                 std::uint8_t number{};
                 return get_number(input_format, number) && sax->number_unsigned(number);
             }
 
             case 'i':
             {
                 std::int8_t number{};
                 return get_number(input_format, number) && sax->number_integer(number);
             }
 
             case 'I':
             {
                 std::int16_t number{};
                 return get_number(input_format, number) && sax->number_integer(number);
             }
 
             case 'l':
             {
                 std::int32_t number{};
                 return get_number(input_format, number) && sax->number_integer(number);
             }
 
             case 'L':
             {
                 std::int64_t number{};
                 return get_number(input_format, number) && sax->number_integer(number);
             }
 
             case 'u':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint16_t number{};
                 return get_number(input_format, number) && sax->number_unsigned(number);
             }
 
             case 'm':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint32_t number{};
                 return get_number(input_format, number) && sax->number_unsigned(number);
             }
 
             case 'M':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint64_t number{};
                 return get_number(input_format, number) && sax->number_unsigned(number);
             }
 
             case 'h':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 const auto byte1_raw = get();
                 if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "number")))
                 {
                     return false;
                 }
                 const auto byte2_raw = get();
                 if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "number")))
                 {
                     return false;
                 }
 
                 const auto byte1 = static_cast<unsigned char>(byte1_raw);
                 const auto byte2 = static_cast<unsigned char>(byte2_raw);
 
                 // code from RFC 7049, Appendix D, Figure 3:
                 // As half-precision floating-point numbers were only added
                 // to IEEE 754 in 2008, today's programming platforms often
                 // still only have limited support for them. It is very
                 // easy to include at least decoding support for them even
                 // without such support. An example of a small decoder for
                 // half-precision floating-point numbers in the C language
                 // is shown in Fig. 3.
                 const auto half = static_cast<unsigned int>((byte2 << 8u) + byte1);
                 const double val = [&half]
                 {
                     const int exp = (half >> 10u) & 0x1Fu;
                     const unsigned int mant = half & 0x3FFu;
                     JSON_ASSERT(0 <= exp&& exp <= 32);
                     JSON_ASSERT(mant <= 1024);
                     switch (exp)
                     {
                         case 0:
                             return std::ldexp(mant, -24);
                         case 31:
                             return (mant == 0)
                             ? std::numeric_limits<double>::infinity()
                             : std::numeric_limits<double>::quiet_NaN();
                         default:
                             return std::ldexp(mant + 1024, exp - 25);
                     }
                 }();
                 return sax->number_float((half & 0x8000u) != 0
                                          ? static_cast<number_float_t>(-val)
                                          : static_cast<number_float_t>(val), "");
             }
 
             case 'd':
             {
                 float number{};
                 return get_number(input_format, number) && sax->number_float(static_cast<number_float_t>(number), "");
             }
 
             case 'D':
             {
                 double number{};
                 return get_number(input_format, number) && sax->number_float(static_cast<number_float_t>(number), "");
             }
 
             case 'H':
             {
                 return get_ubjson_high_precision_number();
             }
 
             case 'C':  // char
             {
                 get();
                 if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "char")))
                 {
                     return false;
                 }
                 if (JSON_HEDLEY_UNLIKELY(current > 127))
                 {
                     auto last_token = get_token_string();
                     return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,
                                             exception_message(input_format, concat("byte after 'C' must be in range 0x00..0x7F; last byte: 0x", last_token), "char"), nullptr));
                 }
                 string_t s(1, static_cast<typename string_t::value_type>(current));
                 return sax->string(s);
             }
 
             case 'S':  // string
             {
                 string_t s;
                 return get_ubjson_string(s) && sax->string(s);
             }
 
             case '[':  // array
                 return get_ubjson_array();
 
             case '{':  // object
                 return get_ubjson_object();
 
             default: // anything else
                 break;
         }
         auto last_token = get_token_string();
         return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read, exception_message(input_format, "invalid byte: 0x" + last_token, "value"), nullptr));
     }
 
     /*!
     @return whether array creation completed
     */
     bool get_ubjson_array()
     {
         std::pair<std::size_t, char_int_type> size_and_type;
         if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_type(size_and_type)))
         {
             return false;
         }
 
         // if bit-8 of size_and_type.second is set to 1, encode bjdata ndarray as an object in JData annotated array format (https://github.com/NeuroJSON/jdata):
         // {"_ArrayType_" : "typeid", "_ArraySize_" : [n1, n2, ...], "_ArrayData_" : [v1, v2, ...]}
 
         if (input_format == input_format_t::bjdata && size_and_type.first != string_t::npos && (size_and_type.second & (1 << 8)) != 0)
         {
             std::map<char_int_type, string_t> bjdtype = {{'U', "uint8"},  {'i', "int8"},  {'u', "uint16"}, {'I', "int16"},
                 {'m', "uint32"}, {'l', "int32"}, {'M', "uint64"}, {'L', "int64"}, {'d', "single"}, {'D', "double"}, {'C', "char"}
             };
 
             size_and_type.second &= ~(static_cast<char_int_type>(1) << 8);  // use bit 8 to indicate ndarray, here we remove the bit to restore the type marker
 
             string_t key = "_ArrayType_";
             if (JSON_HEDLEY_UNLIKELY(bjdtype.count(size_and_type.second) == 0))
             {
                 auto last_token = get_token_string();
                 return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                         exception_message(input_format, "invalid byte: 0x" + last_token, "type"), nullptr));
             }
 
             if (JSON_HEDLEY_UNLIKELY(!sax->key(key) || !sax->string(bjdtype[size_and_type.second]) ))
             {
                 return false;
             }
 
             if (size_and_type.second == 'C')
             {
                 size_and_type.second = 'U';
             }
 
             key = "_ArrayData_";
             if (JSON_HEDLEY_UNLIKELY(!sax->key(key) || !sax->start_array(size_and_type.first) ))
             {
                 return false;
             }
 
             for (std::size_t i = 0; i < size_and_type.first; ++i)
             {
                 if (JSON_HEDLEY_UNLIKELY(!get_ubjson_value(size_and_type.second)))
                 {
                     return false;
                 }
             }
 
             return (sax->end_array() && sax->end_object());
         }
 
         if (size_and_type.first != string_t::npos)
         {
             if (JSON_HEDLEY_UNLIKELY(!sax->start_array(size_and_type.first)))
             {
                 return false;
             }
 
             if (size_and_type.second != 0)
             {
                 if (size_and_type.second != 'N')
                 {
                     for (std::size_t i = 0; i < size_and_type.first; ++i)
                     {
                         if (JSON_HEDLEY_UNLIKELY(!get_ubjson_value(size_and_type.second)))
                         {
                             return false;
                         }
                     }
                 }
             }
             else
             {
                 for (std::size_t i = 0; i < size_and_type.first; ++i)
                 {
                     if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal()))
                     {
                         return false;
                     }
                 }
             }
         }
         else
         {
             if (JSON_HEDLEY_UNLIKELY(!sax->start_array(static_cast<std::size_t>(-1))))
             {
                 return false;
             }
 
             while (current != ']')
             {
                 if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal(false)))
                 {
                     return false;
                 }
                 get_ignore_noop();
             }
         }
 
         return sax->end_array();
     }
 
     /*!
     @return whether object creation completed
     */
     bool get_ubjson_object()
     {
         std::pair<std::size_t, char_int_type> size_and_type;
         if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_type(size_and_type)))
         {
             return false;
         }
 
         // do not accept ND-array size in objects in BJData
         if (input_format == input_format_t::bjdata && size_and_type.first != string_t::npos && (size_and_type.second & (1 << 8)) != 0)
         {
             auto last_token = get_token_string();
             return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                     exception_message(input_format, "BJData object does not support ND-array size in optimized format", "object"), nullptr));
         }
 
         string_t key;
         if (size_and_type.first != string_t::npos)
         {
             if (JSON_HEDLEY_UNLIKELY(!sax->start_object(size_and_type.first)))
             {
                 return false;
             }
 
             if (size_and_type.second != 0)
             {
                 for (std::size_t i = 0; i < size_and_type.first; ++i)
                 {
                     if (JSON_HEDLEY_UNLIKELY(!get_ubjson_string(key) || !sax->key(key)))
                     {
                         return false;
                     }
                     if (JSON_HEDLEY_UNLIKELY(!get_ubjson_value(size_and_type.second)))
                     {
                         return false;
                     }
                     key.clear();
                 }
             }
             else
             {
                 for (std::size_t i = 0; i < size_and_type.first; ++i)
                 {
                     if (JSON_HEDLEY_UNLIKELY(!get_ubjson_string(key) || !sax->key(key)))
                     {
                         return false;
                     }
                     if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal()))
                     {
                         return false;
                     }
                     key.clear();
                 }
             }
         }
         else
         {
             if (JSON_HEDLEY_UNLIKELY(!sax->start_object(static_cast<std::size_t>(-1))))
             {
                 return false;
             }
 
             while (current != '}')
             {
                 if (JSON_HEDLEY_UNLIKELY(!get_ubjson_string(key, false) || !sax->key(key)))
                 {
                     return false;
                 }
                 if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal()))
                 {
                     return false;
                 }
                 get_ignore_noop();
                 key.clear();
             }
         }
 
         return sax->end_object();
     }
 
     // Note, no reader for UBJSON binary types is implemented because they do
     // not exist
 
     bool get_ubjson_high_precision_number()
     {
         // get size of following number string
         std::size_t size{};
         bool is_ndarray = false;
         auto res = get_ubjson_size_value(size, is_ndarray);
         if (JSON_HEDLEY_UNLIKELY(!res))
         {
             return res;
         }
 
         // get number string
         std::vector<char> number_vector;
         for (std::size_t i = 0; i < size; ++i)
         {
             get();
             if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "number")))
             {
                 return false;
             }
             number_vector.push_back(static_cast<char>(current));
         }
 
         // parse number string
         using ia_type = decltype(detail::input_adapter(number_vector));
         auto number_lexer = detail::lexer<BasicJsonType, ia_type>(detail::input_adapter(number_vector), false);
         const auto result_number = number_lexer.scan();
         const auto number_string = number_lexer.get_token_string();
         const auto result_remainder = number_lexer.scan();
 
         using token_type = typename detail::lexer_base<BasicJsonType>::token_type;
 
         if (JSON_HEDLEY_UNLIKELY(result_remainder != token_type::end_of_input))
         {
             return sax->parse_error(chars_read, number_string, parse_error::create(115, chars_read,
                                     exception_message(input_format, concat("invalid number text: ", number_lexer.get_token_string()), "high-precision number"), nullptr));
         }
 
         switch (result_number)
         {
             case token_type::value_integer:
                 return sax->number_integer(number_lexer.get_number_integer());
             case token_type::value_unsigned:
                 return sax->number_unsigned(number_lexer.get_number_unsigned());
             case token_type::value_float:
                 return sax->number_float(number_lexer.get_number_float(), std::move(number_string));
             case token_type::uninitialized:
             case token_type::literal_true:
             case token_type::literal_false:
             case token_type::literal_null:
             case token_type::value_string:
             case token_type::begin_array:
             case token_type::begin_object:
             case token_type::end_array:
             case token_type::end_object:
             case token_type::name_separator:
             case token_type::value_separator:
             case token_type::parse_error:
             case token_type::end_of_input:
             case token_type::literal_or_value:
             default:
                 return sax->parse_error(chars_read, number_string, parse_error::create(115, chars_read,
                                         exception_message(input_format, concat("invalid number text: ", number_lexer.get_token_string()), "high-precision number"), nullptr));
         }
     }
 
     ///////////////////////
     // Utility functions //
     ///////////////////////
 
     /*!
     @brief get next character from the input
 
     This function provides the interface to the used input adapter. It does
     not throw in case the input reached EOF, but returns a -'ve valued
     `std::char_traits<char_type>::eof()` in that case.
 
     @return character read from the input
     */
     char_int_type get()
     {
         ++chars_read;
         return current = ia.get_character();
     }
 
     /*!
     @return character read from the input after ignoring all 'N' entries
     */
     char_int_type get_ignore_noop()
     {
         do
         {
             get();
         }
         while (current == 'N');
 
         return current;
     }
 
     /*
     @brief read a number from the input
 
     @tparam NumberType the type of the number
     @param[in] format   the current format (for diagnostics)
     @param[out] result  number of type @a NumberType
 
     @return whether conversion completed
 
     @note This function needs to respect the system's endianness, because
           bytes in CBOR, MessagePack, and UBJSON are stored in network order
           (big endian) and therefore need reordering on little endian systems.
           On the other hand, BSON and BJData use little endian and should reorder
           on big endian systems.
     */
     template<typename NumberType, bool InputIsLittleEndian = false>
     bool get_number(const input_format_t format, NumberType& result)
     {
         // step 1: read input into array with system's byte order
         std::array<std::uint8_t, sizeof(NumberType)> vec{};
         for (std::size_t i = 0; i < sizeof(NumberType); ++i)
         {
             get();
             if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, "number")))
             {
                 return false;
             }
 
             // reverse byte order prior to conversion if necessary
             if (is_little_endian != (InputIsLittleEndian || format == input_format_t::bjdata))
             {
                 vec[sizeof(NumberType) - i - 1] = static_cast<std::uint8_t>(current);
             }
             else
             {
                 vec[i] = static_cast<std::uint8_t>(current); // LCOV_EXCL_LINE
             }
         }
 
         // step 2: convert array into number of type T and return
         std::memcpy(&result, vec.data(), sizeof(NumberType));
         return true;
     }
 
     /*!
     @brief create a string by reading characters from the input
 
     @tparam NumberType the type of the number
     @param[in] format the current format (for diagnostics)
     @param[in] len number of characters to read
     @param[out] result string created by reading @a len bytes
 
     @return whether string creation completed
 
     @note We can not reserve @a len bytes for the result, because @a len
           may be too large. Usually, @ref unexpect_eof() detects the end of
           the input before we run out of string memory.
     */
     template<typename NumberType>
     bool get_string(const input_format_t format,
                     const NumberType len,
                     string_t& result)
     {
         bool success = true;
         for (NumberType i = 0; i < len; i++)
         {
             get();
             if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, "string")))
             {
                 success = false;
                 break;
             }
             result.push_back(static_cast<typename string_t::value_type>(current));
         }
         return success;
     }
 
     /*!
     @brief create a byte array by reading bytes from the input
 
     @tparam NumberType the type of the number
     @param[in] format the current format (for diagnostics)
     @param[in] len number of bytes to read
     @param[out] result byte array created by reading @a len bytes
 
     @return whether byte array creation completed
 
     @note We can not reserve @a len bytes for the result, because @a len
           may be too large. Usually, @ref unexpect_eof() detects the end of
           the input before we run out of memory.
     */
     template<typename NumberType>
     bool get_binary(const input_format_t format,
                     const NumberType len,
                     binary_t& result)
     {
         bool success = true;
         for (NumberType i = 0; i < len; i++)
         {
             get();
             if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, "binary")))
             {
                 success = false;
                 break;
             }
             result.push_back(static_cast<std::uint8_t>(current));
         }
         return success;
     }
 
     /*!
     @param[in] format   the current format (for diagnostics)
     @param[in] context  further context information (for diagnostics)
     @return whether the last read character is not EOF
     */
     JSON_HEDLEY_NON_NULL(3)
     bool unexpect_eof(const input_format_t format, const char* context) const
     {
         if (JSON_HEDLEY_UNLIKELY(current == std::char_traits<char_type>::eof()))
         {
             return sax->parse_error(chars_read, "<end of file>",
                                     parse_error::create(110, chars_read, exception_message(format, "unexpected end of input", context), nullptr));
         }
         return true;
     }
 
     /*!
     @return a string representation of the last read byte
     */
     std::string get_token_string() const
     {
         std::array<char, 3> cr{{}};
         static_cast<void>((std::snprintf)(cr.data(), cr.size(), "%.2hhX", static_cast<unsigned char>(current))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
         return std::string{cr.data()};
     }
 
     /*!
     @param[in] format   the current format
     @param[in] detail   a detailed error message
     @param[in] context  further context information
     @return a message string to use in the parse_error exceptions
     */
     std::string exception_message(const input_format_t format,
                                   const std::string& detail,
                                   const std::string& context) const
     {
         std::string error_msg = "syntax error while parsing ";
 
         switch (format)
         {
             case input_format_t::cbor:
                 error_msg += "CBOR";
                 break;
 
             case input_format_t::msgpack:
                 error_msg += "MessagePack";
                 break;
 
             case input_format_t::ubjson:
                 error_msg += "UBJSON";
                 break;
 
             case input_format_t::bson:
                 error_msg += "BSON";
                 break;
 
             case input_format_t::bjdata:
                 error_msg += "BJData";
                 break;
 
             case input_format_t::json: // LCOV_EXCL_LINE
             default:            // LCOV_EXCL_LINE
                 JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
         }
 
         return concat(error_msg, ' ', context, ": ", detail);
     }
 
   private:
     /// input adapter
     InputAdapterType ia;
 
     /// the current character
     char_int_type current = std::char_traits<char_type>::eof();
 
     /// the number of characters read
     std::size_t chars_read = 0;
 
     /// whether we can assume little endianness
     const bool is_little_endian = little_endianness();
 
     /// input format
     const input_format_t input_format = input_format_t::json;
 
     /// the SAX parser
     json_sax_t* sax = nullptr;
 };
 }  // namespace detail
 }  // namespace nlohmann
diff --git a/single_include/nlohmann/json.hpp b/single_include/nlohmann/json.hpp
index e2cd6bc2..e1c352d8 100644
--- a/single_include/nlohmann/json.hpp
+++ b/single_include/nlohmann/json.hpp
@@ -8535,2874 +8535,2903 @@ template<typename BasicJsonType, typename InputAdapterType, typename SAX = json_
 class binary_reader
 {
     using number_integer_t = typename BasicJsonType::number_integer_t;
     using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
     using number_float_t = typename BasicJsonType::number_float_t;
     using string_t = typename BasicJsonType::string_t;
     using binary_t = typename BasicJsonType::binary_t;
     using json_sax_t = SAX;
     using char_type = typename InputAdapterType::char_type;
     using char_int_type = typename std::char_traits<char_type>::int_type;
 
   public:
     /*!
     @brief create a binary reader
 
     @param[in] adapter  input adapter to read from
     */
     explicit binary_reader(InputAdapterType&& adapter, const input_format_t format = input_format_t::json) noexcept : ia(std::move(adapter)), input_format(format)
     {
         (void)detail::is_sax_static_asserts<SAX, BasicJsonType> {};
     }
 
     // make class move-only
     binary_reader(const binary_reader&) = delete;
     binary_reader(binary_reader&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
     binary_reader& operator=(const binary_reader&) = delete;
     binary_reader& operator=(binary_reader&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
     ~binary_reader() = default;
 
     /*!
     @param[in] format  the binary format to parse
     @param[in] sax_    a SAX event processor
     @param[in] strict  whether to expect the input to be consumed completed
     @param[in] tag_handler  how to treat CBOR tags
 
     @return whether parsing was successful
     */
     JSON_HEDLEY_NON_NULL(3)
     bool sax_parse(const input_format_t format,
                    json_sax_t* sax_,
                    const bool strict = true,
                    const cbor_tag_handler_t tag_handler = cbor_tag_handler_t::error)
     {
         sax = sax_;
         bool result = false;
 
         switch (format)
         {
             case input_format_t::bson:
                 result = parse_bson_internal();
                 break;
 
             case input_format_t::cbor:
                 result = parse_cbor_internal(true, tag_handler);
                 break;
 
             case input_format_t::msgpack:
                 result = parse_msgpack_internal();
                 break;
 
             case input_format_t::ubjson:
             case input_format_t::bjdata:
                 result = parse_ubjson_internal();
                 break;
 
             case input_format_t::json: // LCOV_EXCL_LINE
             default:            // LCOV_EXCL_LINE
                 JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
         }
 
         // strict mode: next byte must be EOF
         if (result && strict)
         {
             if (input_format == input_format_t::ubjson || input_format == input_format_t::bjdata)
             {
                 get_ignore_noop();
             }
             else
             {
                 get();
             }
 
             if (JSON_HEDLEY_UNLIKELY(current != std::char_traits<char_type>::eof()))
             {
                 return sax->parse_error(chars_read, get_token_string(), parse_error::create(110, chars_read,
                                         exception_message(input_format, concat("expected end of input; last byte: 0x", get_token_string()), "value"), nullptr));
             }
         }
 
         return result;
     }
 
   private:
     //////////
     // BSON //
     //////////
 
     /*!
     @brief Reads in a BSON-object and passes it to the SAX-parser.
     @return whether a valid BSON-value was passed to the SAX parser
     */
     bool parse_bson_internal()
     {
         std::int32_t document_size{};
         get_number<std::int32_t, true>(input_format_t::bson, document_size);
 
         if (JSON_HEDLEY_UNLIKELY(!sax->start_object(static_cast<std::size_t>(-1))))
         {
             return false;
         }
 
         if (JSON_HEDLEY_UNLIKELY(!parse_bson_element_list(/*is_array*/false)))
         {
             return false;
         }
 
         return sax->end_object();
     }
 
     /*!
     @brief Parses a C-style string from the BSON input.
     @param[in,out] result  A reference to the string variable where the read
                             string is to be stored.
     @return `true` if the \x00-byte indicating the end of the string was
              encountered before the EOF; false` indicates an unexpected EOF.
     */
     bool get_bson_cstr(string_t& result)
     {
         auto out = std::back_inserter(result);
         while (true)
         {
             get();
             if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::bson, "cstring")))
             {
                 return false;
             }
             if (current == 0x00)
             {
                 return true;
             }
             *out++ = static_cast<typename string_t::value_type>(current);
         }
     }
 
     /*!
     @brief Parses a zero-terminated string of length @a len from the BSON
            input.
     @param[in] len  The length (including the zero-byte at the end) of the
                     string to be read.
     @param[in,out] result  A reference to the string variable where the read
                             string is to be stored.
     @tparam NumberType The type of the length @a len
     @pre len >= 1
     @return `true` if the string was successfully parsed
     */
     template<typename NumberType>
     bool get_bson_string(const NumberType len, string_t& result)
     {
         if (JSON_HEDLEY_UNLIKELY(len < 1))
         {
             auto last_token = get_token_string();
             return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                     exception_message(input_format_t::bson, concat("string length must be at least 1, is ", std::to_string(len)), "string"), nullptr));
         }
 
         return get_string(input_format_t::bson, len - static_cast<NumberType>(1), result) && get() != std::char_traits<char_type>::eof();
     }
 
     /*!
     @brief Parses a byte array input of length @a len from the BSON input.
     @param[in] len  The length of the byte array to be read.
     @param[in,out] result  A reference to the binary variable where the read
                             array is to be stored.
     @tparam NumberType The type of the length @a len
     @pre len >= 0
     @return `true` if the byte array was successfully parsed
     */
     template<typename NumberType>
     bool get_bson_binary(const NumberType len, binary_t& result)
     {
         if (JSON_HEDLEY_UNLIKELY(len < 0))
         {
             auto last_token = get_token_string();
             return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                     exception_message(input_format_t::bson, concat("byte array length cannot be negative, is ", std::to_string(len)), "binary"), nullptr));
         }
 
         // All BSON binary values have a subtype
         std::uint8_t subtype{};
         get_number<std::uint8_t>(input_format_t::bson, subtype);
         result.set_subtype(subtype);
 
         return get_binary(input_format_t::bson, len, result);
     }
 
     /*!
     @brief Read a BSON document element of the given @a element_type.
     @param[in] element_type The BSON element type, c.f. http://bsonspec.org/spec.html
     @param[in] element_type_parse_position The position in the input stream,
                where the `element_type` was read.
     @warning Not all BSON element types are supported yet. An unsupported
              @a element_type will give rise to a parse_error.114:
              Unsupported BSON record type 0x...
     @return whether a valid BSON-object/array was passed to the SAX parser
     */
     bool parse_bson_element_internal(const char_int_type element_type,
                                      const std::size_t element_type_parse_position)
     {
         switch (element_type)
         {
             case 0x01: // double
             {
                 double number{};
                 return get_number<double, true>(input_format_t::bson, number) && sax->number_float(static_cast<number_float_t>(number), "");
             }
 
             case 0x02: // string
             {
                 std::int32_t len{};
                 string_t value;
                 return get_number<std::int32_t, true>(input_format_t::bson, len) && get_bson_string(len, value) && sax->string(value);
             }
 
             case 0x03: // object
             {
                 return parse_bson_internal();
             }
 
             case 0x04: // array
             {
                 return parse_bson_array();
             }
 
             case 0x05: // binary
             {
                 std::int32_t len{};
                 binary_t value;
                 return get_number<std::int32_t, true>(input_format_t::bson, len) && get_bson_binary(len, value) && sax->binary(value);
             }
 
             case 0x08: // boolean
             {
                 return sax->boolean(get() != 0);
             }
 
             case 0x0A: // null
             {
                 return sax->null();
             }
 
             case 0x10: // int32
             {
                 std::int32_t value{};
                 return get_number<std::int32_t, true>(input_format_t::bson, value) && sax->number_integer(value);
             }
 
             case 0x12: // int64
             {
                 std::int64_t value{};
                 return get_number<std::int64_t, true>(input_format_t::bson, value) && sax->number_integer(value);
             }
 
             default: // anything else not supported (yet)
             {
                 std::array<char, 3> cr{{}};
                 static_cast<void>((std::snprintf)(cr.data(), cr.size(), "%.2hhX", static_cast<unsigned char>(element_type))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
                 std::string cr_str{cr.data()};
                 return sax->parse_error(element_type_parse_position, cr_str,
                                         parse_error::create(114, element_type_parse_position, concat("Unsupported BSON record type 0x", cr_str), nullptr));
             }
         }
     }
 
     /*!
     @brief Read a BSON element list (as specified in the BSON-spec)
 
     The same binary layout is used for objects and arrays, hence it must be
     indicated with the argument @a is_array which one is expected
     (true --> array, false --> object).
 
     @param[in] is_array Determines if the element list being read is to be
                         treated as an object (@a is_array == false), or as an
                         array (@a is_array == true).
     @return whether a valid BSON-object/array was passed to the SAX parser
     */
     bool parse_bson_element_list(const bool is_array)
     {
         string_t key;
 
         while (auto element_type = get())
         {
             if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::bson, "element list")))
             {
                 return false;
             }
 
             const std::size_t element_type_parse_position = chars_read;
             if (JSON_HEDLEY_UNLIKELY(!get_bson_cstr(key)))
             {
                 return false;
             }
 
             if (!is_array && !sax->key(key))
             {
                 return false;
             }
 
             if (JSON_HEDLEY_UNLIKELY(!parse_bson_element_internal(element_type, element_type_parse_position)))
             {
                 return false;
             }
 
             // get_bson_cstr only appends
             key.clear();
         }
 
         return true;
     }
 
     /*!
     @brief Reads an array from the BSON input and passes it to the SAX-parser.
     @return whether a valid BSON-array was passed to the SAX parser
     */
     bool parse_bson_array()
     {
         std::int32_t document_size{};
         get_number<std::int32_t, true>(input_format_t::bson, document_size);
 
         if (JSON_HEDLEY_UNLIKELY(!sax->start_array(static_cast<std::size_t>(-1))))
         {
             return false;
         }
 
         if (JSON_HEDLEY_UNLIKELY(!parse_bson_element_list(/*is_array*/true)))
         {
             return false;
         }
 
         return sax->end_array();
     }
 
     //////////
     // CBOR //
     //////////
 
     /*!
     @param[in] get_char  whether a new character should be retrieved from the
                          input (true) or whether the last read character should
                          be considered instead (false)
     @param[in] tag_handler how CBOR tags should be treated
 
     @return whether a valid CBOR value was passed to the SAX parser
     */
     bool parse_cbor_internal(const bool get_char,
                              const cbor_tag_handler_t tag_handler)
     {
         switch (get_char ? get() : current)
         {
             // EOF
             case std::char_traits<char_type>::eof():
                 return unexpect_eof(input_format_t::cbor, "value");
 
             // Integer 0x00..0x17 (0..23)
             case 0x00:
             case 0x01:
             case 0x02:
             case 0x03:
             case 0x04:
             case 0x05:
             case 0x06:
             case 0x07:
             case 0x08:
             case 0x09:
             case 0x0A:
             case 0x0B:
             case 0x0C:
             case 0x0D:
             case 0x0E:
             case 0x0F:
             case 0x10:
             case 0x11:
             case 0x12:
             case 0x13:
             case 0x14:
             case 0x15:
             case 0x16:
             case 0x17:
                 return sax->number_unsigned(static_cast<number_unsigned_t>(current));
 
             case 0x18: // Unsigned integer (one-byte uint8_t follows)
             {
                 std::uint8_t number{};
                 return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);
             }
 
             case 0x19: // Unsigned integer (two-byte uint16_t follows)
             {
                 std::uint16_t number{};
                 return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);
             }
 
             case 0x1A: // Unsigned integer (four-byte uint32_t follows)
             {
                 std::uint32_t number{};
                 return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);
             }
 
             case 0x1B: // Unsigned integer (eight-byte uint64_t follows)
             {
                 std::uint64_t number{};
                 return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);
             }
 
             // Negative integer -1-0x00..-1-0x17 (-1..-24)
             case 0x20:
             case 0x21:
             case 0x22:
             case 0x23:
             case 0x24:
             case 0x25:
             case 0x26:
             case 0x27:
             case 0x28:
             case 0x29:
             case 0x2A:
             case 0x2B:
             case 0x2C:
             case 0x2D:
             case 0x2E:
             case 0x2F:
             case 0x30:
             case 0x31:
             case 0x32:
             case 0x33:
             case 0x34:
             case 0x35:
             case 0x36:
             case 0x37:
                 return sax->number_integer(static_cast<std::int8_t>(0x20 - 1 - current));
 
             case 0x38: // Negative integer (one-byte uint8_t follows)
             {
                 std::uint8_t number{};
                 return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1) - number);
             }
 
             case 0x39: // Negative integer -1-n (two-byte uint16_t follows)
             {
                 std::uint16_t number{};
                 return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1) - number);
             }
 
             case 0x3A: // Negative integer -1-n (four-byte uint32_t follows)
             {
                 std::uint32_t number{};
                 return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1) - number);
             }
 
             case 0x3B: // Negative integer -1-n (eight-byte uint64_t follows)
             {
                 std::uint64_t number{};
                 return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1)
                         - static_cast<number_integer_t>(number));
             }
 
             // Binary data (0x00..0x17 bytes follow)
             case 0x40:
             case 0x41:
             case 0x42:
             case 0x43:
             case 0x44:
             case 0x45:
             case 0x46:
             case 0x47:
             case 0x48:
             case 0x49:
             case 0x4A:
             case 0x4B:
             case 0x4C:
             case 0x4D:
             case 0x4E:
             case 0x4F:
             case 0x50:
             case 0x51:
             case 0x52:
             case 0x53:
             case 0x54:
             case 0x55:
             case 0x56:
             case 0x57:
             case 0x58: // Binary data (one-byte uint8_t for n follows)
             case 0x59: // Binary data (two-byte uint16_t for n follow)
             case 0x5A: // Binary data (four-byte uint32_t for n follow)
             case 0x5B: // Binary data (eight-byte uint64_t for n follow)
             case 0x5F: // Binary data (indefinite length)
             {
                 binary_t b;
                 return get_cbor_binary(b) && sax->binary(b);
             }
 
             // UTF-8 string (0x00..0x17 bytes follow)
             case 0x60:
             case 0x61:
             case 0x62:
             case 0x63:
             case 0x64:
             case 0x65:
             case 0x66:
             case 0x67:
             case 0x68:
             case 0x69:
             case 0x6A:
             case 0x6B:
             case 0x6C:
             case 0x6D:
             case 0x6E:
             case 0x6F:
             case 0x70:
             case 0x71:
             case 0x72:
             case 0x73:
             case 0x74:
             case 0x75:
             case 0x76:
             case 0x77:
             case 0x78: // UTF-8 string (one-byte uint8_t for n follows)
             case 0x79: // UTF-8 string (two-byte uint16_t for n follow)
             case 0x7A: // UTF-8 string (four-byte uint32_t for n follow)
             case 0x7B: // UTF-8 string (eight-byte uint64_t for n follow)
             case 0x7F: // UTF-8 string (indefinite length)
             {
                 string_t s;
                 return get_cbor_string(s) && sax->string(s);
             }
 
             // array (0x00..0x17 data items follow)
             case 0x80:
             case 0x81:
             case 0x82:
             case 0x83:
             case 0x84:
             case 0x85:
             case 0x86:
             case 0x87:
             case 0x88:
             case 0x89:
             case 0x8A:
             case 0x8B:
             case 0x8C:
             case 0x8D:
             case 0x8E:
             case 0x8F:
             case 0x90:
             case 0x91:
             case 0x92:
             case 0x93:
             case 0x94:
             case 0x95:
             case 0x96:
             case 0x97:
                 return get_cbor_array(static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x1Fu), tag_handler);
 
             case 0x98: // array (one-byte uint8_t for n follows)
             {
                 std::uint8_t len{};
                 return get_number(input_format_t::cbor, len) && get_cbor_array(static_cast<std::size_t>(len), tag_handler);
             }
 
             case 0x99: // array (two-byte uint16_t for n follow)
             {
                 std::uint16_t len{};
                 return get_number(input_format_t::cbor, len) && get_cbor_array(static_cast<std::size_t>(len), tag_handler);
             }
 
             case 0x9A: // array (four-byte uint32_t for n follow)
             {
                 std::uint32_t len{};
                 return get_number(input_format_t::cbor, len) && get_cbor_array(static_cast<std::size_t>(len), tag_handler);
             }
 
             case 0x9B: // array (eight-byte uint64_t for n follow)
             {
                 std::uint64_t len{};
                 return get_number(input_format_t::cbor, len) && get_cbor_array(detail::conditional_static_cast<std::size_t>(len), tag_handler);
             }
 
             case 0x9F: // array (indefinite length)
                 return get_cbor_array(static_cast<std::size_t>(-1), tag_handler);
 
             // map (0x00..0x17 pairs of data items follow)
             case 0xA0:
             case 0xA1:
             case 0xA2:
             case 0xA3:
             case 0xA4:
             case 0xA5:
             case 0xA6:
             case 0xA7:
             case 0xA8:
             case 0xA9:
             case 0xAA:
             case 0xAB:
             case 0xAC:
             case 0xAD:
             case 0xAE:
             case 0xAF:
             case 0xB0:
             case 0xB1:
             case 0xB2:
             case 0xB3:
             case 0xB4:
             case 0xB5:
             case 0xB6:
             case 0xB7:
                 return get_cbor_object(static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x1Fu), tag_handler);
 
             case 0xB8: // map (one-byte uint8_t for n follows)
             {
                 std::uint8_t len{};
                 return get_number(input_format_t::cbor, len) && get_cbor_object(static_cast<std::size_t>(len), tag_handler);
             }
 
             case 0xB9: // map (two-byte uint16_t for n follow)
             {
                 std::uint16_t len{};
                 return get_number(input_format_t::cbor, len) && get_cbor_object(static_cast<std::size_t>(len), tag_handler);
             }
 
             case 0xBA: // map (four-byte uint32_t for n follow)
             {
                 std::uint32_t len{};
                 return get_number(input_format_t::cbor, len) && get_cbor_object(static_cast<std::size_t>(len), tag_handler);
             }
 
             case 0xBB: // map (eight-byte uint64_t for n follow)
             {
                 std::uint64_t len{};
                 return get_number(input_format_t::cbor, len) && get_cbor_object(detail::conditional_static_cast<std::size_t>(len), tag_handler);
             }
 
             case 0xBF: // map (indefinite length)
                 return get_cbor_object(static_cast<std::size_t>(-1), tag_handler);
 
             case 0xC6: // tagged item
             case 0xC7:
             case 0xC8:
             case 0xC9:
             case 0xCA:
             case 0xCB:
             case 0xCC:
             case 0xCD:
             case 0xCE:
             case 0xCF:
             case 0xD0:
             case 0xD1:
             case 0xD2:
             case 0xD3:
             case 0xD4:
             case 0xD8: // tagged item (1 bytes follow)
             case 0xD9: // tagged item (2 bytes follow)
             case 0xDA: // tagged item (4 bytes follow)
             case 0xDB: // tagged item (8 bytes follow)
             {
                 switch (tag_handler)
                 {
                     case cbor_tag_handler_t::error:
                     {
                         auto last_token = get_token_string();
                         return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                                 exception_message(input_format_t::cbor, concat("invalid byte: 0x", last_token), "value"), nullptr));
                     }
 
                     case cbor_tag_handler_t::ignore:
                     {
                         // ignore binary subtype
                         switch (current)
                         {
                             case 0xD8:
                             {
                                 std::uint8_t subtype_to_ignore{};
                                 get_number(input_format_t::cbor, subtype_to_ignore);
                                 break;
                             }
                             case 0xD9:
                             {
                                 std::uint16_t subtype_to_ignore{};
                                 get_number(input_format_t::cbor, subtype_to_ignore);
                                 break;
                             }
                             case 0xDA:
                             {
                                 std::uint32_t subtype_to_ignore{};
                                 get_number(input_format_t::cbor, subtype_to_ignore);
                                 break;
                             }
                             case 0xDB:
                             {
                                 std::uint64_t subtype_to_ignore{};
                                 get_number(input_format_t::cbor, subtype_to_ignore);
                                 break;
                             }
                             default:
                                 break;
                         }
                         return parse_cbor_internal(true, tag_handler);
                     }
 
                     case cbor_tag_handler_t::store:
                     {
                         binary_t b;
                         // use binary subtype and store in binary container
                         switch (current)
                         {
                             case 0xD8:
                             {
                                 std::uint8_t subtype{};
                                 get_number(input_format_t::cbor, subtype);
                                 b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));
                                 break;
                             }
                             case 0xD9:
                             {
                                 std::uint16_t subtype{};
                                 get_number(input_format_t::cbor, subtype);
                                 b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));
                                 break;
                             }
                             case 0xDA:
                             {
                                 std::uint32_t subtype{};
                                 get_number(input_format_t::cbor, subtype);
                                 b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));
                                 break;
                             }
                             case 0xDB:
                             {
                                 std::uint64_t subtype{};
                                 get_number(input_format_t::cbor, subtype);
                                 b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));
                                 break;
                             }
                             default:
                                 return parse_cbor_internal(true, tag_handler);
                         }
                         get();
                         return get_cbor_binary(b) && sax->binary(b);
                     }
 
                     default:                 // LCOV_EXCL_LINE
                         JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
                         return false;        // LCOV_EXCL_LINE
                 }
             }
 
             case 0xF4: // false
                 return sax->boolean(false);
 
             case 0xF5: // true
                 return sax->boolean(true);
 
             case 0xF6: // null
                 return sax->null();
 
             case 0xF9: // Half-Precision Float (two-byte IEEE 754)
             {
                 const auto byte1_raw = get();
                 if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, "number")))
                 {
                     return false;
                 }
                 const auto byte2_raw = get();
                 if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, "number")))
                 {
                     return false;
                 }
 
                 const auto byte1 = static_cast<unsigned char>(byte1_raw);
                 const auto byte2 = static_cast<unsigned char>(byte2_raw);
 
                 // code from RFC 7049, Appendix D, Figure 3:
                 // As half-precision floating-point numbers were only added
                 // to IEEE 754 in 2008, today's programming platforms often
                 // still only have limited support for them. It is very
                 // easy to include at least decoding support for them even
                 // without such support. An example of a small decoder for
                 // half-precision floating-point numbers in the C language
                 // is shown in Fig. 3.
                 const auto half = static_cast<unsigned int>((byte1 << 8u) + byte2);
                 const double val = [&half]
                 {
                     const int exp = (half >> 10u) & 0x1Fu;
                     const unsigned int mant = half & 0x3FFu;
                     JSON_ASSERT(0 <= exp&& exp <= 32);
                     JSON_ASSERT(mant <= 1024);
                     switch (exp)
                     {
                         case 0:
                             return std::ldexp(mant, -24);
                         case 31:
                             return (mant == 0)
                             ? std::numeric_limits<double>::infinity()
                             : std::numeric_limits<double>::quiet_NaN();
                         default:
                             return std::ldexp(mant + 1024, exp - 25);
                     }
                 }();
                 return sax->number_float((half & 0x8000u) != 0
                                          ? static_cast<number_float_t>(-val)
                                          : static_cast<number_float_t>(val), "");
             }
 
             case 0xFA: // Single-Precision Float (four-byte IEEE 754)
             {
                 float number{};
                 return get_number(input_format_t::cbor, number) && sax->number_float(static_cast<number_float_t>(number), "");
             }
 
             case 0xFB: // Double-Precision Float (eight-byte IEEE 754)
             {
                 double number{};
                 return get_number(input_format_t::cbor, number) && sax->number_float(static_cast<number_float_t>(number), "");
             }
 
             default: // anything else (0xFF is handled inside the other types)
             {
                 auto last_token = get_token_string();
                 return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                         exception_message(input_format_t::cbor, concat("invalid byte: 0x", last_token), "value"), nullptr));
             }
         }
     }
 
     /*!
     @brief reads a CBOR string
 
     This function first reads starting bytes to determine the expected
     string length and then copies this number of bytes into a string.
     Additionally, CBOR's strings with indefinite lengths are supported.
 
     @param[out] result  created string
 
     @return whether string creation completed
     */
     bool get_cbor_string(string_t& result)
     {
         if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, "string")))
         {
             return false;
         }
 
         switch (current)
         {
             // UTF-8 string (0x00..0x17 bytes follow)
             case 0x60:
             case 0x61:
             case 0x62:
             case 0x63:
             case 0x64:
             case 0x65:
             case 0x66:
             case 0x67:
             case 0x68:
             case 0x69:
             case 0x6A:
             case 0x6B:
             case 0x6C:
             case 0x6D:
             case 0x6E:
             case 0x6F:
             case 0x70:
             case 0x71:
             case 0x72:
             case 0x73:
             case 0x74:
             case 0x75:
             case 0x76:
             case 0x77:
             {
                 return get_string(input_format_t::cbor, static_cast<unsigned int>(current) & 0x1Fu, result);
             }
 
             case 0x78: // UTF-8 string (one-byte uint8_t for n follows)
             {
                 std::uint8_t len{};
                 return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);
             }
 
             case 0x79: // UTF-8 string (two-byte uint16_t for n follow)
             {
                 std::uint16_t len{};
                 return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);
             }
 
             case 0x7A: // UTF-8 string (four-byte uint32_t for n follow)
             {
                 std::uint32_t len{};
                 return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);
             }
 
             case 0x7B: // UTF-8 string (eight-byte uint64_t for n follow)
             {
                 std::uint64_t len{};
                 return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);
             }
 
             case 0x7F: // UTF-8 string (indefinite length)
             {
                 while (get() != 0xFF)
                 {
                     string_t chunk;
                     if (!get_cbor_string(chunk))
                     {
                         return false;
                     }
                     result.append(chunk);
                 }
                 return true;
             }
 
             default:
             {
                 auto last_token = get_token_string();
                 return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,
                                         exception_message(input_format_t::cbor, concat("expected length specification (0x60-0x7B) or indefinite string type (0x7F); last byte: 0x", last_token), "string"), nullptr));
             }
         }
     }
 
     /*!
     @brief reads a CBOR byte array
 
     This function first reads starting bytes to determine the expected
     byte array length and then copies this number of bytes into the byte array.
     Additionally, CBOR's byte arrays with indefinite lengths are supported.
 
     @param[out] result  created byte array
 
     @return whether byte array creation completed
     */
     bool get_cbor_binary(binary_t& result)
     {
         if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, "binary")))
         {
             return false;
         }
 
         switch (current)
         {
             // Binary data (0x00..0x17 bytes follow)
             case 0x40:
             case 0x41:
             case 0x42:
             case 0x43:
             case 0x44:
             case 0x45:
             case 0x46:
             case 0x47:
             case 0x48:
             case 0x49:
             case 0x4A:
             case 0x4B:
             case 0x4C:
             case 0x4D:
             case 0x4E:
             case 0x4F:
             case 0x50:
             case 0x51:
             case 0x52:
             case 0x53:
             case 0x54:
             case 0x55:
             case 0x56:
             case 0x57:
             {
                 return get_binary(input_format_t::cbor, static_cast<unsigned int>(current) & 0x1Fu, result);
             }
 
             case 0x58: // Binary data (one-byte uint8_t for n follows)
             {
                 std::uint8_t len{};
                 return get_number(input_format_t::cbor, len) &&
                        get_binary(input_format_t::cbor, len, result);
             }
 
             case 0x59: // Binary data (two-byte uint16_t for n follow)
             {
                 std::uint16_t len{};
                 return get_number(input_format_t::cbor, len) &&
                        get_binary(input_format_t::cbor, len, result);
             }
 
             case 0x5A: // Binary data (four-byte uint32_t for n follow)
             {
                 std::uint32_t len{};
                 return get_number(input_format_t::cbor, len) &&
                        get_binary(input_format_t::cbor, len, result);
             }
 
             case 0x5B: // Binary data (eight-byte uint64_t for n follow)
             {
                 std::uint64_t len{};
                 return get_number(input_format_t::cbor, len) &&
                        get_binary(input_format_t::cbor, len, result);
             }
 
             case 0x5F: // Binary data (indefinite length)
             {
                 while (get() != 0xFF)
                 {
                     binary_t chunk;
                     if (!get_cbor_binary(chunk))
                     {
                         return false;
                     }
                     result.insert(result.end(), chunk.begin(), chunk.end());
                 }
                 return true;
             }
 
             default:
             {
                 auto last_token = get_token_string();
                 return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,
                                         exception_message(input_format_t::cbor, concat("expected length specification (0x40-0x5B) or indefinite binary array type (0x5F); last byte: 0x", last_token), "binary"), nullptr));
             }
         }
     }
 
     /*!
     @param[in] len  the length of the array or static_cast<std::size_t>(-1) for an
                     array of indefinite size
     @param[in] tag_handler how CBOR tags should be treated
     @return whether array creation completed
     */
     bool get_cbor_array(const std::size_t len,
                         const cbor_tag_handler_t tag_handler)
     {
         if (JSON_HEDLEY_UNLIKELY(!sax->start_array(len)))
         {
             return false;
         }
 
         if (len != static_cast<std::size_t>(-1))
         {
             for (std::size_t i = 0; i < len; ++i)
             {
                 if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(true, tag_handler)))
                 {
                     return false;
                 }
             }
         }
         else
         {
             while (get() != 0xFF)
             {
                 if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(false, tag_handler)))
                 {
                     return false;
                 }
             }
         }
 
         return sax->end_array();
     }
 
     /*!
     @param[in] len  the length of the object or static_cast<std::size_t>(-1) for an
                     object of indefinite size
     @param[in] tag_handler how CBOR tags should be treated
     @return whether object creation completed
     */
     bool get_cbor_object(const std::size_t len,
                          const cbor_tag_handler_t tag_handler)
     {
         if (JSON_HEDLEY_UNLIKELY(!sax->start_object(len)))
         {
             return false;
         }
 
         if (len != 0)
         {
             string_t key;
             if (len != static_cast<std::size_t>(-1))
             {
                 for (std::size_t i = 0; i < len; ++i)
                 {
                     get();
                     if (JSON_HEDLEY_UNLIKELY(!get_cbor_string(key) || !sax->key(key)))
                     {
                         return false;
                     }
 
                     if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(true, tag_handler)))
                     {
                         return false;
                     }
                     key.clear();
                 }
             }
             else
             {
                 while (get() != 0xFF)
                 {
                     if (JSON_HEDLEY_UNLIKELY(!get_cbor_string(key) || !sax->key(key)))
                     {
                         return false;
                     }
 
                     if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(true, tag_handler)))
                     {
                         return false;
                     }
                     key.clear();
                 }
             }
         }
 
         return sax->end_object();
     }
 
     /////////////
     // MsgPack //
     /////////////
 
     /*!
     @return whether a valid MessagePack value was passed to the SAX parser
     */
     bool parse_msgpack_internal()
     {
         switch (get())
         {
             // EOF
             case std::char_traits<char_type>::eof():
                 return unexpect_eof(input_format_t::msgpack, "value");
 
             // positive fixint
             case 0x00:
             case 0x01:
             case 0x02:
             case 0x03:
             case 0x04:
             case 0x05:
             case 0x06:
             case 0x07:
             case 0x08:
             case 0x09:
             case 0x0A:
             case 0x0B:
             case 0x0C:
             case 0x0D:
             case 0x0E:
             case 0x0F:
             case 0x10:
             case 0x11:
             case 0x12:
             case 0x13:
             case 0x14:
             case 0x15:
             case 0x16:
             case 0x17:
             case 0x18:
             case 0x19:
             case 0x1A:
             case 0x1B:
             case 0x1C:
             case 0x1D:
             case 0x1E:
             case 0x1F:
             case 0x20:
             case 0x21:
             case 0x22:
             case 0x23:
             case 0x24:
             case 0x25:
             case 0x26:
             case 0x27:
             case 0x28:
             case 0x29:
             case 0x2A:
             case 0x2B:
             case 0x2C:
             case 0x2D:
             case 0x2E:
             case 0x2F:
             case 0x30:
             case 0x31:
             case 0x32:
             case 0x33:
             case 0x34:
             case 0x35:
             case 0x36:
             case 0x37:
             case 0x38:
             case 0x39:
             case 0x3A:
             case 0x3B:
             case 0x3C:
             case 0x3D:
             case 0x3E:
             case 0x3F:
             case 0x40:
             case 0x41:
             case 0x42:
             case 0x43:
             case 0x44:
             case 0x45:
             case 0x46:
             case 0x47:
             case 0x48:
             case 0x49:
             case 0x4A:
             case 0x4B:
             case 0x4C:
             case 0x4D:
             case 0x4E:
             case 0x4F:
             case 0x50:
             case 0x51:
             case 0x52:
             case 0x53:
             case 0x54:
             case 0x55:
             case 0x56:
             case 0x57:
             case 0x58:
             case 0x59:
             case 0x5A:
             case 0x5B:
             case 0x5C:
             case 0x5D:
             case 0x5E:
             case 0x5F:
             case 0x60:
             case 0x61:
             case 0x62:
             case 0x63:
             case 0x64:
             case 0x65:
             case 0x66:
             case 0x67:
             case 0x68:
             case 0x69:
             case 0x6A:
             case 0x6B:
             case 0x6C:
             case 0x6D:
             case 0x6E:
             case 0x6F:
             case 0x70:
             case 0x71:
             case 0x72:
             case 0x73:
             case 0x74:
             case 0x75:
             case 0x76:
             case 0x77:
             case 0x78:
             case 0x79:
             case 0x7A:
             case 0x7B:
             case 0x7C:
             case 0x7D:
             case 0x7E:
             case 0x7F:
                 return sax->number_unsigned(static_cast<number_unsigned_t>(current));
 
             // fixmap
             case 0x80:
             case 0x81:
             case 0x82:
             case 0x83:
             case 0x84:
             case 0x85:
             case 0x86:
             case 0x87:
             case 0x88:
             case 0x89:
             case 0x8A:
             case 0x8B:
             case 0x8C:
             case 0x8D:
             case 0x8E:
             case 0x8F:
                 return get_msgpack_object(static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x0Fu));
 
             // fixarray
             case 0x90:
             case 0x91:
             case 0x92:
             case 0x93:
             case 0x94:
             case 0x95:
             case 0x96:
             case 0x97:
             case 0x98:
             case 0x99:
             case 0x9A:
             case 0x9B:
             case 0x9C:
             case 0x9D:
             case 0x9E:
             case 0x9F:
                 return get_msgpack_array(static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x0Fu));
 
             // fixstr
             case 0xA0:
             case 0xA1:
             case 0xA2:
             case 0xA3:
             case 0xA4:
             case 0xA5:
             case 0xA6:
             case 0xA7:
             case 0xA8:
             case 0xA9:
             case 0xAA:
             case 0xAB:
             case 0xAC:
             case 0xAD:
             case 0xAE:
             case 0xAF:
             case 0xB0:
             case 0xB1:
             case 0xB2:
             case 0xB3:
             case 0xB4:
             case 0xB5:
             case 0xB6:
             case 0xB7:
             case 0xB8:
             case 0xB9:
             case 0xBA:
             case 0xBB:
             case 0xBC:
             case 0xBD:
             case 0xBE:
             case 0xBF:
             case 0xD9: // str 8
             case 0xDA: // str 16
             case 0xDB: // str 32
             {
                 string_t s;
                 return get_msgpack_string(s) && sax->string(s);
             }
 
             case 0xC0: // nil
                 return sax->null();
 
             case 0xC2: // false
                 return sax->boolean(false);
 
             case 0xC3: // true
                 return sax->boolean(true);
 
             case 0xC4: // bin 8
             case 0xC5: // bin 16
             case 0xC6: // bin 32
             case 0xC7: // ext 8
             case 0xC8: // ext 16
             case 0xC9: // ext 32
             case 0xD4: // fixext 1
             case 0xD5: // fixext 2
             case 0xD6: // fixext 4
             case 0xD7: // fixext 8
             case 0xD8: // fixext 16
             {
                 binary_t b;
                 return get_msgpack_binary(b) && sax->binary(b);
             }
 
             case 0xCA: // float 32
             {
                 float number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_float(static_cast<number_float_t>(number), "");
             }
 
             case 0xCB: // float 64
             {
                 double number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_float(static_cast<number_float_t>(number), "");
             }
 
             case 0xCC: // uint 8
             {
                 std::uint8_t number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);
             }
 
             case 0xCD: // uint 16
             {
                 std::uint16_t number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);
             }
 
             case 0xCE: // uint 32
             {
                 std::uint32_t number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);
             }
 
             case 0xCF: // uint 64
             {
                 std::uint64_t number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);
             }
 
             case 0xD0: // int 8
             {
                 std::int8_t number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_integer(number);
             }
 
             case 0xD1: // int 16
             {
                 std::int16_t number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_integer(number);
             }
 
             case 0xD2: // int 32
             {
                 std::int32_t number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_integer(number);
             }
 
             case 0xD3: // int 64
             {
                 std::int64_t number{};
                 return get_number(input_format_t::msgpack, number) && sax->number_integer(number);
             }
 
             case 0xDC: // array 16
             {
                 std::uint16_t len{};
                 return get_number(input_format_t::msgpack, len) && get_msgpack_array(static_cast<std::size_t>(len));
             }
 
             case 0xDD: // array 32
             {
                 std::uint32_t len{};
                 return get_number(input_format_t::msgpack, len) && get_msgpack_array(static_cast<std::size_t>(len));
             }
 
             case 0xDE: // map 16
             {
                 std::uint16_t len{};
                 return get_number(input_format_t::msgpack, len) && get_msgpack_object(static_cast<std::size_t>(len));
             }
 
             case 0xDF: // map 32
             {
                 std::uint32_t len{};
                 return get_number(input_format_t::msgpack, len) && get_msgpack_object(static_cast<std::size_t>(len));
             }
 
             // negative fixint
             case 0xE0:
             case 0xE1:
             case 0xE2:
             case 0xE3:
             case 0xE4:
             case 0xE5:
             case 0xE6:
             case 0xE7:
             case 0xE8:
             case 0xE9:
             case 0xEA:
             case 0xEB:
             case 0xEC:
             case 0xED:
             case 0xEE:
             case 0xEF:
             case 0xF0:
             case 0xF1:
             case 0xF2:
             case 0xF3:
             case 0xF4:
             case 0xF5:
             case 0xF6:
             case 0xF7:
             case 0xF8:
             case 0xF9:
             case 0xFA:
             case 0xFB:
             case 0xFC:
             case 0xFD:
             case 0xFE:
             case 0xFF:
                 return sax->number_integer(static_cast<std::int8_t>(current));
 
             default: // anything else
             {
                 auto last_token = get_token_string();
                 return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                         exception_message(input_format_t::msgpack, concat("invalid byte: 0x", last_token), "value"), nullptr));
             }
         }
     }
 
     /*!
     @brief reads a MessagePack string
 
     This function first reads starting bytes to determine the expected
     string length and then copies this number of bytes into a string.
 
     @param[out] result  created string
 
     @return whether string creation completed
     */
     bool get_msgpack_string(string_t& result)
     {
         if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::msgpack, "string")))
         {
             return false;
         }
 
         switch (current)
         {
             // fixstr
             case 0xA0:
             case 0xA1:
             case 0xA2:
             case 0xA3:
             case 0xA4:
             case 0xA5:
             case 0xA6:
             case 0xA7:
             case 0xA8:
             case 0xA9:
             case 0xAA:
             case 0xAB:
             case 0xAC:
             case 0xAD:
             case 0xAE:
             case 0xAF:
             case 0xB0:
             case 0xB1:
             case 0xB2:
             case 0xB3:
             case 0xB4:
             case 0xB5:
             case 0xB6:
             case 0xB7:
             case 0xB8:
             case 0xB9:
             case 0xBA:
             case 0xBB:
             case 0xBC:
             case 0xBD:
             case 0xBE:
             case 0xBF:
             {
                 return get_string(input_format_t::msgpack, static_cast<unsigned int>(current) & 0x1Fu, result);
             }
 
             case 0xD9: // str 8
             {
                 std::uint8_t len{};
                 return get_number(input_format_t::msgpack, len) && get_string(input_format_t::msgpack, len, result);
             }
 
             case 0xDA: // str 16
             {
                 std::uint16_t len{};
                 return get_number(input_format_t::msgpack, len) && get_string(input_format_t::msgpack, len, result);
             }
 
             case 0xDB: // str 32
             {
                 std::uint32_t len{};
                 return get_number(input_format_t::msgpack, len) && get_string(input_format_t::msgpack, len, result);
             }
 
             default:
             {
                 auto last_token = get_token_string();
                 return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,
                                         exception_message(input_format_t::msgpack, concat("expected length specification (0xA0-0xBF, 0xD9-0xDB); last byte: 0x", last_token), "string"), nullptr));
             }
         }
     }
 
     /*!
     @brief reads a MessagePack byte array
 
     This function first reads starting bytes to determine the expected
     byte array length and then copies this number of bytes into a byte array.
 
     @param[out] result  created byte array
 
     @return whether byte array creation completed
     */
     bool get_msgpack_binary(binary_t& result)
     {
         // helper function to set the subtype
         auto assign_and_return_true = [&result](std::int8_t subtype)
         {
             result.set_subtype(static_cast<std::uint8_t>(subtype));
             return true;
         };
 
         switch (current)
         {
             case 0xC4: // bin 8
             {
                 std::uint8_t len{};
                 return get_number(input_format_t::msgpack, len) &&
                        get_binary(input_format_t::msgpack, len, result);
             }
 
             case 0xC5: // bin 16
             {
                 std::uint16_t len{};
                 return get_number(input_format_t::msgpack, len) &&
                        get_binary(input_format_t::msgpack, len, result);
             }
 
             case 0xC6: // bin 32
             {
                 std::uint32_t len{};
                 return get_number(input_format_t::msgpack, len) &&
                        get_binary(input_format_t::msgpack, len, result);
             }
 
             case 0xC7: // ext 8
             {
                 std::uint8_t len{};
                 std::int8_t subtype{};
                 return get_number(input_format_t::msgpack, len) &&
                        get_number(input_format_t::msgpack, subtype) &&
                        get_binary(input_format_t::msgpack, len, result) &&
                        assign_and_return_true(subtype);
             }
 
             case 0xC8: // ext 16
             {
                 std::uint16_t len{};
                 std::int8_t subtype{};
                 return get_number(input_format_t::msgpack, len) &&
                        get_number(input_format_t::msgpack, subtype) &&
                        get_binary(input_format_t::msgpack, len, result) &&
                        assign_and_return_true(subtype);
             }
 
             case 0xC9: // ext 32
             {
                 std::uint32_t len{};
                 std::int8_t subtype{};
                 return get_number(input_format_t::msgpack, len) &&
                        get_number(input_format_t::msgpack, subtype) &&
                        get_binary(input_format_t::msgpack, len, result) &&
                        assign_and_return_true(subtype);
             }
 
             case 0xD4: // fixext 1
             {
                 std::int8_t subtype{};
                 return get_number(input_format_t::msgpack, subtype) &&
                        get_binary(input_format_t::msgpack, 1, result) &&
                        assign_and_return_true(subtype);
             }
 
             case 0xD5: // fixext 2
             {
                 std::int8_t subtype{};
                 return get_number(input_format_t::msgpack, subtype) &&
                        get_binary(input_format_t::msgpack, 2, result) &&
                        assign_and_return_true(subtype);
             }
 
             case 0xD6: // fixext 4
             {
                 std::int8_t subtype{};
                 return get_number(input_format_t::msgpack, subtype) &&
                        get_binary(input_format_t::msgpack, 4, result) &&
                        assign_and_return_true(subtype);
             }
 
             case 0xD7: // fixext 8
             {
                 std::int8_t subtype{};
                 return get_number(input_format_t::msgpack, subtype) &&
                        get_binary(input_format_t::msgpack, 8, result) &&
                        assign_and_return_true(subtype);
             }
 
             case 0xD8: // fixext 16
             {
                 std::int8_t subtype{};
                 return get_number(input_format_t::msgpack, subtype) &&
                        get_binary(input_format_t::msgpack, 16, result) &&
                        assign_and_return_true(subtype);
             }
 
             default:           // LCOV_EXCL_LINE
                 return false;  // LCOV_EXCL_LINE
         }
     }
 
     /*!
     @param[in] len  the length of the array
     @return whether array creation completed
     */
     bool get_msgpack_array(const std::size_t len)
     {
         if (JSON_HEDLEY_UNLIKELY(!sax->start_array(len)))
         {
             return false;
         }
 
         for (std::size_t i = 0; i < len; ++i)
         {
             if (JSON_HEDLEY_UNLIKELY(!parse_msgpack_internal()))
             {
                 return false;
             }
         }
 
         return sax->end_array();
     }
 
     /*!
     @param[in] len  the length of the object
     @return whether object creation completed
     */
     bool get_msgpack_object(const std::size_t len)
     {
         if (JSON_HEDLEY_UNLIKELY(!sax->start_object(len)))
         {
             return false;
         }
 
         string_t key;
         for (std::size_t i = 0; i < len; ++i)
         {
             get();
             if (JSON_HEDLEY_UNLIKELY(!get_msgpack_string(key) || !sax->key(key)))
             {
                 return false;
             }
 
             if (JSON_HEDLEY_UNLIKELY(!parse_msgpack_internal()))
             {
                 return false;
             }
             key.clear();
         }
 
         return sax->end_object();
     }
 
     ////////////
     // UBJSON //
     ////////////
 
     /*!
     @param[in] get_char  whether a new character should be retrieved from the
                          input (true, default) or whether the last read
                          character should be considered instead
 
     @return whether a valid UBJSON value was passed to the SAX parser
     */
     bool parse_ubjson_internal(const bool get_char = true)
     {
         return get_ubjson_value(get_char ? get_ignore_noop() : current);
     }
 
     /*!
     @brief reads a UBJSON string
 
     This function is either called after reading the 'S' byte explicitly
     indicating a string, or in case of an object key where the 'S' byte can be
     left out.
 
     @param[out] result   created string
     @param[in] get_char  whether a new character should be retrieved from the
                          input (true, default) or whether the last read
                          character should be considered instead
 
     @return whether string creation completed
     */
     bool get_ubjson_string(string_t& result, const bool get_char = true)
     {
         if (get_char)
         {
             get();  // TODO(niels): may we ignore N here?
         }
 
         if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "value")))
         {
             return false;
         }
 
         switch (current)
         {
             case 'U':
             {
                 std::uint8_t len{};
                 return get_number(input_format, len) && get_string(input_format, len, result);
             }
 
             case 'i':
             {
                 std::int8_t len{};
                 return get_number(input_format, len) && get_string(input_format, len, result);
             }
 
             case 'I':
             {
                 std::int16_t len{};
                 return get_number(input_format, len) && get_string(input_format, len, result);
             }
 
             case 'l':
             {
                 std::int32_t len{};
                 return get_number(input_format, len) && get_string(input_format, len, result);
             }
 
             case 'L':
             {
                 std::int64_t len{};
                 return get_number(input_format, len) && get_string(input_format, len, result);
             }
 
             case 'u':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint16_t len{};
                 return get_number(input_format, len) && get_string(input_format, len, result);
             }
 
             case 'm':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint32_t len{};
                 return get_number(input_format, len) && get_string(input_format, len, result);
             }
 
             case 'M':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint64_t len{};
                 return get_number(input_format, len) && get_string(input_format, len, result);
             }
 
             default:
                 break;
         }
         auto last_token = get_token_string();
         std::string message;
 
         if (input_format != input_format_t::bjdata)
         {
             message = "expected length type specification (U, i, I, l, L); last byte: 0x" + last_token;
         }
         else
         {
             message = "expected length type specification (U, i, u, I, m, l, M, L); last byte: 0x" + last_token;
         }
         return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format, message, "string"), nullptr));
     }
 
     /*!
     @param[out] dim  an integer vector storing the ND array dimensions
     @return whether reading ND array size vector is successful
     */
     bool get_ubjson_ndarray_size(std::vector<size_t>& dim)
     {
         std::pair<std::size_t, char_int_type> size_and_type;
         size_t dimlen = 0;
         bool is_ndarray = false;
 
         if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_type(size_and_type)))
         {
             return false;
         }
 
         if (size_and_type.first != string_t::npos)
         {
             if (size_and_type.second != 0)
             {
                 if (size_and_type.second != 'N')
                 {
                     for (std::size_t i = 0; i < size_and_type.first; ++i)
                     {
                         if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_value(dimlen, is_ndarray, size_and_type.second)))
                         {
                             return false;
                         }
                         dim.push_back(dimlen);
                     }
                 }
             }
             else
             {
                 for (std::size_t i = 0; i < size_and_type.first; ++i)
                 {
                     if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_value(dimlen, is_ndarray)))
                     {
                         return false;
                     }
                     dim.push_back(dimlen);
                 }
             }
         }
         else
         {
             while (current != ']')
             {
                 if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_value(dimlen, is_ndarray, current)))
                 {
                     return false;
                 }
                 dim.push_back(dimlen);
                 get_ignore_noop();
             }
         }
         return true;
     }
 
     /*!
     @param[out] result  determined size
     @return whether size determination completed
     */
     bool get_ubjson_size_value(std::size_t& result, bool& is_ndarray, char_int_type prefix = 0)
     {
         is_ndarray = false;
         if (prefix == 0)
         {
             prefix = get_ignore_noop();
         }
 
         switch (prefix)
         {
             case 'U':
             {
                 std::uint8_t number{};
                 if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                 {
                     return false;
                 }
                 result = static_cast<std::size_t>(number);
                 return true;
             }
 
             case 'i':
             {
                 std::int8_t number{};
                 if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                 {
                     return false;
                 }
+                if (number < 0)
+                {
+                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,
+                                            exception_message(input_format, "count in an optimized container must be positive", "size"), nullptr));
+                }
                 result = static_cast<std::size_t>(number); // NOLINT(bugprone-signed-char-misuse,cert-str34-c): number is not a char
                 return true;
             }
 
             case 'I':
             {
                 std::int16_t number{};
                 if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                 {
                     return false;
                 }
+                if (number < 0)
+                {
+                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,
+                                            exception_message(input_format, "count in an optimized container must be positive", "size"), nullptr));
+                }
                 result = static_cast<std::size_t>(number);
                 return true;
             }
 
             case 'l':
             {
                 std::int32_t number{};
                 if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                 {
                     return false;
                 }
+                if (number < 0)
+                {
+                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,
+                                            exception_message(input_format, "count in an optimized container must be positive", "size"), nullptr));
+                }
                 result = static_cast<std::size_t>(number);
                 return true;
             }
 
             case 'L':
             {
                 std::int64_t number{};
                 if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                 {
                     return false;
                 }
+                if (number < 0)
+                {
+                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,
+                                            exception_message(input_format, "count in an optimized container must be positive", "size"), nullptr));
+                }
                 result = static_cast<std::size_t>(number);
                 return true;
             }
 
             case 'u':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint16_t number{};
                 if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                 {
                     return false;
                 }
                 result = static_cast<std::size_t>(number);
                 return true;
             }
 
             case 'm':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint32_t number{};
                 if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                 {
                     return false;
                 }
                 result = static_cast<std::size_t>(number);
                 return true;
             }
 
             case 'M':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint64_t number{};
                 if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                 {
                     return false;
                 }
                 result = detail::conditional_static_cast<std::size_t>(number);
                 return true;
             }
 
             case '[':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::vector<size_t> dim;
                 if (JSON_HEDLEY_UNLIKELY(!get_ubjson_ndarray_size(dim)))
                 {
                     return false;
                 }
                 if (dim.size() == 1 || (dim.size() == 2 && dim.at(0) == 1)) // return normal array size if 1D row vector
                 {
                     result = dim.at(dim.size() - 1);
                     return true;
                 }
                 if (!dim.empty())  // if ndarray, convert to an object in JData annotated array format
                 {
+                    for (auto i : dim) // test if any dimension in an ndarray is 0, if so, return a 1D empty container
+                    {
+                        if ( i == 0 )
+                        {
+                            result = 0;
+                            return true;
+                        }
+                    }
+
                     string_t key = "_ArraySize_";
                     if (JSON_HEDLEY_UNLIKELY(!sax->start_object(3) || !sax->key(key) || !sax->start_array(dim.size())))
                     {
                         return false;
                     }
                     result = 1;
                     for (auto i : dim)
                     {
                         result *= i;
                         if (JSON_HEDLEY_UNLIKELY(!sax->number_integer(static_cast<number_integer_t>(i))))
                         {
                             return false;
                         }
                     }
                     is_ndarray = true;
                     return sax->end_array();
                 }
                 result = 0;
                 return true;
             }
 
             default:
                 break;
         }
         auto last_token = get_token_string();
         std::string message;
 
         if (input_format != input_format_t::bjdata)
         {
             message = "expected length type specification (U, i, I, l, L) after '#'; last byte: 0x" + last_token;
         }
         else
         {
             message = "expected length type specification (U, i, u, I, m, l, M, L) after '#'; last byte: 0x" + last_token;
         }
         return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format, message, "size"), nullptr));
     }
 
     /*!
     @brief determine the type and size for a container
 
     In the optimized UBJSON format, a type and a size can be provided to allow
     for a more compact representation.
 
     @param[out] result  pair of the size and the type
 
     @return whether pair creation completed
     */
     bool get_ubjson_size_type(std::pair<std::size_t, char_int_type>& result)
     {
         bool is_ndarray = false;
         result.first = string_t::npos; // size
         result.second = 0; // type
 
         get_ignore_noop();
 
         if (current == '$')
         {
             std::vector<char_int_type> bjdx = {'[', '{', 'S', 'H', 'T', 'F', 'N', 'Z'}; // excluded markers in bjdata optimized type
 
             result.second = get();  // must not ignore 'N', because 'N' maybe the type
             if (JSON_HEDLEY_UNLIKELY( input_format == input_format_t::bjdata && std::find(bjdx.begin(), bjdx.end(), result.second) != bjdx.end() ))
             {
                 auto last_token = get_token_string();
                 return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                         exception_message(input_format, concat("marker 0x", last_token, " is not a permitted optimized array type"), "type"), nullptr));
             }
 
             if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "type")))
             {
                 return false;
             }
 
             get_ignore_noop();
             if (JSON_HEDLEY_UNLIKELY(current != '#'))
             {
                 if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "value")))
                 {
                     return false;
                 }
                 auto last_token = get_token_string();
                 return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                         exception_message(input_format, concat("expected '#' after type information; last byte: 0x", last_token), "size"), nullptr));
             }
 
             bool is_error = get_ubjson_size_value(result.first, is_ndarray);
             if (input_format == input_format_t::bjdata && is_ndarray)
             {
                 result.second |= (1 << 8); // use bit 8 to indicate ndarray, all UBJSON and BJData markers should be ASCII letters
             }
             return is_error;
         }
 
         if (current == '#')
         {
             bool is_error = get_ubjson_size_value(result.first, is_ndarray);
             if (input_format == input_format_t::bjdata && is_ndarray)
             {
                 result.second |= (1 << 8); // use bit 8 to indicate ndarray, all UBJSON and BJData markers should be ASCII letters
             }
             return is_error;
         }
 
         return true;
     }
 
     /*!
     @param prefix  the previously read or set type prefix
     @return whether value creation completed
     */
     bool get_ubjson_value(const char_int_type prefix)
     {
         switch (prefix)
         {
             case std::char_traits<char_type>::eof():  // EOF
                 return unexpect_eof(input_format, "value");
 
             case 'T':  // true
                 return sax->boolean(true);
             case 'F':  // false
                 return sax->boolean(false);
 
             case 'Z':  // null
                 return sax->null();
 
             case 'U':
             {
                 std::uint8_t number{};
                 return get_number(input_format, number) && sax->number_unsigned(number);
             }
 
             case 'i':
             {
                 std::int8_t number{};
                 return get_number(input_format, number) && sax->number_integer(number);
             }
 
             case 'I':
             {
                 std::int16_t number{};
                 return get_number(input_format, number) && sax->number_integer(number);
             }
 
             case 'l':
             {
                 std::int32_t number{};
                 return get_number(input_format, number) && sax->number_integer(number);
             }
 
             case 'L':
             {
                 std::int64_t number{};
                 return get_number(input_format, number) && sax->number_integer(number);
             }
 
             case 'u':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint16_t number{};
                 return get_number(input_format, number) && sax->number_unsigned(number);
             }
 
             case 'm':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint32_t number{};
                 return get_number(input_format, number) && sax->number_unsigned(number);
             }
 
             case 'M':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 std::uint64_t number{};
                 return get_number(input_format, number) && sax->number_unsigned(number);
             }
 
             case 'h':
             {
                 if (input_format != input_format_t::bjdata)
                 {
                     break;
                 }
                 const auto byte1_raw = get();
                 if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "number")))
                 {
                     return false;
                 }
                 const auto byte2_raw = get();
                 if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "number")))
                 {
                     return false;
                 }
 
                 const auto byte1 = static_cast<unsigned char>(byte1_raw);
                 const auto byte2 = static_cast<unsigned char>(byte2_raw);
 
                 // code from RFC 7049, Appendix D, Figure 3:
                 // As half-precision floating-point numbers were only added
                 // to IEEE 754 in 2008, today's programming platforms often
                 // still only have limited support for them. It is very
                 // easy to include at least decoding support for them even
                 // without such support. An example of a small decoder for
                 // half-precision floating-point numbers in the C language
                 // is shown in Fig. 3.
                 const auto half = static_cast<unsigned int>((byte2 << 8u) + byte1);
                 const double val = [&half]
                 {
                     const int exp = (half >> 10u) & 0x1Fu;
                     const unsigned int mant = half & 0x3FFu;
                     JSON_ASSERT(0 <= exp&& exp <= 32);
                     JSON_ASSERT(mant <= 1024);
                     switch (exp)
                     {
                         case 0:
                             return std::ldexp(mant, -24);
                         case 31:
                             return (mant == 0)
                             ? std::numeric_limits<double>::infinity()
                             : std::numeric_limits<double>::quiet_NaN();
                         default:
                             return std::ldexp(mant + 1024, exp - 25);
                     }
                 }();
                 return sax->number_float((half & 0x8000u) != 0
                                          ? static_cast<number_float_t>(-val)
                                          : static_cast<number_float_t>(val), "");
             }
 
             case 'd':
             {
                 float number{};
                 return get_number(input_format, number) && sax->number_float(static_cast<number_float_t>(number), "");
             }
 
             case 'D':
             {
                 double number{};
                 return get_number(input_format, number) && sax->number_float(static_cast<number_float_t>(number), "");
             }
 
             case 'H':
             {
                 return get_ubjson_high_precision_number();
             }
 
             case 'C':  // char
             {
                 get();
                 if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "char")))
                 {
                     return false;
                 }
                 if (JSON_HEDLEY_UNLIKELY(current > 127))
                 {
                     auto last_token = get_token_string();
                     return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,
                                             exception_message(input_format, concat("byte after 'C' must be in range 0x00..0x7F; last byte: 0x", last_token), "char"), nullptr));
                 }
                 string_t s(1, static_cast<typename string_t::value_type>(current));
                 return sax->string(s);
             }
 
             case 'S':  // string
             {
                 string_t s;
                 return get_ubjson_string(s) && sax->string(s);
             }
 
             case '[':  // array
                 return get_ubjson_array();
 
             case '{':  // object
                 return get_ubjson_object();
 
             default: // anything else
                 break;
         }
         auto last_token = get_token_string();
         return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read, exception_message(input_format, "invalid byte: 0x" + last_token, "value"), nullptr));
     }
 
     /*!
     @return whether array creation completed
     */
     bool get_ubjson_array()
     {
         std::pair<std::size_t, char_int_type> size_and_type;
         if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_type(size_and_type)))
         {
             return false;
         }
 
         // if bit-8 of size_and_type.second is set to 1, encode bjdata ndarray as an object in JData annotated array format (https://github.com/NeuroJSON/jdata):
         // {"_ArrayType_" : "typeid", "_ArraySize_" : [n1, n2, ...], "_ArrayData_" : [v1, v2, ...]}
 
         if (input_format == input_format_t::bjdata && size_and_type.first != string_t::npos && (size_and_type.second & (1 << 8)) != 0)
         {
             std::map<char_int_type, string_t> bjdtype = {{'U', "uint8"},  {'i', "int8"},  {'u', "uint16"}, {'I', "int16"},
                 {'m', "uint32"}, {'l', "int32"}, {'M', "uint64"}, {'L', "int64"}, {'d', "single"}, {'D', "double"}, {'C', "char"}
             };
 
             size_and_type.second &= ~(static_cast<char_int_type>(1) << 8);  // use bit 8 to indicate ndarray, here we remove the bit to restore the type marker
 
             string_t key = "_ArrayType_";
             if (JSON_HEDLEY_UNLIKELY(bjdtype.count(size_and_type.second) == 0))
             {
                 auto last_token = get_token_string();
                 return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                         exception_message(input_format, "invalid byte: 0x" + last_token, "type"), nullptr));
             }
 
             if (JSON_HEDLEY_UNLIKELY(!sax->key(key) || !sax->string(bjdtype[size_and_type.second]) ))
             {
                 return false;
             }
 
             if (size_and_type.second == 'C')
             {
                 size_and_type.second = 'U';
             }
 
             key = "_ArrayData_";
             if (JSON_HEDLEY_UNLIKELY(!sax->key(key) || !sax->start_array(size_and_type.first) ))
             {
                 return false;
             }
 
             for (std::size_t i = 0; i < size_and_type.first; ++i)
             {
                 if (JSON_HEDLEY_UNLIKELY(!get_ubjson_value(size_and_type.second)))
                 {
                     return false;
                 }
             }
 
             return (sax->end_array() && sax->end_object());
         }
 
         if (size_and_type.first != string_t::npos)
         {
             if (JSON_HEDLEY_UNLIKELY(!sax->start_array(size_and_type.first)))
             {
                 return false;
             }
 
             if (size_and_type.second != 0)
             {
                 if (size_and_type.second != 'N')
                 {
                     for (std::size_t i = 0; i < size_and_type.first; ++i)
                     {
                         if (JSON_HEDLEY_UNLIKELY(!get_ubjson_value(size_and_type.second)))
                         {
                             return false;
                         }
                     }
                 }
             }
             else
             {
                 for (std::size_t i = 0; i < size_and_type.first; ++i)
                 {
                     if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal()))
                     {
                         return false;
                     }
                 }
             }
         }
         else
         {
             if (JSON_HEDLEY_UNLIKELY(!sax->start_array(static_cast<std::size_t>(-1))))
             {
                 return false;
             }
 
             while (current != ']')
             {
                 if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal(false)))
                 {
                     return false;
                 }
                 get_ignore_noop();
             }
         }
 
         return sax->end_array();
     }
 
     /*!
     @return whether object creation completed
     */
     bool get_ubjson_object()
     {
         std::pair<std::size_t, char_int_type> size_and_type;
         if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_type(size_and_type)))
         {
             return false;
         }
 
         // do not accept ND-array size in objects in BJData
         if (input_format == input_format_t::bjdata && size_and_type.first != string_t::npos && (size_and_type.second & (1 << 8)) != 0)
         {
             auto last_token = get_token_string();
             return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                     exception_message(input_format, "BJData object does not support ND-array size in optimized format", "object"), nullptr));
         }
 
         string_t key;
         if (size_and_type.first != string_t::npos)
         {
             if (JSON_HEDLEY_UNLIKELY(!sax->start_object(size_and_type.first)))
             {
                 return false;
             }
 
             if (size_and_type.second != 0)
             {
                 for (std::size_t i = 0; i < size_and_type.first; ++i)
                 {
                     if (JSON_HEDLEY_UNLIKELY(!get_ubjson_string(key) || !sax->key(key)))
                     {
                         return false;
                     }
                     if (JSON_HEDLEY_UNLIKELY(!get_ubjson_value(size_and_type.second)))
                     {
                         return false;
                     }
                     key.clear();
                 }
             }
             else
             {
                 for (std::size_t i = 0; i < size_and_type.first; ++i)
                 {
                     if (JSON_HEDLEY_UNLIKELY(!get_ubjson_string(key) || !sax->key(key)))
                     {
                         return false;
                     }
                     if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal()))
                     {
                         return false;
                     }
                     key.clear();
                 }
             }
         }
         else
         {
             if (JSON_HEDLEY_UNLIKELY(!sax->start_object(static_cast<std::size_t>(-1))))
             {
                 return false;
             }
 
             while (current != '}')
             {
                 if (JSON_HEDLEY_UNLIKELY(!get_ubjson_string(key, false) || !sax->key(key)))
                 {
                     return false;
                 }
                 if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal()))
                 {
                     return false;
                 }
                 get_ignore_noop();
                 key.clear();
             }
         }
 
         return sax->end_object();
     }
 
     // Note, no reader for UBJSON binary types is implemented because they do
     // not exist
 
     bool get_ubjson_high_precision_number()
     {
         // get size of following number string
         std::size_t size{};
         bool is_ndarray = false;
         auto res = get_ubjson_size_value(size, is_ndarray);
         if (JSON_HEDLEY_UNLIKELY(!res))
         {
             return res;
         }
 
         // get number string
         std::vector<char> number_vector;
         for (std::size_t i = 0; i < size; ++i)
         {
             get();
             if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "number")))
             {
                 return false;
             }
             number_vector.push_back(static_cast<char>(current));
         }
 
         // parse number string
         using ia_type = decltype(detail::input_adapter(number_vector));
         auto number_lexer = detail::lexer<BasicJsonType, ia_type>(detail::input_adapter(number_vector), false);
         const auto result_number = number_lexer.scan();
         const auto number_string = number_lexer.get_token_string();
         const auto result_remainder = number_lexer.scan();
 
         using token_type = typename detail::lexer_base<BasicJsonType>::token_type;
 
         if (JSON_HEDLEY_UNLIKELY(result_remainder != token_type::end_of_input))
         {
             return sax->parse_error(chars_read, number_string, parse_error::create(115, chars_read,
                                     exception_message(input_format, concat("invalid number text: ", number_lexer.get_token_string()), "high-precision number"), nullptr));
         }
 
         switch (result_number)
         {
             case token_type::value_integer:
                 return sax->number_integer(number_lexer.get_number_integer());
             case token_type::value_unsigned:
                 return sax->number_unsigned(number_lexer.get_number_unsigned());
             case token_type::value_float:
                 return sax->number_float(number_lexer.get_number_float(), std::move(number_string));
             case token_type::uninitialized:
             case token_type::literal_true:
             case token_type::literal_false:
             case token_type::literal_null:
             case token_type::value_string:
             case token_type::begin_array:
             case token_type::begin_object:
             case token_type::end_array:
             case token_type::end_object:
             case token_type::name_separator:
             case token_type::value_separator:
             case token_type::parse_error:
             case token_type::end_of_input:
             case token_type::literal_or_value:
             default:
                 return sax->parse_error(chars_read, number_string, parse_error::create(115, chars_read,
                                         exception_message(input_format, concat("invalid number text: ", number_lexer.get_token_string()), "high-precision number"), nullptr));
         }
     }
 
     ///////////////////////
     // Utility functions //
     ///////////////////////
 
     /*!
     @brief get next character from the input
 
     This function provides the interface to the used input adapter. It does
     not throw in case the input reached EOF, but returns a -'ve valued
     `std::char_traits<char_type>::eof()` in that case.
 
     @return character read from the input
     */
     char_int_type get()
     {
         ++chars_read;
         return current = ia.get_character();
     }
 
     /*!
     @return character read from the input after ignoring all 'N' entries
     */
     char_int_type get_ignore_noop()
     {
         do
         {
             get();
         }
         while (current == 'N');
 
         return current;
     }
 
     /*
     @brief read a number from the input
 
     @tparam NumberType the type of the number
     @param[in] format   the current format (for diagnostics)
     @param[out] result  number of type @a NumberType
 
     @return whether conversion completed
 
     @note This function needs to respect the system's endianness, because
           bytes in CBOR, MessagePack, and UBJSON are stored in network order
           (big endian) and therefore need reordering on little endian systems.
           On the other hand, BSON and BJData use little endian and should reorder
           on big endian systems.
     */
     template<typename NumberType, bool InputIsLittleEndian = false>
     bool get_number(const input_format_t format, NumberType& result)
     {
         // step 1: read input into array with system's byte order
         std::array<std::uint8_t, sizeof(NumberType)> vec{};
         for (std::size_t i = 0; i < sizeof(NumberType); ++i)
         {
             get();
             if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, "number")))
             {
                 return false;
             }
 
             // reverse byte order prior to conversion if necessary
             if (is_little_endian != (InputIsLittleEndian || format == input_format_t::bjdata))
             {
                 vec[sizeof(NumberType) - i - 1] = static_cast<std::uint8_t>(current);
             }
             else
             {
                 vec[i] = static_cast<std::uint8_t>(current); // LCOV_EXCL_LINE
             }
         }
 
         // step 2: convert array into number of type T and return
         std::memcpy(&result, vec.data(), sizeof(NumberType));
         return true;
     }
 
     /*!
     @brief create a string by reading characters from the input
 
     @tparam NumberType the type of the number
     @param[in] format the current format (for diagnostics)
     @param[in] len number of characters to read
     @param[out] result string created by reading @a len bytes
 
     @return whether string creation completed
 
     @note We can not reserve @a len bytes for the result, because @a len
           may be too large. Usually, @ref unexpect_eof() detects the end of
           the input before we run out of string memory.
     */
     template<typename NumberType>
     bool get_string(const input_format_t format,
                     const NumberType len,
                     string_t& result)
     {
         bool success = true;
         for (NumberType i = 0; i < len; i++)
         {
             get();
             if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, "string")))
             {
                 success = false;
                 break;
             }
             result.push_back(static_cast<typename string_t::value_type>(current));
         }
         return success;
     }
 
     /*!
     @brief create a byte array by reading bytes from the input
 
     @tparam NumberType the type of the number
     @param[in] format the current format (for diagnostics)
     @param[in] len number of bytes to read
     @param[out] result byte array created by reading @a len bytes
 
     @return whether byte array creation completed
 
     @note We can not reserve @a len bytes for the result, because @a len
           may be too large. Usually, @ref unexpect_eof() detects the end of
           the input before we run out of memory.
     */
     template<typename NumberType>
     bool get_binary(const input_format_t format,
                     const NumberType len,
                     binary_t& result)
     {
         bool success = true;
         for (NumberType i = 0; i < len; i++)
         {
             get();
             if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, "binary")))
             {
                 success = false;
                 break;
             }
             result.push_back(static_cast<std::uint8_t>(current));
         }
         return success;
     }
 
     /*!
     @param[in] format   the current format (for diagnostics)
     @param[in] context  further context information (for diagnostics)
     @return whether the last read character is not EOF
     */
     JSON_HEDLEY_NON_NULL(3)
     bool unexpect_eof(const input_format_t format, const char* context) const
     {
         if (JSON_HEDLEY_UNLIKELY(current == std::char_traits<char_type>::eof()))
         {
             return sax->parse_error(chars_read, "<end of file>",
                                     parse_error::create(110, chars_read, exception_message(format, "unexpected end of input", context), nullptr));
         }
         return true;
     }
 
     /*!
     @return a string representation of the last read byte
     */
     std::string get_token_string() const
     {
         std::array<char, 3> cr{{}};
         static_cast<void>((std::snprintf)(cr.data(), cr.size(), "%.2hhX", static_cast<unsigned char>(current))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
         return std::string{cr.data()};
     }
 
     /*!
     @param[in] format   the current format
     @param[in] detail   a detailed error message
     @param[in] context  further context information
     @return a message string to use in the parse_error exceptions
     */
     std::string exception_message(const input_format_t format,
                                   const std::string& detail,
                                   const std::string& context) const
     {
         std::string error_msg = "syntax error while parsing ";
 
         switch (format)
         {
             case input_format_t::cbor:
                 error_msg += "CBOR";
                 break;
 
             case input_format_t::msgpack:
                 error_msg += "MessagePack";
                 break;
 
             case input_format_t::ubjson:
                 error_msg += "UBJSON";
                 break;
 
             case input_format_t::bson:
                 error_msg += "BSON";
                 break;
 
             case input_format_t::bjdata:
                 error_msg += "BJData";
                 break;
 
             case input_format_t::json: // LCOV_EXCL_LINE
             default:            // LCOV_EXCL_LINE
                 JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
         }
 
         return concat(error_msg, ' ', context, ": ", detail);
     }
 
   private:
     /// input adapter
     InputAdapterType ia;
 
     /// the current character
     char_int_type current = std::char_traits<char_type>::eof();
 
     /// the number of characters read
     std::size_t chars_read = 0;
 
     /// whether we can assume little endianness
     const bool is_little_endian = little_endianness();
 
     /// input format
     const input_format_t input_format = input_format_t::json;
 
     /// the SAX parser
     json_sax_t* sax = nullptr;
 };
 }  // namespace detail
 }  // namespace nlohmann
 
 // #include <nlohmann/detail/input/input_adapters.hpp>
 
 // #include <nlohmann/detail/input/lexer.hpp>
 
 // #include <nlohmann/detail/input/parser.hpp>
 
 
 #include <cmath> // isfinite
 #include <cstdint> // uint8_t
 #include <functional> // function
 #include <string> // string
 #include <utility> // move
 #include <vector> // vector
 
 // #include <nlohmann/detail/exceptions.hpp>
 
 // #include <nlohmann/detail/input/input_adapters.hpp>
 
 // #include <nlohmann/detail/input/json_sax.hpp>
 
 // #include <nlohmann/detail/input/lexer.hpp>
 
 // #include <nlohmann/detail/macro_scope.hpp>
 
 // #include <nlohmann/detail/meta/is_sax.hpp>
 
 // #include <nlohmann/detail/string_concat.hpp>
 
 // #include <nlohmann/detail/value_t.hpp>
diff --git a/tests/src/unit-bjdata.cpp b/tests/src/unit-bjdata.cpp
index 0a1e6e02..e9ce1b14 100644
--- a/tests/src/unit-bjdata.cpp
+++ b/tests/src/unit-bjdata.cpp
@@ -119,2848 +119,2798 @@ class SaxCountdown
 TEST_CASE("BJData")
 {
     SECTION("individual values")
     {
         SECTION("discarded")
         {
             // discarded values are not serialized
             json j = json::value_t::discarded;
             const auto result = json::to_bjdata(j);
             CHECK(result.empty());
         }
 
         SECTION("null")
         {
             json j = nullptr;
             std::vector<uint8_t> expected = {'Z'};
             const auto result = json::to_bjdata(j);
             CHECK(result == expected);
 
             // roundtrip
             CHECK(json::from_bjdata(result) == j);
             CHECK(json::from_bjdata(result, true, false) == j);
         }
 
         SECTION("boolean")
         {
             SECTION("true")
             {
                 json j = true;
                 std::vector<uint8_t> expected = {'T'};
                 const auto result = json::to_bjdata(j);
                 CHECK(result == expected);
 
                 // roundtrip
                 CHECK(json::from_bjdata(result) == j);
                 CHECK(json::from_bjdata(result, true, false) == j);
             }
 
             SECTION("false")
             {
                 json j = false;
                 std::vector<uint8_t> expected = {'F'};
                 const auto result = json::to_bjdata(j);
                 CHECK(result == expected);
 
                 // roundtrip
                 CHECK(json::from_bjdata(result) == j);
                 CHECK(json::from_bjdata(result, true, false) == j);
             }
         }
 
         SECTION("number")
         {
             SECTION("signed")
             {
                 SECTION("-9223372036854775808..-2147483649 (int64)")
                 {
                     std::vector<int64_t> numbers;
                     numbers.push_back((std::numeric_limits<int64_t>::min)());
                     numbers.push_back(-1000000000000000000LL);
                     numbers.push_back(-100000000000000000LL);
                     numbers.push_back(-10000000000000000LL);
                     numbers.push_back(-1000000000000000LL);
                     numbers.push_back(-100000000000000LL);
                     numbers.push_back(-10000000000000LL);
                     numbers.push_back(-1000000000000LL);
                     numbers.push_back(-100000000000LL);
                     numbers.push_back(-10000000000LL);
                     numbers.push_back(-2147483649LL);
                     for (auto i : numbers)
                     {
                         CAPTURE(i)
 
                         // create JSON value with integer number
                         json j = i;
 
                         // check type
                         CHECK(j.is_number_integer());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back(static_cast<uint8_t>('L'));
                         expected.push_back(static_cast<uint8_t>(i & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 8) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 16) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 24) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 32) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 40) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 48) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 56) & 0xff));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 9);
 
                         // check individual bytes
                         CHECK(result[0] == 'L');
                         int64_t restored = (static_cast<int64_t>(result[8]) << 070) +
                                            (static_cast<int64_t>(result[7]) << 060) +
                                            (static_cast<int64_t>(result[6]) << 050) +
                                            (static_cast<int64_t>(result[5]) << 040) +
                                            (static_cast<int64_t>(result[4]) << 030) +
                                            (static_cast<int64_t>(result[3]) << 020) +
                                            (static_cast<int64_t>(result[2]) << 010) +
                                            static_cast<int64_t>(result[1]);
                         CHECK(restored == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
 
                 SECTION("-2147483648..-32769 (int32)")
                 {
                     std::vector<int32_t> numbers;
                     numbers.push_back(-32769);
                     numbers.push_back(-100000);
                     numbers.push_back(-1000000);
                     numbers.push_back(-10000000);
                     numbers.push_back(-100000000);
                     numbers.push_back(-1000000000);
                     numbers.push_back(-2147483647 - 1); // https://stackoverflow.com/a/29356002/266378
                     for (auto i : numbers)
                     {
                         CAPTURE(i)
 
                         // create JSON value with integer number
                         json j = i;
 
                         // check type
                         CHECK(j.is_number_integer());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back(static_cast<uint8_t>('l'));
                         expected.push_back(static_cast<uint8_t>(i & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 8) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 16) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 24) & 0xff));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 5);
 
                         // check individual bytes
                         CHECK(result[0] == 'l');
                         int32_t restored = (static_cast<int32_t>(result[4]) << 030) +
                                            (static_cast<int32_t>(result[3]) << 020) +
                                            (static_cast<int32_t>(result[2]) << 010) +
                                            static_cast<int32_t>(result[1]);
                         CHECK(restored == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
 
                 SECTION("-32768..-129 (int16)")
                 {
                     for (int32_t i = -32768; i <= -129; ++i)
                     {
                         CAPTURE(i)
 
                         // create JSON value with integer number
                         json j = i;
 
                         // check type
                         CHECK(j.is_number_integer());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back(static_cast<uint8_t>('I'));
                         expected.push_back(static_cast<uint8_t>(i & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 8) & 0xff));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 3);
 
                         // check individual bytes
                         CHECK(result[0] == 'I');
                         auto restored = static_cast<int16_t>(((result[2] << 8) + result[1]));
                         CHECK(restored == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
 
                 SECTION("-9263 (int16)")
                 {
                     json j = -9263;
                     std::vector<uint8_t> expected = {'I', 0xd1, 0xdb};
 
                     // compare result + size
                     const auto result = json::to_bjdata(j);
                     CHECK(result == expected);
                     CHECK(result.size() == 3);
 
                     // check individual bytes
                     CHECK(result[0] == 'I');
                     auto restored = static_cast<int16_t>(((result[2] << 8) + result[1]));
                     CHECK(restored == -9263);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
 
                 SECTION("-128..-1 (int8)")
                 {
                     for (auto i = -128; i <= -1; ++i)
                     {
                         CAPTURE(i)
 
                         // create JSON value with integer number
                         json j = i;
 
                         // check type
                         CHECK(j.is_number_integer());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back('i');
                         expected.push_back(static_cast<uint8_t>(i));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 2);
 
                         // check individual bytes
                         CHECK(result[0] == 'i');
                         CHECK(static_cast<int8_t>(result[1]) == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
 
                 SECTION("0..127 (int8)")
                 {
                     for (size_t i = 0; i <= 127; ++i)
                     {
                         CAPTURE(i)
 
                         // create JSON value with integer number
                         json j = -1;
                         j.get_ref<json::number_integer_t&>() = static_cast<json::number_integer_t>(i);
 
                         // check type
                         CHECK(j.is_number_integer());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back(static_cast<uint8_t>('i'));
                         expected.push_back(static_cast<uint8_t>(i));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 2);
 
                         // check individual bytes
                         CHECK(result[0] == 'i');
                         CHECK(result[1] == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
 
                 SECTION("128..255 (uint8)")
                 {
                     for (size_t i = 128; i <= 255; ++i)
                     {
                         CAPTURE(i)
 
                         // create JSON value with integer number
                         json j = -1;
                         j.get_ref<json::number_integer_t&>() = static_cast<json::number_integer_t>(i);
 
                         // check type
                         CHECK(j.is_number_integer());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back(static_cast<uint8_t>('U'));
                         expected.push_back(static_cast<uint8_t>(i));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 2);
 
                         // check individual bytes
                         CHECK(result[0] == 'U');
                         CHECK(result[1] == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
 
                 SECTION("256..32767 (int16)")
                 {
                     for (size_t i = 256; i <= 32767; ++i)
                     {
                         CAPTURE(i)
 
                         // create JSON value with integer number
                         json j = -1;
                         j.get_ref<json::number_integer_t&>() = static_cast<json::number_integer_t>(i);
 
                         // check type
                         CHECK(j.is_number_integer());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back(static_cast<uint8_t>('I'));
                         expected.push_back(static_cast<uint8_t>(i & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 8) & 0xff));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 3);
 
                         // check individual bytes
                         CHECK(result[0] == 'I');
                         auto restored = static_cast<uint16_t>(static_cast<uint8_t>(result[2]) * 256 + static_cast<uint8_t>(result[1]));
                         CHECK(restored == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
 
                 SECTION("32768..65535 (uint16)")
                 {
                     for (uint32_t i :
                             {
                                 32768u, 55555u, 65535u
                             })
                     {
                         CAPTURE(i)
 
                         // create JSON value with integer number
                         json j = -1;
                         j.get_ref<json::number_integer_t&>() = static_cast<json::number_integer_t>(i);
 
                         // check type
                         CHECK(j.is_number_integer());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back(static_cast<uint8_t>('u'));
                         expected.push_back(static_cast<uint8_t>(i & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 8) & 0xff));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 3);
 
                         // check individual bytes
                         CHECK(result[0] == 'u');
                         auto restored = static_cast<uint16_t>(static_cast<uint8_t>(result[2]) * 256 + static_cast<uint8_t>(result[1]));
                         CHECK(restored == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
 
                 SECTION("65536..2147483647 (int32)")
                 {
                     for (uint32_t i :
                             {
                                 65536u, 77777u, 2147483647u
                             })
                     {
                         CAPTURE(i)
 
                         // create JSON value with integer number
                         json j = -1;
                         j.get_ref<json::number_integer_t&>() = static_cast<json::number_integer_t>(i);
 
                         // check type
                         CHECK(j.is_number_integer());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back('l');
                         expected.push_back(static_cast<uint8_t>(i & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 8) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 16) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 24) & 0xff));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 5);
 
                         // check individual bytes
                         CHECK(result[0] == 'l');
                         uint32_t restored = (static_cast<uint32_t>(result[4]) << 030) +
                                             (static_cast<uint32_t>(result[3]) << 020) +
                                             (static_cast<uint32_t>(result[2]) << 010) +
                                             static_cast<uint32_t>(result[1]);
                         CHECK(restored == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
 
                 SECTION("2147483648..4294967295 (uint32)")
                 {
                     for (uint32_t i :
                             {
                                 2147483648u, 3333333333u, 4294967295u
                             })
                     {
                         CAPTURE(i)
 
                         // create JSON value with integer number
                         json j = -1;
                         j.get_ref<json::number_integer_t&>() = static_cast<json::number_integer_t>(i);
 
                         // check type
                         CHECK(j.is_number_integer());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back('m');
                         expected.push_back(static_cast<uint8_t>(i & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 8) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 16) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 24) & 0xff));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 5);
 
                         // check individual bytes
                         CHECK(result[0] == 'm');
                         uint32_t restored = (static_cast<uint32_t>(result[4]) << 030) +
                                             (static_cast<uint32_t>(result[3]) << 020) +
                                             (static_cast<uint32_t>(result[2]) << 010) +
                                             static_cast<uint32_t>(result[1]);
                         CHECK(restored == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
 
                 SECTION("4294967296..9223372036854775807 (int64)")
                 {
                     std::vector<uint64_t> v = {4294967296LU, 9223372036854775807LU};
                     for (uint64_t i : v)
                     {
                         CAPTURE(i)
 
                         // create JSON value with integer number
                         json j = -1;
                         j.get_ref<json::number_integer_t&>() = static_cast<json::number_integer_t>(i);
 
                         // check type
                         CHECK(j.is_number_integer());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back('L');
                         expected.push_back(static_cast<uint8_t>(i & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 010) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 020) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 030) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 040) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 050) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 060) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 070) & 0xff));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 9);
 
                         // check individual bytes
                         CHECK(result[0] == 'L');
                         uint64_t restored = (static_cast<uint64_t>(result[8]) << 070) +
                                             (static_cast<uint64_t>(result[7]) << 060) +
                                             (static_cast<uint64_t>(result[6]) << 050) +
                                             (static_cast<uint64_t>(result[5]) << 040) +
                                             (static_cast<uint64_t>(result[4]) << 030) +
                                             (static_cast<uint64_t>(result[3]) << 020) +
                                             (static_cast<uint64_t>(result[2]) << 010) +
                                             static_cast<uint64_t>(result[1]);
                         CHECK(restored == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
 
                 SECTION("9223372036854775808..18446744073709551615 (uint64)")
                 {
                     std::vector<uint64_t> v = {9223372036854775808ull, 18446744073709551615ull};
                     for (uint64_t i : v)
                     {
                         CAPTURE(i)
 
                         // create JSON value with integer number
                         json j = i;
 
                         // check type
                         CHECK(j.is_number_unsigned());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back('M');
                         expected.push_back(static_cast<uint8_t>(i & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 010) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 020) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 030) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 040) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 050) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 060) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 070) & 0xff));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 9);
 
                         // check individual bytes
                         CHECK(result[0] == 'M');
                         uint64_t restored = (static_cast<uint64_t>(result[8]) << 070) +
                                             (static_cast<uint64_t>(result[7]) << 060) +
                                             (static_cast<uint64_t>(result[6]) << 050) +
                                             (static_cast<uint64_t>(result[5]) << 040) +
                                             (static_cast<uint64_t>(result[4]) << 030) +
                                             (static_cast<uint64_t>(result[3]) << 020) +
                                             (static_cast<uint64_t>(result[2]) << 010) +
                                             static_cast<uint64_t>(result[1]);
                         CHECK(restored == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
             }
 
             SECTION("unsigned")
             {
                 SECTION("0..127 (int8)")
                 {
                     for (size_t i = 0; i <= 127; ++i)
                     {
                         CAPTURE(i)
 
                         // create JSON value with unsigned integer number
                         json j = i;
 
                         // check type
                         CHECK(j.is_number_unsigned());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back('i');
                         expected.push_back(static_cast<uint8_t>(i));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 2);
 
                         // check individual bytes
                         CHECK(result[0] == 'i');
                         auto restored = static_cast<uint8_t>(result[1]);
                         CHECK(restored == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
 
                 SECTION("128..255 (uint8)")
                 {
                     for (size_t i = 128; i <= 255; ++i)
                     {
                         CAPTURE(i)
 
                         // create JSON value with unsigned integer number
                         json j = i;
 
                         // check type
                         CHECK(j.is_number_unsigned());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back('U');
                         expected.push_back(static_cast<uint8_t>(i));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 2);
 
                         // check individual bytes
                         CHECK(result[0] == 'U');
                         auto restored = static_cast<uint8_t>(result[1]);
                         CHECK(restored == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
 
                 SECTION("256..32767 (int16)")
                 {
                     for (size_t i = 256; i <= 32767; ++i)
                     {
                         CAPTURE(i)
 
                         // create JSON value with unsigned integer number
                         json j = i;
 
                         // check type
                         CHECK(j.is_number_unsigned());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back('I');
                         expected.push_back(static_cast<uint8_t>(i & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 8) & 0xff));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 3);
 
                         // check individual bytes
                         CHECK(result[0] == 'I');
                         auto restored = static_cast<uint16_t>(static_cast<uint8_t>(result[2]) * 256 + static_cast<uint8_t>(result[1]));
                         CHECK(restored == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
 
                 SECTION("32768..65535 (uint16)")
                 {
                     for (uint32_t i :
                             {
                                 32768u, 55555u, 65535u
                             })
                     {
                         CAPTURE(i)
 
                         // create JSON value with unsigned integer number
                         json j = i;
 
                         // check type
                         CHECK(j.is_number_unsigned());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back('u');
                         expected.push_back(static_cast<uint8_t>(i & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 8) & 0xff));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 3);
 
                         // check individual bytes
                         CHECK(result[0] == 'u');
                         auto restored = static_cast<uint16_t>(static_cast<uint8_t>(result[2]) * 256 + static_cast<uint8_t>(result[1]));
                         CHECK(restored == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
                 SECTION("65536..2147483647 (int32)")
                 {
                     for (uint32_t i :
                             {
                                 65536u, 77777u, 2147483647u
                             })
                     {
                         CAPTURE(i)
 
                         // create JSON value with unsigned integer number
                         json j = i;
 
                         // check type
                         CHECK(j.is_number_unsigned());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back('l');
                         expected.push_back(static_cast<uint8_t>(i & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 8) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 16) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 24) & 0xff));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 5);
 
                         // check individual bytes
                         CHECK(result[0] == 'l');
                         uint32_t restored = (static_cast<uint32_t>(result[4]) << 030) +
                                             (static_cast<uint32_t>(result[3]) << 020) +
                                             (static_cast<uint32_t>(result[2]) << 010) +
                                             static_cast<uint32_t>(result[1]);
                         CHECK(restored == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
 
                 SECTION("2147483648..4294967295 (uint32)")
                 {
                     for (uint32_t i :
                             {
                                 2147483648u, 3333333333u, 4294967295u
                             })
                     {
                         CAPTURE(i)
 
                         // create JSON value with unsigned integer number
                         json j = i;
 
                         // check type
                         CHECK(j.is_number_unsigned());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back('m');
                         expected.push_back(static_cast<uint8_t>(i & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 8) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 16) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 24) & 0xff));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 5);
 
                         // check individual bytes
                         CHECK(result[0] == 'm');
                         uint32_t restored = (static_cast<uint32_t>(result[4]) << 030) +
                                             (static_cast<uint32_t>(result[3]) << 020) +
                                             (static_cast<uint32_t>(result[2]) << 010) +
                                             static_cast<uint32_t>(result[1]);
                         CHECK(restored == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
 
                 SECTION("4294967296..9223372036854775807 (int64)")
                 {
                     std::vector<uint64_t> v = {4294967296ul, 9223372036854775807ul};
                     for (uint64_t i : v)
                     {
                         CAPTURE(i)
 
                         // create JSON value with integer number
                         json j = i;
 
                         // check type
                         CHECK(j.is_number_unsigned());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back('L');
                         expected.push_back(static_cast<uint8_t>(i & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 010) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 020) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 030) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 040) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 050) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 060) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 070) & 0xff));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 9);
 
                         // check individual bytes
                         CHECK(result[0] == 'L');
                         uint64_t restored = (static_cast<uint64_t>(result[8]) << 070) +
                                             (static_cast<uint64_t>(result[7]) << 060) +
                                             (static_cast<uint64_t>(result[6]) << 050) +
                                             (static_cast<uint64_t>(result[5]) << 040) +
                                             (static_cast<uint64_t>(result[4]) << 030) +
                                             (static_cast<uint64_t>(result[3]) << 020) +
                                             (static_cast<uint64_t>(result[2]) << 010) +
                                             static_cast<uint64_t>(result[1]);
                         CHECK(restored == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
 
                 SECTION("9223372036854775808..18446744073709551615 (uint64)")
                 {
                     std::vector<uint64_t> v = {9223372036854775808ull, 18446744073709551615ull};
                     for (uint64_t i : v)
                     {
                         CAPTURE(i)
 
                         // create JSON value with integer number
                         json j = i;
 
                         // check type
                         CHECK(j.is_number_unsigned());
 
                         // create expected byte vector
                         std::vector<uint8_t> expected;
                         expected.push_back('M');
                         expected.push_back(static_cast<uint8_t>(i & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 010) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 020) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 030) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 040) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 050) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 060) & 0xff));
                         expected.push_back(static_cast<uint8_t>((i >> 070) & 0xff));
 
                         // compare result + size
                         const auto result = json::to_bjdata(j);
                         CHECK(result == expected);
                         CHECK(result.size() == 9);
 
                         // check individual bytes
                         CHECK(result[0] == 'M');
                         uint64_t restored = (static_cast<uint64_t>(result[8]) << 070) +
                                             (static_cast<uint64_t>(result[7]) << 060) +
                                             (static_cast<uint64_t>(result[6]) << 050) +
                                             (static_cast<uint64_t>(result[5]) << 040) +
                                             (static_cast<uint64_t>(result[4]) << 030) +
                                             (static_cast<uint64_t>(result[3]) << 020) +
                                             (static_cast<uint64_t>(result[2]) << 010) +
                                             static_cast<uint64_t>(result[1]);
                         CHECK(restored == i);
 
                         // roundtrip
                         CHECK(json::from_bjdata(result) == j);
                         CHECK(json::from_bjdata(result, true, false) == j);
                     }
                 }
             }
             SECTION("float64")
             {
                 SECTION("3.1415925")
                 {
                     double v = 3.1415925;
                     json j = v;
                     std::vector<uint8_t> expected =
                     {
                         'D', 0xfc, 0xde, 0xa6, 0x3f, 0xfb, 0x21, 0x09, 0x40
                     };
                     const auto result = json::to_bjdata(j);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result) == v);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
             }
 
             SECTION("half-precision float")
             {
                 SECTION("simple half floats")
                 {
                     CHECK(json::parse("0.0") == json::from_bjdata(std::vector<uint8_t>({'h', 0x00, 0x00})));
                     CHECK(json::parse("-0.0") == json::from_bjdata(std::vector<uint8_t>({'h', 0x00, 0x80})));
                     CHECK(json::parse("1.0") == json::from_bjdata(std::vector<uint8_t>({'h', 0x00, 0x3c})));
                     CHECK(json::parse("1.5") == json::from_bjdata(std::vector<uint8_t>({'h', 0x00, 0x3e})));
                     CHECK(json::parse("65504.0") == json::from_bjdata(std::vector<uint8_t>({'h', 0xff, 0x7b})));
                 }
 
                 SECTION("errors")
                 {
                     SECTION("no byte follows")
                     {
                         json _;
                         std::vector<uint8_t> vec0 = {'h'};
-                        CHECK_THROWS_AS(_ = json::from_bjdata(vec0), json::parse_error&);
-                        CHECK_THROWS_WITH(_ = json::from_bjdata(vec0), "[json.exception.parse_error.110] parse error at byte 2: syntax error while parsing BJData number: unexpected end of input");
+                        CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vec0), "[json.exception.parse_error.110] parse error at byte 2: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
                         CHECK(json::from_bjdata(vec0, true, false).is_discarded());
                     }
 
                     SECTION("only one byte follows")
                     {
                         json _;
                         std::vector<uint8_t> vec1 = {'h', 0x00};
-                        CHECK_THROWS_AS(_ = json::from_bjdata(vec1), json::parse_error&);
-                        CHECK_THROWS_WITH(_ = json::from_bjdata(vec1), "[json.exception.parse_error.110] parse error at byte 3: syntax error while parsing BJData number: unexpected end of input");
+                        CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vec1), "[json.exception.parse_error.110] parse error at byte 3: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
                         CHECK(json::from_bjdata(vec1, true, false).is_discarded());
                     }
                 }
             }
 
             SECTION("half-precision float (edge cases)")
             {
                 SECTION("exp = 0b00000")
                 {
                     SECTION("0 (0 00000 0000000000)")
                     {
                         json j = json::from_bjdata(std::vector<uint8_t>({'h', 0x00, 0x00}));
                         json::number_float_t d{j};
                         CHECK(d == 0.0);
                     }
 
                     SECTION("-0 (1 00000 0000000000)")
                     {
                         json j = json::from_bjdata(std::vector<uint8_t>({'h', 0x00, 0x80}));
                         json::number_float_t d{j};
                         CHECK(d == -0.0);
                     }
 
                     SECTION("2**-24 (0 00000 0000000001)")
                     {
                         json j = json::from_bjdata(std::vector<uint8_t>({'h', 0x01, 0x00}));
                         json::number_float_t d{j};
                         CHECK(d == std::pow(2.0, -24.0));
                     }
                 }
 
                 SECTION("exp = 0b11111")
                 {
                     SECTION("infinity (0 11111 0000000000)")
                     {
                         json j = json::from_bjdata(std::vector<uint8_t>({'h', 0x00, 0x7c}));
                         json::number_float_t d{j};
                         CHECK(d == std::numeric_limits<json::number_float_t>::infinity());
                         CHECK(j.dump() == "null");
                     }
 
                     SECTION("-infinity (1 11111 0000000000)")
                     {
                         json j = json::from_bjdata(std::vector<uint8_t>({'h', 0x00, 0xfc}));
                         json::number_float_t d{j};
                         CHECK(d == -std::numeric_limits<json::number_float_t>::infinity());
                         CHECK(j.dump() == "null");
                     }
                 }
 
                 SECTION("other values from https://en.wikipedia.org/wiki/Half-precision_floating-point_format")
                 {
                     SECTION("1 (0 01111 0000000000)")
                     {
                         json j = json::from_bjdata(std::vector<uint8_t>({'h', 0x00, 0x3c}));
                         json::number_float_t d{j};
                         CHECK(d == 1);
                     }
 
                     SECTION("-2 (1 10000 0000000000)")
                     {
                         json j = json::from_bjdata(std::vector<uint8_t>({'h', 0x00, 0xc0}));
                         json::number_float_t d{j};
                         CHECK(d == -2);
                     }
 
                     SECTION("65504 (0 11110 1111111111)")
                     {
                         json j = json::from_bjdata(std::vector<uint8_t>({'h', 0xff, 0x7b}));
                         json::number_float_t d{j};
                         CHECK(d == 65504);
                     }
                 }
 
                 SECTION("infinity")
                 {
                     json j = json::from_bjdata(std::vector<uint8_t>({'h', 0x00, 0x7c}));
                     json::number_float_t d{j};
                     CHECK_FALSE(std::isfinite(d));
                     CHECK(j.dump() == "null");
                 }
 
                 SECTION("NaN")
                 {
                     json j = json::from_bjdata(std::vector<uint8_t>({'h', 0x00, 0x7e }));
                     json::number_float_t d{j};
                     CHECK(std::isnan(d));
                     CHECK(j.dump() == "null");
                 }
             }
 
             SECTION("high-precision number")
             {
                 SECTION("unsigned integer number")
                 {
                     std::vector<uint8_t> vec = {'H', 'i', 0x14, '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
                     const auto j = json::from_bjdata(vec);
                     CHECK(j.is_number_unsigned());
                     CHECK(j.dump() == "12345678901234567890");
                 }
 
                 SECTION("signed integer number")
                 {
                     std::vector<uint8_t> vec = {'H', 'i', 0x13, '-', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8'};
                     const auto j = json::from_bjdata(vec);
                     CHECK(j.is_number_integer());
                     CHECK(j.dump() == "-123456789012345678");
                 }
 
                 SECTION("floating-point number")
                 {
                     std::vector<uint8_t> vec = {'H', 'i', 0x16, '3', '.', '1', '4', '1', '5', '9',  '2', '6', '5', '3', '5', '8', '9',  '7', '9', '3', '2', '3', '8', '4',  '6'};
                     const auto j = json::from_bjdata(vec);
                     CHECK(j.is_number_float());
                     CHECK(j.dump() == "3.141592653589793");
                 }
 
                 SECTION("errors")
                 {
                     // error while parsing length
                     std::vector<uint8_t> vec0 = {'H', 'i'};
                     CHECK(json::from_bjdata(vec0, true, false).is_discarded());
                     // error while parsing string
                     std::vector<uint8_t> vec1 = {'H', 'i', '1'};
                     CHECK(json::from_bjdata(vec1, true, false).is_discarded());
 
                     json _;
                     std::vector<uint8_t> vec2 = {'H', 'i', 2, '1', 'A', '3'};
                     CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vec2), "[json.exception.parse_error.115] parse error at byte 5: syntax error while parsing BJData high-precision number: invalid number text: 1A", json::parse_error);
                     std::vector<uint8_t> vec3 = {'H', 'i', 2, '1', '.'};
                     CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vec3), "[json.exception.parse_error.115] parse error at byte 5: syntax error while parsing BJData high-precision number: invalid number text: 1.", json::parse_error);
                     std::vector<uint8_t> vec4 = {'H', 2, '1', '0'};
                     CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vec4), "[json.exception.parse_error.113] parse error at byte 2: syntax error while parsing BJData size: expected length type specification (U, i, u, I, m, l, M, L) after '#'; last byte: 0x02", json::parse_error);
                 }
             }
         }
 
         SECTION("string")
         {
             SECTION("N = 0..127")
             {
                 for (size_t N = 0; N <= 127; ++N)
                 {
                     CAPTURE(N)
 
                     // create JSON value with string containing of N * 'x'
                     const auto s = std::string(N, 'x');
                     json j = s;
 
                     // create expected byte vector
                     std::vector<uint8_t> expected;
                     expected.push_back('S');
                     expected.push_back('i');
                     expected.push_back(static_cast<uint8_t>(N));
                     for (size_t i = 0; i < N; ++i)
                     {
                         expected.push_back('x');
                     }
 
                     // compare result + size
                     const auto result = json::to_bjdata(j);
                     CHECK(result == expected);
                     CHECK(result.size() == N + 3);
                     // check that no null byte is appended
                     if (N > 0)
                     {
                         CHECK(result.back() != '\x00');
                     }
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
             }
 
             SECTION("N = 128..255")
             {
                 for (size_t N = 128; N <= 255; ++N)
                 {
                     CAPTURE(N)
 
                     // create JSON value with string containing of N * 'x'
                     const auto s = std::string(N, 'x');
                     json j = s;
 
                     // create expected byte vector
                     std::vector<uint8_t> expected;
                     expected.push_back('S');
                     expected.push_back('U');
                     expected.push_back(static_cast<uint8_t>(N));
                     for (size_t i = 0; i < N; ++i)
                     {
                         expected.push_back('x');
                     }
 
                     // compare result + size
                     const auto result = json::to_bjdata(j);
                     CHECK(result == expected);
                     CHECK(result.size() == N + 3);
                     // check that no null byte is appended
                     CHECK(result.back() != '\x00');
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
             }
 
             SECTION("N = 256..32767")
             {
                 for (size_t N :
                         {
                             256u, 999u, 1025u, 3333u, 2048u, 32767u
                         })
                 {
                     CAPTURE(N)
 
                     // create JSON value with string containing of N * 'x'
                     const auto s = std::string(N, 'x');
                     json j = s;
 
                     // create expected byte vector (hack: create string first)
                     std::vector<uint8_t> expected(N, 'x');
                     // reverse order of commands, because we insert at begin()
                     expected.insert(expected.begin(), static_cast<uint8_t>((N >> 8) & 0xff));
                     expected.insert(expected.begin(), static_cast<uint8_t>(N & 0xff));
                     expected.insert(expected.begin(), 'I');
                     expected.insert(expected.begin(), 'S');
 
                     // compare result + size
                     const auto result = json::to_bjdata(j);
                     CHECK(result == expected);
                     CHECK(result.size() == N + 4);
                     // check that no null byte is appended
                     CHECK(result.back() != '\x00');
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
             }
 
             SECTION("N = 32768..65535")
             {
                 for (size_t N :
                         {
                             32768u, 55555u, 65535u
                         })
                 {
                     CAPTURE(N)
 
                     // create JSON value with string containing of N * 'x'
                     const auto s = std::string(N, 'x');
                     json j = s;
 
                     // create expected byte vector (hack: create string first)
                     std::vector<uint8_t> expected(N, 'x');
                     // reverse order of commands, because we insert at begin()
                     expected.insert(expected.begin(), static_cast<uint8_t>((N >> 8) & 0xff));
                     expected.insert(expected.begin(), static_cast<uint8_t>(N & 0xff));
                     expected.insert(expected.begin(), 'u');
                     expected.insert(expected.begin(), 'S');
 
                     // compare result + size
                     const auto result = json::to_bjdata(j);
                     CHECK(result == expected);
                     CHECK(result.size() == N + 4);
                     // check that no null byte is appended
                     CHECK(result.back() != '\x00');
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
             }
 
             SECTION("N = 65536..2147483647")
             {
                 for (size_t N :
                         {
                             65536u, 77777u, 1048576u
                         })
                 {
                     CAPTURE(N)
 
                     // create JSON value with string containing of N * 'x'
                     const auto s = std::string(N, 'x');
                     json j = s;
 
                     // create expected byte vector (hack: create string first)
                     std::vector<uint8_t> expected(N, 'x');
                     // reverse order of commands, because we insert at begin()
                     expected.insert(expected.begin(), static_cast<uint8_t>((N >> 24) & 0xff));
                     expected.insert(expected.begin(), static_cast<uint8_t>((N >> 16) & 0xff));
                     expected.insert(expected.begin(), static_cast<uint8_t>((N >> 8) & 0xff));
                     expected.insert(expected.begin(), static_cast<uint8_t>(N & 0xff));
                     expected.insert(expected.begin(), 'l');
                     expected.insert(expected.begin(), 'S');
 
                     // compare result + size
                     const auto result = json::to_bjdata(j);
                     CHECK(result == expected);
                     CHECK(result.size() == N + 6);
                     // check that no null byte is appended
                     CHECK(result.back() != '\x00');
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
             }
         }
 
 
         SECTION("binary")
         {
             SECTION("N = 0..127")
             {
                 for (std::size_t N = 0; N <= 127; ++N)
                 {
                     CAPTURE(N)
 
                     // create JSON value with byte array containing of N * 'x'
                     const auto s = std::vector<std::uint8_t>(N, 'x');
                     json j = json::binary(s);
 
                     // create expected byte vector
                     std::vector<std::uint8_t> expected;
                     expected.push_back(static_cast<std::uint8_t>('['));
                     if (N != 0)
                     {
                         expected.push_back(static_cast<std::uint8_t>('$'));
                         expected.push_back(static_cast<std::uint8_t>('U'));
                     }
                     expected.push_back(static_cast<std::uint8_t>('#'));
                     expected.push_back(static_cast<std::uint8_t>('i'));
                     expected.push_back(static_cast<std::uint8_t>(N));
                     for (size_t i = 0; i < N; ++i)
                     {
                         expected.push_back(0x78);
                     }
 
                     // compare result + size
                     const auto result = json::to_bjdata(j, true, true);
                     CHECK(result == expected);
                     if (N == 0)
                     {
                         CHECK(result.size() == N + 4);
                     }
                     else
                     {
                         CHECK(result.size() == N + 6);
                     }
 
                     // check that no null byte is appended
                     if (N > 0)
                     {
                         CHECK(result.back() != '\x00');
                     }
 
                     // roundtrip only works to an array of numbers
                     json j_out = s;
                     CHECK(json::from_bjdata(result) == j_out);
                     CHECK(json::from_bjdata(result, true, false) == j_out);
                 }
             }
 
             SECTION("N = 128..255")
             {
                 for (std::size_t N = 128; N <= 255; ++N)
                 {
                     CAPTURE(N)
 
                     // create JSON value with byte array containing of N * 'x'
                     const auto s = std::vector<std::uint8_t>(N, 'x');
                     json j = json::binary(s);
 
                     // create expected byte vector
                     std::vector<uint8_t> expected;
                     expected.push_back(static_cast<std::uint8_t>('['));
                     expected.push_back(static_cast<std::uint8_t>('$'));
                     expected.push_back(static_cast<std::uint8_t>('U'));
                     expected.push_back(static_cast<std::uint8_t>('#'));
                     expected.push_back(static_cast<std::uint8_t>('U'));
                     expected.push_back(static_cast<std::uint8_t>(N));
                     for (size_t i = 0; i < N; ++i)
                     {
                         expected.push_back(0x78);
                     }
 
                     // compare result + size
                     const auto result = json::to_bjdata(j, true, true);
                     CHECK(result == expected);
                     CHECK(result.size() == N + 6);
                     // check that no null byte is appended
                     CHECK(result.back() != '\x00');
 
                     // roundtrip only works to an array of numbers
                     json j_out = s;
                     CHECK(json::from_bjdata(result) == j_out);
                     CHECK(json::from_bjdata(result, true, false) == j_out);
                 }
             }
 
             SECTION("N = 256..32767")
             {
                 for (std::size_t N :
                         {
                             256u, 999u, 1025u, 3333u, 2048u, 32767u
                         })
                 {
                     CAPTURE(N)
 
                     // create JSON value with byte array containing of N * 'x'
                     const auto s = std::vector<std::uint8_t>(N, 'x');
                     json j = json::binary(s);
 
                     // create expected byte vector
                     std::vector<std::uint8_t> expected(N + 7, 'x');
                     expected[0] = '[';
                     expected[1] = '$';
                     expected[2] = 'U';
                     expected[3] = '#';
                     expected[4] = 'I';
                     expected[5] = static_cast<std::uint8_t>(N & 0xFF);
                     expected[6] = static_cast<std::uint8_t>((N >> 8) & 0xFF);
 
                     // compare result + size
                     const auto result = json::to_bjdata(j, true, true);
                     CHECK(result == expected);
                     CHECK(result.size() == N + 7);
                     // check that no null byte is appended
                     CHECK(result.back() != '\x00');
 
                     // roundtrip only works to an array of numbers
                     json j_out = s;
                     CHECK(json::from_bjdata(result) == j_out);
                     CHECK(json::from_bjdata(result, true, false) == j_out);
                 }
             }
 
             SECTION("N = 32768..65535")
             {
                 for (std::size_t N :
                         {
                             32768u, 55555u, 65535u
                         })
                 {
                     CAPTURE(N)
 
                     // create JSON value with byte array containing of N * 'x'
                     const auto s = std::vector<std::uint8_t>(N, 'x');
                     json j = json::binary(s);
 
                     // create expected byte vector
                     std::vector<std::uint8_t> expected(N + 7, 'x');
                     expected[0] = '[';
                     expected[1] = '$';
                     expected[2] = 'U';
                     expected[3] = '#';
                     expected[4] = 'u';
                     expected[5] = static_cast<std::uint8_t>(N & 0xFF);
                     expected[6] = static_cast<std::uint8_t>((N >> 8) & 0xFF);
 
                     // compare result + size
                     const auto result = json::to_bjdata(j, true, true);
                     CHECK(result == expected);
                     CHECK(result.size() == N + 7);
                     // check that no null byte is appended
                     CHECK(result.back() != '\x00');
 
                     // roundtrip only works to an array of numbers
                     json j_out = s;
                     CHECK(json::from_bjdata(result) == j_out);
                     CHECK(json::from_bjdata(result, true, false) == j_out);
                 }
             }
 
             SECTION("N = 65536..2147483647")
             {
                 for (std::size_t N :
                         {
                             65536u, 77777u, 1048576u
                         })
                 {
                     CAPTURE(N)
 
                     // create JSON value with byte array containing of N * 'x'
                     const auto s = std::vector<std::uint8_t>(N, 'x');
                     json j = json::binary(s);
 
                     // create expected byte vector
                     std::vector<std::uint8_t> expected(N + 9, 'x');
                     expected[0] = '[';
                     expected[1] = '$';
                     expected[2] = 'U';
                     expected[3] = '#';
                     expected[4] = 'l';
                     expected[5] = static_cast<std::uint8_t>(N & 0xFF);
                     expected[6] = static_cast<std::uint8_t>((N >> 8) & 0xFF);
                     expected[7] = static_cast<std::uint8_t>((N >> 16) & 0xFF);
                     expected[8] = static_cast<std::uint8_t>((N >> 24) & 0xFF);
 
                     // compare result + size
                     const auto result = json::to_bjdata(j, true, true);
                     CHECK(result == expected);
                     CHECK(result.size() == N + 9);
                     // check that no null byte is appended
                     CHECK(result.back() != '\x00');
 
                     // roundtrip only works to an array of numbers
                     json j_out = s;
                     CHECK(json::from_bjdata(result) == j_out);
                     CHECK(json::from_bjdata(result, true, false) == j_out);
                 }
             }
 
             SECTION("Other Serializations")
             {
                 const std::size_t N = 10;
                 const auto s = std::vector<std::uint8_t>(N, 'x');
                 json j = json::binary(s);
 
                 SECTION("No Count No Type")
                 {
                     std::vector<uint8_t> expected;
                     expected.push_back(static_cast<std::uint8_t>('['));
                     for (std::size_t i = 0; i < N; ++i)
                     {
                         expected.push_back(static_cast<std::uint8_t>('U'));
                         expected.push_back(static_cast<std::uint8_t>(0x78));
                     }
                     expected.push_back(static_cast<std::uint8_t>(']'));
 
                     // compare result + size
                     const auto result = json::to_bjdata(j, false, false);
                     CHECK(result == expected);
                     CHECK(result.size() == N + 12);
                     // check that no null byte is appended
                     CHECK(result.back() != '\x00');
 
                     // roundtrip only works to an array of numbers
                     json j_out = s;
                     CHECK(json::from_bjdata(result) == j_out);
                     CHECK(json::from_bjdata(result, true, false) == j_out);
                 }
 
                 SECTION("Yes Count No Type")
                 {
                     std::vector<std::uint8_t> expected;
                     expected.push_back(static_cast<std::uint8_t>('['));
                     expected.push_back(static_cast<std::uint8_t>('#'));
                     expected.push_back(static_cast<std::uint8_t>('i'));
                     expected.push_back(static_cast<std::uint8_t>(N));
 
                     for (size_t i = 0; i < N; ++i)
                     {
                         expected.push_back(static_cast<std::uint8_t>('U'));
                         expected.push_back(static_cast<std::uint8_t>(0x78));
                     }
 
                     // compare result + size
                     const auto result = json::to_bjdata(j, true, false);
                     CHECK(result == expected);
                     CHECK(result.size() == N + 14);
                     // check that no null byte is appended
                     CHECK(result.back() != '\x00');
 
                     // roundtrip only works to an array of numbers
                     json j_out = s;
                     CHECK(json::from_bjdata(result) == j_out);
                     CHECK(json::from_bjdata(result, true, false) == j_out);
                 }
             }
         }
         SECTION("array")
         {
             SECTION("empty")
             {
                 SECTION("size=false type=false")
                 {
                     json j = json::array();
                     std::vector<uint8_t> expected = {'[', ']'};
                     const auto result = json::to_bjdata(j);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
 
                 SECTION("size=true type=false")
                 {
                     json j = json::array();
                     std::vector<uint8_t> expected = {'[', '#', 'i', 0};
                     const auto result = json::to_bjdata(j, true);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
 
                 SECTION("size=true type=true")
                 {
                     json j = json::array();
                     std::vector<uint8_t> expected = {'[', '#', 'i', 0};
                     const auto result = json::to_bjdata(j, true, true);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
             }
 
             SECTION("[null]")
             {
                 SECTION("size=false type=false")
                 {
                     json j = {nullptr};
                     std::vector<uint8_t> expected = {'[', 'Z', ']'};
                     const auto result = json::to_bjdata(j);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
 
                 SECTION("size=true type=false")
                 {
                     json j = {nullptr};
                     std::vector<uint8_t> expected = {'[', '#', 'i', 1, 'Z'};
                     const auto result = json::to_bjdata(j, true);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
 
                 SECTION("size=true type=true")
                 {
                     json j = {nullptr};
                     std::vector<uint8_t> expected = {'[', '#', 'i', 1, 'Z'};
                     const auto result = json::to_bjdata(j, true, true);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
             }
 
             SECTION("[1,2,3,4,5]")
             {
                 SECTION("size=false type=false")
                 {
                     json j = json::parse("[1,2,3,4,5]");
                     std::vector<uint8_t> expected = {'[', 'i', 1, 'i', 2, 'i', 3, 'i', 4, 'i', 5, ']'};
                     const auto result = json::to_bjdata(j);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
 
                 SECTION("size=true type=false")
                 {
                     json j = json::parse("[1,2,3,4,5]");
                     std::vector<uint8_t> expected = {'[', '#', 'i', 5, 'i', 1, 'i', 2, 'i', 3, 'i', 4, 'i', 5};
                     const auto result = json::to_bjdata(j, true);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
 
                 SECTION("size=true type=true")
                 {
                     json j = json::parse("[1,2,3,4,5]");
                     std::vector<uint8_t> expected = {'[', '$', 'i', '#', 'i', 5, 1, 2, 3, 4, 5};
                     const auto result = json::to_bjdata(j, true, true);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
             }
 
             SECTION("[[[[]]]]")
             {
                 SECTION("size=false type=false")
                 {
                     json j = json::parse("[[[[]]]]");
                     std::vector<uint8_t> expected = {'[', '[', '[', '[', ']', ']', ']', ']'};
                     const auto result = json::to_bjdata(j);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
 
                 SECTION("size=true type=false")
                 {
                     json j = json::parse("[[[[]]]]");
                     std::vector<uint8_t> expected = {'[', '#', 'i', 1, '[', '#', 'i', 1, '[', '#', 'i', 1, '[', '#', 'i', 0};
                     const auto result = json::to_bjdata(j, true);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
 
                 SECTION("size=true type=true")
                 {
                     json j = json::parse("[[[[]]]]");
                     std::vector<uint8_t> expected = {'[', '#', 'i', 1, '[', '#', 'i', 1, '[', '#', 'i', 1, '[', '#', 'i', 0};
                     const auto result = json::to_bjdata(j, true, true);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
             }
 
             SECTION("array with int16_t elements")
             {
                 SECTION("size=false type=false")
                 {
                     json j(257, nullptr);
                     std::vector<uint8_t> expected(j.size() + 2, 'Z'); // all null
                     expected[0] = '['; // opening array
                     expected[258] = ']'; // closing array
                     const auto result = json::to_bjdata(j);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
 
                 SECTION("size=true type=false")
                 {
                     json j(257, nullptr);
                     std::vector<uint8_t> expected(j.size() + 5, 'Z'); // all null
                     expected[0] = '['; // opening array
                     expected[1] = '#'; // array size
                     expected[2] = 'I'; // int16
                     expected[3] = 0x01; // 0x0101, first byte
                     expected[4] = 0x01; // 0x0101, second byte
                     const auto result = json::to_bjdata(j, true);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
             }
 
             SECTION("array with uint16_t elements")
             {
                 SECTION("size=false type=false")
                 {
                     json j(32768, nullptr);
                     std::vector<uint8_t> expected(j.size() + 2, 'Z'); // all null
                     expected[0] = '['; // opening array
                     expected[32769] = ']'; // closing array
                     const auto result = json::to_bjdata(j);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
 
                 SECTION("size=true type=false")
                 {
                     json j(32768, nullptr);
                     std::vector<uint8_t> expected(j.size() + 5, 'Z'); // all null
                     expected[0] = '['; // opening array
                     expected[1] = '#'; // array size
                     expected[2] = 'u'; // int16
                     expected[3] = 0x00; // 0x0101, first byte
                     expected[4] = 0x80; // 0x0101, second byte
                     const auto result = json::to_bjdata(j, true);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
             }
 
             SECTION("array with int32_t elements")
             {
                 SECTION("size=false type=false")
                 {
                     json j(65793, nullptr);
                     std::vector<uint8_t> expected(j.size() + 2, 'Z'); // all null
                     expected[0] = '['; // opening array
                     expected[65794] = ']'; // closing array
                     const auto result = json::to_bjdata(j);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
 
                 SECTION("size=true type=false")
                 {
                     json j(65793, nullptr);
                     std::vector<uint8_t> expected(j.size() + 7, 'Z'); // all null
                     expected[0] = '['; // opening array
                     expected[1] = '#'; // array size
                     expected[2] = 'l'; // int32
                     expected[3] = 0x01; // 0x00010101, fourth byte
                     expected[4] = 0x01; // 0x00010101, third byte
                     expected[5] = 0x01; // 0x00010101, second byte
                     expected[6] = 0x00; // 0x00010101, first byte
                     const auto result = json::to_bjdata(j, true);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
             }
         }
 
         SECTION("object")
         {
             SECTION("empty")
             {
                 SECTION("size=false type=false")
                 {
                     json j = json::object();
                     std::vector<uint8_t> expected = {'{', '}'};
                     const auto result = json::to_bjdata(j);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
 
                 SECTION("size=true type=false")
                 {
                     json j = json::object();
                     std::vector<uint8_t> expected = {'{', '#', 'i', 0};
                     const auto result = json::to_bjdata(j, true);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
 
                 SECTION("size=true type=true")
                 {
                     json j = json::object();
                     std::vector<uint8_t> expected = {'{', '#', 'i', 0};
                     const auto result = json::to_bjdata(j, true, true);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
             }
 
             SECTION("{\"\":null}")
             {
                 SECTION("size=false type=false")
                 {
                     json j = {{"", nullptr}};
                     std::vector<uint8_t> expected = {'{', 'i', 0, 'Z', '}'};
                     const auto result = json::to_bjdata(j);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
 
                 SECTION("size=true type=false")
                 {
                     json j = {{"", nullptr}};
                     std::vector<uint8_t> expected = {'{', '#', 'i', 1, 'i', 0, 'Z'};
                     const auto result = json::to_bjdata(j, true);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
             }
 
             SECTION("{\"a\": {\"b\": {\"c\": {}}}}")
             {
                 SECTION("size=false type=false")
                 {
                     json j = json::parse(R"({"a": {"b": {"c": {}}}})");
                     std::vector<uint8_t> expected =
                     {
                         '{', 'i', 1, 'a', '{', 'i', 1, 'b', '{', 'i', 1, 'c', '{', '}', '}', '}', '}'
                     };
                     const auto result = json::to_bjdata(j);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
 
                 SECTION("size=true type=false")
                 {
                     json j = json::parse(R"({"a": {"b": {"c": {}}}})");
                     std::vector<uint8_t> expected =
                     {
                         '{', '#', 'i', 1, 'i', 1, 'a', '{', '#', 'i', 1, 'i', 1, 'b', '{', '#', 'i', 1, 'i', 1, 'c', '{', '#', 'i', 0
                     };
                     const auto result = json::to_bjdata(j, true);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
 
                 SECTION("size=true type=true ignore object type marker")
                 {
                     json j = json::parse(R"({"a": {"b": {"c": {}}}})");
                     std::vector<uint8_t> expected =
                     {
                         '{', '#', 'i', 1, 'i', 1, 'a', '{', '#', 'i', 1, 'i', 1, 'b', '{', '#', 'i', 1, 'i', 1, 'c', '{', '#', 'i', 0
                     };
                     const auto result = json::to_bjdata(j, true, true);
                     CHECK(result == expected);
 
                     // roundtrip
                     CHECK(json::from_bjdata(result) == j);
                     CHECK(json::from_bjdata(result, true, false) == j);
                 }
             }
         }
     }
 
     SECTION("errors")
     {
         SECTION("strict mode")
         {
             std::vector<uint8_t> vec = {'Z', 'Z'};
             SECTION("non-strict mode")
             {
                 const auto result = json::from_bjdata(vec, false);
                 CHECK(result == json());
             }
 
             SECTION("strict mode")
             {
                 json _;
-                CHECK_THROWS_AS(_ = json::from_bjdata(vec), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_bjdata(vec),
-                                  "[json.exception.parse_error.110] parse error at byte 2: syntax error while parsing BJData value: expected end of input; last byte: 0x5A");
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vec),
+                                     "[json.exception.parse_error.110] parse error at byte 2: syntax error while parsing BJData value: expected end of input; last byte: 0x5A", json::parse_error&);
             }
         }
     }
 
     SECTION("SAX aborts")
     {
         SECTION("start_array()")
         {
             std::vector<uint8_t> v = {'[', 'T', 'F', ']'};
             SaxCountdown scp(0);
             CHECK_FALSE(json::sax_parse(v, &scp, json::input_format_t::bjdata));
         }
 
         SECTION("start_object()")
         {
             std::vector<uint8_t> v = {'{', 'i', 3, 'f', 'o', 'o', 'F', '}'};
             SaxCountdown scp(0);
             CHECK_FALSE(json::sax_parse(v, &scp, json::input_format_t::bjdata));
         }
 
         SECTION("key() in object")
         {
             std::vector<uint8_t> v = {'{', 'i', 3, 'f', 'o', 'o', 'F', '}'};
             SaxCountdown scp(1);
             CHECK_FALSE(json::sax_parse(v, &scp, json::input_format_t::bjdata));
         }
 
         SECTION("start_array(len)")
         {
             std::vector<uint8_t> v = {'[', '#', 'i', '2', 'T', 'F'};
             SaxCountdown scp(0);
             CHECK_FALSE(json::sax_parse(v, &scp, json::input_format_t::bjdata));
         }
 
         SECTION("start_object(len)")
         {
             std::vector<uint8_t> v = {'{', '#', 'i', '1', 3, 'f', 'o', 'o', 'F'};
             SaxCountdown scp(0);
             CHECK_FALSE(json::sax_parse(v, &scp, json::input_format_t::bjdata));
         }
 
         SECTION("key() in object with length")
         {
             std::vector<uint8_t> v = {'{', 'i', 3, 'f', 'o', 'o', 'F', '}'};
             SaxCountdown scp(1);
             CHECK_FALSE(json::sax_parse(v, &scp, json::input_format_t::bjdata));
         }
 
         SECTION("start_array() in ndarray _ArraySize_")
         {
             std::vector<uint8_t> v = {'[', '$', 'i', '#', '[', '$', 'i', '#', 'i', 2, 2, 1, 1, 2};
             SaxCountdown scp(2);
             CHECK_FALSE(json::sax_parse(v, &scp, json::input_format_t::bjdata));
         }
 
         SECTION("number_integer() in ndarray _ArraySize_")
         {
             std::vector<uint8_t> v = {'[', '$', 'U', '#', '[', '$', 'i', '#', 'i', 2, 2, 1, 1, 2};
             SaxCountdown scp(3);
             CHECK_FALSE(json::sax_parse(v, &scp, json::input_format_t::bjdata));
         }
 
         SECTION("key() in ndarray _ArrayType_")
         {
             std::vector<uint8_t> v = {'[', '$', 'U', '#', '[', '$', 'U', '#', 'i', 2, 2, 2, 1, 2, 3, 4};
             SaxCountdown scp(6);
             CHECK_FALSE(json::sax_parse(v, &scp, json::input_format_t::bjdata));
         }
 
         SECTION("string() in ndarray _ArrayType_")
         {
             std::vector<uint8_t> v = {'[', '$', 'U', '#', '[', '$', 'U', '#', 'i', 2, 2, 2, 1, 2, 3, 4};
             SaxCountdown scp(7);
             CHECK_FALSE(json::sax_parse(v, &scp, json::input_format_t::bjdata));
         }
 
         SECTION("key() in ndarray _ArrayData_")
         {
             std::vector<uint8_t> v = {'[', '$', 'U', '#', '[', '$', 'U', '#', 'i', 2, 2, 2, 1, 2, 3, 4};
             SaxCountdown scp(8);
             CHECK_FALSE(json::sax_parse(v, &scp, json::input_format_t::bjdata));
         }
 
         SECTION("string() in ndarray _ArrayData_")
         {
             std::vector<uint8_t> v = {'[', '$', 'U', '#', '[', '$', 'U', '#', 'i', 2, 2, 2, 1, 2, 3, 4};
             SaxCountdown scp(9);
             CHECK_FALSE(json::sax_parse(v, &scp, json::input_format_t::bjdata));
         }
 
         SECTION("string() in ndarray _ArrayType_")
         {
             std::vector<uint8_t> v = {'[', '$', 'U', '#', '[', '$', 'i', '#', 'i', 2, 3, 2, 6, 5, 4, 3, 2, 1};
             SaxCountdown scp(11);
             CHECK_FALSE(json::sax_parse(v, &scp, json::input_format_t::bjdata));
         }
 
         SECTION("start_array() in ndarray _ArrayData_")
         {
             std::vector<uint8_t> v = {'[', '$', 'U', '#', '[', 'i', 2, 'i', 3, ']', 6, 5, 4, 3, 2, 1};
             SaxCountdown scp(13);
             CHECK_FALSE(json::sax_parse(v, &scp, json::input_format_t::bjdata));
         }
     }
 
     SECTION("parsing values")
     {
         SECTION("strings")
         {
             // create a single-character string for all number types
             std::vector<uint8_t> s_i = {'S', 'i', 1, 'a'};
             std::vector<uint8_t> s_U = {'S', 'U', 1, 'a'};
             std::vector<uint8_t> s_I = {'S', 'I', 1, 0, 'a'};
             std::vector<uint8_t> s_u = {'S', 'u', 1, 0, 'a'};
             std::vector<uint8_t> s_l = {'S', 'l', 1, 0, 0, 0, 'a'};
             std::vector<uint8_t> s_m = {'S', 'm', 1, 0, 0, 0, 'a'};
             std::vector<uint8_t> s_L = {'S', 'L', 1, 0, 0, 0, 0, 0, 0, 0, 'a'};
             std::vector<uint8_t> s_M = {'S', 'M', 1, 0, 0, 0, 0, 0, 0, 0, 'a'};
 
             // check if string is parsed correctly to "a"
             CHECK(json::from_bjdata(s_i) == "a");
             CHECK(json::from_bjdata(s_U) == "a");
             CHECK(json::from_bjdata(s_I) == "a");
             CHECK(json::from_bjdata(s_u) == "a");
             CHECK(json::from_bjdata(s_l) == "a");
             CHECK(json::from_bjdata(s_m) == "a");
             CHECK(json::from_bjdata(s_L) == "a");
             CHECK(json::from_bjdata(s_M) == "a");
 
             // roundtrip: output should be optimized
             CHECK(json::to_bjdata(json::from_bjdata(s_i)) == s_i);
             CHECK(json::to_bjdata(json::from_bjdata(s_U)) == s_i);
             CHECK(json::to_bjdata(json::from_bjdata(s_I)) == s_i);
             CHECK(json::to_bjdata(json::from_bjdata(s_u)) == s_i);
             CHECK(json::to_bjdata(json::from_bjdata(s_l)) == s_i);
             CHECK(json::to_bjdata(json::from_bjdata(s_m)) == s_i);
             CHECK(json::to_bjdata(json::from_bjdata(s_L)) == s_i);
             CHECK(json::to_bjdata(json::from_bjdata(s_M)) == s_i);
         }
 
         SECTION("number")
         {
             SECTION("float")
             {
                 // float32
                 std::vector<uint8_t> v_d = {'d', 0xd0, 0x0f, 0x49, 0x40};
                 CHECK(json::from_bjdata(v_d) == 3.14159f);
 
                 // float64
                 std::vector<uint8_t> v_D = {'D', 0x6e, 0x86, 0x1b, 0xf0, 0xf9, 0x21, 0x09, 0x40};
                 CHECK(json::from_bjdata(v_D) == 3.14159);
 
                 // float32 is serialized as float64 as the library does not support float32
                 CHECK(json::to_bjdata(json::from_bjdata(v_d)) == json::to_bjdata(3.14159f));
             }
         }
 
         SECTION("array")
         {
             SECTION("optimized version (length only)")
             {
                 // create vector with two elements of the same type
                 std::vector<uint8_t> v_TU = {'[', '#', 'U', 2, 'T', 'T'};
                 std::vector<uint8_t> v_T = {'[', '#', 'i', 2, 'T', 'T'};
                 std::vector<uint8_t> v_F = {'[', '#', 'i', 2, 'F', 'F'};
                 std::vector<uint8_t> v_Z = {'[', '#', 'i', 2, 'Z', 'Z'};
                 std::vector<uint8_t> v_i = {'[', '#', 'i', 2, 'i', 0x7F, 'i', 0x7F};
                 std::vector<uint8_t> v_U = {'[', '#', 'i', 2, 'U', 0xFF, 'U', 0xFF};
                 std::vector<uint8_t> v_I = {'[', '#', 'i', 2, 'I', 0xFF, 0x7F, 'I', 0xFF, 0x7F};
                 std::vector<uint8_t> v_u = {'[', '#', 'i', 2, 'u', 0x0F, 0xA7, 'u', 0x0F, 0xA7};
                 std::vector<uint8_t> v_l = {'[', '#', 'i', 2, 'l', 0xFF, 0xFF, 0xFF, 0x7F, 'l', 0xFF, 0xFF, 0xFF, 0x7F};
                 std::vector<uint8_t> v_m = {'[', '#', 'i', 2, 'm', 0xFF, 0xC9, 0x9A, 0xBB, 'm', 0xFF, 0xC9, 0x9A, 0xBB};
                 std::vector<uint8_t> v_L = {'[', '#', 'i', 2, 'L', 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 'L', 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F};
                 std::vector<uint8_t> v_M = {'[', '#', 'i', 2, 'M', 0xFF, 0xFF, 0x63, 0xA7, 0xB3, 0xB6, 0xE0, 0x8D, 'M', 0xFF, 0xFF, 0x63, 0xA7, 0xB3, 0xB6, 0xE0, 0x8D};
                 std::vector<uint8_t> v_D = {'[', '#', 'i', 2, 'D', 0x4a, 0xd8, 0x12, 0x4d, 0xfb, 0x21, 0x09, 0x40, 'D', 0x4a, 0xd8, 0x12, 0x4d, 0xfb, 0x21, 0x09, 0x40};
                 std::vector<uint8_t> v_S = {'[', '#', 'i', 2, 'S', 'i', 1, 'a', 'S', 'i', 1, 'a'};
                 std::vector<uint8_t> v_C = {'[', '#', 'i', 2, 'C', 'a', 'C', 'a'};
 
                 // check if vector is parsed correctly
                 CHECK(json::from_bjdata(v_TU) == json({true, true}));
                 CHECK(json::from_bjdata(v_T) == json({true, true}));
                 CHECK(json::from_bjdata(v_F) == json({false, false}));
                 CHECK(json::from_bjdata(v_Z) == json({nullptr, nullptr}));
                 CHECK(json::from_bjdata(v_i) == json({127, 127}));
                 CHECK(json::from_bjdata(v_U) == json({255, 255}));
                 CHECK(json::from_bjdata(v_I) == json({32767, 32767}));
                 CHECK(json::from_bjdata(v_u) == json({42767, 42767}));
                 CHECK(json::from_bjdata(v_l) == json({2147483647, 2147483647}));
                 CHECK(json::from_bjdata(v_m) == json({3147483647, 3147483647}));
                 CHECK(json::from_bjdata(v_L) == json({9223372036854775807, 9223372036854775807}));
                 CHECK(json::from_bjdata(v_M) == json({10223372036854775807ull, 10223372036854775807ull}));
                 CHECK(json::from_bjdata(v_D) == json({3.1415926, 3.1415926}));
                 CHECK(json::from_bjdata(v_S) == json({"a", "a"}));
                 CHECK(json::from_bjdata(v_C) == json({"a", "a"}));
 
                 // roundtrip: output should be optimized
                 CHECK(json::to_bjdata(json::from_bjdata(v_T), true) == v_T);
                 CHECK(json::to_bjdata(json::from_bjdata(v_F), true) == v_F);
                 CHECK(json::to_bjdata(json::from_bjdata(v_Z), true) == v_Z);
                 CHECK(json::to_bjdata(json::from_bjdata(v_i), true) == v_i);
                 CHECK(json::to_bjdata(json::from_bjdata(v_U), true) == v_U);
                 CHECK(json::to_bjdata(json::from_bjdata(v_I), true) == v_I);
                 CHECK(json::to_bjdata(json::from_bjdata(v_u), true) == v_u);
                 CHECK(json::to_bjdata(json::from_bjdata(v_l), true) == v_l);
                 CHECK(json::to_bjdata(json::from_bjdata(v_m), true) == v_m);
                 CHECK(json::to_bjdata(json::from_bjdata(v_L), true) == v_L);
                 CHECK(json::to_bjdata(json::from_bjdata(v_M), true) == v_M);
                 CHECK(json::to_bjdata(json::from_bjdata(v_D), true) == v_D);
                 CHECK(json::to_bjdata(json::from_bjdata(v_S), true) == v_S);
                 CHECK(json::to_bjdata(json::from_bjdata(v_C), true) == v_S); // char is serialized to string
             }
 
             SECTION("optimized version (type and length)")
             {
                 // create vector with two elements of the same type
                 std::vector<uint8_t> v_i = {'[', '$', 'i', '#', 'i', 2, 0x7F, 0x7F};
                 std::vector<uint8_t> v_U = {'[', '$', 'U', '#', 'i', 2, 0xFF, 0xFF};
                 std::vector<uint8_t> v_I = {'[', '$', 'I', '#', 'i', 2, 0xFF, 0x7F, 0xFF, 0x7F};
                 std::vector<uint8_t> v_u = {'[', '$', 'u', '#', 'i', 2, 0x0F, 0xA7, 0x0F, 0xA7};
                 std::vector<uint8_t> v_l = {'[', '$', 'l', '#', 'i', 2, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F};
                 std::vector<uint8_t> v_m = {'[', '$', 'm', '#', 'i', 2, 0xFF, 0xC9, 0x9A, 0xBB, 0xFF, 0xC9, 0x9A, 0xBB};
                 std::vector<uint8_t> v_L = {'[', '$', 'L', '#', 'i', 2, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F};
                 std::vector<uint8_t> v_M = {'[', '$', 'M', '#', 'i', 2, 0xFF, 0xFF, 0x63, 0xA7, 0xB3, 0xB6, 0xE0, 0x8D, 0xFF, 0xFF, 0x63, 0xA7, 0xB3, 0xB6, 0xE0, 0x8D};
                 std::vector<uint8_t> v_D = {'[', '$', 'D', '#', 'i', 2, 0x4a, 0xd8, 0x12, 0x4d, 0xfb, 0x21, 0x09, 0x40, 0x4a, 0xd8, 0x12, 0x4d, 0xfb, 0x21, 0x09, 0x40};
                 std::vector<uint8_t> v_S = {'[', '#', 'i', 2, 'S', 'i', 1, 'a', 'S', 'i', 1, 'a'};
                 std::vector<uint8_t> v_C = {'[', '$', 'C', '#', 'i', 2, 'a', 'a'};
 
                 // check if vector is parsed correctly
                 CHECK(json::from_bjdata(v_i) == json({127, 127}));
                 CHECK(json::from_bjdata(v_U) == json({255, 255}));
                 CHECK(json::from_bjdata(v_I) == json({32767, 32767}));
                 CHECK(json::from_bjdata(v_u) == json({42767, 42767}));
                 CHECK(json::from_bjdata(v_l) == json({2147483647, 2147483647}));
                 CHECK(json::from_bjdata(v_m) == json({3147483647, 3147483647}));
                 CHECK(json::from_bjdata(v_L) == json({9223372036854775807, 9223372036854775807}));
                 CHECK(json::from_bjdata(v_M) == json({10223372036854775807ull, 10223372036854775807ull}));
                 CHECK(json::from_bjdata(v_D) == json({3.1415926, 3.1415926}));
                 CHECK(json::from_bjdata(v_S) == json({"a", "a"}));
                 CHECK(json::from_bjdata(v_C) == json({"a", "a"}));
 
                 // roundtrip: output should be optimized
                 std::vector<uint8_t> v_empty = {'[', '#', 'i', 0};
                 CHECK(json::to_bjdata(json::from_bjdata(v_i), true, true) == v_i);
                 CHECK(json::to_bjdata(json::from_bjdata(v_U), true, true) == v_U);
                 CHECK(json::to_bjdata(json::from_bjdata(v_I), true, true) == v_I);
                 CHECK(json::to_bjdata(json::from_bjdata(v_u), true, true) == v_u);
                 CHECK(json::to_bjdata(json::from_bjdata(v_l), true, true) == v_l);
                 CHECK(json::to_bjdata(json::from_bjdata(v_m), true, true) == v_m);
                 CHECK(json::to_bjdata(json::from_bjdata(v_L), true, true) == v_L);
                 CHECK(json::to_bjdata(json::from_bjdata(v_M), true, true) == v_M);
                 CHECK(json::to_bjdata(json::from_bjdata(v_D), true, true) == v_D);
                 CHECK(json::to_bjdata(json::from_bjdata(v_S), true, true) == v_S);
                 CHECK(json::to_bjdata(json::from_bjdata(v_C), true, true) == v_S); // char is serialized to string
             }
 
             SECTION("optimized ndarray (type and vector-size as optimized 1D array)")
             {
                 // create vector with two elements of the same type
                 std::vector<uint8_t> v_0 = {'[', '$', 'i', '#', '[', '$', 'i', '#', 'i', 1, 0};
                 std::vector<uint8_t> v_1 = {'[', '$', 'i', '#', '[', '$', 'i', '#', 'i', 1, 2, 0x7F, 0x7F};
                 std::vector<uint8_t> v_i = {'[', '$', 'i', '#', '[', '$', 'i', '#', 'i', 2, 1, 2, 0x7F, 0x7F};
                 std::vector<uint8_t> v_U = {'[', '$', 'U', '#', '[', '$', 'i', '#', 'i', 2, 1, 2, 0xFF, 0xFF};
                 std::vector<uint8_t> v_I = {'[', '$', 'I', '#', '[', '$', 'i', '#', 'i', 2, 1, 2, 0xFF, 0x7F, 0xFF, 0x7F};
                 std::vector<uint8_t> v_u = {'[', '$', 'u', '#', '[', '$', 'i', '#', 'i', 2, 1, 2, 0x0F, 0xA7, 0x0F, 0xA7};
                 std::vector<uint8_t> v_l = {'[', '$', 'l', '#', '[', '$', 'i', '#', 'i', 2, 1, 2, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F};
                 std::vector<uint8_t> v_m = {'[', '$', 'm', '#', '[', '$', 'i', '#', 'i', 2, 1, 2, 0xFF, 0xC9, 0x9A, 0xBB, 0xFF, 0xC9, 0x9A, 0xBB};
                 std::vector<uint8_t> v_L = {'[', '$', 'L', '#', '[', '$', 'i', '#', 'i', 2, 1, 2, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F};
                 std::vector<uint8_t> v_M = {'[', '$', 'M', '#', '[', '$', 'i', '#', 'i', 2, 1, 2, 0xFF, 0xFF, 0x63, 0xA7, 0xB3, 0xB6, 0xE0, 0x8D, 0xFF, 0xFF, 0x63, 0xA7, 0xB3, 0xB6, 0xE0, 0x8D};
                 std::vector<uint8_t> v_D = {'[', '$', 'D', '#', '[', '$', 'i', '#', 'i', 2, 1, 2, 0x4a, 0xd8, 0x12, 0x4d, 0xfb, 0x21, 0x09, 0x40, 0x4a, 0xd8, 0x12, 0x4d, 0xfb, 0x21, 0x09, 0x40};
                 std::vector<uint8_t> v_S = {'[', '#', '[', '$', 'i', '#', 'i', 2, 1, 2, 'S', 'i', 1, 'a', 'S', 'i', 1, 'a'};
                 std::vector<uint8_t> v_C = {'[', '$', 'C', '#', '[', '$', 'i', '#', 'i', 2, 1, 2, 'a', 'a'};
 
                 // check if vector is parsed correctly
                 CHECK(json::from_bjdata(v_0) == json::array());
                 CHECK(json::from_bjdata(v_1) == json({127, 127}));
                 CHECK(json::from_bjdata(v_i) == json({127, 127}));
                 CHECK(json::from_bjdata(v_U) == json({255, 255}));
                 CHECK(json::from_bjdata(v_I) == json({32767, 32767}));
                 CHECK(json::from_bjdata(v_u) == json({42767, 42767}));
                 CHECK(json::from_bjdata(v_l) == json({2147483647, 2147483647}));
                 CHECK(json::from_bjdata(v_m) == json({3147483647, 3147483647}));
                 CHECK(json::from_bjdata(v_L) == json({9223372036854775807, 9223372036854775807}));
                 CHECK(json::from_bjdata(v_M) == json({10223372036854775807ull, 10223372036854775807ull}));
                 CHECK(json::from_bjdata(v_D) == json({3.1415926, 3.1415926}));
                 CHECK(json::from_bjdata(v_S) == json({"a", "a"}));
                 CHECK(json::from_bjdata(v_C) == json({"a", "a"}));
             }
 
             SECTION("optimized ndarray (type and vector-size ndarray with JData annotations)")
             {
                 // create vector with 0, 1, 2 elements of the same type
                 std::vector<uint8_t> v_e = {'[', '$', 'U', '#', '[', '$', 'i', '#', 'i', 2, 2, 1, 0xFE, 0xFF};
                 std::vector<uint8_t> v_U = {'[', '$', 'U', '#', '[', '$', 'i', '#', 'i', 2, 2, 3, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06};
                 std::vector<uint8_t> v_i = {'[', '$', 'i', '#', '[', '$', 'i', '#', 'i', 2, 2, 3, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06};
                 std::vector<uint8_t> v_u = {'[', '$', 'u', '#', '[', '$', 'i', '#', 'i', 2, 2, 3, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00};
                 std::vector<uint8_t> v_I = {'[', '$', 'I', '#', '[', '$', 'i', '#', 'i', 2, 2, 3, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00};
                 std::vector<uint8_t> v_m = {'[', '$', 'm', '#', '[', '$', 'i', '#', 'i', 2, 2, 3, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00};
                 std::vector<uint8_t> v_l = {'[', '$', 'l', '#', '[', '$', 'i', '#', 'i', 2, 2, 3, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00};
                 std::vector<uint8_t> v_M = {'[', '$', 'M', '#', '[', '$', 'i', '#', 'i', 2, 2, 3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
                 std::vector<uint8_t> v_L = {'[', '$', 'L', '#', '[', '$', 'i', '#', 'i', 2, 2, 3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
                 std::vector<uint8_t> v_d = {'[', '$', 'd', '#', '[', '$', 'i', '#', 'i', 2, 2, 3, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0xA0, 0x40, 0x00, 0x00, 0xC0, 0x40};
                 std::vector<uint8_t> v_D = {'[', '$', 'D', '#', '[', '$', 'i', '#', 'i', 2, 2, 3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x40};
                 std::vector<uint8_t> v_C = {'[', '$', 'C', '#', '[', '$', 'i', '#', 'i', 2, 2, 3, 'a', 'b', 'c', 'd', 'e', 'f'};
 
                 // check if vector is parsed correctly
                 CHECK(json::from_bjdata(v_e) == json({{"_ArrayData_", {254, 255}}, {"_ArraySize_", {2, 1}}, {"_ArrayType_", "uint8"}}));
                 CHECK(json::from_bjdata(v_U) == json({{"_ArrayData_", {1, 2, 3, 4, 5, 6}}, {"_ArraySize_", {2, 3}}, {"_ArrayType_", "uint8"}}));
                 CHECK(json::from_bjdata(v_i) == json({{"_ArrayData_", {1, 2, 3, 4, 5, 6}}, {"_ArraySize_", {2, 3}}, {"_ArrayType_", "int8"}}));
                 CHECK(json::from_bjdata(v_i) == json({{"_ArrayData_", {1, 2, 3, 4, 5, 6}}, {"_ArraySize_", {2, 3}}, {"_ArrayType_", "int8"}}));
                 CHECK(json::from_bjdata(v_u) == json({{"_ArrayData_", {1, 2, 3, 4, 5, 6}}, {"_ArraySize_", {2, 3}}, {"_ArrayType_", "uint16"}}));
                 CHECK(json::from_bjdata(v_I) == json({{"_ArrayData_", {1, 2, 3, 4, 5, 6}}, {"_ArraySize_", {2, 3}}, {"_ArrayType_", "int16"}}));
                 CHECK(json::from_bjdata(v_m) == json({{"_ArrayData_", {1, 2, 3, 4, 5, 6}}, {"_ArraySize_", {2, 3}}, {"_ArrayType_", "uint32"}}));
                 CHECK(json::from_bjdata(v_l) == json({{"_ArrayData_", {1, 2, 3, 4, 5, 6}}, {"_ArraySize_", {2, 3}}, {"_ArrayType_", "int32"}}));
                 CHECK(json::from_bjdata(v_M) == json({{"_ArrayData_", {1, 2, 3, 4, 5, 6}}, {"_ArraySize_", {2, 3}}, {"_ArrayType_", "uint64"}}));
                 CHECK(json::from_bjdata(v_L) == json({{"_ArrayData_", {1, 2, 3, 4, 5, 6}}, {"_ArraySize_", {2, 3}}, {"_ArrayType_", "int64"}}));
                 CHECK(json::from_bjdata(v_d) == json({{"_ArrayData_", {1.f, 2.f, 3.f, 4.f, 5.f, 6.f}}, {"_ArraySize_", {2, 3}}, {"_ArrayType_", "single"}}));
                 CHECK(json::from_bjdata(v_D) == json({{"_ArrayData_", {1., 2., 3., 4., 5., 6.}}, {"_ArraySize_", {2, 3}}, {"_ArrayType_", "double"}}));
                 CHECK(json::from_bjdata(v_C) == json({{"_ArrayData_", {'a', 'b', 'c', 'd', 'e', 'f'}}, {"_ArraySize_", {2, 3}}, {"_ArrayType_", "char"}}));
 
                 // roundtrip: output should be optimized
                 CHECK(json::to_bjdata(json::from_bjdata(v_e), true, true) == v_e);
                 CHECK(json::to_bjdata(json::from_bjdata(v_U), true, true) == v_U);
                 CHECK(json::to_bjdata(json::from_bjdata(v_i), true, true) == v_i);
                 CHECK(json::to_bjdata(json::from_bjdata(v_u), true, true) == v_u);
                 CHECK(json::to_bjdata(json::from_bjdata(v_I), true, true) == v_I);
                 CHECK(json::to_bjdata(json::from_bjdata(v_m), true, true) == v_m);
                 CHECK(json::to_bjdata(json::from_bjdata(v_l), true, true) == v_l);
                 CHECK(json::to_bjdata(json::from_bjdata(v_M), true, true) == v_M);
                 CHECK(json::to_bjdata(json::from_bjdata(v_L), true, true) == v_L);
                 CHECK(json::to_bjdata(json::from_bjdata(v_d), true, true) == v_d);
                 CHECK(json::to_bjdata(json::from_bjdata(v_D), true, true) == v_D);
                 CHECK(json::to_bjdata(json::from_bjdata(v_C), true, true) == v_C);
             }
 
             SECTION("optimized ndarray (type and vector-size as 1D array)")
             {
                 // create vector with two elements of the same type
                 std::vector<uint8_t> v_0 = {'[', '$', 'i', '#', '[', ']'};
+                std::vector<uint8_t> v_E = {'[', '$', 'i', '#', '[', 'i', 2, 'i', 0, ']'};
                 std::vector<uint8_t> v_i = {'[', '$', 'i', '#', '[', 'i', 1, 'i', 2, ']', 0x7F, 0x7F};
                 std::vector<uint8_t> v_U = {'[', '$', 'U', '#', '[', 'i', 1, 'i', 2, ']', 0xFF, 0xFF};
                 std::vector<uint8_t> v_I = {'[', '$', 'I', '#', '[', 'i', 1, 'i', 2, ']', 0xFF, 0x7F, 0xFF, 0x7F};
                 std::vector<uint8_t> v_u = {'[', '$', 'u', '#', '[', 'i', 1, 'i', 2, ']', 0x0F, 0xA7, 0x0F, 0xA7};
                 std::vector<uint8_t> v_l = {'[', '$', 'l', '#', '[', 'i', 1, 'i', 2, ']', 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F};
                 std::vector<uint8_t> v_m = {'[', '$', 'm', '#', '[', 'i', 1, 'i', 2, ']', 0xFF, 0xC9, 0x9A, 0xBB, 0xFF, 0xC9, 0x9A, 0xBB};
                 std::vector<uint8_t> v_L = {'[', '$', 'L', '#', '[', 'i', 1, 'i', 2, ']', 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F};
                 std::vector<uint8_t> v_M = {'[', '$', 'M', '#', '[', 'i', 1, 'i', 2, ']', 0xFF, 0xFF, 0x63, 0xA7, 0xB3, 0xB6, 0xE0, 0x8D, 0xFF, 0xFF, 0x63, 0xA7, 0xB3, 0xB6, 0xE0, 0x8D};
                 std::vector<uint8_t> v_D = {'[', '$', 'D', '#', '[', 'i', 1, 'i', 2, ']', 0x4a, 0xd8, 0x12, 0x4d, 0xfb, 0x21, 0x09, 0x40, 0x4a, 0xd8, 0x12, 0x4d, 0xfb, 0x21, 0x09, 0x40};
                 std::vector<uint8_t> v_S = {'[', '#', '[', 'i', 1, 'i', 2, ']', 'S', 'i', 1, 'a', 'S', 'i', 1, 'a'};
                 std::vector<uint8_t> v_C = {'[', '$', 'C', '#', '[', 'i', 1, 'i', 2, ']', 'a', 'a'};
 
                 // check if vector is parsed correctly
                 CHECK(json::from_bjdata(v_0) == json::array());
+                CHECK(json::from_bjdata(v_E) == json::array());
                 CHECK(json::from_bjdata(v_i) == json({127, 127}));
                 CHECK(json::from_bjdata(v_U) == json({255, 255}));
                 CHECK(json::from_bjdata(v_I) == json({32767, 32767}));
                 CHECK(json::from_bjdata(v_u) == json({42767, 42767}));
                 CHECK(json::from_bjdata(v_l) == json({2147483647, 2147483647}));
                 CHECK(json::from_bjdata(v_m) == json({3147483647, 3147483647}));
                 CHECK(json::from_bjdata(v_L) == json({9223372036854775807, 9223372036854775807}));
                 CHECK(json::from_bjdata(v_M) == json({10223372036854775807ull, 10223372036854775807ull}));
                 CHECK(json::from_bjdata(v_D) == json({3.1415926, 3.1415926}));
                 CHECK(json::from_bjdata(v_S) == json({"a", "a"}));
                 CHECK(json::from_bjdata(v_C) == json({"a", "a"}));
             }
 
             SECTION("optimized ndarray (type and vector-size as size-optimized array)")
             {
                 // create vector with two elements of the same type
                 std::vector<uint8_t> v_i = {'[', '$', 'i', '#', '[', '#', 'i', 2, 'i', 1, 'i', 2, 0x7F, 0x7F};
                 std::vector<uint8_t> v_U = {'[', '$', 'U', '#', '[', '#', 'i', 2, 'i', 1, 'i', 2, 0xFF, 0xFF};
                 std::vector<uint8_t> v_I = {'[', '$', 'I', '#', '[', '#', 'i', 2, 'i', 1, 'i', 2, 0xFF, 0x7F, 0xFF, 0x7F};
                 std::vector<uint8_t> v_u = {'[', '$', 'u', '#', '[', '#', 'i', 2, 'i', 1, 'i', 2, 0x0F, 0xA7, 0x0F, 0xA7};
                 std::vector<uint8_t> v_l = {'[', '$', 'l', '#', '[', '#', 'i', 2, 'i', 1, 'i', 2, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F};
                 std::vector<uint8_t> v_m = {'[', '$', 'm', '#', '[', '#', 'i', 2, 'i', 1, 'i', 2, 0xFF, 0xC9, 0x9A, 0xBB, 0xFF, 0xC9, 0x9A, 0xBB};
                 std::vector<uint8_t> v_L = {'[', '$', 'L', '#', '[', '#', 'i', 2, 'i', 1, 'i', 2, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F};
                 std::vector<uint8_t> v_M = {'[', '$', 'M', '#', '[', '#', 'i', 2, 'i', 1, 'i', 2, 0xFF, 0xFF, 0x63, 0xA7, 0xB3, 0xB6, 0xE0, 0x8D, 0xFF, 0xFF, 0x63, 0xA7, 0xB3, 0xB6, 0xE0, 0x8D};
                 std::vector<uint8_t> v_D = {'[', '$', 'D', '#', '[', '#', 'i', 2, 'i', 1, 'i', 2, 0x4a, 0xd8, 0x12, 0x4d, 0xfb, 0x21, 0x09, 0x40, 0x4a, 0xd8, 0x12, 0x4d, 0xfb, 0x21, 0x09, 0x40};
                 std::vector<uint8_t> v_S = {'[', '#', '[', '#', 'i', 2, 'i', 1, 'i', 2, 'S', 'i', 1, 'a', 'S', 'i', 1, 'a'};
                 std::vector<uint8_t> v_C = {'[', '$', 'C', '#', '[', '#', 'i', 2, 'i', 1, 'i', 2, 'a', 'a'};
 
                 // check if vector is parsed correctly
                 CHECK(json::from_bjdata(v_i) == json({127, 127}));
                 CHECK(json::from_bjdata(v_U) == json({255, 255}));
                 CHECK(json::from_bjdata(v_I) == json({32767, 32767}));
                 CHECK(json::from_bjdata(v_u) == json({42767, 42767}));
                 CHECK(json::from_bjdata(v_l) == json({2147483647, 2147483647}));
                 CHECK(json::from_bjdata(v_m) == json({3147483647, 3147483647}));
                 CHECK(json::from_bjdata(v_L) == json({9223372036854775807, 9223372036854775807}));
                 CHECK(json::from_bjdata(v_M) == json({10223372036854775807ull, 10223372036854775807ull}));
                 CHECK(json::from_bjdata(v_D) == json({3.1415926, 3.1415926}));
                 CHECK(json::from_bjdata(v_S) == json({"a", "a"}));
                 CHECK(json::from_bjdata(v_C) == json({"a", "a"}));
             }
 
             SECTION("invalid ndarray annotations remains as object")
             {
                 // check if invalid ND array annotations stay as object
                 json j_type = json({{"_ArrayData_", {1, 2, 3, 4, 5, 6}}, {"_ArraySize_", {2, 3}}, {"_ArrayType_", "invalidtype"}});
                 json j_size = json({{"_ArrayData_", {1, 2, 3, 4, 5}}, {"_ArraySize_", {2, 3}}, {"_ArrayType_", "uint8"}});
 
                 // roundtrip: output should stay as object
                 CHECK(json::from_bjdata(json::to_bjdata(j_type), true, true) == j_type);
                 CHECK(json::from_bjdata(json::to_bjdata(j_size), true, true) == j_size);
             }
         }
     }
 
     SECTION("parse errors")
     {
         SECTION("empty byte vector")
         {
             json _;
-            CHECK_THROWS_AS(_ = json::from_bjdata(std::vector<uint8_t>()), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(std::vector<uint8_t>()),
-                              "[json.exception.parse_error.110] parse error at byte 1: syntax error while parsing BJData value: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(std::vector<uint8_t>()),
+                                 "[json.exception.parse_error.110] parse error at byte 1: syntax error while parsing BJData value: unexpected end of input", json::parse_error&);
         }
 
         SECTION("char")
         {
             SECTION("eof after C byte")
             {
                 std::vector<uint8_t> v = {'C'};
                 json _;
-                CHECK_THROWS_AS(_ = json::from_bjdata(v), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_bjdata(v), "[json.exception.parse_error.110] parse error at byte 2: syntax error while parsing BJData char: unexpected end of input");
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v), "[json.exception.parse_error.110] parse error at byte 2: syntax error while parsing BJData char: unexpected end of input", json::parse_error&);
             }
 
             SECTION("byte out of range")
             {
                 std::vector<uint8_t> v = {'C', 130};
                 json _;
-                CHECK_THROWS_AS(_ = json::from_bjdata(v), json::parse_error&);
                 CHECK_THROWS_WITH(_ = json::from_bjdata(v), "[json.exception.parse_error.113] parse error at byte 2: syntax error while parsing BJData char: byte after 'C' must be in range 0x00..0x7F; last byte: 0x82");
             }
         }
 
         SECTION("strings")
         {
             SECTION("eof after S byte")
             {
                 std::vector<uint8_t> v = {'S'};
                 json _;
-                CHECK_THROWS_AS(_ = json::from_bjdata(v), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_bjdata(v), "[json.exception.parse_error.110] parse error at byte 2: syntax error while parsing BJData value: unexpected end of input");
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v), "[json.exception.parse_error.110] parse error at byte 2: syntax error while parsing BJData value: unexpected end of input", json::parse_error&);
             }
 
             SECTION("invalid byte")
             {
                 std::vector<uint8_t> v = {'S', '1', 'a'};
                 json _;
-                CHECK_THROWS_AS(_ = json::from_bjdata(v), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_bjdata(v), "[json.exception.parse_error.113] parse error at byte 2: syntax error while parsing BJData string: expected length type specification (U, i, u, I, m, l, M, L); last byte: 0x31");
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v), "[json.exception.parse_error.113] parse error at byte 2: syntax error while parsing BJData string: expected length type specification (U, i, u, I, m, l, M, L); last byte: 0x31", json::parse_error&);
             }
 
             SECTION("parse bjdata markers in ubjson")
             {
                 // create a single-character string for all number types
                 std::vector<uint8_t> s_u = {'S', 'u', 1, 0, 'a'};
                 std::vector<uint8_t> s_m = {'S', 'm', 1, 0, 0, 0, 'a'};
                 std::vector<uint8_t> s_M = {'S', 'M', 1, 0, 0, 0, 0, 0, 0, 0, 'a'};
 
                 json _;
                 // check if string is parsed correctly to "a"
-                CHECK_THROWS_AS(_ = json::from_ubjson(s_u), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_ubjson(s_u), "[json.exception.parse_error.113] parse error at byte 2: syntax error while parsing UBJSON string: expected length type specification (U, i, I, l, L); last byte: 0x75");
-
-                CHECK_THROWS_AS(_ = json::from_ubjson(s_m), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_ubjson(s_m), "[json.exception.parse_error.113] parse error at byte 2: syntax error while parsing UBJSON string: expected length type specification (U, i, I, l, L); last byte: 0x6D");
-
-                CHECK_THROWS_AS(_ = json::from_ubjson(s_M), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_ubjson(s_M), "[json.exception.parse_error.113] parse error at byte 2: syntax error while parsing UBJSON string: expected length type specification (U, i, I, l, L); last byte: 0x4D");
+                CHECK_THROWS_WITH_AS(_ = json::from_ubjson(s_u), "[json.exception.parse_error.113] parse error at byte 2: syntax error while parsing UBJSON string: expected length type specification (U, i, I, l, L); last byte: 0x75", json::parse_error&);
+                CHECK_THROWS_WITH_AS(_ = json::from_ubjson(s_m), "[json.exception.parse_error.113] parse error at byte 2: syntax error while parsing UBJSON string: expected length type specification (U, i, I, l, L); last byte: 0x6D", json::parse_error&);
+                CHECK_THROWS_WITH_AS(_ = json::from_ubjson(s_M), "[json.exception.parse_error.113] parse error at byte 2: syntax error while parsing UBJSON string: expected length type specification (U, i, I, l, L); last byte: 0x4D", json::parse_error&);
             }
         }
 
         SECTION("array")
         {
             SECTION("optimized array: no size following type")
             {
                 std::vector<uint8_t> v = {'[', '$', 'i', 2};
                 json _;
-                CHECK_THROWS_AS(_ = json::from_bjdata(v), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_bjdata(v), "[json.exception.parse_error.112] parse error at byte 4: syntax error while parsing BJData size: expected '#' after type information; last byte: 0x02");
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v), "[json.exception.parse_error.112] parse error at byte 4: syntax error while parsing BJData size: expected '#' after type information; last byte: 0x02", json::parse_error&);
             }
 
             SECTION("optimized array: negative size")
             {
                 std::vector<uint8_t> v1 = {'[', '#', 'i', 0xF1};
                 std::vector<uint8_t> v2 = {'[', '$', 'I', '#', 'i', 0xF2};
                 std::vector<uint8_t> v3 = {'[', '$', 'I', '#', '[', 'i', 0xF4, 'i', 0x02, ']'};
                 std::vector<uint8_t> v4 = {'[', '$', 0xF6, '#', 'i', 0xF7};
                 std::vector<uint8_t> v5 = {'[', '$', 'I', '#', '[', 'i', 0xF5, 'i', 0xF1, ']'};
                 std::vector<uint8_t> v6 = {'[', '#', '[', 'i', 0xF3, 'i', 0x02, ']'};
 
+                std::vector<uint8_t> vI = {'[', '#', 'I', 0x00, 0xF1};
+                std::vector<uint8_t> vl = {'[', '#', 'l', 0x00, 0x00, 0x00, 0xF2};
+                std::vector<uint8_t> vL = {'[', '#', 'L', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3};
+
                 json _;
-                static bool is_64bit = (sizeof(size_t) == 8);
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v1), "[json.exception.parse_error.113] parse error at byte 4: syntax error while parsing BJData size: count in an optimized container must be positive", json::parse_error&);
+                CHECK(json::from_bjdata(v1, true, false).is_discarded());
 
-                if (is_64bit)
-                {
-                    CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v1), "[json.exception.out_of_range.408] excessive array size: 18446744073709551601", json::out_of_range&);
-                    CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v2), "[json.exception.out_of_range.408] excessive array size: 18446744073709551602", json::out_of_range&);
-                    CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v3), "[json.exception.out_of_range.408] excessive array size: 18446744073709551592", json::out_of_range&);
-                    CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v4), "[json.exception.out_of_range.408] excessive array size: 18446744073709551607", json::out_of_range&);
-                }
-                else
-                {
-                    CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v1), "[json.exception.out_of_range.408] excessive array size: 4294967281", json::out_of_range&);
-                    CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v2), "[json.exception.out_of_range.408] excessive array size: 4294967282", json::out_of_range&);
-                    CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v3), "[json.exception.out_of_range.408] excessive array size: 4294967272", json::out_of_range&);
-                    CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v4), "[json.exception.out_of_range.408] excessive array size: 4294967287", json::out_of_range&);
-                }
-                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v5), "[json.exception.parse_error.110] parse error at byte 11: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v2), "[json.exception.parse_error.113] parse error at byte 6: syntax error while parsing BJData size: count in an optimized container must be positive", json::parse_error&);
+                CHECK(json::from_bjdata(v2, true, false).is_discarded());
 
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v3), "[json.exception.parse_error.113] parse error at byte 7: syntax error while parsing BJData size: count in an optimized container must be positive", json::parse_error&);
+                CHECK(json::from_bjdata(v3, true, false).is_discarded());
+
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v4), "[json.exception.parse_error.113] parse error at byte 6: syntax error while parsing BJData size: count in an optimized container must be positive", json::parse_error&);
+                CHECK(json::from_bjdata(v4, true, false).is_discarded());
+
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v5), "[json.exception.parse_error.113] parse error at byte 7: syntax error while parsing BJData size: count in an optimized container must be positive", json::parse_error&);
+                CHECK(json::from_bjdata(v5, true, false).is_discarded());
+
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v6), "[json.exception.parse_error.113] parse error at byte 5: syntax error while parsing BJData size: count in an optimized container must be positive", json::parse_error&);
                 CHECK(json::from_bjdata(v6, true, false).is_discarded());
+
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vI), "[json.exception.parse_error.113] parse error at byte 5: syntax error while parsing BJData size: count in an optimized container must be positive", json::parse_error&);
+                CHECK(json::from_bjdata(vI, true, false).is_discarded());
+
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vl), "[json.exception.parse_error.113] parse error at byte 7: syntax error while parsing BJData size: count in an optimized container must be positive", json::parse_error&);
+                CHECK(json::from_bjdata(vI, true, false).is_discarded());
+
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vL), "[json.exception.parse_error.113] parse error at byte 11: syntax error while parsing BJData size: count in an optimized container must be positive", json::parse_error&);
+                CHECK(json::from_bjdata(vI, true, false).is_discarded());
             }
 
             SECTION("do not accept NTFZ markers in ndarray optimized type")
             {
                 json _;
                 std::vector<uint8_t> v_N = {'[', '$', 'N', '#', '[', '#', 'i', 2, 'i', 1, 'i', 2};
                 std::vector<uint8_t> v_T = {'[', '$', 'T', '#', '[', '#', 'i', 2, 'i', 1, 'i', 2};
                 std::vector<uint8_t> v_F = {'[', '$', 'F', '#', '[', '#', 'i', 2, 'i', 1, 'i', 2};
                 std::vector<uint8_t> v_Z = {'[', '$', 'Z', '#', '[', '#', 'i', 2, 'i', 1, 'i', 2};
 
-                CHECK_THROWS_AS(_ = json::from_bjdata(v_N), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_bjdata(v_N), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x4E is not a permitted optimized array type");
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v_N), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x4E is not a permitted optimized array type", json::parse_error&);
                 CHECK(json::from_bjdata(v_N, true, false).is_discarded());
 
-                CHECK_THROWS_AS(_ = json::from_bjdata(v_T), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_bjdata(v_T), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x54 is not a permitted optimized array type");
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v_T), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x54 is not a permitted optimized array type", json::parse_error&);
                 CHECK(json::from_bjdata(v_T, true, false).is_discarded());
 
-                CHECK_THROWS_AS(_ = json::from_bjdata(v_F), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_bjdata(v_F), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x46 is not a permitted optimized array type");
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v_F), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x46 is not a permitted optimized array type", json::parse_error&);
                 CHECK(json::from_bjdata(v_F, true, false).is_discarded());
 
-                CHECK_THROWS_AS(_ = json::from_bjdata(v_Z), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_bjdata(v_Z), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x5A is not a permitted optimized array type");
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v_Z), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x5A is not a permitted optimized array type", json::parse_error&);
                 CHECK(json::from_bjdata(v_Z, true, false).is_discarded());
             }
 
             SECTION("do not accept NTFZ markers in ndarray optimized type")
             {
                 json _;
                 std::vector<uint8_t> v_N = {'[', '$', 'N', '#', '[', 'i', 1, 'i', 2, ']'};
                 std::vector<uint8_t> v_T = {'[', '$', 'T', '#', '[', 'i', 1, 'i', 2, ']'};
                 std::vector<uint8_t> v_F = {'[', '$', 'F', '#', '[', 'i', 1, 'i', 2, ']'};
                 std::vector<uint8_t> v_Z = {'[', '$', 'Z', '#', '[', 'i', 1, 'i', 2, ']'};
 
-                CHECK_THROWS_AS(_ = json::from_bjdata(v_N), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_bjdata(v_N), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x4E is not a permitted optimized array type");
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v_N), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x4E is not a permitted optimized array type", json::parse_error&);
                 CHECK(json::from_bjdata(v_N, true, false).is_discarded());
 
-                CHECK_THROWS_AS(_ = json::from_bjdata(v_T), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_bjdata(v_T), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x54 is not a permitted optimized array type");
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v_T), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x54 is not a permitted optimized array type", json::parse_error&);
                 CHECK(json::from_bjdata(v_T, true, false).is_discarded());
 
-                CHECK_THROWS_AS(_ = json::from_bjdata(v_F), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_bjdata(v_F), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x46 is not a permitted optimized array type");
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v_F), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x46 is not a permitted optimized array type", json::parse_error&);
                 CHECK(json::from_bjdata(v_F, true, false).is_discarded());
 
-                CHECK_THROWS_AS(_ = json::from_bjdata(v_Z), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_bjdata(v_Z), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x5A is not a permitted optimized array type");
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v_Z), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x5A is not a permitted optimized array type", json::parse_error&);
                 CHECK(json::from_bjdata(v_Z, true, false).is_discarded());
             }
         }
 
         SECTION("strings")
         {
             std::vector<uint8_t> vS = {'S'};
             json _;
-            CHECK_THROWS_AS(_ = json::from_bjdata(vS), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vS), "[json.exception.parse_error.110] parse error at byte 2: syntax error while parsing BJData value: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vS), "[json.exception.parse_error.110] parse error at byte 2: syntax error while parsing BJData value: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vS, true, false).is_discarded());
 
             std::vector<uint8_t> v = {'S', 'i', '2', 'a'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(v), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(v), "[json.exception.parse_error.110] parse error at byte 5: syntax error while parsing BJData string: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v), "[json.exception.parse_error.110] parse error at byte 5: syntax error while parsing BJData string: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(v, true, false).is_discarded());
 
             std::vector<uint8_t> vC = {'C'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vC), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vC), "[json.exception.parse_error.110] parse error at byte 2: syntax error while parsing BJData char: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vC), "[json.exception.parse_error.110] parse error at byte 2: syntax error while parsing BJData char: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vC, true, false).is_discarded());
         }
 
         SECTION("sizes")
         {
             std::vector<uint8_t> vU = {'[', '#', 'U'};
             json _;
-            CHECK_THROWS_AS(_ = json::from_bjdata(vU), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vU), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vU), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vU, true, false).is_discarded());
 
             std::vector<uint8_t> vi = {'[', '#', 'i'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vi), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vi), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vi), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vi, true, false).is_discarded());
 
             std::vector<uint8_t> vI = {'[', '#', 'I'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vI), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vI), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vI), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vI, true, false).is_discarded());
 
             std::vector<uint8_t> vu = {'[', '#', 'u'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vu), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vu), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vu), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vu, true, false).is_discarded());
 
             std::vector<uint8_t> vl = {'[', '#', 'l'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vl), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vl), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vl), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vl, true, false).is_discarded());
 
             std::vector<uint8_t> vm = {'[', '#', 'm'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vm), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vm), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vm), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vm, true, false).is_discarded());
 
             std::vector<uint8_t> vL = {'[', '#', 'L'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vL), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vL), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vL), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vL, true, false).is_discarded());
 
             std::vector<uint8_t> vM = {'[', '#', 'M'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vM), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vM), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vM), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vM, true, false).is_discarded());
 
             std::vector<uint8_t> v0 = {'[', '#', 'T', ']'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(v0), json::parse_error&);
             CHECK_THROWS_WITH(_ = json::from_bjdata(v0), "[json.exception.parse_error.113] parse error at byte 3: syntax error while parsing BJData size: expected length type specification (U, i, u, I, m, l, M, L) after '#'; last byte: 0x54");
             CHECK(json::from_bjdata(v0, true, false).is_discarded());
         }
 
         SECTION("parse bjdata markers as array size in ubjson")
         {
             json _;
             std::vector<uint8_t> vu = {'[', '#', 'u'};
-            CHECK_THROWS_AS(_ = json::from_ubjson(vu), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_ubjson(vu), "[json.exception.parse_error.113] parse error at byte 3: syntax error while parsing UBJSON size: expected length type specification (U, i, I, l, L) after '#'; last byte: 0x75");
+            CHECK_THROWS_WITH_AS(_ = json::from_ubjson(vu), "[json.exception.parse_error.113] parse error at byte 3: syntax error while parsing UBJSON size: expected length type specification (U, i, I, l, L) after '#'; last byte: 0x75", json::parse_error&);
             CHECK(json::from_ubjson(vu, true, false).is_discarded());
 
             std::vector<uint8_t> vm = {'[', '#', 'm'};
-            CHECK_THROWS_AS(_ = json::from_ubjson(vm), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_ubjson(vm), "[json.exception.parse_error.113] parse error at byte 3: syntax error while parsing UBJSON size: expected length type specification (U, i, I, l, L) after '#'; last byte: 0x6D");
+            CHECK_THROWS_WITH_AS(_ = json::from_ubjson(vm), "[json.exception.parse_error.113] parse error at byte 3: syntax error while parsing UBJSON size: expected length type specification (U, i, I, l, L) after '#'; last byte: 0x6D", json::parse_error&);
             CHECK(json::from_ubjson(vm, true, false).is_discarded());
 
             std::vector<uint8_t> vM = {'[', '#', 'M'};
-            CHECK_THROWS_AS(_ = json::from_ubjson(vM), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_ubjson(vM), "[json.exception.parse_error.113] parse error at byte 3: syntax error while parsing UBJSON size: expected length type specification (U, i, I, l, L) after '#'; last byte: 0x4D");
+            CHECK_THROWS_WITH_AS(_ = json::from_ubjson(vM), "[json.exception.parse_error.113] parse error at byte 3: syntax error while parsing UBJSON size: expected length type specification (U, i, I, l, L) after '#'; last byte: 0x4D", json::parse_error&);
             CHECK(json::from_ubjson(vM, true, false).is_discarded());
 
             std::vector<uint8_t> v0 = {'[', '#', '['};
-            CHECK_THROWS_AS(_ = json::from_ubjson(v0), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_ubjson(v0), "[json.exception.parse_error.113] parse error at byte 3: syntax error while parsing UBJSON size: expected length type specification (U, i, I, l, L) after '#'; last byte: 0x5B");
+            CHECK_THROWS_WITH_AS(_ = json::from_ubjson(v0), "[json.exception.parse_error.113] parse error at byte 3: syntax error while parsing UBJSON size: expected length type specification (U, i, I, l, L) after '#'; last byte: 0x5B", json::parse_error&);
             CHECK(json::from_ubjson(v0, true, false).is_discarded());
         }
 
         SECTION("types")
         {
             std::vector<uint8_t> v0 = {'[', '$'};
             json _;
-            CHECK_THROWS_AS(_ = json::from_bjdata(v0), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(v0), "[json.exception.parse_error.110] parse error at byte 3: syntax error while parsing BJData type: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v0), "[json.exception.parse_error.110] parse error at byte 3: syntax error while parsing BJData type: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(v0, true, false).is_discarded());
 
             std::vector<uint8_t> vi = {'[', '$', '#'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vi), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vi), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData value: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vi), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData value: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vi, true, false).is_discarded());
 
             std::vector<uint8_t> vU = {'[', '$', 'U'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vU), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vU), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData value: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vU), "[json.exception.parse_error.110] parse error at byte 4: syntax error while parsing BJData value: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vU, true, false).is_discarded());
 
             std::vector<uint8_t> v1 = {'[', '$', '['};
-            CHECK_THROWS_AS(_ = json::from_bjdata(v1), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(v1), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x5B is not a permitted optimized array type");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v1), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x5B is not a permitted optimized array type", json::parse_error&);
             CHECK(json::from_bjdata(v1, true, false).is_discarded());
         }
 
         SECTION("arrays")
         {
             std::vector<uint8_t> vST = {'[', '$', 'i', '#', 'i', 2, 1};
             json _;
-            CHECK_THROWS_AS(_ = json::from_bjdata(vST), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vST), "[json.exception.parse_error.110] parse error at byte 8: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vST), "[json.exception.parse_error.110] parse error at byte 8: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vST, true, false).is_discarded());
 
             std::vector<uint8_t> vS = {'[', '#', 'i', 2, 'i', 1};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vS), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vS), "[json.exception.parse_error.110] parse error at byte 7: syntax error while parsing BJData value: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vS), "[json.exception.parse_error.110] parse error at byte 7: syntax error while parsing BJData value: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vS, true, false).is_discarded());
 
             std::vector<uint8_t> v = {'[', 'i', 2, 'i', 1};
-            CHECK_THROWS_AS(_ = json::from_bjdata(v), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(v), "[json.exception.parse_error.110] parse error at byte 6: syntax error while parsing BJData value: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v), "[json.exception.parse_error.110] parse error at byte 6: syntax error while parsing BJData value: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(v, true, false).is_discarded());
         }
 
         SECTION("ndarrays")
         {
             std::vector<uint8_t> vST = {'[', '$', 'i', '#', '[', '$', 'i', '#'};
             json _;
-            CHECK_THROWS_AS(_ = json::from_bjdata(vST), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vST), "[json.exception.parse_error.113] parse error at byte 9: syntax error while parsing BJData size: expected length type specification (U, i, u, I, m, l, M, L) after '#'; last byte: 0xFF");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vST), "[json.exception.parse_error.113] parse error at byte 9: syntax error while parsing BJData size: expected length type specification (U, i, u, I, m, l, M, L) after '#'; last byte: 0xFF", json::parse_error&);
             CHECK(json::from_bjdata(vST, true, false).is_discarded());
 
             std::vector<uint8_t> v = {'[', '$', 'i', '#', '[', '$', 'i', '#', 'i', 2, 1, 2};
-            CHECK_THROWS_AS(_ = json::from_bjdata(v), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(v), "[json.exception.parse_error.110] parse error at byte 13: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v), "[json.exception.parse_error.110] parse error at byte 13: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(v, true, false).is_discarded());
 
             std::vector<uint8_t> vS0 = {'[', '$', 'i', '#', '[', '$', 'i', '#', 'i', 2, 1};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vS0), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vS0), "[json.exception.parse_error.110] parse error at byte 12: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vS0), "[json.exception.parse_error.110] parse error at byte 12: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vS0, true, false).is_discarded());
 
             std::vector<uint8_t> vS = {'[', '$', 'i', '#', '[', '#', 'i', 2, 1, 2, 1};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vS), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vS), "[json.exception.parse_error.113] parse error at byte 9: syntax error while parsing BJData size: expected length type specification (U, i, u, I, m, l, M, L) after '#'; last byte: 0x01");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vS), "[json.exception.parse_error.113] parse error at byte 9: syntax error while parsing BJData size: expected length type specification (U, i, u, I, m, l, M, L) after '#'; last byte: 0x01", json::parse_error&);
             CHECK(json::from_bjdata(vS, true, false).is_discarded());
 
             std::vector<uint8_t> vT = {'[', '$', 'i', '#', '[', 'i', 2, 'i'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vT), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vT), "[json.exception.parse_error.110] parse error at byte 9: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vT), "[json.exception.parse_error.110] parse error at byte 9: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vT, true, false).is_discarded());
 
             std::vector<uint8_t> vT0 = {'[', '$', 'i', '#', '[', 'i'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vT0), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vT0), "[json.exception.parse_error.110] parse error at byte 7: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vT0), "[json.exception.parse_error.110] parse error at byte 7: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vT0, true, false).is_discarded());
 
             std::vector<uint8_t> vu = {'[', '$', 'i', '#', '[', '$', 'i', '#', 'u', 1, 0};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vu), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vu), "[json.exception.parse_error.110] parse error at byte 12: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vu), "[json.exception.parse_error.110] parse error at byte 12: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vu, true, false).is_discarded());
 
             std::vector<uint8_t> vm = {'[', '$', 'i', '#', '[', '$', 'i', '#', 'm', 1, 0, 0, 0};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vm), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vm), "[json.exception.parse_error.110] parse error at byte 14: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vm), "[json.exception.parse_error.110] parse error at byte 14: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vm, true, false).is_discarded());
 
             std::vector<uint8_t> vM = {'[', '$', 'i', '#', '[', '$', 'i', '#', 'M', 1, 0, 0, 0, 0, 0, 0, 0};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vM), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vM), "[json.exception.parse_error.110] parse error at byte 18: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vM), "[json.exception.parse_error.110] parse error at byte 18: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vM, true, false).is_discarded());
 
             std::vector<uint8_t> vU = {'[', '$', 'U', '#', '[', '$', 'i', '#', 'i', 2, 2, 3, 1, 2, 3, 4, 5};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vU), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vU), "[json.exception.parse_error.110] parse error at byte 18: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vU), "[json.exception.parse_error.110] parse error at byte 18: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vU, true, false).is_discarded());
 
             std::vector<uint8_t> vT1 = {'[', '$', 'T', '#', '[', '$', 'i', '#', 'i', 2, 2, 3};
             CHECK(json::from_bjdata(vT1, true, false).is_discarded());
 
             std::vector<uint8_t> vh = {'[', '$', 'h', '#', '[', '$', 'i', '#', 'i', 2, 2, 3};
             CHECK(json::from_bjdata(vh, true, false).is_discarded());
         }
 
         SECTION("objects")
         {
             std::vector<uint8_t> vST = {'{', '$', 'i', '#', 'i', 2, 'i', 1, 'a', 1};
             json _;
-            CHECK_THROWS_AS(_ = json::from_bjdata(vST), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vST), "[json.exception.parse_error.110] parse error at byte 11: syntax error while parsing BJData value: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vST), "[json.exception.parse_error.110] parse error at byte 11: syntax error while parsing BJData value: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vST, true, false).is_discarded());
 
             std::vector<uint8_t> vT = {'{', '$', 'i', 'i', 1, 'a', 1};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vT), json::parse_error&);
             CHECK_THROWS_WITH(_ = json::from_bjdata(vT), "[json.exception.parse_error.112] parse error at byte 4: syntax error while parsing BJData size: expected '#' after type information; last byte: 0x69");
             CHECK(json::from_bjdata(vT, true, false).is_discarded());
 
             std::vector<uint8_t> vS = {'{', '#', 'i', 2, 'i', 1, 'a', 'i', 1};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vS), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vS), "[json.exception.parse_error.110] parse error at byte 10: syntax error while parsing BJData value: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vS), "[json.exception.parse_error.110] parse error at byte 10: syntax error while parsing BJData value: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vS, true, false).is_discarded());
 
             std::vector<uint8_t> v = {'{', 'i', 1, 'a', 'i', 1};
-            CHECK_THROWS_AS(_ = json::from_bjdata(v), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(v), "[json.exception.parse_error.110] parse error at byte 7: syntax error while parsing BJData value: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v), "[json.exception.parse_error.110] parse error at byte 7: syntax error while parsing BJData value: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(v, true, false).is_discarded());
 
             std::vector<uint8_t> v2 = {'{', 'i', 1, 'a', 'i', 1, 'i'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(v2), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(v2), "[json.exception.parse_error.110] parse error at byte 8: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v2), "[json.exception.parse_error.110] parse error at byte 8: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(v2, true, false).is_discarded());
 
             std::vector<uint8_t> v3 = {'{', 'i', 1, 'a'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(v3), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(v3), "[json.exception.parse_error.110] parse error at byte 5: syntax error while parsing BJData value: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v3), "[json.exception.parse_error.110] parse error at byte 5: syntax error while parsing BJData value: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(v3, true, false).is_discarded());
 
             std::vector<uint8_t> vST1 = {'{', '$', 'd', '#', 'i', 2, 'i', 1, 'a'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vST1), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vST1), "[json.exception.parse_error.110] parse error at byte 10: syntax error while parsing BJData number: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vST1), "[json.exception.parse_error.110] parse error at byte 10: syntax error while parsing BJData number: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vST1, true, false).is_discarded());
 
             std::vector<uint8_t> vST2 = {'{', '#', 'i', 2, 'i', 1, 'a'};
-            CHECK_THROWS_AS(_ = json::from_bjdata(vST2), json::parse_error&);
-            CHECK_THROWS_WITH(_ = json::from_bjdata(vST2), "[json.exception.parse_error.110] parse error at byte 8: syntax error while parsing BJData value: unexpected end of input");
+            CHECK_THROWS_WITH_AS(_ = json::from_bjdata(vST2), "[json.exception.parse_error.110] parse error at byte 8: syntax error while parsing BJData value: unexpected end of input", json::parse_error&);
             CHECK(json::from_bjdata(vST2, true, false).is_discarded());
 
             std::vector<uint8_t> vO = {'{', '#', '[', 'i', 2, 'i', 1, ']', 'i', 1, 'a', 'i', 1, 'i', 1, 'b', 'i', 2};
             CHECK(json::from_bjdata(vO, true, false).is_discarded());
         }
     }
 
     SECTION("writing optimized values")
     {
         SECTION("integer")
         {
             SECTION("array of i")
             {
                 json j = {1, -1};
                 std::vector<uint8_t> expected = {'[', '$', 'i', '#', 'i', 2, 1, 0xff};
                 CHECK(json::to_bjdata(j, true, true) == expected);
             }
 
             SECTION("array of U")
             {
                 json j = {200, 201};
                 std::vector<uint8_t> expected = {'[', '$', 'U', '#', 'i', 2, 0xC8, 0xC9};
                 CHECK(json::to_bjdata(j, true, true) == expected);
             }
 
             SECTION("array of I")
             {
                 json j = {30000, -30000};
                 std::vector<uint8_t> expected = {'[', '$', 'I', '#', 'i', 2, 0x30, 0x75, 0xd0, 0x8a};
                 CHECK(json::to_bjdata(j, true, true) == expected);
             }
 
             SECTION("array of u")
             {
                 json j = {50000, 50001};
                 std::vector<uint8_t> expected = {'[', '$', 'u', '#', 'i', 2, 0x50, 0xC3, 0x51, 0xC3};
                 CHECK(json::to_bjdata(j, true, true) == expected);
             }
 
             SECTION("array of l")
             {
                 json j = {70000, -70000};
                 std::vector<uint8_t> expected = {'[', '$', 'l', '#', 'i', 2, 0x70, 0x11, 0x01, 0x00, 0x90, 0xEE, 0xFE, 0xFF};
                 CHECK(json::to_bjdata(j, true, true) == expected);
             }
 
             SECTION("array of m")
             {
                 json j = {3147483647, 3147483648};
                 std::vector<uint8_t> expected = {'[', '$', 'm', '#', 'i', 2, 0xFF, 0xC9, 0x9A, 0xBB, 0x00, 0xCA, 0x9A, 0xBB};
                 CHECK(json::to_bjdata(j, true, true) == expected);
             }
 
             SECTION("array of L")
             {
                 json j = {5000000000, -5000000000};
                 std::vector<uint8_t> expected = {'[', '$', 'L', '#', 'i', 2, 0x00, 0xF2, 0x05, 0x2A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xFA, 0xD5, 0xFE, 0xFF, 0xFF, 0xFF};
                 CHECK(json::to_bjdata(j, true, true) == expected);
             }
         }
 
         SECTION("unsigned integer")
         {
             SECTION("array of i")
             {
                 json j = {1u, 2u};
                 std::vector<uint8_t> expected = {'[', '$', 'i', '#', 'i', 2, 1, 2};
                 std::vector<uint8_t> expected_size = {'[', '#', 'i', 2, 'i', 1, 'i', 2};
                 CHECK(json::to_bjdata(j, true, true) == expected);
                 CHECK(json::to_bjdata(j, true) == expected_size);
             }
 
             SECTION("array of U")
             {
                 json j = {200u, 201u};
                 std::vector<uint8_t> expected = {'[', '$', 'U', '#', 'i', 2, 0xC8, 0xC9};
                 std::vector<uint8_t> expected_size = {'[', '#', 'i', 2, 'U', 0xC8, 'U', 0xC9};
                 CHECK(json::to_bjdata(j, true, true) == expected);
                 CHECK(json::to_bjdata(j, true) == expected_size);
             }
 
             SECTION("array of I")
             {
                 json j = {30000u, 30001u};
                 std::vector<uint8_t> expected = {'[', '$', 'I', '#', 'i', 2, 0x30, 0x75, 0x31, 0x75};
                 std::vector<uint8_t> expected_size = {'[', '#', 'i', 2, 'I', 0x30, 0x75, 'I', 0x31, 0x75};
                 CHECK(json::to_bjdata(j, true, true) == expected);
                 CHECK(json::to_bjdata(j, true) == expected_size);
             }
 
             SECTION("array of u")
             {
                 json j = {50000u, 50001u};
                 std::vector<uint8_t> expected = {'[', '$', 'u', '#', 'i', 2, 0x50, 0xC3, 0x51, 0xC3};
                 std::vector<uint8_t> expected_size = {'[', '#', 'i', 2, 'u', 0x50, 0xC3, 'u', 0x51, 0xC3};
                 CHECK(json::to_bjdata(j, true, true) == expected);
                 CHECK(json::to_bjdata(j, true) == expected_size);
             }
 
             SECTION("array of l")
             {
                 json j = {70000u, 70001u};
                 std::vector<uint8_t> expected = {'[', '$', 'l', '#', 'i', 2, 0x70, 0x11, 0x01, 0x00, 0x71, 0x11, 0x01, 0x00};
                 std::vector<uint8_t> expected_size = {'[', '#', 'i', 2, 'l', 0x70, 0x11, 0x01, 0x00, 'l', 0x71, 0x11, 0x01, 0x00};
                 CHECK(json::to_bjdata(j, true, true) == expected);
                 CHECK(json::to_bjdata(j, true) == expected_size);
             }
 
             SECTION("array of m")
             {
                 json j = {3147483647u, 3147483648u};
                 std::vector<uint8_t> expected = {'[', '$', 'm', '#', 'i', 2, 0xFF, 0xC9, 0x9A, 0xBB, 0x00, 0xCA, 0x9A, 0xBB};
                 std::vector<uint8_t> expected_size = {'[', '#', 'i', 2, 'm', 0xFF, 0xC9, 0x9A, 0xBB, 'm', 0x00, 0xCA, 0x9A, 0xBB};
                 CHECK(json::to_bjdata(j, true, true) == expected);
                 CHECK(json::to_bjdata(j, true) == expected_size);
             }
 
             SECTION("array of L")
             {
                 json j = {5000000000u, 5000000001u};
                 std::vector<uint8_t> expected = {'[', '$', 'L', '#', 'i', 2, 0x00, 0xF2, 0x05, 0x2A, 0x01, 0x00, 0x00, 0x00, 0x01, 0xF2, 0x05, 0x2A, 0x01, 0x00, 0x00, 0x00};
                 std::vector<uint8_t> expected_size = {'[', '#', 'i', 2, 'L', 0x00, 0xF2, 0x05, 0x2A, 0x01, 0x00, 0x00, 0x00, 'L', 0x01, 0xF2, 0x05, 0x2A, 0x01, 0x00, 0x00, 0x00};
                 CHECK(json::to_bjdata(j, true, true) == expected);
                 CHECK(json::to_bjdata(j, true) == expected_size);
             }
 
             SECTION("array of M")
             {
                 json j = {10223372036854775807ull, 10223372036854775808ull};
                 std::vector<uint8_t> expected = {'[', '$', 'M', '#', 'i', 2, 0xFF, 0xFF, 0x63, 0xA7, 0xB3, 0xB6, 0xE0, 0x8D, 0x00, 0x00, 0x64, 0xA7, 0xB3, 0xB6, 0xE0, 0x8D};
                 std::vector<uint8_t> expected_size = {'[', '#', 'i', 2, 'M', 0xFF, 0xFF, 0x63, 0xA7, 0xB3, 0xB6, 0xE0, 0x8D, 'M', 0x00, 0x00, 0x64, 0xA7, 0xB3, 0xB6, 0xE0, 0x8D};
                 CHECK(json::to_bjdata(j, true, true) == expected);
                 CHECK(json::to_bjdata(j, true) == expected_size);
             }
         }
     }
 }
@@ -2968,322 +2918,320 @@ TEST_CASE("BJData")
 TEST_CASE("Universal Binary JSON Specification Examples 1")
 {
     SECTION("Null Value")
     {
         json j = {{"passcode", nullptr}};
         std::vector<uint8_t> v = {'{', 'i', 8, 'p', 'a', 's', 's', 'c', 'o', 'd', 'e', 'Z', '}'};
         CHECK(json::to_bjdata(j) == v);
         CHECK(json::from_bjdata(v) == j);
     }
 
     SECTION("No-Op Value")
     {
         json j = {"foo", "bar", "baz"};
         std::vector<uint8_t> v = {'[', 'S', 'i', 3, 'f', 'o', 'o',
                                   'S', 'i', 3, 'b', 'a', 'r',
                                   'S', 'i', 3, 'b', 'a', 'z', ']'
                                  };
         std::vector<uint8_t> v2 = {'[', 'S', 'i', 3, 'f', 'o', 'o', 'N',
                                    'S', 'i', 3, 'b', 'a', 'r', 'N', 'N', 'N',
                                    'S', 'i', 3, 'b', 'a', 'z', 'N', 'N', ']'
                                   };
         CHECK(json::to_bjdata(j) == v);
         CHECK(json::from_bjdata(v) == j);
         CHECK(json::from_bjdata(v2) == j);
     }
 
     SECTION("Boolean Types")
     {
         json j = {{"authorized", true}, {"verified", false}};
         std::vector<uint8_t> v = {'{', 'i', 10, 'a', 'u', 't', 'h', 'o', 'r', 'i', 'z', 'e', 'd', 'T',
                                   'i', 8, 'v', 'e', 'r', 'i', 'f', 'i', 'e', 'd', 'F', '}'
                                  };
         CHECK(json::to_bjdata(j) == v);
         CHECK(json::from_bjdata(v) == j);
     }
 
     SECTION("Numeric Types")
     {
         json j =
         {
             {"int8", 16},
             {"uint8", 255},
             {"int16", 32767},
             {"uint16", 42767},
             {"int32", 2147483647},
             {"uint32", 3147483647},
             {"int64", 9223372036854775807},
             {"uint64", 10223372036854775807ull},
             {"float64", 113243.7863123}
         };
         std::vector<uint8_t> v = {'{',
                                   'i', 7, 'f', 'l', 'o', 'a', 't', '6', '4', 'D', 0xcf, 0x34, 0xbc, 0x94, 0xbc, 0xa5, 0xfb, 0x40,
                                   'i', 5, 'i', 'n', 't', '1', '6', 'I', 0xff, 0x7f,
                                   'i', 5, 'i', 'n', 't', '3', '2', 'l', 0xff, 0xff, 0xff, 0x7f,
                                   'i', 5, 'i', 'n', 't', '6', '4', 'L', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,
                                   'i', 4, 'i', 'n', 't', '8', 'i', 16,
                                   'i', 6, 'u', 'i', 'n', 't', '1', '6', 'u', 0x0F, 0xA7,
                                   'i', 6, 'u', 'i', 'n', 't', '3', '2', 'm', 0xFF, 0xC9, 0x9A, 0xBB,
                                   'i', 6, 'u', 'i', 'n', 't', '6', '4', 'M', 0xFF, 0xFF, 0x63, 0xA7, 0xB3, 0xB6, 0xE0, 0x8D,
                                   'i', 5, 'u', 'i', 'n', 't', '8', 'U', 0xff,
                                   '}'
                                  };
         CHECK(json::to_bjdata(j) == v);
         CHECK(json::from_bjdata(v) == j);
     }
 
     SECTION("Char Type")
     {
         json j = {{"rolecode", "a"}, {"delim", ";"}};
         std::vector<uint8_t> v = {'{', 'i', 5, 'd', 'e', 'l', 'i', 'm', 'C', ';', 'i', 8, 'r', 'o', 'l', 'e', 'c', 'o', 'd', 'e', 'C', 'a', '}'};
         //CHECK(json::to_bjdata(j) == v);
         CHECK(json::from_bjdata(v) == j);
     }
 
     SECTION("String Type")
     {
         SECTION("English")
         {
             json j = "hello";
             std::vector<uint8_t> v = {'S', 'i', 5, 'h', 'e', 'l', 'l', 'o'};
             CHECK(json::to_bjdata(j) == v);
             CHECK(json::from_bjdata(v) == j);
         }
 
         SECTION("Russian")
         {
             json j = "привет";
             std::vector<uint8_t> v = {'S', 'i', 12, 0xD0, 0xBF, 0xD1, 0x80, 0xD0, 0xB8, 0xD0, 0xB2, 0xD0, 0xB5, 0xD1, 0x82};
             CHECK(json::to_bjdata(j) == v);
             CHECK(json::from_bjdata(v) == j);
         }
 
         SECTION("Russian")
         {
             json j = "مرحبا";
             std::vector<uint8_t> v = {'S', 'i', 10, 0xD9, 0x85, 0xD8, 0xB1, 0xD8, 0xAD, 0xD8, 0xA8, 0xD8, 0xA7};
             CHECK(json::to_bjdata(j) == v);
             CHECK(json::from_bjdata(v) == j);
         }
     }
 
     SECTION("Array Type")
     {
         SECTION("size=false type=false")
         {
             // note the float has been replaced by a double
             json j = {nullptr, true, false, 4782345193, 153.132, "ham"};
             std::vector<uint8_t> v = {'[', 'Z', 'T', 'F', 'L', 0xE9, 0xCB, 0x0C, 0x1D, 0x01, 0x00, 0x00, 0x00, 'D', 0x4e, 0x62, 0x10, 0x58, 0x39, 0x24, 0x63, 0x40, 'S', 'i', 3, 'h', 'a', 'm', ']'};
             CHECK(json::to_bjdata(j) == v);
             CHECK(json::from_bjdata(v) == j);
         }
 
         SECTION("size=true type=false")
         {
             // note the float has been replaced by a double
             json j = {nullptr, true, false, 4782345193, 153.132, "ham"};
             std::vector<uint8_t> v = {'[', '#', 'i', 6, 'Z', 'T', 'F', 'L', 0xE9, 0xCB, 0x0C, 0x1D, 0x01, 0x00, 0x00, 0x00, 'D', 0x4e, 0x62, 0x10, 0x58, 0x39, 0x24, 0x63, 0x40, 'S', 'i', 3, 'h', 'a', 'm'};
             CHECK(json::to_bjdata(j, true) == v);
             CHECK(json::from_bjdata(v) == j);
         }
 
         SECTION("size=true type=true")
         {
             // note the float has been replaced by a double
             json j = {nullptr, true, false, 4782345193, 153.132, "ham"};
             std::vector<uint8_t> v = {'[', '#', 'i', 6, 'Z', 'T', 'F', 'L', 0xE9, 0xCB, 0x0C, 0x1D, 0x01, 0x00, 0x00, 0x00, 'D', 0x4e, 0x62, 0x10, 0x58, 0x39, 0x24, 0x63, 0x40, 'S', 'i', 3, 'h', 'a', 'm'};
             CHECK(json::to_bjdata(j, true, true) == v);
             CHECK(json::from_bjdata(v) == j);
         }
     }
 
     SECTION("Object Type")
     {
         SECTION("size=false type=false")
         {
             json j =
             {
                 {
                     "post", {
                         {"id", 1137},
                         {"author", "rkalla"},
                         {"timestamp", 1364482090592},
                         {"body", "I totally agree!"}
                     }
                 }
             };
             std::vector<uint8_t> v = {'{', 'i', 4, 'p', 'o', 's', 't', '{',
                                       'i', 6, 'a', 'u', 't', 'h', 'o', 'r', 'S', 'i', 6, 'r', 'k', 'a', 'l', 'l', 'a',
                                       'i', 4, 'b', 'o', 'd', 'y', 'S', 'i', 16, 'I', ' ', 't', 'o', 't', 'a', 'l', 'l', 'y', ' ', 'a', 'g', 'r', 'e', 'e', '!',
                                       'i', 2, 'i', 'd', 'I', 0x71, 0x04,
                                       'i', 9, 't', 'i', 'm', 'e', 's', 't', 'a', 'm', 'p', 'L', 0x60, 0x66, 0x78, 0xB1, 0x3D, 0x01, 0x00, 0x00,
                                       '}', '}'
                                      };
             CHECK(json::to_bjdata(j) == v);
             CHECK(json::from_bjdata(v) == j);
         }
 
         SECTION("size=true type=false")
         {
             json j =
             {
                 {
                     "post", {
                         {"id", 1137},
                         {"author", "rkalla"},
                         {"timestamp", 1364482090592},
                         {"body", "I totally agree!"}
                     }
                 }
             };
             std::vector<uint8_t> v = {'{', '#', 'i', 1, 'i', 4, 'p', 'o', 's', 't', '{', '#', 'i', 4,
                                       'i', 6, 'a', 'u', 't', 'h', 'o', 'r', 'S', 'i', 6, 'r', 'k', 'a', 'l', 'l', 'a',
                                       'i', 4, 'b', 'o', 'd', 'y', 'S', 'i', 16, 'I', ' ', 't', 'o', 't', 'a', 'l', 'l', 'y', ' ', 'a', 'g', 'r', 'e', 'e', '!',
                                       'i', 2, 'i', 'd', 'I', 0x71, 0x04,
                                       'i', 9, 't', 'i', 'm', 'e', 's', 't', 'a', 'm', 'p', 'L', 0x60, 0x66, 0x78, 0xB1, 0x3D, 0x01, 0x00, 0x00,
                                      };
             CHECK(json::to_bjdata(j, true) == v);
             CHECK(json::from_bjdata(v) == j);
         }
 
         SECTION("size=true type=true")
         {
             json j =
             {
                 {
                     "post", {
                         {"id", 1137},
                         {"author", "rkalla"},
                         {"timestamp", 1364482090592},
                         {"body", "I totally agree!"}
                     }
                 }
             };
             std::vector<uint8_t> v = {'{', '#', 'i', 1, 'i', 4, 'p', 'o', 's', 't', '{', '#', 'i', 4,
                                       'i', 6, 'a', 'u', 't', 'h', 'o', 'r', 'S', 'i', 6, 'r', 'k', 'a', 'l', 'l', 'a',
                                       'i', 4, 'b', 'o', 'd', 'y', 'S', 'i', 16, 'I', ' ', 't', 'o', 't', 'a', 'l', 'l', 'y', ' ', 'a', 'g', 'r', 'e', 'e', '!',
                                       'i', 2, 'i', 'd', 'I', 0x71, 0x04,
                                       'i', 9, 't', 'i', 'm', 'e', 's', 't', 'a', 'm', 'p', 'L', 0x60, 0x66, 0x78, 0xB1, 0x3D, 0x01, 0x00, 0x00,
                                      };
             CHECK(json::to_bjdata(j, true, true) == v);
             CHECK(json::from_bjdata(v) == j);
         }
     }
 
     SECTION("Optimized Format")
     {
         SECTION("Array Example")
         {
             SECTION("No Optimization")
             {
                 // note the floats have been replaced by doubles
                 json j = {29.97, 31.13, 67.0, 2.113, 23.888};
                 std::vector<uint8_t> v = {'[',
                                           'D', 0xb8, 0x1e, 0x85, 0xeb, 0x51, 0xf8, 0x3d, 0x40,
                                           'D', 0xe1, 0x7a, 0x14, 0xae, 0x47, 0x21, 0x3f, 0x40,
                                           'D', 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x50, 0x40,
                                           'D', 0x81, 0x95, 0x43, 0x8b, 0x6c, 0xe7, 0x00, 0x40,
                                           'D', 0x17, 0xd9, 0xce, 0xf7, 0x53, 0xe3, 0x37, 0x40,
                                           ']'
                                          };
                 CHECK(json::to_bjdata(j) == v);
                 CHECK(json::from_bjdata(v) == j);
             }
 
             SECTION("Optimized with count")
             {
                 // note the floats have been replaced by doubles
                 json j = {29.97, 31.13, 67.0, 2.113, 23.888};
                 std::vector<uint8_t> v = {'[', '#', 'i', 5,
                                           'D', 0xb8, 0x1e, 0x85, 0xeb, 0x51, 0xf8, 0x3d, 0x40,
                                           'D', 0xe1, 0x7a, 0x14, 0xae, 0x47, 0x21, 0x3f, 0x40,
                                           'D', 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x50, 0x40,
                                           'D', 0x81, 0x95, 0x43, 0x8b, 0x6c, 0xe7, 0x00, 0x40,
                                           'D', 0x17, 0xd9, 0xce, 0xf7, 0x53, 0xe3, 0x37, 0x40,
                                          };
                 CHECK(json::to_bjdata(j, true) == v);
                 CHECK(json::from_bjdata(v) == j);
             }
 
             SECTION("Optimized with type & count")
             {
                 // note the floats have been replaced by doubles
                 json j = {29.97, 31.13, 67.0, 2.113, 23.888};
                 std::vector<uint8_t> v = {'[', '$', 'D', '#', 'i', 5,
                                           0xb8, 0x1e, 0x85, 0xeb, 0x51, 0xf8, 0x3d, 0x40,
                                           0xe1, 0x7a, 0x14, 0xae, 0x47, 0x21, 0x3f, 0x40,
                                           0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x50, 0x40,
                                           0x81, 0x95, 0x43, 0x8b, 0x6c, 0xe7, 0x00, 0x40,
                                           0x17, 0xd9, 0xce, 0xf7, 0x53, 0xe3, 0x37, 0x40,
                                          };
                 CHECK(json::to_bjdata(j, true, true) == v);
                 CHECK(json::from_bjdata(v) == j);
             }
         }
 
         SECTION("Object Example")
         {
             SECTION("No Optimization")
             {
                 // note the floats have been replaced by doubles
                 json j = { {"lat", 29.976}, {"long", 31.131}, {"alt", 67.0} };
                 std::vector<uint8_t> v = {'{',
                                           'i', 3, 'a', 'l', 't', 'D',      0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x50, 0x40,
                                           'i', 3, 'l', 'a', 't', 'D',      0x60, 0xe5, 0xd0, 0x22, 0xdb, 0xf9, 0x3d, 0x40,
                                           'i', 4, 'l', 'o', 'n', 'g', 'D', 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0x21, 0x3f, 0x40,
                                           '}'
                                          };
                 CHECK(json::to_bjdata(j) == v);
                 CHECK(json::from_bjdata(v) == j);
             }
 
             SECTION("Optimized with count")
             {
                 // note the floats have been replaced by doubles
                 json j = { {"lat", 29.976}, {"long", 31.131}, {"alt", 67.0} };
                 std::vector<uint8_t> v = {'{', '#', 'i', 3,
                                           'i', 3, 'a', 'l', 't', 'D',      0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x50, 0x40,
                                           'i', 3, 'l', 'a', 't', 'D',      0x60, 0xe5, 0xd0, 0x22, 0xdb, 0xf9, 0x3d, 0x40,
                                           'i', 4, 'l', 'o', 'n', 'g', 'D', 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0x21, 0x3f, 0x40,
                                          };
                 CHECK(json::to_bjdata(j, true) == v);
                 CHECK(json::from_bjdata(v) == j);
             }
 
             SECTION("Optimized with type & count")
             {
                 // note the floats have been replaced by doubles
                 json j = { {"lat", 29.976}, {"long", 31.131}, {"alt", 67.0} };
                 std::vector<uint8_t> v = {'{', '$', 'D', '#', 'i', 3,
                                           'i', 3, 'a', 'l', 't',      0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x50, 0x40,
                                           'i', 3, 'l', 'a', 't',      0x60, 0xe5, 0xd0, 0x22, 0xdb, 0xf9, 0x3d, 0x40,
                                           'i', 4, 'l', 'o', 'n', 'g', 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0x21, 0x3f, 0x40,
                                          };
                 CHECK(json::to_bjdata(j, true, true) == v);
                 CHECK(json::from_bjdata(v) == j);
             }
         }
 
         SECTION("Special Cases (Null, No-Op and Boolean)")
         {
             SECTION("Array")
             {
                 json _;
                 std::vector<uint8_t> v = {'[', '$', 'N', '#', 'I', 0x00, 0x02};
-                CHECK_THROWS_AS(_ = json::from_bjdata(v), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_bjdata(v), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x4E is not a permitted optimized array type");
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x4E is not a permitted optimized array type", json::parse_error&);
                 CHECK(json::from_bjdata(v, true, false).is_discarded());
             }
 
             SECTION("Object")
             {
                 json _;
                 std::vector<uint8_t> v = {'{', '$', 'Z', '#', 'i', 3, 'i', 4, 'n', 'a', 'm', 'e', 'i', 8, 'p', 'a', 's', 's', 'w', 'o', 'r', 'd', 'i', 5, 'e', 'm', 'a', 'i', 'l'};
-                CHECK_THROWS_AS(_ = json::from_bjdata(v), json::parse_error&);
-                CHECK_THROWS_WITH(_ = json::from_bjdata(v), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x5A is not a permitted optimized array type");
+                CHECK_THROWS_WITH_AS(_ = json::from_bjdata(v), "[json.exception.parse_error.112] parse error at byte 3: syntax error while parsing BJData type: marker 0x5A is not a permitted optimized array type", json::parse_error&);
                 CHECK(json::from_bjdata(v, true, false).is_discarded());
             }
         }
     }
 }
 
 #if !defined(JSON_NOEXCEPTION)
