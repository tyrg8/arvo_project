commit 1c43db6db6ec3c8f84d6d751f904ab8558561430
Author: Nickolay Olshevsky <o.nickolay@gmail.com>
Date:   Mon Sep 7 12:11:31 2020 +0300

    Fix oss-fuzz issue 25388: possible heap buffer overflow during parsing of kbx blob.

diff --git a/src/librekey/key_store_kbx.cpp b/src/librekey/key_store_kbx.cpp
index 7870a85b..e7b33b24 100644
--- a/src/librekey/key_store_kbx.cpp
+++ b/src/librekey/key_store_kbx.cpp
@@ -109,231 +109,232 @@ static bool
 rnp_key_store_kbx_parse_pgp_blob(kbx_pgp_blob_t *pgp_blob)
 {
     int      i;
     uint8_t *image = pgp_blob->blob.image;
     uint32_t len = pgp_blob->blob.length;
 
     image += BLOB_HEADER_SIZE;
     len -= BLOB_HEADER_SIZE;
 
     if (len < 15) {
         RNP_LOG("Too few data in the blob.");
         return false;
     }
     pgp_blob->version = ru8(image);
     image++;
 
     if (pgp_blob->version != 1) {
         RNP_LOG("Wrong version: %" PRIu8, pgp_blob->version);
         return false;
     }
 
     pgp_blob->flags = ru16(image);
     image += 2;
 
     pgp_blob->keyblock_offset = ru32(image);
     image += 4;
 
     pgp_blob->keyblock_length = ru32(image);
     image += 4;
 
-    if (pgp_blob->keyblock_offset > pgp_blob->blob.length ||
+    if ((pgp_blob->keyblock_offset > pgp_blob->blob.length) ||
+        (pgp_blob->keyblock_offset > (UINT32_MAX - pgp_blob->keyblock_length)) ||
         pgp_blob->blob.length < (pgp_blob->keyblock_offset + pgp_blob->keyblock_length)) {
         RNP_LOG("Wrong keyblock offset/length, blob size: %" PRIu32
                 ", keyblock offset: %" PRIu32 ", length: %" PRIu32,
                 pgp_blob->blob.length,
                 pgp_blob->keyblock_offset,
                 pgp_blob->keyblock_length);
         return false;
     }
 
     pgp_blob->nkeys = ru16(image);
     image += 2;
 
     if (pgp_blob->nkeys < 1) {
         RNP_LOG("PGP blob should contains at least 1 key");
         return false;
     }
 
     /* Size of the single key record */
     pgp_blob->keys_len = ru16(image);
     image += 2;
 
     if (pgp_blob->keys_len < 28) {
         RNP_LOG("PGP blob needs 28 bytes, but contains: %" PRIu16 " bytes",
                 pgp_blob->keys_len);
         return false;
     }
     len -= 15;
 
     for (i = 0; i < pgp_blob->nkeys; i++) {
         kbx_pgp_key_t nkey = {};
 
         if (len < pgp_blob->keys_len) {
             RNP_LOG("Too few bytes left for key blob");
             return false;
         }
 
         // copy fingerprint
         memcpy(nkey.fp, image, 20);
         image += 20;
 
         nkey.keyid_offset = ru32(image);
         image += 4;
 
         nkey.flags = ru16(image);
         image += 2;
 
         // RFU
         image += 2;
 
         // skip padding bytes if it existed
         image += pgp_blob->keys_len - 28;
         len -= pgp_blob->keys_len;
 
         if (!list_append(&pgp_blob->keys, &nkey, sizeof(nkey))) {
             RNP_LOG("alloc failed");
             return false;
         }
     }
 
     if (len < 2) {
         RNP_LOG("No data for sn_size");
         return false;
     }
     pgp_blob->sn_size = ru16(image);
     image += 2;
     len -= 2;
 
     if (pgp_blob->sn_size > len) {
         RNP_LOG("SN is %" PRIu16 ", while bytes left are %" PRIu32, pgp_blob->sn_size, len);
         return false;
     }
 
     if (pgp_blob->sn_size > 0) {
         pgp_blob->sn = (uint8_t *) malloc(pgp_blob->sn_size);
         if (pgp_blob->sn == NULL) {
             RNP_LOG("bad malloc");
             return false;
         }
 
         memcpy(pgp_blob->sn, image, pgp_blob->sn_size);
         image += pgp_blob->sn_size;
         len -= pgp_blob->sn_size;
     }
 
     if (len < 4) {
         RNP_LOG("Too few data for uids");
         return false;
     }
     pgp_blob->nuids = ru16(image);
     image += 2;
     pgp_blob->uids_len = ru16(image);
     image += 2;
     len -= 4;
 
     if (pgp_blob->uids_len < 12) {
         RNP_LOG("Too few bytes for uid struct: %" PRIu16, pgp_blob->uids_len);
         return false;
     }
 
     for (i = 0; i < pgp_blob->nuids; i++) {
         kbx_pgp_uid_t nuid = {};
 
         if (len < pgp_blob->uids_len) {
             RNP_LOG("Too few bytes to read uid struct.");
             return false;
         }
         nuid.offset = ru32(image);
         image += 4;
 
         nuid.length = ru32(image);
         image += 4;
 
         nuid.flags = ru16(image);
         image += 2;
 
         nuid.validity = ru8(image);
         image += 1;
 
         // RFU
         image += 1;
 
         // skip padding bytes if it existed
         image += (pgp_blob->uids_len - 12);
         len -= pgp_blob->uids_len;
 
         if (!list_append(&pgp_blob->uids, &nuid, sizeof(nuid))) {
             RNP_LOG("alloc failed");
             return false;
         }
     }
 
     if (len < 4) {
         RNP_LOG("No data left for sigs");
         return false;
     }
 
     pgp_blob->nsigs = ru16(image);
     image += 2;
 
     pgp_blob->sigs_len = ru16(image);
     image += 2;
     len -= 4;
 
     if (pgp_blob->sigs_len < 4) {
         RNP_LOG("Too small SIGN structure: %" PRIu16, pgp_blob->uids_len);
         return false;
     }
 
     for (i = 0; i < pgp_blob->nsigs; i++) {
         kbx_pgp_sig_t nsig = {};
 
         if (len < pgp_blob->sigs_len) {
             RNP_LOG("Too few data for sig");
             return false;
         }
 
         nsig.expired = ru32(image);
         image += 4;
 
         // skip padding bytes if it existed
         image += (pgp_blob->sigs_len - 4);
         len -= pgp_blob->sigs_len;
 
         if (!list_append(&pgp_blob->sigs, &nsig, sizeof(nsig))) {
             RNP_LOG("alloc failed");
             return false;
         }
     }
 
     if (len < 16) {
         RNP_LOG("Too few data for trust/validities");
         return false;
     }
 
     pgp_blob->ownertrust = ru8(image);
     image += 1;
 
     pgp_blob->all_Validity = ru8(image);
     image += 1;
 
     // RFU
     image += 2;
 
     pgp_blob->recheck_after = ru32(image);
     image += 4;
 
     pgp_blob->latest_timestamp = ru32(image);
     image += 4;
 
     pgp_blob->blob_created_at = ru32(image);
     image += 4;
 
     // here starts keyblock, UID and reserved space for future usage
 
     // Maybe we should add checksum verify but GnuPG never checked it
     // Checksum is last 20 bytes of blob and it is SHA-1, if it invalid MD5 and starts from 4
     // zero it is MD5.
 
     return true;
 }
@@ -407,75 +408,75 @@ bool
 rnp_key_store_kbx_from_src(rnp_key_store_t *         key_store,
                            pgp_source_t *            src,
                            const pgp_key_provider_t *key_provider)
 {
     pgp_source_t    memsrc = {};
     size_t          has_bytes;
     uint8_t *       buf;
     uint32_t        blob_length;
     kbx_pgp_blob_t *pgp_blob;
     kbx_blob_t **   blob;
     bool            res = false;
 
     if (read_mem_src(&memsrc, src)) {
         RNP_LOG("failed to get data to memory source");
         return false;
     }
 
     has_bytes = memsrc.size;
     buf = (uint8_t *) mem_src_get_memory(&memsrc);
     while (has_bytes > 4) {
         blob_length = ru32(buf);
         if (blob_length > BLOB_SIZE_LIMIT) {
             RNP_LOG("Blob size is %" PRIu32 " bytes but limit is %d bytes",
                     blob_length,
                     (int) BLOB_SIZE_LIMIT);
             goto finish;
         }
         if (has_bytes < blob_length) {
             RNP_LOG("Blob have size %" PRIu32 " bytes but file contains only %zu bytes",
                     blob_length,
                     has_bytes);
             goto finish;
         }
         blob = (kbx_blob_t **) list_append(&key_store->blobs, NULL, sizeof(*blob));
         if (!blob) {
             RNP_LOG("alloc failed");
             goto finish;
         }
 
         *blob = rnp_key_store_kbx_parse_blob(buf, blob_length);
         if (!*blob) {
             list_remove((list_item *) blob);
             goto finish;
         }
 
         if ((*blob)->type == KBX_PGP_BLOB) {
             pgp_source_t blsrc = {};
             // parse keyblock if it existed
             pgp_blob = (kbx_pgp_blob_t *) *blob;
 
-            if (pgp_blob->keyblock_length == 0) {
+            if (!pgp_blob->keyblock_length) {
                 RNP_LOG("PGP blob have zero size");
                 goto finish;
             }
 
             if (init_mem_src(&blsrc,
                              (*blob)->image + pgp_blob->keyblock_offset,
                              pgp_blob->keyblock_length,
                              false)) {
                 RNP_LOG("memory src allocation failed");
                 goto finish;
             }
 
             if (rnp_key_store_pgp_read_from_src(key_store, &blsrc)) {
                 src_close(&blsrc);
                 goto finish;
             }
             src_close(&blsrc);
         }
 
         has_bytes -= blob_length;
         buf += blob_length;
     }
 
     res = true;
diff --git a/src/tests/data/test_fuzz_keyring_kbx/crash-b894a2f79f7d38a16ae0ee8d74972336aa3f5798 b/src/tests/data/test_fuzz_keyring_kbx/crash-b894a2f79f7d38a16ae0ee8d74972336aa3f5798
new file mode 100644
index 00000000..95885af4
Binary files /dev/null and b/src/tests/data/test_fuzz_keyring_kbx/crash-b894a2f79f7d38a16ae0ee8d74972336aa3f5798 differ
diff --git a/src/tests/fuzz_keyring_kbx.cpp b/src/tests/fuzz_keyring_kbx.cpp
index 8540dea3..d0cb33fc 100644
--- a/src/tests/fuzz_keyring_kbx.cpp
+++ b/src/tests/fuzz_keyring_kbx.cpp
@@ -35,10 +35,14 @@ extern "C" int keyring_kbx_LLVMFuzzerTestOneInput(const uint8_t *data, size_t si
 TEST_F(rnp_tests, test_fuzz_keyring_kbx)
 {
     auto data = file_to_vec(DATA_PATH "leak-52c65c00b53997178f4cd9defa0343573ea8dda6");
     assert_int_equal(keyring_kbx_LLVMFuzzerTestOneInput(data.data(), data.size()), 0);
 
     /* Issue 25386 in oss-fuzz: rnp:fuzz_keyring_kbx: Heap-buffer-overflow in
      * rnp_key_store_kbx_from_src */
     data = file_to_vec(DATA_PATH "crash-5526a2e13255018c857ce493c28ce7108b8b2987");
     assert_int_equal(keyring_kbx_LLVMFuzzerTestOneInput(data.data(), data.size()), 0);
+
+    /* Issue 25388 in oss-fuzz: rnp:fuzz_keyring_kbx: Heap-buffer-overflow in mem_src_read */
+    data = file_to_vec(DATA_PATH "crash-b894a2f79f7d38a16ae0ee8d74972336aa3f5798");
+    assert_int_equal(keyring_kbx_LLVMFuzzerTestOneInput(data.data(), data.size()), 0);
 }
