commit 8f4d5c98ec75a73bc57e932cc1a23f05dd7e82ae
Author: Alan Thomas <athomas@thinkspatial.com.au>
Date:   Fri Dec 15 13:23:04 2017 +0000

    DXF: Fix use-after-free in block insertion code. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=4652 and https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=4653. Credit to OSS-Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@41039 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/ogr/ogrsf_frmts/dxf/ogrdxflayer.cpp b/gdal/ogr/ogrsf_frmts/dxf/ogrdxflayer.cpp
index 0aedeb7e18..738038a9be 100644
--- a/gdal/ogr/ogrsf_frmts/dxf/ogrdxflayer.cpp
+++ b/gdal/ogr/ogrsf_frmts/dxf/ogrdxflayer.cpp
@@ -3148,74 +3148,75 @@ OGRDXFFeature *OGRDXFLayer::TranslateINSERT()
 void OGRDXFLayer::TranslateINSERTCore(
     OGRDXFFeature* const poTemplateFeature, const CPLString& osBlockName,
     OGRDXFInsertTransformer oTransformer, const double dfExtraXOffset,
     const double dfExtraYOffset, char** const papszAttribs,
     const std::vector<std::unique_ptr<OGRDXFFeature>>& apoAttribs )
 {
     OGRDXFFeature* poFeature = poTemplateFeature->CloneDXFFeature();
 
     oTransformer.dfXOffset += dfExtraXOffset;
     oTransformer.dfYOffset += dfExtraYOffset;
 
     // If we are not inlining blocks, just insert a point that refers
     // to this block
     if( !poDS->InlineBlocks() )
     {
         poFeature = InsertBlockReference( osBlockName, oTransformer,
             poFeature );
 
         if( papszAttribs )
             poFeature->SetField( "BlockAttributes", papszAttribs );
 
         apoPendingFeatures.push( poFeature );
     }
     // Otherwise, try inlining the contents of this block
     else
     {
         std::queue<OGRDXFFeature *> apoExtraFeatures;
         try
         {
             poFeature = InsertBlockInline( osBlockName,
                 oTransformer, poFeature, apoExtraFeatures,
                 true, poDS->ShouldMergeBlockGeometries() );
         }
         catch( const std::invalid_argument& )
         {
             // Block doesn't exist
             delete poFeature;
+            return;
         }
 
         if( poFeature )
             apoPendingFeatures.push( poFeature );
 
         while( !apoExtraFeatures.empty() )
         {
             apoPendingFeatures.push( apoExtraFeatures.front() );
             apoExtraFeatures.pop();
         }
 
         // Append the attribute features to the pending feature stack
         if( !apoAttribs.empty() )
         {
             OGRDXFInsertTransformer oAttribTransformer;
             oAttribTransformer.dfXOffset = dfExtraXOffset;
             oAttribTransformer.dfYOffset = dfExtraYOffset;
 
             for( auto oIt = apoAttribs.begin(); oIt != apoAttribs.end(); ++oIt )
             {
                 OGRDXFFeature* poAttribFeature = (*oIt)->CloneDXFFeature();
 
                 if( poAttribFeature->GetGeometryRef() )
                 {
                     poAttribFeature->GetGeometryRef()->transform(
                         &oAttribTransformer );
                 }
 
                 apoPendingFeatures.push( poAttribFeature );
             }
         }
     }
 }
 
 /************************************************************************/
 /*                      GetNextUnfilteredFeature()                      */
 /************************************************************************/
