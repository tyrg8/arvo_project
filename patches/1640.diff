commit 0081a51a3df7ec30da22402fe878be61790ab721
Author: Nikos Mavrogiannopoulos <nmav@gnutls.org>
Date:   Thu Jun 8 15:03:17 2017 +0200

    nettle: use older GMP macros for mpz_mod_2exp and mpz_div_2exp
    
    These ensure that compilation will succeed even when building with gmp-mini.
    
    Signed-off-by: Nikos Mavrogiannopoulos <nmav@redhat.com>

diff --git a/lib/nettle/int/dsa-keygen-fips186.c b/lib/nettle/int/dsa-keygen-fips186.c
index 0fc78d925..7328f7761 100644
--- a/lib/nettle/int/dsa-keygen-fips186.c
+++ b/lib/nettle/int/dsa-keygen-fips186.c
@@ -67,189 +67,189 @@ int
 _dsa_generate_dss_pq(struct dsa_params *params,
 		     struct dss_params_validation_seeds *cert,
 		     unsigned seed_length, void *seed,
 		     void *progress_ctx, nettle_progress_func * progress,
 		     unsigned p_bits /* = L */ , unsigned q_bits /* = N */ )
 {
 	mpz_t r, p0, t, z, s, tmp, dp0;
 	int ret;
 	unsigned iterations, old_counter, i;
 	uint8_t *storage = NULL;
 	unsigned storage_length = 0;
 
 	ret = _dsa_check_qp_sizes(q_bits, p_bits, 1);
 	if (ret == 0) {
 		return 0;
 	}
 
 	if (seed_length < q_bits / 8) {
 		_gnutls_debug_log("Seed length must be larger than %d bytes (it is %d)\n", q_bits/8, seed_length);
 		return 0;
 	}
 
 	mpz_init(p0);
 	mpz_init(dp0);
 	mpz_init(r);
 	mpz_init(t);
 	mpz_init(z);
 	mpz_init(s);
 	mpz_init(tmp);
 
 	/* firstseed < 2^(N-1) */
 	mpz_set_ui(r, 1);
 	mpz_mul_2exp(r, r, q_bits - 1);
 
 	nettle_mpz_set_str_256_u(s, seed_length, seed);
 	if (mpz_cmp(s, r) < 0) {
 		goto fail;
 	}
 
 	cert->qseed_length = sizeof(cert->qseed);
 	cert->pseed_length = sizeof(cert->pseed);
 
 	ret = st_provable_prime(params->q,
 				&cert->qseed_length, cert->qseed,
 				&cert->qgen_counter,
 				q_bits,
 				seed_length, seed, progress_ctx, progress);
 	if (ret == 0) {
 		goto fail;
 	}
 
 	if (progress)
 		progress(progress_ctx, 'q');
 
 	ret = st_provable_prime(p0,
 				&cert->pseed_length, cert->pseed,
 				&cert->pgen_counter,
 				1 + div_ceil(p_bits, 2),
 				cert->qseed_length, cert->qseed,
 				progress_ctx, progress);
 	if (ret == 0) {
 		goto fail;
 	}
 
 	iterations = div_ceil(p_bits, DIGEST_SIZE*8);
 	old_counter = cert->pgen_counter;
 
 	if (iterations > 0) {
 		storage_length = iterations * DIGEST_SIZE;
 		storage = malloc(storage_length);
 		if (storage == NULL) {
 			goto fail;
 		}
 
 		nettle_mpz_set_str_256_u(s, cert->pseed_length, cert->pseed);
 		for (i = 0; i < iterations; i++) {
 			cert->pseed_length = nettle_mpz_sizeinbase_256_u(s);
 			nettle_mpz_get_str_256(cert->pseed_length, cert->pseed, s);
 
 			hash(&storage[(iterations - i - 1) * DIGEST_SIZE],
 			     cert->pseed_length, cert->pseed);
 			mpz_add_ui(s, s, 1);
 		}
 
 		/* x = 2^(p_bits-1) + (x mod 2^(p_bits-1)) */
 		nettle_mpz_set_str_256_u(tmp, storage_length, storage);
 	}
 
 	mpz_set_ui(r, 1);
 	mpz_mul_2exp(r, r, p_bits - 1);
 
-	mpz_mod_2exp(tmp, tmp, p_bits - 1);
+	mpz_fdiv_r_2exp(tmp, tmp, p_bits - 1);
 	mpz_add(tmp, tmp, r);
 
 	/* Generate candidate prime p in [2^(bits-1), 2^bits] */
 
 	/* t = u[x/2c0] */
 	mpz_mul_2exp(dp0, p0, 1);	/* dp0 = 2*p0 */
 	mpz_mul(dp0, dp0, params->q);	/* dp0 = 2*p0*q */
 
 	mpz_cdiv_q(t, tmp, dp0);
 
  retry:
 	/* c = 2p0*q*t + 1 */
 	mpz_mul(params->p, dp0, t);
 	mpz_add_ui(params->p, params->p, 1);
 
 	if (mpz_sizeinbase(params->p, 2) > p_bits) {
 		/* t = 2^(bits-1)/2qp0 */
 		mpz_set_ui(tmp, 1);
 		mpz_mul_2exp(tmp, tmp, p_bits - 1);
 		mpz_cdiv_q(t, tmp, dp0);
 
 		/* p = t* 2tq p0 + 1 */
 		mpz_mul(params->p, dp0, t);
 		mpz_add_ui(params->p, params->p, 1);
 	}
 
 	cert->pgen_counter++;
 
 	mpz_set_ui(r, 0);
 
 	if (iterations > 0) {
 		for (i = 0; i < iterations; i++) {
 			cert->pseed_length = nettle_mpz_sizeinbase_256_u(s);
 			nettle_mpz_get_str_256(cert->pseed_length, cert->pseed, s);
 
 			hash(&storage[(iterations - i - 1) * DIGEST_SIZE],
 			     cert->pseed_length, cert->pseed);
 			mpz_add_ui(s, s, 1);
 		}
 
 		/* r = a */
 		nettle_mpz_set_str_256_u(r, storage_length, storage);
 	}
 
 	cert->pseed_length = nettle_mpz_sizeinbase_256_u(s);
 	nettle_mpz_get_str_256(cert->pseed_length, cert->pseed, s);
 
 	/* a = 2 + (a mod (p-3)) */
 	mpz_sub_ui(tmp, params->p, 3);	/* c is too large to worry about negatives */
 	mpz_mod(r, r, tmp);
 	mpz_add_ui(r, r, 2);
 
 	/* z = a^(2tq) mod p */
 	mpz_mul_2exp(tmp, t, 1);	/* tmp = 2t */
 	mpz_mul(tmp, tmp, params->q);	/* tmp = 2tq */
 	mpz_powm(z, r, tmp, params->p);
 
 	mpz_sub_ui(tmp, z, 1);
 
 	mpz_gcd(tmp, tmp, params->p);
 	if (mpz_cmp_ui(tmp, 1) == 0) {
 		mpz_powm(tmp, z, p0, params->p);
 		if (mpz_cmp_ui(tmp, 1) == 0) {
 			goto success;
 		}
 	}
 
 	if (progress)
 		progress(progress_ctx, 'x');
 
 	if (cert->pgen_counter >= (4 * p_bits + old_counter))
 		return 0;
 
 	mpz_add_ui(t, t, 1);
 	goto retry;
 
  success:
 	if (progress)
 		progress(progress_ctx, 'p');
 
 	ret = 1;
 	goto finish;
 
  fail:
 	ret = 0;
 
  finish:
 	mpz_clear(dp0);
 	mpz_clear(p0);
 	mpz_clear(tmp);
 	mpz_clear(t);
 	mpz_clear(z);
 	mpz_clear(s);
 	mpz_clear(r);
 	free(storage);
 	return ret;
 }
diff --git a/lib/nettle/int/provable-prime.c b/lib/nettle/int/provable-prime.c
index e4a4325dc..23e75c144 100644
--- a/lib/nettle/int/provable-prime.c
+++ b/lib/nettle/int/provable-prime.c
@@ -1120,188 +1120,188 @@ int
 st_provable_prime(mpz_t p,
 		  unsigned *prime_seed_length, void *prime_seed,
 		  unsigned *prime_gen_counter,
 		  unsigned bits,
 		  unsigned seed_length, const void *seed,
 		  void *progress_ctx, nettle_progress_func * progress)
 {
 	unsigned gen_counter;
 	unsigned tseed_length;
 	uint8_t tseed[MAX_PVP_SEED_SIZE+1];
 	int ret;
 	unsigned pseed_length, iterations;
 	uint8_t pseed[seed_length + 2];
 	unsigned old_counter, i;
 	mpz_t s, tmp, r, dc0, c0, c, t, z;
 	uint8_t *storage = NULL;
 	unsigned storage_length = 0;
 
 	if (bits < 33) {
 		return st_provable_prime_small(p, prime_seed_length, prime_seed,
 					       prime_gen_counter, bits,
 					       seed_length, seed, progress_ctx,
 					       progress);
 	}
 
 	mpz_init(s);
 	mpz_init(tmp);
 	mpz_init(r);
 	mpz_init(c);
 	mpz_init(z);
 	mpz_init(t);
 	mpz_init(c0);
 	mpz_init(dc0);
 
 	pseed_length = sizeof(pseed);
 	ret = st_provable_prime(c0, &pseed_length, pseed, &gen_counter,
 				1+div_ceil(bits, 2), seed_length, seed,
 				progress_ctx, progress);
 	if (ret == 0)
 		goto fail;
 
 	nettle_mpz_set_str_256_u(s, pseed_length, pseed);
 
 	/* the spec says to remove 1 here */
 	iterations = div_ceil(bits, DIGEST_SIZE * 8);
 	old_counter = gen_counter;
 
 	mpz_set_ui(tmp, 0);	/* x = 0 */
 	if (iterations > 0) {
 		storage_length = iterations * DIGEST_SIZE;
 
 		storage = malloc(storage_length);
 		if (storage == NULL)
 			goto fail;
 
 		for (i = 0; i < iterations; i++) {
 			tseed_length = mpz_seed_sizeinbase_256_u(s, pseed_length);
 			if (tseed_length > sizeof(tseed))
 				goto fail;
 			nettle_mpz_get_str_256(tseed_length, tseed, s);
 
 			hash(&storage
 			     [(iterations - i - 1) * DIGEST_SIZE],
 			     tseed_length, tseed);
 			mpz_add_ui(s, s, 1);
 		}
 
 		nettle_mpz_set_str_256_u(tmp, storage_length, storage);
 	}
 
 	/* tmp = 2^(bits-1) + (tmp mod 2^(bits-1)) */
 	mpz_set_ui(r, 1);
 	mpz_mul_2exp(r, r, bits - 1);	/* r = 2^(bits-1) */
 
-	mpz_mod_2exp(tmp, tmp, bits - 1);
+	mpz_fdiv_r_2exp(tmp, tmp, bits - 1);
 	mpz_add(tmp, tmp, r);	/* tmp = x */
 
 	/* Generate candidate prime c in [2^(bits-1), 2^bits] */
 
 	/* t = u[x/2c0] */
 	mpz_mul_2exp(dc0, c0, 1);	/* dc0 = 2*c0 */
 	mpz_cdiv_q(t, tmp, dc0);
 
  retry:
 	/* c = t*(2c0) + 1 */
 	mpz_mul(c, dc0, t);
 	mpz_add_ui(c, c, 1);
 
 	mpz_set_ui(r, 1);
 	mpz_mul_2exp(r, r, bits);	/* r = 2^(bits) */
 
 	/* if 2tc0+1 > 2^bits */
 	if (mpz_cmp(c, r) > 0) {
 		/* t = 2^(bits-1)/2c0 */
 
-		mpz_div_2exp(r, r, 1); /* r = 2^(bits-1) */
+		mpz_fdiv_q_2exp(r, r, 1); /* r = 2^(bits-1) */
 		mpz_cdiv_q(t, r, dc0);
 
 		/* c = t* 2c0 + 1 */
 		mpz_mul(c, dc0, t);
 		mpz_add_ui(c, c, 1);
 	}
 
 	gen_counter++;
 
 	mpz_set_ui(r, 0); /* a = 0 */
 	if (iterations > 0) {
 		for (i = 0; i < iterations; i++) {
 			tseed_length = mpz_seed_sizeinbase_256_u(s, pseed_length);
 			if (tseed_length > sizeof(tseed))
 				goto fail;
 
 			nettle_mpz_get_str_256(tseed_length, tseed, s);
 
 			hash(&storage
 			     [(iterations - i - 1) * DIGEST_SIZE],
 			     tseed_length, tseed);
 			mpz_add_ui(s, s, 1);
 		}
 
 		/* r = a */
 		nettle_mpz_set_str_256_u(r, storage_length, storage);
 	}
 
 	/* a = 2 + (a mod (c-3)) */
 	mpz_sub_ui(tmp, c, 3);	/* c is too large to worry about negatives */
 	mpz_mod(r, r, tmp);
 	mpz_add_ui(r, r, 2);
 
 	/* z = a^(2t) mod c */
 	mpz_mul_2exp(tmp, t, 1); /* tmp = 2t */
 	mpz_powm(z, r, tmp, c);
 
 	mpz_sub_ui(tmp, z, 1);
 
 	mpz_gcd(r, tmp, c);
 
 	if (mpz_cmp_ui(r, 1) == 0) {
 		mpz_powm(tmp, z, c0, c);
 		if (mpz_cmp_ui(tmp, 1) == 0) {
 			mpz_set(p, c);
 
 			if (prime_seed != NULL) {
 				tseed_length = mpz_seed_sizeinbase_256_u(s, pseed_length);
 				if (*prime_seed_length < tseed_length)
 					goto fail;
 
 				nettle_mpz_get_str_256(tseed_length,
 						       prime_seed, s);
 				*prime_seed_length = tseed_length;
 			}
 
 			if (prime_gen_counter)
 				*prime_gen_counter = gen_counter;
 
 			goto success;
 		}
 	}
 
 	if (progress)
 		progress(progress_ctx, 'x');
 
 	if (gen_counter >= (4 * bits + old_counter)) {
 		goto fail;
 	}
 
 	mpz_add_ui(t, t, 1);
 	goto retry;
 
  success:
 	ret = 1;
 	goto finish;
 
  fail:
 	ret = 0;
 
  finish:
 	mpz_clear(c0);
 	mpz_clear(dc0);
 	mpz_clear(r);
 	mpz_clear(s);
 	mpz_clear(z);
 	mpz_clear(t);
 	mpz_clear(tmp);
 	mpz_clear(c);
 	free(storage);
 	return ret;
 }
