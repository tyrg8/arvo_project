commit 80adbb255c24e278425cb66878e7209258abb2b0
Author: seladb <pcapplusplus@gmail.com>
Date:   Tue Jun 16 05:58:41 2020 -0400

    Bugfixes 22636, 22831 in oss-fuzz: IPv6 extension parsing and first layer length check

diff --git a/Packet++/src/IPv6Layer.cpp b/Packet++/src/IPv6Layer.cpp
index 6aa72e3c..963bc078 100644
--- a/Packet++/src/IPv6Layer.cpp
+++ b/Packet++/src/IPv6Layer.cpp
@@ -79,65 +79,65 @@ IPv6Layer& IPv6Layer::operator=(const IPv6Layer& other)
 void IPv6Layer::parseExtensions()
 {
 	uint8_t nextHdr = getIPv6Header()->nextHeader;
 	IPv6Extension* curExt = NULL;
 
 	size_t offset = sizeof(ip6_hdr);
 
-	while (offset <= m_DataLen )
+	while (offset <= m_DataLen - 2*sizeof(uint8_t)) // 2*sizeof(uint8_t) is the min len for IPv6 extensions
 	{
 		IPv6Extension* newExt = NULL;
 
 		switch (nextHdr)
 		{
 		case PACKETPP_IPPROTO_FRAGMENT:
 		{
 			newExt = new IPv6FragmentationHeader(this, offset);
 			break;
 		}
 		case PACKETPP_IPPROTO_HOPOPTS:
 		{
 			newExt = new IPv6HopByHopHeader(this, offset);
 			break;
 		}
 		case PACKETPP_IPPROTO_DSTOPTS:
 		{
 			newExt = new IPv6DestinationHeader(this, offset);
 			break;
 		}
 		case PACKETPP_IPPROTO_ROUTING:
 		{
 			newExt = new IPv6RoutingHeader(this, offset);
 			break;
 		}
 		case PACKETPP_IPPROTO_AH:
 		{
 			newExt = new IPv6AuthenticationHeader(this, offset);
 			break;
 		}
 		default:
 		{
 			break;
 		}
 		}
 
 		if (newExt == NULL)
 			break;
 
 		if (m_FirstExtension == NULL)
 		{
 			m_FirstExtension = newExt;
 			curExt = m_FirstExtension;
 		}
 		else
 		{
 			curExt->setNextHeader(newExt);
 			curExt = curExt->getNextHeader();
 		}
 
 		offset += newExt->getExtensionLen();
 		nextHdr = newExt->getBaseHeader()->nextHeader;
 		m_ExtensionsLen += newExt->getExtensionLen();
 	}
 
 	m_LastExtension = curExt;
 }
diff --git a/Packet++/src/Packet.cpp b/Packet++/src/Packet.cpp
index ba16e7b4..4e16a1d3 100644
--- a/Packet++/src/Packet.cpp
+++ b/Packet++/src/Packet.cpp
@@ -679,61 +679,70 @@ std::string Packet::printPacketInfo(bool timeAsLocalTime) const
 Layer* Packet::createFirstLayer(LinkLayerType linkType)
 {
 	size_t rawDataLen = (size_t)m_RawPacket->getRawDataLen();
 	if (rawDataLen == 0)
 		return NULL;
 
 	const uint8_t* rawData = m_RawPacket->getRawData();
 
 	if (linkType == LINKTYPE_ETHERNET)
 	{
 		// In order to distinguish between Ethernet II and IEEE 802.3 Ethernet the common method is
 		// to check the length field. In IEEE 802.3 Ethernet the length value should be equal or 
 		// less than 0x5DC which corresponds to 1500 bytes. If the value is larger than 0x5DC
 		// it means the value is an Ether Type which belongs to Ethernet II.
 		// You can read more in this link:
 		// https://www.ibm.com/support/pages/ethernet-version-2-versus-ieee-8023-ethernet
 		if (rawDataLen >= sizeof(ether_header))
 		{
 			uint16_t ethTypeOrLength = be16toh(*(uint16_t*)(rawData + 12));
 			if (ethTypeOrLength <= (uint16_t)0x5dc && ethTypeOrLength != 0)
 			{
 				return new EthDot3Layer((uint8_t*)rawData, rawDataLen, this);
 			}
+			else
+			{
+				return new EthLayer((uint8_t*)rawData, rawDataLen, this);
+			}	
+		}
+		else // rawDataLen is too small for Eth packet
+		{
+			return new PayloadLayer((uint8_t*)rawData, rawDataLen, NULL, this);
 		}
-		
-		return new EthLayer((uint8_t*)rawData, rawDataLen, this);
 	}
 	else if (linkType == LINKTYPE_LINUX_SLL)
 	{
 		return new SllLayer((uint8_t*)rawData, rawDataLen, this);
 	}
 	else if (linkType == LINKTYPE_NULL)
 	{
-		return new NullLoopbackLayer((uint8_t*)rawData, rawDataLen, this);
+		if (rawDataLen >= sizeof(uint32_t))
+			return new NullLoopbackLayer((uint8_t*)rawData, rawDataLen, this);
+		else // rawDataLen is too small fir Null/Loopback
+			return new PayloadLayer((uint8_t*)rawData, rawDataLen, NULL, this);
 	}
 	else if (linkType == LINKTYPE_RAW || linkType == LINKTYPE_DLT_RAW1 || linkType == LINKTYPE_DLT_RAW2)
 	{
 		uint8_t ipVer = rawData[0] & 0xf0;
 		if (ipVer == 0x40)
 		{
 			return IPv4Layer::isDataValid(rawData, rawDataLen)
 				? static_cast<Layer*>(new IPv4Layer((uint8_t*)rawData, rawDataLen, NULL, this))
 				: static_cast<Layer*>(new PayloadLayer((uint8_t*)rawData, rawDataLen, NULL, this));
 		}
 		else if (ipVer == 0x60)
 		{
 			return IPv6Layer::isDataValid(rawData, rawDataLen)
 				? static_cast<Layer*>(new IPv6Layer((uint8_t*)rawData, rawDataLen, NULL, this))
 				: static_cast<Layer*>(new PayloadLayer((uint8_t*)rawData, rawDataLen, NULL, this));
 		}
 		else
 		{
 			return new PayloadLayer((uint8_t*)rawData, rawDataLen, NULL, this);
 		}
 	}
 
 	// unknown link type
-	return new EthLayer((uint8_t*)rawData, rawDataLen, this);
+	return new PayloadLayer((uint8_t*)rawData, rawDataLen, NULL, this);
 }
 
 std::string Packet::toString(bool timeAsLocalTime)
diff --git a/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5696447256461312 b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5696447256461312
new file mode 100644
index 00000000..31009705
Binary files /dev/null and b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5696447256461312 differ
diff --git a/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5757531338309632 b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5757531338309632
new file mode 100644
index 00000000..9687ffa0
Binary files /dev/null and b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5757531338309632 differ
