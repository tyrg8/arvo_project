commit e4be55dc28479a0ee103e5d65cd00c441feb5ff2
Author: Kevin Lubick <kjlubick@google.com>
Date:   Fri Mar 30 15:05:13 2018 -0400

    Add Encoder fuzzers
    
    This also includes a helper "fuzzer" for making a corpus.
    Point it at an image or folder of images and it will
    decode those images and write the SkPixmap's bytes to
    disk, such that the fuzzer will be able to read in
    those bytes as if it had decoded the image (or gotten
    it from another source).
    
    Bug: skia:
    Change-Id: Iaf223a39078f2b62908fb47929add5d63f22d973
    Reviewed-on: https://skia-review.googlesource.com/117367
    Reviewed-by: Leon Scroggins <scroggo@google.com>
    Commit-Queue: Kevin Lubick <kjlubick@google.com>

diff --git a/BUILD.gn b/BUILD.gn
index 647bf5b60b..6b34fcd1a0 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -954,1203 +954,1204 @@ component("skia") {
 # Targets guarded by skia_enable_tools may use //third_party freely.
 if (skia_enable_tools) {
   # Used by gn_to_bp.py to list our public include dirs.
   source_set("public") {
     configs += [ ":skia_public" ]
   }
 
   config("skia.h_config") {
     include_dirs = [ "$target_gen_dir" ]
     if (skia_use_vulkan) {
       # So we can get the header which includes vulkan
       include_dirs += [ "tools/gpu/vk" ]
     }
   }
   action("skia.h") {
     public_configs = [ ":skia.h_config" ]
     skia_h = "$target_gen_dir/skia.h"
     script = "gn/find_headers.py"
     args = [ rebase_path(skia_h, root_build_dir) ] +
            rebase_path(skia_public_includes)
     depfile = "$skia_h.deps"
     outputs = [
       skia_h,
     ]
   }
 
   if (skia_enable_gpu && target_cpu == "x64") {
     executable("fiddle") {
       libs = []
       sources = [
         "tools/fiddle/draw.cpp",
         "tools/fiddle/fiddle_main.cpp",
       ]
 
       if (skia_use_egl) {
         sources += [ "tools/fiddle/egl_context.cpp" ]
       } else {
         sources += [ "tools/fiddle/null_context.cpp" ]
       }
       testonly = true
       deps = [
         ":flags",
         ":gpu_tool_utils",
         ":skia",
         ":skia.h",
       ]
     }
   }
 
   if (skia_enable_gpu) {
     source_set("public_headers_warnings_check") {
       sources = [
         "tools/public_headers_warnings_check.cpp",
       ]
       configs -= [ "//gn:warnings_except_public_headers" ]
       deps = [
         ":skia",
         ":skia.h",
       ]
     }
   }
 
   template("test_lib") {
     config(target_name + "_config") {
       include_dirs = invoker.public_include_dirs
       if (defined(invoker.public_defines)) {
         defines = invoker.public_defines
       }
     }
     source_set(target_name) {
       forward_variables_from(invoker, "*", [ "public_include_dirs" ])
       public_configs = [
         ":" + target_name + "_config",
         ":skia_private",
       ]
 
       if (!defined(deps)) {
         deps = []
       }
       deps += [ ":skia" ]
       testonly = true
     }
   }
 
   template("test_app") {
     if (is_ios) {
       app_name = target_name
       gen_path = target_gen_dir
 
       action("${app_name}_generate_info_plist") {
         script = "//gn/gen_plist_ios.py"
         outputs = [
           "$gen_path/${app_name}_Info.plist",
         ]
         args = [ rebase_path("$gen_path/$app_name", root_build_dir) ]
       }
 
       bundle_data("${app_name}_bundle_info_plist") {
         public_deps = [
           ":${app_name}_generate_info_plist",
         ]
         sources = [
           "$gen_path/${app_name}_Info.plist",
         ]
         outputs = [
           "{{bundle_root_dir}}/Info.plist",
         ]
       }
 
       bundle_ios_data =
           defined(invoker.bundle_ios_data) && invoker.bundle_ios_data
 
       if (bundle_ios_data) {
         has_skps =
             "True" == exec_script("//gn/checkdir.py",
                                   [ rebase_path("skps", root_build_dir) ],
                                   "trim string")
         bundle_data("${app_name}_bundle_resources") {
           sources = [
             "resources",
           ]
           outputs = [
             # iOS reserves the folders 'Resources' and 'resources' so store one level deeper
             "{{bundle_resources_dir}}/data/resources",
           ]
         }
 
         if (has_skps) {
           bundle_data("${app_name}_bundle_skps") {
             sources = [
               "skps",
             ]
             outputs = [
               # Store in same folder as resources
               "{{bundle_resources_dir}}/data/skps",
             ]
           }
         }
       }
 
       executable("${app_name}_generate_executable") {
         forward_variables_from(invoker,
                                "*",
                                [
                                  "output_name",
                                  "visibility",
                                  "is_shared_library",
                                ])
         configs += [ ":skia_private" ]
         testonly = true
         output_name = rebase_path("$gen_path/$app_name", root_build_dir)
       }
 
       bundle_data("${app_name}_bundle_executable") {
         public_deps = [
           ":${app_name}_generate_executable",
         ]
         sources = [
           "$gen_path/$app_name",
         ]
         outputs = [
           "{{bundle_executable_dir}}/$app_name",
         ]
         testonly = true
       }
 
       create_bundle("$app_name") {
         product_type = "com.apple.product-type.application"
         testonly = true
 
         bundle_root_dir = "${root_build_dir}/${target_name}.app"
         bundle_resources_dir = bundle_root_dir
         bundle_executable_dir = bundle_root_dir
         bundle_plugins_dir = bundle_root_dir + "/Plugins"
 
         deps = [
           ":${app_name}_bundle_executable",
           ":${app_name}_bundle_info_plist",
         ]
         if (bundle_ios_data) {
           deps += [ ":${app_name}_bundle_resources" ]
           if (has_skps) {
             deps += [ ":${app_name}_bundle_skps" ]
           }
         }
 
         # should only code sign when running on a device, not the simulator
         if (target_cpu != "x64") {
           code_signing_script = "//gn/codesign_ios.py"
           code_signing_sources = [ "$target_gen_dir/$app_name" ]
           code_signing_outputs = [
             "$bundle_root_dir/_CodeSignature/CodeResources",
             "$bundle_root_dir/embedded.mobileprovision",
           ]
           code_signing_args = [
             rebase_path("$bundle_root_dir", root_build_dir),
             skia_ios_identity,
             skia_ios_profile,
           ]
         }
       }
     } else {
       # !is_ios
 
       if (defined(invoker.is_shared_library) && invoker.is_shared_library) {
         shared_library("lib" + target_name) {
           forward_variables_from(invoker, "*", [ "is_shared_library" ])
           configs += [ ":skia_private" ]
           testonly = true
         }
       } else {
         _executable = target_name
         executable(_executable) {
           forward_variables_from(invoker, "*", [ "is_shared_library" ])
           configs += [ ":skia_private" ]
           testonly = true
         }
       }
       if (is_android && skia_android_serial != "" && defined(_executable)) {
         action("push_" + target_name) {
           script = "gn/push_to_android.py"
           deps = [
             ":" + _executable,
           ]
           _stamp = "$target_gen_dir/$_executable.pushed_$skia_android_serial"
           outputs = [
             _stamp,
           ]
           args = [
             rebase_path("$root_build_dir/$_executable"),
             skia_android_serial,
             rebase_path(_stamp),
           ]
           testonly = true
         }
       }
     }
   }
 
   test_lib("gpu_tool_utils") {
     public_include_dirs = []
     if (skia_enable_gpu) {
       public_defines = []
       public_include_dirs += [ "tools/gpu" ]
 
       deps = []
       sources = [
         "tools/gpu/GrContextFactory.cpp",
         "tools/gpu/GrTest.cpp",
         "tools/gpu/ProxyUtils.cpp",
         "tools/gpu/TestContext.cpp",
         "tools/gpu/atlastext/GLTestAtlasTextRenderer.cpp",
         "tools/gpu/gl/GLTestContext.cpp",
         "tools/gpu/gl/command_buffer/GLTestContext_command_buffer.cpp",
         "tools/gpu/gl/debug/DebugGLTestContext.cpp",
         "tools/gpu/gl/debug/GrBufferObj.cpp",
         "tools/gpu/gl/debug/GrFrameBufferObj.cpp",
         "tools/gpu/gl/debug/GrProgramObj.cpp",
         "tools/gpu/gl/debug/GrShaderObj.cpp",
         "tools/gpu/gl/debug/GrTextureObj.cpp",
         "tools/gpu/gl/debug/GrTextureUnitObj.cpp",
         "tools/gpu/gl/null/NullGLTestContext.cpp",
         "tools/gpu/mock/MockTestContext.cpp",
       ]
       libs = []
 
       if (is_android || skia_use_egl) {
         sources += [ "tools/gpu/gl/egl/CreatePlatformGLTestContext_egl.cpp" ]
       } else if (is_ios) {
         sources += [ "tools/gpu/gl/iOS/CreatePlatformGLTestContext_iOS.mm" ]
         libs += [ "OpenGLES.framework" ]
       } else if (is_linux) {
         sources += [ "tools/gpu/gl/glx/CreatePlatformGLTestContext_glx.cpp" ]
         libs += [ "X11" ]
       } else if (is_mac) {
         sources += [ "tools/gpu/gl/mac/CreatePlatformGLTestContext_mac.cpp" ]
       } else if (is_win) {
         sources += [ "tools/gpu/gl/win/CreatePlatformGLTestContext_win.cpp" ]
         libs += [
           "Gdi32.lib",
           "OpenGL32.lib",
         ]
       }
 
       cflags_objcc = [ "-fobjc-arc" ]
 
       if (skia_use_angle) {
         deps += [ "//third_party/angle2" ]
         sources += [ "tools/gpu/gl/angle/GLTestContext_angle.cpp" ]
       }
       if (skia_use_vulkan) {
         sources += [ "tools/gpu/vk/VkTestContext.cpp" ]
         sources += [ "tools/gpu/vk/VkTestUtils.cpp" ]
       }
       if (skia_use_metal) {
         sources += [ "tools/gpu/mtl/MtlTestContext.mm" ]
       }
     }
   }
 
   test_lib("flags") {
     public_include_dirs = [ "tools/flags" ]
     sources = [
       "tools/flags/SkCommandLineFlags.cpp",
     ]
   }
   test_lib("common_flags") {
     public_include_dirs = [ "tools/flags" ]
     sources = [
       "tools/flags/SkCommonFlags.cpp",
       "tools/flags/SkCommonFlagsConfig.cpp",
     ]
     deps = [
       ":flags",
       ":gpu_tool_utils",
     ]
   }
 
   test_lib("tool_utils") {
     public_include_dirs = [
       "tools",
       "tools/debugger",
       "tools/fonts",
       "tools/timer",
       "tools/trace",
     ]
     sources = [
       "tools/AndroidSkDebugToStdOut.cpp",
       "tools/CrashHandler.cpp",
       "tools/LsanSuppressions.cpp",
       "tools/ProcStats.cpp",
       "tools/Resources.cpp",
       "tools/UrlDataManager.cpp",
       "tools/debugger/SkDebugCanvas.cpp",
       "tools/debugger/SkDrawCommand.cpp",
       "tools/debugger/SkJsonWriteBuffer.cpp",
       "tools/debugger/SkObjectParser.cpp",
       "tools/fonts/SkRandomScalerContext.cpp",
       "tools/fonts/SkTestFontMgr.cpp",
       "tools/fonts/SkTestFontMgr.h",
       "tools/fonts/SkTestSVGTypeface.cpp",
       "tools/fonts/SkTestSVGTypeface.h",
       "tools/fonts/SkTestTypeface.cpp",
       "tools/fonts/SkTestTypeface.h",
       "tools/fonts/sk_tool_utils_font.cpp",
       "tools/picture_utils.cpp",
       "tools/random_parse_path.cpp",
       "tools/sk_tool_utils.cpp",
       "tools/timer/Timer.cpp",
       "tools/trace/SkChromeTracingTracer.cpp",
       "tools/trace/SkChromeTracingTracer.h",
       "tools/trace/SkDebugfTracer.cpp",
       "tools/trace/SkDebugfTracer.h",
       "tools/trace/SkEventTracingPriv.cpp",
       "tools/trace/SkEventTracingPriv.h",
     ]
     libs = []
     if (is_ios) {
       sources += [ "tools/ios_utils.m" ]
       libs += [ "Foundation.framework" ]
     }
     deps = [
       ":common_flags",
       ":experimental_svg_model",
       ":flags",
       "//third_party/libpng",
     ]
     public_deps = [
       "//third_party/jsoncpp",
     ]
   }
 
   import("gn/gm.gni")
   test_lib("gm") {
     public_include_dirs = [ "gm" ]
     sources = gm_sources
     deps = [
       ":experimental_sksg",
       ":flags",
       ":gpu_tool_utils",
       ":skia",
       ":tool_utils",
     ]
   }
 
   import("gn/tests.gni")
   test_lib("tests") {
     public_include_dirs = [ "tests" ]
     sources = tests_sources + pathops_tests_sources
     if (!fontmgr_android_enabled) {
       sources -= [ "//tests/FontMgrAndroidParserTest.cpp" ]
     }
     deps = [
       ":experimental_sksg",
       ":experimental_svg_model",
       ":flags",
       ":skia",
       ":tool_utils",
       "//third_party/libpng",
       "//third_party/zlib",
     ]
     public_deps = [
       ":gpu_tool_utils",  # Test.h #includes headers from this target.
     ]
   }
 
   import("gn/bench.gni")
   test_lib("bench") {
     public_include_dirs = [ "bench" ]
     sources = bench_sources
     deps = [
       ":flags",
       ":gm",
       ":gpu_tool_utils",
       ":skia",
       ":tool_utils",
     ]
   }
 
   test_lib("experimental_skottie") {
     public_include_dirs = [ "experimental/skottie" ]
     include_dirs = [ "tools" ]
     sources = [
       "experimental/skottie/Skottie.cpp",
       "experimental/skottie/SkottieAdapter.cpp",
       "experimental/skottie/SkottieAnimator.cpp",
       "experimental/skottie/SkottieParser.cpp",
       "experimental/skottie/SkottieValue.cpp",
     ]
     deps = [
       ":experimental_sksg",
       ":skia",
       "//third_party/jsoncpp",
     ]
   }
 
   test_lib("experimental_svg_model") {
     public_include_dirs = []
     if (skia_use_expat) {
       public_include_dirs += [ "experimental/svg/model" ]
       sources = [
         "experimental/svg/model/SkSVGAttribute.cpp",
         "experimental/svg/model/SkSVGAttributeParser.cpp",
         "experimental/svg/model/SkSVGCircle.cpp",
         "experimental/svg/model/SkSVGClipPath.cpp",
         "experimental/svg/model/SkSVGContainer.cpp",
         "experimental/svg/model/SkSVGDOM.cpp",
         "experimental/svg/model/SkSVGEllipse.cpp",
         "experimental/svg/model/SkSVGGradient.cpp",
         "experimental/svg/model/SkSVGLine.cpp",
         "experimental/svg/model/SkSVGLinearGradient.cpp",
         "experimental/svg/model/SkSVGNode.cpp",
         "experimental/svg/model/SkSVGPath.cpp",
         "experimental/svg/model/SkSVGPattern.cpp",
         "experimental/svg/model/SkSVGPoly.cpp",
         "experimental/svg/model/SkSVGRadialGradient.cpp",
         "experimental/svg/model/SkSVGRect.cpp",
         "experimental/svg/model/SkSVGRenderContext.cpp",
         "experimental/svg/model/SkSVGSVG.cpp",
         "experimental/svg/model/SkSVGShape.cpp",
         "experimental/svg/model/SkSVGStop.cpp",
         "experimental/svg/model/SkSVGTransformableNode.cpp",
         "experimental/svg/model/SkSVGUse.cpp",
         "experimental/svg/model/SkSVGValue.cpp",
       ]
       deps = [
         ":skia",
         ":xml",
       ]
     }
   }
 
   test_lib("experimental_sksg") {
     public_include_dirs = [
       "experimental/sksg",
       "experimental/sksg/effects",
       "experimental/sksg/geometry",
       "experimental/sksg/paint",
     ]
     sources = [
       "experimental/sksg/SkSGDraw.cpp",
       "experimental/sksg/SkSGEffectNode.cpp",
       "experimental/sksg/SkSGGeometryNode.cpp",
       "experimental/sksg/SkSGGroup.cpp",
       "experimental/sksg/SkSGImage.cpp",
       "experimental/sksg/SkSGInvalidationController.cpp",
       "experimental/sksg/SkSGNode.cpp",
       "experimental/sksg/SkSGPaintNode.cpp",
       "experimental/sksg/SkSGRenderNode.cpp",
       "experimental/sksg/SkSGScene.cpp",
       "experimental/sksg/effects/SkSGClipEffect.cpp",
       "experimental/sksg/effects/SkSGMaskEffect.cpp",
       "experimental/sksg/effects/SkSGOpacityEffect.cpp",
       "experimental/sksg/effects/SkSGTransform.cpp",
       "experimental/sksg/geometry/SkSGGeometryTransform.cpp",
       "experimental/sksg/geometry/SkSGMerge.cpp",
       "experimental/sksg/geometry/SkSGPath.cpp",
       "experimental/sksg/geometry/SkSGPlane.cpp",
       "experimental/sksg/geometry/SkSGRect.cpp",
       "experimental/sksg/geometry/SkSGText.cpp",
       "experimental/sksg/geometry/SkSGTrimEffect.cpp",
       "experimental/sksg/paint/SkSGColor.cpp",
       "experimental/sksg/paint/SkSGGradient.cpp",
     ]
     deps = [
       ":skia",
     ]
   }
 
   if (target_cpu != "wasm") {
     test_lib("views") {
       public_include_dirs = [ "include/views" ]
       sources = [
         "src/views/SkEvent.cpp",
         "src/views/SkEventSink.cpp",
         "src/views/SkTouchGesture.cpp",
         "src/views/SkView.cpp",
       ]
     }
   }
 
   if (skia_use_lua) {
     test_lib("lua") {
       public_include_dirs = []
       sources = [
         "src/utils/SkLua.cpp",
         "src/utils/SkLuaCanvas.cpp",
       ]
       deps = [
         "//third_party/lua",
       ]
     }
 
     test_app("lua_app") {
       sources = [
         "tools/lua/lua_app.cpp",
       ]
       deps = [
         ":lua",
         ":skia",
         "//third_party/lua",
       ]
     }
 
     test_app("lua_pictures") {
       sources = [
         "tools/lua/lua_pictures.cpp",
       ]
       deps = [
         ":flags",
         ":lua",
         ":skia",
         ":tool_utils",
         "//third_party/lua",
       ]
     }
   }
 
   test_app("bookmaker") {
     sources = [
       "tools/bookmaker/bookmaker.cpp",
       "tools/bookmaker/cataloger.cpp",
       "tools/bookmaker/definition.cpp",
       "tools/bookmaker/fiddleParser.cpp",
       "tools/bookmaker/includeParser.cpp",
       "tools/bookmaker/includeWriter.cpp",
       "tools/bookmaker/mdOut.cpp",
       "tools/bookmaker/parserCommon.cpp",
       "tools/bookmaker/selfCheck.cpp",
       "tools/bookmaker/spellCheck.cpp",
     ]
     deps = [
       ":flags",
       ":skia",
       ":tool_utils",
       "//third_party/jsoncpp",
     ]
   }
 
   if (target_cpu != "wasm") {
     import("gn/samples.gni")
     test_lib("samples") {
       public_include_dirs = [ "samplecode" ]
       include_dirs = [ "experimental" ]
       sources = samples_sources
       deps = [
         ":experimental_sksg",
         ":experimental_svg_model",
         ":flags",
         ":gm",
         ":skshaper",
         ":tool_utils",
         ":views",
         ":xml",
       ]
 
       if (skia_use_lua) {
         sources += [ "samplecode/SampleLua.cpp" ]
         deps += [
           ":lua",
           "//third_party/lua",
         ]
       }
     }
     test_app("dm") {
       sources = [
         "dm/DM.cpp",
         "dm/DMGpuTestProcs.cpp",
         "dm/DMJsonWriter.cpp",
         "dm/DMSrcSink.cpp",
       ]
       include_dirs = [ "tests" ]
       deps = [
         ":common_flags",
         ":experimental_skottie",
         ":experimental_sksg",
         ":experimental_svg_model",
         ":flags",
         ":gm",
         ":gpu_tool_utils",
         ":skia",
         ":tests",
         ":tool_utils",
         "//third_party/jsoncpp",
         "//third_party/libpng",
       ]
     }
   }
 
   if (!is_win) {
     test_app("remote_demo") {
       sources = [
         "tools/remote_demo.cpp",
       ]
       deps = [
         ":skia",
       ]
     }
   }
 
   test_app("nanobench") {
     sources = [
       "bench/nanobench.cpp",
     ]
     deps = [
       ":bench",
       ":common_flags",
       ":experimental_sksg",
       ":experimental_svg_model",
       ":flags",
       ":gm",
       ":gpu_tool_utils",
       ":skia",
       ":tool_utils",
       "//third_party/jsoncpp",
     ]
   }
 
   test_app("skpinfo") {
     sources = [
       "tools/skpinfo.cpp",
     ]
     deps = [
       ":flags",
       ":skia",
     ]
   }
 
   if (skia_enable_gpu) {
     test_app("skpbench") {
       sources = [
         "tools/skpbench/skpbench.cpp",
       ]
       deps = [
         ":flags",
         ":gpu_tool_utils",
         ":skia",
         ":tool_utils",
       ]
     }
   }
 
   test_lib("skshaper") {
     public_include_dirs = [ "tools/shape" ]
     deps = [
       ":skia",
     ]
 
     if (target_cpu == "wasm") {
       sources = [
         "tools/shape/SkShaper_primitive.cpp",
       ]
     } else {
       sources = [
         "tools/shape/SkShaper_harfbuzz.cpp",
       ]
       deps += [
         "//third_party/harfbuzz",
         "//third_party/icu",
       ]
     }
   }
   test_app("sktexttopdf") {
     sources = [
       "tools/shape/using_skia_and_harfbuzz.cpp",
     ]
     deps = [
       ":skia",
       ":skshaper",
     ]
   }
 
   test_app("create_flutter_test_images") {
     sources = [
       "tools/create_flutter_test_images.cpp",
     ]
     deps = [
       ":skia",
       ":tool_utils",
     ]
   }
 
   test_app("create_test_font") {
     sources = [
       "tools/fonts/create_test_font.cpp",
     ]
     deps = [
       ":skia",
     ]
     assert_no_deps = [
       # tool_utils requires the output of this app.
       ":tool_utils",
     ]
   }
 
   test_app("create_test_font_color") {
     sources = [
       "tools/fonts/create_test_font_color.cpp",
     ]
     deps = [
       ":flags",
       ":skia",
       ":tool_utils",
     ]
   }
 
   test_app("get_images_from_skps") {
     sources = [
       "tools/get_images_from_skps.cpp",
     ]
     deps = [
       ":flags",
       ":skia",
       "//third_party/jsoncpp",
     ]
   }
 
   test_app("colorspaceinfo") {
     sources = [
       "tools/colorspaceinfo.cpp",
     ]
     deps = [
       ":flags",
       ":skia",
       ":tool_utils",
     ]
   }
 
   if (!is_ios && target_cpu != "wasm") {
     test_app("skiaserve") {
       sources = [
         "tools/skiaserve/Request.cpp",
         "tools/skiaserve/Response.cpp",
         "tools/skiaserve/skiaserve.cpp",
         "tools/skiaserve/urlhandlers/BreakHandler.cpp",
         "tools/skiaserve/urlhandlers/ClipAlphaHandler.cpp",
         "tools/skiaserve/urlhandlers/CmdHandler.cpp",
         "tools/skiaserve/urlhandlers/ColorModeHandler.cpp",
         "tools/skiaserve/urlhandlers/DataHandler.cpp",
         "tools/skiaserve/urlhandlers/DownloadHandler.cpp",
         "tools/skiaserve/urlhandlers/EnableGPUHandler.cpp",
         "tools/skiaserve/urlhandlers/ImgHandler.cpp",
         "tools/skiaserve/urlhandlers/InfoHandler.cpp",
         "tools/skiaserve/urlhandlers/OpBoundsHandler.cpp",
         "tools/skiaserve/urlhandlers/OpsHandler.cpp",
         "tools/skiaserve/urlhandlers/OverdrawHandler.cpp",
         "tools/skiaserve/urlhandlers/PostHandler.cpp",
         "tools/skiaserve/urlhandlers/QuitHandler.cpp",
         "tools/skiaserve/urlhandlers/RootHandler.cpp",
       ]
       deps = [
         ":flags",
         ":gpu_tool_utils",
         ":skia",
         ":tool_utils",
         "//third_party/jsoncpp",
         "//third_party/libmicrohttpd",
         "//third_party/libpng",
       ]
     }
   }
 
   test_app("fuzz") {
     include_dirs = [
       "tools",
       "tools/debugger",
     ]
     sources = [
       "fuzz/FuzzCanvas.cpp",
       "fuzz/FuzzCommon.cpp",
       "fuzz/FuzzDrawFunctions.cpp",
+      "fuzz/FuzzEncoders.cpp",
       "fuzz/FuzzGradients.cpp",
       "fuzz/FuzzParsePath.cpp",
       "fuzz/FuzzPathMeasure.cpp",
       "fuzz/FuzzPathop.cpp",
       "fuzz/fuzz.cpp",
       "fuzz/oss_fuzz/FuzzAnimatedImage.cpp",
       "fuzz/oss_fuzz/FuzzImage.cpp",
       "fuzz/oss_fuzz/FuzzImageFilterDeserialize.cpp",
       "fuzz/oss_fuzz/FuzzPathDeserialize.cpp",
       "fuzz/oss_fuzz/FuzzRegionDeserialize.cpp",
       "fuzz/oss_fuzz/FuzzRegionSetPath.cpp",
       "fuzz/oss_fuzz/FuzzTextBlobDeserialize.cpp",
       "tools/UrlDataManager.cpp",
       "tools/debugger/SkDebugCanvas.cpp",
       "tools/debugger/SkDrawCommand.cpp",
       "tools/debugger/SkJsonWriteBuffer.cpp",
       "tools/debugger/SkObjectParser.cpp",
       "tools/picture_utils.cpp",
     ]
     deps = [
       ":flags",
       ":gpu_tool_utils",
       ":skia",
       "//third_party/jsoncpp",
       "//third_party/libpng",
     ]
   }
 
   test_app("pathops_unittest") {
     sources = pathops_tests_sources + [
                 rebase_path("tests/skia_test.cpp"),
                 rebase_path("tests/Test.cpp"),
               ]
     deps = [
       ":flags",
       ":gpu_tool_utils",
       ":skia",
       ":tool_utils",
     ]
   }
 
   test_app("dump_record") {
     sources = [
       "tools/DumpRecord.cpp",
       "tools/dump_record.cpp",
     ]
     deps = [
       ":flags",
       ":skia",
     ]
   }
 
   test_app("skdiff") {
     sources = [
       "tools/skdiff/skdiff.cpp",
       "tools/skdiff/skdiff_html.cpp",
       "tools/skdiff/skdiff_main.cpp",
       "tools/skdiff/skdiff_utils.cpp",
     ]
     deps = [
       ":skia",
       ":tool_utils",
     ]
   }
 
   test_app("skp_parser") {
     sources = [
       "tools/skp_parser.cpp",
     ]
     deps = [
       ":skia",
       ":tool_utils",
       "//third_party/jsoncpp",
     ]
   }
 
   if (!is_win && skia_enable_gpu) {
     test_lib("skqp_lib") {
       public_include_dirs = [ "tools/skqp" ]
       defines =
           [ "SK_SKQP_GLOBAL_ERROR_TOLERANCE=$skia_skqp_global_error_tolerance" ]
       if (skia_skqp_enable_driver_correctness_workarounds) {
         defines += [ "SK_SKQP_ENABLE_DRIVER_CORRECTNESS_WORKAROUNDS" ]
       }
       sources = [
         "dm/DMGpuTestProcs.cpp",
         "tools/skqp/gm_knowledge.cpp",
         "tools/skqp/gm_runner.cpp",
       ]
       deps = [
         ":gm",
         ":gpu_tool_utils",
         ":skia",
         ":tests",
         ":tool_utils",
       ]
     }
     test_app("skqp") {
       sources = [
         "tools/skqp/skqp.cpp",
       ]
       deps = [
         ":skia",
         ":skqp_lib",
         ":tool_utils",
         "//third_party/googletest",
       ]
     }
   }
   if (is_android && skia_enable_gpu) {
     test_app("skqp_app") {
       is_shared_library = true
       sources = [
         "tools/skqp/jni/org_skia_skqp_SkQPRunner.cpp",
       ]
       deps = [
         ":skia",
         ":skqp_lib",
         ":tool_utils",
       ]
       libs = [ "android" ]
     }
   }
 
   test_app("list_gms") {
     sources = [
       "tools/list_gms.cpp",
     ]
     deps = [
       ":gm",
       ":skia",
     ]
   }
   test_app("list_gpu_unit_tests") {
     sources = [
       "dm/DMGpuTestProcs.cpp",
       "tools/list_gpu_unit_tests.cpp",
     ]
     deps = [
       ":skia",
       ":tests",
     ]
   }
 
   if (skia_enable_gpu) {
     test_lib("sk_app") {
       public_include_dirs = [ "tools/sk_app" ]
       sources = [
         "tools/sk_app/CommandSet.cpp",
         "tools/sk_app/GLWindowContext.cpp",
         "tools/sk_app/Window.cpp",
       ]
       libs = []
 
       if (is_android) {
         sources += [
           "tools/sk_app/android/GLWindowContext_android.cpp",
           "tools/sk_app/android/RasterWindowContext_android.cpp",
           "tools/sk_app/android/Window_android.cpp",
           "tools/sk_app/android/main_android.cpp",
           "tools/sk_app/android/surface_glue_android.cpp",
         ]
         libs += [ "android" ]
       } else if (is_linux) {
         sources += [
           "tools/sk_app/unix/GLWindowContext_unix.cpp",
           "tools/sk_app/unix/RasterWindowContext_unix.cpp",
           "tools/sk_app/unix/Window_unix.cpp",
           "tools/sk_app/unix/keysym2ucs.c",
           "tools/sk_app/unix/main_unix.cpp",
         ]
         libs += [
           "GL",
           "X11",
         ]
       } else if (is_win) {
         sources += [
           "tools/sk_app/win/GLWindowContext_win.cpp",
           "tools/sk_app/win/RasterWindowContext_win.cpp",
           "tools/sk_app/win/Window_win.cpp",
           "tools/sk_app/win/main_win.cpp",
         ]
         if (skia_use_angle) {
           sources += [ "tools/sk_app/win/ANGLEWindowContext_win.cpp" ]
         }
       } else if (is_mac) {
         sources += [
           "tools/sk_app/mac/GLWindowContext_mac.cpp",
           "tools/sk_app/mac/RasterWindowContext_mac.cpp",
           "tools/sk_app/mac/Window_mac.cpp",
           "tools/sk_app/mac/main_mac.cpp",
         ]
         libs += [
           "QuartzCore.framework",
           "Cocoa.framework",
           "Foundation.framework",
         ]
       } else if (is_ios) {
         sources += [
           "tools/sk_app/ios/GLWindowContext_ios.cpp",
           "tools/sk_app/ios/RasterWindowContext_ios.cpp",
           "tools/sk_app/ios/Window_ios.cpp",
           "tools/sk_app/ios/main_ios.cpp",
         ]
       }
 
       if (skia_use_vulkan) {
         sources += [ "tools/sk_app/VulkanWindowContext.cpp" ]
         if (is_android) {
           sources += [ "tools/sk_app/android/VulkanWindowContext_android.cpp" ]
         } else if (is_linux) {
           sources += [ "tools/sk_app/unix/VulkanWindowContext_unix.cpp" ]
           libs += [ "X11-xcb" ]
         } else if (is_win) {
           sources += [ "tools/sk_app/win/VulkanWindowContext_win.cpp" ]
         }
       }
 
       deps = [
         ":gpu_tool_utils",
         ":skia",
         ":tool_utils",
         ":views",
       ]
       if (is_android) {
         deps += [ "//third_party/native_app_glue" ]
       } else if (is_mac || is_ios) {
         deps += [ "//third_party/libsdl" ]
       }
       if (skia_use_angle) {
         deps += [ "//third_party/angle2" ]
       }
     }
   }
 
   if (skia_enable_gpu) {
     test_app("viewer") {
       is_shared_library = is_android
       if (is_ios) {
         bundle_ios_data = true
       }
       sources = [
         "tools/viewer/BisectSlide.cpp",
         "tools/viewer/GMSlide.cpp",
         "tools/viewer/ImGuiLayer.cpp",
         "tools/viewer/ImageSlide.cpp",
         "tools/viewer/SKPSlide.cpp",
         "tools/viewer/SampleSlide.cpp",
         "tools/viewer/SkottieSlide.cpp",
         "tools/viewer/SlideDir.cpp",
         "tools/viewer/StatsLayer.cpp",
         "tools/viewer/Viewer.cpp",
       ]
       libs = []
 
       include_dirs = []
       deps = [
         ":experimental_skottie",
         ":experimental_sksg",
         ":flags",
         ":gm",
         ":gpu_tool_utils",
         ":samples",
         ":sk_app",
         ":skia",
         ":tool_utils",
         ":views",
         "//third_party/imgui",
         "//third_party/jsoncpp",
       ]
     }
   }
 
   if (skia_enable_gpu && !skia_use_angle && (is_linux || is_win || is_mac)) {
     test_app("HelloWorld") {
       sources = [
         "example/HelloWorld.cpp",
       ]
       libs = []
 
       include_dirs = []
       deps = [
         ":flags",
         ":gpu_tool_utils",
         ":sk_app",
         ":skia",
         ":tool_utils",
         ":views",
       ]
     }
   }
 
   if (skia_enable_gpu && (is_linux || is_mac || is_ios)) {
     test_app("SkiaSDLExample") {
       sources = [
         "example/SkiaSDLExample.cpp",
       ]
       libs = []
       include_dirs = []
       deps = [
         ":gpu_tool_utils",
         ":skia",
         "//third_party/libsdl",
       ]
     }
   }
 
   if (skia_qt_path != "" && (is_win || is_linux || is_mac)) {
     action_foreach("generate_mocs") {
       script = "gn/call.py"
       sources = [
         "tools/mdbviz/MainWindow.h",
       ]
       outputs = [
         "$target_gen_dir/mdbviz/{{source_name_part}}_moc.cpp",
       ]
       args = [
         "$skia_qt_path" + "/bin/moc",
         "{{source}}",
         "-o",
         "gen/mdbviz/{{source_name_part}}_moc.cpp",
       ]
     }
     action_foreach("generate_resources") {
       script = "gn/call.py"
       sources = [
         "tools/mdbviz/resources.qrc",
       ]
       outputs = [
         "$target_gen_dir/mdbviz/{{source_name_part}}_res.cpp",
       ]
       args = [
         "$skia_qt_path" + "/bin/rcc",
         "{{source}}",
         "-o",
         "gen/mdbviz/{{source_name_part}}_res.cpp",
       ]
     }
     test_app("mdbviz") {
       if (is_win) {
         # on Windows we need to disable some exception handling warnings due to the Qt headers
         cflags = [ "/Wv:18" ]  # 18 -> VS2013, 19 -> VS2015, 1910 -> VS2017
       }
       sources = [
         "tools/UrlDataManager.cpp",
         "tools/debugger/SkDebugCanvas.cpp",
         "tools/debugger/SkDrawCommand.cpp",
         "tools/debugger/SkJsonWriteBuffer.cpp",
         "tools/debugger/SkObjectParser.cpp",
         "tools/mdbviz/MainWindow.cpp",
         "tools/mdbviz/Model.cpp",
         "tools/mdbviz/main.cpp",
         "tools/picture_utils.cpp",
 
         # generated files
         "$target_gen_dir/mdbviz/MainWindow_moc.cpp",
         "$target_gen_dir/mdbviz/resources_res.cpp",
       ]
       lib_dirs = [ "$skia_qt_path/lib" ]
       libs = [
         "Qt5Core.lib",
         "Qt5Gui.lib",
         "Qt5Widgets.lib",
       ]
       include_dirs = [
         "$skia_qt_path/include",
         "$skia_qt_path/include/QtCore",
         "$skia_qt_path/include/QtWidgets",
         "tools",
         "tools/debugger",
       ]
       deps = [
         ":generate_mocs",
         ":generate_resources",
         ":skia",
         "//third_party/jsoncpp",
         "//third_party/libpng",
       ]
     }
   }
 
   if (is_android && defined(ndk) && ndk != "") {
     copy("gdbserver") {
       sources = [
         "$ndk/$ndk_gdbserver",
       ]
       outputs = [
         "$root_out_dir/gdbserver",
       ]
     }
   }
 }
diff --git a/fuzz/Fuzz.h b/fuzz/Fuzz.h
index 203a57fd9f..4fb7396ecc 100644
--- a/fuzz/Fuzz.h
+++ b/fuzz/Fuzz.h
@@ -59,9 +59,10 @@ public:
 private:
     template <typename T>
     T nextT();
 
     sk_sp<SkData> fBytes;
     size_t fNextByte;
+    friend void fuzz__MakeEncoderCorpus(Fuzz*);
 };
 
 // UBSAN reminds us that bool can only legally hold 0 or 1.
diff --git a/fuzz/FuzzEncoders.cpp b/fuzz/FuzzEncoders.cpp
new file mode 100644
index 0000000000..7ca4a48d9c
--- /dev/null
+++ b/fuzz/FuzzEncoders.cpp
@@ -0,0 +1,118 @@
+/*
+ * Copyright 2018 Google LLC
+ *
+ * Use of this source code is governed by a BSD-style license that can be
+ * found in the LICENSE file.
+ */
+
+#include "Fuzz.h"
+#include "SkBitmap.h"
+#include "SkImage.h"
+#include "SkImageInfo.h"
+#include "SkJpegEncoder.h"
+#include "SkPixmap.h"
+#include "SkPngEncoder.h"
+#include "SkRandom.h"
+#include "SkWebpEncoder.h"
+#include "SkOSFile.h"
+
+#include <vector>
+
+// These values were picked arbitrarily to hopefully limit the size of the
+// serialized SkPixmaps.
+constexpr int MAX_WIDTH = 512;
+constexpr int MAX_HEIGHT = 512;
+
+static SkBitmap make_fuzzed_bitmap(Fuzz* fuzz) {
+    SkBitmap bm;
+    uint32_t w, h;
+    fuzz->nextRange(&w, 1, MAX_WIDTH);
+    fuzz->nextRange(&h, 1, MAX_HEIGHT);
+    if (!bm.tryAllocPixels(SkImageInfo::MakeN32Premul(w, h))) {
+        return bm;
+    }
+    uint32_t n = w * h;
+    fuzz->nextN((SkPMColor*)bm.getPixels(), n);
+    return bm;
+}
+
+DEF_FUZZ(PNGEncoder, fuzz) {
+    auto bm = make_fuzzed_bitmap(fuzz);
+
+    auto opts = SkPngEncoder::Options{};
+    fuzz->nextRange(&opts.fZLibLevel, 0, 9);
+
+    SkDynamicMemoryWStream dest;
+    SkPngEncoder::Encode(&dest, bm.pixmap(), opts);
+}
+
+DEF_FUZZ(JPEGEncoder, fuzz) {
+    auto bm = make_fuzzed_bitmap(fuzz);
+
+    auto opts = SkJpegEncoder::Options{};
+    fuzz->nextRange(&opts.fQuality, 0, 100);
+
+    SkDynamicMemoryWStream dest;
+    (void)SkJpegEncoder::Encode(&dest, bm.pixmap(), opts);
+}
+
+DEF_FUZZ(WEBPEncoder, fuzz) {
+    auto bm = make_fuzzed_bitmap(fuzz);
+
+    auto opts = SkWebpEncoder::Options{};
+    fuzz->nextRange(&opts.fQuality, 0.0f, 100.0f);
+    bool lossy;
+    fuzz->next(&lossy);
+    if (lossy) {
+        opts.fCompression = SkWebpEncoder::Compression::kLossy;
+    } else {
+        opts.fCompression = SkWebpEncoder::Compression::kLossless;
+    }
+
+    SkDynamicMemoryWStream dest;
+    (void)SkWebpEncoder::Encode(&dest, bm.pixmap(), opts);
+}
+
+// Not a real fuzz endpoint, but a helper to take in real, good images
+// and dump out a corpus for this fuzzer.
+DEF_FUZZ(_MakeEncoderCorpus, fuzz) {
+    auto bytes = fuzz->fBytes;
+    SkDebugf("bytes %d\n", bytes->size());
+    auto img = SkImage::MakeFromEncoded(bytes);
+    if (nullptr == img.get()) {
+        SkDebugf("invalid image, could not decode\n");
+        return;
+    }
+    if (img->width() > MAX_WIDTH || img->height() > MAX_HEIGHT) {
+        SkDebugf("Too big (%d x %d)\n", img->width(), img->height());
+        return;
+    }
+    std::vector<int32_t> dstPixels;
+    int rowBytes = img->width() * 4;
+    dstPixels.resize(img->height() * rowBytes);
+    SkPixmap pm(SkImageInfo::MakeN32Premul(img->width(), img->height()),
+        &dstPixels.front(), rowBytes);
+    if (!img->readPixels(pm, 0, 0)) {
+        SkDebugf("Could not read pixmap\n");
+        return;
+    }
+
+    SkString s("./encoded_corpus/enc_");
+    static SkRandom rand;
+    s.appendU32(rand.nextU());
+    auto file = sk_fopen(s.c_str(), SkFILE_Flags::kWrite_SkFILE_Flag);
+    if (!file) {
+        SkDebugf("Can't initialize file\n");
+        return;
+    }
+    auto total = pm.info().bytesPerPixel() * pm.width() * pm.height();
+    SkDebugf("Writing %d (%d x %d) bytes\n", total, pm.width(), pm.height());
+    // Write out the size in two bytes since that's what the fuzzer will
+    // read first.
+    uint32_t w = pm.width();
+    sk_fwrite(&w, sizeof(uint32_t), file);
+    uint32_t h = pm.height();
+    sk_fwrite(&h, sizeof(uint32_t), file);
+    sk_fwrite(pm.addr(), total, file);
+    sk_fclose(file);
+}
diff --git a/fuzz/oss_fuzz/FuzzJPEGEncoder.cpp b/fuzz/oss_fuzz/FuzzJPEGEncoder.cpp
new file mode 100644
index 0000000000..3d5ce412e7
--- /dev/null
+++ b/fuzz/oss_fuzz/FuzzJPEGEncoder.cpp
@@ -0,0 +1,16 @@
+/*
+ * Copyright 2018 Google, LLC
+ *
+ * Use of this source code is governed by a BSD-style license that can be
+ * found in the LICENSE file.
+ */
+
+#include "../Fuzz.h"
+
+void fuzz_JPEGEncoder(Fuzz* f);
+
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
+    auto fuzz = Fuzz(SkData::MakeWithoutCopy(data, size));
+    fuzz_JPEGEncoder(&fuzz);
+    return 0;
+}
diff --git a/fuzz/oss_fuzz/FuzzPNGEncoder.cpp b/fuzz/oss_fuzz/FuzzPNGEncoder.cpp
new file mode 100644
index 0000000000..8e104166cf
--- /dev/null
+++ b/fuzz/oss_fuzz/FuzzPNGEncoder.cpp
@@ -0,0 +1,16 @@
+/*
+ * Copyright 2018 Google, LLC
+ *
+ * Use of this source code is governed by a BSD-style license that can be
+ * found in the LICENSE file.
+ */
+
+#include "../Fuzz.h"
+
+void fuzz_PNGEncoder(Fuzz* f);
+
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
+    auto fuzz = Fuzz(SkData::MakeWithoutCopy(data, size));
+    fuzz_PNGEncoder(&fuzz);
+    return 0;
+}
diff --git a/fuzz/oss_fuzz/FuzzWEBPEncoder.cpp b/fuzz/oss_fuzz/FuzzWEBPEncoder.cpp
new file mode 100644
index 0000000000..f1da38d6ca
--- /dev/null
+++ b/fuzz/oss_fuzz/FuzzWEBPEncoder.cpp
@@ -0,0 +1,16 @@
+/*
+ * Copyright 2018 Google, LLC
+ *
+ * Use of this source code is governed by a BSD-style license that can be
+ * found in the LICENSE file.
+ */
+
+#include "../Fuzz.h"
+
+void fuzz_WEBPEncoder(Fuzz* f);
+
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
+    auto fuzz = Fuzz(SkData::MakeWithoutCopy(data, size));
+    fuzz_WEBPEncoder(&fuzz);
+    return 0;
+}
