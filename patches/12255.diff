commit 401eacfb22fc4a3bd5df5752ee77adf598864955
Author: Yifeng Sun <pkusunyifeng@gmail.com>
Date:   Fri Feb 1 15:56:04 2019 -0800

    odp-util: Stop parse odp actions if nlattr is overflow
    
    `encap = nl_msg_start_nested(key, OVS_KEY_ATTR_ENCAP)` ensures that
    key->size >= (encap + NLA_HDRLEN), so the `if` statement is safe.
    
    Reported-at: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=11306
    Signed-off-by: Yifeng Sun <pkusunyifeng@gmail.com>
    Signed-off-by: Ben Pfaff <blp@ovn.org>

diff --git a/lib/odp-util.c b/lib/odp-util.c
index 778c00ee8..482a0be2f 100644
--- a/lib/odp-util.c
+++ b/lib/odp-util.c
@@ -5422,210 +5422,214 @@ static int
 parse_odp_key_mask_attr(struct parse_odp_context *context, const char *s,
                         struct ofpbuf *key, struct ofpbuf *mask)
 {
     SCAN_SINGLE("skb_priority(", uint32_t, u32, OVS_KEY_ATTR_PRIORITY);
     SCAN_SINGLE("skb_mark(", uint32_t, u32, OVS_KEY_ATTR_SKB_MARK);
     SCAN_SINGLE_FULLY_MASKED("recirc_id(", uint32_t, u32,
                              OVS_KEY_ATTR_RECIRC_ID);
     SCAN_SINGLE("dp_hash(", uint32_t, u32, OVS_KEY_ATTR_DP_HASH);
 
     SCAN_SINGLE("ct_state(", uint32_t, ct_state, OVS_KEY_ATTR_CT_STATE);
     SCAN_SINGLE("ct_zone(", uint16_t, u16, OVS_KEY_ATTR_CT_ZONE);
     SCAN_SINGLE("ct_mark(", uint32_t, u32, OVS_KEY_ATTR_CT_MARK);
     SCAN_SINGLE("ct_label(", ovs_u128, u128, OVS_KEY_ATTR_CT_LABELS);
 
     SCAN_BEGIN("ct_tuple4(", struct ovs_key_ct_tuple_ipv4) {
         SCAN_FIELD("src=", ipv4, ipv4_src);
         SCAN_FIELD("dst=", ipv4, ipv4_dst);
         SCAN_FIELD("proto=", u8, ipv4_proto);
         SCAN_FIELD("tp_src=", be16, src_port);
         SCAN_FIELD("tp_dst=", be16, dst_port);
     } SCAN_END(OVS_KEY_ATTR_CT_ORIG_TUPLE_IPV4);
 
     SCAN_BEGIN("ct_tuple6(", struct ovs_key_ct_tuple_ipv6) {
         SCAN_FIELD("src=", in6_addr, ipv6_src);
         SCAN_FIELD("dst=", in6_addr, ipv6_dst);
         SCAN_FIELD("proto=", u8, ipv6_proto);
         SCAN_FIELD("tp_src=", be16, src_port);
         SCAN_FIELD("tp_dst=", be16, dst_port);
     } SCAN_END(OVS_KEY_ATTR_CT_ORIG_TUPLE_IPV6);
 
     SCAN_BEGIN_NESTED("tunnel(", OVS_KEY_ATTR_TUNNEL) {
         SCAN_FIELD_NESTED("tun_id=", ovs_be64, be64, OVS_TUNNEL_KEY_ATTR_ID);
         SCAN_FIELD_NESTED("src=", ovs_be32, ipv4, OVS_TUNNEL_KEY_ATTR_IPV4_SRC);
         SCAN_FIELD_NESTED("dst=", ovs_be32, ipv4, OVS_TUNNEL_KEY_ATTR_IPV4_DST);
         SCAN_FIELD_NESTED("ipv6_src=", struct in6_addr, in6_addr, OVS_TUNNEL_KEY_ATTR_IPV6_SRC);
         SCAN_FIELD_NESTED("ipv6_dst=", struct in6_addr, in6_addr, OVS_TUNNEL_KEY_ATTR_IPV6_DST);
         SCAN_FIELD_NESTED("tos=", uint8_t, u8, OVS_TUNNEL_KEY_ATTR_TOS);
         SCAN_FIELD_NESTED("ttl=", uint8_t, u8, OVS_TUNNEL_KEY_ATTR_TTL);
         SCAN_FIELD_NESTED("tp_src=", ovs_be16, be16, OVS_TUNNEL_KEY_ATTR_TP_SRC);
         SCAN_FIELD_NESTED("tp_dst=", ovs_be16, be16, OVS_TUNNEL_KEY_ATTR_TP_DST);
         SCAN_FIELD_NESTED_FUNC("erspan(", struct erspan_metadata, erspan_metadata,
                                erspan_to_attr);
         SCAN_FIELD_NESTED_FUNC("vxlan(gbp(", uint32_t, vxlan_gbp, vxlan_gbp_to_attr);
         SCAN_FIELD_NESTED_FUNC("geneve(", struct geneve_scan, geneve,
                                geneve_to_attr);
         SCAN_FIELD_NESTED_FUNC("flags(", uint16_t, tun_flags, tun_flags_to_attr);
     } SCAN_END_NESTED();
 
     SCAN_SINGLE_PORT("in_port(", uint32_t, OVS_KEY_ATTR_IN_PORT);
 
     SCAN_BEGIN("eth(", struct ovs_key_ethernet) {
         SCAN_FIELD("src=", eth, eth_src);
         SCAN_FIELD("dst=", eth, eth_dst);
     } SCAN_END(OVS_KEY_ATTR_ETHERNET);
 
     SCAN_BEGIN_INIT("vlan(", struct ovs_key_vlan__,
                     { htons(VLAN_CFI) }, { htons(VLAN_CFI) }) {
         SCAN_FIELD("vid=", vid, tci);
         SCAN_FIELD("pcp=", pcp, tci);
         SCAN_FIELD("cfi=", cfi, tci);
     } SCAN_END(OVS_KEY_ATTR_VLAN);
 
     SCAN_SINGLE("eth_type(", ovs_be16, be16, OVS_KEY_ATTR_ETHERTYPE);
 
     SCAN_BEGIN_ARRAY("mpls(", struct ovs_key_mpls, FLOW_MAX_MPLS_LABELS) {
         SCAN_FIELD_ARRAY("label=", mpls_label, mpls_lse);
         SCAN_FIELD_ARRAY("tc=", mpls_tc, mpls_lse);
         SCAN_FIELD_ARRAY("ttl=", mpls_ttl, mpls_lse);
         SCAN_FIELD_ARRAY("bos=", mpls_bos, mpls_lse);
     } SCAN_END_ARRAY(OVS_KEY_ATTR_MPLS);
 
     SCAN_BEGIN("ipv4(", struct ovs_key_ipv4) {
         SCAN_FIELD("src=", ipv4, ipv4_src);
         SCAN_FIELD("dst=", ipv4, ipv4_dst);
         SCAN_FIELD("proto=", u8, ipv4_proto);
         SCAN_FIELD("tos=", u8, ipv4_tos);
         SCAN_FIELD("ttl=", u8, ipv4_ttl);
         SCAN_FIELD("frag=", frag, ipv4_frag);
     } SCAN_END(OVS_KEY_ATTR_IPV4);
 
     SCAN_BEGIN("ipv6(", struct ovs_key_ipv6) {
         SCAN_FIELD("src=", in6_addr, ipv6_src);
         SCAN_FIELD("dst=", in6_addr, ipv6_dst);
         SCAN_FIELD("label=", ipv6_label, ipv6_label);
         SCAN_FIELD("proto=", u8, ipv6_proto);
         SCAN_FIELD("tclass=", u8, ipv6_tclass);
         SCAN_FIELD("hlimit=", u8, ipv6_hlimit);
         SCAN_FIELD("frag=", frag, ipv6_frag);
     } SCAN_END(OVS_KEY_ATTR_IPV6);
 
     SCAN_BEGIN("tcp(", struct ovs_key_tcp) {
         SCAN_FIELD("src=", be16, tcp_src);
         SCAN_FIELD("dst=", be16, tcp_dst);
     } SCAN_END(OVS_KEY_ATTR_TCP);
 
     SCAN_SINGLE("tcp_flags(", ovs_be16, tcp_flags, OVS_KEY_ATTR_TCP_FLAGS);
 
     SCAN_BEGIN("udp(", struct ovs_key_udp) {
         SCAN_FIELD("src=", be16, udp_src);
         SCAN_FIELD("dst=", be16, udp_dst);
     } SCAN_END(OVS_KEY_ATTR_UDP);
 
     SCAN_BEGIN("sctp(", struct ovs_key_sctp) {
         SCAN_FIELD("src=", be16, sctp_src);
         SCAN_FIELD("dst=", be16, sctp_dst);
     } SCAN_END(OVS_KEY_ATTR_SCTP);
 
     SCAN_BEGIN("icmp(", struct ovs_key_icmp) {
         SCAN_FIELD("type=", u8, icmp_type);
         SCAN_FIELD("code=", u8, icmp_code);
     } SCAN_END(OVS_KEY_ATTR_ICMP);
 
     SCAN_BEGIN("icmpv6(", struct ovs_key_icmpv6) {
         SCAN_FIELD("type=", u8, icmpv6_type);
         SCAN_FIELD("code=", u8, icmpv6_code);
     } SCAN_END(OVS_KEY_ATTR_ICMPV6);
 
     SCAN_BEGIN("arp(", struct ovs_key_arp) {
         SCAN_FIELD("sip=", ipv4, arp_sip);
         SCAN_FIELD("tip=", ipv4, arp_tip);
         SCAN_FIELD("op=", be16, arp_op);
         SCAN_FIELD("sha=", eth, arp_sha);
         SCAN_FIELD("tha=", eth, arp_tha);
     } SCAN_END(OVS_KEY_ATTR_ARP);
 
     SCAN_BEGIN("nd(", struct ovs_key_nd) {
         SCAN_FIELD("target=", in6_addr, nd_target);
         SCAN_FIELD("sll=", eth, nd_sll);
         SCAN_FIELD("tll=", eth, nd_tll);
     } SCAN_END(OVS_KEY_ATTR_ND);
 
     struct packet_type {
         ovs_be16 ns;
         ovs_be16 id;
     };
     SCAN_BEGIN("packet_type(", struct packet_type) {
         SCAN_FIELD("ns=", be16, ns);
         SCAN_FIELD("id=", be16, id);
     } SCAN_END(OVS_KEY_ATTR_PACKET_TYPE);
 
     /* nsh is nested, it needs special process */
     int ret = parse_odp_nsh_key_mask_attr(s, key, mask);
     if (ret < 0) {
        return ret;
     } else {
        s += ret;
     }
 
     /* Encap open-coded. */
     if (!strncmp(s, "encap(", 6)) {
         const char *start = s;
         size_t encap, encap_mask = 0;
 
         if (context->depth + 1 == MAX_ODP_NESTED) {
             return -EINVAL;
         }
         context->depth++;
 
         encap = nl_msg_start_nested(key, OVS_KEY_ATTR_ENCAP);
         if (mask) {
             encap_mask = nl_msg_start_nested(mask, OVS_KEY_ATTR_ENCAP);
         }
 
         s += 6;
         for (;;) {
             int retval;
 
             s += strspn(s, delimiters);
             if (!*s) {
                 context->depth--;
                 return -EINVAL;
             } else if (*s == ')') {
                 break;
             }
 
             retval = parse_odp_key_mask_attr(context, s, key, mask);
             if (retval < 0) {
                 context->depth--;
                 return retval;
             }
+
+            if (nl_attr_oversized(key->size - encap - NLA_HDRLEN)) {
+                return -E2BIG;
+            }
             s += retval;
         }
         s++;
 
         nl_msg_end_nested(key, encap);
         if (mask) {
             nl_msg_end_nested(mask, encap_mask);
         }
         context->depth--;
 
         return s - start;
     }
 
     return -EINVAL;
 }
 
 /* Parses the string representation of a datapath flow key, in the
  * format output by odp_flow_key_format().  Returns 0 if successful,
  * otherwise a positive errno value.  On success, the flow key is
  * appended to 'key' as a series of Netlink attributes.  On failure, no
  * data is appended to 'key'.  Either way, 'key''s data might be
  * reallocated.
  *
  * If 'port_names' is nonnull, it points to an simap that maps from a port name
  * to a port number.  (Port names may be used instead of port numbers in
  * in_port.)
  *
  * On success, the attributes appended to 'key' are individually syntactically
  * valid, but they may not be valid as a sequence.  'key' might, for example,
  * have duplicated keys.  odp_flow_key_to_flow() will detect those errors. */
