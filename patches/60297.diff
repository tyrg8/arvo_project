commit 2885452c3fb1385c16913be4855d6b2150d3d49f
Author: Brian Osman <brianosman@google.com>
Date:   Fri Jul 7 14:36:16 2023 -0400

    Don't try to create a lighting image filter if the buffer failed
    
    If we ran out of data in the buffer, some of the values might be
    uninitialized.
    
    Bug: oss-fuzz:60419
    Change-Id: I05a70ac6179daca1c8936f69abfc27c8ca762a12
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/720900
    Commit-Queue: Julia Lavrova <jlavrova@google.com>
    Commit-Queue: Brian Osman <brianosman@google.com>
    Auto-Submit: Brian Osman <brianosman@google.com>
    Reviewed-by: Julia Lavrova <jlavrova@google.com>

diff --git a/src/effects/imagefilters/SkLightingImageFilter.cpp b/src/effects/imagefilters/SkLightingImageFilter.cpp
index 7993b7082f..3f3c28a3ed 100644
--- a/src/effects/imagefilters/SkLightingImageFilter.cpp
+++ b/src/effects/imagefilters/SkLightingImageFilter.cpp
@@ -477,28 +477,32 @@ void SkRegisterLightingImageFilterFlattenables() {
 sk_sp<SkFlattenable> SkLightingImageFilter::CreateProc(SkReadBuffer& buffer) {
     SK_IMAGEFILTER_UNFLATTEN_COMMON(common, 1);
 
     Light light;
     light.fType = buffer.read32LE(Light::Type::kLast);
     light.fLightColor = buffer.readColor();
 
     SkPoint3 lightPos, lightDir;
     buffer.readPoint3(&lightPos);
     light.fLocationXY = skif::ParameterSpace<SkPoint>({lightPos.fX, lightPos.fY});
     light.fLocationZ = skif::ParameterSpace<ZValue>(lightPos.fZ);
 
     buffer.readPoint3(&lightDir);
     light.fDirectionXY = skif::ParameterSpace<skif::Vector>({lightDir.fX, lightDir.fY});
     light.fDirectionZ = skif::ParameterSpace<ZValue>(lightDir.fZ);
 
     light.fFalloffExponent = buffer.readScalar();
     light.fCosCutoffAngle = buffer.readScalar();
 
     Material material;
     material.fType = buffer.read32LE(Material::Type::kLast);
     material.fSurfaceDepth = skif::ParameterSpace<ZValue>(buffer.readScalar());
     material.fK = buffer.readScalar();
     material.fShininess = buffer.readScalar();
 
+    if (!buffer.isValid()) {
+        return nullptr;
+    }
+
     return make_lighting(light, material, common.getInput(0), common.cropRect());
 }
 
