commit 8cdfffb7537084e3f8a691fc13428425f559566c
Author: Derick Rethans <github@derickrethans.nl>
Date:   Wed Sep 7 16:59:02 2022 +0100

    Fixed MemorySanitizer: use-of-uninitialized-value warning introduced by 932586c426d7f016e5d0e0d95579f9503ec70a89

diff --git a/ext/date/php_date.c b/ext/date/php_date.c
index c64ef6afe1..a8ec40a0c8 100644
--- a/ext/date/php_date.c
+++ b/ext/date/php_date.c
@@ -2263,17 +2263,20 @@ PHPAPI zval *php_date_instantiate(zend_class_entry *pce, zval *object) /* {{{ */
 
 /* Helper function used to store the latest found warnings and errors while
  * parsing, from either strtotime or parse_from_format. */
-static void update_errors_warnings(timelib_error_container *last_errors) /* {{{ */
+static timelib_error_container* update_errors_warnings(timelib_error_container **last_errors) /* {{{ */
 {
 	if (DATEG(last_errors)) {
 		timelib_error_container_dtor(DATEG(last_errors));
 		DATEG(last_errors) = NULL;
 	}
-	if (last_errors->warning_count || last_errors->error_count) {
-		DATEG(last_errors) = last_errors;
-	} else {
-		timelib_error_container_dtor(last_errors);
+
+	if ((*last_errors)->warning_count || (*last_errors)->error_count) {
+		DATEG(last_errors) = *last_errors;
+		return *last_errors;
 	}
+
+	timelib_error_container_dtor(*last_errors);
+	return NULL;
 } /* }}} */
 
 static void php_date_set_time_fraction(timelib_time *time, int microseconds)
@@ -2298,114 +2301,114 @@ static void php_date_get_current_time_with_fraction(time_t *sec, suseconds_t *us
 PHPAPI bool php_date_initialize(php_date_obj *dateobj, const char *time_str, size_t time_str_len, const char *format, zval *timezone_object, int flags) /* {{{ */
 {
 	timelib_time   *now;
 	timelib_tzinfo *tzi = NULL;
 	timelib_error_container *err = NULL;
 	int type = TIMELIB_ZONETYPE_ID, new_dst = 0;
 	char *new_abbr = NULL;
 	timelib_sll new_offset = 0;
 	time_t sec;
 	suseconds_t usec;
 	int options = 0;
 
 	if (dateobj->time) {
 		timelib_time_dtor(dateobj->time);
 	}
 	if (format) {
 		if (time_str_len == 0) {
 			time_str = "";
 		}
 		dateobj->time = timelib_parse_from_format(format, time_str, time_str_len, &err, DATE_TIMEZONEDB, php_date_parse_tzfile_wrapper);
 	} else {
 		if (time_str_len == 0) {
 			time_str = "now";
 			time_str_len = sizeof("now") - 1;
 		}
 		dateobj->time = timelib_strtotime(time_str, time_str_len, &err, DATE_TIMEZONEDB, php_date_parse_tzfile_wrapper);
 	}
 
 	/* update last errors and warnings */
-	update_errors_warnings(err);
+	err = update_errors_warnings(&err);
 
 	/* If called from a constructor throw an exception */
 	if ((flags & PHP_DATE_INIT_CTOR) && err && err->error_count) {
 		/* spit out the first library error message, at least */
 		zend_throw_exception_ex(NULL, 0, "Failed to parse time string (%s) at position %d (%c): %s", time_str,
 			err->error_messages[0].position, err->error_messages[0].character, err->error_messages[0].message);
 	}
 	if (err && err->error_count) {
 		timelib_time_dtor(dateobj->time);
 		dateobj->time = 0;
 		return 0;
 	}
 
 	if (timezone_object) {
 		php_timezone_obj *tzobj;
 
 		tzobj = Z_PHPTIMEZONE_P(timezone_object);
 		switch (tzobj->type) {
 			case TIMELIB_ZONETYPE_ID:
 				tzi = tzobj->tzi.tz;
 				break;
 			case TIMELIB_ZONETYPE_OFFSET:
 				new_offset = tzobj->tzi.utc_offset;
 				break;
 			case TIMELIB_ZONETYPE_ABBR:
 				new_offset = tzobj->tzi.z.utc_offset;
 				new_dst    = tzobj->tzi.z.dst;
 				new_abbr   = timelib_strdup(tzobj->tzi.z.abbr);
 				break;
 		}
 		type = tzobj->type;
 	} else if (dateobj->time->tz_info) {
 		tzi = dateobj->time->tz_info;
 	} else {
 		tzi = get_timezone_info();
 		if (!tzi) {
 			return 0;
 		}
 	}
 
 	now = timelib_time_ctor();
 	now->zone_type = type;
 	switch (type) {
 		case TIMELIB_ZONETYPE_ID:
 			now->tz_info = tzi;
 			break;
 		case TIMELIB_ZONETYPE_OFFSET:
 			now->z = new_offset;
 			break;
 		case TIMELIB_ZONETYPE_ABBR:
 			now->z = new_offset;
 			now->dst = new_dst;
 			now->tz_abbr = new_abbr;
 			break;
 	}
 	php_date_get_current_time_with_fraction(&sec, &usec);
 	timelib_unixtime2local(now, (timelib_sll) sec);
 	php_date_set_time_fraction(now, usec);
 
 	if (!format
 	 && time_str_len == sizeof("now") - 1
 	 && memcmp(time_str, "now", sizeof("now") - 1) == 0) {
 		timelib_time_dtor(dateobj->time);
 		dateobj->time = now;
 		return 1;
 	}
 
 	options = TIMELIB_NO_CLONE;
 	if (flags & PHP_DATE_INIT_FORMAT) {
 		options |= TIMELIB_OVERRIDE_TIME;
 	}
 	timelib_fill_holes(dateobj->time, now, options);
 
 	timelib_update_ts(dateobj->time, tzi);
 	timelib_update_from_sse(dateobj->time);
 
 	dateobj->time->have_relative = 0;
 
 	timelib_time_dtor(now);
 
 	return 1;
 } /* }}} */
 
 /* {{{ Returns new DateTime object */
@@ -2989,69 +2992,70 @@ PHP_FUNCTION(date_format)
 static bool php_date_modify(zval *object, char *modify, size_t modify_len) /* {{{ */
 {
 	php_date_obj *dateobj;
 	timelib_time *tmp_time;
 	timelib_error_container *err = NULL;
 
 	dateobj = Z_PHPDATE_P(object);
 
 	if (!(dateobj->time)) {
 		zend_throw_error(NULL, "The DateTime object has not been correctly initialized by its constructor");
 		return 0;
 	}
 
 	tmp_time = timelib_strtotime(modify, modify_len, &err, DATE_TIMEZONEDB, php_date_parse_tzfile_wrapper);
 
 	/* update last errors and warnings */
-	update_errors_warnings(err);
+	err = update_errors_warnings(&err);
+
 	if (err && err->error_count) {
 		/* spit out the first library error message, at least */
 		php_error_docref(NULL, E_WARNING, "Failed to parse time string (%s) at position %d (%c): %s", modify,
 			err->error_messages[0].position, err->error_messages[0].character, err->error_messages[0].message);
 		timelib_time_dtor(tmp_time);
 		return 0;
 	}
 
 	memcpy(&dateobj->time->relative, &tmp_time->relative, sizeof(timelib_rel_time));
 	dateobj->time->have_relative = tmp_time->have_relative;
 	dateobj->time->sse_uptodate = 0;
 
 	if (tmp_time->y != -99999) {
 		dateobj->time->y = tmp_time->y;
 	}
 	if (tmp_time->m != -99999) {
 		dateobj->time->m = tmp_time->m;
 	}
 	if (tmp_time->d != -99999) {
 		dateobj->time->d = tmp_time->d;
 	}
 
 	if (tmp_time->h != -99999) {
 		dateobj->time->h = tmp_time->h;
 		if (tmp_time->i != -99999) {
 			dateobj->time->i = tmp_time->i;
 			if (tmp_time->s != -99999) {
 				dateobj->time->s = tmp_time->s;
 			} else {
 				dateobj->time->s = 0;
 			}
 		} else {
 			dateobj->time->i = 0;
 			dateobj->time->s = 0;
 		}
 	}
 
 	if (tmp_time->us != -99999) {
 		dateobj->time->us = tmp_time->us;
 	}
 
 	timelib_time_dtor(tmp_time);
 
 	timelib_update_ts(dateobj->time, NULL);
 	timelib_update_from_sse(dateobj->time);
 	dateobj->time->have_relative = 0;
 	memset(&dateobj->time->relative, 0, sizeof(dateobj->time->relative));
 
 	return 1;
 } /* }}} */
 
 /* {{{ Alters the timestamp. */
