commit 99a46fbeb330727b9c4ce4a1d8e9ea2036d8d9c0
Author: Daniel Salzman <daniel.salzman@nic.cz>
Date:   Sat Aug 14 15:11:21 2021 +0200

    libzscanner: add missing output buffer overflow checks to SVCB processing (oss-fuzz, asan)

diff --git a/src/libzscanner/scanner.c.g2 b/src/libzscanner/scanner.c.g2
index 2fe9922a8..b5dc155fa 100644
--- a/src/libzscanner/scanner.c.g2
+++ b/src/libzscanner/scanner.c.g2
@@ -41360,104 +41360,102 @@ tr1033:
 			*(rdata_tail++) = (*p);
 		} else {
 			WARN(ZS_TEXT_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	goto st319;
 tr1037:
 	{
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					p--; {goto st307;}
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 	{
 		if (rdata_tail <= rdata_stop) {
 			// Split long string.
 			if (s->long_string &&
 			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
 				// _item_length_exit equivalent.
 				*(s->item_length_location) = MAX_ITEM_LENGTH;
 				// _item_length_init equivalent.
 				s->item_length_location = rdata_tail++;
 
 				if (rdata_tail > rdata_stop) {
 					WARN(ZS_TEXT_OVERFLOW);
 					p--; {goto st307;}
 				}
 			}
 
 			*(rdata_tail++) = (*p);
 		} else {
 			WARN(ZS_TEXT_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	goto st319;
 tr1045:
 	{
 		rdata_tail++;
 	}
 	{
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					p--; {goto st307;}
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 	{
 		if (rdata_tail <= rdata_stop) {
 			// Split long string.
 			if (s->long_string &&
 			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
 				// _item_length_exit equivalent.
 				*(s->item_length_location) = MAX_ITEM_LENGTH;
 				// _item_length_init equivalent.
 				s->item_length_location = rdata_tail++;
 
 				if (rdata_tail > rdata_stop) {
 					WARN(ZS_TEXT_OVERFLOW);
 					p--; {goto st307;}
 				}
 			}
 
 			*(rdata_tail++) = (*p);
 		} else {
 			WARN(ZS_TEXT_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	goto st319;
@@ -41468,77 +41466,75 @@ case 319:
 	switch( (*p) ) {
 		case 32: goto tr1036;
 		case 33: goto tr1037;
 		case 59: goto tr1036;
 		case 92: goto tr1039;
 	}
 	if ( (*p) < 35 ) {
 		if ( 9 <= (*p) && (*p) <= 10 )
 			goto tr1036;
 	} else if ( (*p) > 39 ) {
 		if ( (*p) > 41 ) {
 			if ( 42 <= (*p) && (*p) <= 126 )
 				goto tr1037;
 		} else if ( (*p) >= 40 )
 			goto tr1038;
 	} else
 		goto tr1037;
 	goto tr1032;
 tr1036:
 	{
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					p--; {goto st307;}
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1409;
 tr1044:
 	{
 		rdata_tail++;
 	}
 	{
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					p--; {goto st307;}
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1409;
@@ -41554,104 +41550,102 @@ case 1409:
 	goto st0;
 tr1038:
 	{
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					p--; {goto st307;}
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 	{
 		if (rdata_tail <= rdata_stop) {
 			// Split long string.
 			if (s->long_string &&
 			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
 				// _item_length_exit equivalent.
 				*(s->item_length_location) = MAX_ITEM_LENGTH;
 				// _item_length_init equivalent.
 				s->item_length_location = rdata_tail++;
 
 				if (rdata_tail > rdata_stop) {
 					WARN(ZS_TEXT_OVERFLOW);
 					p--; {goto st307;}
 				}
 			}
 
 			*(rdata_tail++) = (*p);
 		} else {
 			WARN(ZS_TEXT_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1410;
 tr1046:
 	{
 		rdata_tail++;
 	}
 	{
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					p--; {goto st307;}
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 	{
 		if (rdata_tail <= rdata_stop) {
 			// Split long string.
 			if (s->long_string &&
 			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
 				// _item_length_exit equivalent.
 				*(s->item_length_location) = MAX_ITEM_LENGTH;
 				// _item_length_init equivalent.
 				s->item_length_location = rdata_tail++;
 
 				if (rdata_tail > rdata_stop) {
 					WARN(ZS_TEXT_OVERFLOW);
 					p--; {goto st307;}
 				}
 			}
 
 			*(rdata_tail++) = (*p);
 		} else {
 			WARN(ZS_TEXT_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1410;
@@ -41662,71 +41656,69 @@ case 1410:
 	switch( (*p) ) {
 		case 32: goto tr1036;
 		case 33: goto tr1037;
 		case 59: goto tr1036;
 		case 92: goto tr1039;
 	}
 	if ( (*p) < 35 ) {
 		if ( 9 <= (*p) && (*p) <= 10 )
 			goto tr1036;
 	} else if ( (*p) > 39 ) {
 		if ( (*p) > 41 ) {
 			if ( 42 <= (*p) && (*p) <= 126 )
 				goto tr1037;
 		} else if ( (*p) >= 40 )
 			goto tr1038;
 	} else
 		goto tr1037;
 	goto tr1032;
 tr1039:
 	{
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					p--; {goto st307;}
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 	goto st320;
 tr1047:
 	{
 		rdata_tail++;
 	}
 	{
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					p--; {goto st307;}
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 	goto st320;
@@ -41867,104 +41859,102 @@ tr1048:
 			*(rdata_tail++) = (*p);
 		} else {
 			WARN(ZS_TEXT_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	goto st324;
 tr1052:
 	{
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					p--; {goto st307;}
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 	{
 		if (rdata_tail <= rdata_stop) {
 			// Split long string.
 			if (s->long_string &&
 			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
 				// _item_length_exit equivalent.
 				*(s->item_length_location) = MAX_ITEM_LENGTH;
 				// _item_length_init equivalent.
 				s->item_length_location = rdata_tail++;
 
 				if (rdata_tail > rdata_stop) {
 					WARN(ZS_TEXT_OVERFLOW);
 					p--; {goto st307;}
 				}
 			}
 
 			*(rdata_tail++) = (*p);
 		} else {
 			WARN(ZS_TEXT_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	goto st324;
 tr1061:
 	{
 		rdata_tail++;
 	}
 	{
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					p--; {goto st307;}
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 	{
 		if (rdata_tail <= rdata_stop) {
 			// Split long string.
 			if (s->long_string &&
 			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
 				// _item_length_exit equivalent.
 				*(s->item_length_location) = MAX_ITEM_LENGTH;
 				// _item_length_init equivalent.
 				s->item_length_location = rdata_tail++;
 
 				if (rdata_tail > rdata_stop) {
 					WARN(ZS_TEXT_OVERFLOW);
 					p--; {goto st307;}
 				}
 			}
 
 			*(rdata_tail++) = (*p);
 		} else {
 			WARN(ZS_TEXT_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	goto st324;
@@ -42009,104 +41999,102 @@ tr1049:
 			*(rdata_tail++) = (*p);
 		} else {
 			WARN(ZS_TEXT_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	goto st325;
 tr1053:
 	{
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					p--; {goto st307;}
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 	{
 		if (rdata_tail <= rdata_stop) {
 			// Split long string.
 			if (s->long_string &&
 			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
 				// _item_length_exit equivalent.
 				*(s->item_length_location) = MAX_ITEM_LENGTH;
 				// _item_length_init equivalent.
 				s->item_length_location = rdata_tail++;
 
 				if (rdata_tail > rdata_stop) {
 					WARN(ZS_TEXT_OVERFLOW);
 					p--; {goto st307;}
 				}
 			}
 
 			*(rdata_tail++) = (*p);
 		} else {
 			WARN(ZS_TEXT_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	goto st325;
 tr1062:
 	{
 		rdata_tail++;
 	}
 	{
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					p--; {goto st307;}
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 	{
 		if (rdata_tail <= rdata_stop) {
 			// Split long string.
 			if (s->long_string &&
 			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
 				// _item_length_exit equivalent.
 				*(s->item_length_location) = MAX_ITEM_LENGTH;
 				// _item_length_init equivalent.
 				s->item_length_location = rdata_tail++;
 
 				if (rdata_tail > rdata_stop) {
 					WARN(ZS_TEXT_OVERFLOW);
 					p--; {goto st307;}
 				}
 			}
 
 			*(rdata_tail++) = (*p);
 		} else {
 			WARN(ZS_TEXT_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	goto st325;
@@ -42117,70 +42105,68 @@ case 325:
 	_widec = (*p);
 	if ( 10 <= (*p) && (*p) <= 10 ) {
 		_widec = (short)(1152 + ((*p) - -128));
 		if (
  s->multiline  ) _widec += 256;
 	}
 	switch( _widec ) {
 		case 9: goto tr1052;
 		case 32: goto tr1052;
 		case 34: goto tr1054;
 		case 59: goto tr1052;
 		case 92: goto tr1055;
 		case 1546: goto tr1052;
 	}
 	if ( 33 <= _widec && _widec <= 126 )
 		goto tr1053;
 	goto tr1032;
 tr1054:
 	{
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					p--; {goto st307;}
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 	goto st326;
 tr1063:
 	{
 		rdata_tail++;
 	}
 	{
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					p--; {goto st307;}
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 	goto st326;
@@ -42191,63 +42177,61 @@ case 326:
 	switch( (*p) ) {
 		case 32: goto tr1057;
 		case 59: goto tr1057;
 	}
 	if ( (*p) > 10 ) {
 		if ( 40 <= (*p) && (*p) <= 41 )
 			goto tr1057;
 	} else if ( (*p) >= 9 )
 		goto tr1057;
 	goto tr1056;
 tr1055:
 	{
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					p--; {goto st307;}
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 	goto st327;
 tr1064:
 	{
 		rdata_tail++;
 	}
 	{
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					p--; {goto st307;}
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 	goto st327;
@@ -56390,15 +56374,23 @@ st559:
 	if ( ++p == pe )
 		goto _test_eof559;
 case 559:
 	switch( (*p) ) {
-		case 97: goto st560;
-		case 101: goto st564;
-		case 105: goto st567;
-		case 107: goto st580;
-		case 110: goto st584;
-		case 112: goto st599;
+		case 97: goto tr1869;
+		case 101: goto tr1870;
+		case 105: goto tr1871;
+		case 107: goto tr1872;
+		case 110: goto tr1873;
+		case 112: goto tr1874;
 	}
 	goto tr1868;
+tr1869:
+	{
+		if (rdata_tail + 2 > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
+	}
+	goto st560;
 st560:
 	if ( ++p == pe )
 		goto _test_eof560;
@@ -56516,6 +56508,14 @@ st1429:
 		goto _test_eof1429;
 case 1429:
 	goto st0;
+tr1870:
+	{
+		if (rdata_tail + 2 > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
+	}
+	goto st564;
 st564:
 	if ( ++p == pe )
 		goto _test_eof564;
@@ -56537,15 +56537,23 @@ case 566:
 	switch( (*p) ) {
 		case 32: goto tr1881;
 		case 34: goto tr1881;
 		case 44: goto tr1881;
 		case 59: goto tr1881;
 	}
 	if ( (*p) > 10 ) {
 		if ( 40 <= (*p) && (*p) <= 41 )
 			goto tr1881;
 	} else if ( (*p) >= 9 )
 		goto tr1881;
 	goto tr1868;
+tr1871:
+	{
+		if (rdata_tail + 2 > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
+	}
+	goto st567;
 st567:
 	if ( ++p == pe )
 		goto _test_eof567;
@@ -56648,15 +56656,23 @@ case 579:
 	switch( (*p) ) {
 		case 32: goto tr1895;
 		case 34: goto tr1895;
 		case 44: goto tr1895;
 		case 59: goto tr1895;
 	}
 	if ( (*p) > 10 ) {
 		if ( 40 <= (*p) && (*p) <= 41 )
 			goto tr1895;
 	} else if ( (*p) >= 9 )
 		goto tr1895;
 	goto tr1868;
+tr1872:
+	{
+		if (rdata_tail + 2 > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
+	}
+	goto st580;
 st580:
 	if ( ++p == pe )
 		goto _test_eof580;
@@ -56720,18 +56736,26 @@ case 583:
 	switch( (*p) ) {
 		case 32: goto tr1900;
 		case 34: goto tr1900;
 		case 44: goto tr1900;
 		case 59: goto tr1900;
 	}
 	if ( (*p) < 40 ) {
 		if ( 9 <= (*p) && (*p) <= 10 )
 			goto tr1900;
 	} else if ( (*p) > 41 ) {
 		if ( 48 <= (*p) && (*p) <= 57 )
 			goto tr1901;
 	} else
 		goto tr1900;
 	goto tr1898;
+tr1873:
+	{
+		if (rdata_tail + 2 > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
+	}
+	goto st584;
 st584:
 	if ( ++p == pe )
 		goto _test_eof584;
@@ -56837,15 +56861,23 @@ case 598:
 	switch( (*p) ) {
 		case 32: goto tr1916;
 		case 34: goto tr1916;
 		case 44: goto tr1916;
 		case 59: goto tr1916;
 	}
 	if ( (*p) > 10 ) {
 		if ( 40 <= (*p) && (*p) <= 41 )
 			goto tr1916;
 	} else if ( (*p) >= 9 )
 		goto tr1916;
 	goto tr1868;
+tr1874:
+	{
+		if (rdata_tail + 2 > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
+	}
+	goto st599;
 st599:
 	if ( ++p == pe )
 		goto _test_eof599;
@@ -57293,309 +57325,341 @@ tr1991:
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		s->line_counter++;
 	}
 	goto st604;
 tr2013:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	goto st604;
 tr2014:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		if (s->multiline == true) {
 			ERR(ZS_LEFT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = true;
 	}
 	goto st604;
 tr2015:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		if (s->multiline == false) {
 			ERR(ZS_RIGHT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = false;
 	}
 	goto st604;
 tr2018:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		s->line_counter++;
 	}
 	goto st604;
 tr2036:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	goto st604;
 tr2037:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		if (s->multiline == true) {
 			ERR(ZS_LEFT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = true;
 	}
 	goto st604;
 tr2038:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		if (s->multiline == false) {
 			ERR(ZS_RIGHT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = false;
 	}
 	goto st604;
 tr2041:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		s->line_counter++;
 	}
 	goto st604;
@@ -58014,41 +58078,45 @@ case 604:
 	_widec = (*p);
 	if ( (*p) > 10 ) {
 		if ( 59 <= (*p) && (*p) <= 59 ) {
 			_widec = (short)(2688 + ((*p) - -128));
 			if (
  s->multiline  ) _widec += 256;
 			if (
  !s->multiline  ) _widec += 512;
 		}
 	} else if ( (*p) >= 10 ) {
 		_widec = (short)(2688 + ((*p) - -128));
 		if (
  s->multiline  ) _widec += 256;
 		if (
  !s->multiline  ) _widec += 512;
 	}
 	switch( _widec ) {
 		case 9: goto st604;
 		case 32: goto st604;
 		case 40: goto tr1931;
 		case 41: goto tr1932;
 		case 97: goto tr1933;
 		case 101: goto tr1934;
 		case 105: goto tr1935;
 		case 107: goto tr1936;
 		case 109: goto tr1937;
 		case 110: goto tr1938;
 		case 112: goto tr1939;
 		case 3082: goto tr1940;
 		case 3131: goto tr1941;
 		case 3338: goto tr1942;
 		case 3387: goto tr1942;
 		case 3594: goto tr1943;
 		case 3643: goto tr1944;
 	}
 	goto tr1921;
 tr1933:
 	{
+		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		s->svcb.param_position = rdata_tail;
 	}
 	goto st605;
@@ -58237,89 +58305,97 @@ tr1992:
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		s->buffer_length = 0;
 	}
 	goto st611;
 tr2019:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		s->buffer_length = 0;
 	}
 	goto st611;
 tr2042:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		s->buffer_length = 0;
 	}
 	goto st611;
@@ -58547,110 +58623,118 @@ tr1993:
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_check(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1430;
 tr2020:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_check(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1430;
 tr2043:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_check(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1430;
@@ -58896,119 +58980,127 @@ tr1994:
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		s->line_counter++;
 	}
 	{
 		int ret = svcb_check(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1431;
 tr2021:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		s->line_counter++;
 	}
 	{
 		int ret = svcb_check(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1431;
 tr2044:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		s->line_counter++;
 	}
 	{
 		int ret = svcb_check(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1431;
@@ -59156,41 +59248,45 @@ case 1431:
 	_widec = (*p);
 	if ( (*p) > 10 ) {
 		if ( 59 <= (*p) && (*p) <= 59 ) {
 			_widec = (short)(2688 + ((*p) - -128));
 			if (
  s->multiline  ) _widec += 256;
 			if (
  !s->multiline  ) _widec += 512;
 		}
 	} else if ( (*p) >= 10 ) {
 		_widec = (short)(2688 + ((*p) - -128));
 		if (
  s->multiline  ) _widec += 256;
 		if (
  !s->multiline  ) _widec += 512;
 	}
 	switch( _widec ) {
 		case 9: goto st604;
 		case 32: goto st604;
 		case 40: goto tr1931;
 		case 41: goto tr1932;
 		case 97: goto tr1933;
 		case 101: goto tr1934;
 		case 105: goto tr1935;
 		case 107: goto tr1936;
 		case 109: goto tr1937;
 		case 110: goto tr1938;
 		case 112: goto tr1939;
 		case 3082: goto tr1940;
 		case 3131: goto tr1941;
 		case 3338: goto tr1942;
 		case 3387: goto tr1942;
 		case 3594: goto tr1943;
 		case 3643: goto tr1944;
 	}
 	goto tr1921;
 tr1934:
 	{
+		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		s->svcb.param_position = rdata_tail;
 	}
 	goto st612;
@@ -59385,59 +59481,67 @@ tr1972:
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	goto st621;
 tr2009:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	goto st621;
 tr2032:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	goto st621;
@@ -59643,119 +59747,127 @@ tr1995:
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		s->buffer_length = 0;
 	}
 	{
 		int ret = svcb_check(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1432;
 tr2022:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		s->buffer_length = 0;
 	}
 	{
 		int ret = svcb_check(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1432;
 tr2045:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		s->buffer_length = 0;
 	}
 	{
 		int ret = svcb_check(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {goto st307;}
 		}
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1432;
@@ -60086,8 +60198,12 @@ case 627:
 	if ( (*p) == 61 )
 		goto st626;
 	goto tr1921;
 tr1935:
 	{
+		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		s->svcb.param_position = rdata_tail;
 	}
 	goto st628;
@@ -60228,22 +60344,26 @@ case 638:
 	switch( (*p) ) {
 		case 34: goto tr2009;
 		case 44: goto tr2010;
 		case 46: goto tr2011;
 	}
 	if ( 48 <= (*p) && (*p) <= 57 )
 		goto tr2011;
 	goto tr2005;
 tr2010:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	goto st639;
@@ -60308,47 +60428,51 @@ case 640:
 	_widec = (*p);
 	if ( (*p) > 10 ) {
 		if ( 59 <= (*p) && (*p) <= 59 ) {
 			_widec = (short)(2688 + ((*p) - -128));
 			if (
  s->multiline  ) _widec += 256;
 			if (
  !s->multiline  ) _widec += 512;
 		}
 	} else if ( (*p) >= 10 ) {
 		_widec = (short)(2688 + ((*p) - -128));
 		if (
  s->multiline  ) _widec += 256;
 		if (
  !s->multiline  ) _widec += 512;
 	}
 	switch( _widec ) {
 		case 9: goto tr2013;
 		case 32: goto tr2013;
 		case 40: goto tr2014;
 		case 41: goto tr2015;
 		case 44: goto tr2016;
 		case 46: goto tr2017;
 		case 3082: goto tr2018;
 		case 3131: goto tr2019;
 		case 3338: goto tr2020;
 		case 3387: goto tr2020;
 		case 3594: goto tr2021;
 		case 3643: goto tr2022;
 	}
 	if ( 48 <= _widec && _widec <= 57 )
 		goto tr2017;
 	goto tr2005;
 tr2016:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	goto st641;
@@ -60487,28 +60611,32 @@ case 649:
 	switch( (*p) ) {
 		case 34: goto tr2032;
 		case 44: goto tr2033;
 		case 46: goto tr2034;
 	}
 	if ( (*p) < 65 ) {
 		if ( 48 <= (*p) && (*p) <= 58 )
 			goto tr2034;
 	} else if ( (*p) > 70 ) {
 		if ( 97 <= (*p) && (*p) <= 102 )
 			goto tr2034;
 	} else
 		goto tr2034;
 	goto tr2005;
 tr2033:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	goto st650;
@@ -60579,53 +60707,57 @@ case 651:
 	_widec = (*p);
 	if ( (*p) > 10 ) {
 		if ( 59 <= (*p) && (*p) <= 59 ) {
 			_widec = (short)(2688 + ((*p) - -128));
 			if (
  s->multiline  ) _widec += 256;
 			if (
  !s->multiline  ) _widec += 512;
 		}
 	} else if ( (*p) >= 10 ) {
 		_widec = (short)(2688 + ((*p) - -128));
 		if (
  s->multiline  ) _widec += 256;
 		if (
  !s->multiline  ) _widec += 512;
 	}
 	switch( _widec ) {
 		case 9: goto tr2036;
 		case 32: goto tr2036;
 		case 40: goto tr2037;
 		case 41: goto tr2038;
 		case 44: goto tr2039;
 		case 46: goto tr2040;
 		case 3082: goto tr2041;
 		case 3131: goto tr2042;
 		case 3338: goto tr2043;
 		case 3387: goto tr2043;
 		case 3594: goto tr2044;
 		case 3643: goto tr2045;
 	}
 	if ( _widec < 65 ) {
 		if ( 48 <= _widec && _widec <= 58 )
 			goto tr2040;
 	} else if ( _widec > 70 ) {
 		if ( 97 <= _widec && _widec <= 102 )
 			goto tr2040;
 	} else
 		goto tr2040;
 	goto tr2005;
 tr2039:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	goto st652;
@@ -60636,16 +60768,20 @@ case 652:
 	if ( (*p) == 46 )
 		goto tr2046;
 	if ( (*p) < 65 ) {
 		if ( 48 <= (*p) && (*p) <= 58 )
 			goto tr2046;
 	} else if ( (*p) > 70 ) {
 		if ( 97 <= (*p) && (*p) <= 102 )
 			goto tr2046;
 	} else
 		goto tr2046;
 	goto tr2005;
 tr1936:
 	{
+		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		s->svcb.param_position = rdata_tail;
 	}
 	goto st653;
@@ -60786,34 +60922,38 @@ case 658:
 	_widec = (*p);
 	if ( (*p) > 10 ) {
 		if ( 59 <= (*p) && (*p) <= 59 ) {
 			_widec = (short)(2688 + ((*p) - -128));
 			if (
  s->multiline  ) _widec += 256;
 			if (
  !s->multiline  ) _widec += 512;
 		}
 	} else if ( (*p) >= 10 ) {
 		_widec = (short)(2688 + ((*p) - -128));
 		if (
  s->multiline  ) _widec += 256;
 		if (
  !s->multiline  ) _widec += 512;
 	}
 	switch( _widec ) {
 		case 9: goto tr1987;
 		case 32: goto tr1987;
 		case 40: goto tr1988;
 		case 41: goto tr1989;
 		case 3082: goto tr1991;
 		case 3131: goto tr1992;
 		case 3338: goto tr1993;
 		case 3387: goto tr1993;
 		case 3594: goto tr1994;
 		case 3643: goto tr1995;
 	}
 	goto tr1921;
 tr1937:
 	{
+		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		s->svcb.param_position = rdata_tail;
 	}
 	goto st659;
@@ -61005,11 +61145,15 @@ case 673:
 	if ( (*p) > 90 ) {
 		if ( 97 <= (*p) && (*p) <= 122 )
 			goto tr2086;
 	} else if ( (*p) >= 65 )
 		goto tr2086;
 	goto tr1921;
 tr1938:
 	{
+		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		s->svcb.param_position = rdata_tail;
 	}
 	goto st674;
@@ -61118,34 +61262,38 @@ case 688:
 	_widec = (*p);
 	if ( (*p) > 10 ) {
 		if ( 59 <= (*p) && (*p) <= 59 ) {
 			_widec = (short)(2688 + ((*p) - -128));
 			if (
  s->multiline  ) _widec += 256;
 			if (
  !s->multiline  ) _widec += 512;
 		}
 	} else if ( (*p) >= 10 ) {
 		_widec = (short)(2688 + ((*p) - -128));
 		if (
  s->multiline  ) _widec += 256;
 		if (
  !s->multiline  ) _widec += 512;
 	}
 	switch( _widec ) {
 		case 9: goto tr2101;
 		case 32: goto tr2101;
 		case 40: goto tr2102;
 		case 41: goto tr2103;
 		case 3082: goto tr2104;
 		case 3131: goto tr2105;
 		case 3338: goto tr2106;
 		case 3387: goto tr2106;
 		case 3594: goto tr2107;
 		case 3643: goto tr2108;
 	}
 	goto tr1921;
 tr1939:
 	{
+		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		s->svcb.param_position = rdata_tail;
 	}
 	goto st689;
@@ -61204,39 +61352,45 @@ tr2117:
 	{
 		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
 		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
 			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
 			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
 			)
 		   ) {
 			s->number64 *= 10;
 			s->number64 += digit_to_num[(uint8_t)(*p)];
 		} else {
 			WARN(ZS_NUMBER64_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	goto st695;
 tr2115:
 	{
 		uint16_t val = htons(2);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
+	{
+		if (rdata_tail + 2 > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
+	}
 	{
 		s->number64 = 0;
 	}
 	{
 		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
 		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
 			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
 			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
 			)
 		   ) {
 			s->number64 *= 10;
 			s->number64 += digit_to_num[(uint8_t)(*p)];
 		} else {
 			WARN(ZS_NUMBER64_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	goto st695;
@@ -61253,39 +61407,45 @@ tr2121:
 	{
 		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
 		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
 			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
 			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
 			)
 		   ) {
 			s->number64 *= 10;
 			s->number64 += digit_to_num[(uint8_t)(*p)];
 		} else {
 			WARN(ZS_NUMBER64_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	goto st696;
 tr2114:
 	{
 		uint16_t val = htons(2);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
+	{
+		if (rdata_tail + 2 > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
+	}
 	{
 		s->number64 = 0;
 	}
 	{
 		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
 		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
 			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
 			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
 			)
 		   ) {
 			s->number64 *= 10;
 			s->number64 += digit_to_num[(uint8_t)(*p)];
 		} else {
 			WARN(ZS_NUMBER64_OVERFLOW);
 			p--; {goto st307;}
 		}
 	}
 	goto st696;
@@ -63232,31 +63392,35 @@ case 845:
 	switch( (*p) ) {
 		case 32: goto tr2306;
 		case 46: goto tr2307;
 		case 59: goto tr2306;
 	}
 	if ( (*p) < 40 ) {
 		if ( 9 <= (*p) && (*p) <= 10 )
 			goto tr2306;
 	} else if ( (*p) > 41 ) {
 		if ( 48 <= (*p) && (*p) <= 57 )
 			goto tr2307;
 	} else
 		goto tr2306;
 	goto tr2304;
 tr2306:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1435;
@@ -67384,37 +67548,41 @@ case 900:
 	switch( (*p) ) {
 		case 32: goto tr2533;
 		case 46: goto tr2534;
 		case 59: goto tr2533;
 	}
 	if ( (*p) < 48 ) {
 		if ( (*p) > 10 ) {
 			if ( 40 <= (*p) && (*p) <= 41 )
 				goto tr2533;
 		} else if ( (*p) >= 9 )
 			goto tr2533;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 70 ) {
 			if ( 97 <= (*p) && (*p) <= 102 )
 				goto tr2534;
 		} else if ( (*p) >= 65 )
 			goto tr2534;
 	} else
 		goto tr2534;
 	goto tr2304;
 tr2533:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1444;
@@ -77102,239 +77270,239 @@ tr2968:
 			// Stop if required from the callback.
 			if (s->state == ZS_STATE_STOP) {
 				{p++; cs = 995; goto _out;}
 			}
 		}
 	}
 	{
 		s->line_counter++;
 	}
 	goto st995;
 tr2958:
 	{
 		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
 		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
 			s->apl.prefix_length = (uint8_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_APL);
 			p--; {goto st307;}
 		}
 	}
 	{
 		// Copy address to buffer.
 		uint8_t len;
 		switch (s->apl.addr_family) {
 		case 1:
 			len = ZS_INET4_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		case 2:
 			len = ZS_INET6_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		default:
 			WARN(ZS_BAD_APL);
 			p--; {goto st307;}
 		}
 		// Find prefix without trailing zeroes.
 		while (len > 0) {
 			if ((s->buffer[len - 1] & 255) != 0) {
 				break;
 			}
 			len--;
 		}
 		// Check for rdata overflow.
-		if (rdata_tail + 4 + len > rdata_stop) {
+		if (rdata_tail + 4 + len > rdata_stop + 1) {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {goto st307;}
 		}
 		// Write address family.
 		uint16_t af = htons(s->apl.addr_family);
 		memcpy(rdata_tail, &af, sizeof(af));
 		rdata_tail += 2;
 		// Write prefix length in bits.
 		*(rdata_tail) = s->apl.prefix_length;
 		rdata_tail += 1;
 		// Write negation flag + prefix length in bytes.
 		*(rdata_tail) = len + s->apl.excl_flag;
 		rdata_tail += 1;
 		// Write address prefix non-null data.
 		memcpy(rdata_tail, s->buffer, len);
 		rdata_tail += len;
 	}
 	goto st995;
 tr2959:
 	{
 		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
 		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
 			s->apl.prefix_length = (uint8_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_APL);
 			p--; {goto st307;}
 		}
 	}
 	{
 		// Copy address to buffer.
 		uint8_t len;
 		switch (s->apl.addr_family) {
 		case 1:
 			len = ZS_INET4_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		case 2:
 			len = ZS_INET6_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		default:
 			WARN(ZS_BAD_APL);
 			p--; {goto st307;}
 		}
 		// Find prefix without trailing zeroes.
 		while (len > 0) {
 			if ((s->buffer[len - 1] & 255) != 0) {
 				break;
 			}
 			len--;
 		}
 		// Check for rdata overflow.
-		if (rdata_tail + 4 + len > rdata_stop) {
+		if (rdata_tail + 4 + len > rdata_stop + 1) {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {goto st307;}
 		}
 		// Write address family.
 		uint16_t af = htons(s->apl.addr_family);
 		memcpy(rdata_tail, &af, sizeof(af));
 		rdata_tail += 2;
 		// Write prefix length in bits.
 		*(rdata_tail) = s->apl.prefix_length;
 		rdata_tail += 1;
 		// Write negation flag + prefix length in bytes.
 		*(rdata_tail) = len + s->apl.excl_flag;
 		rdata_tail += 1;
 		// Write address prefix non-null data.
 		memcpy(rdata_tail, s->buffer, len);
 		rdata_tail += len;
 	}
 	{
 		if (s->multiline == true) {
 			ERR(ZS_LEFT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = true;
 	}
 	goto st995;
 tr2960:
 	{
 		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
 		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
 			s->apl.prefix_length = (uint8_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_APL);
 			p--; {goto st307;}
 		}
 	}
 	{
 		// Copy address to buffer.
 		uint8_t len;
 		switch (s->apl.addr_family) {
 		case 1:
 			len = ZS_INET4_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		case 2:
 			len = ZS_INET6_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		default:
 			WARN(ZS_BAD_APL);
 			p--; {goto st307;}
 		}
 		// Find prefix without trailing zeroes.
 		while (len > 0) {
 			if ((s->buffer[len - 1] & 255) != 0) {
 				break;
 			}
 			len--;
 		}
 		// Check for rdata overflow.
-		if (rdata_tail + 4 + len > rdata_stop) {
+		if (rdata_tail + 4 + len > rdata_stop + 1) {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {goto st307;}
 		}
 		// Write address family.
 		uint16_t af = htons(s->apl.addr_family);
 		memcpy(rdata_tail, &af, sizeof(af));
 		rdata_tail += 2;
 		// Write prefix length in bits.
 		*(rdata_tail) = s->apl.prefix_length;
 		rdata_tail += 1;
 		// Write negation flag + prefix length in bytes.
 		*(rdata_tail) = len + s->apl.excl_flag;
 		rdata_tail += 1;
 		// Write address prefix non-null data.
 		memcpy(rdata_tail, s->buffer, len);
 		rdata_tail += len;
 	}
 	{
 		if (s->multiline == false) {
 			ERR(ZS_RIGHT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = false;
 	}
 	goto st995;
 tr2962:
 	{
 		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
 		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
 			s->apl.prefix_length = (uint8_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_APL);
 			p--; {goto st307;}
 		}
 	}
 	{
 		// Copy address to buffer.
 		uint8_t len;
 		switch (s->apl.addr_family) {
 		case 1:
 			len = ZS_INET4_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		case 2:
 			len = ZS_INET6_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		default:
 			WARN(ZS_BAD_APL);
 			p--; {goto st307;}
 		}
 		// Find prefix without trailing zeroes.
 		while (len > 0) {
 			if ((s->buffer[len - 1] & 255) != 0) {
 				break;
 			}
 			len--;
 		}
 		// Check for rdata overflow.
-		if (rdata_tail + 4 + len > rdata_stop) {
+		if (rdata_tail + 4 + len > rdata_stop + 1) {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {goto st307;}
 		}
 		// Write address family.
 		uint16_t af = htons(s->apl.addr_family);
 		memcpy(rdata_tail, &af, sizeof(af));
 		rdata_tail += 2;
 		// Write prefix length in bits.
 		*(rdata_tail) = s->apl.prefix_length;
 		rdata_tail += 1;
 		// Write negation flag + prefix length in bytes.
 		*(rdata_tail) = len + s->apl.excl_flag;
 		rdata_tail += 1;
 		// Write address prefix non-null data.
 		memcpy(rdata_tail, s->buffer, len);
 		rdata_tail += len;
 	}
 	{
 		s->line_counter++;
 	}
 	goto st995;
@@ -77558,62 +77726,62 @@ tr2967:
 	{
 		if (s->buffer_length < sizeof(s->buffer) - 1) {
 			s->buffer[s->buffer_length++] = (*p);
 		}
 	}
 	goto st1002;
 tr2963:
 	{
 		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
 		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
 			s->apl.prefix_length = (uint8_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_APL);
 			p--; {goto st307;}
 		}
 	}
 	{
 		// Copy address to buffer.
 		uint8_t len;
 		switch (s->apl.addr_family) {
 		case 1:
 			len = ZS_INET4_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		case 2:
 			len = ZS_INET6_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		default:
 			WARN(ZS_BAD_APL);
 			p--; {goto st307;}
 		}
 		// Find prefix without trailing zeroes.
 		while (len > 0) {
 			if ((s->buffer[len - 1] & 255) != 0) {
 				break;
 			}
 			len--;
 		}
 		// Check for rdata overflow.
-		if (rdata_tail + 4 + len > rdata_stop) {
+		if (rdata_tail + 4 + len > rdata_stop + 1) {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {goto st307;}
 		}
 		// Write address family.
 		uint16_t af = htons(s->apl.addr_family);
 		memcpy(rdata_tail, &af, sizeof(af));
 		rdata_tail += 2;
 		// Write prefix length in bits.
 		*(rdata_tail) = s->apl.prefix_length;
 		rdata_tail += 1;
 		// Write negation flag + prefix length in bytes.
 		*(rdata_tail) = len + s->apl.excl_flag;
 		rdata_tail += 1;
 		// Write address prefix non-null data.
 		memcpy(rdata_tail, s->buffer, len);
 		rdata_tail += len;
 	}
 	{
 		s->buffer_length = 0;
 	}
 	goto st1002;
@@ -77648,60 +77816,60 @@ tr2947:
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1457;
 tr2964:
 	{
 		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
 		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
 			s->apl.prefix_length = (uint8_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_APL);
 			p--; {goto st307;}
 		}
 	}
 	{
 		// Copy address to buffer.
 		uint8_t len;
 		switch (s->apl.addr_family) {
 		case 1:
 			len = ZS_INET4_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		case 2:
 			len = ZS_INET6_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		default:
 			WARN(ZS_BAD_APL);
 			p--; {goto st307;}
 		}
 		// Find prefix without trailing zeroes.
 		while (len > 0) {
 			if ((s->buffer[len - 1] & 255) != 0) {
 				break;
 			}
 			len--;
 		}
 		// Check for rdata overflow.
-		if (rdata_tail + 4 + len > rdata_stop) {
+		if (rdata_tail + 4 + len > rdata_stop + 1) {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {goto st307;}
 		}
 		// Write address family.
 		uint16_t af = htons(s->apl.addr_family);
 		memcpy(rdata_tail, &af, sizeof(af));
 		rdata_tail += 2;
 		// Write prefix length in bits.
 		*(rdata_tail) = s->apl.prefix_length;
 		rdata_tail += 1;
 		// Write negation flag + prefix length in bytes.
 		*(rdata_tail) = len + s->apl.excl_flag;
 		rdata_tail += 1;
 		// Write address prefix non-null data.
 		memcpy(rdata_tail, s->buffer, len);
 		rdata_tail += len;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1457;
@@ -77714,66 +77882,66 @@ tr2948:
 	{
 		s->line_counter++;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1458;
 tr2965:
 	{
 		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
 		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
 			s->apl.prefix_length = (uint8_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_APL);
 			p--; {goto st307;}
 		}
 	}
 	{
 		// Copy address to buffer.
 		uint8_t len;
 		switch (s->apl.addr_family) {
 		case 1:
 			len = ZS_INET4_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		case 2:
 			len = ZS_INET6_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		default:
 			WARN(ZS_BAD_APL);
 			p--; {goto st307;}
 		}
 		// Find prefix without trailing zeroes.
 		while (len > 0) {
 			if ((s->buffer[len - 1] & 255) != 0) {
 				break;
 			}
 			len--;
 		}
 		// Check for rdata overflow.
-		if (rdata_tail + 4 + len > rdata_stop) {
+		if (rdata_tail + 4 + len > rdata_stop + 1) {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {goto st307;}
 		}
 		// Write address family.
 		uint16_t af = htons(s->apl.addr_family);
 		memcpy(rdata_tail, &af, sizeof(af));
 		rdata_tail += 2;
 		// Write prefix length in bits.
 		*(rdata_tail) = s->apl.prefix_length;
 		rdata_tail += 1;
 		// Write negation flag + prefix length in bytes.
 		*(rdata_tail) = len + s->apl.excl_flag;
 		rdata_tail += 1;
 		// Write address prefix non-null data.
 		memcpy(rdata_tail, s->buffer, len);
 		rdata_tail += len;
 	}
 	{
 		s->line_counter++;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1458;
@@ -77890,66 +78058,66 @@ tr2949:
 	{
 		s->buffer_length = 0;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1459;
 tr2966:
 	{
 		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
 		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
 			s->apl.prefix_length = (uint8_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_APL);
 			p--; {goto st307;}
 		}
 	}
 	{
 		// Copy address to buffer.
 		uint8_t len;
 		switch (s->apl.addr_family) {
 		case 1:
 			len = ZS_INET4_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		case 2:
 			len = ZS_INET6_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		default:
 			WARN(ZS_BAD_APL);
 			p--; {goto st307;}
 		}
 		// Find prefix without trailing zeroes.
 		while (len > 0) {
 			if ((s->buffer[len - 1] & 255) != 0) {
 				break;
 			}
 			len--;
 		}
 		// Check for rdata overflow.
-		if (rdata_tail + 4 + len > rdata_stop) {
+		if (rdata_tail + 4 + len > rdata_stop + 1) {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {goto st307;}
 		}
 		// Write address family.
 		uint16_t af = htons(s->apl.addr_family);
 		memcpy(rdata_tail, &af, sizeof(af));
 		rdata_tail += 2;
 		// Write prefix length in bits.
 		*(rdata_tail) = s->apl.prefix_length;
 		rdata_tail += 1;
 		// Write negation flag + prefix length in bytes.
 		*(rdata_tail) = len + s->apl.excl_flag;
 		rdata_tail += 1;
 		// Write address prefix non-null data.
 		memcpy(rdata_tail, s->buffer, len);
 		rdata_tail += len;
 	}
 	{
 		s->buffer_length = 0;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1459;
@@ -80235,38 +80403,46 @@ tr3124:
 			// Stop if required from the callback.
 			if (s->state == ZS_STATE_STOP) {
 				{p++; cs = 1037; goto _out;}
 			}
 		}
 	}
 	{
 		s->line_counter++;
 	}
 	goto st1037;
 tr3154:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	goto st1037;
 tr3199:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	goto st1037;
@@ -80303,125 +80479,149 @@ tr3253:
 	{
 		rdata_tail += s->dname_tmp_length;
 	}
 	{
 		s->line_counter++;
 	}
 	goto st1037;
 tr3155:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		if (s->multiline == true) {
 			ERR(ZS_LEFT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = true;
 	}
 	goto st1037;
 tr3156:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		if (s->multiline == false) {
 			ERR(ZS_RIGHT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = false;
 	}
 	goto st1037;
 tr3164:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->line_counter++;
 	}
 	goto st1037;
 tr3200:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		if (s->multiline == true) {
 			ERR(ZS_LEFT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = true;
 	}
 	goto st1037;
 tr3201:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		if (s->multiline == false) {
 			ERR(ZS_RIGHT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = false;
 	}
 	goto st1037;
 tr3209:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->line_counter++;
 	}
 	goto st1037;
@@ -80545,21 +80745,25 @@ tr3108:
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1466;
 tr3163:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1466;
@@ -80567,24 +80771,28 @@ tr3252:
 	{
 		rdata_tail += s->dname_tmp_length;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1466;
 tr3208:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1466;
@@ -80609,41 +80817,49 @@ tr3254:
 	{
 		rdata_tail += s->dname_tmp_length;
 	}
 	{
 		s->buffer_length = 0;
 	}
 	goto st1039;
 tr3165:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->buffer_length = 0;
 	}
 	goto st1039;
 tr3210:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->buffer_length = 0;
 	}
 	goto st1039;
@@ -80714,38 +80930,46 @@ tr3126:
 			// Stop if required from the callback.
 			if (s->state == ZS_STATE_STOP) {
 				{p++; cs = 1040; goto _out;}
 			}
 		}
 	}
 	{
 		s->line_counter++;
 	}
 	goto st1040;
 tr3157:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	goto st1040;
 tr3202:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	goto st1040;
@@ -80782,125 +81006,149 @@ tr3257:
 	{
 		rdata_tail += s->dname_tmp_length;
 	}
 	{
 		s->line_counter++;
 	}
 	goto st1040;
 tr3158:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		if (s->multiline == true) {
 			ERR(ZS_LEFT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = true;
 	}
 	goto st1040;
 tr3159:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		if (s->multiline == false) {
 			ERR(ZS_RIGHT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = false;
 	}
 	goto st1040;
 tr3168:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->line_counter++;
 	}
 	goto st1040;
 tr3203:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		if (s->multiline == true) {
 			ERR(ZS_LEFT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = true;
 	}
 	goto st1040;
 tr3204:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		if (s->multiline == false) {
 			ERR(ZS_RIGHT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = false;
 	}
 	goto st1040;
 tr3213:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->line_counter++;
 	}
 	goto st1040;
@@ -80985,41 +81233,49 @@ tr3258:
 	{
 		rdata_tail += s->dname_tmp_length;
 	}
 	{
 		s->buffer_length = 0;
 	}
 	goto st1041;
 tr3169:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->buffer_length = 0;
 	}
 	goto st1041;
 tr3214:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->buffer_length = 0;
 	}
 	goto st1041;
@@ -81060,47 +81316,55 @@ tr3115:
 	{
 		s->line_counter++;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1467;
 tr3170:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->line_counter++;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1467;
 tr3215:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->line_counter++;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1467;
@@ -81184,47 +81448,55 @@ tr3116:
 	{
 		s->buffer_length = 0;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1468;
 tr3171:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->buffer_length = 0;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1468;
 tr3216:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->buffer_length = 0;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1468;
@@ -81306,38 +81578,46 @@ tr3128:
 			// Stop if required from the callback.
 			if (s->state == ZS_STATE_STOP) {
 				{p++; cs = 1042; goto _out;}
 			}
 		}
 	}
 	{
 		s->line_counter++;
 	}
 	goto st1042;
 tr3160:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	goto st1042;
 tr3205:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	goto st1042;
@@ -81374,125 +81654,149 @@ tr3261:
 	{
 		rdata_tail += s->dname_tmp_length;
 	}
 	{
 		s->line_counter++;
 	}
 	goto st1042;
 tr3161:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		if (s->multiline == true) {
 			ERR(ZS_LEFT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = true;
 	}
 	goto st1042;
 tr3162:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		if (s->multiline == false) {
 			ERR(ZS_RIGHT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = false;
 	}
 	goto st1042;
 tr3172:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->line_counter++;
 	}
 	goto st1042;
 tr3206:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		if (s->multiline == true) {
 			ERR(ZS_LEFT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = true;
 	}
 	goto st1042;
 tr3207:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		if (s->multiline == false) {
 			ERR(ZS_RIGHT_PARENTHESIS);
 			p--; {goto st307;}
 		}
 		s->multiline = false;
 	}
 	goto st1042;
 tr3217:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->line_counter++;
 	}
 	goto st1042;
@@ -81636,47 +81940,55 @@ tr3111:
 	{
 		s->line_counter++;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1469;
 tr3166:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->line_counter++;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1469;
 tr3211:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->line_counter++;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1469;
@@ -81787,47 +82099,55 @@ tr3112:
 	{
 		s->buffer_length = 0;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1470;
 tr3167:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->buffer_length = 0;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1470;
 tr3212:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->buffer_length = 0;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1470;
@@ -81891,41 +82211,49 @@ tr3262:
 	{
 		rdata_tail += s->dname_tmp_length;
 	}
 	{
 		s->buffer_length = 0;
 	}
 	goto st1043;
 tr3173:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->buffer_length = 0;
 	}
 	goto st1043;
 tr3218:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->buffer_length = 0;
 	}
 	goto st1043;
@@ -81981,47 +82309,55 @@ tr3119:
 	{
 		s->line_counter++;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1471;
 tr3174:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->line_counter++;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1471;
 tr3219:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->line_counter++;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1471;
@@ -82176,47 +82512,55 @@ tr3120:
 	{
 		s->buffer_length = 0;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1472;
 tr3175:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		s->buffer_length = 0;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1472;
 tr3220:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	{
 		s->buffer_length = 0;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1472;
@@ -95606,31 +95950,35 @@ case 1347:
 	switch( (*p) ) {
 		case 32: goto tr4086;
 		case 46: goto tr4087;
 		case 59: goto tr4086;
 	}
 	if ( (*p) < 40 ) {
 		if ( 9 <= (*p) && (*p) <= 10 )
 			goto tr4086;
 	} else if ( (*p) > 41 ) {
 		if ( 48 <= (*p) && (*p) <= 57 )
 			goto tr4087;
 	} else
 		goto tr4086;
 	goto tr2304;
 tr4086:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {goto st307;}
 		}
 	}
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {goto st307;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	{
 		p--; {cs = stack[--top];goto _again;}
 	}
 	goto st1486;
diff --git a/src/libzscanner/scanner.c.t0 b/src/libzscanner/scanner.c.t0
index 3f9361be0..b316b5d55 100644
--- a/src/libzscanner/scanner.c.t0
+++ b/src/libzscanner/scanner.c.t0
@@ -92,806 +92,807 @@ static inline void window_add_bit(const uint16_t type, zs_scanner_t *s) {
 static const short _zone_scanner_actions[] = {
 	0, 1, 0, 1, 1, 1, 2, 1,
 	3, 1, 4, 1, 5, 1, 7, 1,
 	8, 1, 10, 1, 13, 1, 14, 1,
 	15, 1, 17, 1, 18, 1, 23, 1,
 	24, 1, 26, 1, 27, 1, 29, 1,
 	31, 1, 33, 1, 35, 1, 36, 1,
 	45, 1, 46, 1, 47, 1, 49, 1,
 	51, 1, 52, 1, 53, 1, 54, 1,
 	58, 1, 59, 1, 61, 1, 63, 1,
 	65, 1, 68, 1, 69, 1, 73, 1,
 	74, 1, 77, 1, 78, 1, 81, 1,
 	84, 1, 86, 1, 87, 1, 88, 1,
 	89, 1, 90, 1, 91, 1, 92, 1,
 	93, 1, 95, 1, 97, 1, 99, 1,
 	103, 1, 104, 1, 108, 1, 109, 1,
 	113, 1, 114, 1, 115, 1, 116, 1,
 	117, 1, 118, 1, 119, 1, 120, 1,
 	121, 1, 122, 1, 123, 1, 124, 1,
 	125, 1, 126, 1, 128, 1, 129, 1,
 	130, 1, 131, 1, 145, 1, 146, 1,
 	148, 1, 149, 1, 150, 1, 151, 1,
 	159, 1, 160, 1, 161, 1, 162, 1,
 	163, 1, 164, 1, 165, 1, 166, 1,
 	167, 1, 168, 1, 169, 1, 170, 1,
 	171, 1, 172, 1, 173, 1, 174, 1,
 	175, 1, 176, 1, 177, 1, 178, 1,
 	179, 1, 180, 1, 181, 1, 182, 1,
 	183, 1, 184, 1, 185, 1, 186, 1,
 	187, 1, 188, 1, 189, 1, 190, 1,
 	191, 1, 192, 1, 193, 1, 194, 1,
 	195, 1, 196, 1, 197, 1, 198, 1,
 	199, 1, 200, 1, 201, 1, 202, 1,
 	203, 1, 204, 1, 205, 1, 206, 1,
 	207, 1, 208, 1, 209, 1, 210, 1,
 	211, 1, 212, 1, 213, 1, 214, 1,
 	215, 1, 216, 1, 217, 1, 218, 1,
 	219, 1, 220, 1, 221, 1, 222, 1,
 	223, 1, 224, 1, 225, 1, 226, 1,
 	227, 1, 228, 1, 229, 1, 230, 1,
 	231, 1, 232, 1, 233, 1, 234, 1,
 	235, 1, 236, 1, 237, 1, 238, 1,
 	239, 1, 240, 1, 241, 1, 242, 1,
 	243, 1, 244, 1, 245, 1, 246, 1,
 	247, 1, 248, 1, 249, 1, 250, 1,
 	251, 1, 252, 1, 253, 1, 254, 1,
 	255, 1, 256, 1, 258, 1, 260, 1,
 	261, 1, 262, 1, 263, 1, 270, 1,
 	271, 1, 276, 1, 278, 1, 283, 1,
 	286, 1, 288, 1, 289, 1, 290, 1,
-	291, 1, 296, 1, 298, 1, 299, 1,
-	300, 1, 301, 1, 303, 1, 304, 1,
-	305, 1, 306, 1, 308, 2, 0, 49,
-	2, 1, 0, 2, 1, 304, 2, 1,
-	357, 2, 2, 5, 2, 2, 7, 2,
-	3, 5, 2, 3, 7, 2, 4, 0,
-	2, 4, 5, 2, 4, 7, 2, 4,
-	304, 2, 5, 2, 2, 5, 3, 2,
-	5, 4, 2, 5, 7, 2, 6, 1,
-	2, 7, 1, 2, 7, 2, 2, 7,
-	3, 2, 7, 4, 2, 7, 5, 2,
-	7, 32, 2, 8, 73, 2, 8, 77,
-	2, 9, 10, 2, 11, 1, 2, 12,
-	1, 2, 13, 14, 2, 16, 17, 2,
-	18, 14, 2, 18, 15, 2, 19, 24,
-	2, 19, 77, 2, 19, 84, 2, 20,
-	0, 2, 20, 7, 2, 22, 0, 2,
-	23, 13, 2, 26, 69, 2, 26, 108,
-	2, 26, 119, 2, 27, 0, 2, 27,
-	1, 2, 27, 2, 2, 27, 3, 2,
-	27, 4, 2, 27, 259, 2, 28, 69,
-	2, 28, 113, 2, 29, 291, 2, 29,
-	295, 2, 30, 25, 2, 31, 1, 2,
-	31, 2, 2, 31, 3, 2, 31, 4,
-	2, 31, 7, 2, 31, 93, 2, 32,
-	7, 2, 33, 8, 2, 33, 303, 2,
-	33, 308, 2, 34, 25, 2, 35, 0,
-	2, 35, 1, 2, 35, 2, 2, 35,
-	3, 2, 35, 4, 2, 35, 259, 2,
-	35, 297, 2, 36, 41, 2, 37, 36,
-	2, 38, 73, 2, 38, 276, 2, 38,
-	288, 2, 38, 289, 2, 38, 303, 2,
-	38, 308, 2, 42, 264, 2, 42, 265,
-	2, 42, 266, 2, 42, 267, 2, 42,
-	268, 2, 42, 269, 2, 45, 0, 2,
-	45, 1, 2, 45, 2, 2, 45, 3,
-	2, 45, 4, 2, 46, 0, 2, 46,
-	1, 2, 46, 2, 2, 46, 3, 2,
-	46, 4, 2, 46, 259, 2, 46, 291,
-	2, 47, 0, 2, 47, 1, 2, 47,
-	2, 2, 47, 3, 2, 47, 4, 2,
-	48, 302, 2, 49, 1, 2, 49, 2,
-	2, 49, 3, 2, 49, 4, 2, 56,
-	7, 2, 56, 47, 2, 56, 93, 2,
-	57, 58, 2, 59, 1, 2, 59, 2,
-	2, 59, 3, 2, 59, 4, 2, 60,
-	303, 2, 62, 63, 2, 64, 65, 2,
-	66, 68, 2, 68, 0, 2, 68, 61,
-	2, 71, 0, 2, 71, 303, 2, 75,
-	23, 2, 79, 69, 2, 80, 7, 2,
-	81, 8, 2, 82, 23, 2, 84, 8,
-	2, 90, 91, 2, 92, 1, 2, 92,
-	2, 2, 92, 3, 2, 92, 4, 2,
-	93, 1, 2, 93, 2, 2, 93, 3,
-	2, 93, 4, 2, 93, 7, 2, 94,
-	95, 2, 96, 288, 2, 96, 303, 2,
-	97, 98, 2, 99, 100, 2, 101, 102,
-	2, 101, 103, 2, 101, 104, 2, 105,
-	106, 2, 107, 303, 2, 110, 303, 2,
-	111, 0, 2, 127, 303, 2, 129, 0,
-	2, 130, 0, 2, 131, 0, 2, 132,
-	0, 2, 133, 0, 2, 134, 0, 2,
-	135, 0, 2, 136, 0, 2, 137, 0,
-	2, 138, 0, 2, 139, 0, 2, 140,
-	0, 2, 141, 0, 2, 142, 0, 2,
-	143, 0, 2, 144, 0, 2, 146, 0,
-	2, 147, 0, 2, 148, 0, 2, 149,
-	0, 2, 150, 0, 2, 151, 0, 2,
-	152, 0, 2, 153, 0, 2, 154, 0,
-	2, 155, 0, 2, 156, 303, 2, 157,
-	303, 2, 158, 303, 2, 159, 1, 2,
-	159, 2, 2, 159, 3, 2, 159, 4,
-	2, 160, 1, 2, 160, 2, 2, 160,
-	3, 2, 160, 4, 2, 161, 1, 2,
-	161, 2, 2, 161, 3, 2, 161, 4,
-	2, 162, 1, 2, 162, 2, 2, 162,
-	3, 2, 162, 4, 2, 163, 1, 2,
-	163, 2, 2, 163, 3, 2, 163, 4,
-	2, 164, 1, 2, 164, 2, 2, 164,
-	3, 2, 164, 4, 2, 165, 1, 2,
-	165, 2, 2, 165, 3, 2, 165, 4,
-	2, 166, 1, 2, 166, 2, 2, 166,
-	3, 2, 166, 4, 2, 167, 1, 2,
-	167, 2, 2, 167, 3, 2, 167, 4,
-	2, 168, 1, 2, 168, 2, 2, 168,
-	3, 2, 168, 4, 2, 169, 1, 2,
-	169, 2, 2, 169, 3, 2, 169, 4,
-	2, 170, 1, 2, 170, 2, 2, 170,
-	3, 2, 170, 4, 2, 171, 1, 2,
-	171, 2, 2, 171, 3, 2, 171, 4,
-	2, 172, 1, 2, 172, 2, 2, 172,
-	3, 2, 172, 4, 2, 173, 1, 2,
-	173, 2, 2, 173, 3, 2, 173, 4,
-	2, 174, 1, 2, 174, 2, 2, 174,
-	3, 2, 174, 4, 2, 175, 1, 2,
-	175, 2, 2, 175, 3, 2, 175, 4,
-	2, 176, 1, 2, 176, 2, 2, 176,
-	3, 2, 176, 4, 2, 177, 1, 2,
-	177, 2, 2, 177, 3, 2, 177, 4,
-	2, 178, 1, 2, 178, 2, 2, 178,
-	3, 2, 178, 4, 2, 179, 1, 2,
-	179, 2, 2, 179, 3, 2, 179, 4,
-	2, 180, 1, 2, 180, 2, 2, 180,
-	3, 2, 180, 4, 2, 181, 1, 2,
-	181, 2, 2, 181, 3, 2, 181, 4,
-	2, 182, 1, 2, 182, 2, 2, 182,
-	3, 2, 182, 4, 2, 183, 1, 2,
-	183, 2, 2, 183, 3, 2, 183, 4,
-	2, 184, 1, 2, 184, 2, 2, 184,
-	3, 2, 184, 4, 2, 185, 1, 2,
-	185, 2, 2, 185, 3, 2, 185, 4,
-	2, 186, 1, 2, 186, 2, 2, 186,
-	3, 2, 186, 4, 2, 187, 1, 2,
-	187, 2, 2, 187, 3, 2, 187, 4,
-	2, 188, 1, 2, 188, 2, 2, 188,
-	3, 2, 188, 4, 2, 189, 1, 2,
-	189, 2, 2, 189, 3, 2, 189, 4,
-	2, 190, 1, 2, 190, 2, 2, 190,
-	3, 2, 190, 4, 2, 191, 1, 2,
-	191, 2, 2, 191, 3, 2, 191, 4,
-	2, 192, 1, 2, 192, 2, 2, 192,
-	3, 2, 192, 4, 2, 193, 1, 2,
-	193, 2, 2, 193, 3, 2, 193, 4,
-	2, 194, 1, 2, 194, 2, 2, 194,
-	3, 2, 194, 4, 2, 195, 1, 2,
-	195, 2, 2, 195, 3, 2, 195, 4,
-	2, 196, 1, 2, 196, 2, 2, 196,
-	3, 2, 196, 4, 2, 197, 1, 2,
-	197, 2, 2, 197, 3, 2, 197, 4,
-	2, 198, 1, 2, 198, 2, 2, 198,
-	3, 2, 198, 4, 2, 199, 1, 2,
-	199, 2, 2, 199, 3, 2, 199, 4,
-	2, 200, 1, 2, 200, 2, 2, 200,
-	3, 2, 200, 4, 2, 201, 1, 2,
-	201, 2, 2, 201, 3, 2, 201, 4,
-	2, 202, 1, 2, 202, 2, 2, 202,
-	3, 2, 202, 4, 2, 203, 1, 2,
-	203, 2, 2, 203, 3, 2, 203, 4,
-	2, 204, 1, 2, 204, 2, 2, 204,
-	3, 2, 204, 4, 2, 205, 1, 2,
-	205, 2, 2, 205, 3, 2, 205, 4,
-	2, 206, 1, 2, 206, 2, 2, 206,
-	3, 2, 206, 4, 2, 207, 1, 2,
-	207, 2, 2, 207, 3, 2, 207, 4,
-	2, 208, 1, 2, 208, 2, 2, 208,
-	3, 2, 208, 4, 2, 209, 1, 2,
-	209, 2, 2, 209, 3, 2, 209, 4,
-	2, 210, 1, 2, 210, 2, 2, 210,
-	3, 2, 210, 4, 2, 211, 1, 2,
-	211, 2, 2, 211, 3, 2, 211, 4,
-	2, 212, 1, 2, 212, 2, 2, 212,
-	3, 2, 212, 4, 2, 213, 1, 2,
-	213, 2, 2, 213, 3, 2, 213, 4,
-	2, 214, 1, 2, 214, 2, 2, 214,
-	3, 2, 214, 4, 2, 215, 1, 2,
-	215, 2, 2, 215, 3, 2, 215, 4,
-	2, 216, 1, 2, 216, 2, 2, 216,
-	3, 2, 216, 4, 2, 217, 1, 2,
-	217, 2, 2, 217, 3, 2, 217, 4,
-	2, 218, 1, 2, 218, 2, 2, 218,
-	3, 2, 218, 4, 2, 219, 1, 2,
-	219, 2, 2, 219, 3, 2, 219, 4,
-	2, 220, 1, 2, 220, 2, 2, 220,
-	3, 2, 220, 4, 2, 221, 1, 2,
-	221, 2, 2, 221, 3, 2, 221, 4,
-	2, 222, 1, 2, 222, 2, 2, 222,
-	3, 2, 222, 4, 2, 223, 1, 2,
-	223, 2, 2, 223, 3, 2, 223, 4,
-	2, 224, 1, 2, 224, 2, 2, 224,
-	3, 2, 224, 4, 2, 225, 1, 2,
-	225, 2, 2, 225, 3, 2, 225, 4,
-	2, 226, 1, 2, 226, 2, 2, 226,
-	3, 2, 226, 4, 2, 227, 1, 2,
-	227, 2, 2, 227, 3, 2, 227, 4,
-	2, 228, 1, 2, 228, 2, 2, 228,
-	3, 2, 228, 4, 2, 229, 1, 2,
-	229, 2, 2, 229, 3, 2, 229, 4,
-	2, 230, 1, 2, 230, 2, 2, 230,
-	3, 2, 230, 4, 2, 231, 1, 2,
-	231, 2, 2, 231, 3, 2, 231, 4,
-	2, 232, 1, 2, 232, 2, 2, 232,
-	3, 2, 232, 4, 2, 233, 1, 2,
-	233, 2, 2, 233, 3, 2, 233, 4,
-	2, 234, 1, 2, 234, 2, 2, 234,
-	3, 2, 234, 4, 2, 235, 1, 2,
-	235, 2, 2, 235, 3, 2, 235, 4,
-	2, 236, 1, 2, 236, 2, 2, 236,
-	3, 2, 236, 4, 2, 237, 1, 2,
-	237, 2, 2, 237, 3, 2, 237, 4,
-	2, 238, 1, 2, 238, 2, 2, 238,
-	3, 2, 238, 4, 2, 239, 1, 2,
-	239, 2, 2, 239, 3, 2, 239, 4,
-	2, 240, 1, 2, 240, 2, 2, 240,
-	3, 2, 240, 4, 2, 241, 1, 2,
-	241, 2, 2, 241, 3, 2, 241, 4,
-	2, 242, 1, 2, 242, 2, 2, 242,
-	3, 2, 242, 4, 2, 243, 1, 2,
-	243, 2, 2, 243, 3, 2, 243, 4,
-	2, 244, 1, 2, 244, 2, 2, 244,
-	3, 2, 244, 4, 2, 245, 1, 2,
-	245, 2, 2, 245, 3, 2, 245, 4,
-	2, 246, 1, 2, 246, 2, 2, 246,
-	3, 2, 246, 4, 2, 247, 1, 2,
-	247, 2, 2, 247, 3, 2, 247, 4,
-	2, 248, 1, 2, 248, 2, 2, 248,
-	3, 2, 248, 4, 2, 249, 1, 2,
-	249, 2, 2, 249, 3, 2, 249, 4,
-	2, 250, 1, 2, 250, 2, 2, 250,
-	3, 2, 250, 4, 2, 251, 1, 2,
-	251, 2, 2, 251, 3, 2, 251, 4,
-	2, 252, 1, 2, 252, 2, 2, 252,
-	3, 2, 252, 4, 2, 253, 1, 2,
-	253, 2, 2, 253, 3, 2, 253, 4,
-	2, 254, 1, 2, 254, 2, 2, 254,
-	3, 2, 254, 4, 2, 255, 1, 2,
-	255, 2, 2, 255, 3, 2, 255, 4,
-	2, 256, 1, 2, 256, 2, 2, 256,
-	3, 2, 256, 4, 2, 257, 0, 2,
-	260, 1, 2, 260, 2, 2, 260, 3,
-	2, 260, 4, 2, 261, 1, 2, 261,
-	2, 2, 261, 3, 2, 261, 4, 2,
-	262, 1, 2, 262, 2, 2, 262, 3,
-	2, 262, 4, 2, 263, 1, 2, 263,
-	2, 2, 263, 3, 2, 263, 4, 2,
-	270, 1, 2, 270, 2, 2, 270, 3,
-	2, 270, 4, 2, 271, 1, 2, 271,
-	2, 2, 271, 3, 2, 271, 4, 2,
-	274, 0, 2, 275, 303, 2, 277, 108,
-	2, 282, 108, 2, 286, 1, 2, 286,
-	2, 2, 286, 3, 2, 286, 4, 2,
-	287, 0, 2, 291, 1, 2, 291, 2,
-	2, 291, 3, 2, 291, 4, 2, 303,
-	8, 2, 304, 1, 2, 304, 4, 2,
-	307, 304, 2, 308, 8, 2, 308, 303,
-	2, 309, 302, 2, 310, 302, 2, 311,
-	302, 2, 312, 302, 2, 313, 302, 2,
-	314, 302, 2, 315, 302, 2, 316, 302,
-	2, 317, 302, 2, 318, 302, 2, 319,
-	302, 2, 320, 302, 2, 321, 302, 2,
-	322, 302, 2, 323, 302, 2, 324, 302,
-	2, 325, 302, 2, 326, 302, 2, 327,
-	302, 2, 328, 302, 2, 329, 302, 2,
-	330, 302, 2, 331, 302, 2, 332, 302,
-	2, 333, 302, 2, 334, 302, 2, 335,
-	302, 2, 336, 302, 2, 337, 302, 2,
-	338, 302, 2, 339, 302, 2, 340, 302,
-	2, 341, 302, 2, 342, 302, 2, 343,
-	302, 2, 344, 302, 2, 345, 302, 2,
-	346, 302, 2, 347, 302, 2, 348, 302,
-	2, 349, 302, 2, 350, 302, 2, 351,
-	302, 2, 352, 302, 2, 353, 302, 2,
-	354, 302, 2, 355, 302, 2, 356, 302,
-	2, 357, 1, 3, 0, 49, 1, 3,
-	0, 49, 2, 3, 0, 49, 3, 3,
-	0, 49, 4, 3, 1, 7, 357, 3,
-	1, 32, 7, 3, 1, 71, 0, 3,
-	1, 111, 0, 3, 1, 257, 0, 3,
-	1, 274, 0, 3, 1, 287, 0, 3,
-	1, 304, 357, 3, 2, 7, 32, 3,
-	2, 32, 7, 3, 3, 7, 32, 3,
-	3, 32, 7, 3, 4, 7, 32, 3,
-	4, 32, 7, 3, 4, 71, 0, 3,
-	4, 111, 0, 3, 4, 257, 0, 3,
-	4, 274, 0, 3, 4, 287, 0, 3,
-	4, 304, 7, 3, 5, 7, 2, 3,
-	5, 7, 3, 3, 5, 7, 4, 3,
-	6, 1, 357, 3, 6, 357, 1, 3,
-	7, 2, 5, 3, 7, 2, 32, 3,
-	7, 3, 5, 3, 7, 3, 32, 3,
-	7, 4, 5, 3, 7, 4, 32, 3,
-	7, 357, 1, 3, 9, 11, 1, 3,
-	15, 21, 0, 3, 20, 7, 2, 3,
-	20, 7, 3, 3, 20, 7, 4, 3,
-	20, 83, 7, 3, 23, 13, 14, 3,
-	27, 71, 0, 3, 27, 293, 29, 3,
-	28, 94, 95, 3, 29, 291, 1, 3,
-	29, 291, 2, 3, 29, 291, 3, 3,
-	29, 291, 4, 3, 29, 295, 291, 3,
-	31, 1, 93, 3, 31, 2, 7, 3,
-	31, 2, 93, 3, 31, 3, 7, 3,
-	31, 3, 93, 3, 31, 4, 7, 3,
-	31, 4, 93, 3, 31, 93, 7, 3,
-	31, 307, 304, 3, 31, 309, 302, 3,
-	32, 1, 7, 3, 32, 2, 7, 3,
-	32, 3, 7, 3, 32, 4, 7, 3,
-	33, 89, 8, 3, 33, 303, 8, 3,
-	33, 308, 8, 3, 33, 308, 303, 3,
-	35, 1, 0, 3, 35, 4, 0, 3,
-	37, 36, 304, 3, 38, 156, 303, 3,
-	38, 158, 303, 3, 38, 308, 8, 3,
-	38, 308, 303, 3, 40, 42, 264, 3,
-	40, 42, 265, 3, 40, 42, 266, 3,
-	40, 42, 267, 3, 40, 42, 268, 3,
-	40, 42, 269, 3, 42, 264, 1, 3,
-	42, 264, 2, 3, 42, 264, 3, 3,
-	42, 264, 4, 3, 42, 265, 1, 3,
-	42, 265, 2, 3, 42, 265, 3, 3,
-	42, 265, 4, 3, 42, 266, 1, 3,
-	42, 266, 2, 3, 42, 266, 3, 3,
-	42, 266, 4, 3, 42, 267, 1, 3,
-	42, 267, 2, 3, 42, 267, 3, 3,
-	42, 267, 4, 3, 42, 268, 1, 3,
-	42, 268, 2, 3, 42, 268, 3, 3,
-	42, 268, 4, 3, 42, 269, 1, 3,
-	42, 269, 2, 3, 42, 269, 3, 3,
-	42, 269, 4, 3, 46, 145, 291, 3,
-	46, 291, 1, 3, 46, 291, 2, 3,
-	46, 291, 3, 3, 46, 291, 4, 3,
-	48, 302, 1, 3, 48, 302, 2, 3,
-	48, 302, 3, 3, 48, 302, 4, 3,
-	48, 302, 304, 3, 50, 38, 73, 3,
-	50, 38, 303, 3, 50, 38, 308, 3,
-	55, 37, 36, 3, 56, 7, 2, 3,
-	56, 7, 3, 3, 56, 7, 4, 3,
-	56, 47, 0, 3, 56, 47, 1, 3,
-	56, 47, 2, 3, 56, 47, 3, 3,
-	56, 47, 4, 3, 56, 93, 1, 3,
-	56, 93, 2, 3, 56, 93, 3, 3,
-	56, 93, 4, 3, 66, 68, 0, 3,
-	66, 68, 61, 3, 67, 62, 63, 3,
-	68, 61, 0, 3, 70, 26, 69, 3,
-	72, 0, 1, 3, 75, 23, 13, 3,
-	76, 0, 1, 3, 80, 2, 7, 3,
-	80, 3, 7, 3, 80, 4, 7, 3,
-	80, 7, 4, 3, 82, 23, 13, 3,
-	85, 0, 1, 3, 88, 7, 1, 3,
-	88, 7, 4, 3, 88, 30, 25, 3,
-	88, 32, 7, 3, 90, 30, 25, 3,
-	90, 91, 304, 3, 93, 2, 7, 3,
-	93, 3, 7, 3, 93, 4, 7, 3,
-	96, 107, 303, 3, 96, 156, 303, 3,
-	97, 98, 0, 3, 97, 98, 1, 3,
-	97, 98, 2, 3, 97, 98, 3, 3,
-	97, 98, 4, 3, 97, 98, 29, 3,
-	99, 100, 0, 3, 99, 100, 1, 3,
-	99, 100, 2, 3, 99, 100, 3, 3,
-	99, 100, 4, 3, 99, 100, 29, 3,
-	105, 106, 0, 3, 105, 106, 1, 3,
-	105, 106, 2, 3, 105, 106, 3, 3,
-	105, 106, 4, 3, 110, 112, 276, 3,
-	110, 285, 303, 3, 147, 37, 36, 3,
-	147, 145, 291, 3, 156, 157, 303, 3,
-	207, 257, 0, 3, 208, 257, 0, 3,
-	209, 257, 0, 3, 210, 257, 0, 3,
-	211, 257, 0, 3, 212, 257, 0, 3,
-	213, 257, 0, 3, 214, 257, 0, 3,
-	215, 257, 0, 3, 216, 257, 0, 3,
-	217, 257, 0, 3, 218, 257, 0, 3,
-	219, 257, 0, 3, 220, 257, 0, 3,
-	221, 257, 0, 3, 222, 257, 0, 3,
-	223, 257, 0, 3, 224, 257, 0, 3,
-	225, 257, 0, 3, 226, 257, 0, 3,
-	227, 257, 0, 3, 228, 257, 0, 3,
-	229, 257, 0, 3, 230, 257, 0, 3,
-	231, 257, 0, 3, 232, 257, 0, 3,
-	233, 257, 0, 3, 234, 257, 0, 3,
-	235, 257, 0, 3, 236, 257, 0, 3,
-	237, 257, 0, 3, 238, 257, 0, 3,
-	239, 257, 0, 3, 240, 257, 0, 3,
-	241, 257, 0, 3, 242, 257, 0, 3,
-	243, 257, 0, 3, 244, 257, 0, 3,
-	245, 257, 0, 3, 246, 257, 0, 3,
-	247, 257, 0, 3, 248, 257, 0, 3,
-	249, 257, 0, 3, 250, 257, 0, 3,
-	251, 257, 0, 3, 252, 257, 0, 3,
-	253, 257, 0, 3, 254, 257, 0, 3,
-	255, 257, 0, 3, 256, 257, 0, 3,
-	273, 37, 36, 3, 278, 279, 0, 3,
-	278, 280, 0, 3, 281, 110, 303, 3,
-	283, 284, 0, 3, 285, 110, 303, 3,
-	286, 287, 0, 3, 291, 287, 0, 3,
-	294, 28, 296, 3, 303, 8, 89, 3,
-	304, 7, 1, 3, 304, 7, 4, 3,
-	304, 30, 25, 3, 304, 357, 1, 3,
-	306, 30, 25, 3, 308, 303, 8, 3,
-	309, 302, 1, 3, 309, 302, 2, 3,
-	309, 302, 3, 3, 309, 302, 4, 3,
-	309, 302, 7, 3, 309, 302, 304, 3,
-	310, 302, 1, 3, 310, 302, 2, 3,
-	310, 302, 3, 3, 310, 302, 4, 3,
-	310, 302, 304, 3, 311, 302, 1, 3,
-	311, 302, 2, 3, 311, 302, 3, 3,
-	311, 302, 4, 3, 311, 302, 304, 3,
-	312, 302, 1, 3, 312, 302, 2, 3,
-	312, 302, 3, 3, 312, 302, 4, 3,
-	312, 302, 304, 3, 313, 302, 1, 3,
-	313, 302, 2, 3, 313, 302, 3, 3,
-	313, 302, 4, 3, 313, 302, 304, 3,
-	314, 302, 1, 3, 314, 302, 2, 3,
-	314, 302, 3, 3, 314, 302, 4, 3,
-	314, 302, 304, 3, 315, 302, 1, 3,
-	315, 302, 2, 3, 315, 302, 3, 3,
-	315, 302, 4, 3, 315, 302, 304, 3,
-	316, 302, 1, 3, 316, 302, 2, 3,
-	316, 302, 3, 3, 316, 302, 4, 3,
-	316, 302, 304, 3, 317, 302, 1, 3,
-	317, 302, 2, 3, 317, 302, 3, 3,
-	317, 302, 4, 3, 317, 302, 304, 3,
-	318, 302, 1, 3, 318, 302, 2, 3,
-	318, 302, 3, 3, 318, 302, 4, 3,
-	318, 302, 304, 3, 319, 302, 1, 3,
-	319, 302, 2, 3, 319, 302, 3, 3,
-	319, 302, 4, 3, 319, 302, 304, 3,
-	320, 302, 1, 3, 320, 302, 2, 3,
-	320, 302, 3, 3, 320, 302, 4, 3,
-	320, 302, 304, 3, 321, 302, 1, 3,
-	321, 302, 2, 3, 321, 302, 3, 3,
-	321, 302, 4, 3, 321, 302, 304, 3,
-	322, 302, 1, 3, 322, 302, 2, 3,
-	322, 302, 3, 3, 322, 302, 4, 3,
-	322, 302, 304, 3, 323, 302, 1, 3,
-	323, 302, 2, 3, 323, 302, 3, 3,
-	323, 302, 4, 3, 323, 302, 304, 3,
-	324, 302, 1, 3, 324, 302, 2, 3,
-	324, 302, 3, 3, 324, 302, 4, 3,
-	324, 302, 304, 3, 325, 302, 1, 3,
-	325, 302, 2, 3, 325, 302, 3, 3,
-	325, 302, 4, 3, 325, 302, 304, 3,
-	326, 302, 1, 3, 326, 302, 2, 3,
-	326, 302, 3, 3, 326, 302, 4, 3,
-	326, 302, 304, 3, 327, 302, 1, 3,
-	327, 302, 2, 3, 327, 302, 3, 3,
-	327, 302, 4, 3, 327, 302, 304, 3,
-	328, 302, 1, 3, 328, 302, 2, 3,
-	328, 302, 3, 3, 328, 302, 4, 3,
-	328, 302, 304, 3, 329, 302, 1, 3,
-	329, 302, 2, 3, 329, 302, 3, 3,
-	329, 302, 4, 3, 329, 302, 304, 3,
-	330, 302, 1, 3, 330, 302, 2, 3,
-	330, 302, 3, 3, 330, 302, 4, 3,
-	330, 302, 304, 3, 331, 302, 1, 3,
-	331, 302, 2, 3, 331, 302, 3, 3,
-	331, 302, 4, 3, 331, 302, 304, 3,
-	332, 302, 1, 3, 332, 302, 2, 3,
-	332, 302, 3, 3, 332, 302, 4, 3,
-	332, 302, 304, 3, 333, 302, 1, 3,
-	333, 302, 2, 3, 333, 302, 3, 3,
-	333, 302, 4, 3, 333, 302, 304, 3,
-	334, 302, 1, 3, 334, 302, 2, 3,
-	334, 302, 3, 3, 334, 302, 4, 3,
-	334, 302, 304, 3, 335, 302, 1, 3,
-	335, 302, 2, 3, 335, 302, 3, 3,
-	335, 302, 4, 3, 335, 302, 304, 3,
-	336, 302, 1, 3, 336, 302, 2, 3,
-	336, 302, 3, 3, 336, 302, 4, 3,
-	336, 302, 304, 3, 337, 302, 1, 3,
-	337, 302, 2, 3, 337, 302, 3, 3,
-	337, 302, 4, 3, 337, 302, 304, 3,
-	338, 302, 1, 3, 338, 302, 2, 3,
-	338, 302, 3, 3, 338, 302, 4, 3,
-	338, 302, 304, 3, 339, 302, 1, 3,
-	339, 302, 2, 3, 339, 302, 3, 3,
-	339, 302, 4, 3, 339, 302, 304, 3,
-	340, 302, 1, 3, 340, 302, 2, 3,
-	340, 302, 3, 3, 340, 302, 4, 3,
-	340, 302, 304, 3, 341, 302, 1, 3,
-	341, 302, 2, 3, 341, 302, 3, 3,
-	341, 302, 4, 3, 341, 302, 304, 3,
-	342, 302, 1, 3, 342, 302, 2, 3,
-	342, 302, 3, 3, 342, 302, 4, 3,
-	342, 302, 304, 3, 343, 302, 1, 3,
-	343, 302, 2, 3, 343, 302, 3, 3,
-	343, 302, 4, 3, 343, 302, 304, 3,
-	344, 302, 1, 3, 344, 302, 2, 3,
-	344, 302, 3, 3, 344, 302, 4, 3,
-	344, 302, 304, 3, 345, 302, 1, 3,
-	345, 302, 2, 3, 345, 302, 3, 3,
-	345, 302, 4, 3, 345, 302, 304, 3,
-	346, 302, 1, 3, 346, 302, 2, 3,
-	346, 302, 3, 3, 346, 302, 4, 3,
-	346, 302, 304, 3, 347, 302, 1, 3,
-	347, 302, 2, 3, 347, 302, 3, 3,
-	347, 302, 4, 3, 347, 302, 304, 3,
-	348, 302, 1, 3, 348, 302, 2, 3,
-	348, 302, 3, 3, 348, 302, 4, 3,
-	348, 302, 304, 3, 349, 302, 1, 3,
-	349, 302, 2, 3, 349, 302, 3, 3,
-	349, 302, 4, 3, 349, 302, 304, 3,
-	350, 302, 1, 3, 350, 302, 2, 3,
-	350, 302, 3, 3, 350, 302, 4, 3,
-	350, 302, 304, 3, 351, 302, 1, 3,
-	351, 302, 2, 3, 351, 302, 3, 3,
-	351, 302, 4, 3, 351, 302, 304, 3,
-	352, 302, 1, 3, 352, 302, 2, 3,
-	352, 302, 3, 3, 352, 302, 4, 3,
-	352, 302, 304, 3, 353, 302, 1, 3,
-	353, 302, 2, 3, 353, 302, 3, 3,
-	353, 302, 4, 3, 353, 302, 304, 3,
-	354, 302, 1, 3, 354, 302, 2, 3,
-	354, 302, 3, 3, 354, 302, 4, 3,
-	354, 302, 304, 3, 355, 302, 1, 3,
-	355, 302, 2, 3, 355, 302, 3, 3,
-	355, 302, 4, 3, 355, 302, 304, 3,
-	356, 302, 1, 3, 356, 302, 2, 3,
-	356, 302, 3, 3, 356, 302, 4, 3,
-	356, 302, 304, 3, 357, 1, 6, 4,
-	1, 7, 357, 32, 4, 1, 304, 32,
-	7, 4, 4, 304, 7, 32, 4, 4,
-	304, 32, 7, 4, 6, 1, 7, 357,
-	4, 6, 1, 85, 0, 4, 6, 72,
-	0, 1, 4, 6, 76, 0, 1, 4,
-	6, 85, 0, 1, 4, 7, 6, 357,
-	1, 4, 7, 72, 0, 1, 4, 7,
-	357, 1, 6, 4, 7, 357, 1, 32,
-	4, 18, 15, 21, 0, 4, 20, 83,
-	7, 2, 4, 20, 83, 7, 3, 4,
-	20, 83, 7, 4, 4, 27, 1, 71,
-	0, 4, 27, 4, 71, 0, 4, 27,
-	293, 29, 291, 4, 29, 291, 287, 0,
-	4, 29, 295, 291, 1, 4, 29, 295,
-	291, 2, 4, 29, 295, 291, 3, 4,
-	29, 295, 291, 4, 4, 31, 1, 7,
-	357, 4, 31, 1, 307, 304, 4, 31,
-	1, 309, 302, 4, 31, 2, 93, 7,
-	4, 31, 2, 307, 304, 4, 31, 2,
-	309, 302, 4, 31, 3, 93, 7, 4,
-	31, 3, 307, 304, 4, 31, 3, 309,
-	302, 4, 31, 4, 93, 7, 4, 31,
-	4, 307, 304, 4, 31, 4, 309, 302,
-	4, 31, 309, 302, 7, 4, 33, 38,
-	308, 8, 4, 33, 50, 38, 308, 4,
-	33, 308, 303, 8, 4, 37, 36, 30,
-	25, 4, 38, 308, 303, 8, 4, 40,
-	37, 36, 41, 4, 40, 42, 264, 1,
-	4, 40, 42, 264, 2, 4, 40, 42,
-	264, 3, 4, 40, 42, 264, 4, 4,
-	40, 42, 265, 1, 4, 40, 42, 265,
-	2, 4, 40, 42, 265, 3, 4, 40,
-	42, 265, 4, 4, 40, 42, 266, 1,
-	4, 40, 42, 266, 2, 4, 40, 42,
-	266, 3, 4, 40, 42, 266, 4, 4,
-	40, 42, 267, 1, 4, 40, 42, 267,
-	2, 4, 40, 42, 267, 3, 4, 40,
-	42, 267, 4, 4, 40, 42, 268, 1,
-	4, 40, 42, 268, 2, 4, 40, 42,
-	268, 3, 4, 40, 42, 268, 4, 4,
-	40, 42, 269, 1, 4, 40, 42, 269,
-	2, 4, 40, 42, 269, 3, 4, 40,
-	42, 269, 4, 4, 42, 266, 274, 0,
-	4, 42, 267, 274, 0, 4, 42, 268,
-	274, 0, 4, 42, 269, 274, 0, 4,
-	43, 39, 37, 36, 4, 44, 39, 37,
-	36, 4, 46, 145, 291, 1, 4, 46,
-	145, 291, 2, 4, 46, 145, 291, 3,
-	4, 46, 145, 291, 4, 4, 46, 291,
-	287, 0, 4, 48, 302, 1, 304, 4,
-	48, 302, 4, 304, 4, 50, 38, 8,
-	73, 4, 56, 55, 37, 36, 4, 66,
-	68, 61, 0, 4, 75, 23, 13, 14,
-	4, 82, 23, 13, 14, 4, 88, 32,
-	1, 7, 4, 88, 32, 2, 7, 4,
-	88, 32, 3, 7, 4, 88, 32, 4,
-	7, 4, 90, 91, 30, 25, 4, 93,
-	1, 7, 357, 4, 96, 156, 157, 303,
-	4, 97, 98, 1, 0, 4, 97, 98,
-	4, 0, 4, 97, 98, 29, 291, 4,
-	99, 100, 1, 0, 4, 99, 100, 4,
-	0, 4, 99, 100, 29, 291, 4, 105,
-	106, 1, 0, 4, 105, 106, 4, 0,
-	4, 147, 145, 291, 1, 4, 147, 145,
-	291, 2, 4, 147, 145, 291, 3, 4,
-	147, 145, 291, 4, 4, 207, 1, 257,
-	0, 4, 207, 4, 257, 0, 4, 208,
-	1, 257, 0, 4, 208, 4, 257, 0,
-	4, 209, 1, 257, 0, 4, 209, 4,
-	257, 0, 4, 210, 1, 257, 0, 4,
-	210, 4, 257, 0, 4, 211, 1, 257,
-	0, 4, 211, 4, 257, 0, 4, 212,
-	1, 257, 0, 4, 212, 4, 257, 0,
-	4, 213, 1, 257, 0, 4, 213, 4,
-	257, 0, 4, 214, 1, 257, 0, 4,
-	214, 4, 257, 0, 4, 215, 1, 257,
-	0, 4, 215, 4, 257, 0, 4, 216,
-	1, 257, 0, 4, 216, 4, 257, 0,
-	4, 217, 1, 257, 0, 4, 217, 4,
-	257, 0, 4, 218, 1, 257, 0, 4,
-	218, 4, 257, 0, 4, 219, 1, 257,
-	0, 4, 219, 4, 257, 0, 4, 220,
-	1, 257, 0, 4, 220, 4, 257, 0,
-	4, 221, 1, 257, 0, 4, 221, 4,
-	257, 0, 4, 222, 1, 257, 0, 4,
-	222, 4, 257, 0, 4, 223, 1, 257,
-	0, 4, 223, 4, 257, 0, 4, 224,
-	1, 257, 0, 4, 224, 4, 257, 0,
-	4, 225, 1, 257, 0, 4, 225, 4,
-	257, 0, 4, 226, 1, 257, 0, 4,
-	226, 4, 257, 0, 4, 227, 1, 257,
-	0, 4, 227, 4, 257, 0, 4, 228,
-	1, 257, 0, 4, 228, 4, 257, 0,
-	4, 229, 1, 257, 0, 4, 229, 4,
-	257, 0, 4, 230, 1, 257, 0, 4,
-	230, 4, 257, 0, 4, 231, 1, 257,
-	0, 4, 231, 4, 257, 0, 4, 232,
-	1, 257, 0, 4, 232, 4, 257, 0,
-	4, 233, 1, 257, 0, 4, 233, 4,
-	257, 0, 4, 234, 1, 257, 0, 4,
-	234, 4, 257, 0, 4, 235, 1, 257,
-	0, 4, 235, 4, 257, 0, 4, 236,
-	1, 257, 0, 4, 236, 4, 257, 0,
-	4, 237, 1, 257, 0, 4, 237, 4,
-	257, 0, 4, 238, 1, 257, 0, 4,
-	238, 4, 257, 0, 4, 239, 1, 257,
-	0, 4, 239, 4, 257, 0, 4, 240,
-	1, 257, 0, 4, 240, 4, 257, 0,
-	4, 241, 1, 257, 0, 4, 241, 4,
-	257, 0, 4, 242, 1, 257, 0, 4,
-	242, 4, 257, 0, 4, 243, 1, 257,
-	0, 4, 243, 4, 257, 0, 4, 244,
-	1, 257, 0, 4, 244, 4, 257, 0,
-	4, 245, 1, 257, 0, 4, 245, 4,
-	257, 0, 4, 246, 1, 257, 0, 4,
-	246, 4, 257, 0, 4, 247, 1, 257,
-	0, 4, 247, 4, 257, 0, 4, 248,
-	1, 257, 0, 4, 248, 4, 257, 0,
-	4, 249, 1, 257, 0, 4, 249, 4,
-	257, 0, 4, 250, 1, 257, 0, 4,
-	250, 4, 257, 0, 4, 251, 1, 257,
-	0, 4, 251, 4, 257, 0, 4, 252,
-	1, 257, 0, 4, 252, 4, 257, 0,
-	4, 253, 1, 257, 0, 4, 253, 4,
-	257, 0, 4, 254, 1, 257, 0, 4,
-	254, 4, 257, 0, 4, 255, 1, 257,
-	0, 4, 255, 4, 257, 0, 4, 256,
-	1, 257, 0, 4, 256, 4, 257, 0,
-	4, 286, 1, 287, 0, 4, 286, 4,
-	287, 0, 4, 291, 1, 287, 0, 4,
-	291, 4, 287, 0, 4, 292, 28, 26,
-	69, 4, 304, 7, 357, 1, 4, 309,
-	302, 1, 304, 4, 309, 302, 2, 7,
-	4, 309, 302, 3, 7, 4, 309, 302,
-	4, 7, 4, 309, 302, 4, 304, 4,
-	310, 302, 1, 304, 4, 310, 302, 4,
-	304, 4, 311, 302, 1, 304, 4, 311,
-	302, 4, 304, 4, 312, 302, 1, 304,
-	4, 312, 302, 4, 304, 4, 313, 302,
-	1, 304, 4, 313, 302, 4, 304, 4,
-	314, 302, 1, 304, 4, 314, 302, 4,
-	304, 4, 315, 302, 1, 304, 4, 315,
-	302, 4, 304, 4, 316, 302, 1, 304,
-	4, 316, 302, 4, 304, 4, 317, 302,
-	1, 304, 4, 317, 302, 4, 304, 4,
-	318, 302, 1, 304, 4, 318, 302, 4,
-	304, 4, 319, 302, 1, 304, 4, 319,
-	302, 4, 304, 4, 320, 302, 1, 304,
-	4, 320, 302, 4, 304, 4, 321, 302,
-	1, 304, 4, 321, 302, 4, 304, 4,
-	322, 302, 1, 304, 4, 322, 302, 4,
-	304, 4, 323, 302, 1, 304, 4, 323,
-	302, 4, 304, 4, 324, 302, 1, 304,
-	4, 324, 302, 4, 304, 4, 325, 302,
-	1, 304, 4, 325, 302, 4, 304, 4,
-	326, 302, 1, 304, 4, 326, 302, 4,
-	304, 4, 327, 302, 1, 304, 4, 327,
-	302, 4, 304, 4, 328, 302, 1, 304,
-	4, 328, 302, 4, 304, 4, 329, 302,
-	1, 304, 4, 329, 302, 4, 304, 4,
-	330, 302, 1, 304, 4, 330, 302, 4,
-	304, 4, 331, 302, 1, 304, 4, 331,
-	302, 4, 304, 4, 332, 302, 1, 304,
-	4, 332, 302, 4, 304, 4, 333, 302,
-	1, 304, 4, 333, 302, 4, 304, 4,
-	334, 302, 1, 304, 4, 334, 302, 4,
-	304, 4, 335, 302, 1, 304, 4, 335,
-	302, 4, 304, 4, 336, 302, 1, 304,
-	4, 336, 302, 4, 304, 4, 337, 302,
-	1, 304, 4, 337, 302, 4, 304, 4,
-	338, 302, 1, 304, 4, 338, 302, 4,
-	304, 4, 339, 302, 1, 304, 4, 339,
-	302, 4, 304, 4, 340, 302, 1, 304,
-	4, 340, 302, 4, 304, 4, 341, 302,
-	1, 304, 4, 341, 302, 4, 304, 4,
-	342, 302, 1, 304, 4, 342, 302, 4,
-	304, 4, 343, 302, 1, 304, 4, 343,
-	302, 4, 304, 4, 344, 302, 1, 304,
-	4, 344, 302, 4, 304, 4, 345, 302,
-	1, 304, 4, 345, 302, 4, 304, 4,
-	346, 302, 1, 304, 4, 346, 302, 4,
-	304, 4, 347, 302, 1, 304, 4, 347,
-	302, 4, 304, 4, 348, 302, 1, 304,
-	4, 348, 302, 4, 304, 4, 349, 302,
-	1, 304, 4, 349, 302, 4, 304, 4,
-	350, 302, 1, 304, 4, 350, 302, 4,
-	304, 4, 351, 302, 1, 304, 4, 351,
-	302, 4, 304, 4, 352, 302, 1, 304,
-	4, 352, 302, 4, 304, 4, 353, 302,
-	1, 304, 4, 353, 302, 4, 304, 4,
-	354, 302, 1, 304, 4, 354, 302, 4,
-	304, 4, 355, 302, 1, 304, 4, 355,
-	302, 4, 304, 4, 356, 302, 1, 304,
-	4, 356, 302, 4, 304, 5, 20, 7,
-	76, 0, 1, 5, 27, 293, 29, 291,
-	1, 5, 27, 293, 29, 291, 2, 5,
-	27, 293, 29, 291, 3, 5, 27, 293,
-	29, 291, 4, 5, 29, 291, 1, 287,
-	0, 5, 29, 291, 4, 287, 0, 5,
-	29, 295, 291, 287, 0, 5, 31, 1,
-	93, 7, 357, 5, 31, 1, 309, 302,
-	304, 5, 31, 2, 309, 302, 7, 5,
-	31, 3, 309, 302, 7, 5, 31, 4,
-	309, 302, 7, 5, 31, 4, 309, 302,
-	304, 5, 33, 38, 308, 303, 8, 5,
-	37, 36, 304, 30, 25, 5, 40, 42,
-	266, 274, 0, 5, 40, 42, 267, 274,
-	0, 5, 40, 42, 268, 274, 0, 5,
-	40, 42, 269, 274, 0, 5, 42, 266,
-	1, 274, 0, 5, 42, 266, 4, 274,
-	0, 5, 42, 267, 1, 274, 0, 5,
-	42, 267, 4, 274, 0, 5, 42, 268,
-	1, 274, 0, 5, 42, 268, 4, 274,
-	0, 5, 42, 269, 1, 274, 0, 5,
-	42, 269, 4, 274, 0, 5, 46, 145,
-	291, 287, 0, 5, 46, 291, 1, 287,
-	0, 5, 46, 291, 4, 287, 0, 5,
-	50, 38, 308, 303, 8, 5, 56, 7,
-	72, 0, 1, 5, 80, 7, 85, 0,
-	1, 5, 90, 91, 304, 30, 25, 5,
-	97, 98, 29, 291, 1, 5, 97, 98,
-	29, 291, 2, 5, 97, 98, 29, 291,
-	3, 5, 97, 98, 29, 291, 4, 5,
-	99, 100, 29, 291, 1, 5, 99, 100,
-	29, 291, 2, 5, 99, 100, 29, 291,
-	3, 5, 99, 100, 29, 291, 4, 5,
-	147, 145, 291, 287, 0, 5, 272, 43,
-	39, 37, 36, 5, 309, 302, 1, 7,
-	357, 5, 309, 302, 4, 304, 7, 5,
-	309, 302, 304, 7, 4, 6, 20, 83,
-	7, 85, 0, 1, 6, 27, 293, 29,
-	291, 287, 0, 6, 29, 295, 291, 1,
-	287, 0, 6, 29, 295, 291, 4, 287,
-	0, 6, 31, 1, 309, 302, 7, 357,
-	6, 31, 4, 309, 302, 304, 7, 6,
-	33, 50, 38, 308, 303, 8, 6, 40,
-	42, 266, 1, 274, 0, 6, 40, 42,
-	266, 4, 274, 0, 6, 40, 42, 267,
-	1, 274, 0, 6, 40, 42, 267, 4,
-	274, 0, 6, 40, 42, 268, 1, 274,
-	0, 6, 40, 42, 268, 4, 274, 0,
-	6, 40, 42, 269, 1, 274, 0, 6,
-	40, 42, 269, 4, 274, 0, 6, 46,
-	145, 291, 1, 287, 0, 6, 46, 145,
-	291, 4, 287, 0, 6, 97, 98, 29,
-	291, 287, 0, 6, 99, 100, 29, 291,
-	287, 0, 6, 147, 145, 291, 1, 287,
-	0, 6, 147, 145, 291, 4, 287, 0,
-	6, 309, 302, 1, 304, 7, 357, 6,
-	309, 302, 304, 7, 357, 1, 7, 27,
-	293, 29, 291, 1, 287, 0, 7, 27,
-	293, 29, 291, 4, 287, 0, 7, 31,
-	1, 309, 302, 304, 7, 357, 7, 97,
-	98, 29, 291, 1, 287, 0, 7, 97,
-	98, 29, 291, 4, 287, 0, 7, 99,
-	100, 29, 291, 1, 287, 0, 7, 99,
-	100, 29, 291, 4, 287, 0
+	291, 1, 296, 1, 297, 1, 299, 1,
+	300, 1, 301, 1, 302, 1, 304, 1,
+	305, 1, 306, 1, 307, 1, 309, 2,
+	0, 49, 2, 1, 0, 2, 1, 305,
+	2, 1, 358, 2, 2, 5, 2, 2,
+	7, 2, 3, 5, 2, 3, 7, 2,
+	4, 0, 2, 4, 5, 2, 4, 7,
+	2, 4, 305, 2, 5, 2, 2, 5,
+	3, 2, 5, 4, 2, 5, 7, 2,
+	6, 1, 2, 7, 1, 2, 7, 2,
+	2, 7, 3, 2, 7, 4, 2, 7,
+	5, 2, 7, 32, 2, 8, 73, 2,
+	8, 77, 2, 9, 10, 2, 11, 1,
+	2, 12, 1, 2, 13, 14, 2, 16,
+	17, 2, 18, 14, 2, 18, 15, 2,
+	19, 24, 2, 19, 77, 2, 19, 84,
+	2, 20, 0, 2, 20, 7, 2, 22,
+	0, 2, 23, 13, 2, 26, 69, 2,
+	26, 108, 2, 26, 119, 2, 27, 0,
+	2, 27, 1, 2, 27, 2, 2, 27,
+	3, 2, 27, 4, 2, 27, 259, 2,
+	28, 69, 2, 28, 113, 2, 29, 291,
+	2, 29, 295, 2, 30, 25, 2, 31,
+	1, 2, 31, 2, 2, 31, 3, 2,
+	31, 4, 2, 31, 7, 2, 31, 93,
+	2, 32, 7, 2, 33, 8, 2, 33,
+	304, 2, 33, 309, 2, 34, 25, 2,
+	35, 0, 2, 35, 1, 2, 35, 2,
+	2, 35, 3, 2, 35, 4, 2, 35,
+	259, 2, 35, 298, 2, 36, 41, 2,
+	37, 36, 2, 38, 73, 2, 38, 276,
+	2, 38, 288, 2, 38, 289, 2, 38,
+	304, 2, 38, 309, 2, 42, 264, 2,
+	42, 265, 2, 42, 266, 2, 42, 267,
+	2, 42, 268, 2, 42, 269, 2, 45,
+	0, 2, 45, 1, 2, 45, 2, 2,
+	45, 3, 2, 45, 4, 2, 46, 0,
+	2, 46, 1, 2, 46, 2, 2, 46,
+	3, 2, 46, 4, 2, 46, 259, 2,
+	46, 291, 2, 47, 0, 2, 47, 1,
+	2, 47, 2, 2, 47, 3, 2, 47,
+	4, 2, 48, 303, 2, 49, 1, 2,
+	49, 2, 2, 49, 3, 2, 49, 4,
+	2, 56, 7, 2, 56, 47, 2, 56,
+	93, 2, 57, 58, 2, 59, 1, 2,
+	59, 2, 2, 59, 3, 2, 59, 4,
+	2, 60, 304, 2, 62, 63, 2, 64,
+	65, 2, 66, 68, 2, 68, 0, 2,
+	68, 61, 2, 71, 0, 2, 71, 304,
+	2, 75, 23, 2, 79, 69, 2, 80,
+	7, 2, 81, 8, 2, 82, 23, 2,
+	84, 8, 2, 90, 91, 2, 92, 1,
+	2, 92, 2, 2, 92, 3, 2, 92,
+	4, 2, 93, 1, 2, 93, 2, 2,
+	93, 3, 2, 93, 4, 2, 93, 7,
+	2, 94, 95, 2, 96, 288, 2, 96,
+	304, 2, 97, 98, 2, 99, 100, 2,
+	101, 102, 2, 101, 103, 2, 101, 104,
+	2, 105, 106, 2, 107, 304, 2, 110,
+	304, 2, 111, 0, 2, 127, 304, 2,
+	129, 0, 2, 130, 0, 2, 131, 0,
+	2, 132, 0, 2, 133, 0, 2, 134,
+	0, 2, 135, 0, 2, 136, 0, 2,
+	137, 0, 2, 138, 0, 2, 139, 0,
+	2, 140, 0, 2, 141, 0, 2, 142,
+	0, 2, 143, 0, 2, 144, 0, 2,
+	146, 0, 2, 147, 0, 2, 148, 0,
+	2, 149, 0, 2, 150, 0, 2, 151,
+	0, 2, 152, 0, 2, 153, 0, 2,
+	154, 0, 2, 155, 0, 2, 156, 304,
+	2, 157, 304, 2, 158, 304, 2, 159,
+	1, 2, 159, 2, 2, 159, 3, 2,
+	159, 4, 2, 160, 1, 2, 160, 2,
+	2, 160, 3, 2, 160, 4, 2, 161,
+	1, 2, 161, 2, 2, 161, 3, 2,
+	161, 4, 2, 162, 1, 2, 162, 2,
+	2, 162, 3, 2, 162, 4, 2, 163,
+	1, 2, 163, 2, 2, 163, 3, 2,
+	163, 4, 2, 164, 1, 2, 164, 2,
+	2, 164, 3, 2, 164, 4, 2, 165,
+	1, 2, 165, 2, 2, 165, 3, 2,
+	165, 4, 2, 166, 1, 2, 166, 2,
+	2, 166, 3, 2, 166, 4, 2, 167,
+	1, 2, 167, 2, 2, 167, 3, 2,
+	167, 4, 2, 168, 1, 2, 168, 2,
+	2, 168, 3, 2, 168, 4, 2, 169,
+	1, 2, 169, 2, 2, 169, 3, 2,
+	169, 4, 2, 170, 1, 2, 170, 2,
+	2, 170, 3, 2, 170, 4, 2, 171,
+	1, 2, 171, 2, 2, 171, 3, 2,
+	171, 4, 2, 172, 1, 2, 172, 2,
+	2, 172, 3, 2, 172, 4, 2, 173,
+	1, 2, 173, 2, 2, 173, 3, 2,
+	173, 4, 2, 174, 1, 2, 174, 2,
+	2, 174, 3, 2, 174, 4, 2, 175,
+	1, 2, 175, 2, 2, 175, 3, 2,
+	175, 4, 2, 176, 1, 2, 176, 2,
+	2, 176, 3, 2, 176, 4, 2, 177,
+	1, 2, 177, 2, 2, 177, 3, 2,
+	177, 4, 2, 178, 1, 2, 178, 2,
+	2, 178, 3, 2, 178, 4, 2, 179,
+	1, 2, 179, 2, 2, 179, 3, 2,
+	179, 4, 2, 180, 1, 2, 180, 2,
+	2, 180, 3, 2, 180, 4, 2, 181,
+	1, 2, 181, 2, 2, 181, 3, 2,
+	181, 4, 2, 182, 1, 2, 182, 2,
+	2, 182, 3, 2, 182, 4, 2, 183,
+	1, 2, 183, 2, 2, 183, 3, 2,
+	183, 4, 2, 184, 1, 2, 184, 2,
+	2, 184, 3, 2, 184, 4, 2, 185,
+	1, 2, 185, 2, 2, 185, 3, 2,
+	185, 4, 2, 186, 1, 2, 186, 2,
+	2, 186, 3, 2, 186, 4, 2, 187,
+	1, 2, 187, 2, 2, 187, 3, 2,
+	187, 4, 2, 188, 1, 2, 188, 2,
+	2, 188, 3, 2, 188, 4, 2, 189,
+	1, 2, 189, 2, 2, 189, 3, 2,
+	189, 4, 2, 190, 1, 2, 190, 2,
+	2, 190, 3, 2, 190, 4, 2, 191,
+	1, 2, 191, 2, 2, 191, 3, 2,
+	191, 4, 2, 192, 1, 2, 192, 2,
+	2, 192, 3, 2, 192, 4, 2, 193,
+	1, 2, 193, 2, 2, 193, 3, 2,
+	193, 4, 2, 194, 1, 2, 194, 2,
+	2, 194, 3, 2, 194, 4, 2, 195,
+	1, 2, 195, 2, 2, 195, 3, 2,
+	195, 4, 2, 196, 1, 2, 196, 2,
+	2, 196, 3, 2, 196, 4, 2, 197,
+	1, 2, 197, 2, 2, 197, 3, 2,
+	197, 4, 2, 198, 1, 2, 198, 2,
+	2, 198, 3, 2, 198, 4, 2, 199,
+	1, 2, 199, 2, 2, 199, 3, 2,
+	199, 4, 2, 200, 1, 2, 200, 2,
+	2, 200, 3, 2, 200, 4, 2, 201,
+	1, 2, 201, 2, 2, 201, 3, 2,
+	201, 4, 2, 202, 1, 2, 202, 2,
+	2, 202, 3, 2, 202, 4, 2, 203,
+	1, 2, 203, 2, 2, 203, 3, 2,
+	203, 4, 2, 204, 1, 2, 204, 2,
+	2, 204, 3, 2, 204, 4, 2, 205,
+	1, 2, 205, 2, 2, 205, 3, 2,
+	205, 4, 2, 206, 1, 2, 206, 2,
+	2, 206, 3, 2, 206, 4, 2, 207,
+	1, 2, 207, 2, 2, 207, 3, 2,
+	207, 4, 2, 208, 1, 2, 208, 2,
+	2, 208, 3, 2, 208, 4, 2, 209,
+	1, 2, 209, 2, 2, 209, 3, 2,
+	209, 4, 2, 210, 1, 2, 210, 2,
+	2, 210, 3, 2, 210, 4, 2, 211,
+	1, 2, 211, 2, 2, 211, 3, 2,
+	211, 4, 2, 212, 1, 2, 212, 2,
+	2, 212, 3, 2, 212, 4, 2, 213,
+	1, 2, 213, 2, 2, 213, 3, 2,
+	213, 4, 2, 214, 1, 2, 214, 2,
+	2, 214, 3, 2, 214, 4, 2, 215,
+	1, 2, 215, 2, 2, 215, 3, 2,
+	215, 4, 2, 216, 1, 2, 216, 2,
+	2, 216, 3, 2, 216, 4, 2, 217,
+	1, 2, 217, 2, 2, 217, 3, 2,
+	217, 4, 2, 218, 1, 2, 218, 2,
+	2, 218, 3, 2, 218, 4, 2, 219,
+	1, 2, 219, 2, 2, 219, 3, 2,
+	219, 4, 2, 220, 1, 2, 220, 2,
+	2, 220, 3, 2, 220, 4, 2, 221,
+	1, 2, 221, 2, 2, 221, 3, 2,
+	221, 4, 2, 222, 1, 2, 222, 2,
+	2, 222, 3, 2, 222, 4, 2, 223,
+	1, 2, 223, 2, 2, 223, 3, 2,
+	223, 4, 2, 224, 1, 2, 224, 2,
+	2, 224, 3, 2, 224, 4, 2, 225,
+	1, 2, 225, 2, 2, 225, 3, 2,
+	225, 4, 2, 226, 1, 2, 226, 2,
+	2, 226, 3, 2, 226, 4, 2, 227,
+	1, 2, 227, 2, 2, 227, 3, 2,
+	227, 4, 2, 228, 1, 2, 228, 2,
+	2, 228, 3, 2, 228, 4, 2, 229,
+	1, 2, 229, 2, 2, 229, 3, 2,
+	229, 4, 2, 230, 1, 2, 230, 2,
+	2, 230, 3, 2, 230, 4, 2, 231,
+	1, 2, 231, 2, 2, 231, 3, 2,
+	231, 4, 2, 232, 1, 2, 232, 2,
+	2, 232, 3, 2, 232, 4, 2, 233,
+	1, 2, 233, 2, 2, 233, 3, 2,
+	233, 4, 2, 234, 1, 2, 234, 2,
+	2, 234, 3, 2, 234, 4, 2, 235,
+	1, 2, 235, 2, 2, 235, 3, 2,
+	235, 4, 2, 236, 1, 2, 236, 2,
+	2, 236, 3, 2, 236, 4, 2, 237,
+	1, 2, 237, 2, 2, 237, 3, 2,
+	237, 4, 2, 238, 1, 2, 238, 2,
+	2, 238, 3, 2, 238, 4, 2, 239,
+	1, 2, 239, 2, 2, 239, 3, 2,
+	239, 4, 2, 240, 1, 2, 240, 2,
+	2, 240, 3, 2, 240, 4, 2, 241,
+	1, 2, 241, 2, 2, 241, 3, 2,
+	241, 4, 2, 242, 1, 2, 242, 2,
+	2, 242, 3, 2, 242, 4, 2, 243,
+	1, 2, 243, 2, 2, 243, 3, 2,
+	243, 4, 2, 244, 1, 2, 244, 2,
+	2, 244, 3, 2, 244, 4, 2, 245,
+	1, 2, 245, 2, 2, 245, 3, 2,
+	245, 4, 2, 246, 1, 2, 246, 2,
+	2, 246, 3, 2, 246, 4, 2, 247,
+	1, 2, 247, 2, 2, 247, 3, 2,
+	247, 4, 2, 248, 1, 2, 248, 2,
+	2, 248, 3, 2, 248, 4, 2, 249,
+	1, 2, 249, 2, 2, 249, 3, 2,
+	249, 4, 2, 250, 1, 2, 250, 2,
+	2, 250, 3, 2, 250, 4, 2, 251,
+	1, 2, 251, 2, 2, 251, 3, 2,
+	251, 4, 2, 252, 1, 2, 252, 2,
+	2, 252, 3, 2, 252, 4, 2, 253,
+	1, 2, 253, 2, 2, 253, 3, 2,
+	253, 4, 2, 254, 1, 2, 254, 2,
+	2, 254, 3, 2, 254, 4, 2, 255,
+	1, 2, 255, 2, 2, 255, 3, 2,
+	255, 4, 2, 256, 1, 2, 256, 2,
+	2, 256, 3, 2, 256, 4, 2, 257,
+	0, 2, 260, 1, 2, 260, 2, 2,
+	260, 3, 2, 260, 4, 2, 261, 1,
+	2, 261, 2, 2, 261, 3, 2, 261,
+	4, 2, 262, 1, 2, 262, 2, 2,
+	262, 3, 2, 262, 4, 2, 263, 1,
+	2, 263, 2, 2, 263, 3, 2, 263,
+	4, 2, 270, 1, 2, 270, 2, 2,
+	270, 3, 2, 270, 4, 2, 271, 1,
+	2, 271, 2, 2, 271, 3, 2, 271,
+	4, 2, 274, 0, 2, 275, 304, 2,
+	277, 108, 2, 282, 108, 2, 286, 1,
+	2, 286, 2, 2, 286, 3, 2, 286,
+	4, 2, 287, 0, 2, 291, 1, 2,
+	291, 2, 2, 291, 3, 2, 291, 4,
+	2, 304, 8, 2, 305, 1, 2, 305,
+	4, 2, 308, 305, 2, 309, 8, 2,
+	309, 304, 2, 310, 303, 2, 311, 303,
+	2, 312, 303, 2, 313, 303, 2, 314,
+	303, 2, 315, 303, 2, 316, 303, 2,
+	317, 303, 2, 318, 303, 2, 319, 303,
+	2, 320, 303, 2, 321, 303, 2, 322,
+	303, 2, 323, 303, 2, 324, 303, 2,
+	325, 303, 2, 326, 303, 2, 327, 303,
+	2, 328, 303, 2, 329, 303, 2, 330,
+	303, 2, 331, 303, 2, 332, 303, 2,
+	333, 303, 2, 334, 303, 2, 335, 303,
+	2, 336, 303, 2, 337, 303, 2, 338,
+	303, 2, 339, 303, 2, 340, 303, 2,
+	341, 303, 2, 342, 303, 2, 343, 303,
+	2, 344, 303, 2, 345, 303, 2, 346,
+	303, 2, 347, 303, 2, 348, 303, 2,
+	349, 303, 2, 350, 303, 2, 351, 303,
+	2, 352, 303, 2, 353, 303, 2, 354,
+	303, 2, 355, 303, 2, 356, 303, 2,
+	357, 303, 2, 358, 1, 3, 0, 49,
+	1, 3, 0, 49, 2, 3, 0, 49,
+	3, 3, 0, 49, 4, 3, 1, 7,
+	358, 3, 1, 32, 7, 3, 1, 71,
+	0, 3, 1, 111, 0, 3, 1, 257,
+	0, 3, 1, 274, 0, 3, 1, 287,
+	0, 3, 1, 305, 358, 3, 2, 7,
+	32, 3, 2, 32, 7, 3, 3, 7,
+	32, 3, 3, 32, 7, 3, 4, 7,
+	32, 3, 4, 32, 7, 3, 4, 71,
+	0, 3, 4, 111, 0, 3, 4, 257,
+	0, 3, 4, 274, 0, 3, 4, 287,
+	0, 3, 4, 305, 7, 3, 5, 7,
+	2, 3, 5, 7, 3, 3, 5, 7,
+	4, 3, 6, 1, 358, 3, 6, 358,
+	1, 3, 7, 2, 5, 3, 7, 2,
+	32, 3, 7, 3, 5, 3, 7, 3,
+	32, 3, 7, 4, 5, 3, 7, 4,
+	32, 3, 7, 358, 1, 3, 9, 11,
+	1, 3, 15, 21, 0, 3, 20, 7,
+	2, 3, 20, 7, 3, 3, 20, 7,
+	4, 3, 20, 83, 7, 3, 23, 13,
+	14, 3, 27, 71, 0, 3, 27, 293,
+	29, 3, 28, 94, 95, 3, 29, 291,
+	1, 3, 29, 291, 2, 3, 29, 291,
+	3, 3, 29, 291, 4, 3, 29, 295,
+	291, 3, 31, 1, 93, 3, 31, 2,
+	7, 3, 31, 2, 93, 3, 31, 3,
+	7, 3, 31, 3, 93, 3, 31, 4,
+	7, 3, 31, 4, 93, 3, 31, 93,
+	7, 3, 31, 308, 305, 3, 31, 310,
+	303, 3, 32, 1, 7, 3, 32, 2,
+	7, 3, 32, 3, 7, 3, 32, 4,
+	7, 3, 33, 89, 8, 3, 33, 304,
+	8, 3, 33, 309, 8, 3, 33, 309,
+	304, 3, 35, 1, 0, 3, 35, 4,
+	0, 3, 37, 36, 305, 3, 38, 156,
+	304, 3, 38, 158, 304, 3, 38, 309,
+	8, 3, 38, 309, 304, 3, 40, 42,
+	264, 3, 40, 42, 265, 3, 40, 42,
+	266, 3, 40, 42, 267, 3, 40, 42,
+	268, 3, 40, 42, 269, 3, 42, 264,
+	1, 3, 42, 264, 2, 3, 42, 264,
+	3, 3, 42, 264, 4, 3, 42, 265,
+	1, 3, 42, 265, 2, 3, 42, 265,
+	3, 3, 42, 265, 4, 3, 42, 266,
+	1, 3, 42, 266, 2, 3, 42, 266,
+	3, 3, 42, 266, 4, 3, 42, 267,
+	1, 3, 42, 267, 2, 3, 42, 267,
+	3, 3, 42, 267, 4, 3, 42, 268,
+	1, 3, 42, 268, 2, 3, 42, 268,
+	3, 3, 42, 268, 4, 3, 42, 269,
+	1, 3, 42, 269, 2, 3, 42, 269,
+	3, 3, 42, 269, 4, 3, 46, 145,
+	291, 3, 46, 291, 1, 3, 46, 291,
+	2, 3, 46, 291, 3, 3, 46, 291,
+	4, 3, 48, 303, 1, 3, 48, 303,
+	2, 3, 48, 303, 3, 3, 48, 303,
+	4, 3, 48, 303, 305, 3, 50, 38,
+	73, 3, 50, 38, 304, 3, 50, 38,
+	309, 3, 55, 37, 36, 3, 56, 7,
+	2, 3, 56, 7, 3, 3, 56, 7,
+	4, 3, 56, 47, 0, 3, 56, 47,
+	1, 3, 56, 47, 2, 3, 56, 47,
+	3, 3, 56, 47, 4, 3, 56, 93,
+	1, 3, 56, 93, 2, 3, 56, 93,
+	3, 3, 56, 93, 4, 3, 66, 68,
+	0, 3, 66, 68, 61, 3, 67, 62,
+	63, 3, 68, 61, 0, 3, 70, 26,
+	69, 3, 72, 0, 1, 3, 75, 23,
+	13, 3, 76, 0, 1, 3, 80, 2,
+	7, 3, 80, 3, 7, 3, 80, 4,
+	7, 3, 80, 7, 4, 3, 82, 23,
+	13, 3, 85, 0, 1, 3, 88, 7,
+	1, 3, 88, 7, 4, 3, 88, 30,
+	25, 3, 88, 32, 7, 3, 90, 30,
+	25, 3, 90, 91, 305, 3, 93, 2,
+	7, 3, 93, 3, 7, 3, 93, 4,
+	7, 3, 96, 107, 304, 3, 96, 156,
+	304, 3, 97, 98, 0, 3, 97, 98,
+	1, 3, 97, 98, 2, 3, 97, 98,
+	3, 3, 97, 98, 4, 3, 97, 98,
+	29, 3, 99, 100, 0, 3, 99, 100,
+	1, 3, 99, 100, 2, 3, 99, 100,
+	3, 3, 99, 100, 4, 3, 99, 100,
+	29, 3, 105, 106, 0, 3, 105, 106,
+	1, 3, 105, 106, 2, 3, 105, 106,
+	3, 3, 105, 106, 4, 3, 110, 112,
+	276, 3, 110, 285, 304, 3, 147, 145,
+	291, 3, 156, 157, 304, 3, 207, 257,
+	0, 3, 208, 257, 0, 3, 209, 257,
+	0, 3, 210, 257, 0, 3, 211, 257,
+	0, 3, 212, 257, 0, 3, 213, 257,
+	0, 3, 214, 257, 0, 3, 215, 257,
+	0, 3, 216, 257, 0, 3, 217, 257,
+	0, 3, 218, 257, 0, 3, 219, 257,
+	0, 3, 220, 257, 0, 3, 221, 257,
+	0, 3, 222, 257, 0, 3, 223, 257,
+	0, 3, 224, 257, 0, 3, 225, 257,
+	0, 3, 226, 257, 0, 3, 227, 257,
+	0, 3, 228, 257, 0, 3, 229, 257,
+	0, 3, 230, 257, 0, 3, 231, 257,
+	0, 3, 232, 257, 0, 3, 233, 257,
+	0, 3, 234, 257, 0, 3, 235, 257,
+	0, 3, 236, 257, 0, 3, 237, 257,
+	0, 3, 238, 257, 0, 3, 239, 257,
+	0, 3, 240, 257, 0, 3, 241, 257,
+	0, 3, 242, 257, 0, 3, 243, 257,
+	0, 3, 244, 257, 0, 3, 245, 257,
+	0, 3, 246, 257, 0, 3, 247, 257,
+	0, 3, 248, 257, 0, 3, 249, 257,
+	0, 3, 250, 257, 0, 3, 251, 257,
+	0, 3, 252, 257, 0, 3, 253, 257,
+	0, 3, 254, 257, 0, 3, 255, 257,
+	0, 3, 256, 257, 0, 3, 273, 37,
+	36, 3, 278, 279, 0, 3, 278, 280,
+	0, 3, 281, 110, 304, 3, 283, 284,
+	0, 3, 285, 110, 304, 3, 286, 287,
+	0, 3, 291, 287, 0, 3, 294, 28,
+	297, 3, 304, 8, 89, 3, 305, 7,
+	1, 3, 305, 7, 4, 3, 305, 30,
+	25, 3, 305, 358, 1, 3, 307, 30,
+	25, 3, 309, 304, 8, 3, 310, 303,
+	1, 3, 310, 303, 2, 3, 310, 303,
+	3, 3, 310, 303, 4, 3, 310, 303,
+	7, 3, 310, 303, 305, 3, 311, 303,
+	1, 3, 311, 303, 2, 3, 311, 303,
+	3, 3, 311, 303, 4, 3, 311, 303,
+	305, 3, 312, 303, 1, 3, 312, 303,
+	2, 3, 312, 303, 3, 3, 312, 303,
+	4, 3, 312, 303, 305, 3, 313, 303,
+	1, 3, 313, 303, 2, 3, 313, 303,
+	3, 3, 313, 303, 4, 3, 313, 303,
+	305, 3, 314, 303, 1, 3, 314, 303,
+	2, 3, 314, 303, 3, 3, 314, 303,
+	4, 3, 314, 303, 305, 3, 315, 303,
+	1, 3, 315, 303, 2, 3, 315, 303,
+	3, 3, 315, 303, 4, 3, 315, 303,
+	305, 3, 316, 303, 1, 3, 316, 303,
+	2, 3, 316, 303, 3, 3, 316, 303,
+	4, 3, 316, 303, 305, 3, 317, 303,
+	1, 3, 317, 303, 2, 3, 317, 303,
+	3, 3, 317, 303, 4, 3, 317, 303,
+	305, 3, 318, 303, 1, 3, 318, 303,
+	2, 3, 318, 303, 3, 3, 318, 303,
+	4, 3, 318, 303, 305, 3, 319, 303,
+	1, 3, 319, 303, 2, 3, 319, 303,
+	3, 3, 319, 303, 4, 3, 319, 303,
+	305, 3, 320, 303, 1, 3, 320, 303,
+	2, 3, 320, 303, 3, 3, 320, 303,
+	4, 3, 320, 303, 305, 3, 321, 303,
+	1, 3, 321, 303, 2, 3, 321, 303,
+	3, 3, 321, 303, 4, 3, 321, 303,
+	305, 3, 322, 303, 1, 3, 322, 303,
+	2, 3, 322, 303, 3, 3, 322, 303,
+	4, 3, 322, 303, 305, 3, 323, 303,
+	1, 3, 323, 303, 2, 3, 323, 303,
+	3, 3, 323, 303, 4, 3, 323, 303,
+	305, 3, 324, 303, 1, 3, 324, 303,
+	2, 3, 324, 303, 3, 3, 324, 303,
+	4, 3, 324, 303, 305, 3, 325, 303,
+	1, 3, 325, 303, 2, 3, 325, 303,
+	3, 3, 325, 303, 4, 3, 325, 303,
+	305, 3, 326, 303, 1, 3, 326, 303,
+	2, 3, 326, 303, 3, 3, 326, 303,
+	4, 3, 326, 303, 305, 3, 327, 303,
+	1, 3, 327, 303, 2, 3, 327, 303,
+	3, 3, 327, 303, 4, 3, 327, 303,
+	305, 3, 328, 303, 1, 3, 328, 303,
+	2, 3, 328, 303, 3, 3, 328, 303,
+	4, 3, 328, 303, 305, 3, 329, 303,
+	1, 3, 329, 303, 2, 3, 329, 303,
+	3, 3, 329, 303, 4, 3, 329, 303,
+	305, 3, 330, 303, 1, 3, 330, 303,
+	2, 3, 330, 303, 3, 3, 330, 303,
+	4, 3, 330, 303, 305, 3, 331, 303,
+	1, 3, 331, 303, 2, 3, 331, 303,
+	3, 3, 331, 303, 4, 3, 331, 303,
+	305, 3, 332, 303, 1, 3, 332, 303,
+	2, 3, 332, 303, 3, 3, 332, 303,
+	4, 3, 332, 303, 305, 3, 333, 303,
+	1, 3, 333, 303, 2, 3, 333, 303,
+	3, 3, 333, 303, 4, 3, 333, 303,
+	305, 3, 334, 303, 1, 3, 334, 303,
+	2, 3, 334, 303, 3, 3, 334, 303,
+	4, 3, 334, 303, 305, 3, 335, 303,
+	1, 3, 335, 303, 2, 3, 335, 303,
+	3, 3, 335, 303, 4, 3, 335, 303,
+	305, 3, 336, 303, 1, 3, 336, 303,
+	2, 3, 336, 303, 3, 3, 336, 303,
+	4, 3, 336, 303, 305, 3, 337, 303,
+	1, 3, 337, 303, 2, 3, 337, 303,
+	3, 3, 337, 303, 4, 3, 337, 303,
+	305, 3, 338, 303, 1, 3, 338, 303,
+	2, 3, 338, 303, 3, 3, 338, 303,
+	4, 3, 338, 303, 305, 3, 339, 303,
+	1, 3, 339, 303, 2, 3, 339, 303,
+	3, 3, 339, 303, 4, 3, 339, 303,
+	305, 3, 340, 303, 1, 3, 340, 303,
+	2, 3, 340, 303, 3, 3, 340, 303,
+	4, 3, 340, 303, 305, 3, 341, 303,
+	1, 3, 341, 303, 2, 3, 341, 303,
+	3, 3, 341, 303, 4, 3, 341, 303,
+	305, 3, 342, 303, 1, 3, 342, 303,
+	2, 3, 342, 303, 3, 3, 342, 303,
+	4, 3, 342, 303, 305, 3, 343, 303,
+	1, 3, 343, 303, 2, 3, 343, 303,
+	3, 3, 343, 303, 4, 3, 343, 303,
+	305, 3, 344, 303, 1, 3, 344, 303,
+	2, 3, 344, 303, 3, 3, 344, 303,
+	4, 3, 344, 303, 305, 3, 345, 303,
+	1, 3, 345, 303, 2, 3, 345, 303,
+	3, 3, 345, 303, 4, 3, 345, 303,
+	305, 3, 346, 303, 1, 3, 346, 303,
+	2, 3, 346, 303, 3, 3, 346, 303,
+	4, 3, 346, 303, 305, 3, 347, 303,
+	1, 3, 347, 303, 2, 3, 347, 303,
+	3, 3, 347, 303, 4, 3, 347, 303,
+	305, 3, 348, 303, 1, 3, 348, 303,
+	2, 3, 348, 303, 3, 3, 348, 303,
+	4, 3, 348, 303, 305, 3, 349, 303,
+	1, 3, 349, 303, 2, 3, 349, 303,
+	3, 3, 349, 303, 4, 3, 349, 303,
+	305, 3, 350, 303, 1, 3, 350, 303,
+	2, 3, 350, 303, 3, 3, 350, 303,
+	4, 3, 350, 303, 305, 3, 351, 303,
+	1, 3, 351, 303, 2, 3, 351, 303,
+	3, 3, 351, 303, 4, 3, 351, 303,
+	305, 3, 352, 303, 1, 3, 352, 303,
+	2, 3, 352, 303, 3, 3, 352, 303,
+	4, 3, 352, 303, 305, 3, 353, 303,
+	1, 3, 353, 303, 2, 3, 353, 303,
+	3, 3, 353, 303, 4, 3, 353, 303,
+	305, 3, 354, 303, 1, 3, 354, 303,
+	2, 3, 354, 303, 3, 3, 354, 303,
+	4, 3, 354, 303, 305, 3, 355, 303,
+	1, 3, 355, 303, 2, 3, 355, 303,
+	3, 3, 355, 303, 4, 3, 355, 303,
+	305, 3, 356, 303, 1, 3, 356, 303,
+	2, 3, 356, 303, 3, 3, 356, 303,
+	4, 3, 356, 303, 305, 3, 357, 303,
+	1, 3, 357, 303, 2, 3, 357, 303,
+	3, 3, 357, 303, 4, 3, 357, 303,
+	305, 3, 358, 1, 6, 4, 1, 7,
+	358, 32, 4, 1, 305, 32, 7, 4,
+	4, 305, 7, 32, 4, 4, 305, 32,
+	7, 4, 6, 1, 7, 358, 4, 6,
+	1, 85, 0, 4, 6, 72, 0, 1,
+	4, 6, 76, 0, 1, 4, 6, 85,
+	0, 1, 4, 7, 6, 358, 1, 4,
+	7, 72, 0, 1, 4, 7, 358, 1,
+	6, 4, 7, 358, 1, 32, 4, 18,
+	15, 21, 0, 4, 20, 83, 7, 2,
+	4, 20, 83, 7, 3, 4, 20, 83,
+	7, 4, 4, 27, 1, 71, 0, 4,
+	27, 4, 71, 0, 4, 27, 293, 29,
+	291, 4, 29, 291, 287, 0, 4, 29,
+	295, 291, 1, 4, 29, 295, 291, 2,
+	4, 29, 295, 291, 3, 4, 29, 295,
+	291, 4, 4, 31, 1, 7, 358, 4,
+	31, 1, 308, 305, 4, 31, 1, 310,
+	303, 4, 31, 2, 93, 7, 4, 31,
+	2, 308, 305, 4, 31, 2, 310, 303,
+	4, 31, 3, 93, 7, 4, 31, 3,
+	308, 305, 4, 31, 3, 310, 303, 4,
+	31, 4, 93, 7, 4, 31, 4, 308,
+	305, 4, 31, 4, 310, 303, 4, 31,
+	310, 303, 7, 4, 33, 38, 309, 8,
+	4, 33, 50, 38, 309, 4, 33, 309,
+	304, 8, 4, 37, 36, 30, 25, 4,
+	38, 309, 304, 8, 4, 40, 37, 36,
+	41, 4, 40, 42, 264, 1, 4, 40,
+	42, 264, 2, 4, 40, 42, 264, 3,
+	4, 40, 42, 264, 4, 4, 40, 42,
+	265, 1, 4, 40, 42, 265, 2, 4,
+	40, 42, 265, 3, 4, 40, 42, 265,
+	4, 4, 40, 42, 266, 1, 4, 40,
+	42, 266, 2, 4, 40, 42, 266, 3,
+	4, 40, 42, 266, 4, 4, 40, 42,
+	267, 1, 4, 40, 42, 267, 2, 4,
+	40, 42, 267, 3, 4, 40, 42, 267,
+	4, 4, 40, 42, 268, 1, 4, 40,
+	42, 268, 2, 4, 40, 42, 268, 3,
+	4, 40, 42, 268, 4, 4, 40, 42,
+	269, 1, 4, 40, 42, 269, 2, 4,
+	40, 42, 269, 3, 4, 40, 42, 269,
+	4, 4, 42, 266, 274, 0, 4, 42,
+	267, 274, 0, 4, 42, 268, 274, 0,
+	4, 42, 269, 274, 0, 4, 43, 39,
+	37, 36, 4, 44, 39, 37, 36, 4,
+	46, 145, 291, 1, 4, 46, 145, 291,
+	2, 4, 46, 145, 291, 3, 4, 46,
+	145, 291, 4, 4, 46, 291, 287, 0,
+	4, 48, 303, 1, 305, 4, 48, 303,
+	4, 305, 4, 50, 38, 8, 73, 4,
+	56, 55, 37, 36, 4, 66, 68, 61,
+	0, 4, 75, 23, 13, 14, 4, 82,
+	23, 13, 14, 4, 88, 32, 1, 7,
+	4, 88, 32, 2, 7, 4, 88, 32,
+	3, 7, 4, 88, 32, 4, 7, 4,
+	90, 91, 30, 25, 4, 93, 1, 7,
+	358, 4, 96, 156, 157, 304, 4, 97,
+	98, 1, 0, 4, 97, 98, 4, 0,
+	4, 97, 98, 29, 291, 4, 99, 100,
+	1, 0, 4, 99, 100, 4, 0, 4,
+	99, 100, 29, 291, 4, 105, 106, 1,
+	0, 4, 105, 106, 4, 0, 4, 147,
+	145, 291, 1, 4, 147, 145, 291, 2,
+	4, 147, 145, 291, 3, 4, 147, 145,
+	291, 4, 4, 147, 296, 37, 36, 4,
+	207, 1, 257, 0, 4, 207, 4, 257,
+	0, 4, 208, 1, 257, 0, 4, 208,
+	4, 257, 0, 4, 209, 1, 257, 0,
+	4, 209, 4, 257, 0, 4, 210, 1,
+	257, 0, 4, 210, 4, 257, 0, 4,
+	211, 1, 257, 0, 4, 211, 4, 257,
+	0, 4, 212, 1, 257, 0, 4, 212,
+	4, 257, 0, 4, 213, 1, 257, 0,
+	4, 213, 4, 257, 0, 4, 214, 1,
+	257, 0, 4, 214, 4, 257, 0, 4,
+	215, 1, 257, 0, 4, 215, 4, 257,
+	0, 4, 216, 1, 257, 0, 4, 216,
+	4, 257, 0, 4, 217, 1, 257, 0,
+	4, 217, 4, 257, 0, 4, 218, 1,
+	257, 0, 4, 218, 4, 257, 0, 4,
+	219, 1, 257, 0, 4, 219, 4, 257,
+	0, 4, 220, 1, 257, 0, 4, 220,
+	4, 257, 0, 4, 221, 1, 257, 0,
+	4, 221, 4, 257, 0, 4, 222, 1,
+	257, 0, 4, 222, 4, 257, 0, 4,
+	223, 1, 257, 0, 4, 223, 4, 257,
+	0, 4, 224, 1, 257, 0, 4, 224,
+	4, 257, 0, 4, 225, 1, 257, 0,
+	4, 225, 4, 257, 0, 4, 226, 1,
+	257, 0, 4, 226, 4, 257, 0, 4,
+	227, 1, 257, 0, 4, 227, 4, 257,
+	0, 4, 228, 1, 257, 0, 4, 228,
+	4, 257, 0, 4, 229, 1, 257, 0,
+	4, 229, 4, 257, 0, 4, 230, 1,
+	257, 0, 4, 230, 4, 257, 0, 4,
+	231, 1, 257, 0, 4, 231, 4, 257,
+	0, 4, 232, 1, 257, 0, 4, 232,
+	4, 257, 0, 4, 233, 1, 257, 0,
+	4, 233, 4, 257, 0, 4, 234, 1,
+	257, 0, 4, 234, 4, 257, 0, 4,
+	235, 1, 257, 0, 4, 235, 4, 257,
+	0, 4, 236, 1, 257, 0, 4, 236,
+	4, 257, 0, 4, 237, 1, 257, 0,
+	4, 237, 4, 257, 0, 4, 238, 1,
+	257, 0, 4, 238, 4, 257, 0, 4,
+	239, 1, 257, 0, 4, 239, 4, 257,
+	0, 4, 240, 1, 257, 0, 4, 240,
+	4, 257, 0, 4, 241, 1, 257, 0,
+	4, 241, 4, 257, 0, 4, 242, 1,
+	257, 0, 4, 242, 4, 257, 0, 4,
+	243, 1, 257, 0, 4, 243, 4, 257,
+	0, 4, 244, 1, 257, 0, 4, 244,
+	4, 257, 0, 4, 245, 1, 257, 0,
+	4, 245, 4, 257, 0, 4, 246, 1,
+	257, 0, 4, 246, 4, 257, 0, 4,
+	247, 1, 257, 0, 4, 247, 4, 257,
+	0, 4, 248, 1, 257, 0, 4, 248,
+	4, 257, 0, 4, 249, 1, 257, 0,
+	4, 249, 4, 257, 0, 4, 250, 1,
+	257, 0, 4, 250, 4, 257, 0, 4,
+	251, 1, 257, 0, 4, 251, 4, 257,
+	0, 4, 252, 1, 257, 0, 4, 252,
+	4, 257, 0, 4, 253, 1, 257, 0,
+	4, 253, 4, 257, 0, 4, 254, 1,
+	257, 0, 4, 254, 4, 257, 0, 4,
+	255, 1, 257, 0, 4, 255, 4, 257,
+	0, 4, 256, 1, 257, 0, 4, 256,
+	4, 257, 0, 4, 286, 1, 287, 0,
+	4, 286, 4, 287, 0, 4, 291, 1,
+	287, 0, 4, 291, 4, 287, 0, 4,
+	292, 28, 26, 69, 4, 305, 7, 358,
+	1, 4, 310, 303, 1, 305, 4, 310,
+	303, 2, 7, 4, 310, 303, 3, 7,
+	4, 310, 303, 4, 7, 4, 310, 303,
+	4, 305, 4, 311, 303, 1, 305, 4,
+	311, 303, 4, 305, 4, 312, 303, 1,
+	305, 4, 312, 303, 4, 305, 4, 313,
+	303, 1, 305, 4, 313, 303, 4, 305,
+	4, 314, 303, 1, 305, 4, 314, 303,
+	4, 305, 4, 315, 303, 1, 305, 4,
+	315, 303, 4, 305, 4, 316, 303, 1,
+	305, 4, 316, 303, 4, 305, 4, 317,
+	303, 1, 305, 4, 317, 303, 4, 305,
+	4, 318, 303, 1, 305, 4, 318, 303,
+	4, 305, 4, 319, 303, 1, 305, 4,
+	319, 303, 4, 305, 4, 320, 303, 1,
+	305, 4, 320, 303, 4, 305, 4, 321,
+	303, 1, 305, 4, 321, 303, 4, 305,
+	4, 322, 303, 1, 305, 4, 322, 303,
+	4, 305, 4, 323, 303, 1, 305, 4,
+	323, 303, 4, 305, 4, 324, 303, 1,
+	305, 4, 324, 303, 4, 305, 4, 325,
+	303, 1, 305, 4, 325, 303, 4, 305,
+	4, 326, 303, 1, 305, 4, 326, 303,
+	4, 305, 4, 327, 303, 1, 305, 4,
+	327, 303, 4, 305, 4, 328, 303, 1,
+	305, 4, 328, 303, 4, 305, 4, 329,
+	303, 1, 305, 4, 329, 303, 4, 305,
+	4, 330, 303, 1, 305, 4, 330, 303,
+	4, 305, 4, 331, 303, 1, 305, 4,
+	331, 303, 4, 305, 4, 332, 303, 1,
+	305, 4, 332, 303, 4, 305, 4, 333,
+	303, 1, 305, 4, 333, 303, 4, 305,
+	4, 334, 303, 1, 305, 4, 334, 303,
+	4, 305, 4, 335, 303, 1, 305, 4,
+	335, 303, 4, 305, 4, 336, 303, 1,
+	305, 4, 336, 303, 4, 305, 4, 337,
+	303, 1, 305, 4, 337, 303, 4, 305,
+	4, 338, 303, 1, 305, 4, 338, 303,
+	4, 305, 4, 339, 303, 1, 305, 4,
+	339, 303, 4, 305, 4, 340, 303, 1,
+	305, 4, 340, 303, 4, 305, 4, 341,
+	303, 1, 305, 4, 341, 303, 4, 305,
+	4, 342, 303, 1, 305, 4, 342, 303,
+	4, 305, 4, 343, 303, 1, 305, 4,
+	343, 303, 4, 305, 4, 344, 303, 1,
+	305, 4, 344, 303, 4, 305, 4, 345,
+	303, 1, 305, 4, 345, 303, 4, 305,
+	4, 346, 303, 1, 305, 4, 346, 303,
+	4, 305, 4, 347, 303, 1, 305, 4,
+	347, 303, 4, 305, 4, 348, 303, 1,
+	305, 4, 348, 303, 4, 305, 4, 349,
+	303, 1, 305, 4, 349, 303, 4, 305,
+	4, 350, 303, 1, 305, 4, 350, 303,
+	4, 305, 4, 351, 303, 1, 305, 4,
+	351, 303, 4, 305, 4, 352, 303, 1,
+	305, 4, 352, 303, 4, 305, 4, 353,
+	303, 1, 305, 4, 353, 303, 4, 305,
+	4, 354, 303, 1, 305, 4, 354, 303,
+	4, 305, 4, 355, 303, 1, 305, 4,
+	355, 303, 4, 305, 4, 356, 303, 1,
+	305, 4, 356, 303, 4, 305, 4, 357,
+	303, 1, 305, 4, 357, 303, 4, 305,
+	5, 20, 7, 76, 0, 1, 5, 27,
+	293, 29, 291, 1, 5, 27, 293, 29,
+	291, 2, 5, 27, 293, 29, 291, 3,
+	5, 27, 293, 29, 291, 4, 5, 29,
+	291, 1, 287, 0, 5, 29, 291, 4,
+	287, 0, 5, 29, 295, 291, 287, 0,
+	5, 31, 1, 93, 7, 358, 5, 31,
+	1, 310, 303, 305, 5, 31, 2, 310,
+	303, 7, 5, 31, 3, 310, 303, 7,
+	5, 31, 4, 310, 303, 7, 5, 31,
+	4, 310, 303, 305, 5, 33, 38, 309,
+	304, 8, 5, 37, 36, 305, 30, 25,
+	5, 40, 42, 266, 274, 0, 5, 40,
+	42, 267, 274, 0, 5, 40, 42, 268,
+	274, 0, 5, 40, 42, 269, 274, 0,
+	5, 42, 266, 1, 274, 0, 5, 42,
+	266, 4, 274, 0, 5, 42, 267, 1,
+	274, 0, 5, 42, 267, 4, 274, 0,
+	5, 42, 268, 1, 274, 0, 5, 42,
+	268, 4, 274, 0, 5, 42, 269, 1,
+	274, 0, 5, 42, 269, 4, 274, 0,
+	5, 46, 145, 291, 287, 0, 5, 46,
+	291, 1, 287, 0, 5, 46, 291, 4,
+	287, 0, 5, 50, 38, 309, 304, 8,
+	5, 56, 7, 72, 0, 1, 5, 80,
+	7, 85, 0, 1, 5, 90, 91, 305,
+	30, 25, 5, 97, 98, 29, 291, 1,
+	5, 97, 98, 29, 291, 2, 5, 97,
+	98, 29, 291, 3, 5, 97, 98, 29,
+	291, 4, 5, 99, 100, 29, 291, 1,
+	5, 99, 100, 29, 291, 2, 5, 99,
+	100, 29, 291, 3, 5, 99, 100, 29,
+	291, 4, 5, 147, 145, 291, 287, 0,
+	5, 272, 43, 39, 37, 36, 5, 310,
+	303, 1, 7, 358, 5, 310, 303, 4,
+	305, 7, 5, 310, 303, 305, 7, 4,
+	6, 20, 83, 7, 85, 0, 1, 6,
+	27, 293, 29, 291, 287, 0, 6, 29,
+	295, 291, 1, 287, 0, 6, 29, 295,
+	291, 4, 287, 0, 6, 31, 1, 310,
+	303, 7, 358, 6, 31, 4, 310, 303,
+	305, 7, 6, 33, 50, 38, 309, 304,
+	8, 6, 40, 42, 266, 1, 274, 0,
+	6, 40, 42, 266, 4, 274, 0, 6,
+	40, 42, 267, 1, 274, 0, 6, 40,
+	42, 267, 4, 274, 0, 6, 40, 42,
+	268, 1, 274, 0, 6, 40, 42, 268,
+	4, 274, 0, 6, 40, 42, 269, 1,
+	274, 0, 6, 40, 42, 269, 4, 274,
+	0, 6, 46, 145, 291, 1, 287, 0,
+	6, 46, 145, 291, 4, 287, 0, 6,
+	97, 98, 29, 291, 287, 0, 6, 99,
+	100, 29, 291, 287, 0, 6, 147, 145,
+	291, 1, 287, 0, 6, 147, 145, 291,
+	4, 287, 0, 6, 310, 303, 1, 305,
+	7, 358, 6, 310, 303, 305, 7, 358,
+	1, 7, 27, 293, 29, 291, 1, 287,
+	0, 7, 27, 293, 29, 291, 4, 287,
+	0, 7, 31, 1, 310, 303, 305, 7,
+	358, 7, 97, 98, 29, 291, 1, 287,
+	0, 7, 97, 98, 29, 291, 4, 287,
+	0, 7, 99, 100, 29, 291, 1, 287,
+	0, 7, 99, 100, 29, 291, 4, 287,
+	0
 };
 
 static const short _zone_scanner_cond_offsets[] = {
@@ -5611,734 +5612,734 @@ static const short _zone_scanner_trans_targs[] = {
 };
 
 static const short _zone_scanner_trans_actions[] = {
-	2707, 0, 5, 7, 629, 800, 800, 800,
-	800, 800, 800, 800, 800, 800, 800, 800,
-	800, 800, 800, 800, 800, 800, 3, 9,
-	3, 9, 2883, 103, 818, 821, 45, 59,
-	57, 55, 0, 61, 815, 824, 411, 0,
+	2709, 0, 5, 7, 631, 802, 802, 802,
+	802, 802, 802, 802, 802, 802, 802, 802,
+	802, 802, 802, 802, 802, 802, 3, 9,
+	3, 9, 2885, 103, 820, 823, 45, 59,
+	57, 55, 0, 61, 817, 826, 413, 0,
 	5, 7, 97, 97, 97, 97, 97, 97,
 	97, 97, 97, 97, 97, 97, 97, 97,
-	97, 97, 97, 3, 9, 2261, 2264, 3395,
-	3399, 0, 0, 0, 3391, 3403, 3411, 5414,
-	5434, 405, 0, 403, 5, 7, 409, 3,
-	9, 419, 446, 2246, 13, 467, 470, 2551,
-	473, 15, 0, 5, 7, 2408, 9, 11,
-	2523, 2255, 407, 11, 461, 13, 428, 434,
-	443, 5409, 3371, 2503, 0, 5, 7, 9,
-	3379, 2252, 446, 11, 2519, 0, 4569, 5,
-	7, 2695, 3015, 3015, 3015, 3015, 3015, 3015,
-	3015, 3015, 3015, 3015, 3015, 3015, 3015, 3015,
-	3015, 3015, 3015, 3, 9, 2249, 2252, 419,
-	446, 6095, 827, 3019, 3023, 4814, 3027, 2258,
-	0, 5, 7, 422, 9, 0, 0, 0,
-	0, 0, 0, 2399, 4299, 4303, 4295, 4307,
-	4311, 5879, 5884, 458, 2507, 2511, 2515, 11,
-	449, 452, 455, 0, 0, 0, 0, 0,
-	0, 2363, 4059, 4063, 4055, 4067, 4071, 5759,
-	5764, 2360, 4039, 4043, 4035, 4047, 4051, 5749,
-	5754, 0, 0, 2318, 3759, 3763, 3755, 3767,
-	3771, 5609, 5614, 0, 0, 0, 2270, 3439,
-	3443, 3435, 3447, 3451, 5449, 5454, 0, 0,
-	0, 2369, 4099, 4103, 4095, 4107, 4111, 5779,
-	5784, 0, 0, 0, 0, 0, 0, 2345,
-	3939, 3943, 3935, 3947, 3951, 5699, 5704, 0,
-	0, 0, 0, 2321, 3779, 3783, 3775, 3787,
-	3791, 5619, 5624, 0, 0, 0, 2342, 3919,
-	3923, 3915, 3927, 3931, 5689, 5694, 2327, 3819,
-	3823, 3815, 3827, 3831, 5639, 5644, 0, 0,
-	0, 0, 0, 2390, 4239, 4243, 4235, 4247,
-	4251, 5849, 5854, 0, 2393, 4259, 4263, 4255,
-	4267, 4271, 5859, 5864, 0, 0, 0, 0,
-	0, 2279, 3499, 3503, 3495, 3507, 3511, 5479,
-	5484, 0, 0, 0, 2405, 4339, 4343, 4335,
-	4347, 4351, 5899, 5904, 0, 0, 101, 806,
-	809, 803, 812, 0, 5, 7, 0, 0,
+	97, 97, 97, 3, 9, 2263, 2266, 3393,
+	3397, 0, 0, 0, 3389, 3401, 3409, 5417,
+	5437, 407, 0, 405, 5, 7, 411, 3,
+	9, 421, 448, 2248, 13, 469, 472, 2553,
+	475, 15, 0, 5, 7, 2410, 9, 11,
+	2525, 2257, 409, 11, 463, 13, 430, 436,
+	445, 5412, 3369, 2505, 0, 5, 7, 9,
+	3377, 2254, 448, 11, 2521, 0, 4567, 5,
+	7, 2697, 3017, 3017, 3017, 3017, 3017, 3017,
+	3017, 3017, 3017, 3017, 3017, 3017, 3017, 3017,
+	3017, 3017, 3017, 3, 9, 2251, 2254, 421,
+	448, 6098, 829, 3021, 3025, 4812, 3029, 2260,
+	0, 5, 7, 424, 9, 0, 0, 0,
+	0, 0, 0, 2401, 4297, 4301, 4293, 4305,
+	4309, 5882, 5887, 460, 2509, 2513, 2517, 11,
+	451, 454, 457, 0, 0, 0, 0, 0,
+	0, 2365, 4057, 4061, 4053, 4065, 4069, 5762,
+	5767, 2362, 4037, 4041, 4033, 4045, 4049, 5752,
+	5757, 0, 0, 2320, 3757, 3761, 3753, 3765,
+	3769, 5612, 5617, 0, 0, 0, 2272, 3437,
+	3441, 3433, 3445, 3449, 5452, 5457, 0, 0,
+	0, 2371, 4097, 4101, 4093, 4105, 4109, 5782,
+	5787, 0, 0, 0, 0, 0, 0, 2347,
+	3937, 3941, 3933, 3945, 3949, 5702, 5707, 0,
+	0, 0, 0, 2323, 3777, 3781, 3773, 3785,
+	3789, 5622, 5627, 0, 0, 0, 2344, 3917,
+	3921, 3913, 3925, 3929, 5692, 5697, 2329, 3817,
+	3821, 3813, 3825, 3829, 5642, 5647, 0, 0,
+	0, 0, 0, 2392, 4237, 4241, 4233, 4245,
+	4249, 5852, 5857, 0, 2395, 4257, 4261, 4253,
+	4265, 4269, 5862, 5867, 0, 0, 0, 0,
+	0, 2281, 3497, 3501, 3493, 3505, 3509, 5482,
+	5487, 0, 0, 0, 2407, 4337, 4341, 4333,
+	4345, 4349, 5902, 5907, 0, 0, 101, 808,
+	811, 805, 814, 0, 5, 7, 0, 0,
 	0, 0, 0, 0, 0, 0, 0, 0,
 	0, 0, 0, 0, 0, 0, 0, 3,
-	9, 0, 0, 0, 0, 0, 0, 2333,
-	3859, 3863, 3855, 3867, 3871, 5659, 5664, 0,
-	0, 0, 2300, 3639, 3643, 3635, 3647, 3651,
-	5549, 5554, 2315, 3739, 3743, 3735, 3747, 3751,
-	5599, 5604, 0, 0, 0, 0, 0, 2381,
-	4179, 4183, 4175, 4187, 4191, 5819, 5824, 0,
-	2384, 4199, 4203, 4195, 4207, 4211, 5829, 5834,
-	0, 2306, 3679, 3683, 3675, 3687, 3691, 5569,
-	5574, 2387, 4219, 4223, 4215, 4227, 4231, 5839,
-	5844, 0, 0, 0, 0, 0, 2282, 3519,
-	3523, 3515, 3527, 3531, 5489, 5494, 2285, 3539,
-	3543, 3535, 3547, 3551, 5499, 5504, 0, 0,
-	0, 0, 0, 0, 2312, 3719, 3723, 3715,
-	3727, 3731, 5589, 5594, 0, 2378, 4159, 4163,
-	4155, 4167, 4171, 5809, 5814, 2267, 3419, 3423,
-	0, 3415, 3427, 3431, 5439, 5444, 0, 2339,
-	3899, 3903, 0, 3895, 3907, 3911, 5679, 5684,
-	2348, 3959, 3963, 0, 3955, 3967, 3971, 5709,
-	5714, 0, 0, 0, 0, 2351, 3979, 3983,
-	3975, 3987, 3991, 5719, 5724, 0, 0, 0,
-	0, 0, 0, 0, 0, 0, 2366, 4079,
-	4083, 4075, 4087, 4091, 5769, 5774, 0, 0,
-	2276, 3479, 3483, 3475, 3487, 3491, 5469, 5474,
-	0, 0, 0, 2291, 3579, 3583, 3575, 3587,
-	3591, 5519, 5524, 0, 0, 0, 2336, 3879,
-	3883, 3875, 3887, 3891, 5669, 5674, 2297, 3619,
-	3623, 3615, 3627, 3631, 5539, 5544, 0, 0,
-	0, 0, 0, 0, 0, 0, 0, 0,
-	2357, 4019, 4023, 4015, 4027, 4031, 5739, 5744,
-	0, 2273, 3459, 3463, 3455, 3467, 3471, 5459,
-	5464, 0, 2375, 4139, 4143, 4135, 4147, 4151,
-	5799, 5804, 0, 2309, 3699, 3703, 3695, 3707,
-	3711, 5579, 5584, 0, 0, 0, 2330, 3839,
-	3843, 3835, 3847, 3851, 5649, 5654, 0, 0,
-	2402, 4319, 4323, 4315, 4327, 4331, 5889, 5894,
-	0, 0, 0, 0, 0, 2354, 3999, 4003,
-	3995, 4007, 4011, 5729, 5734, 0, 2288, 3559,
-	3563, 3555, 3567, 3571, 5509, 5514, 0, 0,
-	647, 629, 2711, 719, 2859, 2863, 45, 2855,
-	2867, 2871, 4754, 4759, 0, 0, 2396, 4279,
-	4283, 4275, 4287, 4291, 5869, 5874, 0, 0,
-	0, 0, 0, 2372, 4119, 4123, 4115, 4127,
-	4131, 5789, 5794, 11, 461, 0, 5, 7,
-	3, 9, 0, 101, 806, 809, 803, 812,
-	0, 5, 7, 629, 99, 99, 99, 99,
+	9, 0, 0, 0, 0, 0, 0, 2335,
+	3857, 3861, 3853, 3865, 3869, 5662, 5667, 0,
+	0, 0, 2302, 3637, 3641, 3633, 3645, 3649,
+	5552, 5557, 2317, 3737, 3741, 3733, 3745, 3749,
+	5602, 5607, 0, 0, 0, 0, 0, 2383,
+	4177, 4181, 4173, 4185, 4189, 5822, 5827, 0,
+	2386, 4197, 4201, 4193, 4205, 4209, 5832, 5837,
+	0, 2308, 3677, 3681, 3673, 3685, 3689, 5572,
+	5577, 2389, 4217, 4221, 4213, 4225, 4229, 5842,
+	5847, 0, 0, 0, 0, 0, 2284, 3517,
+	3521, 3513, 3525, 3529, 5492, 5497, 2287, 3537,
+	3541, 3533, 3545, 3549, 5502, 5507, 0, 0,
+	0, 0, 0, 0, 2314, 3717, 3721, 3713,
+	3725, 3729, 5592, 5597, 0, 2380, 4157, 4161,
+	4153, 4165, 4169, 5812, 5817, 2269, 3417, 3421,
+	0, 3413, 3425, 3429, 5442, 5447, 0, 2341,
+	3897, 3901, 0, 3893, 3905, 3909, 5682, 5687,
+	2350, 3957, 3961, 0, 3953, 3965, 3969, 5712,
+	5717, 0, 0, 0, 0, 2353, 3977, 3981,
+	3973, 3985, 3989, 5722, 5727, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 2368, 4077,
+	4081, 4073, 4085, 4089, 5772, 5777, 0, 0,
+	2278, 3477, 3481, 3473, 3485, 3489, 5472, 5477,
+	0, 0, 0, 2293, 3577, 3581, 3573, 3585,
+	3589, 5522, 5527, 0, 0, 0, 2338, 3877,
+	3881, 3873, 3885, 3889, 5672, 5677, 2299, 3617,
+	3621, 3613, 3625, 3629, 5542, 5547, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0,
+	2359, 4017, 4021, 4013, 4025, 4029, 5742, 5747,
+	0, 2275, 3457, 3461, 3453, 3465, 3469, 5462,
+	5467, 0, 2377, 4137, 4141, 4133, 4145, 4149,
+	5802, 5807, 0, 2311, 3697, 3701, 3693, 3705,
+	3709, 5582, 5587, 0, 0, 0, 2332, 3837,
+	3841, 3833, 3845, 3849, 5652, 5657, 0, 0,
+	2404, 4317, 4321, 4313, 4325, 4329, 5892, 5897,
+	0, 0, 0, 0, 0, 2356, 3997, 4001,
+	3993, 4005, 4009, 5732, 5737, 0, 2290, 3557,
+	3561, 3553, 3565, 3569, 5512, 5517, 0, 0,
+	649, 631, 2713, 721, 2861, 2865, 45, 2857,
+	2869, 2873, 4752, 4757, 0, 0, 2398, 4277,
+	4281, 4273, 4285, 4289, 5872, 5877, 0, 0,
+	0, 0, 0, 2374, 4117, 4121, 4113, 4125,
+	4129, 5792, 5797, 11, 463, 0, 5, 7,
+	3, 9, 0, 101, 808, 811, 805, 814,
+	0, 5, 7, 631, 99, 99, 99, 99,
 	99, 99, 99, 99, 99, 99, 99, 99,
 	99, 99, 99, 99, 99, 3, 9, 103,
-	818, 821, 45, 59, 57, 55, 0, 61,
-	815, 824, 2887, 45, 59, 57, 55, 0,
-	61, 740, 2927, 2931, 4769, 2923, 2935, 11,
-	461, 11, 461, 95, 91, 91, 91, 0,
+	820, 823, 45, 59, 57, 55, 0, 61,
+	817, 826, 2889, 45, 59, 57, 55, 0,
+	61, 742, 2929, 2933, 4767, 2925, 2937, 11,
+	463, 11, 463, 95, 91, 91, 91, 0,
 	0, 0, 0, 0, 0, 89, 41, 39,
-	575, 578, 572, 581, 0, 5, 7, 3,
-	9, 11, 0, 461, 4554, 587, 2623, 2631,
-	2615, 2639, 0, 5, 7, 3, 9, 11,
-	461, 2887, 45, 59, 57, 55, 0, 61,
-	740, 2927, 2931, 4769, 2923, 2935, 11, 461,
-	2683, 2651, 4509, 4524, 4494, 4539, 5963, 5987,
-	0, 5, 7, 3, 9, 419, 446, 3387,
-	3407, 5419, 5424, 6179, 5429, 6351, 6191, 6344,
-	6185, 0, 5, 7, 422, 2455, 0, 5,
-	7, 422, 9, 11, 2519, 476, 2527, 2535,
-	4404, 2543, 11, 425, 431, 440, 0, 5,
-	7, 9, 446, 11, 2519, 3363, 0, 0,
-	0, 0, 0, 83, 0, 0, 79, 2675,
-	584, 2619, 2627, 4484, 2635, 6239, 2643, 4499,
-	4514, 5957, 4529, 0, 5, 7, 422, 9,
-	11, 2519, 4559, 4544, 5969, 5975, 6225, 5981,
-	6374, 6232, 0, 5, 7, 422, 2455, 2647,
-	596, 4504, 4519, 4489, 4534, 13, 428, 434,
-	2427, 443, 458, 4379, 2507, 2511, 2515, 11,
-	449, 452, 455, 458, 2507, 2511, 2515, 11,
-	449, 452, 455, 0, 0, 2303, 3659, 3663,
-	3655, 3667, 3671, 5559, 5564, 0, 0, 0,
-	2294, 3599, 3603, 3595, 3607, 3611, 5529, 5534,
-	0, 2324, 3799, 3803, 3795, 3807, 3811, 5629,
-	5634, 11, 461, 476, 2527, 2535, 4414, 11,
-	425, 431, 4355, 458, 2507, 2511, 11, 449,
-	452, 458, 2507, 2511, 11, 449, 452, 11,
-	461, 13, 428, 434, 443, 2503, 458, 2507,
-	2511, 11, 449, 452, 599, 11, 461, 11,
-	461, 11, 2519, 0, 494, 3, 7, 488,
-	2555, 17, 491, 31, 2579, 29, 0, 527,
-	2559, 21, 23, 0, 518, 497, 19, 500,
-	509, 25, 25, 4424, 503, 506, 27, 524,
-	761, 67, 0, 0, 770, 773, 2951, 73,
-	2947, 764, 71, 71, 2939, 2943, 4774, 767,
-	67, 67, 0, 0, 773, 773, 73, 73,
-	69, 1, 764, 71, 71, 2943, 2943, 767,
-	767, 77, 0, 5, 7, 3, 9, 632,
-	629, 4764, 13, 467, 470, 45, 59, 57,
-	55, 0, 61, 4409, 473, 482, 0, 5,
-	7, 2959, 9, 11, 4389, 2887, 2875, 45,
-	59, 57, 55, 0, 61, 734, 2891, 2895,
-	4769, 6101, 2899, 11, 461, 81, 0, 5,
-	7, 3, 9, 4779, 782, 2963, 21, 23,
-	0, 485, 521, 2563, 2567, 497, 19, 5909,
-	2571, 0, 5, 7, 2967, 9, 11, 4394,
-	500, 512, 25, 25, 503, 506, 27, 11,
-	461, 0, 5, 7, 3, 9, 785, 85,
-	791, 788, 2971, 2975, 6107, 2983, 2979, 797,
-	0, 5, 7, 4784, 794, 2987, 2991, 9,
-	9, 87, 21, 23, 0, 2575, 4429, 4434,
-	497, 19, 6197, 4439, 0, 5, 7, 11,
-	4399, 500, 515, 25, 25, 503, 506, 27,
-	11, 4384, 0, 5, 7, 3, 9, 11,
-	461, 11, 461, 127, 119, 121, 123, 0,
-	125, 0, 5, 7, 3, 9, 1, 416,
-	437, 11, 461, 363, 361, 2123, 2126, 2120,
-	2129, 3323, 5374, 5379, 0, 5, 7, 0,
-	0, 0, 0, 0, 0, 0, 0, 0,
-	0, 0, 0, 0, 0, 0, 0, 0,
-	3, 9, 2132, 2443, 2491, 265, 1547, 1550,
-	0, 0, 0, 1544, 1553, 3131, 4894, 4899,
-	0, 0, 291, 1703, 1706, 1700, 1709, 3183,
-	5024, 5029, 11, 461, 0, 0, 0, 0,
-	0, 0, 355, 2087, 2090, 2084, 2093, 3311,
-	5344, 5349, 0, 0, 0, 0, 0, 0,
-	331, 1943, 1946, 1940, 1949, 3263, 5224, 5229,
-	329, 1931, 1934, 1928, 1937, 3259, 5214, 5219,
-	0, 0, 301, 1763, 1766, 1760, 1769, 3203,
-	5074, 5079, 0, 0, 0, 269, 1571, 1574,
-	1568, 1577, 3139, 4914, 4919, 0, 0, 0,
-	335, 1967, 1970, 1964, 1973, 3271, 5244, 5249,
-	0, 0, 0, 0, 0, 0, 319, 1871,
-	1874, 1868, 1877, 3239, 5164, 5169, 0, 0,
-	0, 0, 303, 1775, 1778, 1772, 1781, 3207,
-	5084, 5089, 0, 0, 0, 317, 1859, 1862,
-	1856, 1865, 3235, 5154, 5159, 307, 1799, 1802,
-	1796, 1805, 3215, 5104, 5109, 0, 0, 0,
-	0, 0, 349, 2051, 2054, 2048, 2057, 3299,
-	5314, 5319, 0, 351, 2063, 2066, 2060, 2069,
-	3303, 5324, 5329, 0, 0, 0, 0, 0,
-	275, 1607, 1610, 1604, 1613, 3151, 4944, 4949,
-	0, 0, 0, 359, 2111, 2114, 2108, 2117,
-	3319, 5364, 5369, 0, 0, 0, 0, 0,
-	0, 0, 311, 1823, 1826, 1820, 1829, 3223,
-	5124, 5129, 0, 0, 0, 289, 1691, 1694,
-	1688, 1697, 3179, 5014, 5019, 299, 1751, 1754,
-	1748, 1757, 3199, 5064, 5069, 0, 0, 0,
-	0, 0, 343, 2015, 2018, 2012, 2021, 3287,
-	5284, 5289, 0, 345, 2027, 2030, 2024, 2033,
-	3291, 5294, 5299, 0, 293, 1715, 1718, 1712,
-	1721, 3187, 5034, 5039, 347, 2039, 2042, 2036,
-	2045, 3295, 5304, 5309, 0, 0, 0, 0,
-	0, 277, 1619, 1622, 1616, 1625, 3155, 4954,
-	4959, 279, 1631, 1634, 1628, 1637, 3159, 4964,
-	4969, 0, 0, 0, 0, 0, 0, 297,
-	1739, 1742, 1736, 1745, 3195, 5054, 5059, 0,
-	341, 2003, 2006, 2000, 2009, 3283, 5274, 5279,
-	267, 1559, 1562, 0, 1556, 1565, 3135, 4904,
-	4909, 0, 315, 1847, 1850, 0, 1844, 1853,
-	3231, 5144, 5149, 321, 1883, 1886, 0, 1880,
-	1889, 3243, 5174, 5179, 0, 0, 0, 0,
-	323, 1895, 1898, 1892, 1901, 3247, 5184, 5189,
-	0, 0, 0, 0, 0, 0, 0, 0,
-	0, 333, 1955, 1958, 1952, 1961, 3267, 5234,
-	5239, 0, 0, 273, 1595, 1598, 1592, 1601,
-	3147, 4934, 4939, 0, 0, 0, 283, 1655,
-	1658, 1652, 1661, 3167, 4984, 4989, 0, 0,
-	0, 313, 1835, 1838, 1832, 1841, 3227, 5134,
-	5139, 287, 1679, 1682, 1676, 1685, 3175, 5004,
-	5009, 0, 0, 0, 0, 0, 0, 0,
-	0, 0, 0, 327, 1919, 1922, 1916, 1925,
-	3255, 5204, 5209, 0, 271, 1583, 1586, 1580,
-	1589, 3143, 4924, 4929, 0, 339, 1991, 1994,
-	1988, 1997, 3279, 5264, 5269, 0, 295, 1727,
-	1730, 1724, 1733, 3191, 5044, 5049, 0, 0,
-	0, 309, 1811, 1814, 1808, 1817, 3219, 5114,
-	5119, 0, 0, 357, 2099, 2102, 2096, 2105,
-	3315, 5354, 5359, 0, 0, 0, 0, 0,
-	325, 1907, 1910, 1904, 1913, 3251, 5194, 5199,
-	0, 281, 1643, 1646, 1640, 1649, 3163, 4974,
-	4979, 0, 0, 629, 263, 1535, 1538, 45,
-	1532, 1541, 3127, 4884, 4889, 0, 0, 353,
-	2075, 2078, 2072, 2081, 3307, 5334, 5339, 0,
-	0, 0, 0, 0, 337, 1979, 1982, 1976,
-	1985, 3275, 5254, 5259, 0, 0, 0, 285,
-	1667, 1670, 1664, 1673, 3171, 4994, 4999, 0,
-	305, 1787, 1790, 1784, 1793, 3211, 5094, 5099,
-	377, 0, 5, 7, 3, 9, 635, 629,
-	53, 725, 728, 45, 722, 731, 3107, 0,
+	577, 580, 574, 583, 0, 5, 7, 3,
+	9, 11, 0, 463, 4552, 589, 2625, 2633,
+	2617, 2641, 0, 5, 7, 3, 9, 11,
+	463, 2889, 45, 59, 57, 55, 0, 61,
+	742, 2929, 2933, 4767, 2925, 2937, 11, 463,
+	2685, 2653, 4507, 4522, 4492, 4537, 5966, 5990,
+	0, 5, 7, 3, 9, 421, 448, 3385,
+	3405, 5422, 5427, 6182, 5432, 6354, 6194, 6347,
+	6188, 0, 5, 7, 424, 2457, 0, 5,
+	7, 424, 9, 11, 2521, 478, 2529, 2537,
+	4402, 2545, 11, 427, 433, 442, 0, 5,
+	7, 9, 448, 11, 2521, 3361, 0, 0,
+	0, 0, 0, 83, 0, 0, 79, 2677,
+	586, 2621, 2629, 4482, 2637, 6242, 2645, 4497,
+	4512, 5960, 4527, 0, 5, 7, 424, 9,
+	11, 2521, 4557, 4542, 5972, 5978, 6228, 5984,
+	6377, 6235, 0, 5, 7, 424, 2457, 2649,
+	598, 4502, 4517, 4487, 4532, 13, 430, 436,
+	2429, 445, 460, 4377, 2509, 2513, 2517, 11,
+	451, 454, 457, 460, 2509, 2513, 2517, 11,
+	451, 454, 457, 0, 0, 2305, 3657, 3661,
+	3653, 3665, 3669, 5562, 5567, 0, 0, 0,
+	2296, 3597, 3601, 3593, 3605, 3609, 5532, 5537,
+	0, 2326, 3797, 3801, 3793, 3805, 3809, 5632,
+	5637, 11, 463, 478, 2529, 2537, 4412, 11,
+	427, 433, 4353, 460, 2509, 2513, 11, 451,
+	454, 460, 2509, 2513, 11, 451, 454, 11,
+	463, 13, 430, 436, 445, 2505, 460, 2509,
+	2513, 11, 451, 454, 601, 11, 463, 11,
+	463, 11, 2521, 0, 496, 3, 7, 490,
+	2557, 17, 493, 31, 2581, 29, 0, 529,
+	2561, 21, 23, 0, 520, 499, 19, 502,
+	511, 25, 25, 4422, 505, 508, 27, 526,
+	763, 67, 0, 0, 772, 775, 2953, 73,
+	2949, 766, 71, 71, 2941, 2945, 4772, 769,
+	67, 67, 0, 0, 775, 775, 73, 73,
+	69, 1, 766, 71, 71, 2945, 2945, 769,
+	769, 77, 0, 5, 7, 3, 9, 634,
+	631, 4762, 13, 469, 472, 45, 59, 57,
+	55, 0, 61, 4407, 475, 484, 0, 5,
+	7, 2961, 9, 11, 4387, 2889, 2877, 45,
+	59, 57, 55, 0, 61, 736, 2893, 2897,
+	4767, 6104, 2901, 11, 463, 81, 0, 5,
+	7, 3, 9, 4777, 784, 2965, 21, 23,
+	0, 487, 523, 2565, 2569, 499, 19, 5912,
+	2573, 0, 5, 7, 2969, 9, 11, 4392,
+	502, 514, 25, 25, 505, 508, 27, 11,
+	463, 0, 5, 7, 3, 9, 787, 85,
+	793, 790, 2973, 2977, 6110, 2985, 2981, 799,
+	0, 5, 7, 4782, 796, 2989, 2993, 9,
+	9, 87, 21, 23, 0, 2577, 4427, 4432,
+	499, 19, 6200, 4437, 0, 5, 7, 11,
+	4397, 502, 517, 25, 25, 505, 508, 27,
+	11, 4382, 0, 5, 7, 3, 9, 11,
+	463, 11, 463, 127, 119, 121, 123, 0,
+	125, 0, 5, 7, 3, 9, 1, 418,
+	439, 11, 463, 363, 361, 2125, 2128, 2122,
+	2131, 3321, 5377, 5382, 0, 5, 7, 0,
+	0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0,
+	3, 9, 2134, 2445, 2493, 265, 1549, 1552,
+	0, 0, 0, 1546, 1555, 3129, 4897, 4902,
+	0, 0, 291, 1705, 1708, 1702, 1711, 3181,
+	5027, 5032, 11, 463, 0, 0, 0, 0,
+	0, 0, 355, 2089, 2092, 2086, 2095, 3309,
+	5347, 5352, 0, 0, 0, 0, 0, 0,
+	331, 1945, 1948, 1942, 1951, 3261, 5227, 5232,
+	329, 1933, 1936, 1930, 1939, 3257, 5217, 5222,
+	0, 0, 301, 1765, 1768, 1762, 1771, 3201,
+	5077, 5082, 0, 0, 0, 269, 1573, 1576,
+	1570, 1579, 3137, 4917, 4922, 0, 0, 0,
+	335, 1969, 1972, 1966, 1975, 3269, 5247, 5252,
+	0, 0, 0, 0, 0, 0, 319, 1873,
+	1876, 1870, 1879, 3237, 5167, 5172, 0, 0,
+	0, 0, 303, 1777, 1780, 1774, 1783, 3205,
+	5087, 5092, 0, 0, 0, 317, 1861, 1864,
+	1858, 1867, 3233, 5157, 5162, 307, 1801, 1804,
+	1798, 1807, 3213, 5107, 5112, 0, 0, 0,
+	0, 0, 349, 2053, 2056, 2050, 2059, 3297,
+	5317, 5322, 0, 351, 2065, 2068, 2062, 2071,
+	3301, 5327, 5332, 0, 0, 0, 0, 0,
+	275, 1609, 1612, 1606, 1615, 3149, 4947, 4952,
+	0, 0, 0, 359, 2113, 2116, 2110, 2119,
+	3317, 5367, 5372, 0, 0, 0, 0, 0,
+	0, 0, 311, 1825, 1828, 1822, 1831, 3221,
+	5127, 5132, 0, 0, 0, 289, 1693, 1696,
+	1690, 1699, 3177, 5017, 5022, 299, 1753, 1756,
+	1750, 1759, 3197, 5067, 5072, 0, 0, 0,
+	0, 0, 343, 2017, 2020, 2014, 2023, 3285,
+	5287, 5292, 0, 345, 2029, 2032, 2026, 2035,
+	3289, 5297, 5302, 0, 293, 1717, 1720, 1714,
+	1723, 3185, 5037, 5042, 347, 2041, 2044, 2038,
+	2047, 3293, 5307, 5312, 0, 0, 0, 0,
+	0, 277, 1621, 1624, 1618, 1627, 3153, 4957,
+	4962, 279, 1633, 1636, 1630, 1639, 3157, 4967,
+	4972, 0, 0, 0, 0, 0, 0, 297,
+	1741, 1744, 1738, 1747, 3193, 5057, 5062, 0,
+	341, 2005, 2008, 2002, 2011, 3281, 5277, 5282,
+	267, 1561, 1564, 0, 1558, 1567, 3133, 4907,
+	4912, 0, 315, 1849, 1852, 0, 1846, 1855,
+	3229, 5147, 5152, 321, 1885, 1888, 0, 1882,
+	1891, 3241, 5177, 5182, 0, 0, 0, 0,
+	323, 1897, 1900, 1894, 1903, 3245, 5187, 5192,
+	0, 0, 0, 0, 0, 0, 0, 0,
+	0, 333, 1957, 1960, 1954, 1963, 3265, 5237,
+	5242, 0, 0, 273, 1597, 1600, 1594, 1603,
+	3145, 4937, 4942, 0, 0, 0, 283, 1657,
+	1660, 1654, 1663, 3165, 4987, 4992, 0, 0,
+	0, 313, 1837, 1840, 1834, 1843, 3225, 5137,
+	5142, 287, 1681, 1684, 1678, 1687, 3173, 5007,
+	5012, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 327, 1921, 1924, 1918, 1927,
+	3253, 5207, 5212, 0, 271, 1585, 1588, 1582,
+	1591, 3141, 4927, 4932, 0, 339, 1993, 1996,
+	1990, 1999, 3277, 5267, 5272, 0, 295, 1729,
+	1732, 1726, 1735, 3189, 5047, 5052, 0, 0,
+	0, 309, 1813, 1816, 1810, 1819, 3217, 5117,
+	5122, 0, 0, 357, 2101, 2104, 2098, 2107,
+	3313, 5357, 5362, 0, 0, 0, 0, 0,
+	325, 1909, 1912, 1906, 1915, 3249, 5197, 5202,
+	0, 281, 1645, 1648, 1642, 1651, 3161, 4977,
+	4982, 0, 0, 631, 263, 1537, 1540, 45,
+	1534, 1543, 3125, 4887, 4892, 0, 0, 353,
+	2077, 2080, 2074, 2083, 3305, 5337, 5342, 0,
+	0, 0, 0, 0, 337, 1981, 1984, 1978,
+	1987, 3273, 5257, 5262, 0, 0, 0, 285,
+	1669, 1672, 1666, 1675, 3169, 4997, 5002, 0,
+	305, 1789, 1792, 1786, 1795, 3209, 5097, 5102,
+	377, 0, 5, 7, 3, 9, 637, 631,
+	53, 727, 730, 45, 724, 733, 3109, 0,
 	5, 7, 115, 3, 9, 117, 0, 5,
-	7, 3, 9, 863, 2439, 2487, 11, 461,
-	11, 461, 11, 461, 0, 5, 7, 3,
-	9, 629, 629, 413, 2415, 2419, 45, 1,
-	2411, 2423, 0, 5, 7, 115, 3, 9,
-	117, 0, 5, 7, 3, 9, 863, 2439,
-	2487, 11, 461, 11, 461, 53, 725, 728,
-	722, 731, 11, 461, 387, 0, 0, 0,
-	0, 0, 0, 0, 0, 0, 917, 0,
-	0, 929, 0, 0, 0, 0, 0, 0,
-	0, 0, 926, 0, 0, 0, 0, 932,
-	0, 0, 641, 629, 683, 45, 0, 0,
-	0, 0, 0, 0, 0, 0, 0, 0,
-	0, 0, 0, 0, 920, 0, 0, 0,
-	923, 385, 383, 2222, 2225, 2219, 2228, 3351,
-	5384, 5389, 0, 5, 7, 389, 389, 389,
-	389, 389, 389, 389, 3, 9, 2231, 2451,
-	2499, 0, 0, 0, 157, 5404, 5404, 4454,
-	5921, 5927, 5915, 5933, 6204, 6358, 6366, 11,
-	461, 0, 0, 163, 0, 560, 560, 121,
-	123, 0, 125, 0, 37, 119, 391, 2237,
-	2240, 2234, 2243, 3355, 5394, 5399, 121, 123,
-	0, 125, 0, 563, 2599, 2603, 119, 2595,
-	2607, 4459, 5939, 5945, 0, 0, 0, 0,
-	0, 0, 0, 0, 161, 833, 0, 2591,
-	2591, 3059, 839, 105, 830, 4834, 6125, 6131,
-	839, 105, 6119, 6137, 6316, 6382, 6390, 830,
-	0, 0, 0, 0, 165, 0, 2591, 2591,
-	3083, 842, 105, 830, 4849, 6149, 6155, 842,
-	105, 6143, 6161, 6323, 6398, 6406, 830, 0,
-	0, 638, 629, 2835, 4734, 4739, 45, 49,
-	4729, 4744, 6077, 6302, 6309, 557, 0, 0,
+	7, 3, 9, 865, 2441, 2489, 11, 463,
+	11, 463, 11, 463, 0, 5, 7, 3,
+	9, 631, 631, 415, 2417, 2421, 45, 1,
+	2413, 2425, 0, 5, 7, 115, 3, 9,
+	117, 0, 5, 7, 3, 9, 865, 2441,
+	2489, 11, 463, 11, 463, 53, 727, 730,
+	724, 733, 11, 463, 387, 393, 393, 393,
+	393, 393, 393, 0, 0, 0, 919, 0,
+	0, 931, 0, 0, 0, 0, 0, 0,
+	0, 0, 928, 0, 0, 0, 0, 934,
+	0, 0, 643, 631, 685, 45, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 922, 0, 0, 0,
+	925, 385, 383, 2224, 2227, 2221, 2230, 3349,
+	5387, 5392, 0, 5, 7, 389, 389, 389,
+	389, 389, 389, 389, 3, 9, 2233, 2453,
+	2501, 0, 0, 0, 157, 5407, 5407, 4452,
+	5924, 5930, 5918, 5936, 6207, 6361, 6369, 11,
+	463, 0, 0, 163, 0, 562, 562, 121,
+	123, 0, 125, 0, 37, 119, 391, 2239,
+	2242, 2236, 2245, 3353, 5397, 5402, 121, 123,
+	0, 125, 0, 565, 2601, 2605, 119, 2597,
+	2609, 4457, 5942, 5948, 0, 0, 0, 0,
+	0, 0, 0, 0, 161, 835, 0, 2593,
+	2593, 3061, 841, 105, 832, 4832, 6128, 6134,
+	841, 105, 6122, 6140, 6319, 6385, 6393, 832,
+	0, 0, 0, 0, 165, 0, 2593, 2593,
+	3085, 844, 105, 832, 4847, 6152, 6158, 844,
+	105, 6146, 6164, 6326, 6401, 6409, 832, 0,
+	0, 640, 631, 2837, 4732, 4737, 45, 49,
+	4727, 4742, 6080, 6305, 6312, 559, 0, 0,
 	0, 0, 0, 0, 0, 0, 155, 0,
-	3359, 3359, 566, 0, 393, 2611, 4469, 4474,
-	0, 4464, 4479, 5951, 6211, 6218, 393, 0,
-	0, 0, 0, 0, 0, 0, 0, 0,
-	0, 0, 0, 0, 0, 3119, 4869, 4874,
-	4864, 4879, 6167, 6330, 6337, 0, 0, 0,
-	159, 0, 3115, 3115, 49, 45, 701, 2843,
-	2847, 45, 2839, 2851, 4749, 6083, 6089, 5404,
-	2587, 395, 629, 0, 0, 0, 0, 0,
-	668, 45, 0, 0, 872, 0, 875, 0,
-	0, 0, 0, 0, 0, 0, 0, 0,
-	0, 0, 881, 0, 0, 0, 0, 0,
-	0, 0, 0, 0, 893, 0, 0, 0,
-	0, 0, 0, 0, 0, 0, 0, 0,
-	0, 0, 896, 0, 0, 0, 0, 0,
-	0, 0, 0, 899, 0, 0, 0, 0,
-	0, 0, 902, 0, 0, 905, 0, 0,
-	0, 0, 0, 0, 0, 908, 0, 0,
-	0, 0, 0, 0, 0, 0, 0, 0,
-	911, 0, 0, 914, 0, 0, 0, 0,
-	0, 0, 869, 0, 0, 0, 0, 0,
-	878, 0, 0, 0, 0, 0, 0, 0,
-	0, 0, 0, 0, 884, 0, 0, 887,
-	0, 0, 890, 397, 629, 0, 0, 0,
-	0, 0, 0, 683, 45, 0, 0, 0,
-	0, 0, 935, 0, 0, 0, 0, 0,
-	0, 0, 0, 938, 0, 0, 0, 932,
-	0, 0, 926, 0, 0, 0, 929, 0,
-	0, 944, 0, 0, 0, 923, 0, 0,
-	917, 0, 0, 0, 920, 0, 0, 941,
-	836, 830, 3039, 105, 602, 605, 602, 43,
-	611, 614, 608, 617, 0, 5, 7, 602,
-	3, 9, 43, 611, 614, 608, 617, 644,
-	0, 5, 7, 629, 3, 9, 51, 710,
-	713, 45, 707, 716, 0, 5, 7, 629,
-	3, 9, 2879, 51, 710, 713, 45, 59,
-	57, 55, 0, 61, 707, 716, 0, 5,
-	7, 629, 3, 9, 51, 710, 713, 45,
-	59, 57, 55, 0, 61, 707, 716, 0,
-	5, 7, 629, 3, 9, 51, 710, 713,
-	45, 59, 57, 55, 0, 61, 707, 716,
-	0, 5, 7, 629, 3, 9, 704, 45,
-	59, 57, 55, 0, 61, 2887, 45, 59,
-	57, 55, 0, 61, 2903, 4769, 11, 461,
-	2887, 45, 59, 57, 55, 0, 61, 737,
-	2911, 2915, 4769, 2907, 2919, 11, 461, 2887,
-	45, 59, 57, 55, 0, 61, 737, 2911,
-	2915, 4769, 2907, 2919, 11, 461, 2887, 45,
-	59, 57, 55, 0, 61, 737, 2911, 2915,
-	4769, 2907, 2919, 11, 461, 11, 461, 11,
-	461, 530, 35, 545, 548, 542, 551, 530,
-	0, 5, 7, 3, 9, 539, 11, 461,
-	602, 43, 611, 614, 608, 617, 0, 5,
-	7, 602, 3, 9, 605, 11, 461, 629,
-	49, 689, 692, 45, 686, 695, 0, 5,
-	7, 602, 3, 9, 605, 11, 461, 2955,
-	779, 35, 545, 548, 542, 551, 2583, 4444,
-	4449, 530, 0, 5, 7, 3, 9, 776,
-	2435, 2483, 11, 461, 830, 3063, 105, 2210,
-	3327, 365, 2138, 2141, 45, 2135, 2144, 0,
-	5, 7, 629, 0, 0, 3, 9, 369,
-	2162, 2165, 45, 2159, 2168, 0, 5, 7,
-	4724, 3, 9, 650, 2743, 2747, 0, 45,
-	2739, 2751, 0, 5, 7, 3, 9, 0,
-	5, 7, 3, 9, 629, 367, 2150, 2153,
-	45, 2147, 2156, 0, 5, 7, 629, 0,
-	0, 3, 9, 371, 2174, 2177, 45, 2171,
-	2180, 0, 5, 7, 4724, 3, 9, 653,
-	2759, 2763, 0, 45, 2755, 2767, 0, 5,
+	3357, 3357, 568, 0, 395, 2613, 4467, 4472,
+	0, 4462, 4477, 5954, 6214, 6221, 395, 0,
+	0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 3117, 4867, 4872,
+	4862, 4877, 6170, 6333, 6340, 0, 0, 0,
+	159, 0, 4882, 4882, 49, 45, 703, 2845,
+	2849, 45, 2841, 2853, 4747, 6086, 6092, 5407,
+	2589, 397, 631, 0, 0, 0, 0, 0,
+	670, 45, 0, 0, 874, 0, 877, 0,
+	0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 883, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 895, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 898, 0, 0, 0, 0, 0,
+	0, 0, 0, 901, 0, 0, 0, 0,
+	0, 0, 904, 0, 0, 907, 0, 0,
+	0, 0, 0, 0, 0, 910, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0,
+	913, 0, 0, 916, 0, 0, 0, 0,
+	0, 0, 871, 0, 0, 0, 0, 0,
+	880, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 886, 0, 0, 889,
+	0, 0, 892, 399, 631, 0, 0, 0,
+	0, 0, 0, 685, 45, 0, 0, 0,
+	0, 0, 937, 0, 0, 0, 0, 0,
+	0, 0, 0, 940, 0, 0, 0, 934,
+	0, 0, 928, 0, 0, 0, 931, 0,
+	0, 946, 0, 0, 0, 925, 0, 0,
+	919, 0, 0, 0, 922, 0, 0, 943,
+	838, 832, 3041, 105, 604, 607, 604, 43,
+	613, 616, 610, 619, 0, 5, 7, 604,
+	3, 9, 43, 613, 616, 610, 619, 646,
+	0, 5, 7, 631, 3, 9, 51, 712,
+	715, 45, 709, 718, 0, 5, 7, 631,
+	3, 9, 2881, 51, 712, 715, 45, 59,
+	57, 55, 0, 61, 709, 718, 0, 5,
+	7, 631, 3, 9, 51, 712, 715, 45,
+	59, 57, 55, 0, 61, 709, 718, 0,
+	5, 7, 631, 3, 9, 51, 712, 715,
+	45, 59, 57, 55, 0, 61, 709, 718,
+	0, 5, 7, 631, 3, 9, 706, 45,
+	59, 57, 55, 0, 61, 2889, 45, 59,
+	57, 55, 0, 61, 2905, 4767, 11, 463,
+	2889, 45, 59, 57, 55, 0, 61, 739,
+	2913, 2917, 4767, 2909, 2921, 11, 463, 2889,
+	45, 59, 57, 55, 0, 61, 739, 2913,
+	2917, 4767, 2909, 2921, 11, 463, 2889, 45,
+	59, 57, 55, 0, 61, 739, 2913, 2917,
+	4767, 2909, 2921, 11, 463, 11, 463, 11,
+	463, 532, 35, 547, 550, 544, 553, 532,
+	0, 5, 7, 3, 9, 541, 11, 463,
+	604, 43, 613, 616, 610, 619, 0, 5,
+	7, 604, 3, 9, 607, 11, 463, 631,
+	49, 691, 694, 45, 688, 697, 0, 5,
+	7, 604, 3, 9, 607, 11, 463, 2957,
+	781, 35, 547, 550, 544, 553, 2585, 4442,
+	4447, 532, 0, 5, 7, 3, 9, 778,
+	2437, 2485, 11, 463, 832, 3065, 105, 2212,
+	3325, 365, 2140, 2143, 45, 2137, 2146, 0,
+	5, 7, 631, 0, 0, 3, 9, 369,
+	2164, 2167, 45, 2161, 2170, 0, 5, 7,
+	4722, 3, 9, 652, 2745, 2749, 0, 45,
+	2741, 2753, 0, 5, 7, 3, 9, 0,
+	5, 7, 3, 9, 631, 367, 2152, 2155,
+	45, 2149, 2158, 0, 5, 7, 631, 0,
+	0, 3, 9, 371, 2176, 2179, 45, 2173,
+	2182, 0, 5, 7, 4722, 3, 9, 655,
+	2761, 2765, 0, 45, 2757, 2769, 0, 5,
 	7, 3, 9, 0, 5, 7, 3, 9,
-	0, 4719, 6173, 656, 2775, 2779, 0, 45,
-	656, 2771, 2783, 4699, 6029, 6035, 0, 5,
-	7, 4719, 3, 9, 2207, 2447, 2495, 659,
-	2791, 2795, 0, 45, 659, 2787, 2799, 4704,
-	6041, 6047, 0, 5, 7, 4719, 3, 9,
-	2447, 2495, 662, 2807, 2811, 0, 45, 662,
-	2803, 2815, 4709, 6053, 6059, 0, 5, 7,
-	4719, 3, 9, 2447, 2495, 665, 2823, 2827,
-	0, 45, 2819, 2831, 4714, 6065, 6071, 0,
-	5, 7, 3, 9, 2447, 2495, 11, 461,
-	2735, 4684, 4689, 4574, 4679, 4694, 6023, 6288,
-	6295, 626, 11, 461, 2731, 4664, 4669, 4574,
-	2731, 4659, 4674, 6017, 6274, 6281, 626, 11,
-	461, 2727, 4644, 4649, 4574, 2727, 4639, 4654,
-	6011, 6260, 6267, 626, 11, 461, 2723, 4624,
-	4629, 4574, 2723, 4619, 4634, 6005, 6246, 6253,
-	626, 11, 461, 375, 2198, 2201, 2195, 2204,
-	11, 461, 2719, 4604, 4609, 4574, 4599, 4614,
-	626, 11, 461, 11, 461, 11, 461, 373,
-	2186, 2189, 2183, 2192, 11, 461, 2715, 4584,
-	4589, 4574, 4579, 4594, 626, 11, 461, 11,
-	461, 629, 49, 689, 692, 45, 686, 695,
-	0, 5, 7, 629, 3, 9, 49, 689,
-	692, 45, 686, 695, 0, 5, 7, 629,
-	3, 9, 49, 689, 692, 45, 686, 695,
-	0, 5, 7, 602, 3, 9, 605, 11,
-	461, 11, 461, 11, 461, 629, 49, 689,
-	692, 45, 686, 695, 0, 5, 7, 629,
-	3, 9, 49, 689, 692, 45, 686, 695,
-	530, 0, 5, 7, 3, 9, 35, 545,
-	548, 542, 551, 530, 0, 5, 7, 3,
-	9, 35, 545, 548, 542, 551, 530, 0,
-	5, 7, 3, 9, 35, 545, 548, 542,
-	551, 0, 5, 7, 602, 3, 9, 605,
-	11, 461, 11, 461, 11, 461, 11, 461,
-	11, 461, 401, 0, 5, 7, 3, 9,
-	629, 49, 689, 692, 45, 686, 695, 0,
-	5, 7, 399, 3, 9, 0, 5, 7,
-	3, 9, 129, 1, 11, 461, 11, 461,
-	11, 461, 857, 0, 845, 5, 7, 848,
-	851, 3, 9, 1, 416, 437, 111, 113,
-	0, 3031, 830, 105, 107, 629, 854, 3095,
-	3099, 45, 3091, 3103, 3087, 4854, 4859, 11,
-	461, 0, 830, 105, 109, 629, 49, 689,
-	692, 45, 686, 695, 0, 5, 7, 399,
-	3, 9, 0, 5, 7, 3, 9, 629,
-	47, 674, 677, 45, 671, 680, 860, 0,
+	0, 4717, 6176, 658, 2777, 2781, 0, 45,
+	658, 2773, 2785, 4697, 6032, 6038, 0, 5,
+	7, 4717, 3, 9, 2209, 2449, 2497, 661,
+	2793, 2797, 0, 45, 661, 2789, 2801, 4702,
+	6044, 6050, 0, 5, 7, 4717, 3, 9,
+	2449, 2497, 664, 2809, 2813, 0, 45, 664,
+	2805, 2817, 4707, 6056, 6062, 0, 5, 7,
+	4717, 3, 9, 2449, 2497, 667, 2825, 2829,
+	0, 45, 2821, 2833, 4712, 6068, 6074, 0,
+	5, 7, 3, 9, 2449, 2497, 11, 463,
+	2737, 4682, 4687, 4572, 4677, 4692, 6026, 6291,
+	6298, 628, 11, 463, 2733, 4662, 4667, 4572,
+	2733, 4657, 4672, 6020, 6277, 6284, 628, 11,
+	463, 2729, 4642, 4647, 4572, 2729, 4637, 4652,
+	6014, 6263, 6270, 628, 11, 463, 2725, 4622,
+	4627, 4572, 2725, 4617, 4632, 6008, 6249, 6256,
+	628, 11, 463, 375, 2200, 2203, 2197, 2206,
+	11, 463, 2721, 4602, 4607, 4572, 4597, 4612,
+	628, 11, 463, 11, 463, 11, 463, 373,
+	2188, 2191, 2185, 2194, 11, 463, 2717, 4582,
+	4587, 4572, 4577, 4592, 628, 11, 463, 11,
+	463, 631, 49, 691, 694, 45, 688, 697,
+	0, 5, 7, 631, 3, 9, 49, 691,
+	694, 45, 688, 697, 0, 5, 7, 631,
+	3, 9, 49, 691, 694, 45, 688, 697,
+	0, 5, 7, 604, 3, 9, 607, 11,
+	463, 11, 463, 11, 463, 631, 49, 691,
+	694, 45, 688, 697, 0, 5, 7, 631,
+	3, 9, 49, 691, 694, 45, 688, 697,
+	532, 0, 5, 7, 3, 9, 35, 547,
+	550, 544, 553, 532, 0, 5, 7, 3,
+	9, 35, 547, 550, 544, 553, 532, 0,
+	5, 7, 3, 9, 35, 547, 550, 544,
+	553, 0, 5, 7, 604, 3, 9, 607,
+	11, 463, 11, 463, 11, 463, 11, 463,
+	11, 463, 403, 0, 5, 7, 3, 9,
+	631, 49, 691, 694, 45, 688, 697, 0,
+	5, 7, 401, 3, 9, 0, 5, 7,
+	3, 9, 129, 1, 11, 463, 11, 463,
+	11, 463, 859, 0, 847, 5, 7, 850,
+	853, 3, 9, 1, 418, 439, 111, 113,
+	0, 3033, 832, 105, 107, 631, 856, 3097,
+	3101, 45, 3093, 3105, 3089, 4852, 4857, 11,
+	463, 0, 832, 105, 109, 631, 49, 691,
+	694, 45, 688, 697, 0, 5, 7, 401,
+	3, 9, 0, 5, 7, 3, 9, 631,
+	47, 676, 679, 45, 673, 682, 862, 0,
 	5, 7, 115, 3, 9, 117, 0, 5,
-	7, 3, 9, 1, 416, 437, 11, 461,
-	11, 461, 11, 461, 11, 461, 629, 47,
-	674, 677, 45, 671, 680, 0, 5, 7,
-	629, 3, 9, 47, 674, 677, 45, 671,
-	680, 0, 5, 7, 115, 3, 9, 117,
-	0, 5, 7, 3, 9, 1, 416, 437,
-	11, 461, 11, 461, 11, 461, 629, 47,
-	674, 677, 45, 671, 680, 947, 0, 5,
+	7, 3, 9, 1, 418, 439, 11, 463,
+	11, 463, 11, 463, 11, 463, 631, 47,
+	676, 679, 45, 673, 682, 0, 5, 7,
+	631, 3, 9, 47, 676, 679, 45, 673,
+	682, 0, 5, 7, 115, 3, 9, 117,
+	0, 5, 7, 3, 9, 1, 418, 439,
+	11, 463, 11, 463, 11, 463, 631, 47,
+	676, 679, 45, 673, 682, 949, 0, 5,
 	7, 147, 149, 151, 153, 3, 9, 0,
-	5, 7, 3, 9, 2699, 629, 47, 674,
-	677, 45, 671, 680, 0, 5, 7, 0,
-	3, 9, 3123, 0, 5, 7, 0, 5,
-	7, 0, 5, 7, 1, 3, 9, 416,
-	437, 3, 9, 416, 437, 3, 9, 416,
-	437, 950, 129, 11, 461, 11, 461, 11,
-	461, 11, 461, 11, 461, 0, 5, 7,
-	3, 9, 629, 47, 674, 677, 45, 671,
-	680, 3035, 0, 5, 7, 830, 3, 9,
-	4819, 105, 839, 3047, 3051, 839, 3047, 3051,
-	839, 3047, 3051, 3039, 3043, 3055, 4824, 4829,
-	3043, 3055, 4824, 4829, 3043, 3055, 4824, 4829,
-	11, 461, 11, 461, 0, 5, 7, 3,
-	9, 629, 47, 674, 677, 45, 671, 680,
-	0, 5, 7, 830, 3, 9, 105, 842,
-	3071, 3075, 842, 3071, 3075, 842, 3071, 3075,
-	3063, 3067, 3079, 4839, 4844, 3067, 3079, 4839,
-	4844, 3067, 3079, 4839, 4844, 11, 461, 11,
-	461, 0, 5, 7, 3, 9, 629, 47,
-	674, 677, 45, 671, 680, 0, 5, 7,
-	602, 3, 9, 43, 611, 614, 43, 611,
-	614, 43, 611, 614, 605, 608, 617, 2687,
-	2691, 608, 617, 2687, 2691, 608, 617, 2687,
-	2691, 11, 461, 11, 461, 11, 461, 953,
-	0, 0, 0, 0, 0, 0, 0, 0,
-	0, 0, 0, 0, 0, 0, 0, 0,
-	0, 167, 959, 962, 0, 0, 0, 956,
-	965, 0, 5, 7, 399, 3, 9, 0,
-	5, 7, 3, 9, 629, 47, 674, 677,
-	45, 671, 680, 0, 5, 7, 629, 3,
-	9, 51, 710, 713, 45, 707, 716, 758,
-	0, 5, 7, 743, 3, 9, 65, 749,
-	752, 63, 746, 755, 0, 5, 7, 743,
-	3, 9, 65, 749, 752, 63, 746, 755,
-	0, 5, 7, 629, 3, 9, 49, 689,
-	692, 45, 686, 695, 0, 5, 7, 602,
-	3, 9, 43, 611, 614, 608, 617, 0,
-	5, 7, 129, 3, 9, 1, 11, 461,
-	11, 461, 11, 461, 11, 461, 11, 461,
-	11, 461, 11, 461, 11, 461, 0, 0,
-	193, 1115, 1118, 1112, 1121, 0, 0, 0,
-	187, 1079, 1082, 1076, 1085, 0, 207, 1199,
-	1202, 1196, 1205, 0, 0, 0, 0, 0,
-	0, 257, 1499, 1502, 1496, 1505, 0, 0,
-	0, 0, 0, 0, 233, 1355, 1358, 1352,
-	1361, 231, 1343, 1346, 1340, 1349, 0, 0,
-	203, 1175, 1178, 1172, 1181, 0, 0, 0,
-	171, 983, 986, 980, 989, 0, 0, 0,
-	237, 1379, 1382, 1376, 1385, 0, 0, 0,
-	0, 0, 0, 221, 1283, 1286, 1280, 1289,
-	0, 0, 0, 0, 205, 1187, 1190, 1184,
-	1193, 0, 0, 0, 219, 1271, 1274, 1268,
-	1277, 209, 1211, 1214, 1208, 1217, 0, 0,
-	0, 0, 0, 251, 1463, 1466, 1460, 1469,
-	0, 253, 1475, 1478, 1472, 1481, 0, 0,
-	0, 0, 0, 177, 1019, 1022, 1016, 1025,
-	0, 0, 0, 261, 1523, 1526, 1520, 1529,
+	5, 7, 3, 9, 2701, 631, 47, 676,
+	679, 45, 673, 682, 0, 5, 7, 0,
+	3, 9, 3121, 0, 5, 7, 0, 5,
+	7, 0, 5, 7, 1, 3, 9, 418,
+	439, 3, 9, 418, 439, 3, 9, 418,
+	439, 952, 129, 11, 463, 11, 463, 11,
+	463, 11, 463, 11, 463, 0, 5, 7,
+	3, 9, 631, 47, 676, 679, 45, 673,
+	682, 3037, 0, 5, 7, 832, 3, 9,
+	4817, 105, 841, 3049, 3053, 841, 3049, 3053,
+	841, 3049, 3053, 3041, 3045, 3057, 4822, 4827,
+	3045, 3057, 4822, 4827, 3045, 3057, 4822, 4827,
+	11, 463, 11, 463, 0, 5, 7, 3,
+	9, 631, 47, 676, 679, 45, 673, 682,
+	0, 5, 7, 832, 3, 9, 105, 844,
+	3073, 3077, 844, 3073, 3077, 844, 3073, 3077,
+	3065, 3069, 3081, 4837, 4842, 3069, 3081, 4837,
+	4842, 3069, 3081, 4837, 4842, 11, 463, 11,
+	463, 0, 5, 7, 3, 9, 631, 47,
+	676, 679, 45, 673, 682, 0, 5, 7,
+	604, 3, 9, 43, 613, 616, 43, 613,
+	616, 43, 613, 616, 607, 610, 619, 2689,
+	2693, 610, 619, 2689, 2693, 610, 619, 2689,
+	2693, 11, 463, 11, 463, 11, 463, 955,
+	0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0,
+	0, 167, 961, 964, 0, 0, 0, 958,
+	967, 0, 5, 7, 401, 3, 9, 0,
+	5, 7, 3, 9, 631, 47, 676, 679,
+	45, 673, 682, 0, 5, 7, 631, 3,
+	9, 51, 712, 715, 45, 709, 718, 760,
+	0, 5, 7, 745, 3, 9, 65, 751,
+	754, 63, 748, 757, 0, 5, 7, 745,
+	3, 9, 65, 751, 754, 63, 748, 757,
+	0, 5, 7, 631, 3, 9, 49, 691,
+	694, 45, 688, 697, 0, 5, 7, 604,
+	3, 9, 43, 613, 616, 610, 619, 0,
+	5, 7, 129, 3, 9, 1, 11, 463,
+	11, 463, 11, 463, 11, 463, 11, 463,
+	11, 463, 11, 463, 11, 463, 0, 0,
+	193, 1117, 1120, 1114, 1123, 0, 0, 0,
+	187, 1081, 1084, 1078, 1087, 0, 207, 1201,
+	1204, 1198, 1207, 0, 0, 0, 0, 0,
+	0, 257, 1501, 1504, 1498, 1507, 0, 0,
+	0, 0, 0, 0, 233, 1357, 1360, 1354,
+	1363, 231, 1345, 1348, 1342, 1351, 0, 0,
+	203, 1177, 1180, 1174, 1183, 0, 0, 0,
+	171, 985, 988, 982, 991, 0, 0, 0,
+	237, 1381, 1384, 1378, 1387, 0, 0, 0,
+	0, 0, 0, 221, 1285, 1288, 1282, 1291,
+	0, 0, 0, 0, 205, 1189, 1192, 1186,
+	1195, 0, 0, 0, 219, 1273, 1276, 1270,
+	1279, 209, 1213, 1216, 1210, 1219, 0, 0,
+	0, 0, 0, 251, 1465, 1468, 1462, 1471,
+	0, 253, 1477, 1480, 1474, 1483, 0, 0,
+	0, 0, 0, 177, 1021, 1024, 1018, 1027,
+	0, 0, 0, 261, 1525, 1528, 1522, 1531,
 	0, 0, 0, 0, 0, 0, 0, 213,
-	1235, 1238, 1232, 1241, 0, 0, 0, 191,
-	1103, 1106, 1100, 1109, 201, 1163, 1166, 1160,
-	1169, 0, 0, 0, 0, 0, 245, 1427,
-	1430, 1424, 1433, 0, 247, 1439, 1442, 1436,
-	1445, 0, 195, 1127, 1130, 1124, 1133, 249,
-	1451, 1454, 1448, 1457, 0, 0, 0, 0,
-	0, 179, 1031, 1034, 1028, 1037, 181, 1043,
-	1046, 1040, 1049, 0, 0, 0, 0, 0,
-	0, 199, 1151, 1154, 1148, 1157, 0, 243,
-	1415, 1418, 1412, 1421, 169, 971, 974, 0,
-	968, 977, 0, 217, 1259, 1262, 0, 1256,
-	1265, 223, 1295, 1298, 0, 1292, 1301, 0,
-	0, 0, 0, 225, 1307, 1310, 1304, 1313,
-	0, 0, 0, 0, 0, 0, 0, 0,
-	0, 235, 1367, 1370, 1364, 1373, 0, 0,
-	175, 1007, 1010, 1004, 1013, 0, 0, 0,
-	185, 1067, 1070, 1064, 1073, 0, 0, 0,
-	215, 1247, 1250, 1244, 1253, 189, 1091, 1094,
-	1088, 1097, 0, 0, 0, 0, 0, 0,
-	0, 0, 0, 0, 229, 1331, 1334, 1328,
-	1337, 0, 173, 995, 998, 992, 1001, 0,
-	241, 1403, 1406, 1400, 1409, 0, 197, 1139,
-	1142, 1136, 1145, 0, 0, 0, 211, 1223,
-	1226, 1220, 1229, 0, 0, 259, 1511, 1514,
-	1508, 1517, 0, 0, 0, 0, 0, 227,
-	1319, 1322, 1316, 1325, 0, 183, 1055, 1058,
-	1052, 1061, 0, 0, 2703, 629, 49, 689,
-	692, 45, 686, 695, 0, 0, 255, 1487,
-	1490, 1484, 1493, 0, 0, 0, 0, 0,
-	239, 1391, 1394, 1388, 1397, 602, 620, 1,
-	629, 49, 689, 692, 45, 686, 695, 0,
-	5, 7, 629, 3, 9, 47, 674, 677,
-	45, 671, 680, 0, 5, 7, 399, 3,
+	1237, 1240, 1234, 1243, 0, 0, 0, 191,
+	1105, 1108, 1102, 1111, 201, 1165, 1168, 1162,
+	1171, 0, 0, 0, 0, 0, 245, 1429,
+	1432, 1426, 1435, 0, 247, 1441, 1444, 1438,
+	1447, 0, 195, 1129, 1132, 1126, 1135, 249,
+	1453, 1456, 1450, 1459, 0, 0, 0, 0,
+	0, 179, 1033, 1036, 1030, 1039, 181, 1045,
+	1048, 1042, 1051, 0, 0, 0, 0, 0,
+	0, 199, 1153, 1156, 1150, 1159, 0, 243,
+	1417, 1420, 1414, 1423, 169, 973, 976, 0,
+	970, 979, 0, 217, 1261, 1264, 0, 1258,
+	1267, 223, 1297, 1300, 0, 1294, 1303, 0,
+	0, 0, 0, 225, 1309, 1312, 1306, 1315,
+	0, 0, 0, 0, 0, 0, 0, 0,
+	0, 235, 1369, 1372, 1366, 1375, 0, 0,
+	175, 1009, 1012, 1006, 1015, 0, 0, 0,
+	185, 1069, 1072, 1066, 1075, 0, 0, 0,
+	215, 1249, 1252, 1246, 1255, 189, 1093, 1096,
+	1090, 1099, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 229, 1333, 1336, 1330,
+	1339, 0, 173, 997, 1000, 994, 1003, 0,
+	241, 1405, 1408, 1402, 1411, 0, 197, 1141,
+	1144, 1138, 1147, 0, 0, 0, 211, 1225,
+	1228, 1222, 1231, 0, 0, 259, 1513, 1516,
+	1510, 1519, 0, 0, 0, 0, 0, 227,
+	1321, 1324, 1318, 1327, 0, 183, 1057, 1060,
+	1054, 1063, 0, 0, 2705, 631, 49, 691,
+	694, 45, 688, 697, 0, 0, 255, 1489,
+	1492, 1486, 1495, 0, 0, 0, 0, 0,
+	239, 1393, 1396, 1390, 1399, 604, 622, 1,
+	631, 49, 691, 694, 45, 688, 697, 0,
+	5, 7, 631, 3, 9, 47, 676, 679,
+	45, 673, 682, 0, 5, 7, 401, 3,
 	9, 0, 5, 7, 3, 9, 129, 1,
-	11, 461, 11, 461, 11, 461, 129, 1,
-	629, 47, 674, 677, 45, 671, 680, 0,
-	5, 7, 629, 3, 9, 47, 674, 677,
-	45, 671, 680, 0, 5, 7, 629, 3,
-	9, 49, 689, 692, 45, 686, 695, 0,
-	5, 7, 33, 533, 3, 9, 35, 545,
-	548, 542, 551, 866, 0, 5, 7, 536,
+	11, 463, 11, 463, 11, 463, 129, 1,
+	631, 47, 676, 679, 45, 673, 682, 0,
+	5, 7, 631, 3, 9, 47, 676, 679,
+	45, 673, 682, 0, 5, 7, 631, 3,
+	9, 49, 691, 694, 45, 688, 697, 0,
+	5, 7, 33, 535, 3, 9, 35, 547,
+	550, 544, 553, 868, 0, 5, 7, 538,
 	3, 9, 133, 135, 0, 137, 139, 0,
-	141, 0, 143, 145, 0, 554, 131, 1,
-	0, 0, 11, 461, 117, 115, 11, 461,
-	11, 461, 11, 461, 629, 47, 674, 677,
-	45, 671, 680, 0, 5, 7, 629, 3,
-	9, 47, 674, 677, 45, 671, 680, 0,
-	5, 7, 629, 3, 9, 49, 689, 692,
-	45, 686, 695, 0, 5, 7, 33, 533,
-	3, 9, 539, 117, 115, 11, 461, 11,
-	461, 11, 461, 629, 47, 674, 677, 45,
-	671, 680, 0, 5, 7, 629, 3, 9,
-	47, 674, 677, 45, 671, 680, 0, 5,
-	7, 629, 3, 9, 47, 674, 677, 45,
-	671, 680, 0, 5, 7, 115, 3, 9,
-	117, 0, 5, 7, 3, 9, 1, 416,
-	437, 11, 461, 11, 461, 11, 461, 11,
-	461, 629, 51, 710, 713, 45, 707, 716,
-	0, 5, 7, 629, 3, 9, 698, 45,
-	1, 11, 461, 629, 51, 710, 713, 45,
-	707, 716, 0, 5, 7, 629, 3, 9,
-	47, 674, 677, 45, 671, 680, 0, 5,
-	7, 629, 3, 9, 47, 674, 677, 45,
-	671, 680, 0, 5, 7, 115, 3, 9,
-	117, 0, 5, 7, 3, 9, 1, 416,
-	437, 11, 461, 11, 461, 11, 461, 11,
-	461, 629, 49, 689, 692, 45, 686, 695,
-	0, 5, 7, 830, 3, 9, 3039, 105,
-	11, 461, 629, 49, 689, 692, 45, 686,
-	695, 0, 5, 7, 2216, 3, 9, 117,
-	115, 117, 3111, 381, 115, 117, 115, 117,
-	3347, 3343, 11, 461, 2213, 117, 3339, 379,
-	115, 117, 3331, 2213, 117, 379, 115, 117,
-	3335, 629, 49, 689, 692, 45, 686, 695,
-	0, 5, 7, 629, 3, 9, 49, 689,
-	692, 45, 686, 695, 75, 0, 5, 7,
-	3, 9, 1, 11, 461, 11, 461, 629,
-	47, 674, 677, 45, 671, 680, 530, 0,
-	5, 7, 3, 9, 35, 545, 548, 542,
-	551, 75, 0, 5, 7, 3, 9, 1,
-	11, 461, 11, 461, 629, 49, 689, 692,
-	45, 686, 695, 0, 5, 7, 602, 3,
-	9, 623, 1, 11, 461, 593, 590, 0,
-	2659, 2663, 569, 464, 473, 2655, 2667, 590,
-	405, 2463, 2471, 3375, 3383, 2431, 2479, 3367,
-	3371, 4364, 4374, 2679, 590, 2463, 2471, 3011,
-	3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011,
-	3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011,
-	2431, 2479, 4549, 4564, 4809, 4809, 4809, 4809,
-	4809, 4809, 4809, 4809, 4809, 4809, 4809, 4809,
-	4809, 4809, 4809, 4809, 4809, 2671, 3007, 93,
-	4794, 4799, 3003, 2995, 2999, 4789, 4804, 2463,
-	2471, 2431, 2479, 479, 2531, 2539, 4419, 2547,
-	479, 2459, 2467, 2475, 4369, 5993, 5999, 6113,
-	6113, 6113, 6113, 6113, 6113, 6113, 6113, 6113,
-	6113, 6113, 6113, 6113, 6113, 6113, 6113, 6113,
-	4359
+	141, 0, 143, 145, 0, 556, 131, 1,
+	0, 0, 11, 463, 117, 115, 11, 463,
+	11, 463, 11, 463, 631, 47, 676, 679,
+	45, 673, 682, 0, 5, 7, 631, 3,
+	9, 47, 676, 679, 45, 673, 682, 0,
+	5, 7, 631, 3, 9, 49, 691, 694,
+	45, 688, 697, 0, 5, 7, 33, 535,
+	3, 9, 541, 117, 115, 11, 463, 11,
+	463, 11, 463, 631, 47, 676, 679, 45,
+	673, 682, 0, 5, 7, 631, 3, 9,
+	47, 676, 679, 45, 673, 682, 0, 5,
+	7, 631, 3, 9, 47, 676, 679, 45,
+	673, 682, 0, 5, 7, 115, 3, 9,
+	117, 0, 5, 7, 3, 9, 1, 418,
+	439, 11, 463, 11, 463, 11, 463, 11,
+	463, 631, 51, 712, 715, 45, 709, 718,
+	0, 5, 7, 631, 3, 9, 700, 45,
+	1, 11, 463, 631, 51, 712, 715, 45,
+	709, 718, 0, 5, 7, 631, 3, 9,
+	47, 676, 679, 45, 673, 682, 0, 5,
+	7, 631, 3, 9, 47, 676, 679, 45,
+	673, 682, 0, 5, 7, 115, 3, 9,
+	117, 0, 5, 7, 3, 9, 1, 418,
+	439, 11, 463, 11, 463, 11, 463, 11,
+	463, 631, 49, 691, 694, 45, 688, 697,
+	0, 5, 7, 832, 3, 9, 3041, 105,
+	11, 463, 631, 49, 691, 694, 45, 688,
+	697, 0, 5, 7, 2218, 3, 9, 117,
+	115, 117, 3113, 381, 115, 117, 115, 117,
+	3345, 3341, 11, 463, 2215, 117, 3337, 379,
+	115, 117, 3329, 2215, 117, 379, 115, 117,
+	3333, 631, 49, 691, 694, 45, 688, 697,
+	0, 5, 7, 631, 3, 9, 49, 691,
+	694, 45, 688, 697, 75, 0, 5, 7,
+	3, 9, 1, 11, 463, 11, 463, 631,
+	47, 676, 679, 45, 673, 682, 532, 0,
+	5, 7, 3, 9, 35, 547, 550, 544,
+	553, 75, 0, 5, 7, 3, 9, 1,
+	11, 463, 11, 463, 631, 49, 691, 694,
+	45, 688, 697, 0, 5, 7, 604, 3,
+	9, 625, 1, 11, 463, 595, 592, 0,
+	2661, 2665, 571, 466, 475, 2657, 2669, 592,
+	407, 2465, 2473, 3373, 3381, 2433, 2481, 3365,
+	3369, 4362, 4372, 2681, 592, 2465, 2473, 3013,
+	3013, 3013, 3013, 3013, 3013, 3013, 3013, 3013,
+	3013, 3013, 3013, 3013, 3013, 3013, 3013, 3013,
+	2433, 2481, 4547, 4562, 4807, 4807, 4807, 4807,
+	4807, 4807, 4807, 4807, 4807, 4807, 4807, 4807,
+	4807, 4807, 4807, 4807, 4807, 2673, 3009, 93,
+	4792, 4797, 3005, 2997, 3001, 4787, 4802, 2465,
+	2473, 2433, 2481, 481, 2533, 2541, 4417, 2549,
+	481, 2461, 2469, 2477, 4367, 5996, 6002, 6116,
+	6116, 6116, 6116, 6116, 6116, 6116, 6116, 6116,
+	6116, 6116, 6116, 6116, 6116, 6116, 6116, 6116,
+	4357
 };
 
 static const short _zone_scanner_eof_actions[] = {
-	0, 2707, 2883, 411, 2261, 403, 2246, 15,
-	15, 403, 403, 2246, 2246, 2246, 4569, 6095,
-	2258, 411, 411, 2261, 2246, 2246, 411, 411,
-	411, 411, 411, 2261, 2261, 411, 411, 2261,
-	411, 411, 411, 2261, 411, 411, 411, 2261,
-	411, 411, 411, 411, 2261, 411, 411, 411,
-	2261, 411, 411, 411, 2261, 2261, 411, 411,
-	411, 411, 2261, 411, 2261, 411, 411, 411,
-	411, 2261, 411, 411, 411, 2261, 411, 411,
-	411, 411, 411, 411, 411, 411, 411, 411,
-	2261, 411, 411, 2261, 2261, 411, 411, 2261,
-	411, 2261, 411, 2261, 2261, 411, 411, 411,
-	411, 2261, 2261, 411, 411, 411, 411, 2261,
-	411, 2261, 2261, 411, 2261, 2261, 411, 411,
-	411, 411, 2261, 411, 411, 411, 411, 411,
-	411, 411, 411, 411, 2261, 411, 411, 2261,
-	411, 2261, 411, 411, 411, 2261, 2261, 411,
-	411, 411, 411, 411, 2261, 411, 2261, 411,
-	2261, 411, 2261, 411, 411, 411, 2261, 411,
-	411, 2261, 411, 411, 411, 2261, 411, 2261,
-	411, 411, 647, 2711, 411, 411, 2261, 411,
-	411, 411, 411, 411, 2261, 411, 2707, 411,
-	411, 647, 2883, 2883, 2883, 2883, 411, 15,
+	0, 2709, 2885, 413, 2263, 405, 2248, 15,
+	15, 405, 405, 2248, 2248, 2248, 4567, 6098,
+	2260, 413, 413, 2263, 2248, 2248, 413, 413,
+	413, 413, 413, 2263, 2263, 413, 413, 2263,
+	413, 413, 413, 2263, 413, 413, 413, 2263,
+	413, 413, 413, 413, 2263, 413, 413, 413,
+	2263, 413, 413, 413, 2263, 2263, 413, 413,
+	413, 413, 2263, 413, 2263, 413, 413, 413,
+	413, 2263, 413, 413, 413, 2263, 413, 413,
+	413, 413, 413, 413, 413, 413, 413, 413,
+	2263, 413, 413, 2263, 2263, 413, 413, 2263,
+	413, 2263, 413, 2263, 2263, 413, 413, 413,
+	413, 2263, 2263, 413, 413, 413, 413, 2263,
+	413, 2263, 2263, 413, 2263, 2263, 413, 413,
+	413, 413, 2263, 413, 413, 413, 413, 413,
+	413, 413, 413, 413, 2263, 413, 413, 2263,
+	413, 2263, 413, 413, 413, 2263, 2263, 413,
+	413, 413, 413, 413, 2263, 413, 2263, 413,
+	2263, 413, 2263, 413, 413, 413, 2263, 413,
+	413, 2263, 413, 413, 413, 2263, 413, 2263,
+	413, 413, 649, 2713, 413, 413, 2263, 413,
+	413, 413, 413, 413, 2263, 413, 2709, 413,
+	413, 649, 2885, 2885, 2885, 2885, 413, 15,
 	95, 95, 95, 95, 95, 95, 95, 95,
-	41, 647, 0, 4554, 647, 411, 2883, 2883,
-	2883, 411, 2683, 2711, 3387, 2246, 2707, 15,
-	2246, 15, 4569, 3387, 3387, 3387, 3387, 3387,
-	3387, 3387, 3387, 3387, 3387, 3387, 3387, 3387,
-	3387, 3387, 3387, 2246, 3363, 95, 95, 95,
-	95, 95, 95, 95, 95, 95, 2675, 6239,
-	2707, 2258, 4559, 4569, 4559, 4559, 4559, 4559,
-	4559, 4559, 4559, 4559, 4559, 4559, 4559, 4559,
-	4559, 4559, 4559, 4559, 596, 4569, 2246, 15,
-	2246, 2246, 411, 411, 2261, 411, 411, 411,
-	2261, 411, 2261, 2246, 2246, 15, 2246, 2246,
-	2246, 2246, 403, 4569, 2246, 2246, 599, 599,
-	599, 599, 599, 599, 599, 599, 599, 599,
-	599, 599, 599, 599, 599, 599, 15, 2258,
-	599, 2258, 0, 0, 0, 31, 31, 31,
-	509, 509, 509, 509, 31, 31, 761, 761,
-	2947, 2947, 2947, 2947, 761, 761, 69, 2947,
-	2947, 2947, 2947, 77, 632, 4764, 482, 482,
-	4764, 2875, 4764, 77, 81, 81, 81, 485,
-	485, 485, 512, 512, 512, 512, 485, 81,
-	0, 85, 791, 797, 87, 797, 15, 15,
-	515, 515, 515, 515, 797, 15, 87, 0,
+	41, 649, 0, 4552, 649, 413, 2885, 2885,
+	2885, 413, 2685, 2713, 3385, 2248, 2709, 15,
+	2248, 15, 4567, 3385, 3385, 3385, 3385, 3385,
+	3385, 3385, 3385, 3385, 3385, 3385, 3385, 3385,
+	3385, 3385, 3385, 2248, 3361, 95, 95, 95,
+	95, 95, 95, 95, 95, 95, 2677, 6242,
+	2709, 2260, 4557, 4567, 4557, 4557, 4557, 4557,
+	4557, 4557, 4557, 4557, 4557, 4557, 4557, 4557,
+	4557, 4557, 4557, 4557, 598, 4567, 2248, 15,
+	2248, 2248, 413, 413, 2263, 413, 413, 413,
+	2263, 413, 2263, 2248, 2248, 15, 2248, 2248,
+	2248, 2248, 405, 4567, 2248, 2248, 601, 601,
+	601, 601, 601, 601, 601, 601, 601, 601,
+	601, 601, 601, 601, 601, 601, 15, 2260,
+	601, 2260, 0, 0, 0, 31, 31, 31,
+	511, 511, 511, 511, 31, 31, 763, 763,
+	2949, 2949, 2949, 2949, 763, 763, 69, 2949,
+	2949, 2949, 2949, 77, 634, 4762, 484, 484,
+	4762, 2877, 4762, 77, 81, 81, 81, 487,
+	487, 487, 514, 514, 514, 514, 487, 81,
+	0, 85, 793, 799, 87, 799, 15, 15,
+	517, 517, 517, 517, 799, 15, 87, 0,
 	0, 127, 127, 127, 127, 127, 127, 127,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
 	363, 363, 363, 363, 363, 363, 363, 363,
-	363, 363, 363, 363, 377, 635, 635, 3107,
-	3107, 3107, 3107, 377, 377, 377, 635, 635,
-	3107, 3107, 3107, 3107, 377, 635, 377, 387,
+	363, 363, 363, 363, 377, 637, 637, 3109,
+	3109, 3109, 3109, 377, 377, 377, 637, 637,
+	3109, 3109, 3109, 3109, 377, 637, 377, 387,
 	387, 387, 387, 387, 387, 387, 387, 387,
 	387, 387, 387, 387, 387, 387, 387, 387,
-	387, 387, 387, 387, 387, 387, 641, 641,
+	387, 387, 387, 387, 387, 387, 643, 643,
 	387, 387, 387, 387, 387, 387, 387, 387,
 	387, 387, 387, 387, 387, 387, 387, 387,
 	387, 387, 387, 385, 385, 385, 385, 385,
 	385, 385, 385, 385, 385, 385, 385, 385,
 	385, 385, 385, 385, 385, 385, 385, 385,
 	385, 385, 385, 385, 385, 385, 385, 385,
-	385, 385, 385, 385, 833, 833, 833, 833,
-	833, 833, 385, 385, 385, 385, 385, 833,
-	833, 833, 833, 833, 833, 385, 385, 638,
-	638, 385, 385, 385, 385, 385, 385, 385,
+	385, 385, 385, 385, 835, 835, 835, 835,
+	835, 835, 385, 385, 385, 385, 385, 835,
+	835, 835, 835, 835, 835, 385, 385, 640,
+	640, 385, 385, 385, 385, 385, 385, 385,
 	385, 385, 385, 385, 385, 385, 385, 385,
 	385, 385, 385, 385, 385, 385, 385, 385,
 	385, 385, 385, 385, 385, 385, 385, 385,
-	385, 385, 385, 385, 385, 638, 638, 638,
-	638, 385, 385, 395, 395, 395, 395, 395,
-	395, 395, 395, 395, 395, 395, 395, 395,
-	395, 395, 395, 395, 395, 395, 395, 395,
-	395, 395, 395, 395, 395, 395, 395, 395,
-	395, 395, 395, 395, 395, 395, 395, 395,
-	395, 395, 395, 395, 395, 395, 395, 395,
-	395, 395, 395, 395, 395, 395, 395, 395,
-	395, 395, 395, 395, 395, 395, 395, 395,
-	395, 395, 395, 395, 395, 395, 395, 395,
-	395, 395, 395, 395, 395, 395, 395, 395,
-	395, 395, 395, 395, 395, 395, 395, 395,
-	395, 395, 395, 395, 395, 395, 395, 395,
-	395, 395, 395, 395, 395, 395, 395, 395,
-	395, 395, 395, 397, 397, 397, 397, 397,
+	385, 385, 385, 385, 385, 640, 640, 640,
+	640, 385, 385, 397, 397, 397, 397, 397,
+	397, 397, 397, 397, 397, 397, 397, 397,
+	397, 397, 397, 397, 397, 397, 397, 397,
+	397, 397, 397, 397, 397, 397, 397, 397,
+	397, 397, 397, 397, 397, 397, 397, 397,
 	397, 397, 397, 397, 397, 397, 397, 397,
 	397, 397, 397, 397, 397, 397, 397, 397,
 	397, 397, 397, 397, 397, 397, 397, 397,
 	397, 397, 397, 397, 397, 397, 397, 397,
-	397, 397, 397, 397, 836, 836, 403, 403,
-	403, 403, 403, 403, 644, 644, 644, 2879,
-	644, 2879, 644, 2879, 644, 2879, 2879, 2879,
-	2879, 403, 2879, 2879, 2879, 403, 2879, 2879,
-	2879, 403, 2879, 2879, 2879, 403, 403, 403,
-	403, 403, 403, 403, 403, 403, 403, 403,
-	403, 403, 644, 644, 403, 403, 403, 779,
-	779, 779, 779, 836, 836, 2210, 2210, 2210,
-	2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
-	2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
-	2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
-	2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
-	2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
-	2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210,
-	2210, 2210, 2210, 2210, 644, 644, 644, 644,
-	644, 644, 403, 403, 403, 403, 403, 644,
-	644, 644, 644, 403, 403, 403, 403, 403,
-	403, 403, 403, 403, 403, 403, 403, 403,
-	403, 403, 644, 644, 403, 403, 403, 403,
-	403, 403, 403, 857, 857, 857, 3031, 3031,
-	857, 857, 403, 857, 3031, 3031, 644, 644,
-	403, 403, 644, 644, 860, 860, 860, 860,
-	403, 403, 403, 644, 644, 644, 644, 860,
-	860, 860, 860, 403, 403, 644, 644, 947,
-	947, 2699, 2699, 947, 3123, 950, 950, 950,
-	950, 950, 950, 950, 947, 947, 947, 2699,
-	2699, 3035, 4819, 947, 947, 947, 2699, 2699,
-	3035, 4819, 947, 947, 947, 2699, 2699, 947,
-	3123, 947, 947, 403, 953, 953, 403, 403,
-	644, 644, 644, 644, 758, 758, 758, 758,
-	644, 644, 403, 403, 403, 403, 403, 403,
-	403, 403, 403, 403, 403, 403, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 953, 953,
-	953, 953, 953, 2703, 2703, 953, 953, 953,
-	953, 953, 953, 953, 953, 953, 403, 403,
-	403, 644, 644, 644, 644, 403, 403, 403,
-	403, 403, 403, 403, 403, 403, 644, 644,
-	644, 644, 644, 644, 860, 860, 866, 866,
-	866, 866, 866, 866, 866, 866, 866, 403,
-	866, 866, 866, 866, 866, 403, 860, 860,
-	403, 403, 403, 644, 644, 644, 644, 644,
-	644, 860, 860, 860, 860, 403, 403, 403,
-	644, 644, 644, 644, 644, 644, 860, 860,
-	860, 860, 403, 403, 403, 644, 644, 644,
-	644, 403, 403, 644, 644, 644, 644, 644,
-	644, 860, 860, 860, 860, 403, 403, 403,
-	644, 644, 836, 836, 403, 644, 644, 860,
-	860, 860, 860, 3111, 860, 860, 860, 860,
-	3347, 403, 860, 860, 3339, 860, 860, 3339,
-	860, 860, 3339, 860, 860, 3339, 644, 644,
-	644, 644, 403, 403, 403, 403, 644, 644,
-	403, 403, 403, 403, 403, 403, 644, 644,
-	403, 403, 403, 403, 0, 0, 0, 0,
+	397, 397, 397, 397, 397, 397, 397, 397,
+	397, 397, 397, 397, 397, 397, 397, 397,
+	397, 397, 397, 397, 397, 397, 397, 397,
+	397, 397, 397, 397, 397, 397, 397, 397,
+	397, 397, 397, 399, 399, 399, 399, 399,
+	399, 399, 399, 399, 399, 399, 399, 399,
+	399, 399, 399, 399, 399, 399, 399, 399,
+	399, 399, 399, 399, 399, 399, 399, 399,
+	399, 399, 399, 399, 399, 399, 399, 399,
+	399, 399, 399, 399, 838, 838, 405, 405,
+	405, 405, 405, 405, 646, 646, 646, 2881,
+	646, 2881, 646, 2881, 646, 2881, 2881, 2881,
+	2881, 405, 2881, 2881, 2881, 405, 2881, 2881,
+	2881, 405, 2881, 2881, 2881, 405, 405, 405,
+	405, 405, 405, 405, 405, 405, 405, 405,
+	405, 405, 646, 646, 405, 405, 405, 781,
+	781, 781, 781, 838, 838, 2212, 2212, 2212,
+	2212, 2212, 2212, 2212, 2212, 2212, 2212, 2212,
+	2212, 2212, 2212, 2212, 2212, 2212, 2212, 2212,
+	2212, 2212, 2212, 2212, 2212, 2212, 2212, 2212,
+	2212, 2212, 2212, 2212, 2212, 2212, 2212, 2212,
+	2212, 2212, 2212, 2212, 2212, 2212, 2212, 2212,
+	2212, 2212, 2212, 2212, 2212, 2212, 2212, 2212,
+	2212, 2212, 2212, 2212, 646, 646, 646, 646,
+	646, 646, 405, 405, 405, 405, 405, 646,
+	646, 646, 646, 405, 405, 405, 405, 405,
+	405, 405, 405, 405, 405, 405, 405, 405,
+	405, 405, 646, 646, 405, 405, 405, 405,
+	405, 405, 405, 859, 859, 859, 3033, 3033,
+	859, 859, 405, 859, 3033, 3033, 646, 646,
+	405, 405, 646, 646, 862, 862, 862, 862,
+	405, 405, 405, 646, 646, 646, 646, 862,
+	862, 862, 862, 405, 405, 646, 646, 949,
+	949, 2701, 2701, 949, 3121, 952, 952, 952,
+	952, 952, 952, 952, 949, 949, 949, 2701,
+	2701, 3037, 4817, 949, 949, 949, 2701, 2701,
+	3037, 4817, 949, 949, 949, 2701, 2701, 949,
+	3121, 949, 949, 405, 955, 955, 405, 405,
+	646, 646, 646, 646, 760, 760, 760, 760,
+	646, 646, 405, 405, 405, 405, 405, 405,
+	405, 405, 405, 405, 405, 405, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 955, 955,
+	955, 955, 955, 2705, 2705, 955, 955, 955,
+	955, 955, 955, 955, 955, 955, 405, 405,
+	405, 646, 646, 646, 646, 405, 405, 405,
+	405, 405, 405, 405, 405, 405, 646, 646,
+	646, 646, 646, 646, 862, 862, 868, 868,
+	868, 868, 868, 868, 868, 868, 868, 405,
+	868, 868, 868, 868, 868, 405, 862, 862,
+	405, 405, 405, 646, 646, 646, 646, 646,
+	646, 862, 862, 862, 862, 405, 405, 405,
+	646, 646, 646, 646, 646, 646, 862, 862,
+	862, 862, 405, 405, 405, 646, 646, 646,
+	646, 405, 405, 646, 646, 646, 646, 646,
+	646, 862, 862, 862, 862, 405, 405, 405,
+	646, 646, 838, 838, 405, 646, 646, 862,
+	862, 862, 862, 3113, 862, 862, 862, 862,
+	3345, 405, 862, 862, 3337, 862, 862, 3337,
+	862, 862, 3337, 862, 862, 3337, 646, 646,
+	646, 646, 405, 405, 405, 405, 646, 646,
+	405, 405, 405, 405, 405, 405, 646, 646,
+	405, 405, 405, 405, 0, 0, 0, 0,
 	93, 0, 0, 0, 0, 0, 0, 0,
 	0, 0, 0, 0, 0, 0, 0, 0,
 	0, 0, 0, 0, 0, 0, 0, 0,
 	0, 0, 0, 0, 0, 0, 0, 0,
 	0, 0, 0, 0, 0, 0, 0, 0,
 	0, 0, 0, 0, 0, 0, 0, 0,
 	0, 0, 0, 0, 0, 0, 0, 0,
 	0, 0, 0, 0, 0, 0, 0, 0,
 	0, 0, 0, 0, 0, 0, 0, 0,
 	0, 0, 0, 0, 0, 0, 0, 0,
 	0, 0, 0, 0, 0, 0, 0, 0,
 	0, 0, 0, 0, 0
 };
@@ -6874,2353 +6875,2372 @@ _resume:
 _match:
 	_trans = _zone_scanner_indicies[_trans];
 	cs = _zone_scanner_trans_targs[_trans];
 
 	if ( _zone_scanner_trans_actions[_trans] == 0 )
 		goto _again;
 
 	_acts = _zone_scanner_actions + _zone_scanner_trans_actions[_trans];
 	_nacts = (unsigned int) *_acts++;
 	while ( _nacts-- > 0 )
 	{
 		switch ( *_acts++ )
 		{
 	case 0:
 	{
 		p--; {cs = stack[--top]; goto _again;}
 	}
 	break;
 	case 1:
 	{
 		s->line_counter++;
 	}
 	break;
 	case 2:
 	{
 		if (s->multiline == true) {
 			ERR(ZS_LEFT_PARENTHESIS);
 			p--; {cs = 307;goto _again;}
 		}
 		s->multiline = true;
 	}
 	break;
 	case 3:
 	{
 		if (s->multiline == false) {
 			ERR(ZS_RIGHT_PARENTHESIS);
 			p--; {cs = 307;goto _again;}
 		}
 		s->multiline = false;
 	}
 	break;
 	case 4:
 	{
 		s->buffer_length = 0;
 	}
 	break;
 	case 5:
 	{
 		if (s->buffer_length < sizeof(s->buffer) - 1) {
 			s->buffer[s->buffer_length++] = (*p);
 		}
 	}
 	break;
 	case 6:
 	{
 		s->buffer[s->buffer_length++] = 0;
 
 		// Execute the comment callback.
 		if (s->process.automatic && s->process.comment != NULL) {
 			s->process.comment(s);
 
 			// Stop if required from the callback.
 			if (s->state == ZS_STATE_STOP) {
 				{p++; goto _out; }
 			}
 		}
 	}
 	break;
 	case 7:
 	{
 		s->buffer[0] = 0;
 		s->buffer_length = 0;
 	}
 	break;
 	case 8:
 	{
 		WARN(ZS_BAD_REST);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 9:
 	{
 		s->buffer_length = 0;
 	}
 	break;
 	case 10:
 	{
 		if ((*p) == '\r') {
 			ERR(ZS_DOS_NEWLINE);
 		}
 
 		if (s->buffer_length < sizeof(s->buffer) - 1) {
 			s->buffer[s->buffer_length++] = (*p);
 		}
 	}
 	break;
 	case 11:
 	{
 		// Terminate the error context string.
 		s->buffer[s->buffer_length++] = 0;
 
 		// Error counter incrementation.
 		s->error.counter++;
 
 		// Initialize the fcall stack.
 		top = 0;
 
 		// Reset per-record contexts.
 		s->long_string = false;
 		s->comma_list = false;
 
 		s->state = ZS_STATE_ERROR;
 
 		// Execute the error callback.
 		if (s->process.automatic) {
 			p--;
 			if (s->process.error != NULL) {
 				s->process.error(s);
 
 				// Stop if required from the callback.
 				if (s->state == ZS_STATE_STOP) {
 					{p++; goto _out; }
 				}
 			}
 
 			// Stop the scanner if fatal error.
 			if (s->error.fatal) {
 				{p++; goto _out; }
 			}
 			{cs = 306;goto _again;}
 		} else {
 			// Return if external processing.
 			p--; cs = 306; {p++; goto _out; }
 		}
 	}
 	break;
 	case 12:
 	{ p--; {stack[top++] = cs; cs = 1396;goto _again;} }
 	break;
 	case 13:
 	{
 		s->item_length = 0;
 		s->item_length_position = s->dname_tmp_length++;
 	}
 	break;
 	case 14:
 	{
 		// Check for maximum dname label length.
 		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
 			(s->dname)[s->dname_tmp_length++] = (*p);
 			s->item_length++;
 		} else {
 			WARN(ZS_LABEL_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 15:
 	{
 		// Check for maximum dname length overflow after each label.
 		// (at least the next label length must follow).
 		if (s->dname_tmp_length < ZS_MAX_DNAME_LENGTH) {
 			(s->dname)[s->item_length_position] =
 				(uint8_t)(s->item_length);
 		} else {
 			WARN(ZS_DNAME_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 16:
 	{
 		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
 			(s->dname)[s->dname_tmp_length] = 0;
 			s->item_length++;
 		} else {
 			WARN(ZS_LABEL_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 17:
 	{
 		(s->dname)[s->dname_tmp_length] *= 10;
 		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
 	}
 	break;
 	case 18:
 	{
 		s->dname_tmp_length++;
 	}
 	break;
 	case 19:
 	{
 		WARN(ZS_BAD_NUMBER);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 20:
 	{
 		// Enough room for the terminal label is guaranteed (_label_exit).
 		(s->dname)[s->dname_tmp_length++] = 0;
 	}
 	break;
 	case 21:
 	{
 		// Check for (relative + origin) dname length overflow.
 		if (s->dname_tmp_length + s->zone_origin_length <= ZS_MAX_DNAME_LENGTH) {
 			memcpy(s->dname + s->dname_tmp_length,
 			       s->zone_origin,
 			       s->zone_origin_length);
 
 			s->dname_tmp_length += s->zone_origin_length;
 		} else {
 			WARN(ZS_DNAME_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 22:
 	{
 		// Copy already verified zone origin.
 		memcpy(s->dname,
 		       s->zone_origin,
 		       s->zone_origin_length);
 
 		s->dname_tmp_length = s->zone_origin_length;
 	}
 	break;
 	case 23:
 	{
 		s->item_length_position = 0;
 		s->dname_tmp_length = 0;
 	}
 	break;
 	case 24:
 	{
 		WARN(ZS_BAD_DNAME_CHAR);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 25:
 	{ p--; {stack[top++] = cs; cs = 309;goto _again;} }
 	break;
 	case 26:
 	{
 		if (rdata_tail <= rdata_stop) {
 			s->item_length_location = rdata_tail++;
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 27:
 	{
 		s->item_length = rdata_tail - s->item_length_location - 1;
 		if (s->comma_list && s->item_length == 0) {
 			WARN(ZS_EMPTY_LIST_ITEM);
 			p--; {cs = 307;goto _again;}
 		}
 		if (s->item_length <= MAX_ITEM_LENGTH) {
 			*(s->item_length_location) = (uint8_t)(s->item_length);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 28:
 	{
 		if (rdata_tail < rdata_stop) {
 			s->item_length2_location = rdata_tail;
 			rdata_tail += 2;
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 29:
 	{
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 30:
 	{
 		s->dname = s->r_owner;
 		s->r_owner_length = 0;
 	}
 	break;
 	case 31:
 	{
 		s->r_owner_length = s->dname_tmp_length;
 	}
 	break;
 	case 32:
 	{
 		if (s->r_owner_length == 0) {
 			WARN(ZS_BAD_PREVIOUS_OWNER);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 33:
 	{
 		s->r_owner_length = 0;
 		WARN(ZS_BAD_OWNER);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 34:
 	{
 		s->dname = rdata_tail;
 	}
 	break;
 	case 35:
 	{
 		rdata_tail += s->dname_tmp_length;
 	}
 	break;
 	case 36:
 	{
 		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
 		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
 			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
 			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
 			)
 		   ) {
 			s->number64 *= 10;
 			s->number64 += digit_to_num[(uint8_t)(*p)];
 		} else {
 			WARN(ZS_NUMBER64_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 37:
 	{
 		s->number64 = 0;
 	}
 	break;
 	case 38:
 	{
 		WARN(ZS_BAD_NUMBER);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 39:
 	{
 		s->decimal_counter = 0;
 	}
 	break;
 	case 40:
 	{
 		s->number64_tmp = s->number64;
 	}
 	break;
 	case 41:
 	{
 		s->decimal_counter++;
 	}
 	break;
 	case 42:
 	{
 		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
 			s->number64 *= pow(10, s->decimals);
 		} else if (s->decimal_counter <= s->decimals &&
 				 s->number64_tmp < UINT32_MAX) {
 			s->number64 *= pow(10, s->decimals - s->decimal_counter);
 			s->number64 += s->number64_tmp * pow(10, s->decimals);
 		} else {
 			WARN(ZS_FLOAT_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 43:
 	{
 		s->decimals = 2;
 	}
 	break;
 	case 44:
 	{
 		s->decimals = 3;
 	}
 	break;
 	case 45:
 	{
 		if (s->number64 <= UINT8_MAX) {
 			*rdata_tail = (uint8_t)(s->number64);
 			rdata_tail += 1;
 		} else {
 			WARN(ZS_NUMBER8_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 46:
 	{
 		if (s->number64 <= UINT16_MAX) {
 			uint16_t num16 = htons((uint16_t)s->number64);
 			memcpy(rdata_tail, &num16, 2);
 			rdata_tail += 2;
 		} else {
 			WARN(ZS_NUMBER16_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 47:
 	{
 		if (s->number64 <= UINT32_MAX) {
 			uint32_t num32 = htonl((uint32_t)s->number64);
 			memcpy(rdata_tail, &num32, 4);
 			rdata_tail += 4;
 		} else {
 			WARN(ZS_NUMBER32_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 48:
 	{
 		if (s->number64 <= UINT16_MAX) {
 			s->r_type = (uint16_t)(s->number64);
 		} else {
 			WARN(ZS_NUMBER16_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 49:
 	{
 		if (s->number64 <= UINT16_MAX) {
 			s->r_data_length = (uint16_t)(s->number64);
 		} else {
 			WARN(ZS_NUMBER16_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 50:
 	{
 		WARN(ZS_BAD_TIME_UNIT);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 51:
 	{ if (s->number64 <= (UINT32_MAX / 60)) {
 	                  s->number64 *= 60;
 	              } else {
 	                  WARN(ZS_NUMBER32_OVERFLOW);
 	                  p--; {cs = 307;goto _again;}
 	              }
 	            }
 	break;
 	case 52:
 	{ if (s->number64 <= (UINT32_MAX / 3600)) {
 	                  s->number64 *= 3600;
 	              } else {
 	                  WARN(ZS_NUMBER32_OVERFLOW);
 	                  p--; {cs = 307;goto _again;}
 	              }
 	            }
 	break;
 	case 53:
 	{ if (s->number64 <= (UINT32_MAX / 86400)) {
 	                  s->number64 *= 86400;
 	              } else {
 	                  WARN(ZS_NUMBER32_OVERFLOW);
 	                  p--; {cs = 307;goto _again;}
 	              }
 	            }
 	break;
 	case 54:
 	{ if (s->number64 <= (UINT32_MAX / 604800)) {
 	                  s->number64 *= 604800;
 	              } else {
 	                  WARN(ZS_NUMBER32_OVERFLOW);
 	                  p--; {cs = 307;goto _again;}
 	              }
 	            }
 	break;
 	case 55:
 	{
 		s->number64_tmp = s->number64;
 	}
 	break;
 	case 56:
 	{
 		if (s->number64 + s->number64_tmp < UINT32_MAX) {
 			s->number64 += s->number64_tmp;
 		} else {
 			WARN(ZS_NUMBER32_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 57:
 	{
 		s->buffer_length = 0;
 	}
 	break;
 	case 58:
 	{
 		if (s->buffer_length < sizeof(s->buffer) - 1) {
 			s->buffer[s->buffer_length++] = (*p);
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 59:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
 			uint32_t timestamp;
 			int ret = date_to_timestamp(s->buffer, &timestamp);
 
 			if (ret == ZS_OK) {
 				*((uint32_t *)rdata_tail) = htonl(timestamp);
 				rdata_tail += 4;
 			} else {
 				WARN(ret);
 				p--; {cs = 307;goto _again;}
 			}
 		} else if (s->buffer_length <= 10) { // Timestamp format.
 			char *end;
 
 			s->number64 = strtoull((char *)(s->buffer), &end,  10);
 
 			if (end == (char *)(s->buffer) || *end != '\0') {
 				WARN(ZS_BAD_TIMESTAMP);
 				p--; {cs = 307;goto _again;}
 			}
 
 			if (s->number64 <= UINT32_MAX) {
 				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
 				rdata_tail += 4;
 			} else {
 				WARN(ZS_NUMBER32_OVERFLOW);
 				p--; {cs = 307;goto _again;}
 			}
 		} else {
 			WARN(ZS_BAD_TIMESTAMP_LENGTH);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 60:
 	{
 		WARN(ZS_BAD_TIMESTAMP_CHAR);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 61:
 	{
 		if (rdata_tail <= rdata_stop) {
 			// Split long string.
 			if (s->long_string &&
 			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
 				// _item_length_exit equivalent.
 				*(s->item_length_location) = MAX_ITEM_LENGTH;
 				// _item_length_init equivalent.
 				s->item_length_location = rdata_tail++;
 
 				if (rdata_tail > rdata_stop) {
 					WARN(ZS_TEXT_OVERFLOW);
 					p--; {cs = 307;goto _again;}
 				}
 			}
 
 			*(rdata_tail++) = (*p);
 		} else {
 			WARN(ZS_TEXT_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 62:
 	{
 		WARN(ZS_BAD_TEXT_CHAR);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 63:
 	{
 		WARN(ZS_BAD_TEXT);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 64:
 	{
 		if (rdata_tail <= rdata_stop) {
 			// Split long string.
 			if (s->long_string &&
 			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
 				// _item_length_exit equivalent.
 				*(s->item_length_location) = MAX_ITEM_LENGTH;
 				// _item_length_init equivalent.
 				s->item_length_location = rdata_tail++;
 
 				if (rdata_tail > rdata_stop) {
 					WARN(ZS_TEXT_OVERFLOW);
 					p--; {cs = 307;goto _again;}
 				}
 			}
 
 			*rdata_tail = 0;
 			s->item_length++;
 		} else {
 			WARN(ZS_TEXT_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 65:
 	{
 		if ((*rdata_tail < (UINT8_MAX / 10)) ||   // Dominant fast check.
 			((*rdata_tail == (UINT8_MAX / 10)) && // Marginal case.
 			 ((*p) <= (UINT8_MAX % 10) + '0')
 			)
 		   ) {
 			*rdata_tail *= 10;
 			*rdata_tail += digit_to_num[(uint8_t)(*p)];
 		} else {
 			WARN(ZS_NUMBER8_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 66:
 	{
 		rdata_tail++;
 	}
 	break;
 	case 67:
 	{
 		WARN(ZS_BAD_NUMBER);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 68:
 	{
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					p--; {cs = 307;goto _again;}
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 	break;
 	case 69:
 	{ p--; {stack[top++] = cs; cs = 318;goto _again;} }
 	break;
 	case 70:
 	{
 		s->long_string = true;
 	}
 	break;
 	case 71:
 	{
 		s->long_string = false;
 	}
 	break;
 	case 72:
 	{
 		if (s->number64 <= UINT32_MAX) {
 			s->default_ttl = (uint32_t)(s->number64);
 		} else {
 			ERR(ZS_NUMBER32_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 73:
 	{
 		ERR(ZS_BAD_TTL);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 74:
 	{ p--; {stack[top++] = cs; cs = 331;goto _again;} }
 	break;
 	case 75:
 	{
 		s->dname = s->zone_origin;
 	}
 	break;
 	case 76:
 	{
 		s->zone_origin_length = s->dname_tmp_length;
 	}
 	break;
 	case 77:
 	{
 		ERR(ZS_BAD_ORIGIN);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 78:
 	{ p--; {stack[top++] = cs; cs = 340;goto _again;} }
 	break;
 	case 79:
 	{
 		rdata_tail = s->r_data;
 	}
 	break;
 	case 80:
 	{
 		size_t len = rdata_tail - s->r_data;
 		if (len >= sizeof(s->include_filename)) {
 			ERR(ZS_BAD_INCLUDE_FILENAME);
 			p--; {cs = 307;goto _again;}
 		}
 
 		// Store zero terminated include filename.
 		memcpy(s->include_filename, s->r_data, len);
 		s->include_filename[len] = '\0';
 
 		// For detection whether origin is not present.
 		s->dname = NULL;
 	}
 	break;
 	case 81:
 	{
 		ERR(ZS_BAD_INCLUDE_FILENAME);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 82:
 	{
 		s->dname = s->r_data;
 	}
 	break;
 	case 83:
 	{
 		s->r_data_length = s->dname_tmp_length;
 	}
 	break;
 	case 84:
 	{
 		ERR(ZS_BAD_INCLUDE_ORIGIN);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 85:
 	{
 		// Extend relative file path.
 		if (s->include_filename[0] != '/') {
 			int ret = snprintf((char *)(s->buffer), sizeof(s->buffer),
 			                   "%s/%s", s->path, s->include_filename);
 			if (ret <= 0 || ret >= sizeof(s->buffer)) {
 				ERR(ZS_BAD_INCLUDE_FILENAME);
 				p--; {cs = 307;goto _again;}
 			}
 			memcpy(s->include_filename, s->buffer, ret + 1);
 		}
 
 		// Origin conversion from wire to text form in \DDD notation.
 		if (s->dname == NULL) { // Use current origin.
 			wire_dname_to_str(s->zone_origin,
 			                  s->zone_origin_length,
 			                  (char *)s->buffer);
 		} else { // Use specified origin.
 			wire_dname_to_str(s->r_data,
 			                  s->r_data_length,
 			                  (char *)s->buffer);
 		}
 
 		// Let the caller to solve the include.
 		if (s->process.automatic) {
 			// Create new scanner for included zone file.
 			zs_scanner_t *ss = malloc(sizeof(zs_scanner_t));
 			if (ss == NULL) {
 				ERR(ZS_UNPROCESSED_INCLUDE);
 				p--; {cs = 307;goto _again;}
 			}
 
 			// Parse included zone file.
 			if (zs_init(ss, (char *)s->buffer, s->default_class,
 			            s->default_ttl) != 0 ||
 			    zs_set_input_file(ss, (char *)(s->include_filename)) != 0 ||
 			    zs_set_processing(ss, s->process.record, s->process.error,
 			                      s->process.data) != 0 ||
 			    zs_parse_all(ss) != 0) {
 				// File internal errors are handled by error callback.
 				if (ss->error.counter > 0) {
 					s->error.counter += ss->error.counter;
 					ERR(ZS_UNPROCESSED_INCLUDE);
 				// General include file error.
 				} else {
 					ERR(ss->error.code);
 				}
 				zs_deinit(ss);
 				free(ss);
 				p--; {cs = 307;goto _again;}
 			}
 			zs_deinit(ss);
 			free(ss);
 		} else {
 			s->state = ZS_STATE_INCLUDE;
 			p--; cs = 1396; {p++; goto _out; }
 		}
 	}
 	break;
 	case 86:
 	{ p--; {stack[top++] = cs; cs = 352;goto _again;} }
 	break;
 	case 87:
 	{
 		ERR(ZS_OK);
 	}
 	break;
 	case 88:
 	{
 		NOERR;
 	}
 	break;
 	case 89:
 	{
 		ERR(ZS_BAD_DIRECTIVE);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 90:
 	{
 		s->r_class = s->default_class;
 	}
 	break;
 	case 91:
 	{
 		s->r_ttl = s->default_ttl;
 	}
 	break;
 	case 92:
 	{
 		s->r_class = KNOT_CLASS_IN;
 	}
 	break;
 	case 93:
 	{
 		if (s->number64 <= UINT32_MAX) {
 			s->r_ttl = (uint32_t)(s->number64);
 		} else {
 			WARN(ZS_NUMBER32_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 94:
 	{
 		s->buffer_length = 0;
 	}
 	break;
 	case 95:
 	{
 		if (s->buffer_length < sizeof(s->buffer) - 1) {
 			s->buffer[s->buffer_length++] = (*p);
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 96:
 	{
 		WARN(ZS_BAD_ADDRESS_CHAR);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 97:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 98:
 	{
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {cs = 307;goto _again;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 	break;
 	case 99:
 	{
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 100:
 	{
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {cs = 307;goto _again;}
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 	break;
 	case 101:
 	{
 		memset(&(s->apl), 0, sizeof(s->apl));
 	}
 	break;
 	case 102:
 	{
 		s->apl.excl_flag = 128; // dec 128  = bin 10000000.
 	}
 	break;
 	case 103:
 	{
 		s->apl.addr_family = 1;
 	}
 	break;
 	case 104:
 	{
 		s->apl.addr_family = 2;
 	}
 	break;
 	case 105:
 	{
 		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
 		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
 			s->apl.prefix_length = (uint8_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_APL);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 106:
 	{
 		// Copy address to buffer.
 		uint8_t len;
 		switch (s->apl.addr_family) {
 		case 1:
 			len = ZS_INET4_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		case 2:
 			len = ZS_INET6_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		default:
 			WARN(ZS_BAD_APL);
 			p--; {cs = 307;goto _again;}
 		}
 		// Find prefix without trailing zeroes.
 		while (len > 0) {
 			if ((s->buffer[len - 1] & 255) != 0) {
 				break;
 			}
 			len--;
 		}
 		// Check for rdata overflow.
-		if (rdata_tail + 4 + len > rdata_stop) {
+		if (rdata_tail + 4 + len > rdata_stop + 1) {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 		// Write address family.
 		uint16_t af = htons(s->apl.addr_family);
 		memcpy(rdata_tail, &af, sizeof(af));
 		rdata_tail += 2;
 		// Write prefix length in bits.
 		*(rdata_tail) = s->apl.prefix_length;
 		rdata_tail += 1;
 		// Write negation flag + prefix length in bytes.
 		*(rdata_tail) = len + s->apl.excl_flag;
 		rdata_tail += 1;
 		// Write address prefix non-null data.
 		memcpy(rdata_tail, s->buffer, len);
 		rdata_tail += len;
 	}
 	break;
 	case 107:
 	{
 		WARN(ZS_BAD_APL);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 108:
 	{
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 109:
 	{
 		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
 		rdata_tail++;
 	}
 	break;
 	case 110:
 	{
 		WARN(ZS_BAD_HEX_CHAR);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 111:
 	{
 		if ((rdata_tail - s->r_data) != s->r_data_length) {
 			WARN(ZS_BAD_RDATA_LENGTH);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 112:
 	{
 		WARN(ZS_BAD_HEX_RDATA);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 113:
 	{
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = first_base64_to_num[(uint8_t)(*p)];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 114:
 	{
 		*(rdata_tail++) += second_left_base64_to_num[(uint8_t)(*p)];
 
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = second_right_base64_to_num[(uint8_t)(*p)];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 115:
 	{
 		*(rdata_tail++) += third_left_base64_to_num[(uint8_t)(*p)];
 
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = third_right_base64_to_num[(uint8_t)(*p)];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 116:
 	{
 		*(rdata_tail++) += fourth_base64_to_num[(uint8_t)(*p)];
 	}
 	break;
 	case 117:
 	{
 		WARN(ZS_BAD_BASE64_CHAR);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 118:
 	{ p--; {stack[top++] = cs; cs = 369;goto _again;} }
 	break;
 	case 119:
 	{
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = first_base32hex_to_num[(uint8_t)(*p)];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 120:
 	{
 		*(rdata_tail++) += second_left_base32hex_to_num[(uint8_t)(*p)];
 
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = second_right_base32hex_to_num[(uint8_t)(*p)];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 121:
 	{
 		*rdata_tail += third_base32hex_to_num[(uint8_t)(*p)];
 	}
 	break;
 	case 122:
 	{
 		*(rdata_tail++) += fourth_left_base32hex_to_num[(uint8_t)(*p)];
 
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = fourth_right_base32hex_to_num[(uint8_t)(*p)];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 123:
 	{
 		*(rdata_tail++) += fifth_left_base32hex_to_num[(uint8_t)(*p)];
 
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = fifth_right_base32hex_to_num[(uint8_t)(*p)];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 124:
 	{
 		*rdata_tail += sixth_base32hex_to_num[(uint8_t)(*p)];
 	}
 	break;
 	case 125:
 	{
 		*(rdata_tail++) += seventh_left_base32hex_to_num[(uint8_t)(*p)];
 
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = seventh_right_base32hex_to_num[(uint8_t)(*p)];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 126:
 	{
 		*(rdata_tail++) += eighth_base32hex_to_num[(uint8_t)(*p)];
 	}
 	break;
 	case 127:
 	{
 		WARN(ZS_BAD_BASE32HEX_CHAR);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 128:
 	{
 		*(rdata_tail++) = 0;
 	}
 	break;
 	case 129:
 	{
 		*(rdata_tail++) = 1;
 	}
 	break;
 	case 130:
 	{
 		*(rdata_tail++) = 2;
 	}
 	break;
 	case 131:
 	{
 		*(rdata_tail++) = 3;
 	}
 	break;
 	case 132:
 	{
 		*(rdata_tail++) = 5;
 	}
 	break;
 	case 133:
 	{
 		*(rdata_tail++) = 6;
 	}
 	break;
 	case 134:
 	{
 		*(rdata_tail++) = 7;
 	}
 	break;
 	case 135:
 	{
 		*(rdata_tail++) = 8;
 	}
 	break;
 	case 136:
 	{
 		*(rdata_tail++) = 10;
 	}
 	break;
 	case 137:
 	{
 		*(rdata_tail++) = 12;
 	}
 	break;
 	case 138:
 	{
 		*(rdata_tail++) = 13;
 	}
 	break;
 	case 139:
 	{
 		*(rdata_tail++) = 14;
 	}
 	break;
 	case 140:
 	{
 		*(rdata_tail++) = 15;
 	}
 	break;
 	case 141:
 	{
 		*(rdata_tail++) = 16;
 	}
 	break;
 	case 142:
 	{
 		*(rdata_tail++) = 252;
 	}
 	break;
 	case 143:
 	{
 		*(rdata_tail++) = 253;
 	}
 	break;
 	case 144:
 	{
 		*(rdata_tail++) = 254;
 	}
 	break;
 	case 145:
 	{
 		uint16_t val = htons(0);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	break;
 	case 146:
 	{
 		uint16_t val = htons(1);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	break;
 	case 147:
 	{
 		uint16_t val = htons(2);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	break;
 	case 148:
 	{
 		uint16_t val = htons(3);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	break;
 	case 149:
 	{
 		uint16_t val = htons(4);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	break;
 	case 150:
 	{
 		uint16_t val = htons(5);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	break;
 	case 151:
 	{
 		uint16_t val = htons(6);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	break;
 	case 152:
 	{
 		uint16_t val = htons(7);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	break;
 	case 153:
 	{
 		uint16_t val = htons(8);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	break;
 	case 154:
 	{
 		uint16_t val = htons(253);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	break;
 	case 155:
 	{
 		uint16_t val = htons(254);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	break;
 	case 156:
 	{
 		WARN(ZS_BAD_GATEWAY);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 157:
 	{
 		WARN(ZS_BAD_GATEWAY_KEY);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 158:
 	{
 		WARN(ZS_UNSUPPORTED_TYPE);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 159:
 	{ type_num(KNOT_RRTYPE_A, &rdata_tail); }
 	break;
 	case 160:
 	{ type_num(KNOT_RRTYPE_NS, &rdata_tail); }
 	break;
 	case 161:
 	{ type_num(KNOT_RRTYPE_CNAME, &rdata_tail); }
 	break;
 	case 162:
 	{ type_num(KNOT_RRTYPE_SOA, &rdata_tail); }
 	break;
 	case 163:
 	{ type_num(KNOT_RRTYPE_PTR, &rdata_tail); }
 	break;
 	case 164:
 	{ type_num(KNOT_RRTYPE_HINFO, &rdata_tail); }
 	break;
 	case 165:
 	{ type_num(KNOT_RRTYPE_MINFO, &rdata_tail); }
 	break;
 	case 166:
 	{ type_num(KNOT_RRTYPE_MX, &rdata_tail); }
 	break;
 	case 167:
 	{ type_num(KNOT_RRTYPE_TXT, &rdata_tail); }
 	break;
 	case 168:
 	{ type_num(KNOT_RRTYPE_RP, &rdata_tail); }
 	break;
 	case 169:
 	{ type_num(KNOT_RRTYPE_AFSDB, &rdata_tail); }
 	break;
 	case 170:
 	{ type_num(KNOT_RRTYPE_RT, &rdata_tail); }
 	break;
 	case 171:
 	{ type_num(KNOT_RRTYPE_KEY, &rdata_tail); }
 	break;
 	case 172:
 	{ type_num(KNOT_RRTYPE_AAAA, &rdata_tail); }
 	break;
 	case 173:
 	{ type_num(KNOT_RRTYPE_LOC, &rdata_tail); }
 	break;
 	case 174:
 	{ type_num(KNOT_RRTYPE_SRV, &rdata_tail); }
 	break;
 	case 175:
 	{ type_num(KNOT_RRTYPE_NAPTR, &rdata_tail); }
 	break;
 	case 176:
 	{ type_num(KNOT_RRTYPE_KX, &rdata_tail); }
 	break;
 	case 177:
 	{ type_num(KNOT_RRTYPE_CERT, &rdata_tail); }
 	break;
 	case 178:
 	{ type_num(KNOT_RRTYPE_DNAME, &rdata_tail); }
 	break;
 	case 179:
 	{ type_num(KNOT_RRTYPE_APL, &rdata_tail); }
 	break;
 	case 180:
 	{ type_num(KNOT_RRTYPE_DS, &rdata_tail); }
 	break;
 	case 181:
 	{ type_num(KNOT_RRTYPE_SSHFP, &rdata_tail); }
 	break;
 	case 182:
 	{ type_num(KNOT_RRTYPE_IPSECKEY, &rdata_tail); }
 	break;
 	case 183:
 	{ type_num(KNOT_RRTYPE_RRSIG, &rdata_tail); }
 	break;
 	case 184:
 	{ type_num(KNOT_RRTYPE_NSEC, &rdata_tail); }
 	break;
 	case 185:
 	{ type_num(KNOT_RRTYPE_DNSKEY, &rdata_tail); }
 	break;
 	case 186:
 	{ type_num(KNOT_RRTYPE_DHCID, &rdata_tail); }
 	break;
 	case 187:
 	{ type_num(KNOT_RRTYPE_NSEC3, &rdata_tail); }
 	break;
 	case 188:
 	{ type_num(KNOT_RRTYPE_NSEC3PARAM, &rdata_tail); }
 	break;
 	case 189:
 	{ type_num(KNOT_RRTYPE_TLSA, &rdata_tail); }
 	break;
 	case 190:
 	{ type_num(KNOT_RRTYPE_SMIMEA, &rdata_tail); }
 	break;
 	case 191:
 	{ type_num(KNOT_RRTYPE_CDS, &rdata_tail); }
 	break;
 	case 192:
 	{ type_num(KNOT_RRTYPE_CDNSKEY, &rdata_tail); }
 	break;
 	case 193:
 	{ type_num(KNOT_RRTYPE_OPENPGPKEY, &rdata_tail); }
 	break;
 	case 194:
 	{ type_num(KNOT_RRTYPE_CSYNC, &rdata_tail); }
 	break;
 	case 195:
 	{ type_num(KNOT_RRTYPE_ZONEMD, &rdata_tail); }
 	break;
 	case 196:
 	{ type_num(KNOT_RRTYPE_SPF, &rdata_tail); }
 	break;
 	case 197:
 	{ type_num(KNOT_RRTYPE_NID, &rdata_tail); }
 	break;
 	case 198:
 	{ type_num(KNOT_RRTYPE_L32, &rdata_tail); }
 	break;
 	case 199:
 	{ type_num(KNOT_RRTYPE_L64, &rdata_tail); }
 	break;
 	case 200:
 	{ type_num(KNOT_RRTYPE_LP, &rdata_tail); }
 	break;
 	case 201:
 	{ type_num(KNOT_RRTYPE_EUI48, &rdata_tail); }
 	break;
 	case 202:
 	{ type_num(KNOT_RRTYPE_EUI64, &rdata_tail); }
 	break;
 	case 203:
 	{ type_num(KNOT_RRTYPE_URI, &rdata_tail); }
 	break;
 	case 204:
 	{ type_num(KNOT_RRTYPE_CAA, &rdata_tail); }
 	break;
 	case 205:
 	{ type_num(KNOT_RRTYPE_SVCB, &rdata_tail); }
 	break;
 	case 206:
 	{ type_num(KNOT_RRTYPE_HTTPS, &rdata_tail); }
 	break;
 	case 207:
 	{
 		if (s->number64 <= UINT16_MAX) {
 			window_add_bit(s->number64, s);
 		} else {
 			WARN(ZS_NUMBER16_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 208:
 	{ window_add_bit(KNOT_RRTYPE_A, s); }
 	break;
 	case 209:
 	{ window_add_bit(KNOT_RRTYPE_NS, s); }
 	break;
 	case 210:
 	{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
 	break;
 	case 211:
 	{ window_add_bit(KNOT_RRTYPE_SOA, s); }
 	break;
 	case 212:
 	{ window_add_bit(KNOT_RRTYPE_PTR, s); }
 	break;
 	case 213:
 	{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
 	break;
 	case 214:
 	{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
 	break;
 	case 215:
 	{ window_add_bit(KNOT_RRTYPE_MX, s); }
 	break;
 	case 216:
 	{ window_add_bit(KNOT_RRTYPE_TXT, s); }
 	break;
 	case 217:
 	{ window_add_bit(KNOT_RRTYPE_RP, s); }
 	break;
 	case 218:
 	{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
 	break;
 	case 219:
 	{ window_add_bit(KNOT_RRTYPE_RT, s); }
 	break;
 	case 220:
 	{ window_add_bit(KNOT_RRTYPE_KEY, s); }
 	break;
 	case 221:
 	{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
 	break;
 	case 222:
 	{ window_add_bit(KNOT_RRTYPE_LOC, s); }
 	break;
 	case 223:
 	{ window_add_bit(KNOT_RRTYPE_SRV, s); }
 	break;
 	case 224:
 	{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
 	break;
 	case 225:
 	{ window_add_bit(KNOT_RRTYPE_KX, s); }
 	break;
 	case 226:
 	{ window_add_bit(KNOT_RRTYPE_CERT, s); }
 	break;
 	case 227:
 	{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
 	break;
 	case 228:
 	{ window_add_bit(KNOT_RRTYPE_APL, s); }
 	break;
 	case 229:
 	{ window_add_bit(KNOT_RRTYPE_DS, s); }
 	break;
 	case 230:
 	{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
 	break;
 	case 231:
 	{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
 	break;
 	case 232:
 	{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
 	break;
 	case 233:
 	{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
 	break;
 	case 234:
 	{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
 	break;
 	case 235:
 	{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
 	break;
 	case 236:
 	{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
 	break;
 	case 237:
 	{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
 	break;
 	case 238:
 	{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
 	break;
 	case 239:
 	{ window_add_bit(KNOT_RRTYPE_SMIMEA, s); }
 	break;
 	case 240:
 	{ window_add_bit(KNOT_RRTYPE_CDS, s); }
 	break;
 	case 241:
 	{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
 	break;
 	case 242:
 	{ window_add_bit(KNOT_RRTYPE_OPENPGPKEY, s); }
 	break;
 	case 243:
 	{ window_add_bit(KNOT_RRTYPE_CSYNC, s); }
 	break;
 	case 244:
 	{ window_add_bit(KNOT_RRTYPE_ZONEMD, s); }
 	break;
 	case 245:
 	{ window_add_bit(KNOT_RRTYPE_SPF, s); }
 	break;
 	case 246:
 	{ window_add_bit(KNOT_RRTYPE_NID, s); }
 	break;
 	case 247:
 	{ window_add_bit(KNOT_RRTYPE_L32, s); }
 	break;
 	case 248:
 	{ window_add_bit(KNOT_RRTYPE_L64, s); }
 	break;
 	case 249:
 	{ window_add_bit(KNOT_RRTYPE_LP, s); }
 	break;
 	case 250:
 	{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
 	break;
 	case 251:
 	{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
 	break;
 	case 252:
 	{ window_add_bit(KNOT_RRTYPE_URI, s); }
 	break;
 	case 253:
 	{ window_add_bit(KNOT_RRTYPE_CAA, s); }
 	break;
 	case 254:
 	{ window_add_bit(KNOT_RRTYPE_SVCB, s); }
 	break;
 	case 255:
 	{ window_add_bit(KNOT_RRTYPE_HTTPS, s); }
 	break;
 	case 256:
 	{
 		memset(s->windows, 0, sizeof(s->windows));
 		s->last_window = -1;
 	}
 	break;
 	case 257:
 	{
 		for (uint16_t window = 0; window <= s->last_window; window++) {
 			if ((s->windows[window]).length > 0) {
 				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
 				{
 					// Window number.
 					*rdata_tail = (uint8_t)window;
 					rdata_tail += 1;
 					// Bitmap length.
 					*rdata_tail = (s->windows[window]).length;
 					rdata_tail += 1;
 					// Copying bitmap.
 					memcpy(rdata_tail,
 					       (s->windows[window]).bitmap,
 					       (s->windows[window]).length);
 					rdata_tail += (s->windows[window]).length;
 				} else {
 					WARN(ZS_RDATA_OVERFLOW);
 					p--; {cs = 307;goto _again;}
 				}
 			}
 		}
 	}
 	break;
 	case 258:
 	{
 		WARN(ZS_BAD_BITMAP);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 259:
 	{ p--; {stack[top++] = cs; cs = 376;goto _again;} }
 	break;
 	case 260:
 	{
 		if (s->number64 <= 90) {
 			s->loc.d1 = (uint32_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 261:
 	{
 		if (s->number64 <= 180) {
 			s->loc.d2 = (uint32_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 262:
 	{
 		if (s->number64 <= 59) {
 			s->loc.m1 = (uint32_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 263:
 	{
 		if (s->number64 <= 59) {
 			s->loc.m2 = (uint32_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 264:
 	{
 		if (s->number64 <= 59999) {
 			s->loc.s1 = (uint32_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 265:
 	{
 		if (s->number64 <= 59999) {
 			s->loc.s2 = (uint32_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 266:
 	{
 		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
 		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
 		{
 			s->loc.alt = (uint32_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 267:
 	{
 		if (s->number64 <= 9000000000ULL) {
 			s->loc.siz = s->number64;
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 268:
 	{
 		if (s->number64 <= 9000000000ULL) {
 			s->loc.hp = s->number64;
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 269:
 	{
 		if (s->number64 <= 9000000000ULL) {
 			s->loc.vp = s->number64;
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 270:
 	{
 		s->loc.lat_sign = -1;
 	}
 	break;
 	case 271:
 	{
 		s->loc.long_sign = -1;
 	}
 	break;
 	case 272:
 	{
 		s->loc.alt_sign = -1;
 	}
 	break;
 	case 273:
 	{
 		memset(&(s->loc), 0, sizeof(s->loc));
 		// Defaults.
 		s->loc.siz = 100;
 		s->loc.vp  = 1000;
 		s->loc.hp  = 1000000;
 		s->loc.lat_sign  = 1;
 		s->loc.long_sign = 1;
 		s->loc.alt_sign  = 1;
 	}
 	break;
 	case 274:
 	{
 		// Write version.
 		*(rdata_tail) = 0;
 		rdata_tail += 1;
 		// Write size.
 		*(rdata_tail) = loc64to8(s->loc.siz);
 		rdata_tail += 1;
 		// Write horizontal precision.
 		*(rdata_tail) = loc64to8(s->loc.hp);
 		rdata_tail += 1;
 		// Write vertical precision.
 		*(rdata_tail) = loc64to8(s->loc.vp);
 		rdata_tail += 1;
 		// Write latitude.
 		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
 			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
 		rdata_tail += 4;
 		// Write longitude.
 		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
 			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
 		rdata_tail += 4;
 		// Write altitude.
 		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
 			(s->loc.alt));
 		rdata_tail += 4;
 	}
 	break;
 	case 275:
 	{
 		WARN(ZS_BAD_LOC_DATA);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 276:
 	{
 		WARN(ZS_BAD_HEX_RDATA);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 277:
 	{
 		s->item_length = 0;
 	}
 	break;
 	case 278:
 	{
 		s->item_length++;
 	}
 	break;
 	case 279:
 	{
 		if (s->item_length != 6) {
 			WARN(ZS_BAD_EUI_LENGTH);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 280:
 	{
 		if (s->item_length != 8) {
 			WARN(ZS_BAD_EUI_LENGTH);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 281:
 	{
 		WARN(ZS_BAD_CHAR_DASH);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 282:
 	{
 		s->item_length = 0;
 	}
 	break;
 	case 283:
 	{
 		s->item_length++;
 	}
 	break;
 	case 284:
 	{
 		if (s->item_length != 4) {
 			WARN(ZS_BAD_L64_LENGTH);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 285:
 	{
 		WARN(ZS_BAD_CHAR_COLON);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 286:
 	{
 		s->svcb.params_position = rdata_tail;
 		s->svcb.last_key = -1;
 	}
 	break;
 	case 287:
 	{
 		int ret = svcb_check(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 288:
 	{
 		WARN(ZS_BAD_SVCB_PARAM);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 289:
 	{
 		WARN(ZS_BAD_SVCB_MANDATORY);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
 	case 290:
 	{
+		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {cs = 307;goto _again;}
+		}
 		s->svcb.param_position = rdata_tail;
 	}
 	break;
 	case 291:
 	{
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			p--; {cs = 307;goto _again;}
 		}
 	}
 	break;
 	case 292:
 	{
 		s->comma_list = true;
 	}
 	break;
 	case 293:
 	{
 		s->comma_list = false;
 	}
 	break;
 	case 294:
 	{
 		s->svcb.mandatory_position = rdata_tail + 2; // Skip 2-B prefix.
 	}
 	break;
 	case 295:
 	{
 		svcb_mandatory_sort(s->svcb.mandatory_position, rdata_tail);
 	}
 	break;
 	case 296:
-	{ p--; {stack[top++] = cs; cs = 559;goto _again;} }
+	{
+		if (rdata_tail + 2 > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			p--; {cs = 307;goto _again;}
+		}
+	}
 	break;
 	case 297:
-	{ p--; {stack[top++] = cs; cs = 603;goto _again;} }
+	{ p--; {stack[top++] = cs; cs = 559;goto _again;} }
 	break;
 	case 298:
+	{ p--; {stack[top++] = cs; cs = 603;goto _again;} }
+	break;
+	case 299:
 	{
 		WARN(ZS_BAD_ALGORITHM);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
-	case 299:
+	case 300:
 	{
 		WARN(ZS_BAD_CERT_TYPE);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
-	case 300:
+	case 301:
 	{ p--; {stack[top++] = cs; cs = 699;goto _again;} }
 	break;
-	case 301:
+	case 302:
 	{ p--; {stack[top++] = cs; cs = 803;goto _again;} }
 	break;
-	case 302:
+	case 303:
 	{
 		rdata_tail = s->r_data;
 	}
 	break;
-	case 303:
+	case 304:
 	{
 		WARN(ZS_BAD_RDATA);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
-	case 304:
+	case 305:
 	{
 		p--;
 		switch (s->r_type) {
 		case KNOT_RRTYPE_A:
 			{stack[top++] = cs; cs = 844;goto _again;}
 		case KNOT_RRTYPE_NS:
 		case KNOT_RRTYPE_CNAME:
 		case KNOT_RRTYPE_PTR:
 		case KNOT_RRTYPE_DNAME:
 			{stack[top++] = cs; cs = 846;goto _again;}
 		case KNOT_RRTYPE_SOA:
 			{stack[top++] = cs; cs = 848;goto _again;}
 		case KNOT_RRTYPE_HINFO:
 			{stack[top++] = cs; cs = 880;goto _again;}
 		case KNOT_RRTYPE_MINFO:
 		case KNOT_RRTYPE_RP:
 			{stack[top++] = cs; cs = 885;goto _again;}
 		case KNOT_RRTYPE_MX:
 		case KNOT_RRTYPE_AFSDB:
 		case KNOT_RRTYPE_RT:
 		case KNOT_RRTYPE_KX:
 		case KNOT_RRTYPE_LP:
 			{stack[top++] = cs; cs = 890;goto _again;}
 		case KNOT_RRTYPE_TXT:
 		case KNOT_RRTYPE_SPF:
 			{stack[top++] = cs; cs = 895;goto _again;}
 		case KNOT_RRTYPE_AAAA:
 			{stack[top++] = cs; cs = 899;goto _again;}
 		case KNOT_RRTYPE_LOC:
 			{stack[top++] = cs; cs = 901;goto _again;}
 		case KNOT_RRTYPE_SRV:
 			{stack[top++] = cs; cs = 956;goto _again;}
 		case KNOT_RRTYPE_NAPTR:
 			{stack[top++] = cs; cs = 967;goto _again;}
 		case KNOT_RRTYPE_CERT:
 			{stack[top++] = cs; cs = 984;goto _again;}
 		case KNOT_RRTYPE_APL:
 			{stack[top++] = cs; cs = 995;goto _again;}
 		case KNOT_RRTYPE_DS:
 		case KNOT_RRTYPE_CDS:
 			{stack[top++] = cs; cs = 1006;goto _again;}
 		case KNOT_RRTYPE_SSHFP:
 			{stack[top++] = cs; cs = 1019;goto _again;}
 		case KNOT_RRTYPE_IPSECKEY:
 			{stack[top++] = cs; cs = 1029;goto _again;}
 		case KNOT_RRTYPE_RRSIG:
 			{stack[top++] = cs; cs = 1068;goto _again;}
 		case KNOT_RRTYPE_NSEC:
 			{stack[top++] = cs; cs = 1254;goto _again;}
 		case KNOT_RRTYPE_KEY:
 		case KNOT_RRTYPE_DNSKEY:
 		case KNOT_RRTYPE_CDNSKEY:
 			{stack[top++] = cs; cs = 1257;goto _again;}
 		case KNOT_RRTYPE_DHCID:
 		case KNOT_RRTYPE_OPENPGPKEY:
 			{stack[top++] = cs; cs = 1268;goto _again;}
 		case KNOT_RRTYPE_NSEC3:
 			{stack[top++] = cs; cs = 1270;goto _again;}
 		case KNOT_RRTYPE_NSEC3PARAM:
 			{stack[top++] = cs; cs = 1299;goto _again;}
 		case KNOT_RRTYPE_TLSA:
 		case KNOT_RRTYPE_SMIMEA:
 			{stack[top++] = cs; cs = 1312;goto _again;}
 		case KNOT_RRTYPE_CSYNC:
 			{stack[top++] = cs; cs = 1325;goto _again;}
 		case KNOT_RRTYPE_ZONEMD:
 			{stack[top++] = cs; cs = 1331;goto _again;}
 		case KNOT_RRTYPE_NID:
 		case KNOT_RRTYPE_L64:
 			{stack[top++] = cs; cs = 1349;goto _again;}
 		case KNOT_RRTYPE_L32:
 			{stack[top++] = cs; cs = 1344;goto _again;}
 		case KNOT_RRTYPE_EUI48:
 			{stack[top++] = cs; cs = 1362;goto _again;}
 		case KNOT_RRTYPE_EUI64:
 			{stack[top++] = cs; cs = 1368;goto _again;}
 		case KNOT_RRTYPE_URI:
 			{stack[top++] = cs; cs = 1374;goto _again;}
 		case KNOT_RRTYPE_CAA:
 			{stack[top++] = cs; cs = 1382;goto _again;}
 		case KNOT_RRTYPE_SVCB:
 		case KNOT_RRTYPE_HTTPS:
 			{stack[top++] = cs; cs = 1390;goto _again;}
 		default:
 			WARN(ZS_CANNOT_TEXT_DATA);
 			{cs = 307;goto _again;}
 		}
 	}
 	break;
-	case 305:
+	case 306:
 	{
 		switch (s->r_type) {
 		// Next types must not have empty rdata.
 		case KNOT_RRTYPE_A:
 		case KNOT_RRTYPE_NS:
 		case KNOT_RRTYPE_CNAME:
 		case KNOT_RRTYPE_PTR:
 		case KNOT_RRTYPE_DNAME:
 		case KNOT_RRTYPE_SOA:
 		case KNOT_RRTYPE_HINFO:
 		case KNOT_RRTYPE_MINFO:
 		case KNOT_RRTYPE_MX:
 		case KNOT_RRTYPE_AFSDB:
 		case KNOT_RRTYPE_RT:
 		case KNOT_RRTYPE_KX:
 		case KNOT_RRTYPE_TXT:
 		case KNOT_RRTYPE_SPF:
 		case KNOT_RRTYPE_RP:
 		case KNOT_RRTYPE_AAAA:
 		case KNOT_RRTYPE_LOC:
 		case KNOT_RRTYPE_SRV:
 		case KNOT_RRTYPE_NAPTR:
 		case KNOT_RRTYPE_CERT:
 		case KNOT_RRTYPE_DS:
 		case KNOT_RRTYPE_SSHFP:
 		case KNOT_RRTYPE_IPSECKEY:
 		case KNOT_RRTYPE_RRSIG:
 		case KNOT_RRTYPE_NSEC:
 		case KNOT_RRTYPE_KEY:
 		case KNOT_RRTYPE_DNSKEY:
 		case KNOT_RRTYPE_DHCID:
 		case KNOT_RRTYPE_NSEC3:
 		case KNOT_RRTYPE_NSEC3PARAM:
 		case KNOT_RRTYPE_TLSA:
 		case KNOT_RRTYPE_SMIMEA:
 		case KNOT_RRTYPE_CDS:
 		case KNOT_RRTYPE_CDNSKEY:
 		case KNOT_RRTYPE_OPENPGPKEY:
 		case KNOT_RRTYPE_CSYNC:
 		case KNOT_RRTYPE_ZONEMD:
 		case KNOT_RRTYPE_NID:
 		case KNOT_RRTYPE_L32:
 		case KNOT_RRTYPE_L64:
 		case KNOT_RRTYPE_LP:
 		case KNOT_RRTYPE_EUI48:
 		case KNOT_RRTYPE_EUI64:
 		case KNOT_RRTYPE_URI:
 		case KNOT_RRTYPE_CAA:
 		case KNOT_RRTYPE_SVCB:
 		case KNOT_RRTYPE_HTTPS:
 			{stack[top++] = cs; cs = 540;goto _again;}
 		// Next types can have empty rdata.
 		case KNOT_RRTYPE_APL:
 		default:
 			{stack[top++] = cs; cs = 549;goto _again;}
 		}
 	}
 	break;
-	case 306:
+	case 307:
 	{
 		if (pe - p == 1) {
 			*wrap = WRAP_DETECTED;
 		}
 	}
 	break;
-	case 307:
+	case 308:
 	{
 		if (*wrap == WRAP_NONE) {
 			p--;
 		}
 	}
 	break;
-	case 308:
+	case 309:
 	{
 		WARN(ZS_UNSUPPORTED_TYPE);
 		p--; {cs = 307;goto _again;}
 	}
 	break;
-	case 309:
+	case 310:
 	{ s->r_type = KNOT_RRTYPE_A; }
 	break;
-	case 310:
+	case 311:
 	{ s->r_type = KNOT_RRTYPE_NS; }
 	break;
-	case 311:
+	case 312:
 	{ s->r_type = KNOT_RRTYPE_CNAME; }
 	break;
-	case 312:
+	case 313:
 	{ s->r_type = KNOT_RRTYPE_SOA; }
 	break;
-	case 313:
+	case 314:
 	{ s->r_type = KNOT_RRTYPE_PTR; }
 	break;
-	case 314:
+	case 315:
 	{ s->r_type = KNOT_RRTYPE_HINFO; }
 	break;
-	case 315:
+	case 316:
 	{ s->r_type = KNOT_RRTYPE_MINFO; }
 	break;
-	case 316:
+	case 317:
 	{ s->r_type = KNOT_RRTYPE_MX; }
 	break;
-	case 317:
+	case 318:
 	{ s->r_type = KNOT_RRTYPE_TXT; }
 	break;
-	case 318:
+	case 319:
 	{ s->r_type = KNOT_RRTYPE_RP; }
 	break;
-	case 319:
+	case 320:
 	{ s->r_type = KNOT_RRTYPE_AFSDB; }
 	break;
-	case 320:
+	case 321:
 	{ s->r_type = KNOT_RRTYPE_RT; }
 	break;
-	case 321:
+	case 322:
 	{ s->r_type = KNOT_RRTYPE_KEY; }
 	break;
-	case 322:
+	case 323:
 	{ s->r_type = KNOT_RRTYPE_AAAA; }
 	break;
-	case 323:
+	case 324:
 	{ s->r_type = KNOT_RRTYPE_LOC; }
 	break;
-	case 324:
+	case 325:
 	{ s->r_type = KNOT_RRTYPE_SRV; }
 	break;
-	case 325:
+	case 326:
 	{ s->r_type = KNOT_RRTYPE_NAPTR; }
 	break;
-	case 326:
+	case 327:
 	{ s->r_type = KNOT_RRTYPE_KX; }
 	break;
-	case 327:
+	case 328:
 	{ s->r_type = KNOT_RRTYPE_CERT; }
 	break;
-	case 328:
+	case 329:
 	{ s->r_type = KNOT_RRTYPE_DNAME; }
 	break;
-	case 329:
+	case 330:
 	{ s->r_type = KNOT_RRTYPE_APL; }
 	break;
-	case 330:
+	case 331:
 	{ s->r_type = KNOT_RRTYPE_DS; }
 	break;
-	case 331:
+	case 332:
 	{ s->r_type = KNOT_RRTYPE_SSHFP; }
 	break;
-	case 332:
+	case 333:
 	{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
 	break;
-	case 333:
+	case 334:
 	{ s->r_type = KNOT_RRTYPE_RRSIG; }
 	break;
-	case 334:
+	case 335:
 	{ s->r_type = KNOT_RRTYPE_NSEC; }
 	break;
-	case 335:
+	case 336:
 	{ s->r_type = KNOT_RRTYPE_DNSKEY; }
 	break;
-	case 336:
+	case 337:
 	{ s->r_type = KNOT_RRTYPE_DHCID; }
 	break;
-	case 337:
+	case 338:
 	{ s->r_type = KNOT_RRTYPE_NSEC3; }
 	break;
-	case 338:
+	case 339:
 	{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
 	break;
-	case 339:
+	case 340:
 	{ s->r_type = KNOT_RRTYPE_TLSA; }
 	break;
-	case 340:
+	case 341:
 	{ s->r_type = KNOT_RRTYPE_SMIMEA; }
 	break;
-	case 341:
+	case 342:
 	{ s->r_type = KNOT_RRTYPE_CDS; }
 	break;
-	case 342:
+	case 343:
 	{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
 	break;
-	case 343:
+	case 344:
 	{ s->r_type = KNOT_RRTYPE_OPENPGPKEY; }
 	break;
-	case 344:
+	case 345:
 	{ s->r_type = KNOT_RRTYPE_CSYNC; }
 	break;
-	case 345:
+	case 346:
 	{ s->r_type = KNOT_RRTYPE_ZONEMD; }
 	break;
-	case 346:
+	case 347:
 	{ s->r_type = KNOT_RRTYPE_SPF; }
 	break;
-	case 347:
+	case 348:
 	{ s->r_type = KNOT_RRTYPE_NID; }
 	break;
-	case 348:
+	case 349:
 	{ s->r_type = KNOT_RRTYPE_L32; }
 	break;
-	case 349:
+	case 350:
 	{ s->r_type = KNOT_RRTYPE_L64; }
 	break;
-	case 350:
+	case 351:
 	{ s->r_type = KNOT_RRTYPE_LP; }
 	break;
-	case 351:
+	case 352:
 	{ s->r_type = KNOT_RRTYPE_EUI48; }
 	break;
-	case 352:
+	case 353:
 	{ s->r_type = KNOT_RRTYPE_EUI64; }
 	break;
-	case 353:
+	case 354:
 	{ s->r_type = KNOT_RRTYPE_URI; }
 	break;
-	case 354:
+	case 355:
 	{ s->r_type = KNOT_RRTYPE_CAA; }
 	break;
-	case 355:
+	case 356:
 	{ s->r_type = KNOT_RRTYPE_SVCB; }
 	break;
-	case 356:
+	case 357:
 	{ s->r_type = KNOT_RRTYPE_HTTPS; }
 	break;
-	case 357:
+	case 358:
 	{
 		if (rdata_tail - s->r_data > UINT16_MAX) {
 			WARN(ZS_RDATA_OVERFLOW);
 			p--; {cs = 307;goto _again;}
 		}
 		s->r_data_length = rdata_tail - s->r_data;
 
 		s->state = ZS_STATE_DATA;
 
 		// Execute the record callback.
 		if (s->process.automatic) {
 			if (s->process.record != NULL) {
 				s->process.record(s);
 
 				// Stop if required from the callback.
 				if (s->state == ZS_STATE_STOP) {
 					{p++; goto _out; }
 				}
 			}
 		} else {
 			// Return if external processing.
 			p--; {p++; goto _out; }
 		}
 	}
 	break;
 		}
 	}
@@ -9489,39 +9509,39 @@ goto _again;}
 	}
 	break;
 	case 289:
 	{
 		WARN(ZS_BAD_SVCB_MANDATORY);
 		p--; {cs = 307;	if ( p == pe )
 		goto _test_eof;
 goto _again;}
 	}
 	break;
-	case 298:
+	case 299:
 	{
 		WARN(ZS_BAD_ALGORITHM);
 		p--; {cs = 307;	if ( p == pe )
 		goto _test_eof;
 goto _again;}
 	}
 	break;
-	case 299:
+	case 300:
 	{
 		WARN(ZS_BAD_CERT_TYPE);
 		p--; {cs = 307;	if ( p == pe )
 		goto _test_eof;
 goto _again;}
 	}
 	break;
-	case 303:
+	case 304:
 	{
 		WARN(ZS_BAD_RDATA);
 		p--; {cs = 307;	if ( p == pe )
 		goto _test_eof;
 goto _again;}
 	}
 	break;
-	case 308:
+	case 309:
 	{
 		WARN(ZS_UNSUPPORTED_TYPE);
 		p--; {cs = 307;	if ( p == pe )
 		goto _test_eof;
diff --git a/src/libzscanner/scanner_body.rl b/src/libzscanner/scanner_body.rl
index 8d743ffa9..0dbcf3af5 100644
--- a/src/libzscanner/scanner_body.rl
+++ b/src/libzscanner/scanner_body.rl
@@ -1,2308 +1,2326 @@
 /*  Copyright (C) 2021 CZ.NIC, z.s.p.o. <knot-dns@labs.nic.cz>
 
     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.
 
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
 
     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <https://www.gnu.org/licenses/>.
  */
 
 %%{
 	machine zone_scanner;
 
 	# Comeback function to calling state machine.
 	action _ret {
 		fhold; fret;
 	}
 
 	# BEGIN - Blank space processing
 	action _newline {
 		s->line_counter++;
 	}
 
 	action _check_multiline_begin {
 		if (s->multiline == true) {
 			ERR(ZS_LEFT_PARENTHESIS);
 			fhold; fgoto err_line;
 		}
 		s->multiline = true;
 	}
 	action _check_multiline_end {
 		if (s->multiline == false) {
 			ERR(ZS_RIGHT_PARENTHESIS);
 			fhold; fgoto err_line;
 		}
 		s->multiline = false;
 	}
 
 	action _comment_init {
 		s->buffer_length = 0;
 	}
 	action _comment {
 		if (s->buffer_length < sizeof(s->buffer) - 1) {
 			s->buffer[s->buffer_length++] = fc;
 		}
 	}
 	action _comment_exit {
 		s->buffer[s->buffer_length++] = 0;
 
 		// Execute the comment callback.
 		if (s->process.automatic && s->process.comment != NULL) {
 			s->process.comment(s);
 
 			// Stop if required from the callback.
 			if (s->state == ZS_STATE_STOP) {
 				fbreak;
 			}
 		}
 	}
 
 	action _rest_init {
 		s->buffer[0] = 0;
 		s->buffer_length = 0;
 	}
 	action _rest_error {
 		WARN(ZS_BAD_REST);
 		fhold; fgoto err_line;
 	}
 
 	newline = '\n' $_newline;
 	comment = (';' . (^newline)* $_comment) >_comment_init %_comment_exit;
 
 	# White space separation. With respect to parentheses and included comments.
 	sep = ( [ \t]                                       # Blank characters.
 	      | (comment? . newline) when { s->multiline }  # Comment in multiline.
 	      | '(' $_check_multiline_begin                 # Start of multiline.
 	      | ')' $_check_multiline_end                   # End of multiline.
 	      )+;                                           # Apply more times.
 
 	rest = (sep? :> comment?) >_rest_init $!_rest_error; # Comments.
 
 	# Artificial machines which are used for next state transition only!
 	all_wchar = [ \t\n;()];
 	end_wchar = [\n;] when { !s->multiline }; # For noncontinuous ending tokens.
 	# END
 
 	# BEGIN - Error line processing
 	action _err_line_init {
 		s->buffer_length = 0;
 	}
 	action _err_line {
 		if (fc == '\r') {
 			ERR(ZS_DOS_NEWLINE);
 		}
 
 		if (s->buffer_length < sizeof(s->buffer) - 1) {
 			s->buffer[s->buffer_length++] = fc;
 		}
 	}
 	action _err_line_exit {
 		// Terminate the error context string.
 		s->buffer[s->buffer_length++] = 0;
 
 		// Error counter incrementation.
 		s->error.counter++;
 
 		// Initialize the fcall stack.
 		top = 0;
 
 		// Reset per-record contexts.
 		s->long_string = false;
 		s->comma_list = false;
 
 		s->state = ZS_STATE_ERROR;
 
 		// Execute the error callback.
 		if (s->process.automatic) {
 			fhold;
 			if (s->process.error != NULL) {
 				s->process.error(s);
 
 				// Stop if required from the callback.
 				if (s->state == ZS_STATE_STOP) {
 					fbreak;
 				}
 			}
 
 			// Stop the scanner if fatal error.
 			if (s->error.fatal) {
 				fbreak;
 			}
 			fgoto err_rest;
 		} else {
 			// Return if external processing.
 			fhold; fnext err_rest; fbreak;
 		}
 	}
 
 	# Consume rest lines of defective multiline record.
 	err_rest := ( (any - newline - ')')
 	            | newline when { s->multiline }
 	            | ')'     when { s->multiline } $_check_multiline_end
 	            )* %{ fhold; fcall main; } <: newline;
 
 	# Fill rest of the line to buffer and skip to main loop.
 	err_line := (^newline $_err_line)* >_err_line_init
 	            %_err_line_exit . newline;
 	# END
 
 	# BEGIN - Domain name labels processing
 	action _label_init {
 		s->item_length = 0;
 		s->item_length_position = s->dname_tmp_length++;
 	}
 	action _label_char {
 		// Check for maximum dname label length.
 		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
 			(s->dname)[s->dname_tmp_length++] = fc;
 			s->item_length++;
 		} else {
 			WARN(ZS_LABEL_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _label_exit {
 		// Check for maximum dname length overflow after each label.
 		// (at least the next label length must follow).
 		if (s->dname_tmp_length < ZS_MAX_DNAME_LENGTH) {
 			(s->dname)[s->item_length_position] =
 				(uint8_t)(s->item_length);
 		} else {
 			WARN(ZS_DNAME_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 
 	action _label_dec_init {
 		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
 			(s->dname)[s->dname_tmp_length] = 0;
 			s->item_length++;
 		} else {
 			WARN(ZS_LABEL_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _label_dec {
 		(s->dname)[s->dname_tmp_length] *= 10;
 		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)fc];
 	}
 	action _label_dec_exit {
 		s->dname_tmp_length++;
 	}
 	action _label_dec_error {
 		WARN(ZS_BAD_NUMBER);
 		fhold; fgoto err_line;
 	}
 
 	label_char =
 	    ( (alnum | [*\-_/]) $_label_char                 # One common char.
 	    | ('\\' . ^digit)   @_label_char                 # One "\x" char.
 	    | ('\\'             %_label_dec_init             # Initial "\" char.
 	       . digit {3}      $_label_dec %_label_dec_exit # "DDD" rest.
 	                        $!_label_dec_error
 	      )
 	    );
 
 	label  = label_char+ >_label_init %_label_exit;
 	labels = (label . '.')* . label;
 	# END
 
 	# BEGIN - Domain name processing.
 	action _absolute_dname_exit {
 		// Enough room for the terminal label is guaranteed (_label_exit).
 		(s->dname)[s->dname_tmp_length++] = 0;
 	}
 	action _relative_dname_exit {
 		// Check for (relative + origin) dname length overflow.
 		if (s->dname_tmp_length + s->zone_origin_length <= ZS_MAX_DNAME_LENGTH) {
 			memcpy(s->dname + s->dname_tmp_length,
 			       s->zone_origin,
 			       s->zone_origin_length);
 
 			s->dname_tmp_length += s->zone_origin_length;
 		} else {
 			WARN(ZS_DNAME_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _origin_dname_exit {
 		// Copy already verified zone origin.
 		memcpy(s->dname,
 		       s->zone_origin,
 		       s->zone_origin_length);
 
 		s->dname_tmp_length = s->zone_origin_length;
 	}
 
 	action _dname_init {
 		s->item_length_position = 0;
 		s->dname_tmp_length = 0;
 	}
 	action _dname_error {
 		WARN(ZS_BAD_DNAME_CHAR);
 		fhold; fgoto err_line;
 	}
 
 	relative_dname = (labels       ) >_dname_init %_relative_dname_exit;
 	absolute_dname = (labels? . '.') >_dname_init %_absolute_dname_exit;
 
 	dname_ := ( relative_dname
 	          | absolute_dname
 	          | '@' %_origin_dname_exit
 	          ) $!_dname_error %_ret . all_wchar;
 	dname = (alnum | [\-_/\\] | [*.@]) ${ fhold; fcall dname_; };
 	# END
 
 	# BEGIN - Common r_data item processing
 	action _item_length_init {
 		if (rdata_tail <= rdata_stop) {
 			s->item_length_location = rdata_tail++;
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _item_length_exit {
 		s->item_length = rdata_tail - s->item_length_location - 1;
 		if (s->comma_list && s->item_length == 0) {
 			WARN(ZS_EMPTY_LIST_ITEM);
 			fhold; fgoto err_line;
 		}
 		if (s->item_length <= MAX_ITEM_LENGTH) {
 			*(s->item_length_location) = (uint8_t)(s->item_length);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _item_length2_init {
 		if (rdata_tail < rdata_stop) {
 			s->item_length2_location = rdata_tail;
 			rdata_tail += 2;
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _item_length2_exit {
 		s->item_length = rdata_tail - s->item_length2_location - 2;
 
 		if (s->item_length <= MAX_ITEM_LENGTH2) {
 			uint16_t val = htons((uint16_t)(s->item_length));
 			memcpy(s->item_length2_location, &val, 2);
 		} else {
 			WARN(ZS_ITEM_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	# END
 
 	# BEGIN - Owner processing
 	action _r_owner_init {
 		s->dname = s->r_owner;
 		s->r_owner_length = 0;
 	}
 	action _r_owner_exit {
 		s->r_owner_length = s->dname_tmp_length;
 	}
 	action _r_owner_empty_exit {
 		if (s->r_owner_length == 0) {
 			WARN(ZS_BAD_PREVIOUS_OWNER);
 			fhold; fgoto err_line;
 		}
 	}
 	action _r_owner_error {
 		s->r_owner_length = 0;
 		WARN(ZS_BAD_OWNER);
 		fhold; fgoto err_line;
 	}
 
 	r_owner = ( dname >_r_owner_init %_r_owner_exit
 	          | zlen  %_r_owner_empty_exit # Empty owner - use the previous one.
 	          ) $!_r_owner_error;
 	# END
 
 	# BEGIN - domain name in record data processing
 	action _r_dname_init {
 		s->dname = rdata_tail;
 	}
 	action _r_dname_exit {
 		rdata_tail += s->dname_tmp_length;
 	}
 
 	r_dname = dname >_r_dname_init %_r_dname_exit;
 	# END
 
 	# BEGIN - Number processing
 	action _number_digit {
 		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
 		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
 			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
 			 ((uint8_t)fc <= (UINT64_MAX % 10) + '0')
 			)
 		   ) {
 			s->number64 *= 10;
 			s->number64 += digit_to_num[(uint8_t)fc];
 		} else {
 			WARN(ZS_NUMBER64_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 
 	number_digit = [0-9] $_number_digit;
 
 	action _number_init {
 		s->number64 = 0;
 	}
 	action _number_error {
 		WARN(ZS_BAD_NUMBER);
 		fhold; fgoto err_line;
 	}
 
 	# General integer number that cover all necessary integer ranges.
 	number = number_digit+ >_number_init;
 
 	action _float_init {
 		s->decimal_counter = 0;
 	}
 	action _decimal_init {
 		s->number64_tmp = s->number64;
 	}
 	action _decimal_digit {
 		s->decimal_counter++;
 	}
 
 	action _float_exit {
 		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
 			s->number64 *= pow(10, s->decimals);
 		} else if (s->decimal_counter <= s->decimals &&
 				 s->number64_tmp < UINT32_MAX) {
 			s->number64 *= pow(10, s->decimals - s->decimal_counter);
 			s->number64 += s->number64_tmp * pow(10, s->decimals);
 		} else {
 			WARN(ZS_FLOAT_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 
 	# Next float can't be used directly (doesn't contain decimals init)!
 	float = (number . ('.' . number? >_decimal_init $_decimal_digit)?)
 			>_float_init %_float_exit;
 
 	action _float2_init {
 		s->decimals = 2;
 	}
 	action _float3_init {
 		s->decimals = 3;
 	}
 
 	# Float number (in hundredths)with 2 possible decimal digits.
 	float2  = float >_float2_init;
 	# Float number (in thousandths) with 3 possible decimal digits.
 	float3  = float >_float3_init;
 
 	action _num8_write {
 		if (s->number64 <= UINT8_MAX) {
 			*rdata_tail = (uint8_t)(s->number64);
 			rdata_tail += 1;
 		} else {
 			WARN(ZS_NUMBER8_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _num16_write {
 		if (s->number64 <= UINT16_MAX) {
 			uint16_t num16 = htons((uint16_t)s->number64);
 			memcpy(rdata_tail, &num16, 2);
 			rdata_tail += 2;
 		} else {
 			WARN(ZS_NUMBER16_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _num32_write {
 		if (s->number64 <= UINT32_MAX) {
 			uint32_t num32 = htonl((uint32_t)s->number64);
 			memcpy(rdata_tail, &num32, 4);
 			rdata_tail += 4;
 		} else {
 			WARN(ZS_NUMBER32_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 
 	action _type_number_exit {
 		if (s->number64 <= UINT16_MAX) {
 			s->r_type = (uint16_t)(s->number64);
 		} else {
 			WARN(ZS_NUMBER16_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 
 	action _length_number_exit {
 		if (s->number64 <= UINT16_MAX) {
 			s->r_data_length = (uint16_t)(s->number64);
 		} else {
 			WARN(ZS_NUMBER16_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	num8  = number %_num8_write  $!_number_error;
 	num16 = number %_num16_write $!_number_error;
 	num32 = number %_num32_write $!_number_error;
 
 	type_number   = number %_type_number_exit $!_number_error;
 	length_number = number %_length_number_exit $!_number_error;
 	# END
 
 	# BEGIN - Time processing
 	action _time_unit_error {
 		WARN(ZS_BAD_TIME_UNIT);
 		fhold; fgoto err_line;
 	}
 
 	time_unit =
 	    ( 's'i
 	    | 'm'i ${ if (s->number64 <= (UINT32_MAX / 60)) {
 	                  s->number64 *= 60;
 	              } else {
 	                  WARN(ZS_NUMBER32_OVERFLOW);
 	                  fhold; fgoto err_line;
 	              }
 	            }
 	    | 'h'i ${ if (s->number64 <= (UINT32_MAX / 3600)) {
 	                  s->number64 *= 3600;
 	              } else {
 	                  WARN(ZS_NUMBER32_OVERFLOW);
 	                  fhold; fgoto err_line;
 	              }
 	            }
 	    | 'd'i ${ if (s->number64 <= (UINT32_MAX / 86400)) {
 	                  s->number64 *= 86400;
 	              } else {
 	                  WARN(ZS_NUMBER32_OVERFLOW);
 	                  fhold; fgoto err_line;
 	              }
 	            }
 	    | 'w'i ${ if (s->number64 <= (UINT32_MAX / 604800)) {
 	                  s->number64 *= 604800;
 	              } else {
 	                  WARN(ZS_NUMBER32_OVERFLOW);
 	                  fhold; fgoto err_line;
 	              }
 	            }
 	    ) $!_time_unit_error;
 
 
 	action _time_block_init {
 		s->number64_tmp = s->number64;
 	}
 	action _time_block_exit {
 		if (s->number64 + s->number64_tmp < UINT32_MAX) {
 			s->number64 += s->number64_tmp;
 		} else {
 			WARN(ZS_NUMBER32_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 
 	time_block = (number . time_unit) >_time_block_init %_time_block_exit;
 
 	# Time is either a number or a sequence of time blocks (1w1h1m).
 	time = (number . (time_unit . (time_block)*)?) $!_number_error;
 
 	time32 = time %_num32_write;
 	# END
 
 	# BEGIN - Timestamp processing
 	action _timestamp_init {
 		s->buffer_length = 0;
 	}
 	action _timestamp {
 		if (s->buffer_length < sizeof(s->buffer) - 1) {
 			s->buffer[s->buffer_length++] = fc;
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _timestamp_exit {
 		s->buffer[s->buffer_length] = 0;
 
 		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
 			uint32_t timestamp;
 			int ret = date_to_timestamp(s->buffer, &timestamp);
 
 			if (ret == ZS_OK) {
 				*((uint32_t *)rdata_tail) = htonl(timestamp);
 				rdata_tail += 4;
 			} else {
 				WARN(ret);
 				fhold; fgoto err_line;
 			}
 		} else if (s->buffer_length <= 10) { // Timestamp format.
 			char *end;
 
 			s->number64 = strtoull((char *)(s->buffer), &end,  10);
 
 			if (end == (char *)(s->buffer) || *end != '\0') {
 				WARN(ZS_BAD_TIMESTAMP);
 				fhold; fgoto err_line;
 			}
 
 			if (s->number64 <= UINT32_MAX) {
 				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
 				rdata_tail += 4;
 			} else {
 				WARN(ZS_NUMBER32_OVERFLOW);
 				fhold; fgoto err_line;
 			}
 		} else {
 			WARN(ZS_BAD_TIMESTAMP_LENGTH);
 			fhold; fgoto err_line;
 		}
 	}
 	action _timestamp_error {
 		WARN(ZS_BAD_TIMESTAMP_CHAR);
 		fhold; fgoto err_line;
 	}
 
 	timestamp = digit+ >_timestamp_init $_timestamp
 	            %_timestamp_exit $!_timestamp_error;
 	# END
 
 	# BEGIN - Text processing
 	action _text_char {
 		if (rdata_tail <= rdata_stop) {
 			// Split long string.
 			if (s->long_string &&
 			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
 				// _item_length_exit equivalent.
 				*(s->item_length_location) = MAX_ITEM_LENGTH;
 				// _item_length_init equivalent.
 				s->item_length_location = rdata_tail++;
 
 				if (rdata_tail > rdata_stop) {
 					WARN(ZS_TEXT_OVERFLOW);
 					fhold; fgoto err_line;
 				}
 			}
 
 			*(rdata_tail++) = fc;
 		} else {
 			WARN(ZS_TEXT_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _text_char_error {
 		WARN(ZS_BAD_TEXT_CHAR);
 		fhold; fgoto err_line;
 	}
 	action _text_error {
 		WARN(ZS_BAD_TEXT);
 		fhold; fgoto err_line;
 	}
 
 	action _text_dec_init {
 		if (rdata_tail <= rdata_stop) {
 			// Split long string.
 			if (s->long_string &&
 			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
 				// _item_length_exit equivalent.
 				*(s->item_length_location) = MAX_ITEM_LENGTH;
 				// _item_length_init equivalent.
 				s->item_length_location = rdata_tail++;
 
 				if (rdata_tail > rdata_stop) {
 					WARN(ZS_TEXT_OVERFLOW);
 					fhold; fgoto err_line;
 				}
 			}
 
 			*rdata_tail = 0;
 			s->item_length++;
 		} else {
 			WARN(ZS_TEXT_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _text_dec {
 		if ((*rdata_tail < (UINT8_MAX / 10)) ||   // Dominant fast check.
 			((*rdata_tail == (UINT8_MAX / 10)) && // Marginal case.
 			 (fc <= (UINT8_MAX % 10) + '0')
 			)
 		   ) {
 			*rdata_tail *= 10;
 			*rdata_tail += digit_to_num[(uint8_t)fc];
 		} else {
 			WARN(ZS_NUMBER8_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _text_dec_exit {
 		rdata_tail++;
 	}
 	action _text_dec_error {
 		WARN(ZS_BAD_NUMBER);
 		fhold; fgoto err_line;
 	}
 
 	action _comma_list {
 		uint8_t *last_two = rdata_tail - 2;
 		uint16_t current_len = rdata_tail - s->item_length_location - 2;
 		if (s->comma_list) {
 			if (last_two[1] == ',') {
 				if (current_len <= 1) {
 					WARN(ZS_EMPTY_LIST_ITEM);
 					fhold; fgoto err_line;
 				} else if (last_two[0] != '\\') { // Start a new item.
 					*(s->item_length_location) = current_len;
 					s->item_length_location = rdata_tail - 1;
 				} else { // Remove backslash.
 					last_two[0] = ',';
 					rdata_tail--;
 				}
-			} else if (last_two[1] == '\\' && current_len > 1) {
+			} else if (current_len > 1 && last_two[1] == '\\') {
 				if (last_two[0] == '\\') { // Remove backslash.
-					last_two[0] = '\\';
 					rdata_tail--;
 				}
 			}
 		}
 	}
 
 	text_char =
 		( (33..126 - [\\;\"])        $_text_char       # One printable char.
 		| ('\\' . (32..126 - digit)) @_text_char       # One "\x" char.
 		| ('\\'                      %_text_dec_init   # Initial "\" char.
 		   . digit {3}               $_text_dec %_text_dec_exit # "DDD" rest.
 		                             $!_text_dec_error
 		  )
 		) %_comma_list $!_text_char_error;
 
 	quoted_text_char =
 		( text_char
 		| ([ \t;] | [\n] when { s->multiline }) $_text_char
 		) $!_text_char_error;
 
 	# Text string machine instantiation (for smaller code).
 	text_ := (('\"' . quoted_text_char* . '\"') | text_char+)
 		 $!_text_error %_ret . all_wchar;
 	text = ^all_wchar ${ fhold; fcall text_; };
 
 	# Text string with forward 1-byte length.
 	text_string = text >_item_length_init %_item_length_exit;
 
 	action _text_array_init {
 		s->long_string = true;
 	}
 	action _text_array_exit {
 		s->long_string = false;
 	}
 
 	# Text string array as one rdata item.
 	text_array =
 		( (text_string . (sep . text_string)* . sep?)
 		) >_text_array_init %_text_array_exit $!_text_array_exit;
 	# END
 
 	# BEGIN - TTL directive processing
 	action _default_ttl_exit {
 		if (s->number64 <= UINT32_MAX) {
 			s->default_ttl = (uint32_t)(s->number64);
 		} else {
 			ERR(ZS_NUMBER32_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _default_ttl_error {
 		ERR(ZS_BAD_TTL);
 		fhold; fgoto err_line;
 	}
 
 	default_ttl_ := (sep . time . rest) $!_default_ttl_error
 	                %_default_ttl_exit %_ret . newline;
 	default_ttl = all_wchar ${ fhold; fcall default_ttl_; };
 	# END
 
 	# BEGIN - ORIGIN directive processing
 	action _zone_origin_init {
 		s->dname = s->zone_origin;
 	}
 	action _zone_origin_exit {
 		s->zone_origin_length = s->dname_tmp_length;
 	}
 	action _zone_origin_error {
 		ERR(ZS_BAD_ORIGIN);
 		fhold; fgoto err_line;
 	}
 
 	zone_origin_ := (sep . absolute_dname >_zone_origin_init . rest)
 	                $!_zone_origin_error %_zone_origin_exit %_ret . newline;
 	zone_origin = all_wchar ${ fhold; fcall zone_origin_; };
 	# END
 
 	# BEGIN - INCLUDE directive processing
 	action _incl_filename_init {
 		rdata_tail = s->r_data;
 	}
 	action _incl_filename_exit {
 		size_t len = rdata_tail - s->r_data;
 		if (len >= sizeof(s->include_filename)) {
 			ERR(ZS_BAD_INCLUDE_FILENAME);
 			fhold; fgoto err_line;
 		}
 
 		// Store zero terminated include filename.
 		memcpy(s->include_filename, s->r_data, len);
 		s->include_filename[len] = '\0';
 
 		// For detection whether origin is not present.
 		s->dname = NULL;
 	}
 	action _incl_filename_error {
 		ERR(ZS_BAD_INCLUDE_FILENAME);
 		fhold; fgoto err_line;
 	}
 
 	action _incl_origin_init {
 		s->dname = s->r_data;
 	}
 	action _incl_origin_exit {
 		s->r_data_length = s->dname_tmp_length;
 	}
 	action _incl_origin_error {
 		ERR(ZS_BAD_INCLUDE_ORIGIN);
 		fhold; fgoto err_line;
 	}
 
 	action _include_exit {
 		// Extend relative file path.
 		if (s->include_filename[0] != '/') {
 			int ret = snprintf((char *)(s->buffer), sizeof(s->buffer),
 			                   "%s/%s", s->path, s->include_filename);
 			if (ret <= 0 || ret >= sizeof(s->buffer)) {
 				ERR(ZS_BAD_INCLUDE_FILENAME);
 				fhold; fgoto err_line;
 			}
 			memcpy(s->include_filename, s->buffer, ret + 1);
 		}
 
 		// Origin conversion from wire to text form in \DDD notation.
 		if (s->dname == NULL) { // Use current origin.
 			wire_dname_to_str(s->zone_origin,
 			                  s->zone_origin_length,
 			                  (char *)s->buffer);
 		} else { // Use specified origin.
 			wire_dname_to_str(s->r_data,
 			                  s->r_data_length,
 			                  (char *)s->buffer);
 		}
 
 		// Let the caller to solve the include.
 		if (s->process.automatic) {
 			// Create new scanner for included zone file.
 			zs_scanner_t *ss = malloc(sizeof(zs_scanner_t));
 			if (ss == NULL) {
 				ERR(ZS_UNPROCESSED_INCLUDE);
 				fhold; fgoto err_line;
 			}
 
 			// Parse included zone file.
 			if (zs_init(ss, (char *)s->buffer, s->default_class,
 			            s->default_ttl) != 0 ||
 			    zs_set_input_file(ss, (char *)(s->include_filename)) != 0 ||
 			    zs_set_processing(ss, s->process.record, s->process.error,
 			                      s->process.data) != 0 ||
 			    zs_parse_all(ss) != 0) {
 				// File internal errors are handled by error callback.
 				if (ss->error.counter > 0) {
 					s->error.counter += ss->error.counter;
 					ERR(ZS_UNPROCESSED_INCLUDE);
 				// General include file error.
 				} else {
 					ERR(ss->error.code);
 				}
 				zs_deinit(ss);
 				free(ss);
 				fhold; fgoto err_line;
 			}
 			zs_deinit(ss);
 			free(ss);
 		} else {
 			s->state = ZS_STATE_INCLUDE;
 			fhold; fnext main; fbreak;
 		}
 	}
 
 	include_file_ :=
 		(sep . text >_incl_filename_init %_incl_filename_exit
 		 $!_incl_filename_error .
 		 (sep . absolute_dname >_incl_origin_init %_incl_origin_exit
 		  $!_incl_origin_error
 		 )? . rest
 		) %_include_exit %_ret newline;
 	include_file = all_wchar ${ fhold; fcall include_file_; };
 	# END
 
 	# BEGIN - Directive switch
 	# Each error/warning in directive should stop processing.
 	# Some internal errors cause warning only. This causes stop processing.
 	action _directive_init {
 		ERR(ZS_OK);
 	}
 	# Remove stop processing flag.
 	action _directive_exit {
 		NOERR;
 	}
 	action _directive_error {
 		ERR(ZS_BAD_DIRECTIVE);
 		fhold; fgoto err_line;
 	}
 
 	directive = '$' . ( ("TTL"i     . default_ttl)
 	                  | ("ORIGIN"i  . zone_origin)
 	                  | ("INCLUDE"i . include_file)
 	                  ) >_directive_init %_directive_exit $!_directive_error;
 	# END
 
 	# BEGIN - RRecord class and ttl processing
 	action _default_r_class_exit {
 		s->r_class = s->default_class;
 	}
 
 	action _default_r_ttl_exit {
 		s->r_ttl = s->default_ttl;
 	}
 
 	action _r_class_in_exit {
 		s->r_class = KNOT_CLASS_IN;
 	}
 
 	action _r_ttl_exit {
 		if (s->number64 <= UINT32_MAX) {
 			s->r_ttl = (uint32_t)(s->number64);
 		} else {
 			WARN(ZS_NUMBER32_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 
 	r_class = "IN"i %_r_class_in_exit;
 
 	r_ttl = time %_r_ttl_exit;
 	# END
 
 	# BEGIN - IPv4 and IPv6 address processing
 	action _addr_init {
 		s->buffer_length = 0;
 	}
 	action _addr {
 		if (s->buffer_length < sizeof(s->buffer) - 1) {
 			s->buffer[s->buffer_length++] = fc;
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _addr_error {
 		WARN(ZS_BAD_ADDRESS_CHAR);
 		fhold; fgoto err_line;
 	}
 
 	action _ipv4_addr_exit {
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV4);
 			fhold; fgoto err_line;
 		}
 	}
 	action _ipv4_addr_write {
+		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			fhold; fgoto err_line;
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
 		rdata_tail += ZS_INET4_ADDR_LENGTH;
 	}
 
 	action _ipv6_addr_exit {
 		s->buffer[s->buffer_length] = 0;
 
 		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
 			WARN(ZS_BAD_IPV6);
 			fhold; fgoto err_line;
 		}
 	}
 	action _ipv6_addr_write {
+		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			fhold; fgoto err_line;
+		}
 		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
 		rdata_tail += ZS_INET6_ADDR_LENGTH;
 	}
 
 	# Address parsers only.
 	ipv4_addr = (digit  | '.')+  >_addr_init $_addr %_ipv4_addr_exit
 	            $!_addr_error;
 	ipv6_addr = (xdigit | [.:])+ >_addr_init $_addr %_ipv6_addr_exit
 	            $!_addr_error;
 
 	# Write parsed address to r_data.
 	ipv4_addr_write = ipv4_addr %_ipv4_addr_write;
 	ipv6_addr_write = ipv6_addr %_ipv6_addr_write;
 	# END
 
 	# BEGIN - apl record processing
 	action _apl_init {
 		memset(&(s->apl), 0, sizeof(s->apl));
 	}
 	action _apl_excl_flag {
 		s->apl.excl_flag = 128; // dec 128  = bin 10000000.
 	}
 	action _apl_addr_1 {
 		s->apl.addr_family = 1;
 	}
 	action _apl_addr_2 {
 		s->apl.addr_family = 2;
 	}
 	action _apl_prefix_length {
 		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
 		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
 			s->apl.prefix_length = (uint8_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_APL);
 			fhold; fgoto err_line;
 		}
 	}
 	action _apl_exit {
 		// Copy address to buffer.
 		uint8_t len;
 		switch (s->apl.addr_family) {
 		case 1:
 			len = ZS_INET4_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		case 2:
 			len = ZS_INET6_ADDR_LENGTH;
 			memcpy(s->buffer, s->addr, len);
 			break;
 		default:
 			WARN(ZS_BAD_APL);
 			fhold; fgoto err_line;
 		}
 		// Find prefix without trailing zeroes.
 		while (len > 0) {
 			if ((s->buffer[len - 1] & 255) != 0) {
 				break;
 			}
 			len--;
 		}
 		// Check for rdata overflow.
-		if (rdata_tail + 4 + len > rdata_stop) {
+		if (rdata_tail + 4 + len > rdata_stop + 1) {
 			WARN(ZS_RDATA_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 		// Write address family.
 		uint16_t af = htons(s->apl.addr_family);
 		memcpy(rdata_tail, &af, sizeof(af));
 		rdata_tail += 2;
 		// Write prefix length in bits.
 		*(rdata_tail) = s->apl.prefix_length;
 		rdata_tail += 1;
 		// Write negation flag + prefix length in bytes.
 		*(rdata_tail) = len + s->apl.excl_flag;
 		rdata_tail += 1;
 		// Write address prefix non-null data.
 		memcpy(rdata_tail, s->buffer, len);
 		rdata_tail += len;
 	}
 	action _apl_error {
 		WARN(ZS_BAD_APL);
 		fhold; fgoto err_line;
 	}
 
 	apl = ('!'? $_apl_excl_flag .
 	       ( ('1' $_apl_addr_1 . ':' . ipv4_addr . '/' . number
 	          %_apl_prefix_length)
 	       | ('2' $_apl_addr_2 . ':' . ipv6_addr . '/' . number
 	          %_apl_prefix_length)
 	       )
 	      ) >_apl_init %_apl_exit $!_apl_error;
 
 	# Array of APL records (can be empty).
 	apl_array = apl? . (sep . apl)* . sep?;
 	# END
 
 	# BEGIN - Hexadecimal string array processing
 	action _first_hex_char {
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = first_hex_to_num[(uint8_t)fc];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _second_hex_char {
 		*rdata_tail += second_hex_to_num[(uint8_t)fc];
 		rdata_tail++;
 	}
 	action _hex_char_error {
 		WARN(ZS_BAD_HEX_CHAR);
 		fhold; fgoto err_line;
 	}
 
 	hex_char  = (xdigit $_first_hex_char . xdigit $_second_hex_char);
 
 	# Hex array with possibility of inside white spaces and multiline.
 	hex_array = (hex_char+ . sep?)+ $!_hex_char_error;
 
 	# Continuous hex array (or "-") with forward length processing.
 	salt = (hex_char+ | '-') >_item_length_init %_item_length_exit
 	       $!_hex_char_error;
 
 	action _type_data_exit {
 		if ((rdata_tail - s->r_data) != s->r_data_length) {
 			WARN(ZS_BAD_RDATA_LENGTH);
 			fhold; fgoto err_line;
 		}
 	}
 
 	action _type_data_error {
 		WARN(ZS_BAD_HEX_RDATA);
 		fhold; fgoto err_line;
 	}
 
 	# Hex array with control to forward length statement.
 	type_data = hex_array %_type_data_exit $!_type_data_error;
 	# END
 
 	# BEGIN - Base64 processing (RFC 4648)
 	action _first_base64_char {
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = first_base64_to_num[(uint8_t)fc];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _second_base64_char {
 		*(rdata_tail++) += second_left_base64_to_num[(uint8_t)fc];
 
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = second_right_base64_to_num[(uint8_t)fc];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _third_base64_char {
 		*(rdata_tail++) += third_left_base64_to_num[(uint8_t)fc];
 
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = third_right_base64_to_num[(uint8_t)fc];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _fourth_base64_char {
 		*(rdata_tail++) += fourth_base64_to_num[(uint8_t)fc];
 	}
 
 	action _base64_char_error {
 		WARN(ZS_BAD_BASE64_CHAR);
 		fhold; fgoto err_line;
 	}
 
 	base64_char = alnum | [+/];
 	base64_padd = '=';
 	base64_quartet =
 	    ( base64_char          $_first_base64_char  . # A
 	      base64_char          $_second_base64_char . # AB
 	      ( ( base64_char      $_third_base64_char  . # ABC
 	          ( base64_char    $_fourth_base64_char   # ABCD
 	          | base64_padd{1}                        # ABC=
 	          )
 	        )
 	      | base64_padd{2}                            # AB==
 	      )
 	    );
 
 	# Base64 array with possibility of inside white spaces and multiline.
 	base64_ := (base64_quartet+ . sep?)+ $!_base64_char_error
 	           %_ret . end_wchar;
 	base64 = base64_char ${ fhold; fcall base64_; };
 	# END
 
 	# BEGIN - Base32hex processing (RFC 4648)
 	action _first_base32hex_char {
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = first_base32hex_to_num[(uint8_t)fc];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _second_base32hex_char {
 		*(rdata_tail++) += second_left_base32hex_to_num[(uint8_t)fc];
 
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = second_right_base32hex_to_num[(uint8_t)fc];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _third_base32hex_char {
 		*rdata_tail += third_base32hex_to_num[(uint8_t)fc];
 	}
 	action _fourth_base32hex_char {
 		*(rdata_tail++) += fourth_left_base32hex_to_num[(uint8_t)fc];
 
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = fourth_right_base32hex_to_num[(uint8_t)fc];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _fifth_base32hex_char {
 		*(rdata_tail++) += fifth_left_base32hex_to_num[(uint8_t)fc];
 
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = fifth_right_base32hex_to_num[(uint8_t)fc];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _sixth_base32hex_char {
 		*rdata_tail += sixth_base32hex_to_num[(uint8_t)fc];
 	}
 	action _seventh_base32hex_char {
 		*(rdata_tail++) += seventh_left_base32hex_to_num[(uint8_t)fc];
 
 		if (rdata_tail <= rdata_stop) {
 			*rdata_tail = seventh_right_base32hex_to_num[(uint8_t)fc];
 		} else {
 			WARN(ZS_RDATA_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 	action _eighth_base32hex_char {
 		*(rdata_tail++) += eighth_base32hex_to_num[(uint8_t)fc];
 	}
 
 	action _base32hex_char_error {
 		WARN(ZS_BAD_BASE32HEX_CHAR);
 		fhold; fgoto err_line;
 	}
 
 	base32hex_char = [0-9a-vA-V];
 	base32hex_padd = '=';
 	base32hex_octet =
 	    ( base32hex_char                  $_first_base32hex_char   . # A
 	      base32hex_char                  $_second_base32hex_char  . # AB
 	      ( ( base32hex_char              $_third_base32hex_char   . # ABC
 	          base32hex_char              $_fourth_base32hex_char  . # ABCD
 	          ( ( base32hex_char          $_fifth_base32hex_char   . # ABCDE
 	              ( ( base32hex_char      $_sixth_base32hex_char   . # ABCDEF
 	                  base32hex_char      $_seventh_base32hex_char . # ABCDEFG
 	                  ( base32hex_char    $_eighth_base32hex_char    # ABCDEFGH
 	                  | base32hex_padd{1}                            # ABCDEFG=
 	                  )
 	                )
 	              | base32hex_padd{3}                                # ABCDE===
 	              )
 	            )
 	          | base32hex_padd{4}                                    # ABCD====
 	          )
 	        )
 	      | base32hex_padd{6}                                        # AB======
 	      )
 	    );
 
 	# Continuous base32hex (with padding!) array with forward length processing.
 	hash = base32hex_octet+ >_item_length_init %_item_length_exit
 	       $!_base32hex_char_error;
 	# END
 
 	# BEGIN - Simple number write functions.
 	action _write8_0 {
 		*(rdata_tail++) = 0;
 	}
 	action _write8_1 {
 		*(rdata_tail++) = 1;
 	}
 	action _write8_2 {
 		*(rdata_tail++) = 2;
 	}
 	action _write8_3 {
 		*(rdata_tail++) = 3;
 	}
 	action _write8_5 {
 		*(rdata_tail++) = 5;
 	}
 	action _write8_6 {
 		*(rdata_tail++) = 6;
 	}
 	action _write8_7 {
 		*(rdata_tail++) = 7;
 	}
 	action _write8_8 {
 		*(rdata_tail++) = 8;
 	}
 	action _write8_10 {
 		*(rdata_tail++) = 10;
 	}
 	action _write8_12 {
 		*(rdata_tail++) = 12;
 	}
 	action _write8_13 {
 		*(rdata_tail++) = 13;
 	}
 	action _write8_14 {
 		*(rdata_tail++) = 14;
 	}
 	action _write8_15 {
 		*(rdata_tail++) = 15;
 	}
 	action _write8_16 {
 		*(rdata_tail++) = 16;
 	}
 	action _write8_252 {
 		*(rdata_tail++) = 252;
 	}
 	action _write8_253 {
 		*(rdata_tail++) = 253;
 	}
 	action _write8_254 {
 		*(rdata_tail++) = 254;
 	}
 
 	action _write16_0 {
 		uint16_t val = htons(0);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	action _write16_1 {
 		uint16_t val = htons(1);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	action _write16_2 {
 		uint16_t val = htons(2);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	action _write16_3 {
 		uint16_t val = htons(3);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	action _write16_4 {
 		uint16_t val = htons(4);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	action _write16_5 {
 		uint16_t val = htons(5);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	action _write16_6 {
 		uint16_t val = htons(6);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	action _write16_7 {
 		uint16_t val = htons(7);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	action _write16_8 {
 		uint16_t val = htons(8);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	action _write16_253 {
 		uint16_t val = htons(253);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	action _write16_254 {
 		uint16_t val = htons(254);
 		memcpy(rdata_tail, &val, 2);
 		rdata_tail += 2;
 	}
 	# END
 
 	# BEGIN - Gateway
 	action _gateway_error {
 		WARN(ZS_BAD_GATEWAY);
 		fhold; fgoto err_line;
 	}
 	action _gateway_key_error {
 		WARN(ZS_BAD_GATEWAY_KEY);
 		fhold; fgoto err_line;
 	}
 
 	gateway = (( ('0' $_write8_0 . sep . num8 . sep . '.')
 	           | ('1' $_write8_1 . sep . num8 . sep . ipv4_addr_write)
 	           | ('2' $_write8_2 . sep . num8 . sep . ipv6_addr_write)
 	           | ('3' $_write8_3 . sep . num8 . sep . r_dname)
 	           ) $!_gateway_error .
 	           # If algorithm is 0 then key isn't present and vice versa.
 	           ( ((sep . base64) when { s->number64 != 0 })
 	           | ((sep?)         when { s->number64 == 0 }) # remove blank space
 	           ) $!_gateway_key_error
 	          );
 	# END
 
 	# BEGIN - Type processing
 	action _type_error {
 		WARN(ZS_UNSUPPORTED_TYPE);
 		fhold; fgoto err_line;
 	}
 
 	type_num =
 	    ( "A"i          %{ type_num(KNOT_RRTYPE_A, &rdata_tail); }
 	    | "NS"i         %{ type_num(KNOT_RRTYPE_NS, &rdata_tail); }
 	    | "CNAME"i      %{ type_num(KNOT_RRTYPE_CNAME, &rdata_tail); }
 	    | "SOA"i        %{ type_num(KNOT_RRTYPE_SOA, &rdata_tail); }
 	    | "PTR"i        %{ type_num(KNOT_RRTYPE_PTR, &rdata_tail); }
 	    | "HINFO"i      %{ type_num(KNOT_RRTYPE_HINFO, &rdata_tail); }
 	    | "MINFO"i      %{ type_num(KNOT_RRTYPE_MINFO, &rdata_tail); }
 	    | "MX"i         %{ type_num(KNOT_RRTYPE_MX, &rdata_tail); }
 	    | "TXT"i        %{ type_num(KNOT_RRTYPE_TXT, &rdata_tail); }
 	    | "RP"i         %{ type_num(KNOT_RRTYPE_RP, &rdata_tail); }
 	    | "AFSDB"i      %{ type_num(KNOT_RRTYPE_AFSDB, &rdata_tail); }
 	    | "RT"i         %{ type_num(KNOT_RRTYPE_RT, &rdata_tail); }
 	    | "KEY"i        %{ type_num(KNOT_RRTYPE_KEY, &rdata_tail); }
 	    | "AAAA"i       %{ type_num(KNOT_RRTYPE_AAAA, &rdata_tail); }
 	    | "LOC"i        %{ type_num(KNOT_RRTYPE_LOC, &rdata_tail); }
 	    | "SRV"i        %{ type_num(KNOT_RRTYPE_SRV, &rdata_tail); }
 	    | "NAPTR"i      %{ type_num(KNOT_RRTYPE_NAPTR, &rdata_tail); }
 	    | "KX"i         %{ type_num(KNOT_RRTYPE_KX, &rdata_tail); }
 	    | "CERT"i       %{ type_num(KNOT_RRTYPE_CERT, &rdata_tail); }
 	    | "DNAME"i      %{ type_num(KNOT_RRTYPE_DNAME, &rdata_tail); }
 	    | "APL"i        %{ type_num(KNOT_RRTYPE_APL, &rdata_tail); }
 	    | "DS"i         %{ type_num(KNOT_RRTYPE_DS, &rdata_tail); }
 	    | "SSHFP"i      %{ type_num(KNOT_RRTYPE_SSHFP, &rdata_tail); }
 	    | "IPSECKEY"i   %{ type_num(KNOT_RRTYPE_IPSECKEY, &rdata_tail); }
 	    | "RRSIG"i      %{ type_num(KNOT_RRTYPE_RRSIG, &rdata_tail); }
 	    | "NSEC"i       %{ type_num(KNOT_RRTYPE_NSEC, &rdata_tail); }
 	    | "DNSKEY"i     %{ type_num(KNOT_RRTYPE_DNSKEY, &rdata_tail); }
 	    | "DHCID"i      %{ type_num(KNOT_RRTYPE_DHCID, &rdata_tail); }
 	    | "NSEC3"i      %{ type_num(KNOT_RRTYPE_NSEC3, &rdata_tail); }
 	    | "NSEC3PARAM"i %{ type_num(KNOT_RRTYPE_NSEC3PARAM, &rdata_tail); }
 	    | "TLSA"i       %{ type_num(KNOT_RRTYPE_TLSA, &rdata_tail); }
 	    | "SMIMEA"i     %{ type_num(KNOT_RRTYPE_SMIMEA, &rdata_tail); }
 	    | "CDS"i        %{ type_num(KNOT_RRTYPE_CDS, &rdata_tail); }
 	    | "CDNSKEY"i    %{ type_num(KNOT_RRTYPE_CDNSKEY, &rdata_tail); }
 	    | "OPENPGPKEY"i %{ type_num(KNOT_RRTYPE_OPENPGPKEY, &rdata_tail); }
 	    | "CSYNC"i      %{ type_num(KNOT_RRTYPE_CSYNC, &rdata_tail); }
 	    | "ZONEMD"i     %{ type_num(KNOT_RRTYPE_ZONEMD, &rdata_tail); }
 	    | "SPF"i        %{ type_num(KNOT_RRTYPE_SPF, &rdata_tail); }
 	    | "NID"i        %{ type_num(KNOT_RRTYPE_NID, &rdata_tail); }
 	    | "L32"i        %{ type_num(KNOT_RRTYPE_L32, &rdata_tail); }
 	    | "L64"i        %{ type_num(KNOT_RRTYPE_L64, &rdata_tail); }
 	    | "LP"i         %{ type_num(KNOT_RRTYPE_LP, &rdata_tail); }
 	    | "EUI48"i      %{ type_num(KNOT_RRTYPE_EUI48, &rdata_tail); }
 	    | "EUI64"i      %{ type_num(KNOT_RRTYPE_EUI64, &rdata_tail); }
 	    | "URI"i        %{ type_num(KNOT_RRTYPE_URI, &rdata_tail); }
 	    | "CAA"i        %{ type_num(KNOT_RRTYPE_CAA, &rdata_tail); }
 	    | "SVCB"i       %{ type_num(KNOT_RRTYPE_SVCB, &rdata_tail); }
 	    | "HTTPS"i      %{ type_num(KNOT_RRTYPE_HTTPS, &rdata_tail); }
 	    | "TYPE"i      . num16 # TYPE0-TYPE65535.
 	    ) $!_type_error;
 	# END
 
 	# BEGIN - Bitmap processing
 	action _type_bitmap_exit {
 		if (s->number64 <= UINT16_MAX) {
 			window_add_bit(s->number64, s);
 		} else {
 			WARN(ZS_NUMBER16_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 	}
 
 	# TYPE0-TYPE65535.
 	type_bitmap = number %_type_bitmap_exit;
 
 	type_bit =
 	    ( "A"i          %{ window_add_bit(KNOT_RRTYPE_A, s); }
 	    | "NS"i         %{ window_add_bit(KNOT_RRTYPE_NS, s); }
 	    | "CNAME"i      %{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
 	    | "SOA"i        %{ window_add_bit(KNOT_RRTYPE_SOA, s); }
 	    | "PTR"i        %{ window_add_bit(KNOT_RRTYPE_PTR, s); }
 	    | "HINFO"i      %{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
 	    | "MINFO"i      %{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
 	    | "MX"i         %{ window_add_bit(KNOT_RRTYPE_MX, s); }
 	    | "TXT"i        %{ window_add_bit(KNOT_RRTYPE_TXT, s); }
 	    | "RP"i         %{ window_add_bit(KNOT_RRTYPE_RP, s); }
 	    | "AFSDB"i      %{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
 	    | "RT"i         %{ window_add_bit(KNOT_RRTYPE_RT, s); }
 	    | "KEY"i        %{ window_add_bit(KNOT_RRTYPE_KEY, s); }
 	    | "AAAA"i       %{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
 	    | "LOC"i        %{ window_add_bit(KNOT_RRTYPE_LOC, s); }
 	    | "SRV"i        %{ window_add_bit(KNOT_RRTYPE_SRV, s); }
 	    | "NAPTR"i      %{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
 	    | "KX"i         %{ window_add_bit(KNOT_RRTYPE_KX, s); }
 	    | "CERT"i       %{ window_add_bit(KNOT_RRTYPE_CERT, s); }
 	    | "DNAME"i      %{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
 	    | "APL"i        %{ window_add_bit(KNOT_RRTYPE_APL, s); }
 	    | "DS"i         %{ window_add_bit(KNOT_RRTYPE_DS, s); }
 	    | "SSHFP"i      %{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
 	    | "IPSECKEY"i   %{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
 	    | "RRSIG"i      %{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
 	    | "NSEC"i       %{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
 	    | "DNSKEY"i     %{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
 	    | "DHCID"i      %{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
 	    | "NSEC3"i      %{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
 	    | "NSEC3PARAM"i %{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
 	    | "TLSA"i       %{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
 	    | "SMIMEA"i     %{ window_add_bit(KNOT_RRTYPE_SMIMEA, s); }
 	    | "CDS"i        %{ window_add_bit(KNOT_RRTYPE_CDS, s); }
 	    | "CDNSKEY"i    %{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
 	    | "OPENPGPKEY"i %{ window_add_bit(KNOT_RRTYPE_OPENPGPKEY, s); }
 	    | "CSYNC"i      %{ window_add_bit(KNOT_RRTYPE_CSYNC, s); }
 	    | "ZONEMD"i     %{ window_add_bit(KNOT_RRTYPE_ZONEMD, s); }
 	    | "SPF"i        %{ window_add_bit(KNOT_RRTYPE_SPF, s); }
 	    | "NID"i        %{ window_add_bit(KNOT_RRTYPE_NID, s); }
 	    | "L32"i        %{ window_add_bit(KNOT_RRTYPE_L32, s); }
 	    | "L64"i        %{ window_add_bit(KNOT_RRTYPE_L64, s); }
 	    | "LP"i         %{ window_add_bit(KNOT_RRTYPE_LP, s); }
 	    | "EUI48"i      %{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
 	    | "EUI64"i      %{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
 	    | "URI"i        %{ window_add_bit(KNOT_RRTYPE_URI, s); }
 	    | "CAA"i        %{ window_add_bit(KNOT_RRTYPE_CAA, s); }
 	    | "SVCB"i       %{ window_add_bit(KNOT_RRTYPE_SVCB, s); }
 	    | "HTTPS"i      %{ window_add_bit(KNOT_RRTYPE_HTTPS, s); }
 	    | "TYPE"i      . type_bitmap # TYPE0-TYPE65535.
 	    );
 
 	action _bitmap_init {
 		memset(s->windows, 0, sizeof(s->windows));
 		s->last_window = -1;
 	}
 	action _bitmap_exit {
 		for (uint16_t window = 0; window <= s->last_window; window++) {
 			if ((s->windows[window]).length > 0) {
 				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
 				{
 					// Window number.
 					*rdata_tail = (uint8_t)window;
 					rdata_tail += 1;
 					// Bitmap length.
 					*rdata_tail = (s->windows[window]).length;
 					rdata_tail += 1;
 					// Copying bitmap.
 					memcpy(rdata_tail,
 					       (s->windows[window]).bitmap,
 					       (s->windows[window]).length);
 					rdata_tail += (s->windows[window]).length;
 				} else {
 					WARN(ZS_RDATA_OVERFLOW);
 					fhold; fgoto err_line;
 				}
 			}
 		}
 	}
 	action _bitmap_error {
 		WARN(ZS_BAD_BITMAP);
 		fhold; fgoto err_line;
 	}
 
 	# Blank bitmap is allowed too.
 	bitmap_ := ((sep . type_bit)* . sep?) >_bitmap_init
 	           %_bitmap_exit %_ret $!_bitmap_error . end_wchar;
 	bitmap = all_wchar ${ fhold; fcall bitmap_; };
 	# END
 
 	# BEGIN - Location processing
 	action _d1_exit {
 		if (s->number64 <= 90) {
 			s->loc.d1 = (uint32_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			fhold; fgoto err_line;
 		}
 	}
 	action _d2_exit {
 		if (s->number64 <= 180) {
 			s->loc.d2 = (uint32_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			fhold; fgoto err_line;
 		}
 	}
 	action _m1_exit {
 		if (s->number64 <= 59) {
 			s->loc.m1 = (uint32_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			fhold; fgoto err_line;
 		}
 	}
 	action _m2_exit {
 		if (s->number64 <= 59) {
 			s->loc.m2 = (uint32_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			fhold; fgoto err_line;
 		}
 	}
 	action _s1_exit {
 		if (s->number64 <= 59999) {
 			s->loc.s1 = (uint32_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			fhold; fgoto err_line;
 		}
 	}
 	action _s2_exit {
 		if (s->number64 <= 59999) {
 			s->loc.s2 = (uint32_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			fhold; fgoto err_line;
 		}
 	}
 	action _alt_exit {
 		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
 		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
 		{
 			s->loc.alt = (uint32_t)(s->number64);
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			fhold; fgoto err_line;
 		}
 	}
 	action _siz_exit {
 		if (s->number64 <= 9000000000ULL) {
 			s->loc.siz = s->number64;
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			fhold; fgoto err_line;
 		}
 	}
 	action _hp_exit {
 		if (s->number64 <= 9000000000ULL) {
 			s->loc.hp = s->number64;
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			fhold; fgoto err_line;
 		}
 	}
 	action _vp_exit {
 		if (s->number64 <= 9000000000ULL) {
 			s->loc.vp = s->number64;
 		} else {
 			WARN(ZS_BAD_NUMBER);
 			fhold; fgoto err_line;
 		}
 	}
 	action _lat_sign {
 		s->loc.lat_sign = -1;
 	}
 	action _long_sign {
 		s->loc.long_sign = -1;
 	}
 	action _alt_sign {
 		s->loc.alt_sign = -1;
 	}
 
 	d1  = number %_d1_exit;
 	d2  = number %_d2_exit;
 	m1  = number %_m1_exit;
 	m2  = number %_m2_exit;
 	s1  = float3 %_s1_exit;
 	s2  = float3 %_s2_exit;
 	siz = float2 %_siz_exit;
 	hp  = float2 %_hp_exit;
 	vp  = float2 %_vp_exit;
 	alt = ('-' %_alt_sign)? . float2 %_alt_exit;
 	lat_sign  = 'N' | 'S' %_lat_sign;
 	long_sign = 'E' | 'W' %_long_sign;
 
 	action _loc_init {
 		memset(&(s->loc), 0, sizeof(s->loc));
 		// Defaults.
 		s->loc.siz = 100;
 		s->loc.vp  = 1000;
 		s->loc.hp  = 1000000;
 		s->loc.lat_sign  = 1;
 		s->loc.long_sign = 1;
 		s->loc.alt_sign  = 1;
 	}
 	action _loc_exit {
 		// Write version.
 		*(rdata_tail) = 0;
 		rdata_tail += 1;
 		// Write size.
 		*(rdata_tail) = loc64to8(s->loc.siz);
 		rdata_tail += 1;
 		// Write horizontal precision.
 		*(rdata_tail) = loc64to8(s->loc.hp);
 		rdata_tail += 1;
 		// Write vertical precision.
 		*(rdata_tail) = loc64to8(s->loc.vp);
 		rdata_tail += 1;
 		// Write latitude.
 		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
 			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
 		rdata_tail += 4;
 		// Write longitude.
 		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
 			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
 		rdata_tail += 4;
 		// Write altitude.
 		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
 			(s->loc.alt));
 		rdata_tail += 4;
 	}
 	action _loc_error {
 		WARN(ZS_BAD_LOC_DATA);
 		fhold; fgoto err_line;
 	}
 
 	loc = (d1 . sep . (m1 . sep . (s1 . sep)?)? . lat_sign  . sep .
 	       d2 . sep . (m2 . sep . (s2 . sep)?)? . long_sign . sep .
 	       alt 'm'? . (sep . siz 'm'? . (sep . hp 'm'? . (sep . vp 'm'?)?)?)? .
 	       sep?
 	      ) >_loc_init %_loc_exit $!_loc_error;
 	# END
 
 	# BEGIN - Hexadecimal rdata processing
 	action _hex_r_data_error {
 		WARN(ZS_BAD_HEX_RDATA);
 		fhold; fgoto err_line;
 	}
 
 	nonempty_hex_r_data :=
 		(sep . length_number . sep . type_data)
 		$!_hex_r_data_error %_ret . end_wchar;
 
 	hex_r_data :=
 		(sep .
 		 ( ('0'                             %_ret . all_wchar)
 		 | (length_number . sep . type_data %_ret . end_wchar)
 		 )
 		) $!_hex_r_data_error;
 	# END
 
 	# BEGIN - EUI processing
 	action _eui_init {
 		s->item_length = 0;
 	}
 	action _eui_count {
 		s->item_length++;
 	}
 	action _eui48_exit {
 		if (s->item_length != 6) {
 			WARN(ZS_BAD_EUI_LENGTH);
 			fhold; fgoto err_line;
 		}
 	}
 	action _eui64_exit {
 		if (s->item_length != 8) {
 			WARN(ZS_BAD_EUI_LENGTH);
 			fhold; fgoto err_line;
 		}
 	}
 	action _eui_sep_error {
 		WARN(ZS_BAD_CHAR_DASH);
 		fhold; fgoto err_line;
 	}
 
 	eui48 = (hex_char %_eui_count .
 	         ('-' >!_eui_sep_error . hex_char %_eui_count)+
 		) $!_hex_char_error >_eui_init %_eui48_exit;
 
 	eui64 = (hex_char %_eui_count .
 	         ('-' >!_eui_sep_error . hex_char %_eui_count)+
 		) $!_hex_char_error >_eui_init %_eui64_exit;
 	# END
 
 	# BEGIN - ILNP processing
 	action _l64_init {
 		s->item_length = 0;
 	}
 	action _l64_count {
 		s->item_length++;
 	}
 	action _l64_exit {
 		if (s->item_length != 4) {
 			WARN(ZS_BAD_L64_LENGTH);
 			fhold; fgoto err_line;
 		}
 	}
 	action _l64_sep_error {
 		WARN(ZS_BAD_CHAR_COLON);
 		fhold; fgoto err_line;
 	}
 
 	l64_label = (hex_char . hex_char) $!_hex_char_error %_l64_count;
 	l64 = (l64_label . (':' >!_l64_sep_error . l64_label)+
 	      ) $!_hex_char_error >_l64_init %_l64_exit;
 
 	l32 = ipv4_addr %_ipv4_addr_write;
 	# END
 
 	# BEGIN - SvcParams processing (SVCB/HTTPS records)
 	action _svcb_params_init {
 		s->svcb.params_position = rdata_tail;
 		s->svcb.last_key = -1;
 	}
 	action _svcb_params_exit {
 		int ret = svcb_check(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			fhold; fgoto err_line;
 		}
 	}
 	action _svcb_params_error {
 		WARN(ZS_BAD_SVCB_PARAM);
 		fhold; fgoto err_line;
 	}
 
 	action _mandat_value_error {
 		WARN(ZS_BAD_SVCB_MANDATORY);
 		fhold; fgoto err_line;
 	}
 
 	action _svcb_param_init {
+		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
+			WARN(ZS_RDATA_OVERFLOW);
+			fhold; fgoto err_line;
+		}
 		s->svcb.param_position = rdata_tail;
 	}
 	action _svcb_param_exit {
 		int ret = svcb_sort(s, rdata_tail);
 		if (ret != ZS_OK) {
 			WARN(ret);
 			fhold; fgoto err_line;
 		}
 	}
 
 	action _alpnl_init {
 		s->comma_list = true;
 	}
 	action _alpnl_exit {
 		s->comma_list = false;
 	}
 
 	action _mandatory_init {
 		s->svcb.mandatory_position = rdata_tail + 2; // Skip 2-B prefix.
 	}
 	action _mandatory_exit {
 		svcb_mandatory_sort(s->svcb.mandatory_position, rdata_tail);
 	}
 
+	action _rdata_2B_check {
+		if (rdata_tail + 2 > rdata_stop + 1) {
+			WARN(ZS_RDATA_OVERFLOW);
+			fhold; fgoto err_line;
+		}
+	}
+
 	svcb_key_generic   = ("key"             . num16);
 	svcb_key_mandatory = ("mandatory"       %_write16_0);
 	svcb_key_alpn      = ("alpn"            %_write16_1);
 	svcb_key_ndalpn    = ("no-default-alpn" %_write16_2);
 	svcb_key_port      = ("port"            %_write16_3);
 	svcb_key_ipv4hint  = ("ipv4hint"        %_write16_4);
 	svcb_key_ech       = ("ech"             %_write16_5);
 	svcb_key_ipv6hint  = ("ipv6hint"        %_write16_6);
 
 	mandat_value_ :=
 		(svcb_key_generic | svcb_key_alpn | svcb_key_ndalpn | svcb_key_port |
 		 svcb_key_ipv4hint | svcb_key_ech | svcb_key_ipv6hint
-		) $!_mandat_value_error %_ret . ([,\"] | all_wchar);
+		) >_rdata_2B_check $!_mandat_value_error %_ret . ([,\"] | all_wchar);
 	mandat_value = alpha ${ fhold; fcall mandat_value_; };
 
 	svcb_empty    = zlen %_write16_0;
 	svcb_generic_ = (text                                         >_item_length2_init %_item_length2_exit);
 	svcb_generic  = ("=" .  svcb_generic_) | svcb_empty;
 	svcb_mandat_  = ((mandat_value    . ("," . mandat_value)*)    >_item_length2_init %_item_length2_exit);
 	svcb_mandat   = svcb_mandat_ >_mandatory_init %_mandatory_exit;
 	svcb_alpn     = (text_string >_alpnl_init %_alpnl_exit        >_item_length2_init %_item_length2_exit);
-	svcb_port     = num16 >_write16_2;
+	svcb_port     = num16 >_write16_2 >_rdata_2B_check;
 	svcb_ipv4     = ((ipv4_addr_write . ("," . ipv4_addr_write)*) >_item_length2_init %_item_length2_exit);
 	svcb_ech      = (base64_quartet+                              >_item_length2_init %_item_length2_exit);
 	svcb_ipv6     = ((ipv6_addr_write . ("," . ipv6_addr_write)*) >_item_length2_init %_item_length2_exit);
 
 	svcb_param_generic   = (svcb_key_generic   . svcb_generic);
 	svcb_param_mandatory = (svcb_key_mandatory . "=" . (svcb_mandat | ('\"' . svcb_mandat . '\"')));
 	svcb_param_alpn      = (svcb_key_alpn      . "=" . (svcb_alpn   | ('\"' . svcb_alpn   . '\"')));
 	svcb_param_ndalpn    = (svcb_key_ndalpn    . svcb_empty);
 	svcb_param_port      = (svcb_key_port      . "=" . (svcb_port   | ('\"' . svcb_port   . '\"')));
 	svcb_param_ipv4hint  = (svcb_key_ipv4hint  . "=" . (svcb_ipv4   | ('\"' . svcb_ipv4   . '\"')));
 	svcb_param_ech       = (svcb_key_ech       . "=" . (svcb_ech    | ('\"' . svcb_ech    . '\"')));
 	svcb_param_ipv6hint  = (svcb_key_ipv6hint  . "=" . (svcb_ipv6   | ('\"' . svcb_ipv6   . '\"')));
 
 	svcb_param_any =
 		(svcb_param_generic | svcb_param_mandatory | svcb_param_alpn |
 		 svcb_param_ndalpn | svcb_param_port | svcb_param_ipv4hint |
 		 svcb_param_ech | svcb_param_ipv6hint
 		) >_svcb_param_init %_svcb_param_exit;
 	svcb_params_ :=
 		((sep . svcb_param_any)* . sep?) >_svcb_params_init
 		%_svcb_params_exit $!_svcb_params_error %_ret . end_wchar;
 	svcb_params = all_wchar ${ fhold; fcall svcb_params_; };
 	# END
 
 	# BEGIN - Mnemomic names processing
 	action _dns_alg_error {
 		WARN(ZS_BAD_ALGORITHM);
 		fhold; fgoto err_line;
 	}
 	action _cert_type_error {
 		WARN(ZS_BAD_CERT_TYPE);
 		fhold; fgoto err_line;
 	}
 
 	dns_alg_ :=
 		( number                %_num8_write
 		| "RSAMD5"i             %_write8_1
 		| "DH"i                 %_write8_2
 		| "DSA"i                %_write8_3
 		| "RSASHA1"i            %_write8_5
 		| "DSA-NSEC3-SHA1"i     %_write8_6
 		| "RSASHA1-NSEC3-SHA1"i %_write8_7
 		| "RSASHA256"i          %_write8_8
 		| "RSASHA512"i          %_write8_10
 		| "ECC-GOST"i           %_write8_12
 		| "ECDSAP256SHA256"i    %_write8_13
 		| "ECDSAP384SHA384"i    %_write8_14
 		| "ED25519"i            %_write8_15
 		| "ED448"i              %_write8_16
 		| "INDIRECT"i           %_write8_252
 		| "PRIVATEDNS"i         %_write8_253
 		| "PRIVATEOID"i         %_write8_254
 		) $!_dns_alg_error %_ret . all_wchar;
 	dns_alg = alnum ${ fhold; fcall dns_alg_; };
 
 	cert_type_ :=
 		( number     %_num16_write
 		| "PKIX"i    %_write16_1
 		| "SPKI"i    %_write16_2
 		| "PGP"i     %_write16_3
 		| "IPKIX"i   %_write16_4
 		| "ISPKI"i   %_write16_5
 		| "IPGP"i    %_write16_6
 		| "ACPKIX"i  %_write16_7
 		| "IACPKIX"i %_write16_8
 		| "URI"i     %_write16_253
 		| "OID"i     %_write16_254
 		) $!_cert_type_error %_ret . all_wchar;
 	cert_type = alnum ${ fhold; fcall cert_type_; };
 	# END
 
 	# BEGIN - Rdata processing
 	action _r_data_init {
 		rdata_tail = s->r_data;
 	}
 	action _r_data_error {
 		WARN(ZS_BAD_RDATA);
 		fhold; fgoto err_line;
 	}
 
 	r_data_a :=
 		(ipv4_addr_write)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_ns :=
 		(r_dname)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_soa :=
 		(r_dname . sep . r_dname . sep . num32 . sep . time32 .
 		 sep . time32 . sep . time32 . sep . time32)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_hinfo :=
 		(text_string . sep . text_string)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_minfo :=
 		(r_dname . sep . r_dname)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_mx :=
 		(num16 . sep . r_dname)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_txt :=
 		(text_array)
 		$!_r_data_error %_ret . end_wchar;
 
 	r_data_aaaa :=
 		(ipv6_addr_write)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_loc :=
 		(loc)
 		$!_r_data_error %_ret . end_wchar;
 
 	r_data_srv :=
 		(num16 . sep . num16 . sep . num16 . sep . r_dname)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_naptr :=
 		(num16 . sep . num16 . sep . text_string . sep . text_string .
 		 sep . text_string . sep . r_dname)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_cert :=
 		(cert_type . sep . num16 . sep . dns_alg . sep . base64)
 		$!_r_data_error %_ret . end_wchar;
 
 	r_data_apl :=
 		(apl_array)
 		$!_r_data_error %_ret . end_wchar;
 
 	r_data_ds :=
 		(num16 . sep . dns_alg . sep . num8 . sep . hex_array)
 		$!_r_data_error %_ret . end_wchar;
 
 	r_data_sshfp :=
 		(num8 . sep . num8 . sep . hex_array)
 		$!_r_data_error %_ret . end_wchar;
 
 	r_data_ipseckey :=
 		(num8 . sep . gateway)
 		$!_r_data_error %_ret . end_wchar;
 
 	r_data_rrsig :=
 		(type_num . sep . dns_alg . sep . num8 . sep . num32 . sep .
 		 timestamp . sep . timestamp . sep . num16 . sep . r_dname .
 		 sep . base64)
 		$!_r_data_error %_ret . end_wchar;
 
 	r_data_nsec :=
 		(r_dname . bitmap)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_dnskey :=
 		(num16 . sep . num8 . sep . dns_alg . sep . base64)
 		$!_r_data_error %_ret . end_wchar;
 
 	r_data_dhcid :=
 		(base64)
 		$!_r_data_error %_ret . end_wchar;
 
 	r_data_nsec3 :=
 		(num8 . sep . num8 . sep . num16 . sep . salt . sep .
 		 hash . bitmap)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_nsec3param :=
 		(num8 . sep . num8 . sep . num16 . sep . salt)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_tlsa :=
 		(num8 . sep . num8 . sep . num8 . sep . hex_array)
 		$!_r_data_error %_ret . end_wchar;
 
 	r_data_csync :=
 		(num32 . sep . num16 . bitmap)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_zonemd :=
 		(num32 . sep . num8 . sep . num8 . sep . hex_array)
 		$!_r_data_error %_ret . end_wchar;
 
 	r_data_l32 :=
 		(num16 . sep . l32)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_l64 :=
 		(num16 . sep . l64)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_eui48 :=
 		(eui48)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_eui64 :=
 		(eui64)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_uri :=
 		(num16 . sep . num16 . sep . text)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_caa :=
 		(num8 . sep . text_string . sep . text)
 		$!_r_data_error %_ret . all_wchar;
 
 	r_data_svcb :=
 		(num16 . sep . r_dname . svcb_params)
 		$!_r_data_error %_ret . all_wchar;
 
 	action _text_r_data {
 		fhold;
 		switch (s->r_type) {
 		case KNOT_RRTYPE_A:
 			fcall r_data_a;
 		case KNOT_RRTYPE_NS:
 		case KNOT_RRTYPE_CNAME:
 		case KNOT_RRTYPE_PTR:
 		case KNOT_RRTYPE_DNAME:
 			fcall r_data_ns;
 		case KNOT_RRTYPE_SOA:
 			fcall r_data_soa;
 		case KNOT_RRTYPE_HINFO:
 			fcall r_data_hinfo;
 		case KNOT_RRTYPE_MINFO:
 		case KNOT_RRTYPE_RP:
 			fcall r_data_minfo;
 		case KNOT_RRTYPE_MX:
 		case KNOT_RRTYPE_AFSDB:
 		case KNOT_RRTYPE_RT:
 		case KNOT_RRTYPE_KX:
 		case KNOT_RRTYPE_LP:
 			fcall r_data_mx;
 		case KNOT_RRTYPE_TXT:
 		case KNOT_RRTYPE_SPF:
 			fcall r_data_txt;
 		case KNOT_RRTYPE_AAAA:
 			fcall r_data_aaaa;
 		case KNOT_RRTYPE_LOC:
 			fcall r_data_loc;
 		case KNOT_RRTYPE_SRV:
 			fcall r_data_srv;
 		case KNOT_RRTYPE_NAPTR:
 			fcall r_data_naptr;
 		case KNOT_RRTYPE_CERT:
 			fcall r_data_cert;
 		case KNOT_RRTYPE_APL:
 			fcall r_data_apl;
 		case KNOT_RRTYPE_DS:
 		case KNOT_RRTYPE_CDS:
 			fcall r_data_ds;
 		case KNOT_RRTYPE_SSHFP:
 			fcall r_data_sshfp;
 		case KNOT_RRTYPE_IPSECKEY:
 			fcall r_data_ipseckey;
 		case KNOT_RRTYPE_RRSIG:
 			fcall r_data_rrsig;
 		case KNOT_RRTYPE_NSEC:
 			fcall r_data_nsec;
 		case KNOT_RRTYPE_KEY:
 		case KNOT_RRTYPE_DNSKEY:
 		case KNOT_RRTYPE_CDNSKEY:
 			fcall r_data_dnskey;
 		case KNOT_RRTYPE_DHCID:
 		case KNOT_RRTYPE_OPENPGPKEY:
 			fcall r_data_dhcid;
 		case KNOT_RRTYPE_NSEC3:
 			fcall r_data_nsec3;
 		case KNOT_RRTYPE_NSEC3PARAM:
 			fcall r_data_nsec3param;
 		case KNOT_RRTYPE_TLSA:
 		case KNOT_RRTYPE_SMIMEA:
 			fcall r_data_tlsa;
 		case KNOT_RRTYPE_CSYNC:
 			fcall r_data_csync;
 		case KNOT_RRTYPE_ZONEMD:
 			fcall r_data_zonemd;
 		case KNOT_RRTYPE_NID:
 		case KNOT_RRTYPE_L64:
 			fcall r_data_l64;
 		case KNOT_RRTYPE_L32:
 			fcall r_data_l32;
 		case KNOT_RRTYPE_EUI48:
 			fcall r_data_eui48;
 		case KNOT_RRTYPE_EUI64:
 			fcall r_data_eui64;
 		case KNOT_RRTYPE_URI:
 			fcall r_data_uri;
 		case KNOT_RRTYPE_CAA:
 			fcall r_data_caa;
 		case KNOT_RRTYPE_SVCB:
 		case KNOT_RRTYPE_HTTPS:
 			fcall r_data_svcb;
 		default:
 			WARN(ZS_CANNOT_TEXT_DATA);
 			fgoto err_line;
 		}
 	}
 	action _hex_r_data {
 		switch (s->r_type) {
 		// Next types must not have empty rdata.
 		case KNOT_RRTYPE_A:
 		case KNOT_RRTYPE_NS:
 		case KNOT_RRTYPE_CNAME:
 		case KNOT_RRTYPE_PTR:
 		case KNOT_RRTYPE_DNAME:
 		case KNOT_RRTYPE_SOA:
 		case KNOT_RRTYPE_HINFO:
 		case KNOT_RRTYPE_MINFO:
 		case KNOT_RRTYPE_MX:
 		case KNOT_RRTYPE_AFSDB:
 		case KNOT_RRTYPE_RT:
 		case KNOT_RRTYPE_KX:
 		case KNOT_RRTYPE_TXT:
 		case KNOT_RRTYPE_SPF:
 		case KNOT_RRTYPE_RP:
 		case KNOT_RRTYPE_AAAA:
 		case KNOT_RRTYPE_LOC:
 		case KNOT_RRTYPE_SRV:
 		case KNOT_RRTYPE_NAPTR:
 		case KNOT_RRTYPE_CERT:
 		case KNOT_RRTYPE_DS:
 		case KNOT_RRTYPE_SSHFP:
 		case KNOT_RRTYPE_IPSECKEY:
 		case KNOT_RRTYPE_RRSIG:
 		case KNOT_RRTYPE_NSEC:
 		case KNOT_RRTYPE_KEY:
 		case KNOT_RRTYPE_DNSKEY:
 		case KNOT_RRTYPE_DHCID:
 		case KNOT_RRTYPE_NSEC3:
 		case KNOT_RRTYPE_NSEC3PARAM:
 		case KNOT_RRTYPE_TLSA:
 		case KNOT_RRTYPE_SMIMEA:
 		case KNOT_RRTYPE_CDS:
 		case KNOT_RRTYPE_CDNSKEY:
 		case KNOT_RRTYPE_OPENPGPKEY:
 		case KNOT_RRTYPE_CSYNC:
 		case KNOT_RRTYPE_ZONEMD:
 		case KNOT_RRTYPE_NID:
 		case KNOT_RRTYPE_L32:
 		case KNOT_RRTYPE_L64:
 		case KNOT_RRTYPE_LP:
 		case KNOT_RRTYPE_EUI48:
 		case KNOT_RRTYPE_EUI64:
 		case KNOT_RRTYPE_URI:
 		case KNOT_RRTYPE_CAA:
 		case KNOT_RRTYPE_SVCB:
 		case KNOT_RRTYPE_HTTPS:
 			fcall nonempty_hex_r_data;
 		// Next types can have empty rdata.
 		case KNOT_RRTYPE_APL:
 		default:
 			fcall hex_r_data;
 		}
 	}
 
 	# Avoidance of multiple fhold at the input block end.
 	action _wrap_in {
 		if (pe - p == 1) {
 			*wrap = WRAP_DETECTED;
 		}
 	}
 	action _wrap_out {
 		if (*wrap == WRAP_NONE) {
 			fhold;
 		}
 	}
 
 	# rdata can be in text or hex format with leading "\#" string.
 	r_data =
 		( sep  . ^('\\' | all_wchar)              $_text_r_data
 		| sep  . '\\' $_wrap_in . ^'#' $_wrap_out $_text_r_data
 		| sep  . '\\'           .  '#'            $_hex_r_data   # Hex format.
 		| sep? . end_wchar                        $_text_r_data  # Empty rdata.
 		) >_r_data_init $!_r_data_error;
 	# END
 
 	# BEGIN - Record type processing
 	action _r_type_error {
 		WARN(ZS_UNSUPPORTED_TYPE);
 		fhold; fgoto err_line;
 	}
 
 	r_type =
 		( "A"i          %{ s->r_type = KNOT_RRTYPE_A; }
 		| "NS"i         %{ s->r_type = KNOT_RRTYPE_NS; }
 		| "CNAME"i      %{ s->r_type = KNOT_RRTYPE_CNAME; }
 		| "SOA"i        %{ s->r_type = KNOT_RRTYPE_SOA; }
 		| "PTR"i        %{ s->r_type = KNOT_RRTYPE_PTR; }
 		| "HINFO"i      %{ s->r_type = KNOT_RRTYPE_HINFO; }
 		| "MINFO"i      %{ s->r_type = KNOT_RRTYPE_MINFO; }
 		| "MX"i         %{ s->r_type = KNOT_RRTYPE_MX; }
 		| "TXT"i        %{ s->r_type = KNOT_RRTYPE_TXT; }
 		| "RP"i         %{ s->r_type = KNOT_RRTYPE_RP; }
 		| "AFSDB"i      %{ s->r_type = KNOT_RRTYPE_AFSDB; }
 		| "RT"i         %{ s->r_type = KNOT_RRTYPE_RT; }
 		| "KEY"i        %{ s->r_type = KNOT_RRTYPE_KEY; }
 		| "AAAA"i       %{ s->r_type = KNOT_RRTYPE_AAAA; }
 		| "LOC"i        %{ s->r_type = KNOT_RRTYPE_LOC; }
 		| "SRV"i        %{ s->r_type = KNOT_RRTYPE_SRV; }
 		| "NAPTR"i      %{ s->r_type = KNOT_RRTYPE_NAPTR; }
 		| "KX"i         %{ s->r_type = KNOT_RRTYPE_KX; }
 		| "CERT"i       %{ s->r_type = KNOT_RRTYPE_CERT; }
 		| "DNAME"i      %{ s->r_type = KNOT_RRTYPE_DNAME; }
 		| "APL"i        %{ s->r_type = KNOT_RRTYPE_APL; }
 		| "DS"i         %{ s->r_type = KNOT_RRTYPE_DS; }
 		| "SSHFP"i      %{ s->r_type = KNOT_RRTYPE_SSHFP; }
 		| "IPSECKEY"i   %{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
 		| "RRSIG"i      %{ s->r_type = KNOT_RRTYPE_RRSIG; }
 		| "NSEC"i       %{ s->r_type = KNOT_RRTYPE_NSEC; }
 		| "DNSKEY"i     %{ s->r_type = KNOT_RRTYPE_DNSKEY; }
 		| "DHCID"i      %{ s->r_type = KNOT_RRTYPE_DHCID; }
 		| "NSEC3"i      %{ s->r_type = KNOT_RRTYPE_NSEC3; }
 		| "NSEC3PARAM"i %{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
 		| "TLSA"i       %{ s->r_type = KNOT_RRTYPE_TLSA; }
 		| "SMIMEA"i     %{ s->r_type = KNOT_RRTYPE_SMIMEA; }
 		| "CDS"i        %{ s->r_type = KNOT_RRTYPE_CDS; }
 		| "CDNSKEY"i    %{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
 		| "OPENPGPKEY"i %{ s->r_type = KNOT_RRTYPE_OPENPGPKEY; }
 		| "CSYNC"i      %{ s->r_type = KNOT_RRTYPE_CSYNC; }
 		| "ZONEMD"i     %{ s->r_type = KNOT_RRTYPE_ZONEMD; }
 		| "SPF"i        %{ s->r_type = KNOT_RRTYPE_SPF; }
 		| "NID"i        %{ s->r_type = KNOT_RRTYPE_NID; }
 		| "L32"i        %{ s->r_type = KNOT_RRTYPE_L32; }
 		| "L64"i        %{ s->r_type = KNOT_RRTYPE_L64; }
 		| "LP"i         %{ s->r_type = KNOT_RRTYPE_LP; }
 		| "EUI48"i      %{ s->r_type = KNOT_RRTYPE_EUI48; }
 		| "EUI64"i      %{ s->r_type = KNOT_RRTYPE_EUI64; }
 		| "URI"i        %{ s->r_type = KNOT_RRTYPE_URI; }
 		| "CAA"i        %{ s->r_type = KNOT_RRTYPE_CAA; }
 		| "SVCB"i       %{ s->r_type = KNOT_RRTYPE_SVCB; }
 		| "HTTPS"i      %{ s->r_type = KNOT_RRTYPE_HTTPS; }
 		| "TYPE"i      . type_number
 		) $!_r_type_error;
 	# END
 
 	# BEGIN - The highest level processing
 	action _record_exit {
 		if (rdata_tail - s->r_data > UINT16_MAX) {
 			WARN(ZS_RDATA_OVERFLOW);
 			fhold; fgoto err_line;
 		}
 		s->r_data_length = rdata_tail - s->r_data;
 
 		s->state = ZS_STATE_DATA;
 
 		// Execute the record callback.
 		if (s->process.automatic) {
 			if (s->process.record != NULL) {
 				s->process.record(s);
 
 				// Stop if required from the callback.
 				if (s->state == ZS_STATE_STOP) {
 					fbreak;
 				}
 			}
 		} else {
 			// Return if external processing.
 			fhold; fbreak;
 		}
 	}
 
 	# Resource record.
 	record =
 		r_owner . sep .
 		( (r_class . sep . ((r_ttl   . sep) | (zlen %_default_r_ttl_exit  )))
 		| (r_ttl   . sep . ((r_class . sep) | (zlen %_default_r_class_exit)))
 		| zlen %_default_r_class_exit %_default_r_ttl_exit
 		) $!_r_type_error .
 		r_type . r_data .
 		rest %_record_exit .
 		newline;
 
 	# Blank spaces with comments.
 	blank = rest . newline;
 
 	# Main processing loop.
 	main := (record | directive | blank)*;
 	# END
 }%%
