commit 40c374be9af667f4c284c038ec2a83489b29fb57
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Sat Jan 27 07:30:51 2018 -0500

    Eliminate Use-of-uninitialized-value in ParseGeometry()
    Credit OSS Fuzz

diff --git a/MagickCore/geometry.c b/MagickCore/geometry.c
index 686ccb6df..138fe702c 100644
--- a/MagickCore/geometry.c
+++ b/MagickCore/geometry.c
@@ -757,442 +757,442 @@ MagickExport MagickStatusType ParseAffineGeometry(const char *geometry,
   GetAffineMatrix(affine_matrix);
   flags=NoValue;
   p=(char *) geometry;
   for (i=0; (*p != '\0') && (i < 6); i++)
   {
     GetNextToken(p,&p,MagickPathExtent,token);
     if (*token == ',')
       GetNextToken(p,&p,MagickPathExtent,token);
     switch (i)
     {
       case 0:
       {
         affine_matrix->sx=StringToDouble(token,(char **) NULL);
         break;
       }
       case 1:
       {
         affine_matrix->rx=StringToDouble(token,(char **) NULL);
         break;
       }
       case 2:
       {
         affine_matrix->ry=StringToDouble(token,(char **) NULL);
         break;
       }
       case 3:
       {
         affine_matrix->sy=StringToDouble(token,(char **) NULL);
         break;
       }
       case 4:
       {
         affine_matrix->tx=StringToDouble(token,(char **) NULL);
         flags|=XValue;
         break;
       }
       case 5:
       {
         affine_matrix->ty=StringToDouble(token,(char **) NULL);
         flags|=YValue;
         break;
       }
     }
   }
   determinant=(affine_matrix->sx*affine_matrix->sy-affine_matrix->rx*
     affine_matrix->ry);
   if (fabs(determinant) < MagickEpsilon)
     (void) ThrowMagickException(exception,GetMagickModule(),OptionError,
       "InvalidArgument","'%s' : 'Indeterminate Matrix'",geometry);
   return(flags);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   P a r s e G e o m e t r y                                                 %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ParseGeometry() parses a geometry specification and returns the sigma,
 %  rho, xi, and psi values.  It also returns flags that indicates which
 %  of the four values (sigma, rho, xi, psi) were located in the string, and
 %  whether the xi or pi values are negative.
 %
 %  In addition, it reports if there are any of meta characters (%, !, <, >, @,
 %  and ^) flags present. It does not report the location of the percentage
 %  relative to the values.
 %
 %  Values may also be separated by commas, colons, or slashes, and offsets.
 %  Offsets may be prefixed by multiple signs to make offset string
 %  substitutions easier to handle from shell scripts.
 %  For example: "-10-10", "-+10-+10", or "+-10+-10" will generate negtive
 %  offsets, while "+10+10", "++10++10", or "--10--10" will generate positive
 %  offsets.
 %
 %  The format of the ParseGeometry method is:
 %
 %      MagickStatusType ParseGeometry(const char *geometry,
 %        GeometryInfo *geometry_info)
 %
 %  A description of each parameter follows:
 %
 %    o geometry:  The geometry string (e.g. "100x100+10+10").
 %
 %    o geometry_info:  returns the parsed width/height/x/y in this structure.
 %
 */
 MagickExport MagickStatusType ParseGeometry(const char *geometry,
   GeometryInfo *geometry_info)
 {
   char
     *p,
     pedantic_geometry[MagickPathExtent],
     *q;
 
   double
     value;
 
   GeometryInfo
     coordinate;
 
   int
     c;
 
   MagickStatusType
     flags;
 
   /*
     Remove whitespaces meta characters from geometry specification.
   */
   assert(geometry_info != (GeometryInfo *) NULL);
   (void) ResetMagickMemory(geometry_info,0,sizeof(geometry_info));
   flags=NoValue;
   if ((geometry == (char *) NULL) || (*geometry == '\0'))
     return(flags);
   if (strlen(geometry) >= (MagickPathExtent-1))
     return(flags);
   c=sscanf(geometry,"%lf%*[ ,]%lf%*[ ,]%lf%*[ ,]%lf",&coordinate.rho,
     &coordinate.sigma,&coordinate.xi,&coordinate.psi);
   if (c == 4)
     {
       /*
         Special case: coordinate (e.g. 0,0 255,255).
       */
       geometry_info->rho=coordinate.rho;
       geometry_info->sigma=coordinate.sigma;
       geometry_info->xi=coordinate.xi;
       geometry_info->psi=coordinate.psi;
       flags|=RhoValue | SigmaValue | XiValue | PsiValue;
       return(flags);
     }
   (void) CopyMagickString(pedantic_geometry,geometry,MagickPathExtent);
   for (p=pedantic_geometry; *p != '\0'; )
   {
     c=(int) ((unsigned char) *p);
     if (isspace(c) != 0)
       {
         (void) CopyMagickString(p,p+1,MagickPathExtent);
         continue;
       }
     switch (c)
     {
       case '%':
       {
         flags|=PercentValue;
         (void) CopyMagickString(p,p+1,MagickPathExtent);
         break;
       }
       case '!':
       {
         flags|=AspectValue;
         (void) CopyMagickString(p,p+1,MagickPathExtent);
         break;
       }
       case '<':
       {
         flags|=LessValue;
         (void) CopyMagickString(p,p+1,MagickPathExtent);
         break;
       }
       case '>':
       {
         flags|=GreaterValue;
         (void) CopyMagickString(p,p+1,MagickPathExtent);
         break;
       }
       case '^':
       {
         flags|=MinimumValue;
         (void) CopyMagickString(p,p+1,MagickPathExtent);
         break;
       }
       case '@':
       {
         flags|=AreaValue;
         (void) CopyMagickString(p,p+1,MagickPathExtent);
         break;
       }
       case '(':
       case ')':
       {
         (void) CopyMagickString(p,p+1,MagickPathExtent);
         break;
       }
       case 'x':
       case 'X':
       {
         flags|=SeparatorValue;
         p++;
         break;
       }
       case '-':
       case '+':
       case ',':
       case '0':
       case '1':
       case '2':
       case '3':
       case '4':
       case '5':
       case '6':
       case '7':
       case '8':
       case '9':
       case '/':
       case 215:
       case 'e':
       case 'E':
       {
         p++;
         break;
       }
       case '.':
       {
         p++;
         flags|=DecimalValue;
         break;
       }
       case ':':
       {
         p++;
         flags|=AspectRatioValue;
         break;
       }
       default:
         return(NoValue);
     }
   }
   /*
     Parse rho, sigma, xi, psi, and optionally chi.
   */
   p=pedantic_geometry;
   if (*p == '\0')
     return(flags);
   q=p;
   value=StringToDouble(p,&q);
   if (LocaleNCompare(p,"0x",2) == 0)
     (void) strtol(p,&q,10);
   c=(int) ((unsigned char) *q);
   if ((c == 215) || (*q == 'x') || (*q == 'X') || (*q == ',') ||
       (*q == '/') || (*q == ':') || (*q =='\0'))
     {
       /*
         Parse rho.
       */
       q=p;
       if (LocaleNCompare(p,"0x",2) == 0)
         value=(double) strtol(p,&p,10);
       else
         value=StringToDouble(p,&p);
       if (p != q)
         {
           flags|=RhoValue;
           geometry_info->rho=value;
         }
     }
   q=p;
   c=(int) ((unsigned char) *p);
   if ((c == 215) || (*p == 'x') || (*p == 'X') || (*p == ',') || (*p == '/') ||
       (*p == ':'))
     {
       /*
         Parse sigma.
       */
       p++;
       while (isspace((int) ((unsigned char) *p)) != 0)
         p++;
       c=(int) ((unsigned char) *q);
       if (((c != 215) && (*q != 'x') && (*q != 'X')) || ((*p != '+') &&
           (*p != '-')))
         {
           q=p;
           value=StringToDouble(p,&p);
           if (p != q)
             {
               flags|=SigmaValue;
               geometry_info->sigma=value;
             }
         }
     }
   while (isspace((int) ((unsigned char) *p)) != 0)
     p++;
   if ((*p == '+') || (*p == '-') || (*p == ',') || (*p == '/') || (*p == ':'))
     {
       /*
         Parse xi value.
       */
       if ((*p == ',') || (*p == '/') || (*p == ':') )
         p++;
       while ((*p == '+') || (*p == '-'))
       {
         if (*p == '-')
           flags^=XiNegative;  /* negate sign */
         p++;
       }
       q=p;
       value=StringToDouble(p,&p);
       if (p != q)
         {
           flags|=XiValue;
           if ((flags & XiNegative) != 0)
             value=(-value);
           geometry_info->xi=value;
         }
       while (isspace((int) ((unsigned char) *p)) != 0)
         p++;
       if ((*p == '+') || (*p == '-') || (*p == ',') || (*p == '/') ||
           (*p == ':'))
         {
           /*
             Parse psi value.
           */
           if ((*p == ',') || (*p == '/') || (*p == ':'))
             p++;
           while ((*p == '+') || (*p == '-'))
           {
             if (*p == '-')
               flags^=PsiNegative;  /* negate sign */
             p++;
           }
           q=p;
           value=StringToDouble(p,&p);
           if (p != q)
             {
               flags|=PsiValue;
               if ((flags & PsiNegative) != 0)
                 value=(-value);
               geometry_info->psi=value;
             }
       }
       while (isspace((int) ((unsigned char) *p)) != 0)
         p++;
       if ((*p == '+') || (*p == '-') || (*p == ',') || (*p == '/') ||
           (*p == ':'))
         {
           /*
             Parse chi value.
           */
           if ((*p == ',') || (*p == '/') || (*p == ':'))
             p++;
           while ((*p == '+') || (*p == '-'))
           {
             if (*p == '-')
               flags^=ChiNegative;  /* negate sign */
             p++;
           }
           q=p;
           value=StringToDouble(p,&p);
           if (p != q)
             {
               flags|=ChiValue;
               if ((flags & ChiNegative) != 0)
                 value=(-value);
               geometry_info->chi=value;
             }
         }
     }
   if (strchr(pedantic_geometry,':') != (char *) NULL)
     {
       /*
         Normalize sampling factor (e.g. 4:2:2 => 2x1).
       */
       if ((flags & SigmaValue) != 0)
         geometry_info->rho*=PerceptibleReciprocal(geometry_info->sigma);
       geometry_info->sigma=1.0;
-      if (geometry_info->xi == 0.0)
+      if (((flags & XiNegative) != 0) && (geometry_info->xi == 0.0))
         geometry_info->sigma=2.0;
     }
   if (((flags & SigmaValue) == 0) && ((flags & XiValue) != 0) &&
       ((flags & PsiValue) == 0))
     {
       /*
         Support negative height values (e.g. 30x-20).
       */
       geometry_info->sigma=geometry_info->xi;
       geometry_info->xi=0.0;
       flags|=SigmaValue;
       flags&=(~XiValue);
     }
   if ((flags & PercentValue) != 0)
     {
       if (((flags & SeparatorValue) == 0) && ((flags & SigmaValue) == 0))
         geometry_info->sigma=geometry_info->rho;
       if (((flags & SeparatorValue) != 0) && ((flags & RhoValue) == 0))
         geometry_info->rho=geometry_info->sigma;
     }
 #if 0
   /* Debugging Geometry */
   (void) fprintf(stderr,"ParseGeometry...\n");
   (void) fprintf(stderr,"Flags: %c %c %s %s %s\n",
     (flags & RhoValue) ? 'W' : ' ',(flags & SigmaValue) ? 'H' : ' ',
     (flags & XiValue) ? ((flags & XiNegative) ? "-X" : "+X") : "  ",
     (flags & PsiValue) ? ((flags & PsiNegative) ? "-Y" : "+Y") : "  ",
     (flags & ChiValue) ? ((flags & ChiNegative) ? "-Z" : "+Z") : "  ");
   (void) fprintf(stderr,"Geometry: %lg,%lg,%lg,%lg,%lg\n",geometry_info->rho,
     geometry_info->sigma,geometry_info->xi,geometry_info->psi,
     geometry_info->chi);
 #endif
   return(flags);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   P a r s e G r a v i t y G e o m e t r y                                   %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ParseGravityGeometry() returns a region as defined by the geometry string
 %  with respect to the given image page (canvas) dimensions and the images
 %  gravity setting.
 %
 %  This is typically used for specifing a area within a given image for
 %  cropping images to a smaller size, chopping out rows and or columns, or
 %  resizing and positioning overlay images.
 %
 %  Percentages are relative to image size and not page size, and are set to
 %  nearest integer (pixel) size.
 %
 %  The format of the ParseGravityGeometry method is:
 %
 %      MagickStatusType ParseGravityGeometry(Image *image,const char *geometry,
 %        RectangeInfo *region_info,ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o geometry:  The geometry string (e.g. "100x100+10+10").
 %
 %    o region_info: the region as defined by the geometry string with respect
 %      to the image dimensions and its gravity.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
