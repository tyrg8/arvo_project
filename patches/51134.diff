commit 4631c530b0afbd57ef34ffa6260899ffa6d91eb4
Author: Caol√°n McNamara <caolanm@redhat.com>
Date:   Thu Sep 8 17:26:15 2022 +0100

    ofz#51134 check offset

diff --git a/src/hunspell/affentry.cxx b/src/hunspell/affentry.cxx
index 14c4ba7..b23015b 100644
--- a/src/hunspell/affentry.cxx
+++ b/src/hunspell/affentry.cxx
@@ -125,88 +125,88 @@ inline char* PfxEntry::nextchar(char* p) {
 inline int PfxEntry::test_condition(const std::string& s) {
   size_t st = 0;
   size_t pos = std::string::npos;  // group with pos input position
   bool neg = false;        // complementer
   bool ingroup = false;    // character in the group
   if (numconds == 0)
     return 1;
   char* p = c.conds;
   while (1) {
     switch (*p) {
       case '\0':
         return 1;
       case '[': {
         neg = false;
         ingroup = false;
         p = nextchar(p);
         pos = st;
         break;
       }
       case '^': {
         p = nextchar(p);
         neg = true;
         break;
       }
       case ']': {
         if (bool(neg) == bool(ingroup))
           return 0;
         pos = std::string::npos;
         p = nextchar(p);
         // skip the next character
         if (!ingroup && st < s.size()) {
           ++st;
           while ((opts & aeUTF8) && st < s.size() && (s[st] & 0xc0) == 0x80)
             ++st;
         }
         if (st == s.size() && p)
           return 0;  // word <= condition
         break;
       }
       case '.':
         if (pos == std::string::npos) {  // dots are not metacharacters in groups: [.]
           p = nextchar(p);
           // skip the next character
           ++st;
           while ((opts & aeUTF8) && st < s.size() && (s[st] & 0xc0) == 0x80)
             ++st;
           if (st == s.size() && p)
             return 0;  // word <= condition
           break;
         }
       /* FALLTHROUGH */
       default: {
-        if (s[st] == *p) {
+        if (st < s.size() && s[st] == *p) {
           ++st;
           p = nextchar(p);
           if ((opts & aeUTF8) && (s[st - 1] & 0x80)) {  // multibyte
             while (p && (*p & 0xc0) == 0x80) {          // character
               if (*p != s[st]) {
                 if (pos == std::string::npos)
                   return 0;
                 st = pos;
                 break;
               }
               p = nextchar(p);
               ++st;
             }
             if (pos != std::string::npos && st != pos) {
               ingroup = true;
               while (p && *p != ']' && ((p = nextchar(p)) != NULL)) {
               }
             }
           } else if (pos != std::string::npos) {
             ingroup = true;
             while (p && *p != ']' && ((p = nextchar(p)) != NULL)) {
             }
           }
         } else if (pos != std::string::npos) {  // group
           p = nextchar(p);
         } else
           return 0;
       }
     }
     if (!p)
       return 1;
   }
 }
 
 // check if this prefix entry matches
