commit 766910e8b261d62b8fac58c0387e67b86a8a0b3b
Merge: 6002720c b56e8b28
Author: DRC <information@libjpeg-turbo.org>
Date:   Wed Nov 16 01:03:15 2022 -0600

    Merge branch 'ijg.lossless' into dev
    Fix segfault when decomp lossless JPEG w/ restarts
    
    The predict_process_restart() method in jpeg_lossless_decompressor was
    unset, because we now use the start_pass() method in jpeg_inverse_dct
    instead.  Thus, a segfault occurred when attempting to decompress a
    lossless JPEG that contained restart markers.

diff --git a/CMakeLists.txt b/CMakeLists.txt
index e5f5a184..11337a16 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -878,605 +878,606 @@ endif()
 foreach(libtype ${TEST_LIBTYPES})
   if(libtype STREQUAL "static")
     set(suffix -static)
   endif()
   if(WITH_TURBOJPEG)
     add_test(tjunittest-${libtype}
       ${CMAKE_CROSSCOMPILING_EMULATOR} tjunittest${suffix})
     add_test(tjunittest-${libtype}-alloc
       ${CMAKE_CROSSCOMPILING_EMULATOR} tjunittest${suffix} -alloc)
     add_test(tjunittest-${libtype}-yuv
       ${CMAKE_CROSSCOMPILING_EMULATOR} tjunittest${suffix} -yuv)
     add_test(tjunittest-${libtype}-yuv-alloc
       ${CMAKE_CROSSCOMPILING_EMULATOR} tjunittest${suffix} -yuv -alloc)
     add_test(tjunittest-${libtype}-yuv-nopad
       ${CMAKE_CROSSCOMPILING_EMULATOR} tjunittest${suffix} -yuv -noyuvpad)
     add_test(tjunittest-${libtype}-bmp
       ${CMAKE_CROSSCOMPILING_EMULATOR} tjunittest${suffix} -bmp)
 
     set(MD5_PPM_GRAY_TILE 89d3ca21213d9d864b50b4e4e7de4ca6)
     set(MD5_PPM_420_8x8_TILE 847fceab15c5b7b911cb986cf0f71de3)
     set(MD5_PPM_420_16x16_TILE ca45552a93687e078f7137cc4126a7b0)
     set(MD5_PPM_420_32x32_TILE d8676f1d6b68df358353bba9844f4a00)
     set(MD5_PPM_420_64x64_TILE 4e4c1a3d7ea4bace4f868bcbe83b7050)
     set(MD5_PPM_420_128x128_TILE f24c3429c52265832beab9df72a0ceae)
     set(MD5_PPM_420M_8x8_TILE bc25320e1f4c31ce2e610e43e9fd173c)
     set(MD5_PPM_420M_TILE 75ffdf14602258c5c189522af57fa605)
     set(MD5_PPM_422_8x8_TILE d83dacd9fc73b0a6f10c09acad64eb1e)
     set(MD5_PPM_422_16x16_TILE 35077fb610d72dd743b1eb0cbcfe10fb)
     set(MD5_PPM_422_32x32_TILE e6902ed8a449ecc0f0d6f2bf945f65f7)
     set(MD5_PPM_422_64x64_TILE 2b4502a8f316cedbde1da7bce3d2231e)
     set(MD5_PPM_422_128x128_TILE f0b5617d578f5e13c8eee215d64d4877)
     set(MD5_PPM_422M_8x8_TILE 828941d7f41cd6283abd6beffb7fd51d)
     set(MD5_PPM_422M_TILE e877ae1324c4a280b95376f7f018172f)
     set(MD5_PPM_444_TILE 7964e41e67cfb8d0a587c0aa4798f9c3)
 
     # Test compressing from/decompressing to an arbitrary subregion of a larger
     # image buffer
     add_test(tjbench-${libtype}-tile-cp
       ${CMAKE_COMMAND} -E copy_if_different ${TESTIMAGES}/testorig.ppm
         testout_tile.ppm)
     add_test(tjbench-${libtype}-tile
       ${CMAKE_CROSSCOMPILING_EMULATOR} tjbench${suffix} testout_tile.ppm 95
         -rgb -quiet -tile -benchtime 0.01 -warmup 0)
     set_tests_properties(tjbench-${libtype}-tile
       PROPERTIES DEPENDS tjbench-${libtype}-tile-cp)
 
     foreach(tile 8 16 32 64 128)
       add_test(tjbench-${libtype}-tile-gray-${tile}x${tile}-cmp
         ${CMAKE_CROSSCOMPILING_EMULATOR} ${MD5CMP} ${MD5_PPM_GRAY_TILE}
           testout_tile_GRAY_Q95_${tile}x${tile}.ppm)
       foreach(subsamp 420 422)
         add_test(tjbench-${libtype}-tile-${subsamp}-${tile}x${tile}-cmp
           ${CMAKE_CROSSCOMPILING_EMULATOR} ${MD5CMP}
             ${MD5_PPM_${subsamp}_${tile}x${tile}_TILE}
             testout_tile_${subsamp}_Q95_${tile}x${tile}.ppm)
       endforeach()
       add_test(tjbench-${libtype}-tile-444-${tile}x${tile}-cmp
         ${CMAKE_CROSSCOMPILING_EMULATOR} ${MD5CMP} ${MD5_PPM_444_TILE}
           testout_tile_444_Q95_${tile}x${tile}.ppm)
       foreach(subsamp gray 420 422 444)
         set_tests_properties(tjbench-${libtype}-tile-${subsamp}-${tile}x${tile}-cmp
           PROPERTIES DEPENDS tjbench-${libtype}-tile)
       endforeach()
     endforeach()
 
     add_test(tjbench-${libtype}-tilem-cp
       ${CMAKE_COMMAND} -E copy_if_different ${TESTIMAGES}/testorig.ppm
         testout_tilem.ppm)
     add_test(tjbench-${libtype}-tilem
       ${CMAKE_CROSSCOMPILING_EMULATOR} tjbench${suffix} testout_tilem.ppm 95
         -rgb -fastupsample -quiet -tile -benchtime 0.01 -warmup 0)
     set_tests_properties(tjbench-${libtype}-tilem
       PROPERTIES DEPENDS tjbench-${libtype}-tilem-cp)
 
     add_test(tjbench-${libtype}-tile-420m-8x8-cmp
       ${CMAKE_CROSSCOMPILING_EMULATOR} ${MD5CMP} ${MD5_PPM_420M_8x8_TILE}
         testout_tilem_420_Q95_8x8.ppm)
     add_test(tjbench-${libtype}-tile-422m-8x8-cmp
       ${CMAKE_CROSSCOMPILING_EMULATOR} ${MD5CMP} ${MD5_PPM_422M_8x8_TILE}
         testout_tilem_422_Q95_8x8.ppm)
     foreach(tile 16 32 64 128)
       foreach(subsamp 420 422)
         add_test(tjbench-${libtype}-tile-${subsamp}m-${tile}x${tile}-cmp
           ${CMAKE_CROSSCOMPILING_EMULATOR} ${MD5CMP}
             ${MD5_PPM_${subsamp}M_TILE}
             testout_tilem_${subsamp}_Q95_${tile}x${tile}.ppm)
       endforeach()
     endforeach()
     foreach(tile 8 16 32 64 128)
       foreach(subsamp 420 422)
         set_tests_properties(tjbench-${libtype}-tile-${subsamp}m-${tile}x${tile}-cmp
           PROPERTIES DEPENDS tjbench-${libtype}-tilem)
       endforeach()
     endforeach()
   endif()
 
   # These tests are carefully crafted to provide full coverage of as many of
   # the underlying algorithms as possible (including all of the
   # SIMD-accelerated ones.)
 
   macro(add_bittest PROG NAME ARGS OUTFILE INFILE MD5SUM)
     if(${PROG} STREQUAL "cjpeg12")
       set(ACTUAL_ARGS "${ARGS};-precision;12")
     else()
       set(ACTUAL_ARGS ${ARGS})
     endif()
     string(REGEX REPLACE "12" "" ACTUAL_PROG ${PROG})
     add_test(${PROG}-${libtype}-${NAME}
       ${CMAKE_CROSSCOMPILING_EMULATOR} ${ACTUAL_PROG}${suffix} ${ACTUAL_ARGS}
         -outfile ${OUTFILE} ${INFILE})
     add_test(${PROG}-${libtype}-${NAME}-cmp
       ${CMAKE_CROSSCOMPILING_EMULATOR} ${MD5CMP} ${MD5SUM} ${OUTFILE})
     set_tests_properties(${PROG}-${libtype}-${NAME}-cmp PROPERTIES
       DEPENDS ${PROG}-${libtype}-${NAME})
     if(${ARGC} GREATER 6)
       set(DEPENDS ${ARGN})
       set_tests_properties(${PROG}-${libtype}-${NAME} PROPERTIES
         DEPENDS ${DEPENDS})
     endif()
   endmacro()
 
   foreach(sample_bits 8 12)
 
     if(sample_bits EQUAL 12)
       set(cjpeg cjpeg12)
       set(djpeg djpeg12)
       set(jpegtran jpegtran12)
       set(testout testout12)
 
       set(TESTORIG testorig12.jpg)
       set(MD5_JPEG_RGB_ISLOW 9d7369207c520d37f2c1cbfcb82b2964)
       set(MD5_JPEG_RGB_ISLOW2 a00bd20d8ae49684640ef7177d2e0b64)
       set(MD5_PPM_RGB_ISLOW f3301d2219783b8b3d942b7239fa50c0)
       set(MD5_JPEG_422_IFAST_OPT 7322e3bd2f127f7de4b40d4480ce60e4)
       set(MD5_PPM_422_IFAST 79807fa552899e66a04708f533e16950)
       set(MD5_JPEG_440_ISLOW e25c1912e38367be505a89c410c1c2d2)
       set(MD5_PPM_440_ISLOW e7d2e26288870cfcb30f3114ad01e380)
       set(MD5_PPM_422M_IFAST 07737bfe8a7c1c87aaa393a0098d16b0)
       set(MD5_JPEG_420_IFAST_Q100_PROG 9447cef4803d9b0f74bcf333cc710a29)
       set(MD5_PPM_420_Q100_IFAST 1b3730122709f53d007255e8dfd3305e)
       set(MD5_PPM_420M_Q100_IFAST 980a1a3c5bf9510022869d30b7d26566)
       set(MD5_JPEG_GRAY_ISLOW 235c90707b16e2e069f37c888b2636d9)
       set(MD5_PPM_GRAY_ISLOW 7213c10af507ad467da5578ca5ee1fca)
       set(MD5_PPM_GRAY_ISLOW_RGB e96ee81c30a6ed422d466338bd3de65d)
       set(MD5_JPEG_420S_IFAST_OPT 7af8e60be4d9c227ec63ac9b6630855e)
 
       set(MD5_JPEG_3x2_FLOAT_PROG_SSE a8c17daf77b457725ec929e215b603f8)
       set(MD5_PPM_3x2_FLOAT_SSE 42876ab9e5c2f76a87d08db5fbd57956)
       set(MD5_JPEG_3x2_FLOAT_PROG_NO_FP_CONTRACT
         a8c17daf77b457725ec929e215b603f8)
       set(MD5_PPM_3x2_FLOAT_NO_FP_CONTRACT ${MD5_PPM_3x2_FLOAT_SSE})
       set(MD5_JPEG_3x2_FLOAT_PROG_FP_CONTRACT
         ${MD5_JPEG_3x2_FLOAT_PROG_NO_FP_CONTRACT})
       set(MD5_PPM_3x2_FLOAT_FP_CONTRACT ${MD5_PPM_3x2_FLOAT_SSE})
       set(MD5_JPEG_3x2_FLOAT_PROG_387 bc6dbbefac2872f6b9d6c4a0ae60c3c0)
       set(MD5_PPM_3x2_FLOAT_387 bcc5723c61560463ac60f772e742d092)
       set(MD5_JPEG_3x2_FLOAT_PROG_MSVC e27840755870fa849872e58aa0cd1400)
       set(MD5_PPM_3x2_FLOAT_MSVC 6c2880b83bb1aa41dfe330e7a9768690)
 
       set(MD5_JPEG_3x2_IFAST_PROG 1396cc2b7185cfe943d408c9d305339e)
       set(MD5_PPM_3x2_IFAST 3975985ef6eeb0a2cdc58daa651ccc00)
       set(MD5_PPM_420M_ISLOW_2_1 4ca6be2a6f326ff9eaab63e70a8259c0)
       set(MD5_PPM_420M_ISLOW_15_8 12aa9f9534c1b3d7ba047322226365eb)
       set(MD5_PPM_420M_ISLOW_13_8 f7e22817c7b25e1393e4ec101e9d4e96)
       set(MD5_PPM_420M_ISLOW_11_8 800a16f9f4dc9b293197bfe11be10a82)
       set(MD5_PPM_420M_ISLOW_9_8 06b7a92a9bc69f4dc36ec40f1937d55c)
       set(MD5_PPM_420M_ISLOW_7_8 3ec444a14a4ab4eab88ffc49c48eca43)
       set(MD5_PPM_420M_ISLOW_3_4 3e726b7ea872445b19437d1c1d4f0d93)
       set(MD5_PPM_420M_ISLOW_5_8 a8a771abdc94301d20ffac119b2caccd)
       set(MD5_PPM_420M_ISLOW_1_2 b419124dd5568b085787234866102866)
       set(MD5_PPM_420M_ISLOW_3_8 343d19015531b7bbe746124127244fa8)
       set(MD5_PPM_420M_ISLOW_1_4 35fd59d866e44659edfa3c18db2a3edb)
       set(MD5_PPM_420M_ISLOW_1_8 ccaed48ac0aedefda5d4abe4013f4ad7)
-      set(MD5_JPEG_LOSSLESS a153297ef3ae6e51357be06fc5efca2a)
+      set(MD5_JPEG_LOSSLESS 8473501f5bb7c826524472c858bf4fcd)
       set(MD5_PPM_LOSSLESS 1da3fb2620e5a4e258e0fcb891bc67e8)
       set(MD5_PPM_420_ISLOW_SKIP15_31 86664cd9dc956536409e44e244d20a97)
       set(MD5_PPM_420_ISLOW_PROG_CROP62x62_71_71
         452a21656115a163029cfba5c04fa76a)
       set(MD5_PPM_444_ISLOW_SKIP1_6 ef63901f71ef7a75cd78253fc0914f84)
       set(MD5_PPM_444_ISLOW_PROG_CROP98x98_13_13
         15b173fb5872d9575572fbcc1b05956f)
       set(MD5_JPEG_CROP cdb35ff4b4519392690ea040c56ea99c)
 
       set(MD5_JPEG_EXAMPLE_COMPRESS 5e502da0c3c0f957a58c536f31e973dc)
       set(MD5_PPM_EXAMPLE_DECOMPRESS 2ff0e8505ee6e0ffaeb24037d5650b57)
     else()
       set(cjpeg cjpeg)
       set(djpeg djpeg)
       set(jpegtran jpegtran)
       set(testout testout)
 
       set(TESTORIG testorig.jpg)
       set(MD5_JPEG_RGB_ISLOW 1d44a406f61da743b5fd31c0a9abdca3)
       set(MD5_JPEG_RGB_ISLOW2 31d121e57b6c2934c890a7fc7763bcd4)
       set(MD5_PPM_RGB_ISLOW 00a257f5393fef8821f2b88ac7421291)
       set(MD5_BMP_RGB_ISLOW_565 f07d2e75073e4bb10f6c6f4d36e2e3be)
       set(MD5_BMP_RGB_ISLOW_565D 4cfa0928ef3e6bb626d7728c924cfda4)
       set(MD5_JPEG_422_IFAST_OPT 2540287b79d913f91665e660303ab2c8)
       set(MD5_PPM_422_IFAST 35bd6b3f833bad23de82acea847129fa)
       set(MD5_JPEG_440_ISLOW 538bc02bd4b4658fd85de6ece6cbeda6)
       set(MD5_PPM_440_ISLOW 11e7eab7ef7ef3276934bb7e7b6bb377)
       set(MD5_PPM_422M_IFAST 8dbc65323d62cca7c91ba02dd1cfa81d)
       set(MD5_BMP_422M_IFAST_565 3294bd4d9a1f2b3d08ea6020d0db7065)
       set(MD5_BMP_422M_IFAST_565D da98c9c7b6039511be4a79a878a9abc1)
       set(MD5_JPEG_420_IFAST_Q100_PROG 0ba15f9dab81a703505f835f9dbbac6d)
       set(MD5_PPM_420_Q100_IFAST 5a732542015c278ff43635e473a8a294)
       set(MD5_PPM_420M_Q100_IFAST ff692ee9323a3b424894862557c092f1)
       set(MD5_JPEG_GRAY_ISLOW 72b51f894b8f4a10b3ee3066770aa38d)
       set(MD5_PPM_GRAY_ISLOW 8d3596c56eace32f205deccc229aa5ed)
       set(MD5_PPM_GRAY_ISLOW_RGB 116424ac07b79e5e801f00508eab48ec)
       set(MD5_BMP_GRAY_ISLOW_565 12f78118e56a2f48b966f792fedf23cc)
       set(MD5_BMP_GRAY_ISLOW_565D bdbbd616441a24354c98553df5dc82db)
       set(MD5_JPEG_420S_IFAST_OPT 388708217ac46273ca33086b22827ed8)
 
       set(MD5_JPEG_3x2_FLOAT_PROG_SSE 343e3f8caf8af5986ebaf0bdc13b5c71)
       set(MD5_PPM_3x2_FLOAT_SSE 1a75f36e5904d6fc3a85a43da9ad89bb)
       set(MD5_JPEG_3x2_FLOAT_PROG_NO_FP_CONTRACT
         9bca803d2042bd1eb03819e2bf92b3e5)
       set(MD5_PPM_3x2_FLOAT_NO_FP_CONTRACT f6bfab038438ed8f5522fbd33595dcdc)
       set(MD5_JPEG_3x2_FLOAT_PROG_FP_CONTRACT
         ${MD5_JPEG_3x2_FLOAT_PROG_NO_FP_CONTRACT})
       set(MD5_PPM_3x2_FLOAT_FP_CONTRACT 0e917a34193ef976b679a6b069b1be26)
       set(MD5_JPEG_3x2_FLOAT_PROG_387 1657664a410e0822c924b54f6f65e6e9)
       set(MD5_PPM_3x2_FLOAT_387 cb0a1f027f3d2917c902b5640214e025)
       set(MD5_JPEG_3x2_FLOAT_PROG_MSVC 7999ce9cd0ee9b6c7043b7351ab7639d)
       set(MD5_PPM_3x2_FLOAT_MSVC 28cdc448a6b75e97892f0e0f8d4b21f3)
 
       set(MD5_JPEG_3x2_IFAST_PROG 1ee5d2c1a77f2da495f993c8c7cceca5)
       set(MD5_PPM_3x2_IFAST fd283664b3b49127984af0a7f118fccd)
       set(MD5_JPEG_420_ISLOW_ARI e986fb0a637a8d833d96e8a6d6d84ea1)
       set(MD5_JPEG_444_ISLOW_PROGARI 0a8f1c8f66e113c3cf635df0a475a617)
       set(MD5_PPM_420M_IFAST_ARI 57251da28a35b46eecb7177d82d10e0e)
       set(MD5_JPEG_420_ISLOW 9a68f56bc76e466aa7e52f415d0f4a5f)
       set(MD5_PPM_420M_ISLOW_2_1 9f9de8c0612f8d06869b960b05abf9c9)
       set(MD5_PPM_420M_ISLOW_15_8 b6875bc070720b899566cc06459b63b7)
       set(MD5_PPM_420M_ISLOW_13_8 bc3452573c8152f6ae552939ee19f82f)
       set(MD5_PPM_420M_ISLOW_11_8 d8cc73c0aaacd4556569b59437ba00a5)
       set(MD5_PPM_420M_ISLOW_9_8 d25e61bc7eac0002f5b393aa223747b6)
       set(MD5_PPM_420M_ISLOW_7_8 ddb564b7c74a09494016d6cd7502a946)
       set(MD5_PPM_420M_ISLOW_3_4 8ed8e68808c3fbc4ea764fc9d2968646)
       set(MD5_PPM_420M_ISLOW_5_8 a3363274999da2366a024efae6d16c9b)
       set(MD5_PPM_420M_ISLOW_1_2 e692a315cea26b988c8e8b29a5dbcd81)
       set(MD5_PPM_420M_ISLOW_3_8 79eca9175652ced755155c90e785a996)
       set(MD5_PPM_420M_ISLOW_1_4 79cd778f8bf1a117690052cacdd54eca)
       set(MD5_PPM_420M_ISLOW_1_8 391b3d4aca640c8567d6f8745eb2142f)
       set(MD5_BMP_420_ISLOW_256 4980185e3776e89bd931736e1cddeee6)
       set(MD5_BMP_420_ISLOW_565 bf9d13e16c4923b92e1faa604d7922cb)
       set(MD5_BMP_420_ISLOW_565D 6bde71526acc44bcff76f696df8638d2)
       set(MD5_BMP_420M_ISLOW_565 8dc0185245353cfa32ad97027342216f)
       set(MD5_BMP_420M_ISLOW_565D ce034037d212bc403330df6f915c161b)
-      set(MD5_JPEG_LOSSLESS dd21c541d22a87cccabdb48b796d8bcd)
+      set(MD5_JPEG_LOSSLESS fc777b82d42d835ae1282ba1ee87c209)
       set(MD5_PPM_LOSSLESS 64072f1dbdc5b3a187777788604971a5)
       set(MD5_PPM_420_ISLOW_SKIP15_31 c4c65c1e43d7275cd50328a61e6534f0)
       set(MD5_PPM_420_ISLOW_ARI_SKIP16_139 087c6b123db16ac00cb88c5b590bb74a)
       set(MD5_PPM_420_ISLOW_PROG_CROP62x62_71_71
         26eb36ccc7d1f0cb80cdabb0ac8b5d99)
       set(MD5_PPM_420_ISLOW_ARI_CROP53x53_4_4 886c6775af22370257122f8b16207e6d)
       set(MD5_PPM_444_ISLOW_SKIP1_6 5606f86874cf26b8fcee1117a0a436a6)
       set(MD5_PPM_444_ISLOW_PROG_CROP98x98_13_13
         db87dc7ce26bcdc7a6b56239ce2b9d6c)
       set(MD5_PPM_444_ISLOW_ARI_CROP37x37_0_0 cb57b32bd6d03e35432362f7bf184b6d)
       set(MD5_JPEG_CROP b4197f377e621c4e9b1d20471432610d)
 
       set(MD5_JPEG_EXAMPLE_COMPRESS 95d4d72e2ef127332654c2599afb47bf)
       set(MD5_PPM_EXAMPLE_DECOMPRESS 6fdde7301575bfd711e295b969b6b3de)
     endif()
 
     # CC: null  SAMP: fullsize  FDCT: islow  ENT: huff
     add_bittest(${cjpeg} rgb-islow "-rgb;-dct;int;-icc;${TESTIMAGES}/test1.icc"
       ${testout}_rgb_islow.jpg ${TESTIMAGES}/testorig.ppm
       ${MD5_JPEG_RGB_ISLOW})
 
     # CC: null  SAMP: fullsize  IDCT: islow  ENT: huff
     add_bittest(${djpeg} rgb-islow
       "-dct;int;-ppm;-icc;${testout}_rgb_islow.icc"
       ${testout}_rgb_islow.ppm ${testout}_rgb_islow.jpg
       ${MD5_PPM_RGB_ISLOW} ${cjpeg}-${libtype}-rgb-islow)
 
     add_test(${djpeg}-${libtype}-rgb-islow-icc-cmp
       ${CMAKE_CROSSCOMPILING_EMULATOR} ${MD5CMP}
         b06a39d730129122e85c1363ed1bbc9e ${testout}_rgb_islow.icc)
     set_tests_properties(${djpeg}-${libtype}-rgb-islow-icc-cmp PROPERTIES
       DEPENDS ${djpeg}-${libtype}-rgb-islow)
 
     add_bittest(${jpegtran} icc "-copy;all;-icc;${TESTIMAGES}/test2.icc"
       ${testout}_rgb_islow2.jpg ${testout}_rgb_islow.jpg
       ${MD5_JPEG_RGB_ISLOW2} ${cjpeg}-${libtype}-rgb-islow)
 
     if(sample_bits EQUAL 8)
       # CC: RGB->RGB565  SAMP: fullsize  IDCT: islow  ENT: huff
       add_bittest(${djpeg} rgb-islow-565 "-dct;int;-rgb565;-dither;none;-bmp"
         ${testout}_rgb_islow_565.bmp ${testout}_rgb_islow.jpg
         ${MD5_BMP_RGB_ISLOW_565} ${cjpeg}-${libtype}-rgb-islow)
 
       # CC: RGB->RGB565 (dithered)  SAMP: fullsize  IDCT: islow  ENT: huff
       add_bittest(${djpeg} rgb-islow-565D "-dct;int;-rgb565;-bmp"
         ${testout}_rgb_islow_565D.bmp ${testout}_rgb_islow.jpg
         ${MD5_BMP_RGB_ISLOW_565D} ${cjpeg}-${libtype}-rgb-islow)
     endif()
 
     # CC: RGB->YCC  SAMP: fullsize/h2v1  FDCT: ifast  ENT: 2-pass huff
     add_bittest(${cjpeg} 422-ifast-opt "-sample;2x1;-dct;fast;-opt"
       ${testout}_422_ifast_opt.jpg ${TESTIMAGES}/testorig.ppm
       ${MD5_JPEG_422_IFAST_OPT})
 
     # CC: YCC->RGB  SAMP: fullsize/h2v1 fancy  IDCT: ifast  ENT: huff
     add_bittest(${djpeg} 422-ifast "-dct;fast"
       ${testout}_422_ifast.ppm ${testout}_422_ifast_opt.jpg
       ${MD5_PPM_422_IFAST} ${cjpeg}-${libtype}-422-ifast-opt)
 
     # CC: RGB->YCC  SAMP: fullsize/h1v2  FDCT: islow  ENT: huff
     add_bittest(${cjpeg} 440-islow "-sample;1x2;-dct;int"
       ${testout}_440_islow.jpg ${TESTIMAGES}/testorig.ppm
       ${MD5_JPEG_440_ISLOW})
 
     # CC: YCC->RGB  SAMP: fullsize/h1v2 fancy  IDCT: islow  ENT: huff
     add_bittest(${djpeg} 440-islow "-dct;int"
       ${testout}_440_islow.ppm ${testout}_440_islow.jpg
       ${MD5_PPM_440_ISLOW} ${cjpeg}-${libtype}-440-islow)
 
     # CC: YCC->RGB  SAMP: h2v1 merged  IDCT: ifast  ENT: huff
     add_bittest(${djpeg} 422m-ifast "-dct;fast;-nosmooth"
       ${testout}_422m_ifast.ppm ${testout}_422_ifast_opt.jpg
       ${MD5_PPM_422M_IFAST} ${cjpeg}-${libtype}-422-ifast-opt)
 
     if(sample_bits EQUAL 8)
       # CC: YCC->RGB565  SAMP: h2v1 merged  IDCT: ifast  ENT: huff
       add_bittest(${djpeg} 422m-ifast-565
         "-dct;int;-nosmooth;-rgb565;-dither;none;-bmp"
         ${testout}_422m_ifast_565.bmp ${testout}_422_ifast_opt.jpg
         ${MD5_BMP_422M_IFAST_565} ${cjpeg}-${libtype}-422-ifast-opt)
 
       # CC: YCC->RGB565 (dithered)  SAMP: h2v1 merged  IDCT: ifast  ENT: huff
       add_bittest(${djpeg} 422m-ifast-565D "-dct;int;-nosmooth;-rgb565;-bmp"
         ${testout}_422m_ifast_565D.bmp ${testout}_422_ifast_opt.jpg
         ${MD5_BMP_422M_IFAST_565D} ${cjpeg}-${libtype}-422-ifast-opt)
     endif()
 
     # CC: RGB->YCC  SAMP: fullsize/h2v2  FDCT: ifast  ENT: prog huff
     add_bittest(${cjpeg} 420-q100-ifast-prog
       "-sample;2x2;-quality;100;-dct;fast;-scans;${TESTIMAGES}/test.scan"
       ${testout}_420_q100_ifast_prog.jpg ${TESTIMAGES}/testorig.ppm
       ${MD5_JPEG_420_IFAST_Q100_PROG})
 
     # CC: YCC->RGB  SAMP: fullsize/h2v2 fancy  IDCT: ifast  ENT: prog huff
     add_bittest(${djpeg} 420-q100-ifast-prog "-dct;fast"
       ${testout}_420_q100_ifast.ppm ${testout}_420_q100_ifast_prog.jpg
       ${MD5_PPM_420_Q100_IFAST} ${cjpeg}-${libtype}-420-q100-ifast-prog)
 
     # CC: YCC->RGB  SAMP: h2v2 merged  IDCT: ifast  ENT: prog huff
     add_bittest(${djpeg} 420m-q100-ifast-prog "-dct;fast;-nosmooth"
       ${testout}_420m_q100_ifast.ppm ${testout}_420_q100_ifast_prog.jpg
       ${MD5_PPM_420M_Q100_IFAST} ${cjpeg}-${libtype}-420-q100-ifast-prog)
 
     # CC: RGB->Gray  SAMP: fullsize  FDCT: islow  ENT: huff
     add_bittest(${cjpeg} gray-islow "-gray;-dct;int"
       ${testout}_gray_islow.jpg ${TESTIMAGES}/testorig.ppm
       ${MD5_JPEG_GRAY_ISLOW})
 
     # CC: Gray->Gray  SAMP: fullsize  IDCT: islow  ENT: huff
     add_bittest(${djpeg} gray-islow "-dct;int"
       ${testout}_gray_islow.ppm ${testout}_gray_islow.jpg
       ${MD5_PPM_GRAY_ISLOW} ${cjpeg}-${libtype}-gray-islow)
 
     # CC: Gray->RGB  SAMP: fullsize  IDCT: islow  ENT: huff
     add_bittest(${djpeg} gray-islow-rgb "-dct;int;-rgb"
       ${testout}_gray_islow_rgb.ppm ${testout}_gray_islow.jpg
       ${MD5_PPM_GRAY_ISLOW_RGB} ${cjpeg}-${libtype}-gray-islow)
 
     if(sample_bits EQUAL 8)
       # CC: Gray->RGB565  SAMP: fullsize  IDCT: islow  ENT: huff
       add_bittest(${djpeg} gray-islow-565 "-dct;int;-rgb565;-dither;none;-bmp"
         ${testout}_gray_islow_565.bmp ${testout}_gray_islow.jpg
         ${MD5_BMP_GRAY_ISLOW_565} ${cjpeg}-${libtype}-gray-islow)
 
       # CC: Gray->RGB565 (dithered)  SAMP: fullsize  IDCT: islow  ENT: huff
       add_bittest(${djpeg} gray-islow-565D "-dct;int;-rgb565;-bmp"
         ${testout}_gray_islow_565D.bmp ${testout}_gray_islow.jpg
         ${MD5_BMP_GRAY_ISLOW_565D} ${cjpeg}-${libtype}-gray-islow)
     endif()
 
     # CC: RGB->YCC  SAMP: fullsize smooth/h2v2 smooth  FDCT: islow
     # ENT: 2-pass huff
     add_bittest(${cjpeg} 420s-ifast-opt "-sample;2x2;-smooth;1;-dct;int;-opt"
       ${testout}_420s_ifast_opt.jpg ${TESTIMAGES}/testorig.ppm
       ${MD5_JPEG_420S_IFAST_OPT})
 
     if(FLOATTEST${sample_bits})
       # CC: RGB->YCC  SAMP: fullsize/int  FDCT: float  ENT: prog huff
       add_bittest(${cjpeg} 3x2-float-prog "-sample;3x2;-dct;float;-prog"
         ${testout}_3x2_float_prog.jpg ${TESTIMAGES}/testorig.ppm
         ${MD5_JPEG_3x2_FLOAT_PROG_${FLOATTEST${sample_bits}_UC}})
 
       # CC: YCC->RGB  SAMP: fullsize/int  IDCT: float  ENT: prog huff
       add_bittest(${djpeg} 3x2-float-prog "-dct;float"
         ${testout}_3x2_float.ppm ${testout}_3x2_float_prog.jpg
         ${MD5_PPM_3x2_FLOAT_${FLOATTEST${sample_bits}_UC}}
         ${cjpeg}-${libtype}-3x2-float-prog)
     endif()
 
     # CC: RGB->YCC  SAMP: fullsize/int  FDCT: ifast  ENT: prog huff
     add_bittest(${cjpeg} 3x2-ifast-prog "-sample;3x2;-dct;fast;-prog"
       ${testout}_3x2_ifast_prog.jpg ${TESTIMAGES}/testorig.ppm
       ${MD5_JPEG_3x2_IFAST_PROG})
 
     # CC: YCC->RGB  SAMP: fullsize/int  IDCT: ifast  ENT: prog huff
     add_bittest(${djpeg} 3x2-ifast-prog "-dct;fast"
       ${testout}_3x2_ifast.ppm ${testout}_3x2_ifast_prog.jpg
       ${MD5_PPM_3x2_IFAST} ${cjpeg}-${libtype}-3x2-ifast-prog)
 
     if(WITH_ARITH_ENC AND sample_bits EQUAL 8)
       # CC: YCC->RGB  SAMP: fullsize/h2v2  FDCT: islow  ENT: arith
       add_bittest(${cjpeg} 420-islow-ari "-dct;int;-arithmetic"
         ${testout}_420_islow_ari.jpg ${TESTIMAGES}/testorig.ppm
         ${MD5_JPEG_420_ISLOW_ARI})
 
       add_bittest(${jpegtran} 420-islow-ari "-arithmetic"
         ${testout}_420_islow_ari2.jpg ${TESTIMAGES}/testimgint.jpg
         ${MD5_JPEG_420_ISLOW_ARI})
 
       # CC: YCC->RGB  SAMP: fullsize  FDCT: islow  ENT: prog arith
       add_bittest(${cjpeg} 444-islow-progari
         "-sample;1x1;-dct;int;-prog;-arithmetic"
         ${testout}_444_islow_progari.jpg ${TESTIMAGES}/testorig.ppm
         ${MD5_JPEG_444_ISLOW_PROGARI})
     endif()
 
     if(WITH_ARITH_DEC AND sample_bits EQUAL 8)
       # CC: RGB->YCC  SAMP: h2v2 merged  IDCT: ifast  ENT: arith
       add_bittest(${djpeg} 420m-ifast-ari "-fast;-skip;1,20;-ppm"
         ${testout}_420m_ifast_ari.ppm ${TESTIMAGES}/testimgari.jpg
         ${MD5_PPM_420M_IFAST_ARI})
 
       add_bittest(${jpegtran} 420-islow ""
         ${testout}_420_islow.jpg ${TESTIMAGES}/testimgari.jpg
         ${MD5_JPEG_420_ISLOW})
     endif()
 
     # 2/1--   CC: YCC->RGB  SAMP: h2v2 merged  IDCT: 16x16 islow  ENT: huff
     # 15/8--  CC: YCC->RGB  SAMP: h2v2 merged  IDCT: 15x15 islow  ENT: huff
     # 13/8--  CC: YCC->RGB  SAMP: h2v2 merged  IDCT: 13x13 islow  ENT: huff
     # 11/8--  CC: YCC->RGB  SAMP: h2v2 merged  IDCT: 11x11 islow  ENT: huff
     # 9/8--   CC: YCC->RGB  SAMP: h2v2 merged  IDCT: 9x9 islow  ENT: huff
     # 7/8--   CC: YCC->RGB  SAMP: h2v2 merged  IDCT: 7x7 islow/14x14 islow
     #         ENT: huff
     # 3/4--   CC: YCC->RGB  SAMP: h2v2 merged  IDCT: 6x6 islow/12x12 islow
     #         ENT: huff
     # 5/8--   CC: YCC->RGB  SAMP: h2v2 merged  IDCT: 5x5 islow/10x10 islow
     #         ENT: huff
     # 1/2--   CC: YCC->RGB  SAMP: h2v2 merged  IDCT: 4x4 islow/8x8 islow
     #         ENT: huff
     # 3/8--   CC: YCC->RGB  SAMP: h2v2 merged  IDCT: 3x3 islow/6x6 islow
     #         ENT: huff
     # 1/4--   CC: YCC->RGB  SAMP: h2v2 merged  IDCT: 2x2 islow/4x4 islow
     #         ENT: huff
     # 1/8--   CC: YCC->RGB  SAMP: h2v2 merged  IDCT: 1x1 islow/2x2 islow
     #         ENT: huff
     foreach(scale 2_1 15_8 13_8 11_8 9_8 7_8 3_4 5_8 1_2 3_8 1_4 1_8)
       string(REGEX REPLACE "_" "/" scalearg ${scale})
       add_bittest(${djpeg} 420m-islow-${scale}
         "-dct;int;-scale;${scalearg};-nosmooth;-ppm"
         ${testout}_420m_islow_${scale}.ppm ${TESTIMAGES}/${TESTORIG}
         ${MD5_PPM_420M_ISLOW_${scale}})
     endforeach()
 
     if(sample_bits EQUAL 8)
       # CC: YCC->RGB (dithered)  SAMP: h2v2 fancy  IDCT: islow  ENT: huff
       add_bittest(${djpeg} 420-islow-256 "-dct;int;-colors;256;-bmp"
         ${testout}_420_islow_256.bmp ${TESTIMAGES}/${TESTORIG}
         ${MD5_BMP_420_ISLOW_256})
 
       # CC: YCC->RGB565  SAMP: h2v2 fancy  IDCT: islow  ENT: huff
       add_bittest(${djpeg} 420-islow-565 "-dct;int;-rgb565;-dither;none;-bmp"
         ${testout}_420_islow_565.bmp ${TESTIMAGES}/${TESTORIG}
         ${MD5_BMP_420_ISLOW_565})
 
       # CC: YCC->RGB565 (dithered)  SAMP: h2v2 fancy  IDCT: islow  ENT: huff
       add_bittest(${djpeg} 420-islow-565D "-dct;int;-rgb565;-bmp"
         ${testout}_420_islow_565D.bmp ${TESTIMAGES}/${TESTORIG}
         ${MD5_BMP_420_ISLOW_565D})
 
       # CC: YCC->RGB565  SAMP: h2v2 merged  IDCT: islow  ENT: huff
       add_bittest(${djpeg} 420m-islow-565
         "-dct;int;-nosmooth;-rgb565;-dither;none;-bmp"
         ${testout}_420m_islow_565.bmp ${TESTIMAGES}/${TESTORIG}
         ${MD5_BMP_420M_ISLOW_565})
 
       # CC: YCC->RGB565 (dithered)  SAMP: h2v2 merged  IDCT: islow  ENT: huff
       add_bittest(${djpeg} 420m-islow-565D "-dct;int;-nosmooth;-rgb565;-bmp"
         ${testout}_420m_islow_565D.bmp ${TESTIMAGES}/${TESTORIG}
         ${MD5_BMP_420M_ISLOW_565D})
     endif()
 
-    # Lossless (all arguments other than -lossless should have no effect)
+    # Lossless (all arguments other than -lossless and -restart should have no
+    # effect)
     add_bittest(${cjpeg} lossless
-      "-lossless;4;-quality;1;-grayscale;-optimize;-dct;float;-smooth;100;-baseline;-qslots;1,0,0;-sample;1x2,3x4,2x1"
+      "-lossless;4;-restart;1;-quality;1;-grayscale;-optimize;-dct;float;-smooth;100;-baseline;-qslots;1,0,0;-sample;1x2,3x4,2x1"
       ${testout}_lossless.jpg ${TESTIMAGES}/testorig.ppm
       ${MD5_JPEG_LOSSLESS})
     add_bittest(${djpeg} lossless
       "-fast;-scale;1/8;-dct;float;-dither;none;-nosmooth;-onepass"
       ${testout}_lossless.ppm ${testout}_lossless.jpg
       ${MD5_PPM_LOSSLESS} ${cjpeg}-${libtype}-lossless)
 
     # Partial decode tests.  These tests are designed to cover all of the
     # possible code paths in jpeg_skip_scanlines().
 
     # Context rows: Yes  Intra-iMCU row: Yes  iMCU row prefetch: No
     # ENT: huff
     add_bittest(${djpeg} 420-islow-skip15_31 "-dct;int;-skip;15,31;-ppm"
       ${testout}_420_islow_skip15,31.ppm ${TESTIMAGES}/${TESTORIG}
       ${MD5_PPM_420_ISLOW_SKIP15_31})
 
     # Context rows: Yes  Intra-iMCU row: No   iMCU row prefetch: Yes
     # ENT: arith
     if(WITH_ARITH_DEC AND sample_bits EQUAL 8)
       add_bittest(${djpeg} 420-islow-ari-skip16_139
         "-dct;int;-skip;16,139;-ppm"
         ${testout}_420_islow_ari_skip16,139.ppm ${TESTIMAGES}/testimgari.jpg
         ${MD5_PPM_420_ISLOW_ARI_SKIP16_139})
     endif()
 
     # Context rows: Yes  Intra-iMCU row: No   iMCU row prefetch: No
     # ENT: prog huff
     add_test(${cjpeg}-${libtype}-420-islow-prog
       ${CMAKE_CROSSCOMPILING_EMULATOR} cjpeg${suffix} -dct int -prog
         -precision ${sample_bits} -outfile ${testout}_420_islow_prog.jpg
         ${TESTIMAGES}/testorig.ppm)
     add_bittest(${djpeg} 420-islow-prog-crop62x62_71_71
       "-dct;int;-crop;62x62+71+71;-ppm"
       ${testout}_420_islow_prog_crop62x62,71,71.ppm
       ${testout}_420_islow_prog.jpg ${MD5_PPM_420_ISLOW_PROG_CROP62x62_71_71}
       ${cjpeg}-${libtype}-420-islow-prog)
 
     # Context rows: Yes  Intra-iMCU row: No   iMCU row prefetch: No
     # ENT: arith
     if(WITH_ARITH_DEC AND sample_bits EQUAL 8)
       add_bittest(${djpeg} 420-islow-ari-crop53x53_4_4
         "-dct;int;-crop;53x53+4+4;-ppm"
         ${testout}_420_islow_ari_crop53x53,4,4.ppm ${TESTIMAGES}/testimgari.jpg
         ${MD5_PPM_420_ISLOW_ARI_CROP53x53_4_4})
     endif()
 
     # Context rows: No   Intra-iMCU row: Yes  ENT: huff
     add_test(${cjpeg}-${libtype}-444-islow
       ${CMAKE_CROSSCOMPILING_EMULATOR} cjpeg${suffix} -dct int -sample 1x1
         -precision ${sample_bits} -outfile ${testout}_444_islow.jpg
         ${TESTIMAGES}/testorig.ppm)
     add_bittest(${djpeg} 444-islow-skip1_6 "-dct;int;-skip;1,6;-ppm"
       ${testout}_444_islow_skip1,6.ppm ${testout}_444_islow.jpg
       ${MD5_PPM_444_ISLOW_SKIP1_6} ${cjpeg}-${libtype}-444-islow)
 
     # Context rows: No   Intra-iMCU row: No   ENT: prog huff
     add_test(${cjpeg}-${libtype}-444-islow-prog
       ${CMAKE_CROSSCOMPILING_EMULATOR} cjpeg${suffix} -dct int -prog
         -precision ${sample_bits} -sample 1x1
         -outfile ${testout}_444_islow_prog.jpg ${TESTIMAGES}/testorig.ppm)
     add_bittest(${djpeg} 444-islow-prog-crop98x98_13_13
       "-dct;int;-crop;98x98+13+13;-ppm"
       ${testout}_444_islow_prog_crop98x98,13,13.ppm
       ${testout}_444_islow_prog.jpg ${MD5_PPM_444_ISLOW_PROG_CROP98x98_13_13}
       ${cjpeg}-${libtype}-444-islow-prog)
 
     # Context rows: No   Intra-iMCU row: No   ENT: arith
     if(WITH_ARITH_ENC AND sample_bits EQUAL 8)
       add_test(${cjpeg}-${libtype}-444-islow-ari
         ${CMAKE_CROSSCOMPILING_EMULATOR} cjpeg${suffix} -dct int -arithmetic
           -sample 1x1 -precision ${sample_bits}
           -outfile ${testout}_444_islow_ari.jpg ${TESTIMAGES}/testorig.ppm)
       if(WITH_ARITH_DEC)
         add_bittest(${djpeg} 444-islow-ari-crop37x37_0_0
           "-dct;int;-crop;37x37+0+0;-ppm"
           ${testout}_444_islow_ari_crop37x37,0,0.ppm
           ${testout}_444_islow_ari.jpg ${MD5_PPM_444_ISLOW_ARI_CROP37x37_0_0}
           ${cjpeg}-${libtype}-444-islow-ari)
       endif()
     endif()
 
     add_bittest(${jpegtran} crop "-crop;120x90+20+50;-transpose;-perfect"
       ${testout}_crop.jpg ${TESTIMAGES}/${TESTORIG}
       ${MD5_JPEG_CROP})
 
     unset(EXAMPLE_12BIT_ARG)
     if(sample_bits EQUAL 12)
       set(EXAMPLE_12BIT_ARG "-precision;12")
     endif()
 
     add_test(example-${sample_bits}bit-${libtype}-compress
       ${CMAKE_CROSSCOMPILING_EMULATOR} example${suffix} compress -q 95
         ${EXAMPLE_12BIT_ARG} ${testout}-example.jpg)
     add_test(example-${sample_bits}bit-${libtype}-compress-cmp
       ${CMAKE_CROSSCOMPILING_EMULATOR} ${MD5CMP} ${MD5_JPEG_EXAMPLE_COMPRESS}
         ${testout}-example.jpg)
     set_tests_properties(example-${sample_bits}bit-${libtype}-compress-cmp
       PROPERTIES DEPENDS example-${sample_bits}bit-${libtype}-compress)
 
     add_test(example-${sample_bits}bit-${libtype}-decompress
       ${CMAKE_CROSSCOMPILING_EMULATOR} example${suffix} decompress
         ${EXAMPLE_12BIT_ARG} ${testout}-example.jpg ${testout}-example.ppm)
     add_test(example-${sample_bits}bit-${libtype}-decompress-cmp
       ${CMAKE_CROSSCOMPILING_EMULATOR} ${MD5CMP} ${MD5_PPM_EXAMPLE_DECOMPRESS}
         ${testout}-example.ppm)
     set_tests_properties(example-${sample_bits}bit-${libtype}-decompress-cmp
       PROPERTIES DEPENDS example-${sample_bits}bit-${libtype}-decompress)
 
   endforeach()
diff --git a/jddiffct.c b/jddiffct.c
index d818f145..1eb3a9d0 100644
--- a/jddiffct.c
+++ b/jddiffct.c
@@ -125,20 +125,19 @@ METHODDEF(boolean)
 process_restart(j_decompress_ptr cinfo)
 {
   my_diff_ptr diff = (my_diff_ptr)cinfo->coef;
-  lossless_decomp_ptr losslessd = (lossless_decomp_ptr)cinfo->idct;
 
   if (!(*cinfo->entropy->process_restart) (cinfo))
     return FALSE;
 
-  (*losslessd->predict_process_restart) (cinfo);
+  (*cinfo->idct->start_pass) (cinfo);
 
   /* Reset restart counter */
   diff->restart_rows_to_go = cinfo->restart_interval / cinfo->MCUs_per_row;
 
   return TRUE;
 }
 
 
 /*
  * Initialize for an output processing pass.
  */
diff --git a/jdlhuff.c b/jdlhuff.c
index fb142d8f..9964830d 100644
--- a/jdlhuff.c
+++ b/jdlhuff.c
@@ -207,75 +207,74 @@ METHODDEF(JDIMENSION)
 decode_mcus(j_decompress_ptr cinfo, JDIFFIMAGE diff_buf,
             JDIMENSION MCU_row_num, JDIMENSION MCU_col_num, JDIMENSION nMCU)
 {
-  lossless_decomp_ptr losslessd = (lossless_decomp_ptr)cinfo->idct;
   lhuff_entropy_ptr entropy = (lhuff_entropy_ptr)cinfo->entropy;
   int sampn, ci, yoffset, MCU_width, ptrn;
   JDIMENSION mcu_num;
   BITREAD_STATE_VARS;
 
   /* Set output pointer locations based on MCU_col_num */
   for (ptrn = 0; ptrn < entropy->num_output_ptrs; ptrn++) {
     ci = entropy->output_ptr_info[ptrn].ci;
     yoffset = entropy->output_ptr_info[ptrn].yoffset;
     MCU_width = entropy->output_ptr_info[ptrn].MCU_width;
     entropy->output_ptr[ptrn] =
       diff_buf[ci][MCU_row_num + yoffset] + (MCU_col_num * MCU_width);
   }
 
   /*
    * If we've run out of data, zero out the buffers and return.
    * By resetting the undifferencer, the output samples will be CENTERJSAMPLE.
    *
    * NB: We should find a way to do this without interacting with the
    * undifferencer module directly.
    */
   if (entropy->pub.insufficient_data) {
     for (ptrn = 0; ptrn < entropy->num_output_ptrs; ptrn++)
       jzero_far((void FAR *)entropy->output_ptr[ptrn],
                 nMCU * entropy->output_ptr_info[ptrn].MCU_width *
                 sizeof(JDIFF));
 
-    (*losslessd->predict_process_restart) (cinfo);
+    (*cinfo->idct->start_pass) (cinfo);
 
   } else {
 
     /* Load up working state */
     BITREAD_LOAD_STATE(cinfo, entropy->bitstate);
 
     /* Outer loop handles the number of MCUs requested */
 
     for (mcu_num = 0; mcu_num < nMCU; mcu_num++) {
 
       /* Inner loop handles the samples in the MCU */
       for (sampn = 0; sampn < cinfo->blocks_in_MCU; sampn++) {
         d_derived_tbl *dctbl = entropy->cur_tbls[sampn];
         register int s, r;
 
         /* Section H.2.2: decode the sample difference */
         HUFF_DECODE(s, br_state, dctbl, return mcu_num, label1);
         if (s) {
           if (s == 16)  /* special case: always output 32768 */
             s = 32768;
           else {        /* normal case: fetch subsequent bits */
             CHECK_BIT_BUFFER(br_state, s, return mcu_num);
             r = GET_BITS(s);
             s = HUFF_EXTEND(r, s);
           }
         }
 
         /* Output the sample difference */
         *entropy->output_ptr[entropy->output_ptr_index[sampn]]++ = (JDIFF)s;
       }
 
       /* Completed MCU, so update state */
       BITREAD_SAVE_STATE(cinfo, entropy->bitstate);
     }
   }
 
  return nMCU;
 }
 
 
 /*
  * Module initialization routine for lossless mode Huffman entropy decoding.
  */
diff --git a/jlossls.h b/jlossls.h
index 38c45818..ce417041 100644
--- a/jlossls.h
+++ b/jlossls.h
@@ -85,14 +85,11 @@ typedef void (*predict_undifference_method_ptr) (j_decompress_ptr cinfo,
 /* Lossless decompressor */
 typedef struct {
   struct jpeg_inverse_dct pub;  /* public fields */
 
-  /* Prediction, undifferencing */
-  void (*predict_process_restart) (j_decompress_ptr cinfo);
-
   /* It is useful to allow each component to have a separate undiff method. */
   predict_undifference_method_ptr predict_undifference[MAX_COMPONENTS];
 
   /* Sample scaling */
   void (*scaler_scale) (j_decompress_ptr cinfo, JDIFFROW diff_buf,
                         _JSAMPROW output_buf, JDIMENSION width);
 } jpeg_lossless_decompressor;
