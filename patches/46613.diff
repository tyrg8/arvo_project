commit 25e8bd6b45bb2002e499469af7474aa03ac2470c
Merge: a6d019ecf 55e13d40b
Author: David Garske <david@wolfssl.com>
Date:   Tue Apr 26 16:21:11 2022 -0700

    Merge pull request #5044 from SparkiDev/sp_read_radix_10_oob
    
    SP Math

diff --git a/wolfcrypt/src/sp_int.c b/wolfcrypt/src/sp_int.c
index 4a5caeb2e..1317df0ad 100644
--- a/wolfcrypt/src/sp_int.c
+++ b/wolfcrypt/src/sp_int.c
@@ -5210,61 +5210,63 @@ int sp_cmp_d(sp_int* a, sp_int_digit d)
 #if defined(WOLFSSL_SP_ADD_D) || (defined(WOLFSSL_SP_INT_NEGATIVE) && \
     defined(WOLFSSL_SP_SUB_D)) || defined(WOLFSSL_SP_READ_RADIX_10)
 /* Add a one digit number to the multi-precision number.
  *
  * @param  [in]   a  SP integer be added to.
  * @param  [in]   d  Digit to add.
  * @param  [out]  r  SP integer to store result in.
  *
  * @return  MP_OKAY on success.
  * @return  MP_VAL when result is too large for fixed size dp array.
  */
 static int _sp_add_d(sp_int* a, sp_int_digit d, sp_int* r)
 {
     int err = MP_OKAY;
     int i = 0;
     sp_int_digit t;
 
     r->used = a->used;
     if (a->used == 0) {
         r->used = d > 0;
     }
     t = a->dp[0] + d;
     if (t < a->dp[0]) {
         for (++i; i < a->used; i++) {
             r->dp[i] = a->dp[i] + 1;
             if (r->dp[i] != 0) {
                break;
             }
         }
         if (i == a->used) {
-            r->used++;
-            if (i < r->size)
+            if (i < r->size) {
+                r->used++;
                 r->dp[i] = 1;
-            else
+            }
+            else {
                 err = MP_VAL;
+            }
         }
     }
     if (err == MP_OKAY) {
         r->dp[0] = t;
         if (r != a) {
             for (++i; i < a->used; i++) {
                 r->dp[i] = a->dp[i];
             }
         }
     }
 
     return err;
 }
 #endif /* WOLFSSL_SP_ADD_D || (WOLFSSL_SP_INT_NEGATIVE && WOLFSSL_SP_SUB_D) ||
         * defined(WOLFSSL_SP_READ_RADIX_10) */
 
 #if (defined(WOLFSSL_SP_INT_NEGATIVE) && defined(WOLFSSL_SP_ADD_D)) || \
     defined(WOLFSSL_SP_SUB_D) || defined(WOLFSSL_SP_INVMOD) || \
     defined(WOLFSSL_SP_INVMOD_MONT_CT) || defined(WOLFSSL_SP_PRIME_GEN)
 /* Sub a one digit number from the multi-precision number.
  *
  * returns MP_OKAY always.
  * @param  [in]   a  SP integer be subtracted from.
  * @param  [in]   d  Digit to subtract.
  * @param  [out]  r  SP integer to store result in.
  */
@@ -14864,73 +14866,76 @@ static int _sp_read_radix_16(sp_int* a, const char* in)
 #ifdef WOLFSSL_SP_READ_RADIX_10
 /* Convert decimal number as string in big-endian format to a multi-precision
  * number.
  *
  * Negative values supported when compiled with WOLFSSL_SP_INT_NEGATIVE.
  *
  * @param  [out]  a   SP integer.
  * @param  [in]   in  NUL terminated string.
  *
  * @return  MP_OKAY on success.
  * @return  MP_VAL when radix not supported, value is negative, or a character
  *          is not valid.
  */
 static int _sp_read_radix_10(sp_int* a, const char* in)
 {
     int  err = MP_OKAY;
     int  i;
     int  len;
     char ch;
 
     _sp_zero(a);
 #ifdef WOLFSSL_SP_INT_NEGATIVE
     if (*in == '-') {
         a->sign = MP_NEG;
         in++;
     }
 #endif /* WOLFSSL_SP_INT_NEGATIVE */
 
     while (*in == '0') {
         in++;
     }
 
     len = (int)XSTRLEN(in);
     for (i = 0; i < len; i++) {
         ch = in[i];
         if ((ch >= '0') && (ch <= '9')) {
             ch -= '0';
         }
         else {
             err = MP_VAL;
             break;
         }
         err = _sp_mul_d(a, 10, a, 0);
         if (err != MP_OKAY) {
             break;
         }
-        (void)_sp_add_d(a, ch, a);
+        err = _sp_add_d(a, ch, a);
+        if (err != MP_OKAY) {
+            break;
+        }
     }
 #ifdef WOLFSSL_SP_INT_NEGATIVE
     if ((err == MP_OKAY) && sp_iszero(a)) {
         a->sign = MP_ZPOS;
     }
 #endif
 
     return err;
 }
 #endif /* WOLFSSL_SP_READ_RADIX_10 */
 
 #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(NO_RSA) && \
     !defined(WOLFSSL_RSA_VERIFY_ONLY)) || defined(HAVE_ECC) || !defined(NO_DSA)
 /* Convert a number as string in big-endian format to a big number.
  * Only supports base-16 (hexadecimal) and base-10 (decimal).
  *
  * Negative values supported when WOLFSSL_SP_INT_NEGATIVE is defined.
  *
  * @param  [out]  a      SP integer.
  * @param  [in]   in     NUL terminated string.
  * @param  [in]   radix  Number of values in a digit.
  *
  * @return  MP_OKAY on success.
  * @return  MP_VAL when a or in is NULL, radix not supported, value is negative,
  *          or a character is not valid.
  */
