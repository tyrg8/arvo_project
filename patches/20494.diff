commit b0eec1391e1daeade456698b1aee9b2d43a6f538
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Sun Feb 9 14:53:15 2020 +0100

    avcodec/midivid: Check vector index
    
    Fixes: out of array read
    Fixes: 20494/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_MVDV_fuzzer-5681452423577600
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg
    Reviewed-by: Paul B Mahol <onemda@gmail.com>
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavcodec/midivid.c b/libavcodec/midivid.c
index bb5105bd57..8d4c3b369e 100644
--- a/libavcodec/midivid.c
+++ b/libavcodec/midivid.c
@@ -47,102 +47,104 @@ typedef struct MidiVidContext {
 static int decode_mvdv(MidiVidContext *s, AVCodecContext *avctx, AVFrame *frame)
 {
     GetByteContext *gb = &s->gb;
     GetBitContext mask;
     GetByteContext idx9;
     uint16_t nb_vectors, intra_flag;
     const uint8_t *vec;
     const uint8_t *mask_start;
     uint8_t *skip;
     uint32_t mask_size;
     int idx9bits = 0;
     int idx9val = 0;
     uint32_t nb_blocks;
 
     nb_vectors = bytestream2_get_le16(gb);
     intra_flag = bytestream2_get_le16(gb);
     if (intra_flag) {
         nb_blocks = (avctx->width / 2) * (avctx->height / 2);
     } else {
         int ret, skip_linesize;
 
         nb_blocks = bytestream2_get_le32(gb);
         skip_linesize = avctx->width >> 1;
         mask_start = gb->buffer_start + bytestream2_tell(gb);
         mask_size = (avctx->width >> 5) * (avctx->height >> 2);
 
         if (bytestream2_get_bytes_left(gb) < mask_size)
             return AVERROR_INVALIDDATA;
 
         ret = init_get_bits8(&mask, mask_start, mask_size);
         if (ret < 0)
             return ret;
         bytestream2_skip(gb, mask_size);
         skip = s->skip;
 
         for (int y = 0; y < avctx->height >> 2; y++) {
             for (int x = 0; x < avctx->width >> 2; x++) {
                 int flag = !get_bits1(&mask);
 
                 skip[(y*2)  *skip_linesize + x*2  ] = flag;
                 skip[(y*2)  *skip_linesize + x*2+1] = flag;
                 skip[(y*2+1)*skip_linesize + x*2  ] = flag;
                 skip[(y*2+1)*skip_linesize + x*2+1] = flag;
             }
         }
     }
 
     vec = gb->buffer_start + bytestream2_tell(gb);
     if (bytestream2_get_bytes_left(gb) < nb_vectors * 12)
         return AVERROR_INVALIDDATA;
     bytestream2_skip(gb, nb_vectors * 12);
     if (nb_vectors > 256) {
         if (bytestream2_get_bytes_left(gb) < (nb_blocks + 7) / 8)
             return AVERROR_INVALIDDATA;
         bytestream2_init(&idx9, gb->buffer_start + bytestream2_tell(gb), (nb_blocks + 7) / 8);
         bytestream2_skip(gb, (nb_blocks + 7) / 8);
     }
 
     skip = s->skip;
 
     for (int y = avctx->height - 2; y >= 0; y -= 2) {
         uint8_t *dsty = frame->data[0] + y * frame->linesize[0];
         uint8_t *dstu = frame->data[1] + y * frame->linesize[1];
         uint8_t *dstv = frame->data[2] + y * frame->linesize[2];
 
         for (int x = 0; x < avctx->width; x += 2) {
             int idx;
 
             if (!intra_flag && *skip++)
                 continue;
             if (bytestream2_get_bytes_left(gb) <= 0)
                 return AVERROR_INVALIDDATA;
             if (nb_vectors <= 256) {
                 idx = bytestream2_get_byte(gb);
             } else {
                 if (idx9bits == 0) {
                     idx9val = bytestream2_get_byte(&idx9);
                     idx9bits = 8;
                 }
                 idx9bits--;
                 idx = bytestream2_get_byte(gb) | (((idx9val >> (7 - idx9bits)) & 1) << 8);
             }
+            if (idx >= nb_vectors)
+                return AVERROR_INVALIDDATA;
 
             dsty[x  +frame->linesize[0]] = vec[idx * 12 + 0];
             dsty[x+1+frame->linesize[0]] = vec[idx * 12 + 3];
             dsty[x]                      = vec[idx * 12 + 6];
             dsty[x+1]                    = vec[idx * 12 + 9];
 
             dstu[x  +frame->linesize[1]] = vec[idx * 12 + 1];
             dstu[x+1+frame->linesize[1]] = vec[idx * 12 + 4];
             dstu[x]                      = vec[idx * 12 + 7];
             dstu[x+1]                    = vec[idx * 12 +10];
 
             dstv[x  +frame->linesize[2]] = vec[idx * 12 + 2];
             dstv[x+1+frame->linesize[2]] = vec[idx * 12 + 5];
             dstv[x]                      = vec[idx * 12 + 8];
             dstv[x+1]                    = vec[idx * 12 +11];
         }
     }
 
     return intra_flag;
 }
