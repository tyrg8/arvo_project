commit 74da5c5f368ea314867b26abfe96b31e6d8e4e8f
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Tue Jan 11 11:34:01 2022 +0000

    oss-fuzz 42613: Ensure we don't overrun buffers
    
    when checking Type 1 font keys

diff --git a/pdf/pdf_fontps.c b/pdf/pdf_fontps.c
index dcec7e9af..b8b56fb74 100644
--- a/pdf/pdf_fontps.c
+++ b/pdf/pdf_fontps.c
@@ -376,481 +376,504 @@ pdfi_pscript_interpret(pdf_ps_ctx_t *cs, byte *pdfpsbuf, int64_t buflen)
     return code;
 }
 
+static inline bool pdf_ps_name_cmp(pdf_ps_stack_object_t *obj, const char *namestr)
+{
+    byte *d = NULL;
+    int l1, l2;
+
+    if (namestr) {
+        l2 = strlen(namestr);
+    }
+
+    if (obj->type == PDF_PS_OBJ_NAME) {
+        d = obj->val.name;
+        l1 = obj->size;
+    }
+    else if (obj->type == PDF_PS_OBJ_STRING) {
+        d = obj->val.name;
+        l1 = obj->size;
+    }
+    if (d != NULL && namestr != NULL && l1 == l2) {
+        return memcmp(d, namestr, l1) == 0 ? true : false;
+    }
+    return false;
+}
+
 static int
 ps_font_def_func(gs_memory_t *mem, pdf_ps_ctx_t *s, byte *buf, byte *bufend)
 {
     int code = 0, code2 = 0;
     ps_font_interp_private *priv = (ps_font_interp_private *) s->client_data;
 
     if ((code = pdf_ps_stack_count(s)) < 2) {
         return pdf_ps_stack_pop(s, code);
     }
 
     if (pdf_ps_obj_has_type(&s->cur[-1], PDF_PS_OBJ_NAME)) {
-        if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("FontName"))) {
+        if (pdf_ps_name_cmp(&s->cur[-1], "FontName")) {
             int fnlen = 0;
             char *pname = NULL;
 
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_NAME)) {
                 fnlen = s->cur[0].size > gs_font_name_max ? gs_font_name_max : s->cur[0].size;
                 pname = (char *)s->cur[0].val.name;
             }
             else if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_STRING)) {
                 fnlen = s->cur[0].size > gs_font_name_max ? gs_font_name_max : s->cur[0].size;
                 pname = (char *)s->cur[0].val.string;
             }
             if (pname) {
                 memcpy(priv->gsu.gst1.key_name.chars, pname, fnlen);
                 priv->gsu.gst1.key_name.chars[fnlen] = '\0';
                 priv->gsu.gst1.key_name.size = fnlen;
 
                 memcpy(priv->gsu.gst1.font_name.chars, pname, fnlen);
                 priv->gsu.gst1.font_name.chars[fnlen] = '\0';
                 priv->gsu.gst1.font_name.size = fnlen;
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("PaintType"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "PaintType")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_INTEGER)) {
                 priv->gsu.gst1.PaintType = s->cur[0].val.i;
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("StrokeWidth"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "StrokeWidth")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_FLOAT)) {
                 priv->gsu.gst1.StrokeWidth = s->cur[0].val.f;
             }
             else if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_INTEGER)) {
                 priv->gsu.gst1.StrokeWidth = (float)s->cur[0].val.i;
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("WMode"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "WMode")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_INTEGER)) {
                 priv->gsu.gst1.WMode = s->cur[0].val.i;
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("lenIV"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "lenIV")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_INTEGER)) {
                 priv->gsu.gst1.data.lenIV = s->cur[0].val.i;
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("UniqueID"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "UniqueID")) {
             /* Ignore UniqueID if we already have a XUID */
             if (priv->gsu.gst1.UID.id >= 0) {
                 if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_INTEGER)) {
                     uid_set_UniqueID(&priv->gsu.gst1.UID, s->cur[0].val.i);
                 }
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("XUID"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "XUID")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_ARRAY)) {
                 int i, size = s->cur[0].size;
                 long *xvals = (long *)gs_alloc_bytes(mem, size *sizeof(long), "ps_font_def_func(xuid vals)");
 
                 if (xvals != NULL) {
                     for (i = 0; i < size; i++) {
                         if (pdf_ps_obj_has_type(&s->cur[0].val.arr[i], PDF_PS_OBJ_INTEGER)) {
                             xvals[i] = s->cur[0].val.arr[i].val.i;
                         }
                         else {
                             gs_free_object(mem, xvals, "ps_font_def_func(xuid vals)");
                             xvals = NULL;
                             break;
                         }
                     }
                 }
                 if (xvals != NULL) {
                     if (priv->gsu.gst1.UID.xvalues != NULL)
                         gs_free_object(mem, priv->gsu.gst1.UID.xvalues, "ps_font_def_func(old xuid vals)");
                     uid_set_XUID(&priv->gsu.gst1.UID, xvals, size);
                 }
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("FontBBox"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "FontBBox")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_ARRAY)) {
                 int i, j;
                 double bbox[4] = { 0, 0, 1000, 1000 };
                 if (pdf_ps_obj_has_type(&s->cur[0].val.arr[0], PDF_PS_OBJ_ARRAY)) { /* This is (probably) a Blend/FontBBox entry */
                     code = pdfi_array_alloc(s->pdfi_ctx, s->cur[0].size, &priv->u.t1.blendfontbbox);
                     if (code >= 0) {
                         pdfi_countup(priv->u.t1.blendfontbbox);
                         for (i = 0; i < s->cur[0].size; i++) {
                             pdf_ps_stack_object_t *arr = &s->cur[0].val.arr[i];
-                            pdf_array *parr;
+                            pdf_array *parr = NULL;
                             pdf_num *n;
                             if (pdf_ps_obj_has_type(arr, PDF_PS_OBJ_ARRAY)) {
                                 code = pdfi_array_alloc(s->pdfi_ctx, arr->size, &parr);
                                 if (code < 0)
                                     break;
                                 pdfi_countup(parr);
 
                                 for (j = 0; j < arr->size; j++) {
                                     if (pdf_ps_obj_has_type(&arr->val.arr[j], PDF_PS_OBJ_INTEGER)) {
                                         code = pdfi_object_alloc(s->pdfi_ctx, PDF_INT, 0, (pdf_obj **)&n);
                                         if (code >= 0)
                                             n->value.i = arr->val.arr[j].val.i;
                                     }
                                     else if (pdf_ps_obj_has_type(&arr->val.arr[j], PDF_PS_OBJ_FLOAT)) {
                                         code = pdfi_object_alloc(s->pdfi_ctx, PDF_REAL, 0, (pdf_obj **)&n);
                                         if (code >= 0)
                                             n->value.d = arr->val.arr[j].val.f;
                                     }
                                     else {
                                         code = pdfi_object_alloc(s->pdfi_ctx, PDF_INT, 0, (pdf_obj **)&n);
                                         if (code >= 0)
                                             n->value.i = 0;
                                     }
                                     if (code < 0)
                                         break;
                                     pdfi_countup(n);
                                     code = pdfi_array_put(s->pdfi_ctx, parr, j, (pdf_obj *)n);
                                     pdfi_countdown(n);
                                     if (code < 0) break;
                                 }
                             }
                             if (code >= 0)
                                 code = pdfi_array_put(s->pdfi_ctx, priv->u.t1.blendfontbbox, i, (pdf_obj *)parr);
                             pdfi_countdown(parr);
                         }
                     }
                 }
                 else if (s->cur[0].size >= 4) {
                     for (i = 0; i < 4; i++) {
                         if (pdf_ps_obj_has_type(&s->cur[0].val.arr[i], PDF_PS_OBJ_INTEGER)) {
                             bbox[i] = (double)s->cur[0].val.arr[i].val.i;
                         }
                         else if (pdf_ps_obj_has_type(&s->cur[0].val.arr[i], PDF_PS_OBJ_FLOAT)) {
                             bbox[i] = (double)s->cur[0].val.arr[i].val.f;
                         }
                     }
                     priv->gsu.gst1.FontBBox.p.x = bbox[0];
                     priv->gsu.gst1.FontBBox.p.y = bbox[1];
                     priv->gsu.gst1.FontBBox.q.x = bbox[2];
                     priv->gsu.gst1.FontBBox.q.y = bbox[3];
                 }
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("FontType"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "FontType")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_INTEGER)) {
                 priv->gsu.gst1.FontType = s->cur[0].val.i;
                 priv->u.t1.pdfi_font_type = s->cur[0].val.i == 1 ? e_pdf_font_type1 : e_pdf_cidfont_type0;
             }
             else {
                 priv->gsu.gst1.FontType = 1;
                 priv->u.t1.pdfi_font_type = e_pdf_font_type1;
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("FontMatrix"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "FontMatrix")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_ARRAY) && s->cur[0].size >= 6) {
                 int i;
                 double fmat[6] = { 0.001, 0, 0, 0.001, 0, 0 };
                 for (i = 0; i < 6; i++) {
                     if (pdf_ps_obj_has_type(&s->cur[0].val.arr[i], PDF_PS_OBJ_INTEGER)) {
                         fmat[i] = (double)s->cur[0].val.arr[i].val.i;
                     }
                     else if (pdf_ps_obj_has_type(&s->cur[0].val.arr[i], PDF_PS_OBJ_FLOAT)) {
                         fmat[i] = (double)s->cur[0].val.arr[i].val.f;
                     }
                 }
                 priv->gsu.gst1.FontMatrix.xx = fmat[0];
                 priv->gsu.gst1.FontMatrix.xy = fmat[1];
                 priv->gsu.gst1.FontMatrix.yx = fmat[2];
                 priv->gsu.gst1.FontMatrix.yy = fmat[3];
                 priv->gsu.gst1.FontMatrix.tx = fmat[4];
                 priv->gsu.gst1.FontMatrix.ty = fmat[5];
                 priv->gsu.gst1.orig_FontMatrix = priv->gsu.gst1.FontMatrix;
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("BlueValues"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "BlueValues")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_ARRAY)) {
                 int i, size = s->cur[0].size < 14 ? s->cur[0].size : 14;
 
                 for (i = 0; i < size; i++) {
                     if (pdf_ps_obj_has_type(&s->cur[0].val.arr[i], PDF_PS_OBJ_INTEGER)) {
                         priv->gsu.gst1.data.BlueValues.values[i] =
                             (float)s->cur[0].val.arr[i].val.i;
                     }
                     else if (pdf_ps_obj_has_type(&s->cur[0].val.arr[i], PDF_PS_OBJ_FLOAT)) {
                         priv->gsu.gst1.data.BlueValues.values[i] = s->cur[0].val.arr[i].val.f;
                     }
                     else {
                         if (i == 0)
                             priv->gsu.gst1.data.BlueValues.values[i] = 0;
                         else
                             priv->gsu.gst1.data.BlueValues.values[i] = priv->gsu.gst1.data.BlueValues.values[i - 1] + 1;
                     }
                 }
                 priv->gsu.gst1.data.BlueValues.count = size;
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("BlueScale"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "BlueScale")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_INTEGER)) {
                 priv->gsu.gst1.data.BlueScale = (float)s->cur[0].val.i;
             }
             else if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_FLOAT)) {
                 priv->gsu.gst1.data.BlueScale = (float)s->cur[0].val.f;
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("StdHW"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "StdHW")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_ARRAY)) {
                 if (pdf_ps_obj_has_type(&s->cur[0].val.arr[0], PDF_PS_OBJ_INTEGER)) {
                     priv->gsu.gst1.data.StdHW.values[0] = (float)s->cur[0].val.arr[0].val.i;
                     priv->gsu.gst1.data.StdHW.count = 1;
                 }
                 else if (pdf_ps_obj_has_type(&s->cur[0].val.arr[0], PDF_PS_OBJ_FLOAT)) {
                     priv->gsu.gst1.data.StdHW.values[0] = s->cur[0].val.arr[0].val.f;
                     priv->gsu.gst1.data.StdHW.count = 1;
                 }
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("StdVW"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "StdVW")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_ARRAY)) {
                 if (pdf_ps_obj_has_type(&s->cur[0].val.arr[0], PDF_PS_OBJ_INTEGER)) {
                     priv->gsu.gst1.data.StdVW.values[0] = (float)s->cur[0].val.arr[0].val.i;
                     priv->gsu.gst1.data.StdVW.count = 1;
                 }
                 else if (pdf_ps_obj_has_type(&s->cur[0].val.arr[0], PDF_PS_OBJ_FLOAT)) {
                     priv->gsu.gst1.data.StdVW.values[0] = s->cur[0].val.arr[0].val.f;
                     priv->gsu.gst1.data.StdVW.count = 1;
                 }
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("StemSnapH"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "StemSnapH")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_ARRAY)) {
                 int i, size = s->cur[0].size > 12 ? 12 : s->cur[0].size;
 
                 for (i = 0; i < size; i++) {
                     if (pdf_ps_obj_has_type(&s->cur[0].val.arr[i], PDF_PS_OBJ_INTEGER)) {
                         priv->gsu.gst1.data.StemSnapH.values[i] = (float)s->cur[0].val.arr[i].val.i;
                     }
                     else if (pdf_ps_obj_has_type(&s->cur[0].val.arr[i], PDF_PS_OBJ_FLOAT)) {
                         priv->gsu.gst1.data.StemSnapH.values[i] = s->cur[0].val.arr[i].val.f;
                     }
                 }
                 priv->gsu.gst1.data.StemSnapH.count = size;
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("StemSnapV"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "StemSnapV")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_ARRAY)) {
                 int i, size = s->cur[0].size > 12 ? 12 : s->cur[0].size;
 
                 for (i = 0; i < size; i++) {
                     if (pdf_ps_obj_has_type(&s->cur[0].val.arr[i], PDF_PS_OBJ_INTEGER)) {
                         priv->gsu.gst1.data.StemSnapV.values[i] = (float)s->cur[0].val.arr[i].val.i;
                     }
                     else if (pdf_ps_obj_has_type(&s->cur[0].val.arr[i], PDF_PS_OBJ_FLOAT)) {
                         priv->gsu.gst1.data.StemSnapV.values[i] = s->cur[0].val.arr[i].val.f;
                     }
                 }
                 priv->gsu.gst1.data.StemSnapH.count = size;
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("Encoding"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "Encoding")) {
             pdf_array *new_enc = NULL;
 
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_NAME)) {
                 pdf_name *pname;
 
                 code = pdfi_name_alloc(s->pdfi_ctx, (byte *) s->cur[0].val.name, s->cur[0].size, (pdf_obj **) &pname);
                 if (code >= 0) {
                     pdfi_countup(pname);
 
                     code = pdfi_create_Encoding(s->pdfi_ctx, (pdf_obj *) pname, NULL, (pdf_obj **) &new_enc);
                     if (code >= 0) {
                         pdfi_countdown(priv->u.t1.Encoding);
                         priv->u.t1.Encoding = new_enc;
                     }
                     pdfi_countdown(pname);
                 }
             }
             else if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_ARRAY)) {
                 int i;
 
                 code = pdfi_array_alloc(s->pdfi_ctx, s->cur[0].size, &new_enc);
                 if (code >= 0) {
                     pdfi_countup(new_enc);
                     for (i = 0; i < s->cur[0].size; i++) {
                         pdf_name *n = NULL;
                         byte *nm = (byte *) s->cur[0].val.arr[i].val.name;
                         int nlen = s->cur[0].val.arr[i].size;
 
                         code = pdfi_name_alloc(s->pdfi_ctx, (byte *) nm, nlen, (pdf_obj **) &n);
                         if (code < 0)
                             break;
                         pdfi_countup(n);
                         code = pdfi_array_put(s->pdfi_ctx, new_enc, (uint64_t) i, (pdf_obj *) n);
                         pdfi_countdown(n);
                         if (code < 0)
                             break;
                     }
                     if (code < 0) {
                         pdfi_countdown(new_enc);
                     }
                     else {
                         pdfi_countdown(priv->u.t1.Encoding);
                         priv->u.t1.Encoding = new_enc;
                         new_enc = NULL;
                     }
                 }
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("BlendDesignPositions"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "BlendDesignPositions")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_ARRAY)) {
                 code = pdfi_array_alloc(s->pdfi_ctx, s->cur[0].size, &priv->u.t1.blenddesignpositions);
                 if (code >= 0) {
                     int i, j;
                     pdfi_countup(priv->u.t1.blenddesignpositions);
 
                     for (i = 0; i < s->cur[0].size && code >= 0; i++) {
                         pdf_ps_stack_object_t *so = &s->cur[0].val.arr[i];
 
                         if (pdf_ps_obj_has_type(so, PDF_PS_OBJ_ARRAY)) {
                             pdf_array *sa;
                             code = pdfi_array_alloc(s->pdfi_ctx, so->size, &sa);
                             if (code >= 0) {
                                 pdfi_countup(sa);
                                 for (j = 0; j < so->size; j++) {
                                     pdf_num *n;
                                     if (pdf_ps_obj_has_type(&so->val.arr[j], PDF_PS_OBJ_INTEGER)) {
                                         code = pdfi_object_alloc(s->pdfi_ctx, PDF_INT, 0, (pdf_obj **)&n);
                                         if (code >= 0)
                                             n->value.i = so->val.arr[j].val.i;
                                     }
                                     else if (pdf_ps_obj_has_type(&so->val.arr[j], PDF_PS_OBJ_FLOAT)) {
                                         code = pdfi_object_alloc(s->pdfi_ctx, PDF_REAL, 0, (pdf_obj **)&n);
                                         if (code >= 0)
                                             n->value.d = so->val.arr[j].val.f;
                                     }
                                     else {
                                         code = pdfi_object_alloc(s->pdfi_ctx, PDF_INT, 0, (pdf_obj **)&n);
                                         if (code >= 0)
                                             n->value.i = 0;
                                     }
                                     if (code < 0)
                                         break;
                                     pdfi_countup(n);
                                     code = pdfi_array_put(s->pdfi_ctx, sa, j, (pdf_obj *)n);
                                     pdfi_countdown(n);
                                     if (code < 0) break;
                                 }
                             }
                             if (code >= 0) {
                                 pdfi_array_put(s->pdfi_ctx, priv->u.t1.blenddesignpositions, i, (pdf_obj *)sa);
                             }
                             pdfi_countdown(sa);
                         }
                     }
                 }
 
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("BlendAxisTypes"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "BlendAxisTypes")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_ARRAY)) {
                 int i;
                 code = pdfi_array_alloc(s->pdfi_ctx, s->cur[0].size, &priv->u.t1.blendaxistypes);
                 if (code >= 0) {
                     pdfi_countup(priv->u.t1.blendaxistypes);
                     for (i = 0; i < s->cur[0].size; i++) {
                         pdf_ps_stack_object_t *so = &s->cur[0].val.arr[i];
                         pdf_name *n;
                         if (pdf_ps_obj_has_type(so, PDF_PS_OBJ_NAME)) {
                             code = pdfi_object_alloc(s->pdfi_ctx, PDF_NAME, so->size, (pdf_obj **)&n);
                             if (code >= 0) {
                                 pdfi_countup(n);
                                 memcpy(n->data, so->val.name, so->size);
                                 n->length = so->size;
                                 code = pdfi_array_put(s->pdfi_ctx, priv->u.t1.blendaxistypes, i, (pdf_obj *)n);
                                 pdfi_countdown(n);
                             }
                         }
                         if (code < 0)
                             break;
                     }
                 }
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("BlendDesignMap"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "BlendDesignMap")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_ARRAY)) {
                 int i, j, k;
                 pdf_ps_stack_object_t *arr1 = &s->cur[0], *arr2, *arr3;
                 pdf_array *parr2, *parr3;
                 code = pdfi_array_alloc(s->pdfi_ctx, arr1->size, &priv->u.t1.blenddesignmap);
                 if (code >= 0) {
                     pdfi_countup(priv->u.t1.blenddesignmap);
                     for (i = 0; i < arr1->size && code >= 0; i++) {
                         if (pdf_ps_obj_has_type(&arr1->val.arr[i], PDF_PS_OBJ_ARRAY)) {
                             arr2 = &arr1->val.arr[i];
                             code = pdfi_array_alloc(s->pdfi_ctx, arr2->size, &parr2);
                             if (code < 0)
                                 break;
                             for (j = 0; j < arr2->size; j++) {
                                 pdf_num *n;
 
                                 arr3 = &arr2->val.arr[j];
                                 code = pdfi_array_alloc(s->pdfi_ctx, arr3->size, &parr3);
                                 if (code < 0)
                                     break;
 
                                 for (k = 0; k < arr3->size; k++) {
                                     if (pdf_ps_obj_has_type(&arr3->val.arr[k], PDF_PS_OBJ_INTEGER)) {
                                         code = pdfi_object_alloc(s->pdfi_ctx, PDF_INT, 0, (pdf_obj **)&n);
                                         if (code >= 0)
                                             n->value.i = arr3->val.arr[k].val.i;
                                     }
                                     else if (pdf_ps_obj_has_type(&arr1->val.arr[i], PDF_PS_OBJ_FLOAT)) {
                                         code = pdfi_object_alloc(s->pdfi_ctx, PDF_REAL, 0, (pdf_obj **)&n);
                                         if (code >= 0)
                                             n->value.d = arr3->val.arr[k].val.f;
                                     }
                                     else {
                                         code = pdfi_object_alloc(s->pdfi_ctx, PDF_INT, 0, (pdf_obj **)&n);
                                         if (code >= 0)
                                             n->value.i = 0;
                                     }
                                     if (code < 0)
                                         break;
                                     pdfi_countup(n);
                                     code = pdfi_array_put(s->pdfi_ctx, parr3, k, (pdf_obj *)n);
                                     pdfi_countdown(n);
                                     if (code < 0)
                                         break;
                                 }
                                 if (code < 0)
                                     break;
                                 pdfi_countup(parr3);
                                 code = pdfi_array_put(s->pdfi_ctx, parr2, j, (pdf_obj *)parr3);
                                 pdfi_countdown(parr3);
                             }
                             if (code < 0)
                                 break;
                             pdfi_countup(parr2);
                             code = pdfi_array_put(s->pdfi_ctx, priv->u.t1.blenddesignmap, i, (pdf_obj *)parr2);
                             pdfi_countdown(parr2);
                         }
                     }
                 }
             }
         }
-        else if (!memcmp(s->cur[-1].val.name, PDF_PS_OPER_NAME_AND_LEN("WeightVector"))) {
+        else if (pdf_ps_name_cmp(&s->cur[-1], "WeightVector")) {
             if (pdf_ps_obj_has_type(&s->cur[0], PDF_PS_OBJ_ARRAY)) {
                 int i;
                 for (i = 0; i < s->cur[0].size; i++) {
                     if (pdf_ps_obj_has_type(&s->cur[0].val.arr[i], PDF_PS_OBJ_INTEGER)) {
                         priv->gsu.gst1.data.WeightVector.values[i] = (float)s->cur[0].val.arr[i].val.i;
                     }
                     else if (pdf_ps_obj_has_type(&s->cur[0].val.arr[i], PDF_PS_OBJ_FLOAT)) {
                         priv->gsu.gst1.data.WeightVector.values[i] = s->cur[0].val.arr[i].val.f;
                     }
                     else {
                         priv->gsu.gst1.data.WeightVector.values[i] = 0;
                     }
                 }
                 priv->gsu.gst1.data.WeightVector.count = s->cur[0].size;
             }
         }
     }
 
     code2 = pdf_ps_stack_pop(s, 2);
     if (code < 0)
         return code;
     else
         return code2;
 }
