commit d2dadc4e18dfd924490c529a058eb5276a2ab6c5
Author: seladb <pcapplusplus@gmail.com>
Date:   Sat May 23 04:31:36 2020 -0400

    Bugfix 22232 in oss-fuzz: Heap-buffer-overflow in pcpp::IPv6Layer::parseExtensions

diff --git a/Packet++/header/IPv6Layer.h b/Packet++/header/IPv6Layer.h
index 89e20147..e8b86faa 100644
--- a/Packet++/header/IPv6Layer.h
+++ b/Packet++/header/IPv6Layer.h
@@ -10,217 +10,232 @@
 /**
  * \namespace pcpp
  * \brief The main namespace for the PcapPlusPlus lib
  */
 namespace pcpp
 {
 
 	/**
 	 * @struct ip6_hdr
 	 * Represents IPv6 protocol header
 	 */
 #pragma pack(push, 1)
 	struct ip6_hdr {
 		#if (BYTE_ORDER == LITTLE_ENDIAN)
 		/** Traffic class */
 		uint8_t trafficClass:4,
 		/** IP version number, has the value of 6 for IPv6 */
 		ipVersion:4;
 		#else
 		/** IP version number, has the value of 6 for IPv6 */
 		uint8_t ipVersion:4,
 		/** Traffic class */
 		trafficClass:4;
 		#endif
 		/** Flow label */
 		uint8_t flowLabel[3];
 		/** The size of the payload in octets, including any extension headers */
 		uint16_t payloadLength;
 		/** Specifies the type of the next header (protocol). Must be one of ::IPProtocolTypes */
 		uint8_t nextHeader;
 		/** Replaces the time to live field of IPv4 */
 		uint8_t hopLimit;
 		/** Source address */
 		uint8_t ipSrc[16];
 		/** Destination address */
 		uint8_t ipDst[16];
 	};
 #pragma pack(pop)
 
 
 	/**
 	 * @class IPv6Layer
 	 * Represents an IPv6 protocol layer
 	 */
 	class IPv6Layer : public Layer
 	{
 	public:
 		/**
 		 * A constructor that creates the layer from an existing packet raw data
 		 * @param[in] data A pointer to the raw data (will be casted to @ref ip6_hdr)
 		 * @param[in] dataLen Size of the data in bytes
 		 * @param[in] prevLayer A pointer to the previous layer
 		 * @param[in] packet A pointer to the Packet instance where layer will be stored in
 		 */
 		IPv6Layer(uint8_t* data, size_t dataLen, Layer* prevLayer, Packet* packet);
 
 		/**
 		 * A constructor that allocates a new IPv6 header with empty fields
 		 */
 		IPv6Layer();
 
 		/**
 		 * A constructor that allocates a new IPv6 header with source and destination IPv6 addresses
 		 * @param[in] srcIP Source IPv6 address
 		 * @param[in] dstIP Destination IPv6 address
 		 */
 		IPv6Layer(const IPv6Address& srcIP, const IPv6Address& dstIP);
 
 		/**
 		 * A copy constructor that copies the entire header from the other IPv6Layer (including IPv6 extensions)
 		 */
 		IPv6Layer(const IPv6Layer& other);
 
 		/**
 		 * A destrcutor for this layer
 		 */
 		~IPv6Layer();
 
 		/**
 		 * An assignment operator that first delete all data from current layer and then copy the entire header from the other IPv6Layer (including IPv6 extensions)
 		 */
 		IPv6Layer& operator=(const IPv6Layer& other);
 
 		/**
 		 * Get a pointer to the IPv6 header. Notice this points directly to the data, so every change will change the actual packet data
 		 * @return A pointer to the @ref ip6_hdr
 		 */
 		ip6_hdr* getIPv6Header() const { return (ip6_hdr*)m_Data; }
 
 		/**
 		 * Get the source IP address in the form of IPv6Address
 		 * @return An IPv6Address containing the source address
 		 */
 		IPv6Address getSrcIpAddress() const { return IPv6Address(getIPv6Header()->ipSrc); }
 
 		/**
 		 * Get the destination IP address in the form of IPv6Address
 		 * @return An IPv6Address containing the destination address
 		 */
 		IPv6Address getDstIpAddress() const { return IPv6Address(getIPv6Header()->ipDst); }
 
 		/**
 		 * @return Number of IPv6 extensions in this layer
 		 */
 		size_t getExtensionCount() const;
 
 		/**
 		 * A templated getter for an IPv6 extension of a type TIPv6Extension. TIPv6Extension has to be one of the supported IPv6 extensions,
 		 * meaning a class that inherits IPv6Extension. If the requested extension type isn't found NULL is returned
 		 * @return A pointer to the extension instance or NULL if the requested extension type isn't found
 		 */
 		template<class TIPv6Extension>
 		TIPv6Extension* getExtensionOfType() const;
 
 		/**
 		 * Add a new extension of type TIPv6Extension to the layer. This is a templated method and TIPv6Extension has to be one of
 		 * the supported IPv6 extensions, meaning a class that inherits IPv6Extension. If the extension is added successfully a pointer
 		 * to the newly added extension object is returned, otherwise NULL is returned
 		 * @param[in] extensionHeader The extension object to add. Notice the object passed here is read-only, meaning its data is copied
 		 * but the object itself isn't modified
 		 * @return If the extension is added successfully a pointer to the newly added extension object is returned. Otherwise NULL is
 		 * returned
 		 */
 		template<class TIPv6Extension>
 		TIPv6Extension* addExtension(const TIPv6Extension& extensionHeader);
 
 		/**
 		 * Remove all IPv6 extensions in this layer
 		 */
 		void removeAllExtensions();
 
 		/**
 		 * @return True if this packet is an IPv6 fragment, meaning if it has an IPv6FragmentationHeader extension
 		 */
 		bool isFragment() const;
 
+		/**
+		 * The static method makes validation of input data
+		 * @param[in] data The pointer to the beginning of byte stream of IP packet
+		 * @param[in] dataLen The length of byte stream
+		 * @return True if the data is valid and can represent the IPv6 packet
+		 */
+		static inline bool isDataValid(const uint8_t* data, size_t dataLen);
+
 
 		// implement abstract methods
 
 		/**
 		 * Currently identifies the following next layers: UdpLayer, TcpLayer. Otherwise sets PayloadLayer
 		 */
 		void parseNextLayer();
 
 		/**
 		 * @return Size of @ref ip6_hdr
 		 */
 		size_t getHeaderLen() const { return sizeof(ip6_hdr) + m_ExtensionsLen; }
 
 		/**
 		 * Calculate the following fields:
 		 * - ip6_hdr#payloadLength = size of payload (all data minus header size)
 		 * - ip6_hdr#ipVersion = 6
 		 * - ip6_hdr#nextHeader = calculated if next layer is known: ::PACKETPP_IPPROTO_TCP for TCP, ::PACKETPP_IPPROTO_UDP for UDP, ::PACKETPP_IPPROTO_ICMP for ICMP
 		 */
 		void computeCalculateFields();
 
 		std::string toString() const;
 
 		OsiModelLayer getOsiModelLayer() const { return OsiModelNetworkLayer; }
 
 	private:
 		void initLayer();
 		void parseExtensions();
 		void deleteExtensions();
 
 		IPv6Extension* m_FirstExtension;
 		IPv6Extension* m_LastExtension;
 		size_t m_ExtensionsLen;
 	};
 
 
 	template<class TIPv6Extension>
 	TIPv6Extension* IPv6Layer::getExtensionOfType() const
 	{
 		IPv6Extension* curExt = m_FirstExtension;
 		while (curExt != NULL && dynamic_cast<TIPv6Extension*>(curExt) == NULL)
 			curExt = curExt->getNextHeader();
 
 		return (TIPv6Extension*)curExt;
 	}
 
 	template<class TIPv6Extension>
 	TIPv6Extension* IPv6Layer::addExtension(const TIPv6Extension& extensionHeader)
 	{
 		int offsetToAddHeader = (int)getHeaderLen();
 		if (!extendLayer(offsetToAddHeader, extensionHeader.getExtensionLen()))
 		{
 			return NULL;
 		}
 
 		TIPv6Extension* newHeader = new TIPv6Extension(this, (size_t)offsetToAddHeader);
 		(*newHeader) = extensionHeader;
 
 		if (m_FirstExtension != NULL)
 		{
 			newHeader->getBaseHeader()->nextHeader = m_LastExtension->getBaseHeader()->nextHeader;
 			m_LastExtension->getBaseHeader()->nextHeader = newHeader->getExtensionType();
 			m_LastExtension->setNextHeader(newHeader);
 			m_LastExtension = newHeader;
 		}
 		else
 		{
 			m_FirstExtension = newHeader;
 			m_LastExtension = newHeader;
 			newHeader->getBaseHeader()->nextHeader = getIPv6Header()->nextHeader;
 			getIPv6Header()->nextHeader = newHeader->getExtensionType();
 		}
 
 		m_ExtensionsLen += newHeader->getExtensionLen();
 
 		return newHeader;
 	}
 
+		// implementation of inline methods
+
+	bool IPv6Layer::isDataValid(const uint8_t* data, size_t dataLen)
+	{
+		return dataLen >= sizeof(ip6_hdr);
+	}
+
 } // namespace pcpp
 
 #endif /* PACKETPP_IPV6_LAYER */
diff --git a/Packet++/src/EthLayer.cpp b/Packet++/src/EthLayer.cpp
index 274cd67c..0e077fd7 100644
--- a/Packet++/src/EthLayer.cpp
+++ b/Packet++/src/EthLayer.cpp
@@ -32,38 +32,40 @@ EthLayer::EthLayer(const MacAddress& sourceMac, const MacAddress& destMac, uint1
 void EthLayer::parseNextLayer()
 {
 	if (m_DataLen <= sizeof(ether_header))
 		return;
 
 	ether_header* hdr = getEthHeader();
 	uint8_t* payload = m_Data + sizeof(ether_header);
 	size_t payloadLen = m_DataLen - sizeof(ether_header);
 
 	switch (be16toh(hdr->etherType))
 	{
 	case PCPP_ETHERTYPE_IP:
 		m_NextLayer = IPv4Layer::isDataValid(payload, payloadLen)
 			? static_cast<Layer*>(new IPv4Layer(payload, payloadLen, this, m_Packet))
 			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	case PCPP_ETHERTYPE_IPV6:
-		m_NextLayer = new IPv6Layer(payload, payloadLen, this, m_Packet);
+		m_NextLayer = IPv6Layer::isDataValid(payload, payloadLen)
+			? static_cast<Layer*>(new IPv6Layer(payload, payloadLen, this, m_Packet))
+			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	case PCPP_ETHERTYPE_ARP:
 		m_NextLayer = new ArpLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PCPP_ETHERTYPE_VLAN:
 		m_NextLayer = new VlanLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PCPP_ETHERTYPE_PPPOES:
 		m_NextLayer = new PPPoESessionLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PCPP_ETHERTYPE_PPPOED:
 		m_NextLayer = new PPPoEDiscoveryLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PCPP_ETHERTYPE_MPLS:
 		m_NextLayer = new MplsLayer(payload, payloadLen, this, m_Packet);
 		break;
 	default:
 		m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 	}
 }
diff --git a/Packet++/src/GreLayer.cpp b/Packet++/src/GreLayer.cpp
index 9d7041cd..5dad318c 100644
--- a/Packet++/src/GreLayer.cpp
+++ b/Packet++/src/GreLayer.cpp
@@ -191,33 +191,35 @@ bool GreLayer::unsetSequenceNumber()
 void GreLayer::parseNextLayer()
 {
 	size_t headerLen = getHeaderLen();
 	if (m_DataLen <= headerLen)
 		return;
 
 	gre_basic_header* header = (gre_basic_header*)m_Data;
 	uint8_t* payload = m_Data + headerLen;
 	size_t payloadLen = m_DataLen - headerLen;
 
 	switch (be16toh(header->protocol))
 	{
 	case PCPP_ETHERTYPE_IP:
 		m_NextLayer = IPv4Layer::isDataValid(payload, payloadLen)
 			? static_cast<Layer*>(new IPv4Layer(payload, payloadLen, this, m_Packet))
 			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	case PCPP_ETHERTYPE_IPV6:
-		m_NextLayer = new IPv6Layer(payload, payloadLen, this, m_Packet);
+		m_NextLayer = IPv6Layer::isDataValid(payload, payloadLen)
+			? static_cast<Layer*>(new IPv6Layer(payload, payloadLen, this, m_Packet))
+			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	case PCPP_ETHERTYPE_VLAN:
 		m_NextLayer = new VlanLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PCPP_ETHERTYPE_MPLS:
 		m_NextLayer = new MplsLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PCPP_ETHERTYPE_PPP:
 		m_NextLayer = new PPP_PPTPLayer(payload, payloadLen, this, m_Packet);
 		break;
 	default:
 		m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 	}
 }
@@ -551,24 +553,26 @@ PPP_PPTPLayer::PPP_PPTPLayer(uint8_t address, uint8_t control)
 void PPP_PPTPLayer::parseNextLayer()
 {
 	size_t headerLen = getHeaderLen();
 	if (m_DataLen <= headerLen)
 		return;
 
 	uint8_t* payload = m_Data + headerLen;
 	size_t payloadLen = m_DataLen - headerLen;
 
 	switch (be16toh(getPPP_PPTPHeader()->protocol))
 	{
 	case PCPP_PPP_IP:
 		m_NextLayer = IPv4Layer::isDataValid(payload, payloadLen)
 			? static_cast<Layer*>(new IPv4Layer(payload, payloadLen, this, m_Packet))
 			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	case PCPP_PPP_IPV6:
-		m_NextLayer = new IPv6Layer(payload, payloadLen, this, m_Packet);
+		m_NextLayer = IPv6Layer::isDataValid(payload, payloadLen)
+			? static_cast<Layer*>(new IPv6Layer(payload, payloadLen, this, m_Packet))
+			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	default:
 		m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 		break;
 	}
 }
diff --git a/Packet++/src/GtpLayer.cpp b/Packet++/src/GtpLayer.cpp
index 3a62520c..28b64bcb 100644
--- a/Packet++/src/GtpLayer.cpp
+++ b/Packet++/src/GtpLayer.cpp
@@ -566,43 +566,45 @@ bool GtpV1Layer::isGTPCMessage() const
 void GtpV1Layer::parseNextLayer()
 {
 	size_t headerLen = getHeaderLen();
 	if (headerLen < sizeof(gtpv1_header))
 	{
 		// do nothing
 		return;
 	}
 
 	gtpv1_header* header = getHeader();
 	if (header->messageType != PCPP_GTP_V1_GPDU_MESSAGE_TYPE)
 	{
 		// this is a GTP-C message, hence it is the last layer
 		return;
 	}
 
 	if (m_DataLen <= headerLen)
 	{
 		// no data beyond headerLen, nothing to parse further
 		return;
 	}
 
 	// GTP-U message, try to parse the next layer
 
 	uint8_t* payload = (uint8_t*)(m_Data + headerLen);
 	size_t payloadLen = m_DataLen - headerLen;
 
 	uint8_t subProto = *payload;
 	if (subProto >= 0x45 && subProto <= 0x4e)
 	{
 		m_NextLayer = IPv4Layer::isDataValid(payload, payloadLen)
 			? static_cast<Layer*>(new IPv4Layer(payload, payloadLen, this, m_Packet))
 			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 	}
 	else if ((subProto & 0xf0) == 0x60)
 	{
-		m_NextLayer = new IPv6Layer(payload, payloadLen, this, m_Packet);
+		m_NextLayer = IPv6Layer::isDataValid(payload, payloadLen)
+			? static_cast<Layer*>(new IPv6Layer(payload, payloadLen, this, m_Packet))
+			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 	}
 	else
 	{
 		m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 	}
 }
diff --git a/Packet++/src/IPv6Layer.cpp b/Packet++/src/IPv6Layer.cpp
index 92e1232a..6aa72e3c 100644
--- a/Packet++/src/IPv6Layer.cpp
+++ b/Packet++/src/IPv6Layer.cpp
@@ -192,63 +192,63 @@ bool IPv6Layer::isFragment() const
 void IPv6Layer::parseNextLayer()
 {
 	size_t headerLen = getHeaderLen();
 
 	if (m_DataLen <= headerLen)
 		return;
 
 	uint8_t* payload = m_Data + headerLen;
 	size_t payloadLen = m_DataLen - headerLen;
 
 	uint8_t nextHdr;
 	if (m_LastExtension != NULL)
 	{
 		if (m_LastExtension->getExtensionType() == IPv6Extension::IPv6Fragmentation)
 		{
 			m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 			return;
 		}
 
 		nextHdr = m_LastExtension->getBaseHeader()->nextHeader;
 	}
 	else
 	{
 		nextHdr = getIPv6Header()->nextHeader;
 	}
 
 	switch (nextHdr)
 	{
 	case PACKETPP_IPPROTO_UDP:
 		m_NextLayer = new UdpLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PACKETPP_IPPROTO_TCP:
 		m_NextLayer = TcpLayer::isDataValid(payload, payloadLen)
 			? static_cast<Layer*>(new TcpLayer(payload, payloadLen, this, m_Packet))
 			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	case PACKETPP_IPPROTO_IPIP:
 	{
 		uint8_t ipVersion = *payload >> 4;
 		if (ipVersion == 4 && IPv4Layer::isDataValid(payload, payloadLen))
 			m_NextLayer = new IPv4Layer(payload, payloadLen, this, m_Packet);
-		else if (ipVersion == 6)
+		else if (ipVersion == 6 && IPv6Layer::isDataValid(payload, payloadLen))
 			m_NextLayer = new IPv6Layer(payload, payloadLen, this, m_Packet);
 		else
 			m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 		break;
 	}
 	case PACKETPP_IPPROTO_GRE:
 	{
 		ProtocolType greVer = GreLayer::getGREVersion(payload, payloadLen);
 		if (greVer == GREv0)
 			m_NextLayer = new GREv0Layer(payload, payloadLen, this, m_Packet);
 		else if (greVer == GREv1)
 			m_NextLayer = new GREv1Layer(payload, payloadLen, this, m_Packet);
 		else
 			m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 		break;
 	}
 	default:
 		m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 		return;
 	}
 }
diff --git a/Packet++/src/MplsLayer.cpp b/Packet++/src/MplsLayer.cpp
index af02de13..155e423b 100644
--- a/Packet++/src/MplsLayer.cpp
+++ b/Packet++/src/MplsLayer.cpp
@@ -103,30 +103,32 @@ bool MplsLayer::setMplsLabel(uint32_t label)
 void MplsLayer::parseNextLayer()
 {
 	size_t headerLen = getHeaderLen();
 	if (m_DataLen < headerLen + 1)
 		return;
 
 	uint8_t* payload = m_Data + sizeof(mpls_header);
 	size_t payloadLen = m_DataLen - sizeof(mpls_header);
 
 	if (!isBottomOfStack())
 	{
 		m_NextLayer = new MplsLayer(payload, payloadLen, this, m_Packet);
 		return;
 	}
 
 	uint8_t nextNibble = (*((uint8_t*)(m_Data + headerLen)) & 0xF0) >> 4;
 	switch (nextNibble)
 	{
 		case 4:
 			m_NextLayer = IPv4Layer::isDataValid(payload, payloadLen)
 				? static_cast<Layer*>(new IPv4Layer(payload, payloadLen, this, m_Packet))
 				: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 			break;
 		case 6:
-			m_NextLayer = new IPv6Layer(payload, payloadLen, this, m_Packet);
+			m_NextLayer = IPv6Layer::isDataValid(payload, payloadLen)
+				? static_cast<Layer*>(new IPv6Layer(payload, payloadLen, this, m_Packet))
+				: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 			break;
 		default:
 			m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 	}
 }
diff --git a/Packet++/src/NullLoopbackLayer.cpp b/Packet++/src/NullLoopbackLayer.cpp
index 1bd89eba..4d1ce659 100644
--- a/Packet++/src/NullLoopbackLayer.cpp
+++ b/Packet++/src/NullLoopbackLayer.cpp
@@ -53,21 +53,23 @@ void NullLoopbackLayer::setFamily(uint32_t family)
 void NullLoopbackLayer::parseNextLayer()
 {
 	uint8_t* payload = m_Data + sizeof(uint32_t);
 	size_t payloadLen = m_DataLen - sizeof(uint32_t);
 
 	switch (getFamily())
 	{
 	case PCPP_BSD_AF_INET:
 		m_NextLayer = IPv4Layer::isDataValid(payload, payloadLen)
 			? static_cast<Layer*>(new IPv4Layer(payload, payloadLen, this, m_Packet))
 			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	case PCPP_BSD_AF_INET6_BSD:
 	case PCPP_BSD_AF_INET6_FREEBSD:
 	case PCPP_BSD_AF_INET6_DARWIN:
-		m_NextLayer = new IPv6Layer(payload, payloadLen, this, m_Packet);
+		m_NextLayer = IPv6Layer::isDataValid(payload, payloadLen)
+			? static_cast<Layer*>(new IPv6Layer(payload, payloadLen, this, m_Packet))
+			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	default:
 		m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 	}
 }
diff --git a/Packet++/src/PPPoELayer.cpp b/Packet++/src/PPPoELayer.cpp
index db65fd0c..1e8d98ca 100644
--- a/Packet++/src/PPPoELayer.cpp
+++ b/Packet++/src/PPPoELayer.cpp
@@ -45,25 +45,27 @@ void PPPoELayer::computeCalculateFields()
 void PPPoESessionLayer::parseNextLayer()
 {
 	size_t headerLen = getHeaderLen();
 	if (m_DataLen <= headerLen)
 		return;
 
 	uint8_t* payload = m_Data + headerLen;
 	size_t payloadLen = m_DataLen - headerLen;
 
 	switch (getPPPNextProtocol())
 	{
 	case PCPP_PPP_IP:
 		m_NextLayer = IPv4Layer::isDataValid(payload, payloadLen)
 			? static_cast<Layer*>(new IPv4Layer(payload, payloadLen, this, m_Packet))
 			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	case PCPP_PPP_IPV6:
-		m_NextLayer = new IPv6Layer(payload, payloadLen, this, m_Packet);
+		m_NextLayer = IPv6Layer::isDataValid(payload, payloadLen)
+			? static_cast<Layer*>(new IPv6Layer(payload, payloadLen, this, m_Packet))
+			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	default:
 		m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 		break;
 	}
 
 }
diff --git a/Packet++/src/Packet.cpp b/Packet++/src/Packet.cpp
index 9924346d..7715533b 100644
--- a/Packet++/src/Packet.cpp
+++ b/Packet++/src/Packet.cpp
@@ -678,55 +678,59 @@ std::string Packet::printPacketInfo(bool timeAsLocalTime) const
 
 Layer* Packet::createFirstLayer(LinkLayerType linkType)
 {
+	size_t rawDataLen = (size_t)m_RawPacket->getRawDataLen();
+	const uint8_t* rawData = m_RawPacket->getRawData();
+
 	if (linkType == LINKTYPE_ETHERNET)
 	{
 		// In order to distinguish between Ethernet II and IEEE 802.3 Ethernet the common method is
 		// to check the length field. In IEEE 802.3 Ethernet the length value should be equal or 
 		// less than 0x5DC which corresponds to 1500 bytes. If the value is larger than 0x5DC
 		// it means the value is an Ether Type which belongs to Ethernet II.
 		// You can read more in this link:
 		// https://www.ibm.com/support/pages/ethernet-version-2-versus-ieee-8023-ethernet
-
-		size_t rawDataLen = (size_t)m_RawPacket->getRawDataLen();
-		const uint8_t* rawData = m_RawPacket->getRawData();
 		if (rawDataLen >= sizeof(ether_header))
 		{
 			uint16_t ethTypeOrLength = be16toh(*(uint16_t*)(rawData + 12));
 			if (ethTypeOrLength <= (uint16_t)0x5dc && ethTypeOrLength != 0)
 			{
 				return new EthDot3Layer((uint8_t*)rawData, rawDataLen, this);
 			}
 		}
 		
 		return new EthLayer((uint8_t*)rawData, rawDataLen, this);
 	}
 	else if (linkType == LINKTYPE_LINUX_SLL)
 	{
-		return new SllLayer((uint8_t*)m_RawPacket->getRawData(), m_RawPacket->getRawDataLen(), this);
+		return new SllLayer((uint8_t*)rawData, rawDataLen, this);
 	}
 	else if (linkType == LINKTYPE_NULL)
 	{
-		return new NullLoopbackLayer((uint8_t*)m_RawPacket->getRawData(), m_RawPacket->getRawDataLen(), this);
+		return new NullLoopbackLayer((uint8_t*)rawData, rawDataLen, this);
 	}
 	else if (linkType == LINKTYPE_RAW || linkType == LINKTYPE_DLT_RAW1 || linkType == LINKTYPE_DLT_RAW2)
 	{
-		uint8_t ipVer = m_RawPacket->getRawData()[0] & 0xf0;
+		uint8_t ipVer = rawData[0] & 0xf0;
 		if (ipVer == 0x40)
 		{
-			return new IPv4Layer((uint8_t*)m_RawPacket->getRawData(), m_RawPacket->getRawDataLen(), NULL, this);
+			return IPv4Layer::isDataValid(rawData, rawDataLen)
+				? static_cast<Layer*>(new IPv4Layer((uint8_t*)rawData, rawDataLen, NULL, this))
+				: static_cast<Layer*>(new PayloadLayer((uint8_t*)rawData, rawDataLen, NULL, this));
 		}
 		else if (ipVer == 0x60)
 		{
-			return new IPv6Layer((uint8_t*)m_RawPacket->getRawData(), m_RawPacket->getRawDataLen(), NULL, this);
+			return IPv6Layer::isDataValid(rawData, rawDataLen)
+				? static_cast<Layer*>(new IPv6Layer((uint8_t*)rawData, rawDataLen, NULL, this))
+				: static_cast<Layer*>(new PayloadLayer((uint8_t*)rawData, rawDataLen, NULL, this));
 		}
 		else
 		{
-			return new PayloadLayer((uint8_t*)m_RawPacket->getRawData(), m_RawPacket->getRawDataLen(), NULL, this);
+			return new PayloadLayer((uint8_t*)rawData, rawDataLen, NULL, this);
 		}
 	}
 
 	// unknown link type
-	return new EthLayer((uint8_t*)m_RawPacket->getRawData(), m_RawPacket->getRawDataLen(), this);
+	return new EthLayer((uint8_t*)rawData, rawDataLen, this);
 }
 
 std::string Packet::toString(bool timeAsLocalTime)
diff --git a/Packet++/src/SllLayer.cpp b/Packet++/src/SllLayer.cpp
index 2a7b969c..012de021 100644
--- a/Packet++/src/SllLayer.cpp
+++ b/Packet++/src/SllLayer.cpp
@@ -58,39 +58,41 @@ bool SllLayer::setMacAddressAsLinkLayer(MacAddress macAddr)
 void SllLayer::parseNextLayer()
 {
 	if (m_DataLen <= sizeof(sll_header))
 		return;
 
 	uint8_t* payload = m_Data + sizeof(sll_header);
 	size_t payloadLen = m_DataLen - sizeof(sll_header);
 
 	sll_header* hdr = getSllHeader();
 	switch (be16toh(hdr->protocol_type))
 	{
 	case PCPP_ETHERTYPE_IP:
 		m_NextLayer = IPv4Layer::isDataValid(payload, payloadLen)
 			? static_cast<Layer*>(new IPv4Layer(payload, payloadLen, this, m_Packet))
 			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	case PCPP_ETHERTYPE_IPV6:
-		m_NextLayer = new IPv6Layer(payload, payloadLen, this, m_Packet);
+		m_NextLayer = IPv6Layer::isDataValid(payload, payloadLen)
+			? static_cast<Layer*>(new IPv6Layer(payload, payloadLen, this, m_Packet))
+			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	case PCPP_ETHERTYPE_ARP:
 		m_NextLayer = new ArpLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PCPP_ETHERTYPE_VLAN:
 		m_NextLayer = new VlanLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PCPP_ETHERTYPE_PPPOES:
 		m_NextLayer = new PPPoESessionLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PCPP_ETHERTYPE_PPPOED:
 		m_NextLayer = new PPPoEDiscoveryLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PCPP_ETHERTYPE_MPLS:
 		m_NextLayer = new MplsLayer(payload, payloadLen, this, m_Packet);
 		break;
 	default:
 		m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 	}
 
 }
diff --git a/Packet++/src/VlanLayer.cpp b/Packet++/src/VlanLayer.cpp
index 6a512a67..f1db1068 100644
--- a/Packet++/src/VlanLayer.cpp
+++ b/Packet++/src/VlanLayer.cpp
@@ -56,38 +56,40 @@ void VlanLayer::setPriority(uint8_t priority) {
 void VlanLayer::parseNextLayer()
 {
 	if (m_DataLen <= sizeof(vlan_header))
 		return;
 	
 	uint8_t* payload = m_Data + sizeof(vlan_header);
 	size_t payloadLen = m_DataLen - sizeof(vlan_header);
 
 	vlan_header* hdr = getVlanHeader();
 	switch (be16toh(hdr->etherType))
 	{
 	case PCPP_ETHERTYPE_IP:
 		m_NextLayer = IPv4Layer::isDataValid(payload, payloadLen)
 			? static_cast<Layer*>(new IPv4Layer(payload, payloadLen, this, m_Packet))
 			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	case PCPP_ETHERTYPE_IPV6:
-		m_NextLayer = new IPv6Layer(payload, payloadLen, this, m_Packet);
+		m_NextLayer = IPv6Layer::isDataValid(payload, payloadLen)
+			? static_cast<Layer*>(new IPv6Layer(payload, payloadLen, this, m_Packet))
+			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	case PCPP_ETHERTYPE_ARP:
 		m_NextLayer = new ArpLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PCPP_ETHERTYPE_VLAN:
 		m_NextLayer = new VlanLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PCPP_ETHERTYPE_PPPOES:
 		m_NextLayer = new PPPoESessionLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PCPP_ETHERTYPE_PPPOED:
 		m_NextLayer = new PPPoEDiscoveryLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PCPP_ETHERTYPE_MPLS:
 		m_NextLayer = new MplsLayer(payload, payloadLen, this, m_Packet);
 		break;
 	default:
 		m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 	}
 }
diff --git a/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5766899836387328 b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5766899836387328
new file mode 100644
index 00000000..31e2a3ee
Binary files /dev/null and b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5766899836387328 differ
