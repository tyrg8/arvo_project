commit 8ea6216b85fef370bb9254545b07881faf74aac3
Author: Khaled Hosny <khaledhosny@eglug.org>
Date:   Fri Sep 11 06:54:22 2020 +0200

    [ots] Use Table::ShouldSerialize() in more places
    
    If Table::ShouldSerialize() is false, return NULL in Font::GetTable() to
    avoid special handling of dropped tables all over the place.

diff --git a/src/ots.cc b/src/ots.cc
index a37bbcc..904085d 100644
--- a/src/ots.cc
+++ b/src/ots.cc
@@ -581,282 +581,282 @@ bool GetTableData(const uint8_t *data,
 bool ProcessGeneric(ots::FontFile *header,
                     ots::Font *font,
                     uint32_t signature,
                     ots::OTSStream *output,
                     const uint8_t *data, size_t length,
                     const std::vector<ots::TableEntry>& tables,
                     ots::Buffer& file) {
   const size_t data_offset = file.offset();
 
   uint32_t uncompressed_sum = 0;
 
   for (unsigned i = 0; i < font->num_tables; ++i) {
     // the tables must be sorted by tag (when taken as big-endian numbers).
     // This also remove the possibility of duplicate tables.
     if (i) {
       const uint32_t this_tag = tables[i].tag;
       const uint32_t prev_tag = tables[i - 1].tag;
       if (this_tag <= prev_tag) {
         OTS_WARNING_MSG_HDR("Table directory is not correctly ordered");
       }
     }
 
     // all tag names must be built from printable ASCII characters
     if (!ots::CheckTag(tables[i].tag)) {
       OTS_WARNING_MSG_HDR("Invalid table tag: 0x%X", tables[i].tag);
     }
 
     // tables must be 4-byte aligned
     if (tables[i].offset & 3) {
       return OTS_FAILURE_MSG_TAG("misaligned table", tables[i].tag);
     }
 
     // and must be within the file
     if (tables[i].offset < data_offset || tables[i].offset >= length) {
       return OTS_FAILURE_MSG_TAG("invalid table offset", tables[i].tag);
     }
     // disallow all tables with a zero length
     if (tables[i].length < 1) {
       // Note: malayalam.ttf has zero length CVT table...
       return OTS_FAILURE_MSG_TAG("zero-length table", tables[i].tag);
     }
     // disallow all tables with a length > 1GB
     if (tables[i].length > 1024 * 1024 * 1024) {
       return OTS_FAILURE_MSG_TAG("table length exceeds 1GB", tables[i].tag);
     }
     // disallow tables where the uncompressed size is < the compressed size.
     if (tables[i].uncompressed_length < tables[i].length) {
       return OTS_FAILURE_MSG_TAG("invalid compressed table", tables[i].tag);
     }
     if (tables[i].uncompressed_length > tables[i].length) {
       // We'll probably be decompressing this table.
 
       // disallow all tables which uncompress to > 30 MB
       if (tables[i].uncompressed_length > 30 * 1024 * 1024) {
         return OTS_FAILURE_MSG_TAG("uncompressed length exceeds 30MB", tables[i].tag);
       }
       if (uncompressed_sum + tables[i].uncompressed_length < uncompressed_sum) {
         return OTS_FAILURE_MSG_TAG("overflow of uncompressed sum", tables[i].tag);
       }
 
       uncompressed_sum += tables[i].uncompressed_length;
     }
     // since we required that the file be < 1GB in length, and that the table
     // length is < 1GB, the following addtion doesn't overflow
     uint32_t end_byte = tables[i].offset + tables[i].length;
     // Tables in the WOFF file must be aligned 4-byte boundary.
     if (signature == OTS_TAG('w','O','F','F')) {
         end_byte = ots::Round4(end_byte);
     }
     if (!end_byte || end_byte > length) {
       return OTS_FAILURE_MSG_TAG("table overruns end of file", tables[i].tag);
     }
   }
 
   // All decompressed tables uncompressed must be <= 30MB.
   if (uncompressed_sum > 30 * 1024 * 1024) {
     return OTS_FAILURE_MSG_HDR("uncompressed sum exceeds 30MB");
   }
 
   // check that the tables are not overlapping.
   std::vector<std::pair<uint32_t, uint8_t> > overlap_checker;
   for (unsigned i = 0; i < font->num_tables; ++i) {
     overlap_checker.push_back(
         std::make_pair(tables[i].offset, static_cast<uint8_t>(1) /* start */));
     overlap_checker.push_back(
         std::make_pair(tables[i].offset + tables[i].length,
                        static_cast<uint8_t>(0) /* end */));
   }
   std::sort(overlap_checker.begin(), overlap_checker.end());
   int overlap_count = 0;
   for (unsigned i = 0; i < overlap_checker.size(); ++i) {
     overlap_count += (overlap_checker[i].second ? 1 : -1);
     if (overlap_count > 1) {
       return OTS_FAILURE_MSG_HDR("overlapping tables");
     }
   }
 
   std::map<uint32_t, ots::TableEntry> table_map;
   for (unsigned i = 0; i < font->num_tables; ++i) {
     table_map[tables[i].tag] = tables[i];
   }
 
   ots::Arena arena;
   // Parse known tables first as we need to parse them in specific order.
   for (unsigned i = 0; ; ++i) {
     if (supported_tables[i].tag == 0) break;
 
     uint32_t tag = supported_tables[i].tag;
     const auto &it = table_map.find(tag);
     if (it == table_map.cend()) {
       if (supported_tables[i].required) {
         return OTS_FAILURE_MSG_TAG("missing required table", tag);
       }
     } else {
       if (!font->ParseTable(it->second, data, arena)) {
         return OTS_FAILURE_MSG_TAG("Failed to parse table", tag);
       }
     }
   }
 
   // Then parse any tables left.
   for (const auto &table_entry : tables) {
     if (!font->GetTable(table_entry.tag)) {
       if (!font->ParseTable(table_entry, data, arena)) {
         return OTS_FAILURE_MSG_TAG("Failed to parse table", table_entry.tag);
       }
     }
   }
 
   ots::Table *glyf = font->GetTable(OTS_TAG_GLYF);
   ots::Table *loca = font->GetTable(OTS_TAG_LOCA);
   ots::Table *cff  = font->GetTable(OTS_TAG_CFF);
   ots::Table *cff2 = font->GetTable(OTS_TAG_CFF2);
 
   if (glyf && loca) {
     if (font->version != 0x000010000) {
       OTS_WARNING_MSG_HDR("wrong sfntVersion for glyph data");
       font->version = 0x000010000;
     }
     if (cff)
        cff->Drop("font contains both CFF and glyf/loca tables");
     if (cff2)
        cff2->Drop("font contains both CFF and glyf/loca tables");
   } else if (cff || cff2) {
     if (font->version != OTS_TAG('O','T','T','O')) {
       OTS_WARNING_MSG_HDR("wrong sfntVersion for glyph data");
       font->version = OTS_TAG('O','T','T','O');
     }
     if (glyf)
        glyf->Drop("font contains both CFF and glyf tables");
     if (loca)
        loca->Drop("font contains both CFF and loca tables");
   } else if (font->GetTable(OTS_TAG('C','B','D','T')) &&
              font->GetTable(OTS_TAG('C','B','L','C'))) {
       // We don't sanitize bitmap tables, but donâ€™t reject bitmap-only fonts if
       // we are asked to pass them thru.
   } else {
       return OTS_FAILURE_MSG_HDR("no supported glyph data table(s) present");
   }
 
   uint16_t num_output_tables = 0;
   for (const auto &it : table_map) {
     ots::Table *table = font->GetTable(it.first);
-    if (table != NULL && table->ShouldSerialize())
+    if (table)
       num_output_tables++;
   }
 
   uint16_t max_pow2 = 0;
   while (1u << (max_pow2 + 1) <= num_output_tables) {
     max_pow2++;
   }
   const uint16_t output_search_range = (1u << max_pow2) << 4;
 
   // most of the errors here are highly unlikely - they'd only occur if the
   // output stream returns a failure, e.g. lack of space to write
   output->ResetChecksum();
   if (!output->WriteU32(font->version) ||
       !output->WriteU16(num_output_tables) ||
       !output->WriteU16(output_search_range) ||
       !output->WriteU16(max_pow2) ||
       !output->WriteU16((num_output_tables << 4) - output_search_range)) {
     return OTS_FAILURE_MSG_HDR("error writing output");
   }
   const uint32_t offset_table_chksum = output->chksum();
 
   const size_t table_record_offset = output->Tell();
   if (!output->Pad(16 * num_output_tables)) {
     return OTS_FAILURE_MSG_HDR("error writing output");
   }
 
   std::vector<ots::TableEntry> out_tables;
 
   size_t head_table_offset = 0;
   for (const auto &it : table_map) {
     uint32_t input_offset = it.second.offset;
     const auto &ot = header->table_entries.find(input_offset);
     if (ot != header->table_entries.end()) {
       ots::TableEntry out = ot->second;
       if (out.tag == OTS_TAG('h','e','a','d')) {
         head_table_offset = out.offset;
       }
       out_tables.push_back(out);
     } else {
       ots::TableEntry out;
       out.tag = it.first;
       out.offset = output->Tell();
 
       if (out.tag == OTS_TAG('h','e','a','d')) {
         head_table_offset = out.offset;
       }
 
       ots::Table *table = font->GetTable(out.tag);
-      if (table != NULL && table->ShouldSerialize()) {
+      if (table) {
         output->ResetChecksum();
         if (!table->Serialize(output)) {
           return OTS_FAILURE_MSG_TAG("Failed to serialize table", out.tag);
         }
 
         const size_t end_offset = output->Tell();
         if (end_offset <= out.offset) {
           // paranoid check. |end_offset| is supposed to be greater than the offset,
           // as long as the Tell() interface is implemented correctly.
           return OTS_FAILURE_MSG_TAG("Table is empty or have -ve size", out.tag);
         }
         out.length = end_offset - out.offset;
 
         // align tables to four bytes
         if (!output->Pad((4 - (end_offset & 3)) % 4)) {
           return OTS_FAILURE_MSG_TAG("Failed to pad table to 4 bytes", out.tag);
         }
         out.chksum = output->chksum();
         out_tables.push_back(out);
         header->table_entries[input_offset] = out;
       }
     }
   }
 
   const size_t end_of_file = output->Tell();
 
   // Need to sort the output tables for inclusion in the file
   std::sort(out_tables.begin(), out_tables.end());
   if (!output->Seek(table_record_offset)) {
     return OTS_FAILURE_MSG_HDR("error writing output");
   }
 
   output->ResetChecksum();
   uint32_t tables_chksum = 0;
   for (unsigned i = 0; i < out_tables.size(); ++i) {
     if (!output->WriteU32(out_tables[i].tag) ||
         !output->WriteU32(out_tables[i].chksum) ||
         !output->WriteU32(out_tables[i].offset) ||
         !output->WriteU32(out_tables[i].length)) {
       return OTS_FAILURE_MSG_HDR("error writing output");
     }
     tables_chksum += out_tables[i].chksum;
   }
   const uint32_t table_record_chksum = output->chksum();
 
   // http://www.microsoft.com/typography/otspec/otff.htm
   const uint32_t file_chksum
       = offset_table_chksum + tables_chksum + table_record_chksum;
   const uint32_t chksum_magic = static_cast<uint32_t>(0xb1b0afba) - file_chksum;
 
   // seek into the 'head' table and write in the checksum magic value
   if (!head_table_offset) {
     return OTS_FAILURE_MSG_HDR("internal error!");
   }
   if (!output->Seek(head_table_offset + 8)) {
     return OTS_FAILURE_MSG_HDR("error writing output");
   }
   if (!output->WriteU32(chksum_magic)) {
     return OTS_FAILURE_MSG_HDR("error writing output");
   }
 
   if (!output->Seek(end_of_file)) {
     return OTS_FAILURE_MSG_HDR("error writing output");
   }
 
   return true;
 }
 
 }  // namespace
@@ -873,119 +873,98 @@ FontFile::~FontFile() {
 bool Font::ParseTable(const TableEntry& table_entry, const uint8_t* data,
                       Arena &arena) {
   uint32_t tag = table_entry.tag;
   TableAction action = GetTableAction(file, tag);
   if (action == TABLE_ACTION_DROP) {
     return true;
   }
 
   const auto &it = file->tables.find(table_entry);
   if (it != file->tables.end()) {
     m_tables[tag] = it->second;
     return true;
   }
 
-  if (dropped_variations && IsVariationTable(tag)) {
-    // If bad variation data was enountered and all variation tables
-    // are being dropped, then skip parsing the variation table.
-    file->context->Message(0,
-                           "Skipping parsing of variation table: %c%c%c%c.",
-                           OTS_UNTAG(tag));
-    return true;
-  }
-
-  if (dropped_variations && tag == OTS_TAG_CFF2) {
-    // The CFF2 table contains variation data whose parsing depends on successfull
-    // parsing of other variation tables such as FVAR. So if variation tables are
-    // being dropped then we cannot parse CFF2. There is currently no support
-    // for dropping the variation data from the CFF2 table so we must fail validation.
-    //
-    // See: https://github.com/khaledhosny/ots/issues/205
-    file->context->Message(0,
-                           "Cannot parse CFF2 due to variation data being dropped.");
-    return false;
-  }
-
   Table *table = NULL;
   bool ret = false;
 
   if (action == TABLE_ACTION_PASSTHRU) {
     table = new TablePassthru(this, tag);
   } else {
     switch (tag) {
       case OTS_TAG_AVAR: table = new OpenTypeAVAR(this, tag); break;
       case OTS_TAG_CFF:  table = new OpenTypeCFF(this,  tag); break;
       case OTS_TAG_CFF2: table = new OpenTypeCFF2(this, tag); break;
       case OTS_TAG_CMAP: table = new OpenTypeCMAP(this, tag); break;
       case OTS_TAG_CVAR: table = new OpenTypeCVAR(this, tag); break;
       case OTS_TAG_CVT:  table = new OpenTypeCVT(this,  tag); break;
       case OTS_TAG_FPGM: table = new OpenTypeFPGM(this, tag); break;
       case OTS_TAG_FVAR: table = new OpenTypeFVAR(this, tag); break;
       case OTS_TAG_GASP: table = new OpenTypeGASP(this, tag); break;
       case OTS_TAG_GDEF: table = new OpenTypeGDEF(this, tag); break;
       case OTS_TAG_GLYF: table = new OpenTypeGLYF(this, tag); break;
       case OTS_TAG_GPOS: table = new OpenTypeGPOS(this, tag); break;
       case OTS_TAG_GSUB: table = new OpenTypeGSUB(this, tag); break;
       case OTS_TAG_GVAR: table = new OpenTypeGVAR(this, tag); break;
       case OTS_TAG_HDMX: table = new OpenTypeHDMX(this, tag); break;
       case OTS_TAG_HEAD: table = new OpenTypeHEAD(this, tag); break;
       case OTS_TAG_HHEA: table = new OpenTypeHHEA(this, tag); break;
       case OTS_TAG_HMTX: table = new OpenTypeHMTX(this, tag); break;
       case OTS_TAG_HVAR: table = new OpenTypeHVAR(this, tag); break;
       case OTS_TAG_KERN: table = new OpenTypeKERN(this, tag); break;
       case OTS_TAG_LOCA: table = new OpenTypeLOCA(this, tag); break;
       case OTS_TAG_LTSH: table = new OpenTypeLTSH(this, tag); break;
       case OTS_TAG_MATH: table = new OpenTypeMATH(this, tag); break;
       case OTS_TAG_MAXP: table = new OpenTypeMAXP(this, tag); break;
       case OTS_TAG_MVAR: table = new OpenTypeMVAR(this, tag); break;
       case OTS_TAG_NAME: table = new OpenTypeNAME(this, tag); break;
       case OTS_TAG_OS2:  table = new OpenTypeOS2(this,  tag); break;
       case OTS_TAG_POST: table = new OpenTypePOST(this, tag); break;
       case OTS_TAG_PREP: table = new OpenTypePREP(this, tag); break;
       case OTS_TAG_STAT: table = new OpenTypeSTAT(this, tag); break;
       case OTS_TAG_VDMX: table = new OpenTypeVDMX(this, tag); break;
       case OTS_TAG_VHEA: table = new OpenTypeVHEA(this, tag); break;
       case OTS_TAG_VMTX: table = new OpenTypeVMTX(this, tag); break;
       case OTS_TAG_VORG: table = new OpenTypeVORG(this, tag); break;
       case OTS_TAG_VVAR: table = new OpenTypeVVAR(this, tag); break;
       // Graphite tables
 #ifdef OTS_GRAPHITE
       case OTS_TAG_FEAT: table = new OpenTypeFEAT(this, tag); break;
       case OTS_TAG_GLAT: table = new OpenTypeGLAT(this, tag); break;
       case OTS_TAG_GLOC: table = new OpenTypeGLOC(this, tag); break;
       case OTS_TAG_SILE: table = new OpenTypeSILE(this, tag); break;
       case OTS_TAG_SILF: table = new OpenTypeSILF(this, tag); break;
       case OTS_TAG_SILL: table = new OpenTypeSILL(this, tag); break;
 #endif
       default: break;
     }
   }
 
   if (table) {
     const uint8_t* table_data;
     size_t table_length;
 
     ret = GetTableData(data, table_entry, arena, &table_length, &table_data);
     if (ret) {
       // FIXME: Parsing some tables will fail if the table is not added to
       // m_tables first.
       m_tables[tag] = table;
       ret = table->Parse(table_data, table_length);
       if (ret)
         file->tables[table_entry] = table;
       else
         m_tables.erase(tag);
     }
   }
 
   if (!ret)
     delete table;
 
   return ret;
 }
 
 Table* Font::GetTable(uint32_t tag) const {
   const auto &it = m_tables.find(tag);
-  if (it != m_tables.end())
+  if (it != m_tables.end() && it->second && it->second->ShouldSerialize())
     return it->second;
   return NULL;
 }
@@ -1012,30 +991,20 @@ void Font::DropGraphite() {
   dropped_graphite = true;
 }
 
-bool Font::IsVariationTable(uint32_t tag) const {
-  return tag == OTS_TAG_AVAR ||
-      tag == OTS_TAG_CVAR ||
-      tag == OTS_TAG_FVAR ||
-      tag == OTS_TAG_GVAR ||
-      tag == OTS_TAG_HVAR ||
-      tag == OTS_TAG_MVAR ||
-      tag == OTS_TAG_STAT ||
-      tag == OTS_TAG_VVAR;
-}
-
 void Font::DropVariations() {
   file->context->Message(0, "Dropping all Variation tables");
-  std::map<uint32_t, Table*>::iterator it = m_tables.begin();
-  while (it != m_tables.end()) {
-    if (!IsVariationTable(it->first)) {
-      it++;
-      continue;
+  for (const std::pair<uint32_t, Table*> entry : m_tables) {
+    if (entry.first == OTS_TAG_AVAR ||
+        entry.first == OTS_TAG_CVAR ||
+        entry.first == OTS_TAG_FVAR ||
+        entry.first == OTS_TAG_GVAR ||
+        entry.first == OTS_TAG_HVAR ||
+        entry.first == OTS_TAG_MVAR ||
+        entry.first == OTS_TAG_STAT ||
+        entry.first == OTS_TAG_VVAR) {
+      entry.second->Drop("Discarding Variations table");
     }
-
-    it->second->Drop("Discarding Variations table");
-    it = m_tables.erase(it);
   }
-  dropped_variations = true;
 }
 
 bool Table::ShouldSerialize() {
diff --git a/src/ots.h b/src/ots.h
index 77d3b15..ffed63d 100644
--- a/src/ots.h
+++ b/src/ots.h
@@ -295,43 +295,39 @@ class TablePassthru : public Table {
 struct Font {
   explicit Font(FontFile *f)
       : file(f),
         version(0),
         num_tables(0),
         search_range(0),
         entry_selector(0),
         range_shift(0),
-        dropped_graphite(false),
-        dropped_variations(false) {
+        dropped_graphite(false) {
   }
 
   bool ParseTable(const TableEntry& tableinfo, const uint8_t* data,
                   Arena &arena);
   Table* GetTable(uint32_t tag) const;
 
   // This checks that the returned Table is actually of the correct subclass
   // for |tag|, so it can safely be downcast to the corresponding OpenTypeXXXX;
   // if not (i.e. if the table was treated as Passthru), it will return NULL.
   Table* GetTypedTable(uint32_t tag) const;
 
   // Drop all Graphite tables and don't parse new ones.
   void DropGraphite();
 
   // Drop all Variations tables and don't parse new ones.
   void DropVariations();
 
   FontFile *file;
 
   uint32_t version;
   uint16_t num_tables;
   uint16_t search_range;
   uint16_t entry_selector;
   uint16_t range_shift;
   bool dropped_graphite;
-  bool dropped_variations;
 
  private:
-  bool IsVariationTable(uint32_t tag) const;
-
   std::map<uint32_t, Table*> m_tables;
 };
 
diff --git a/src/post.cc b/src/post.cc
index 30d3969..2fb8972 100644
--- a/src/post.cc
+++ b/src/post.cc
@@ -121,58 +121,57 @@ bool OpenTypePOST::Parse(const uint8_t *data, size_t length) {
 
 bool OpenTypePOST::Serialize(OTSStream *out) {
   // OpenType with CFF glyphs must have v3 post table.
-  ots::Table *cff = GetFont()->GetTable(OTS_TAG_CFF);
-  if (cff && cff->ShouldSerialize() && this->version != 0x00030000) {
+  if (GetFont()->GetTable(OTS_TAG_CFF) && this->version != 0x00030000) {
     Warning("Only version supported for fonts with CFF table is 0x00030000"
             " not 0x%x", this->version);
     this->version = 0x00030000;
   }
 
   if (!out->WriteU32(this->version) ||
       !out->WriteU32(this->italic_angle) ||
       !out->WriteS16(this->underline) ||
       !out->WriteS16(this->underline_thickness) ||
       !out->WriteU32(this->is_fixed_pitch) ||
       !out->WriteU32(0) ||
       !out->WriteU32(0) ||
       !out->WriteU32(0) ||
       !out->WriteU32(0)) {
     return Error("Failed to write post header");
   }
 
   if (this->version != 0x00020000) {
     return true;  // v1.0 and v3.0 does not have glyph names.
   }
 
   const uint16_t num_indexes =
       static_cast<uint16_t>(this->glyph_name_index.size());
   if (num_indexes != this->glyph_name_index.size() ||
       !out->WriteU16(num_indexes)) {
     return Error("Failed to write number of indices");
   }
 
   for (uint16_t i = 0; i < num_indexes; ++i) {
     if (!out->WriteU16(this->glyph_name_index[i])) {
       return Error("Failed to write name index %d", i);
     }
   }
 
   // Now we just have to write out the strings in the correct order
   for (unsigned i = 0; i < this->names.size(); ++i) {
     const std::string& s = this->names[i];
     const uint8_t string_length = static_cast<uint8_t>(s.size());
     if (string_length != s.size() ||
         !out->Write(&string_length, 1)) {
       return Error("Failed to write string %d", i);
     }
     // Some ttf fonts (e.g., frank.ttf on Windows Vista) have zero-length name.
     // We allow them.
     if (string_length > 0 && !out->Write(s.data(), string_length)) {
       return Error("Failed to write string length for string %d", i);
     }
   }
 
   return true;
 }
 
 }  // namespace ots
