commit b78560fd372e01c11ca4f183f929d99b1f89f314
Author: Christian Göttsche <cgzones@googlemail.com>
Date:   Thu Dec 23 19:19:45 2021 +0100

    libsepol: check for valid sensitivity before lookup
    
    Check the sensitivity is valid and thus the lookup in the name array
    `p_sens_val_to_name` is valid.
    
    Found by oss-fuzz (#42729, #42730, #42735, #42741)
    
        ==54784==The signal is caused by a READ memory access.
            #0 0x5a10f3 in mls_semantic_level_expand ./selinux/libsepol/src/expand.c:934:11
            #1 0x53839e in policydb_user_cache ./selinux/libsepol/src/policydb.c:972:7
            #2 0x5c6325 in hashtab_map ./selinux/libsepol/src/hashtab.c:236:10
            #3 0x5392e9 in policydb_index_others ./selinux/libsepol/src/policydb.c:1274:6
            #4 0x53f90a in policydb_read ./selinux/libsepol/src/policydb.c:4496:6
            #5 0x50c679 in LLVMFuzzerTestOneInput ./selinux/libsepol/fuzz/binpolicy-fuzzer.c:35:6
            #6 0x4409e3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (./selinux/out/binpolicy-fuzzer+0x4409e3)
            #7 0x4295bf in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (./selinux/out/binpolicy-fuzzer+0x4295bf)
            #8 0x42f850 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (./selinux/out/binpolicy-fuzzer+0x42f850)
            #9 0x45b6d2 in main (./selinux/out/binpolicy-fuzzer+0x45b6d2)
            #10 0x7f059fcd71c9 in __libc_start_call_main csu/../sysdeps/nptl/libc_start_call_main.h:58:16
            #11 0x7f059fcd7277 in __libc_start_main csu/../csu/libc-start.c:409:3
            #12 0x423900 in _start (./out/binpolicy-fuzzer+0x423900)
    
    Signed-off-by: Christian Göttsche <cgzones@googlemail.com>

diff --git a/libsepol/src/expand.c b/libsepol/src/expand.c
index 8a7259a0..898e6b87 100644
--- a/libsepol/src/expand.c
+++ b/libsepol/src/expand.c
@@ -916,49 +916,53 @@ static int role_copy_callback(hashtab_key_t key, hashtab_datum_t datum,
 int mls_semantic_level_expand(mls_semantic_level_t * sl, mls_level_t * l,
 			      policydb_t * p, sepol_handle_t * h)
 {
 	mls_semantic_cat_t *cat;
 	level_datum_t *levdatum;
 	unsigned int i;
 
 	mls_level_init(l);
 
 	if (!p->mls)
 		return 0;
 
 	/* Required not declared. */
 	if (!sl->sens)
 		return 0;
 
+	/* Invalid sensitivity */
+	if (sl->sens > p->p_levels.nprim || !p->p_sens_val_to_name[sl->sens - 1])
+		return -1;
+
 	l->sens = sl->sens;
 	levdatum = (level_datum_t *) hashtab_search(p->p_levels.table,
 						    p->p_sens_val_to_name[l->sens - 1]);
 	if (!levdatum) {
 		ERR(h, "%s: Impossible situation found, nothing in p_levels.table.\n",
 		    __func__);
 		errno = ENOENT;
 		return -1;
 	}
 	for (cat = sl->cat; cat; cat = cat->next) {
 		if (cat->low > cat->high) {
 			ERR(h, "Category range is not valid %s.%s",
 			    p->p_cat_val_to_name[cat->low - 1],
 			    p->p_cat_val_to_name[cat->high - 1]);
 			return -1;
 		}
 		for (i = cat->low - 1; i < cat->high; i++) {
 			if (!ebitmap_get_bit(&levdatum->level->cat, i)) {
 				ERR(h, "Category %s can not be associated with "
 				    "level %s",
 				    p->p_cat_val_to_name[i],
 				    p->p_sens_val_to_name[l->sens - 1]);
 				return -1;
 			}
 			if (ebitmap_set_bit(&l->cat, i, 1)) {
 				ERR(h, "Out of memory!");
 				return -1;
 			}
 		}
 	}
 
 	return 0;
 }
