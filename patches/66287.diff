commit 25aa0e2e46fb177a77cc584427ce39fdb77a4226
Author: John Reiser <jreiser@BitWagon.com>
Date:   Thu Feb 8 19:32:03 2024 -0800

    un_asl_dynsym() should skip when !dynstr
    
    https://github.com/upx/upx/issues/785
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=66302
            modified:   p_lx_elf.cpp

diff --git a/src/p_lx_elf.cpp b/src/p_lx_elf.cpp
index a12757ab..e65ba036 100644
--- a/src/p_lx_elf.cpp
+++ b/src/p_lx_elf.cpp
@@ -6329,39 +6329,39 @@ void
 PackLinuxElf64::un_asl_dynsym( // ibuf has the input
     unsigned orig_file_size,
     OutputFile *fo  // else just leave in ibuf
 )
 {
     // un-Relocate dynsym (DT_SYMTAB) which is below xct_off
     dynstr = (char const *)elf_find_dynamic(Elf64_Dyn::DT_STRTAB);
     sec_dynsym = elf_find_section_type(Elf64_Shdr::SHT_DYNSYM);
-    if (sec_dynsym) {
+    if (dynstr && sec_dynsym) {
         upx_uint64_t const off_dynsym = get_te64(&sec_dynsym->sh_offset);
         upx_uint64_t const sz_dynsym  = get_te64(&sec_dynsym->sh_size);
         if (orig_file_size < sz_dynsym
         ||  orig_file_size < off_dynsym
         || (orig_file_size - off_dynsym) < sz_dynsym) {
             throwCantUnpack("bad SHT_DYNSYM");
         }
         Elf64_Sym *const sym0 = (Elf64_Sym *)ibuf.subref(
             "bad dynsym", off_dynsym, sz_dynsym);
         Elf64_Sym *sym = sym0;
         for (int j = sz_dynsym / sizeof(Elf64_Sym); --j>=0; ++sym) {
             upx_uint64_t symval = get_te64(&sym->st_value);
             unsigned symsec = get_te16(&sym->st_shndx);
             if (Elf64_Sym::SHN_UNDEF != symsec
             &&  Elf64_Sym::SHN_ABS   != symsec
             &&  xct_off <= symval) {
                 set_te64(&sym->st_value, symval - asl_delta);
             }
             if (Elf64_Sym::SHN_ABS == symsec && xct_off <= symval) {
                 adjABS(sym, 0ul - (unsigned long)asl_delta);
             }
         }
         if (fo) {
             unsigned pos = fo->tell();
             fo->seek(off_dynsym, SEEK_SET);
             fo->rewrite(sym0, sz_dynsym);
             fo->seek(pos, SEEK_SET);
         }
     }
 }
@@ -6370,62 +6370,62 @@ void
 PackLinuxElf32::un_asl_dynsym( // ibuf has the input
     unsigned orig_file_size,
     OutputFile *fo  // else just leave in ibuf
 )
 {
     // un-Relocate dynsym (DT_SYMTAB) which is below xct_off
     dynstr = (char const *)elf_find_dynamic(Elf32_Dyn::DT_STRTAB);
     sec_dynsym = elf_find_section_type(Elf32_Shdr::SHT_DYNSYM);
-    if (sec_dynsym) {
+    if (dynstr && sec_dynsym) {
         upx_uint32_t const off_dynsym = get_te32(&sec_dynsym->sh_offset);
         upx_uint32_t const sz_dynsym  = get_te32(&sec_dynsym->sh_size);
         if (orig_file_size < sz_dynsym
         ||  orig_file_size < off_dynsym
         || (orig_file_size - off_dynsym) < sz_dynsym) {
             throwCantUnpack("bad SHT_DYNSYM");
         }
         Elf32_Sym *const sym0 = (Elf32_Sym *)ibuf.subref(
             "bad dynsym", off_dynsym, sz_dynsym);
         Elf32_Sym *sym = sym0;
         for (int j = sz_dynsym / sizeof(Elf32_Sym); --j>=0; ++sym) {
             upx_uint32_t symval = get_te32(&sym->st_value);
             unsigned symsec = get_te16(&sym->st_shndx);
             if (Elf32_Sym::SHN_UNDEF != symsec
             &&  Elf32_Sym::SHN_ABS   != symsec
             &&  xct_off <= symval) {
                 set_te32(&sym->st_value, symval - asl_delta);
             }
             if (Elf32_Sym::SHN_ABS == symsec && xct_off <= symval) {
                 adjABS(sym, 0u - (unsigned)asl_delta);
             }
         }
         if (fo) {
             unsigned pos = fo->tell();
             fo->seek(off_dynsym, SEEK_SET);
             fo->rewrite(sym0, sz_dynsym);
             fo->seek(pos, SEEK_SET);
         }
     }
 }
 
 // File layout of compressed .so (new-style: 3 or 4 PT_LOAD) shared library:
 // 1. new Elf headers: Ehdr, PT_LOAD (r-x), PT_LOAD (rw-, if any), non-PT_LOAD Phdrs
 // 2. Space for (original - 2) PT_LOAD Phdr
 // 3. Remaining original contents of file below xct_off
 // xct_off: (&lowest eXecutable Shdr section; in original PT_LOAD[0] or [1])
 // 3a. If --android-shlib, then 4KiB page of Shdr copy, etc.  (asl_pack2_Shdrs)
 //    And xct_off gets incremented by 4KiB at the right time.
 // 4. l_info (12 bytes)
 // overlay_offset:
 // 5. p_info (12 bytes)
 // 6. compressed original Elf headers (prefixed by b_info as usual)
 // 6a. un-compressed copy of input after Elf headers until xct_off.
 //    *user_init_rp has been modified if no DT_INIT
 // 7. compressed remainder of PT_LOAD above xct_off
 // 8. compressed read-only PT_LOAD above xct_off (if any)  // FIXME: check decompressor
 // 9. uncompressed Read-Write PT_LOAD (slide down N pages)
 // 10. int[6] tables for UPX runtime de-compressor
 // (new) DT_INIT:
 // 11. UPX runtime de-compressing loader
 // 12. compressed gaps between PT_LOADs (and EOF) above xct_off
 // 13. 32-byte pack header
 // 14. 4-byte overlay_offset
