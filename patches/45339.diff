commit 22f12ce58eb5f41d23bb205530034b29aac03700
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Fri Mar 18 15:03:44 2022 +0100

    Stop calling deprecated libxml2 init functions

diff --git a/libxslt/transform.c b/libxslt/transform.c
index 57f05bf7..2d8fd7f9 100644
--- a/libxslt/transform.c
+++ b/libxslt/transform.c
@@ -571,140 +571,139 @@ xsltTransformContextPtr
 xsltNewTransformContext(xsltStylesheetPtr style, xmlDocPtr doc) {
     xsltTransformContextPtr cur;
     xsltDocumentPtr docu;
     int i;
 
     xsltInitGlobals();
 
     cur = (xsltTransformContextPtr) xmlMalloc(sizeof(xsltTransformContext));
     if (cur == NULL) {
 	xsltTransformError(NULL, NULL, (xmlNodePtr)doc,
 		"xsltNewTransformContext : malloc failed\n");
 	return(NULL);
     }
     memset(cur, 0, sizeof(xsltTransformContext));
 
     cur->cache = xsltTransformCacheCreate();
     if (cur->cache == NULL)
 	goto internal_err;
     /*
      * setup of the dictionary must be done early as some of the
      * processing later like key handling may need it.
      */
     cur->dict = xmlDictCreateSub(style->dict);
     cur->internalized = ((style->internalized) && (cur->dict != NULL));
 #ifdef WITH_XSLT_DEBUG
     xsltGenericDebug(xsltGenericDebugContext,
 	     "Creating sub-dictionary from stylesheet for transformation\n");
 #endif
 
     /*
      * initialize the template stack
      */
     cur->templTab = (xsltTemplatePtr *)
 	        xmlMalloc(10 * sizeof(xsltTemplatePtr));
     if (cur->templTab == NULL) {
 	xsltTransformError(NULL, NULL, (xmlNodePtr) doc,
 		"xsltNewTransformContext: out of memory\n");
 	goto internal_err;
     }
     cur->templNr = 0;
     cur->templMax = 5;
     cur->templ = NULL;
     cur->maxTemplateDepth = xsltMaxDepth;
 
     /*
      * initialize the variables stack
      */
     cur->varsTab = (xsltStackElemPtr *)
 	        xmlMalloc(10 * sizeof(xsltStackElemPtr));
     if (cur->varsTab == NULL) {
         xmlGenericError(xmlGenericErrorContext,
 		"xsltNewTransformContext: out of memory\n");
 	goto internal_err;
     }
     cur->varsNr = 0;
     cur->varsMax = 10;
     cur->vars = NULL;
     cur->varsBase = 0;
     cur->maxTemplateVars = xsltMaxVars;
 
     /*
      * the profiling stack is not initialized by default
      */
     cur->profTab = NULL;
     cur->profNr = 0;
     cur->profMax = 0;
     cur->prof = 0;
 
     cur->style = style;
-    xmlXPathInit();
     cur->xpathCtxt = xmlXPathNewContext(doc);
     if (cur->xpathCtxt == NULL) {
 	xsltTransformError(NULL, NULL, (xmlNodePtr) doc,
 		"xsltNewTransformContext : xmlXPathNewContext failed\n");
 	goto internal_err;
     }
     /*
     * Create an XPath cache.
     */
     if (xmlXPathContextSetCache(cur->xpathCtxt, 1, -1, 0) == -1)
 	goto internal_err;
     /*
      * Initialize the extras array
      */
     if (style->extrasNr != 0) {
 	cur->extrasMax = style->extrasNr + 20;
 	cur->extras = (xsltRuntimeExtraPtr)
 	    xmlMalloc(cur->extrasMax * sizeof(xsltRuntimeExtra));
 	if (cur->extras == NULL) {
 	    xmlGenericError(xmlGenericErrorContext,
 		    "xsltNewTransformContext: out of memory\n");
 	    goto internal_err;
 	}
 	cur->extrasNr = style->extrasNr;
 	for (i = 0;i < cur->extrasMax;i++) {
 	    cur->extras[i].info = NULL;
 	    cur->extras[i].deallocate = NULL;
 	    cur->extras[i].val.ptr = NULL;
 	}
     } else {
 	cur->extras = NULL;
 	cur->extrasNr = 0;
 	cur->extrasMax = 0;
     }
 
     XSLT_REGISTER_VARIABLE_LOOKUP(cur);
     XSLT_REGISTER_FUNCTION_LOOKUP(cur);
     cur->xpathCtxt->nsHash = style->nsHash;
     /*
      * Initialize the registered external modules
      */
     xsltInitCtxtExts(cur);
     /*
      * Setup document element ordering for later efficiencies
      * (bug 133289)
      */
     if (xslDebugStatus == XSLT_DEBUG_NONE)
         xmlXPathOrderDocElems(doc);
     /*
      * Must set parserOptions before calling xsltNewDocument
      * (bug 164530)
      */
     cur->parserOptions = XSLT_PARSE_OPTIONS;
     docu = xsltNewDocument(cur, doc);
     if (docu == NULL) {
 	xsltTransformError(cur, NULL, (xmlNodePtr)doc,
 		"xsltNewTransformContext : xsltNewDocument failed\n");
 	goto internal_err;
     }
     docu->main = 1;
     cur->document = docu;
     cur->inst = NULL;
     cur->outputFile = NULL;
     cur->sec = xsltGetDefaultSecurityPrefs();
     cur->debugStatus = xslDebugStatus;
     cur->traceCode = (unsigned long*) &xsltDefaultTrace;
     cur->xinclude = xsltGetXIncludeDefault();
     cur->keyInitLevel = 0;
 
     return(cur);
diff --git a/python/libxslt.c b/python/libxslt.c
index 685e49d1..353939e3 100644
--- a/python/libxslt.c
+++ b/python/libxslt.c
@@ -1258,35 +1258,34 @@ PyObject* PyInit_libxsltmod(void){
 #else
 void initlibxsltmod(void) {
 #endif
     PyObject *m;
 
 #ifdef MERGED_MODULES
 #if PY_MAJOR_VERSION >= 3
     PyInit_libxml2mod();
 #else
     initlibxml2mod();
 #endif
 #endif
 
 #if PY_MAJOR_VERSION >= 3
     m = PyModule_Create(&moduledef);
 #else
     m = Py_InitModule((char *)"libxsltmod", libxsltMethods);
 #endif
     if (!m)
 	INITERROR;
     /*
      * Specific XSLT initializations
      */
     libxslt_xsltErrorInitialize();
-    xmlInitMemory();
     xmlLoadExtDtdDefaultValue = XML_DETECT_IDS | XML_COMPLETE_ATTRS;
     xmlDefaultSAXHandler.cdataBlock = NULL;
     /*
      * Register the EXSLT extensions and the test module
      */
     exsltRegisterAll();
 #if PY_MAJOR_VERSION >= 3
     return m;
 #endif
 }
diff --git a/tests/fuzz/fuzz.c b/tests/fuzz/fuzz.c
index 780c2d41..cf1e2383 100644
--- a/tests/fuzz/fuzz.c
+++ b/tests/fuzz/fuzz.c
@@ -53,19 +53,18 @@ static void
 xsltFuzzInit(void) {
     /* Init libxml2, libxslt and libexslt */
     xmlInitParser();
-    xmlXPathInit();
     xsltInit();
     exsltRegisterAll();
 
     /* Suppress error messages */
     xmlSetGenericErrorFunc(NULL, xsltFuzzXmlErrorFunc);
     xsltSetGenericErrorFunc(NULL, xsltFuzzXsltErrorFunc);
 
     /* Disallow I/O */
     sec = xsltNewSecurityPrefs();
     xsltSetSecurityPrefs(sec, XSLT_SECPREF_READ_FILE, xsltSecurityForbid);
     xsltSetSecurityPrefs(sec, XSLT_SECPREF_WRITE_FILE, xsltSecurityForbid);
     xsltSetSecurityPrefs(sec, XSLT_SECPREF_CREATE_DIRECTORY, xsltSecurityForbid);
     xsltSetSecurityPrefs(sec, XSLT_SECPREF_READ_NETWORK, xsltSecurityForbid);
     xsltSetSecurityPrefs(sec, XSLT_SECPREF_WRITE_NETWORK, xsltSecurityForbid);
 }
diff --git a/xsltproc/xsltproc.c b/xsltproc/xsltproc.c
index eec57bc5..5fd3a290 100644
--- a/xsltproc/xsltproc.c
+++ b/xsltproc/xsltproc.c
@@ -555,383 +555,382 @@ int
 main(int argc, char **argv)
 {
     int i;
     xsltStylesheetPtr cur = NULL;
     xmlDocPtr doc, style;
     xsltSecurityPrefsPtr sec = NULL;
 
     if (argc <= 1) {
         usage(argv[0]);
         return (1);
     }
 
     srand(time(NULL));
-    xmlInitMemory();
 
 #if defined(_WIN32) && !defined(__CYGINW__)
     setmode(fileno(stdout), O_BINARY);
     setmode(fileno(stderr), O_BINARY);
 #endif
 #if defined(_MSC_VER) && _MSC_VER < 1900
     _set_output_format(_TWO_DIGIT_EXPONENT);
 #endif
 
     LIBXML_TEST_VERSION
 
     sec = xsltNewSecurityPrefs();
     xsltSetDefaultSecurityPrefs(sec);
     defaultEntityLoader = xmlGetExternalEntityLoader();
     xmlSetExternalEntityLoader(xsltprocExternalEntityLoader);
 
     for (i = 1; i < argc; i++) {
         if (!strcmp(argv[i], "-"))
             break;
 
         if (argv[i][0] != '-')
             continue;
 #ifdef LIBXML_DEBUG_ENABLED
         if ((!strcmp(argv[i], "-debug")) || (!strcmp(argv[i], "--debug"))) {
             debug++;
         } else
 #endif
         if ((!strcmp(argv[i], "-v")) ||
                 (!strcmp(argv[i], "-verbose")) ||
                 (!strcmp(argv[i], "--verbose"))) {
             xsltSetGenericDebugFunc(stderr, NULL);
         } else if ((!strcmp(argv[i], "-o")) ||
                    (!strcmp(argv[i], "-output")) ||
                    (!strcmp(argv[i], "--output"))) {
             i++;
 #if defined(_WIN32) || defined (__CYGWIN__)
 	    output = (char *) xmlCanonicPath((xmlChar *) argv[i]);
             if (output == NULL)
 #endif
 		output = (char *) xmlStrdup((xmlChar *) argv[i]);
         } else if ((!strcmp(argv[i], "-V")) ||
                    (!strcmp(argv[i], "-version")) ||
                    (!strcmp(argv[i], "--version"))) {
             printf("Using libxml %s, libxslt %s and libexslt %s\n",
                    xmlParserVersion, xsltEngineVersion, exsltLibraryVersion);
             printf
     ("xsltproc was compiled against libxml %d, libxslt %d and libexslt %d\n",
                  LIBXML_VERSION, LIBXSLT_VERSION, LIBEXSLT_VERSION);
             printf("libxslt %d was compiled against libxml %d\n",
                    xsltLibxsltVersion, xsltLibxmlVersion);
             printf("libexslt %d was compiled against libxml %d\n",
                    exsltLibexsltVersion, exsltLibxmlVersion);
         } else if ((!strcmp(argv[i], "-repeat"))
                    || (!strcmp(argv[i], "--repeat"))) {
             if (repeat == 0)
                 repeat = 20;
             else
                 repeat = 100;
         } else if ((!strcmp(argv[i], "-novalid")) ||
                    (!strcmp(argv[i], "--novalid"))) {
             novalid++;
         } else if ((!strcmp(argv[i], "-nodtdattr")) ||
                    (!strcmp(argv[i], "--nodtdattr"))) {
             nodtdattr++;
         } else if ((!strcmp(argv[i], "-noout")) ||
                    (!strcmp(argv[i], "--noout"))) {
             noout++;
 #ifdef LIBXML_HTML_ENABLED
         } else if ((!strcmp(argv[i], "-html")) ||
                    (!strcmp(argv[i], "--html"))) {
             html++;
 #endif
 	} else if ((!strcmp(argv[i], "-encoding")) ||
 		   (!strcmp(argv[i], "--encoding"))) {
 	    encoding = argv[++i];
         } else if ((!strcmp(argv[i], "-timing")) ||
                    (!strcmp(argv[i], "--timing"))) {
             timing++;
         } else if ((!strcmp(argv[i], "-profile")) ||
                    (!strcmp(argv[i], "--profile"))) {
             profile++;
         } else if ((!strcmp(argv[i], "-nodict")) ||
                    (!strcmp(argv[i], "--nodict"))) {
             nodict++;
         } else if ((!strcmp(argv[i], "-norman")) ||
                    (!strcmp(argv[i], "--norman"))) {
             profile++;
         } else if ((!strcmp(argv[i], "-nonet")) ||
                    (!strcmp(argv[i], "--nonet"))) {
 	    defaultEntityLoader = xmlNoNetExternalEntityLoader;
         } else if ((!strcmp(argv[i], "-nowrite")) ||
                    (!strcmp(argv[i], "--nowrite"))) {
 	    xsltSetSecurityPrefs(sec, XSLT_SECPREF_WRITE_FILE,
 		                 xsltSecurityForbid);
 	    xsltSetSecurityPrefs(sec, XSLT_SECPREF_CREATE_DIRECTORY,
 		                 xsltSecurityForbid);
 	    xsltSetSecurityPrefs(sec, XSLT_SECPREF_WRITE_NETWORK,
 		                 xsltSecurityForbid);
         } else if ((!strcmp(argv[i], "-nomkdir")) ||
                    (!strcmp(argv[i], "--nomkdir"))) {
 	    xsltSetSecurityPrefs(sec, XSLT_SECPREF_CREATE_DIRECTORY,
 		                 xsltSecurityForbid);
         } else if ((!strcmp(argv[i], "-writesubtree")) ||
                    (!strcmp(argv[i], "--writesubtree"))) {
 	    i++;
 	    writesubtree = argv[i];
 	    xsltSetSecurityPrefs(sec, XSLT_SECPREF_WRITE_FILE,
 		                 xsltSubtreeCheck);
         } else if ((!strcmp(argv[i], "-path")) ||
                    (!strcmp(argv[i], "--path"))) {
 	    i++;
 	    parsePath(BAD_CAST argv[i]);
 #ifdef LIBXML_CATALOG_ENABLED
         } else if ((!strcmp(argv[i], "-catalogs")) ||
                    (!strcmp(argv[i], "--catalogs"))) {
             const char *catalogs;
 
             catalogs = getenv("SGML_CATALOG_FILES");
             if (catalogs == NULL) {
                 fprintf(stderr, "Variable $SGML_CATALOG_FILES not set\n");
             } else {
                 xmlLoadCatalogs(catalogs);
             }
 #endif
 #ifdef LIBXML_XINCLUDE_ENABLED
         } else if ((!strcmp(argv[i], "-xinclude")) ||
                    (!strcmp(argv[i], "--xinclude"))) {
             xinclude++;
         } else if ((!strcmp(argv[i], "-xincludestyle")) ||
                    (!strcmp(argv[i], "--xincludestyle"))) {
             xincludestyle++;
             xsltSetXIncludeDefault(1);
 #endif
         } else if ((!strcmp(argv[i], "-load-trace")) ||
                    (!strcmp(argv[i], "--load-trace"))) {
             load_trace++;
         } else if ((!strcmp(argv[i], "-param")) ||
                    (!strcmp(argv[i], "--param"))) {
             i++;
             params[nbparams++] = argv[i++];
             params[nbparams++] = argv[i];
             if (nbparams >= MAX_PARAMETERS) {
                 fprintf(stderr, "too many params increase MAX_PARAMETERS \n");
                 return (2);
             }
         } else if ((!strcmp(argv[i], "-stringparam")) ||
                    (!strcmp(argv[i], "--stringparam"))) {
 	    const xmlChar *string;
 	    xmlChar *value;
 
             i++;
             params[nbparams++] = argv[i++];
 	    string = (const xmlChar *) argv[i];
 	    if (xmlStrchr(string, '"')) {
 		if (xmlStrchr(string, '\'')) {
 		    fprintf(stderr,
 		    "stringparam contains both quote and double-quotes !\n");
 		    return(8);
 		}
 		value = xmlStrdup((const xmlChar *)"'");
 		value = xmlStrcat(value, string);
 		value = xmlStrcat(value, (const xmlChar *)"'");
 	    } else {
 		value = xmlStrdup((const xmlChar *)"\"");
 		value = xmlStrcat(value, string);
 		value = xmlStrcat(value, (const xmlChar *)"\"");
 	    }
 
             params[nbparams++] = (const char *) value;
 	    strparams[nbstrparams++] = value;
             if (nbparams >= MAX_PARAMETERS) {
                 fprintf(stderr, "too many params increase MAX_PARAMETERS \n");
                 return (2);
             }
         } else if ((!strcmp(argv[i], "-maxdepth")) ||
                    (!strcmp(argv[i], "--maxdepth"))) {
             int value;
 
             i++;
             if (i == argc) {
                 fprintf(stderr, "XSLT maxdepth value not specified!\n");
                 return (2);
             }
 
             if (sscanf(argv[i], "%d", &value) == 1) {
                 if (value > 0)
                     xsltMaxDepth = value;
             }
         } else if ((!strcmp(argv[i], "-maxvars")) ||
                    (!strcmp(argv[i], "--maxvars"))) {
             int value;
 
             i++;
             if (sscanf(argv[i], "%d", &value) == 1) {
                 if (value > 0)
                     xsltMaxVars = value;
             }
         } else if ((!strcmp(argv[i], "-maxparserdepth")) ||
                    (!strcmp(argv[i], "--maxparserdepth"))) {
             int value;
 
             i++;
             if (i == argc) {
                 fprintf(stderr, "XML maxparserdepth value not specified!\n");
                 return (2);
             }
 
             if (sscanf(argv[i], "%d", &value) == 1) {
                 if (value > 0)
                     xmlParserMaxDepth = value;
             }
         } else if ((!strcmp(argv[i], "-huge")) ||
                    (!strcmp(argv[i], "--huge"))) {
             options |= XML_PARSE_HUGE;
         } else if ((!strcmp(argv[i], "-seed-rand")) ||
                    (!strcmp(argv[i], "--seed-rand"))) {
             int value;
 
             i++;
             if (sscanf(argv[i], "%d", &value) == 1) {
                 if (value > 0)
                     srand(value);
             }
         } else if ((!strcmp(argv[i],"-dumpextensions"))||
 			(!strcmp(argv[i],"--dumpextensions"))) {
 		dumpextensions++;
 	} else {
             fprintf(stderr, "Unknown option %s\n", argv[i]);
             usage(argv[0]);
             return (3);
         }
     }
     params[nbparams] = NULL;
 
     if (novalid != 0)
 	options = XML_PARSE_NOENT | XML_PARSE_NOCDATA;
     else if (nodtdattr)
         options = XML_PARSE_NOENT | XML_PARSE_DTDLOAD | XML_PARSE_NOCDATA;
     if (nodict != 0)
         options |= XML_PARSE_NODICT;
 
     /*
      * Register the EXSLT extensions and the test module
      */
     exsltRegisterAll();
     xsltRegisterTestModule();
 
     if (dumpextensions)
 	xsltDebugDumpExtensions(NULL);
 
     for (i = 1; i < argc; i++) {
         if ((!strcmp(argv[i], "-maxdepth")) ||
             (!strcmp(argv[i], "--maxdepth"))) {
             i++;
             continue;
         } else if ((!strcmp(argv[i], "-maxvars")) ||
             (!strcmp(argv[i], "--maxvars"))) {
             i++;
             continue;
         } else if ((!strcmp(argv[i], "-maxparserdepth")) ||
             (!strcmp(argv[i], "--maxparserdepth"))) {
             i++;
             continue;
         } else if ((!strcmp(argv[i], "-seed-rand")) ||
             (!strcmp(argv[i], "--seed-rand"))) {
             i++;
             continue;
         } else if ((!strcmp(argv[i], "-o")) ||
                    (!strcmp(argv[i], "-output")) ||
                    (!strcmp(argv[i], "--output"))) {
             i++;
 	    continue;
 	} else if ((!strcmp(argv[i], "-encoding")) ||
 		   (!strcmp(argv[i], "--encoding"))) {
 	    i++;
 	    continue;
         } else if ((!strcmp(argv[i], "-writesubtree")) ||
                    (!strcmp(argv[i], "--writesubtree"))) {
             i++;
 	    continue;
         } else if ((!strcmp(argv[i], "-path")) ||
                    (!strcmp(argv[i], "--path"))) {
             i++;
 	    continue;
 	}
         if ((!strcmp(argv[i], "-param")) || (!strcmp(argv[i], "--param"))) {
             i += 2;
             continue;
         }
         if ((!strcmp(argv[i], "-stringparam")) ||
             (!strcmp(argv[i], "--stringparam"))) {
             i += 2;
             continue;
         }
         if ((argv[i][0] != '-') || (strcmp(argv[i], "-") == 0)) {
             if (timing)
                 startTimer();
 	    style = xmlReadFile((const char *) argv[i], NULL, options);
             if (timing)
 		endTimer("Parsing stylesheet %s", argv[i]);
 #ifdef LIBXML_XINCLUDE_ENABLED
 	    if (xincludestyle) {
 		if (style != NULL) {
 		    if (timing)
 			startTimer();
 #if LIBXML_VERSION >= 20603
 		    xmlXIncludeProcessFlags(style, XSLT_PARSE_OPTIONS);
 #else
 		    xmlXIncludeProcess(style);
 #endif
 		    if (timing) {
 			endTimer("XInclude processing %s", argv[i]);
 		    }
 		}
 	    }
 #endif
 	    if (style == NULL) {
 		fprintf(stderr,  "cannot parse %s\n", argv[i]);
 		cur = NULL;
 		errorno = 4;
 	    } else {
 		cur = xsltLoadStylesheetPI(style);
 		if (cur != NULL) {
 		    /* it is an embedded stylesheet */
 		    xsltProcess(style, cur, argv[i]);
 		    xsltFreeStylesheet(cur);
 		    cur = NULL;
 		    goto done;
 		}
 		cur = xsltParseStylesheetDoc(style);
 		if (cur != NULL) {
 		    if (cur->errors != 0) {
 			errorno = 5;
 			goto done;
 		    }
 		    i++;
 		} else {
 		    xmlFreeDoc(style);
 		    errorno = 5;
 		    goto done;
 		}
 	    }
             break;
 
         }
     }
 
 
     if ((cur != NULL) && (cur->errors == 0)) {
         for (; i < argc; i++) {
 	    doc = NULL;
             if (timing)
                 startTimer();
 #ifdef LIBXML_HTML_ENABLED
             if (html)
                 doc = htmlReadFile(argv[i], encoding, options);
             else
 #endif
                 doc = xmlReadFile(argv[i], encoding, options);
             if (doc == NULL) {
                 fprintf(stderr, "unable to parse %s\n", argv[i]);
 		errorno = 6;
                 continue;
             }
             if (timing)
 		endTimer("Parsing document %s", argv[i]);
 	    xsltProcess(doc, cur, argv[i]);
         }
     }
