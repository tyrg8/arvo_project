commit 0ce6d1e329a8949383ea5f28b32f096acc2f60d9
Author: tbeu <tbeu@users.noreply.github.com>
Date:   Fri Jan 22 19:39:12 2021 +0100

    Avoid uninitialized memory

diff --git a/src/mat73.c b/src/mat73.c
index 03156bb..c4bd141 100644
--- a/src/mat73.c
+++ b/src/mat73.c
@@ -653,84 +653,85 @@ static void
 Mat_H5ReadDatasetInfo(mat_t *mat,matvar_t *matvar,hid_t dset_id)
 {
     int err = 0;
     hid_t   attr_id,type_id;
     hsize_t nelems;
 
     Mat_H5ReadVarInfo(matvar, dset_id);
 
     matvar->dims = Mat_H5ReadDims(dset_id, &nelems, &matvar->rank);
     if ( NULL == matvar->dims ) {
         return;
     }
 
     /* Check for attribute that indicates an empty array */
     if ( H5Aexists_by_name(dset_id,".","MATLAB_empty",H5P_DEFAULT) ) {
         int empty = 0;
         attr_id = H5Aopen_by_name(dset_id,".","MATLAB_empty",H5P_DEFAULT,H5P_DEFAULT);
         /* FIXME: Check that dataspace is scalar */
         H5Aread(attr_id,H5T_NATIVE_INT,&empty);
         H5Aclose(attr_id);
         if ( empty ) {
             matvar->rank = matvar->dims[0];
             free(matvar->dims);
             matvar->dims = (size_t*)calloc(matvar->rank,sizeof(*matvar->dims));
             H5Dread(dset_id,SizeType2H5T(),H5S_ALL,H5S_ALL,H5P_DEFAULT,matvar->dims);
             {
                 size_t tmp = 1;
                 err = Mat_MulDims(matvar, &tmp);
                 nelems = (hsize_t)tmp;
             }
         }
     }
 
     /* Test if dataset type is compound and if so if it's complex */
     type_id = H5Dget_type(dset_id);
     if ( H5T_COMPOUND == H5Tget_class(type_id) ) {
         /* FIXME: Any more checks? */
         matvar->isComplex = MAT_F_COMPLEX;
     }
     H5Tclose(type_id);
 
     /* If the dataset is a cell array read the info of the cells */
     if ( MAT_C_CELL == matvar->class_type ) {
         matvar_t **cells;
-        hobj_ref_t *ref_ids;
 
         matvar->data_size = sizeof(matvar_t**);
         err |= Mul(&matvar->nbytes, nelems, matvar->data_size);
         if ( err ) {
             Mat_Critical("Integer multiplication overflow");
             return;
         }
         matvar->data = malloc(matvar->nbytes);
         if ( NULL == matvar->data ) {
             Mat_Critical("Couldn't allocate memory for the data");
             return;
         }
         cells = (matvar_t**)matvar->data;
 
         if ( nelems ) {
-            size_t i;
-            ref_ids = (hobj_ref_t*)malloc(nelems*sizeof(*ref_ids));
-            H5Dread(dset_id,H5T_STD_REF_OBJ,H5S_ALL,H5S_ALL,H5P_DEFAULT,ref_ids);
-            for ( i = 0; i < nelems; i++ ) {
-                hid_t ref_id;
-                cells[i] = Mat_VarCalloc();
-                cells[i]->internal->hdf5_ref = ref_ids[i];
-                /* Closing of ref_id is done in Mat_H5ReadNextReferenceInfo */
-                ref_id = H5RDEREFERENCE(dset_id,H5R_OBJECT,ref_ids+i);
-                cells[i]->internal->id = ref_id;
-                Mat_H5ReadNextReferenceInfo(ref_id,cells[i],mat);
+            hobj_ref_t *ref_ids = (hobj_ref_t*)calloc(nelems, sizeof(*ref_ids));
+            if ( ref_ids != NULL ) {
+                size_t i;
+                H5Dread(dset_id,H5T_STD_REF_OBJ,H5S_ALL,H5S_ALL,H5P_DEFAULT,ref_ids);
+                for ( i = 0; i < nelems; i++ ) {
+                    hid_t ref_id;
+                    cells[i] = Mat_VarCalloc();
+                    cells[i]->internal->hdf5_ref = ref_ids[i];
+                    /* Closing of ref_id is done in Mat_H5ReadNextReferenceInfo */
+                    ref_id = H5RDEREFERENCE(dset_id,H5R_OBJECT,ref_ids+i);
+                    cells[i]->internal->id = ref_id;
+                    Mat_H5ReadNextReferenceInfo(ref_id,cells[i],mat);
+                }
+                free(ref_ids);
             }
-            free(ref_ids);
         }
     } else if ( MAT_C_STRUCT == matvar->class_type ) {
         /* Empty structures can be a dataset */
 
         /* Check if the structure defines its fields in MATLAB_fields */
         if ( H5Aexists_by_name(dset_id,".","MATLAB_fields",H5P_DEFAULT) ) {
             hsize_t nfields;
             Mat_H5ReadFieldNames(matvar, dset_id, &nfields);
         }
     }
 }
@@ -739,221 +740,223 @@ static void
 Mat_H5ReadGroupInfo(mat_t *mat,matvar_t *matvar,hid_t dset_id)
 {
     int      fields_are_variables = 1;
     hsize_t  nfields=0,nelems;
     hid_t    attr_id,field_id;
     matvar_t **fields;
     H5O_type_t obj_type;
 
     Mat_H5ReadVarInfo(matvar,dset_id);
 
     /* Check if the variable is sparse */
     if ( H5Aexists_by_name(dset_id,".","MATLAB_sparse",H5P_DEFAULT) ) {
         hid_t sparse_dset_id;
         unsigned nrows = 0;
 
         attr_id = H5Aopen_by_name(dset_id,".","MATLAB_sparse",H5P_DEFAULT,H5P_DEFAULT);
         H5Aread(attr_id,H5T_NATIVE_UINT,&nrows);
         H5Aclose(attr_id);
 
         matvar->class_type = MAT_C_SPARSE;
 
         sparse_dset_id = H5Dopen(dset_id,"jc",H5P_DEFAULT);
         matvar->dims = Mat_H5ReadDims(sparse_dset_id, &nelems, &matvar->rank);
         H5Dclose(sparse_dset_id);
         if ( NULL != matvar->dims ) {
             if ( 1 == matvar->rank ) {
                 size_t* dims = (size_t*)realloc(matvar->dims, 2*sizeof(*matvar->dims));
                 if ( NULL != dims ) {
                     matvar->rank = 2;
                     matvar->dims = dims;
                 }
             }
             if ( 2 == matvar->rank ) {
                 matvar->dims[1] = matvar->dims[0] - 1;
                 matvar->dims[0] = nrows;
             }
         } else {
             return;
         }
 
         /* Test if dataset type is compound and if so if it's complex */
         if ( H5Lexists(dset_id,"data",H5P_DEFAULT) ) {
             hid_t type_id;
             sparse_dset_id = H5Dopen(dset_id,"data",H5P_DEFAULT);
             type_id = H5Dget_type(sparse_dset_id);
             if ( H5T_COMPOUND == H5Tget_class(type_id) ) {
                 /* FIXME: Any more checks? */
                 matvar->isComplex = MAT_F_COMPLEX;
             }
             H5Tclose(type_id);
             H5Dclose(sparse_dset_id);
         }
         return;
     }
 
     /* Check if the structure defines its fields in MATLAB_fields */
     if ( H5Aexists_by_name(dset_id,".","MATLAB_fields",H5P_DEFAULT) ) {
         Mat_H5ReadFieldNames(matvar, dset_id, &nfields);
     } else {
         H5G_info_t group_info;
         matvar->internal->num_fields = 0;
         group_info.nlinks = 0;
         H5Gget_info(dset_id, &group_info);
         if ( group_info.nlinks > 0 ) {
             struct ReadGroupInfoIterData group_data = {0, NULL};
             herr_t herr;
 
             /* First iteration to retrieve number of relevant links */
             herr = H5Literate_by_name(dset_id, matvar->internal->hdf5_name, H5_INDEX_NAME,
                 H5_ITER_NATIVE, NULL, Mat_H5ReadGroupInfoIterate,
                 (void *)&group_data, H5P_DEFAULT);
             if ( herr > 0 && group_data.nfields > 0 ) {
                 matvar->internal->fieldnames =
                     (char**)calloc((size_t)(group_data.nfields),sizeof(*matvar->internal->fieldnames));
                 group_data.nfields = 0;
                 group_data.matvar = matvar;
                 if ( matvar->internal->fieldnames != NULL ) {
                     /* Second iteration to fill fieldnames */
                     H5Literate_by_name(dset_id, matvar->internal->hdf5_name, H5_INDEX_NAME,
                         H5_ITER_NATIVE, NULL, Mat_H5ReadGroupInfoIterate,
                         (void *)&group_data, H5P_DEFAULT);
                 }
                 matvar->internal->num_fields = (unsigned)group_data.nfields;
                 nfields = group_data.nfields;
             }
         }
     }
 
     if ( nfields > 0 ) {
         H5O_INFO_T object_info;
         object_info.type = H5O_TYPE_UNKNOWN;
         H5OGET_INFO_BY_NAME(dset_id, matvar->internal->fieldnames[0], &object_info, H5P_DEFAULT);
         obj_type = object_info.type;
     } else {
         obj_type = H5O_TYPE_UNKNOWN;
     }
     if ( obj_type == H5O_TYPE_DATASET ) {
         hid_t field_type_id;
         field_id = H5Dopen(dset_id,matvar->internal->fieldnames[0],H5P_DEFAULT);
         field_type_id = H5Dget_type(field_id);
         if ( H5T_REFERENCE == H5Tget_class(field_type_id) ) {
             /* Check if the field has the MATLAB_class attribute. If so, it
              * means the structure is a scalar. Otherwise, the dimensions of
              * the field dataset is the dimensions of the structure
              */
             if ( H5Aexists_by_name(field_id,".","MATLAB_class",H5P_DEFAULT) ) {
                 matvar->rank = 2;
                 matvar->dims = (size_t*)malloc(2*sizeof(*matvar->dims));
                 if ( NULL != matvar->dims ) {
                     matvar->dims[0] = 1;
                     matvar->dims[1] = 1;
                     nelems = 1;
                 } else {
                     H5Tclose(field_type_id);
                     H5Dclose(field_id);
                     Mat_Critical("Error allocating memory for matvar->dims");
                     return;
                 }
             } else {
                 matvar->dims = Mat_H5ReadDims(field_id, &nelems, &matvar->rank);
                 if ( NULL != matvar->dims ) {
                     fields_are_variables = 0;
                 } else {
                     H5Tclose(field_type_id);
                     H5Dclose(field_id);
                     return;
                 }
             }
         } else {
             /* Structure should be a scalar */
             matvar->rank = 2;
             matvar->dims = (size_t*)malloc(2*sizeof(*matvar->dims));
             if ( NULL != matvar->dims ) {
                 matvar->dims[0] = 1;
                 matvar->dims[1] = 1;
                 nelems = 1;
             } else {
                 H5Tclose(field_type_id);
                 H5Dclose(field_id);
                 Mat_Critical("Error allocating memory for matvar->dims");
                 return;
             }
         }
         H5Tclose(field_type_id);
         H5Dclose(field_id);
     } else {
         /* Structure should be a scalar */
         matvar->rank = 2;
         matvar->dims = (size_t*)malloc(2*sizeof(*matvar->dims));
         if ( NULL != matvar->dims ) {
             matvar->dims[0] = 1;
             matvar->dims[1] = 1;
             nelems = 1;
         } else {
             Mat_Critical("Error allocating memory for matvar->dims");
             return;
         }
     }
 
     if ( nelems < 1 || nfields < 1 )
         return;
 
     matvar->data_size = sizeof(*fields);
     {
         int err;
         size_t nelems_x_nfields;
         err = Mul(&nelems_x_nfields, nelems, nfields);
         err |= Mul(&matvar->nbytes, nelems_x_nfields, matvar->data_size);
         if ( err ) {
             Mat_Critical("Integer multiplication overflow");
             matvar->nbytes = 0;
             return;
         }
     }
     fields = (matvar_t**)calloc(matvar->nbytes, 1);
     matvar->data = fields;
     if ( NULL != fields ) {
         hsize_t k;
         for ( k = 0; k < nfields; k++ ) {
             H5O_INFO_T object_info;
             fields[k] = NULL;
             object_info.type = H5O_TYPE_UNKNOWN;
             H5OGET_INFO_BY_NAME(dset_id, matvar->internal->fieldnames[k], &object_info, H5P_DEFAULT);
             if ( object_info.type == H5O_TYPE_DATASET ) {
                 field_id = H5Dopen(dset_id,matvar->internal->fieldnames[k], H5P_DEFAULT);
                 if ( !fields_are_variables ) {
-                    hsize_t l;
-                    hobj_ref_t *ref_ids = (hobj_ref_t*)malloc((size_t)nelems*sizeof(*ref_ids));
-                    H5Dread(field_id,H5T_STD_REF_OBJ,H5S_ALL,H5S_ALL,
-                            H5P_DEFAULT,ref_ids);
-                    for ( l = 0; l < nelems; l++ ) {
-                        hid_t ref_id;
-                        fields[l*nfields+k] = Mat_VarCalloc();
-                        fields[l*nfields+k]->name =
-                            strdup(matvar->internal->fieldnames[k]);
-                        fields[l*nfields+k]->internal->hdf5_ref=ref_ids[l];
-                        /* Closing of ref_id is done in Mat_H5ReadNextReferenceInfo */
-                        ref_id = H5RDEREFERENCE(field_id,H5R_OBJECT,ref_ids+l);
-                        fields[l*nfields+k]->internal->id = ref_id;
-                        Mat_H5ReadNextReferenceInfo(ref_id,fields[l*nfields+k],mat);
+                    hobj_ref_t *ref_ids = (hobj_ref_t*)calloc((size_t)nelems, sizeof(*ref_ids));
+                    if ( ref_ids != NULL ) {
+                        hsize_t l;
+                        H5Dread(field_id,H5T_STD_REF_OBJ,H5S_ALL,H5S_ALL,
+                                H5P_DEFAULT,ref_ids);
+                        for ( l = 0; l < nelems; l++ ) {
+                            hid_t ref_id;
+                            fields[l*nfields+k] = Mat_VarCalloc();
+                            fields[l*nfields+k]->name =
+                                strdup(matvar->internal->fieldnames[k]);
+                            fields[l*nfields+k]->internal->hdf5_ref=ref_ids[l];
+                            /* Closing of ref_id is done in Mat_H5ReadNextReferenceInfo */
+                            ref_id = H5RDEREFERENCE(field_id,H5R_OBJECT,ref_ids+l);
+                            fields[l*nfields+k]->internal->id = ref_id;
+                            Mat_H5ReadNextReferenceInfo(ref_id,fields[l*nfields+k],mat);
+                        }
+                        free(ref_ids);
                     }
-                    free(ref_ids);
                 } else {
                     fields[k] = Mat_VarCalloc();
                     fields[k]->name = strdup(matvar->internal->fieldnames[k]);
                     Mat_H5ReadDatasetInfo(mat,fields[k],field_id);
                 }
                 H5Dclose(field_id);
             } else if ( object_info.type == H5O_TYPE_GROUP ) {
                 field_id = H5Gopen(dset_id,matvar->internal->fieldnames[k],
                                    H5P_DEFAULT);
                 if ( -1 < field_id ) {
                     fields[k] = Mat_VarCalloc();
                     fields[k]->name = strdup(matvar->internal->fieldnames[k]);
                     Mat_H5ReadGroupInfo(mat,fields[k],field_id);
                     H5Gclose(field_id);
                 }
             }
         }
     }
 }
