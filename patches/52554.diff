commit 938105b572433e0772c507d434a8e7985e6cdf5d
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Fri Oct 21 15:56:12 2022 +0200

    Revert "xinclude: Fix regression with nested includes"
    
    This reverts commit 7f04e297318b1b908cec20711f74f75625afed7f which
    caused memory errors.
    
    See #424.

diff --git a/result/XInclude/issue424.xml b/result/XInclude/issue424.xml
deleted file mode 100644
index dc497fa9..00000000
--- a/result/XInclude/issue424.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0"?>
-<x xmlns:xinclude="http://www.w3.org/2001/XInclude">
-   <p>Something</p>
-   <d xmlns:xinclude="http://www.w3.org/2001/XInclude"><p>Something</p></d>
-   <d xmlns:xinclude="http://www.w3.org/2001/XInclude"><p>Something</p></d>
-</x>
diff --git a/result/XInclude/issue424.xml.rdr b/result/XInclude/issue424.xml.rdr
deleted file mode 100644
index 39c3b82a..00000000
--- a/result/XInclude/issue424.xml.rdr
+++ /dev/null
@@ -1,17 +0,0 @@
-0 1 x 0 0
-1 14 #text 0 1 
-   
-1 1 p 0 0
-2 3 #text 0 1 Something
-1 15 p 0 0
-1 14 #text 0 1 
-   
-1 1 d 0 0
-2 1 xinclude:include 1 0
-1 15 d 0 0
-1 14 #text 0 1 
-   
-1 1 xinclude:include 1 0
-1 14 #text 0 1 
-
-0 15 x 0 0
diff --git a/test/XInclude/docs/issue424.xml b/test/XInclude/docs/issue424.xml
deleted file mode 100644
index fc1cd6f3..00000000
--- a/test/XInclude/docs/issue424.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<x xmlns:xinclude="http://www.w3.org/2001/XInclude">
-   <p>Something</p>
-   <d xmlns:xinclude="http://www.w3.org/2001/XInclude"><xinclude:include xpointer="xpointer(//p)"/></d>
-   <xinclude:include xpointer="xpointer(//d)"/>
-</x>
diff --git a/xinclude.c b/xinclude.c
index e14176c6..93d7e525 100644
--- a/xinclude.c
+++ b/xinclude.c
@@ -55,12 +55,11 @@ typedef xmlXIncludeRef *xmlXIncludeRefPtr;
 struct _xmlXIncludeRef {
     xmlChar              *URI; /* the fully resolved resource URL */
     xmlChar         *fragment; /* the fragment in the URI */
     xmlDocPtr		  doc; /* the parsed document */
     xmlNodePtr            ref; /* the node making the reference in the source */
     xmlNodePtr            inc; /* the included copy */
     int                   xml; /* xml or txt */
     int                 count; /* how many refs use that specific doc */
-    xmlXPathObjectPtr    xptr; /* the xpointer if needed */
     int	             fallback; /* fallback was loaded */
     int		      emptyFb; /* flag to show fallback empty */
 };
@@ -199,30 +198,28 @@ static void
 xmlXIncludeFreeRef(xmlXIncludeRefPtr ref) {
     if (ref == NULL)
 	return;
 #ifdef DEBUG_XINCLUDE
     xmlGenericError(xmlGenericErrorContext, "Freeing ref\n");
 #endif
     if (ref->doc != NULL) {
 #ifdef DEBUG_XINCLUDE
 	xmlGenericError(xmlGenericErrorContext, "Freeing doc %s\n", ref->URI);
 #endif
 	xmlFreeDoc(ref->doc);
     }
     if (ref->URI != NULL)
 	xmlFree(ref->URI);
     if (ref->fragment != NULL)
 	xmlFree(ref->fragment);
-    if (ref->xptr != NULL)
-	xmlXPathFreeObject(ref->xptr);
     xmlFree(ref);
 }
 
 /**
  * xmlXIncludeNewRef:
  * @ctxt: the XInclude context
  * @URI:  the resource URI
  *
  * Creates a new reference within an XInclude context
  *
  * Returns the new set
  */
@@ -1420,140 +1417,140 @@ static int
 xmlXIncludeLoadDoc(xmlXIncludeCtxtPtr ctxt, const xmlChar *url, int nr) {
     xmlDocPtr doc;
     xmlURIPtr uri;
     xmlChar *URL;
     xmlChar *fragment = NULL;
     int i = 0;
 #ifdef LIBXML_XPTR_ENABLED
     int saveFlags;
 #endif
 
 #ifdef DEBUG_XINCLUDE
     xmlGenericError(xmlGenericErrorContext, "Loading doc %s:%d\n", url, nr);
 #endif
     /*
      * Check the URL and remove any fragment identifier
      */
     uri = xmlParseURI((const char *)url);
     if (uri == NULL) {
 	xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 	               XML_XINCLUDE_HREF_URI,
 		       "invalid value URI %s\n", url);
 	return(-1);
     }
     if (uri->fragment != NULL) {
 	fragment = (xmlChar *) uri->fragment;
 	uri->fragment = NULL;
     }
     if ((ctxt->incTab != NULL) && (ctxt->incTab[nr] != NULL) &&
         (ctxt->incTab[nr]->fragment != NULL)) {
 	if (fragment != NULL) xmlFree(fragment);
 	fragment = xmlStrdup(ctxt->incTab[nr]->fragment);
     }
     URL = xmlSaveUri(uri);
     xmlFreeURI(uri);
     if (URL == NULL) {
         if (ctxt->incTab != NULL)
 	    xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 			   XML_XINCLUDE_HREF_URI,
 			   "invalid value URI %s\n", url);
 	else
 	    xmlXIncludeErr(ctxt, NULL,
 			   XML_XINCLUDE_HREF_URI,
 			   "invalid value URI %s\n", url);
 	if (fragment != NULL)
 	    xmlFree(fragment);
 	return(-1);
     }
 
     /*
      * Handling of references to the local document are done
      * directly through ctxt->doc.
      */
     if ((URL[0] == 0) || (URL[0] == '#') ||
 	((ctxt->doc != NULL) && (xmlStrEqual(URL, ctxt->doc->URL)))) {
-	doc = NULL;
+	doc = ctxt->doc;
         goto loaded;
     }
 
     /*
      * Prevent reloading twice the document.
      */
     for (i = 0; i < ctxt->incNr; i++) {
 	if ((xmlStrEqual(URL, ctxt->incTab[i]->URI)) &&
 	    (ctxt->incTab[i]->doc != NULL)) {
 	    doc = ctxt->incTab[i]->doc;
 #ifdef DEBUG_XINCLUDE
 	    printf("Already loaded %s\n", URL);
 #endif
 	    goto loaded;
 	}
     }
 
     /*
      * Load it.
      */
 #ifdef DEBUG_XINCLUDE
     printf("loading %s\n", URL);
 #endif
 #ifdef LIBXML_XPTR_ENABLED
     /*
      * If this is an XPointer evaluation, we want to assure that
      * all entities have been resolved prior to processing the
      * referenced document
      */
     saveFlags = ctxt->parseFlags;
     if (fragment != NULL) {	/* if this is an XPointer eval */
 	ctxt->parseFlags |= XML_PARSE_NOENT;
     }
 #endif
 
     doc = xmlXIncludeParseFile(ctxt, (const char *)URL);
 #ifdef LIBXML_XPTR_ENABLED
     ctxt->parseFlags = saveFlags;
 #endif
     if (doc == NULL) {
 	xmlFree(URL);
 	if (fragment != NULL)
 	    xmlFree(fragment);
 	return(-1);
     }
     ctxt->incTab[nr]->doc = doc;
     /*
      * It's possible that the requested URL has been mapped to a
      * completely different location (e.g. through a catalog entry).
      * To check for this, we compare the URL with that of the doc
      * and change it if they disagree (bug 146988).
      */
    if (!xmlStrEqual(URL, doc->URL)) {
        xmlFree(URL);
        URL = xmlStrdup(doc->URL);
    }
     for (i = nr + 1; i < ctxt->incNr; i++) {
 	if (xmlStrEqual(URL, ctxt->incTab[i]->URI)) {
 	    ctxt->incTab[nr]->count++;
 #ifdef DEBUG_XINCLUDE
 	    printf("Increasing %s count since reused\n", URL);
 #endif
             break;
 	}
     }
 
     /*
      * Make sure we have all entities fixed up
      */
     xmlXIncludeMergeEntities(ctxt, ctxt->doc, doc);
 
     /*
      * We don't need the DTD anymore, free up space
     if (doc->intSubset != NULL) {
 	xmlUnlinkNode((xmlNodePtr) doc->intSubset);
 	xmlFreeNode((xmlNodePtr) doc->intSubset);
 	doc->intSubset = NULL;
     }
     if (doc->extSubset != NULL) {
 	xmlUnlinkNode((xmlNodePtr) doc->extSubset);
 	xmlFreeNode((xmlNodePtr) doc->extSubset);
 	doc->extSubset = NULL;
     }
      */
     xmlXIncludeRecurseDoc(ctxt, doc, URL);
@@ -1561,254 +1558,237 @@ xmlXIncludeLoadDoc(xmlXIncludeCtxtPtr ctxt, const xmlChar *url, int nr) {
 loaded:
     if (fragment == NULL) {
 	/*
 	 * Add the top children list as the replacement copy.
 	 */
-	if (doc == NULL)
-	{
-	    /* Hopefully a DTD declaration won't be copied from
-	     * the same document */
-	    ctxt->incTab[nr]->inc = xmlCopyNodeList(ctxt->doc->children);
-	} else {
-	    ctxt->incTab[nr]->inc = xmlXIncludeCopyNodeList(ctxt, ctxt->doc,
-		                                       doc, doc->children);
-	}
+	ctxt->incTab[nr]->inc = xmlXIncludeCopyNodeList(ctxt, ctxt->doc,
+		                                        doc, doc->children);
     }
 #ifdef LIBXML_XPTR_ENABLED
     else {
 	/*
 	 * Computes the XPointer expression and make a copy used
 	 * as the replacement copy.
 	 */
 	xmlXPathObjectPtr xptr;
 	xmlXPathContextPtr xptrctxt;
 	xmlNodeSetPtr set;
 
-	if (doc == NULL) {
-	    xptrctxt = xmlXPtrNewContext(ctxt->doc, ctxt->incTab[nr]->ref,
-		                         NULL);
-	} else {
-	    xptrctxt = xmlXPtrNewContext(doc, NULL, NULL);
-	}
+	xptrctxt = xmlXPtrNewContext(doc, NULL, NULL);
 	if (xptrctxt == NULL) {
 	    xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 	                   XML_XINCLUDE_XPTR_FAILED,
 			   "could not create XPointer context\n", NULL);
 	    xmlFree(URL);
 	    xmlFree(fragment);
 	    return(-1);
 	}
 	xptr = xmlXPtrEval(fragment, xptrctxt);
 	if (xptr == NULL) {
 	    xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 	                   XML_XINCLUDE_XPTR_FAILED,
 			   "XPointer evaluation failed: #%s\n",
 			   fragment);
 	    xmlXPathFreeContext(xptrctxt);
 	    xmlFree(URL);
 	    xmlFree(fragment);
 	    return(-1);
 	}
 	switch (xptr->type) {
 	    case XPATH_UNDEFINED:
 	    case XPATH_BOOLEAN:
 	    case XPATH_NUMBER:
 	    case XPATH_STRING:
 #ifdef LIBXML_XPTR_LOCS_ENABLED
 	    case XPATH_POINT:
 #endif
 	    case XPATH_USERS:
 	    case XPATH_XSLT_TREE:
 		xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 		               XML_XINCLUDE_XPTR_RESULT,
 			       "XPointer is not a range: #%s\n",
 			       fragment);
                 xmlXPathFreeObject(xptr);
 		xmlXPathFreeContext(xptrctxt);
 		xmlFree(URL);
 		xmlFree(fragment);
 		return(-1);
 	    case XPATH_NODESET:
 	        if ((xptr->nodesetval == NULL) ||
 		    (xptr->nodesetval->nodeNr <= 0)) {
                     xmlXPathFreeObject(xptr);
 		    xmlXPathFreeContext(xptrctxt);
 		    xmlFree(URL);
 		    xmlFree(fragment);
 		    return(-1);
 		}
 
 #ifdef LIBXML_XPTR_LOCS_ENABLED
 	    case XPATH_RANGE:
 	    case XPATH_LOCATIONSET:
 		break;
 #endif
 	}
 	set = xptr->nodesetval;
 	if (set != NULL) {
 	    for (i = 0;i < set->nodeNr;i++) {
 		if (set->nodeTab[i] == NULL)
 		    continue;
 		switch (set->nodeTab[i]->type) {
 		    case XML_ELEMENT_NODE:
 		    case XML_TEXT_NODE:
 		    case XML_CDATA_SECTION_NODE:
 		    case XML_ENTITY_REF_NODE:
 		    case XML_ENTITY_NODE:
 		    case XML_PI_NODE:
 		    case XML_COMMENT_NODE:
 		    case XML_DOCUMENT_NODE:
 		    case XML_HTML_DOCUMENT_NODE:
 			continue;
 
 		    case XML_ATTRIBUTE_NODE:
 			xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 			               XML_XINCLUDE_XPTR_RESULT,
 				       "XPointer selects an attribute: #%s\n",
 				       fragment);
 			set->nodeTab[i] = NULL;
 			continue;
 		    case XML_NAMESPACE_DECL:
 			xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 			               XML_XINCLUDE_XPTR_RESULT,
 				       "XPointer selects a namespace: #%s\n",
 				       fragment);
 			set->nodeTab[i] = NULL;
 			continue;
 		    case XML_DOCUMENT_TYPE_NODE:
 		    case XML_DOCUMENT_FRAG_NODE:
 		    case XML_NOTATION_NODE:
 		    case XML_DTD_NODE:
 		    case XML_ELEMENT_DECL:
 		    case XML_ATTRIBUTE_DECL:
 		    case XML_ENTITY_DECL:
 		    case XML_XINCLUDE_START:
 		    case XML_XINCLUDE_END:
 			xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 			               XML_XINCLUDE_XPTR_RESULT,
 				   "XPointer selects unexpected nodes: #%s\n",
 				       fragment);
 			set->nodeTab[i] = NULL;
 			set->nodeTab[i] = NULL;
 			continue; /* for */
 		}
 	    }
 	}
-	if (doc == NULL) {
-	    ctxt->incTab[nr]->xptr = xptr;
-	    ctxt->incTab[nr]->inc = NULL;
-	} else {
-	    ctxt->incTab[nr]->inc =
-		xmlXIncludeCopyXPointer(ctxt, ctxt->doc, doc, xptr);
-	    xmlXPathFreeObject(xptr);
-	}
+        ctxt->incTab[nr]->inc =
+            xmlXIncludeCopyXPointer(ctxt, ctxt->doc, doc, xptr);
+        xmlXPathFreeObject(xptr);
 	xmlXPathFreeContext(xptrctxt);
 	xmlFree(fragment);
     }
 #endif
 
     /*
      * Do the xml:base fixup if needed
      */
     if ((doc != NULL) && (URL != NULL) &&
         (!(ctxt->parseFlags & XML_PARSE_NOBASEFIX)) &&
 	(!(doc->parseFlags & XML_PARSE_NOBASEFIX))) {
 	xmlNodePtr node;
 	xmlChar *base;
 	xmlChar *curBase;
 
 	/*
 	 * The base is only adjusted if "necessary", i.e. if the xinclude node
 	 * has a base specified, or the URL is relative
 	 */
 	base = xmlGetNsProp(ctxt->incTab[nr]->ref, BAD_CAST "base",
 			XML_XML_NAMESPACE);
 	if (base == NULL) {
 	    /*
 	     * No xml:base on the xinclude node, so we check whether the
 	     * URI base is different than (relative to) the context base
 	     */
 	    curBase = xmlBuildRelativeURI(URL, ctxt->base);
 	    if (curBase == NULL) {	/* Error return */
 	        xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 	               XML_XINCLUDE_HREF_URI,
 		       "trying to build relative URI from %s\n", URL);
 	    } else {
 		/* If the URI doesn't contain a slash, it's not relative */
 	        if (!xmlStrchr(curBase, '/'))
 		    xmlFree(curBase);
 		else
 		    base = curBase;
 	    }
 	}
 	if (base != NULL) {	/* Adjustment may be needed */
 	    node = ctxt->incTab[nr]->inc;
 	    while (node != NULL) {
 		/* Only work on element nodes */
 		if (node->type == XML_ELEMENT_NODE) {
 		    curBase = xmlNodeGetBase(node->doc, node);
 		    /* If no current base, set it */
 		    if (curBase == NULL) {
 			xmlNodeSetBase(node, base);
 		    } else {
 			/*
 			 * If the current base is the same as the
 			 * URL of the document, then reset it to be
 			 * the specified xml:base or the relative URI
 			 */
 			if (xmlStrEqual(curBase, node->doc->URL)) {
 			    xmlNodeSetBase(node, base);
 			} else {
 			    /*
 			     * If the element already has an xml:base
 			     * set, then relativise it if necessary
 			     */
 			    xmlChar *xmlBase;
 			    xmlBase = xmlGetNsProp(node,
 					    BAD_CAST "base",
 					    XML_XML_NAMESPACE);
 			    if (xmlBase != NULL) {
 				xmlChar *relBase;
 				relBase = xmlBuildURI(xmlBase, base);
 				if (relBase == NULL) { /* error */
 				    xmlXIncludeErr(ctxt,
 						ctxt->incTab[nr]->ref,
 						XML_XINCLUDE_HREF_URI,
 					"trying to rebuild base from %s\n",
 						xmlBase);
 				} else {
 				    xmlNodeSetBase(node, relBase);
 				    xmlFree(relBase);
 				}
 				xmlFree(xmlBase);
 			    }
 			}
 			xmlFree(curBase);
 		    }
 		}
 	        node = node->next;
 	    }
 	    xmlFree(base);
 	}
     }
     if ((nr < ctxt->incNr) && (ctxt->incTab[nr]->doc != NULL) &&
 	(ctxt->incTab[nr]->count <= 1)) {
 #ifdef DEBUG_XINCLUDE
         printf("freeing %s\n", ctxt->incTab[nr]->doc->URL);
 #endif
 	xmlFreeDoc(ctxt->incTab[nr]->doc);
 	ctxt->incTab[nr]->doc = NULL;
     }
     xmlFree(URL);
     return(0);
 }
 
 /**
  * xmlXIncludeLoadTxt:
  * @ctxt:  the XInclude context
  * @url:  the associated URL
  * @nr:  the xinclude node number
  *
  * Load the content, and store the result in the XInclude context
  *
  * Returns 0 in case of success, -1 in case of failure
  */
@@ -2214,115 +2194,104 @@ static int
 xmlXIncludeIncludeNode(xmlXIncludeCtxtPtr ctxt, int nr) {
     xmlNodePtr cur, end, list, tmp;
 
     if (ctxt == NULL)
 	return(-1);
     if ((nr < 0) || (nr >= ctxt->incNr))
 	return(-1);
     cur = ctxt->incTab[nr]->ref;
     if ((cur == NULL) || (cur->type == XML_NAMESPACE_DECL))
 	return(-1);
 
-    /*
-     * If we stored an XPointer a late computation may be needed
-     */
-    if ((ctxt->incTab[nr]->inc == NULL) &&
-	(ctxt->incTab[nr]->xptr != NULL)) {
-	ctxt->incTab[nr]->inc =
-	    xmlXIncludeCopyXPointer(ctxt, ctxt->doc, ctxt->doc,
-		                    ctxt->incTab[nr]->xptr);
-	xmlXPathFreeObject(ctxt->incTab[nr]->xptr);
-	ctxt->incTab[nr]->xptr = NULL;
-    }
     list = ctxt->incTab[nr]->inc;
     ctxt->incTab[nr]->inc = NULL;
     ctxt->incTab[nr]->emptyFb = 0;
 
     /*
      * Check against the risk of generating a multi-rooted document
      */
     if ((cur->parent != NULL) &&
 	(cur->parent->type != XML_ELEMENT_NODE)) {
 	int nb_elem = 0;
 
 	tmp = list;
 	while (tmp != NULL) {
 	    if (tmp->type == XML_ELEMENT_NODE)
 		nb_elem++;
 	    tmp = tmp->next;
 	}
 	if (nb_elem > 1) {
 	    xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 	                   XML_XINCLUDE_MULTIPLE_ROOT,
 		       "XInclude error: would result in multiple root nodes\n",
 			   NULL);
             xmlFreeNodeList(list);
 	    return(-1);
 	}
     }
 
     if (ctxt->parseFlags & XML_PARSE_NOXINCNODE) {
 	/*
 	 * Add the list of nodes
 	 */
 	while (list != NULL) {
 	    end = list;
 	    list = list->next;
 
 	    xmlAddPrevSibling(cur, end);
 	}
         /*
          * FIXME: xmlUnlinkNode doesn't coalesce text nodes.
          */
 	xmlUnlinkNode(cur);
 	xmlFreeNode(cur);
     } else {
         xmlNodePtr child, next;
 
 	/*
 	 * Change the current node as an XInclude start one, and add an
 	 * XInclude end one
 	 */
         if (ctxt->incTab[nr]->fallback)
             xmlUnsetProp(cur, BAD_CAST "href");
 	cur->type = XML_XINCLUDE_START;
         /* Remove fallback children */
         for (child = cur->children; child != NULL; child = next) {
             next = child->next;
             xmlUnlinkNode(child);
             xmlFreeNode(child);
         }
 	end = xmlNewDocNode(cur->doc, cur->ns, cur->name, NULL);
 	if (end == NULL) {
 	    xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 	                   XML_XINCLUDE_BUILD_FAILED,
 			   "failed to build node\n", NULL);
             xmlFreeNodeList(list);
 	    return(-1);
 	}
 	end->type = XML_XINCLUDE_END;
 	xmlAddNextSibling(cur, end);
 
 	/*
 	 * Add the list of nodes
 	 */
 	while (list != NULL) {
 	    cur = list;
 	    list = list->next;
 
 	    xmlAddPrevSibling(end, cur);
 	}
     }
 
 
     return(0);
 }
 
 /**
  * xmlXIncludeTestNode:
  * @ctxt: the XInclude processing context
  * @node: an XInclude node
  *
  * test if the node is an XInclude node
  *
  * Returns 1 true, 0 otherwise
  */
@@ -2409,114 +2378,113 @@ static int
 xmlXIncludeDoProcess(xmlXIncludeCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr tree,
                      int skipRoot) {
     xmlNodePtr cur;
     int ret = 0;
     int i, start;
 
     if ((doc == NULL) || (tree == NULL) || (tree->type == XML_NAMESPACE_DECL))
 	return(-1);
     if ((skipRoot) && (tree->children == NULL))
         return(-1);
     if (ctxt == NULL)
 	return(-1);
 
     if (doc->URL != NULL) {
 	ret = xmlXIncludeURLPush(ctxt, doc->URL);
 	if (ret < 0)
 	    return(-1);
     }
     start = ctxt->incNr;
 
     /*
      * TODO: The phases must run separately for recursive inclusions.
      *
      * - Phase 1 should start with top-level XInclude nodes, load documents,
      *   execute XPointer expressions, then process only the result nodes
      *   (not whole document, see bug #324081) and only for phase 1
      *   recursively. We will need a backreference from xmlNodes to
      *   xmlIncludeRefs to detect references that were already visited.
      *   This can also be used for proper cycle detection, see bug #344240.
      *
      * - Phase 2 should visit all top-level XInclude nodes and expand
      *   possible subreferences in the replacement recursively.
      *
      * - Phase 3 should finally replace the top-level XInclude nodes.
      *   It could also be run together with phase 2.
      */
 
     /*
      * First phase: lookup the elements in the document
      */
     if (skipRoot)
         cur = tree->children;
     else
         cur = tree;
     do {
 	/* TODO: need to work on entities -> stack */
         if (xmlXIncludeTestNode(ctxt, cur) == 1) {
 #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
             /*
              * Avoid superlinear expansion by limiting the total number
              * of replacements.
              */
             if (ctxt->incTotal >= 20)
                 return(-1);
 #endif
             ctxt->incTotal++;
             xmlXIncludePreProcessNode(ctxt, cur);
         } else if ((cur->children != NULL) &&
                    ((cur->type == XML_DOCUMENT_NODE) ||
                     (cur->type == XML_ELEMENT_NODE))) {
             cur = cur->children;
             continue;
         }
         do {
             if (cur == tree)
                 break;
             if (cur->next != NULL) {
                 cur = cur->next;
                 break;
             }
             cur = cur->parent;
         } while (cur != NULL);
     } while ((cur != NULL) && (cur != tree));
 
     /*
      * Second Phase : collect the infosets fragments
      */
     for (i = start;i < ctxt->incNr; i++) {
         xmlXIncludeLoadNode(ctxt, i);
 	ret++;
     }
 
     /*
      * Third phase: extend the original document infoset.
      *
      * Originally we bypassed the inclusion if there were any errors
      * encountered on any of the XIncludes.  A bug was raised (bug
      * 132588) requesting that we output the XIncludes without error,
      * so the check for inc!=NULL || xptr!=NULL was put in.  This may
      * give some other problems in the future, but for now it seems to
      * work ok.
      *
      */
     for (i = ctxt->incBase;i < ctxt->incNr; i++) {
 	if ((ctxt->incTab[i]->inc != NULL) ||
-            (ctxt->incTab[i]->xptr != NULL) ||
 	    (ctxt->incTab[i]->emptyFb != 0))	/* (empty fallback) */
 	    xmlXIncludeIncludeNode(ctxt, i);
     }
 
     if (doc->URL != NULL)
 	xmlXIncludeURLPop(ctxt);
     return(ret);
 }
 
 /**
  * xmlXIncludeSetFlags:
  * @ctxt:  an XInclude processing context
  * @flags: a set of xmlParserOption used for parsing XML includes
  *
  * Set the flags used for further processing of XML resources.
  *
  * Returns 0 in case of success and -1 in case of error.
  */
