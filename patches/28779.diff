commit a1cda27a58adfbd7dc8c70bb48e12c1c669305f8
Author: Evan Miller <emmiller@gmail.com>
Date:   Fri Dec 18 09:26:28 2020 -0500

    Null-terminate binary strings
    
    See oss-fuzz/28779

diff --git a/src/libmdb/data.c b/src/libmdb/data.c
index 928f85a..4ed11c3 100644
--- a/src/libmdb/data.c
+++ b/src/libmdb/data.c
@@ -969,67 +969,68 @@ int floor_log10(double f, int is_single)
 char *mdb_col_to_string(MdbHandle *mdb, void *buf, int start, int datatype, int size)
 {
 	char *text = NULL;
 	float tf;
 	double td;
 
 	switch (datatype) {
 		case MDB_BOOL:
 			/* shouldn't happen.  bools are handled specially
 			** by mdb_xfer_bound_bool() */
 		break;
 		case MDB_BYTE:
 			text = g_strdup_printf("%d", mdb_get_byte(buf, start));
 		break;
 		case MDB_INT:
 			text = g_strdup_printf("%hd",
 				(short)mdb_get_int16(buf, start));
 		break;
 		case MDB_LONGINT:
 		case MDB_COMPLEX:
 			text = g_strdup_printf("%ld",
 				mdb_get_int32(buf, start));
 		break;
 		case MDB_FLOAT:
 			tf = mdb_get_single(buf, start);
 			text = g_strdup_printf("%.8e", tf);
 		break;
 		case MDB_DOUBLE:
 			td = mdb_get_double(buf, start);
 			text = g_strdup_printf("%.16e", td);
 		break;
 		case MDB_BINARY:
 			if (size<0) {
 				text = g_strdup("");
 			} else {
-				text = g_malloc(size);
+				text = g_malloc(size+1);
 				memcpy(text, (char*)buf+start, size);
+				text[size] = '\0';
 			}
 		break;
 		case MDB_TEXT:
 			if (size<0) {
 				text = g_strdup("");
 			} else {
 				text = (char *) g_malloc(mdb->bind_size);
 				mdb_unicode2ascii(mdb, (char*)buf + start,
 					size, text, mdb->bind_size);
 			}
 		break;
 		case MDB_DATETIME:
 			text = mdb_date_to_string(mdb, mdb->date_fmt, buf, start);
 		break;
 		case MDB_MEMO:
 			text = mdb_memo_to_string(mdb, start, size);
 		break;
 		case MDB_MONEY:
 			text = mdb_money_to_string(mdb, start);
 		case MDB_NUMERIC:
 		break;
 		case MDB_REPID:
 		  text = mdb_uuid_to_string(mdb->pg_buf, start);
 		break;
 		default:
 			text = g_strdup("");
 		break;
 	}
 	return text;
 }
