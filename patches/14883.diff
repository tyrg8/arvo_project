commit 5aebeeb5f469ede0cd12839718fca66c05f9757b
Author: Ron Eldor <Ron.Eldor@arm.com>
Date:   Wed May 22 16:41:21 2019 +0300

    Set next sequence of subject_alt_names to NULL
    
    Set the next sequence of the subject_alt_name to NULL when deleting
    sequence on failure in `get_subject_alt_name()`.
    Found by Philippe Antoine. Credit to OSS-Fuzz.

diff --git a/ChangeLog b/ChangeLog
index d33369272..6ac3e781b 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -26,26 +26,29 @@ Features
 Bugfix
    * Fix private key DER output in the key_app_writer example. File contents
      were shifted by one byte, creating an invalid ASN.1 tag. Fixed by
      Christian Walther in #2239.
    * Fix potential memory leak in X.509 self test. Found and fixed by
      Junhwan Park, #2106.
    * Reduce stack usage of hkdf tests. Fixes #2195.
    * Fix 1-byte buffer overflow in mbedtls_mpi_write_string() when
      used with negative inputs. Found by Guido Vranken in #2404. Credit to
      OSS-Fuzz.
    * Fix bugs in the AEAD test suite which would be exposed by ciphers which
      either used both encrypt and decrypt key schedules, or which perform padding.
      GCM and CCM were not affected. Fixed by Jack Lloyd.
    * Fix incorrect default port number in ssl_mail_client example's usage.
      Found and fixed by irwir. #2337
    * Add psa_util.h to test/cpp_dummy_build to fix build_default_make_gcc_and_cxx.
      Fixed by Peter Kolbus (Garmin). #2579
    * Add missing parentheses around parameters in the definition of the
      public macro MBEDTLS_X509_ID_FLAG. This could lead to invalid evaluation
      in case operators binding less strongly than subtraction were used
      for the parameter.
    * Add a check for MBEDTLS_X509_CRL_PARSE_C in ssl_server2, guarding the crl
      sni entry parameter. Reported by inestlerode in #560.
+   * Set the next sequence of the subject_alt_name to NULL when deleting
+     sequence on failure. Found and fix suggested by Philippe Antoine.
+     Credit to OSS-Fuzz.
 
 API Changes
    * Extend the MBEDTLS_SSL_EXPORT_KEYS to export the handshake randbytes,
diff --git a/library/x509_crt.c b/library/x509_crt.c
index 708dbf771..dfd22f6e5 100644
--- a/library/x509_crt.c
+++ b/library/x509_crt.c
@@ -597,171 +597,172 @@ static int x509_get_ext_key_usage( unsigned char **p,
 /*
  * SubjectAltName ::= GeneralNames
  *
  * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
  *
  * GeneralName ::= CHOICE {
  *      otherName                       [0]     OtherName,
  *      rfc822Name                      [1]     IA5String,
  *      dNSName                         [2]     IA5String,
  *      x400Address                     [3]     ORAddress,
  *      directoryName                   [4]     Name,
  *      ediPartyName                    [5]     EDIPartyName,
  *      uniformResourceIdentifier       [6]     IA5String,
  *      iPAddress                       [7]     OCTET STRING,
  *      registeredID                    [8]     OBJECT IDENTIFIER }
  *
  * OtherName ::= SEQUENCE {
  *      type-id    OBJECT IDENTIFIER,
  *      value      [0] EXPLICIT ANY DEFINED BY type-id }
  *
  * EDIPartyName ::= SEQUENCE {
  *      nameAssigner            [0]     DirectoryString OPTIONAL,
  *      partyName               [1]     DirectoryString }
  *
  * NOTE: we list all types, but only use dNSName and otherName
  * of type HwModuleName, as defined in RFC 4108, at this point.
  */
 static int x509_get_subject_alt_name( unsigned char **p,
                                       const unsigned char *end,
                                       mbedtls_x509_sequence *subject_alt_name )
 {
     int ret;
     size_t len, tag_len;
     mbedtls_asn1_buf *buf;
     unsigned char tag;
     mbedtls_asn1_sequence *cur = subject_alt_name;
 
     /* Get main sequence tag */
     if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
             MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
         return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 
     if( *p + len != end )
         return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                 MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 
     while( *p < end )
     {
         mbedtls_x509_subject_alternative_name dummy_san_buf;
         memset( &dummy_san_buf, 0, sizeof( dummy_san_buf ) );
 
         if( ( end - *p ) < 1 )
             return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                     MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 
         tag = **p;
         (*p)++;
         if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
             return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 
         if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
                 MBEDTLS_ASN1_CONTEXT_SPECIFIC )
         {
             return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                     MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
         }
 
         /*
          * Check that the SAN are structured correct.
          */
         ret = mbedtls_x509_parse_subject_alt_name( &(cur->buf), &dummy_san_buf );
         /*
          * In case the extension is malformed, return an error,
          * and clear the allocated sequences.
          */
         if( ret != 0 && ret != MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE )
         {
             mbedtls_x509_sequence *seq_cur = subject_alt_name->next;
             mbedtls_x509_sequence *seq_prv;
             while( seq_cur != NULL )
             {
                 seq_prv = seq_cur;
                 seq_cur = seq_cur->next;
                 mbedtls_platform_zeroize( seq_prv,
                                           sizeof( mbedtls_x509_sequence ) );
                 mbedtls_free( seq_prv );
             }
+            subject_alt_name->next = NULL;
             return( ret );
         }
 
         /* Allocate and assign next pointer */
         if( cur->buf.p != NULL )
         {
             if( cur->next != NULL )
                 return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 
             cur->next = mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 
             if( cur->next == NULL )
                 return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                         MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 
             cur = cur->next;
         }
 
         buf = &(cur->buf);
         buf->tag = tag;
         buf->p = *p;
         buf->len = tag_len;
         *p += buf->len;
     }
 
     /* Set final sequence entry's next pointer to NULL */
     cur->next = NULL;
 
     if( *p != end )
         return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                 MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 
     return( 0 );
 }
 
 /*
  * id-ce-certificatePolicies OBJECT IDENTIFIER ::=  { id-ce 32 }
  *
  * anyPolicy OBJECT IDENTIFIER ::= { id-ce-certificatePolicies 0 }
  *
  * certificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation
  *
  * PolicyInformation ::= SEQUENCE {
  *     policyIdentifier   CertPolicyId,
  *     policyQualifiers   SEQUENCE SIZE (1..MAX) OF
  *                             PolicyQualifierInfo OPTIONAL }
  *
  * CertPolicyId ::= OBJECT IDENTIFIER
  *
  * PolicyQualifierInfo ::= SEQUENCE {
  *      policyQualifierId  PolicyQualifierId,
  *      qualifier          ANY DEFINED BY policyQualifierId }
  *
  * -- policyQualifierIds for Internet policy qualifiers
  *
  * id-qt          OBJECT IDENTIFIER ::=  { id-pkix 2 }
  * id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }
  * id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }
  *
  * PolicyQualifierId ::= OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )
  *
  * Qualifier ::= CHOICE {
  *      cPSuri           CPSuri,
  *      userNotice       UserNotice }
  *
  * CPSuri ::= IA5String
  *
  * UserNotice ::= SEQUENCE {
  *      noticeRef        NoticeReference OPTIONAL,
  *      explicitText     DisplayText OPTIONAL }
  *
  * NoticeReference ::= SEQUENCE {
  *      organization     DisplayText,
  *      noticeNumbers    SEQUENCE OF INTEGER }
  *
  * DisplayText ::= CHOICE {
  *      ia5String        IA5String      (SIZE (1..200)),
  *      visibleString    VisibleString  (SIZE (1..200)),
  *      bmpString        BMPString      (SIZE (1..200)),
  *      utf8String       UTF8String     (SIZE (1..200)) }
  *
  * NOTE: we only parse and use anyPolicy without qualifiers at this point
  * as defined in RFC 5280.
  */
