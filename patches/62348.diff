commit 386e9a10db28af620658ca0c635e1d98915f6306
Author: Frank Tang <ftang@chromium.org>
Date:   Thu Sep 14 13:41:31 2023 -0700

    ICU-22504 Fix buffer overflow write error

diff --git a/icu4c/source/common/uloc_tag.cpp b/icu4c/source/common/uloc_tag.cpp
index 7a2b8673586..d261e46b3e2 100644
--- a/icu4c/source/common/uloc_tag.cpp
+++ b/icu4c/source/common/uloc_tag.cpp
@@ -1265,246 +1265,255 @@ static void
 _appendKeywordsToLanguageTag(const char* localeID, icu::ByteSink& sink, UBool strict, UBool hadPosix, UErrorCode* status) {
     char attrBuf[ULOC_KEYWORD_AND_VALUES_CAPACITY] = { 0 };
     int32_t attrBufLength = 0;
 
     icu::MemoryPool<AttributeListEntry> attrPool;
     icu::MemoryPool<ExtensionListEntry> extPool;
     icu::MemoryPool<icu::CharString> strPool;
 
     icu::LocalUEnumerationPointer keywordEnum(uloc_openKeywords(localeID, status));
     if (U_FAILURE(*status) && !hadPosix) {
         return;
     }
     if (keywordEnum.isValid() || hadPosix) {
         /* reorder extensions */
         int32_t len;
         const char *key;
         ExtensionListEntry *firstExt = nullptr;
         ExtensionListEntry *ext;
         AttributeListEntry *firstAttr = nullptr;
         AttributeListEntry *attr;
         icu::MemoryPool<icu::CharString> extBufPool;
         const char *bcpKey=nullptr, *bcpValue=nullptr;
         UErrorCode tmpStatus = U_ZERO_ERROR;
         int32_t keylen;
         UBool isBcpUExt;
 
         while (true) {
             key = uenum_next(keywordEnum.getAlias(), nullptr, status);
             if (key == nullptr) {
                 break;
             }
 
             icu::CharString buf;
             {
                 icu::CharStringByteSink sink(&buf);
                 ulocimp_getKeywordValue(localeID, key, sink, &tmpStatus);
             }
             len = buf.length();
 
             if (U_FAILURE(tmpStatus)) {
                 if (tmpStatus == U_MEMORY_ALLOCATION_ERROR) {
                     *status = U_MEMORY_ALLOCATION_ERROR;
                     break;
                 }
                 if (strict) {
                     *status = U_ILLEGAL_ARGUMENT_ERROR;
                     break;
                 }
                 /* ignore this keyword */
                 tmpStatus = U_ZERO_ERROR;
                 continue;
             }
 
             keylen = (int32_t)uprv_strlen(key);
             isBcpUExt = (keylen > 1);
 
             /* special keyword used for representing Unicode locale attributes */
             if (uprv_strcmp(key, LOCALE_ATTRIBUTE_KEY) == 0) {
                 if (len > 0) {
                     int32_t i = 0;
                     while (true) {
                         attrBufLength = 0;
                         for (; i < len; i++) {
                             if (buf[i] != '-') {
-                                attrBuf[attrBufLength++] = buf[i];
+                                if (static_cast<size_t>(attrBufLength) < sizeof(attrBuf)) {
+                                    attrBuf[attrBufLength++] = buf[i];
+                                } else {
+                                    *status = U_ILLEGAL_ARGUMENT_ERROR;
+                                    return;
+                                }
                             } else {
                                 i++;
                                 break;
                             }
                         }
                         if (attrBufLength > 0) {
-                            attrBuf[attrBufLength] = 0;
+                            if (static_cast<size_t>(attrBufLength) < sizeof(attrBuf)) {
+                                attrBuf[attrBufLength] = 0;
+                            } else {
+                                *status = U_STRING_NOT_TERMINATED_WARNING;
+                            }
 
                         } else if (i >= len){
                             break;
                         }
 
                         /* create AttributeListEntry */
                         attr = attrPool.create();
                         if (attr == nullptr) {
                             *status = U_MEMORY_ALLOCATION_ERROR;
                             break;
                         }
                         icu::CharString* attrValue =
                                 strPool.create(attrBuf, attrBufLength, *status);
                         if (attrValue == nullptr) {
                             *status = U_MEMORY_ALLOCATION_ERROR;
                             break;
                         }
                         if (U_FAILURE(*status)) {
                             break;
                         }
                         attr->attribute = attrValue->data();
 
                         if (!_addAttributeToList(&firstAttr, attr)) {
                             if (strict) {
                                 *status = U_ILLEGAL_ARGUMENT_ERROR;
                                 break;
                             }
                         }
                     }
                     /* for a place holder ExtensionListEntry */
                     bcpKey = LOCALE_ATTRIBUTE_KEY;
                     bcpValue = nullptr;
                 }
             } else if (isBcpUExt) {
                 bcpKey = uloc_toUnicodeLocaleKey(key);
                 if (bcpKey == nullptr) {
                     if (strict) {
                         *status = U_ILLEGAL_ARGUMENT_ERROR;
                         break;
                     }
                     continue;
                 }
 
                 /* we've checked buf is null-terminated above */
                 bcpValue = uloc_toUnicodeLocaleType(key, buf.data());
                 if (bcpValue == nullptr) {
                     if (strict) {
                         *status = U_ILLEGAL_ARGUMENT_ERROR;
                         break;
                     }
                     continue;
                 }
                 if (bcpValue == buf.data()) {
                     /*
                     When uloc_toUnicodeLocaleType(key, buf) returns the
                     input value as is, the value is well-formed, but has
                     no known mapping. This implementation normalizes the
                     value to lower case
                     */
                     icu::CharString* extBuf = extBufPool.create(buf, tmpStatus);
 
                     if (extBuf == nullptr) {
                         *status = U_MEMORY_ALLOCATION_ERROR;
                         break;
                     }
                     if (U_FAILURE(tmpStatus)) {
                         *status = tmpStatus;
                         break;
                     }
 
                     T_CString_toLowerCase(extBuf->data());
                     bcpValue = extBuf->data();
                 }
             } else {
                 if (*key == PRIVATEUSE) {
                     if (!ultag_isPrivateuseValueSubtags(buf.data(), len)) {
                         if (strict) {
                             *status = U_ILLEGAL_ARGUMENT_ERROR;
                             break;
                         }
                         continue;
                     }
                 } else {
                     if (!_isExtensionSingleton(key, keylen) || !ultag_isExtensionSubtags(buf.data(), len)) {
                         if (strict) {
                             *status = U_ILLEGAL_ARGUMENT_ERROR;
                             break;
                         }
                         continue;
                     }
                 }
                 bcpKey = key;
                 icu::CharString* extBuf =
                     extBufPool.create(buf.data(), len, tmpStatus);
                 if (extBuf == nullptr) {
                     *status = U_MEMORY_ALLOCATION_ERROR;
                     break;
                 }
                 if (U_FAILURE(tmpStatus)) {
                     *status = tmpStatus;
                     break;
                 }
                 bcpValue = extBuf->data();
             }
 
             /* create ExtensionListEntry */
             ext = extPool.create();
             if (ext == nullptr) {
                 *status = U_MEMORY_ALLOCATION_ERROR;
                 break;
             }
             ext->key = bcpKey;
             ext->value = bcpValue;
 
             if (!_addExtensionToList(&firstExt, ext, true)) {
                 if (strict) {
                     *status = U_ILLEGAL_ARGUMENT_ERROR;
                     break;
                 }
             }
         }
 
         /* Special handling for POSIX variant - add the keywords for POSIX */
         if (hadPosix) {
             /* create ExtensionListEntry for POSIX */
             ext = extPool.create();
             if (ext == nullptr) {
                 *status = U_MEMORY_ALLOCATION_ERROR;
                 return;
             }
             ext->key = POSIX_KEY;
             ext->value = POSIX_VALUE;
 
             if (!_addExtensionToList(&firstExt, ext, true)) {
                 // Silently ignore errors.
             }
         }
 
         if (U_SUCCESS(*status) && (firstExt != nullptr || firstAttr != nullptr)) {
             UBool startLDMLExtension = false;
             for (ext = firstExt; ext; ext = ext->next) {
                 if (!startLDMLExtension && uprv_strlen(ext->key) > 1) {
                     /* first LDML u singlton extension */
                    sink.Append("-u", 2);
                    startLDMLExtension = true;
                 }
 
                 /* write out the sorted BCP47 attributes, extensions and private use */
                 if (uprv_strcmp(ext->key, LOCALE_ATTRIBUTE_KEY) == 0) {
                     /* write the value for the attributes */
                     for (attr = firstAttr; attr; attr = attr->next) {
                         sink.Append("-", 1);
                         sink.Append(
                                 attr->attribute, static_cast<int32_t>(uprv_strlen(attr->attribute)));
                     }
                 } else {
                     sink.Append("-", 1);
                     sink.Append(ext->key, static_cast<int32_t>(uprv_strlen(ext->key)));
                     if (uprv_strcmp(ext->value, "true") != 0 &&
                         uprv_strcmp(ext->value, "yes") != 0) {
                       sink.Append("-", 1);
                       sink.Append(ext->value, static_cast<int32_t>(uprv_strlen(ext->value)));
                     }
                 }
             }
         }
     }
 }
 
 /**
  * Append keywords parsed from LDML extension value
  * e.g. "u-ca-gregory-co-trad" -> {calendar = gregorian} {collation = traditional}
  * Note: char* buf is used for storing keywords
  */
diff --git a/icu4c/source/test/intltest/loctest.cpp b/icu4c/source/test/intltest/loctest.cpp
index 1c88f77fe63..d72d7acfd32 100644
--- a/icu4c/source/test/intltest/loctest.cpp
+++ b/icu4c/source/test/intltest/loctest.cpp
@@ -5913,95 +5913,97 @@ void LocaleTest::TestForLanguageTagLegacyTagBug21676() {
 void LocaleTest::TestToLanguageTag() {
     IcuTestErrorCode status(*this, "TestToLanguageTag()");
 
     static const Locale loc_c("en_US_POSIX");
     static const Locale loc_en("en_US");
     static const Locale loc_af("af@calendar=coptic;t=ar-i0-handwrit;x=foo");
     static const Locale loc_ext("en@0=abc;a=xyz");
     static const Locale loc_empty("");
     static const Locale loc_ill("!");
     static const Locale loc_variant("sl__ROZAJ_BISKE_1994");
 
     static const char tag_c[] = "en-US-u-va-posix";
     static const char tag_en[] = "en-US";
     static const char tag_af[] = "af-t-ar-i0-handwrit-u-ca-coptic-x-foo";
     static const char tag_ext[] = "en-0-abc-a-xyz";
     static const char tag_und[] = "und";
     static const char tag_variant[] = "sl-1994-biske-rozaj";
 
     std::string result;
     StringByteSink<std::string> sink(&result);
     loc_c.toLanguageTag(sink, status);
     status.errIfFailureAndReset("\"%s\"", loc_c.getName());
     assertEquals(loc_c.getName(), tag_c, result.c_str());
 
     std::string result_c = loc_c.toLanguageTag<std::string>(status);
     status.errIfFailureAndReset("\"%s\"", loc_c.getName());
     assertEquals(loc_c.getName(), tag_c, result_c.c_str());
 
     std::string result_en = loc_en.toLanguageTag<std::string>(status);
     status.errIfFailureAndReset("\"%s\"", loc_en.getName());
     assertEquals(loc_en.getName(), tag_en, result_en.c_str());
 
     std::string result_af = loc_af.toLanguageTag<std::string>(status);
     status.errIfFailureAndReset("\"%s\"", loc_af.getName());
     assertEquals(loc_af.getName(), tag_af, result_af.c_str());
 
     std::string result_ext = loc_ext.toLanguageTag<std::string>(status);
     status.errIfFailureAndReset("\"%s\"", loc_ext.getName());
     assertEquals(loc_ext.getName(), tag_ext, result_ext.c_str());
 
     std::string result_empty = loc_empty.toLanguageTag<std::string>(status);
     status.errIfFailureAndReset("\"%s\"", loc_empty.getName());
     assertEquals(loc_empty.getName(), tag_und, result_empty.c_str());
 
     std::string result_ill = loc_ill.toLanguageTag<std::string>(status);
     status.errIfFailureAndReset("\"%s\"", loc_ill.getName());
     assertEquals(loc_ill.getName(), tag_und, result_ill.c_str());
 
     std::string result_variant = loc_variant.toLanguageTag<std::string>(status);
     status.errIfFailureAndReset("\"%s\"", loc_variant.getName());
     assertEquals(loc_variant.getName(), tag_variant, result_variant.c_str());
 
     Locale loc_bogus;
     loc_bogus.setToBogus();
     std::string result_bogus = loc_bogus.toLanguageTag<std::string>(status);
     assertEquals("bogus", U_ILLEGAL_ARGUMENT_ERROR, status.reset());
     assertTrue(result_bogus.c_str(), result_bogus.empty());
 
     static const struct {
         const char *localeID;    /* input */
         const char *expectedID; /* expected toLanguageTag() result */
     } testCases[] = {
       /* ICU-21414 */
       {"und-x-abc-private", "und-x-abc-private"},
       {"und-x-private", "und-x-private"},
       {"und-u-ca-roc-x-private", "und-u-ca-roc-x-private"},
       {"und-US-x-private", "und-US-x-private"},
       {"und-Latn-x-private", "und-Latn-x-private"},
       {"und-1994-biske-rozaj", "und-1994-biske-rozaj"},
       {"und-1994-biske-rozaj-x-private", "und-1994-biske-rozaj-x-private"},
       // ICU-22497
       {"-ins0-ins17Rz-yqyq-UWLF-uRyq-UWLF-uRRyq-UWLF-uR-UWLF-uRns0-ins17Rz-yq-UWLF-uRyq-UWLF-uRRyq-LF-uRyq-UWLF-uRRyq-UWLF-uRq-UWLF-uRyq-UWLF-uRRyq-UWLF-uR", ""},
+      // ICU-22504
+      {"@attribute=zzo9zzzzzzzs0zzzzzzzzzz55555555555555555555500000000000000000000fffffffffffffffffffffffffzzzzz2mfPAK", ""},
     };
     int32_t i;
     for (i=0; i < UPRV_LENGTHOF(testCases); i++) {
         UErrorCode status = U_ZERO_ERROR;
         std::string otag = testCases[i].localeID;
         std::string tag = Locale::forLanguageTag(otag.c_str(), status).toLanguageTag<std::string>(status);
         if (tag != testCases[i].expectedID) {
             errcheckln(status, "FAIL: %s should be toLanguageTag to %s but got %s - %s",
                        otag.c_str(),
                        testCases[i].expectedID,
                        tag.c_str(),
                        u_errorName(status));
         }
         // Test ICU-22497
         status = U_ZERO_ERROR;
         icu::Locale locale(otag.c_str());
         char buf[245];
         icu::CheckedArrayByteSink sink(buf, sizeof(buf));
         locale.toLanguageTag(sink, status);
     }
 }
 
 /* ICU-20310 */
