commit f9d165add1342ecae6cdde1b95e9ce63320768dd
Author: Philip Withnall <withnall@endlessm.com>
Date:   Wed Jul 1 11:54:05 2020 +0100

    guri: Fix buffer overrun when decoding %-encoded URI components
    
    There is a limited (1 or 2 byte) read off the end of the buffer if its
    final or penultimate byte is `%` and it’s not nul-terminated after that.
    If the buffer *is* nul-terminated then the first `g_ascii_isxdigit()`
    call safely returns `FALSE` and the code moves on.
    
    Fix it by adding an additional check, and some unit tests to catch the
    behaviour.
    
    This bug is present in libsoup, which `GUri` is based on, but not
    exploitable due to how the external API only exposes nul-terminated
    strings. See https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/126
    for the fix there.
    
    oss-fuzz#23815
    oss-fuzz#23818
    
    Signed-off-by: Philip Withnall <withnall@endlessm.com>

diff --git a/glib/guri.c b/glib/guri.c
index de9f43875..4c55b5bb4 100644
--- a/glib/guri.c
+++ b/glib/guri.c
@@ -236,74 +236,75 @@ static gssize
 uri_decoder (gchar       **out,
              const gchar  *start,
              gsize         length,
              gboolean      just_normalize,
              GUriFlags     flags,
              GUriError     parse_error,
              GError      **error)
 {
   gchar *decoded, *d, c;
   const gchar *invalid, *s, *end;
   gssize len;
 
   if (!(flags & G_URI_FLAGS_ENCODED))
     just_normalize = FALSE;
 
   decoded = g_malloc (length + 1);
   for (s = start, end = s + length, d = decoded; s < end; s++)
     {
       if (*s == '%')
         {
-          if (!g_ascii_isxdigit (s[1]) ||
+          if (s + 2 >= end ||
+              !g_ascii_isxdigit (s[1]) ||
               !g_ascii_isxdigit (s[2]))
             {
-              /* % followed by non-hex; this is an error */
+              /* % followed by non-hex or the end of the string; this is an error */
               if (flags & G_URI_FLAGS_PARSE_STRICT)
                 {
                   g_set_error_literal (error, G_URI_ERROR, parse_error,
                                        _("Invalid %-encoding in URI"));
                   g_free (decoded);
                   return -1;
                 }
 
               /* In non-strict mode, just let it through; we *don't*
                * fix it to "%25", since that might change the way that
                * the URI's owner would interpret it.
                */
               *d++ = *s;
               continue;
             }
 
           c = HEXCHAR (s);
           if (just_normalize && !g_uri_char_is_unreserved (c))
             {
               /* Leave the % sequence there. */
               *d++ = *s;
             }
           else
             {
               *d++ = c;
               s += 2;
             }
         }
       else
         *d++ = *s;
     }
   *d = '\0';
 
   len = d - decoded;
 
   if (!(flags & G_URI_FLAGS_ENCODED) &&
       !g_utf8_validate (decoded, len, &invalid))
     {
       g_set_error_literal (error, G_URI_ERROR, parse_error,
                            _("Non-UTF-8 characters in URI"));
       g_free (decoded);
       return -1;
     }
 
   if (out)
     *out = g_steal_pointer (&decoded);
 
   g_free (decoded);
   return len;
 }
diff --git a/glib/tests/uri.c b/glib/tests/uri.c
index 71bfad289..4e0f07366 100644
--- a/glib/tests/uri.c
+++ b/glib/tests/uri.c
@@ -366,59 +366,60 @@ static void
 test_uri_unescape_bytes (gconstpointer test_data)
 {
   gboolean use_nul_terminated = GPOINTER_TO_INT (test_data);
   const struct
     {
       /* Inputs */
       const gchar *escaped;  /* (nullable) */
       /* Outputs */
       gssize expected_unescaped_len;  /* -1 => error expected */
       const guint8 *expected_unescaped;  /* (nullable) */
     }
   tests[] =
     {
       { "%00%00", 2, (const guint8 *) "\x00\x00" },
       { "%%", -1, NULL },
+      { "%", -1, NULL },
     };
   gsize i;
 
   for (i = 0; i < G_N_ELEMENTS (tests); i++)
     {
       gssize escaped_len = 0;
       gchar *escaped = NULL;
       GBytes *bytes = NULL;
 
       g_test_message ("Test %" G_GSIZE_FORMAT ": %s", i, tests[i].escaped);
 
       /* The tests get run twice: once with the length unspecified, using a
        * nul-terminated string; and once with the length specified and a copy of
        * the string with the trailing nul explicitly removed (to help catch
        * buffer overflows). */
       if (use_nul_terminated)
         {
           escaped_len = -1;
           escaped = g_strdup (tests[i].escaped);
         }
       else
         {
           escaped_len = strlen (tests[i].escaped);  /* no trailing nul */
           escaped = g_memdup (tests[i].escaped, escaped_len);
         }
 
       bytes = g_uri_unescape_bytes (escaped, escaped_len);
 
       if (tests[i].expected_unescaped_len < 0)
         {
           g_assert_null (bytes);
         }
       else
         {
           g_assert_cmpmem (g_bytes_get_data (bytes, NULL),
                            g_bytes_get_size (bytes),
                            tests[i].expected_unescaped,
                            tests[i].expected_unescaped_len);
         }
 
       g_clear_pointer (&bytes, g_bytes_unref);
       g_free (escaped);
     }
 }
@@ -1265,72 +1266,73 @@ static void
 test_uri_parse_params (gconstpointer test_data)
 {
   gboolean use_nul_terminated = GPOINTER_TO_INT (test_data);
   const struct
     {
       /* Inputs */
       const gchar *uri;
       gchar separator;
       gboolean case_insensitive;
       /* Outputs */
       gssize expected_n_params;  /* -1 => error expected */
       /* key, value, key, value, …, limited to length 2*expected_n_params */
       const gchar *expected_param_key_values[4];
     }
   tests[] =
     {
       { "", '&', FALSE, 0, { NULL, }},
       { "p1=foo&p2=bar", '&', FALSE, 2, { "p1", "foo", "p2", "bar" }},
       { "p1=foo&&P1=bar", '&', FALSE, -1, { NULL, }},
       { "%00=foo", '&', FALSE, -1, { NULL, }},
       { "p1=%00", '&', FALSE, -1, { NULL, }},
       { "p1=foo&P1=bar", '&', TRUE, 1, { "p1", "bar", NULL, }},
+      { "=%", '&', FALSE, 1, { "", "%", NULL, }},
     };
   gsize i;
 
   for (i = 0; i < G_N_ELEMENTS (tests); i++)
     {
       GHashTable *params;
       gchar *uri = NULL;
       gssize uri_len;
 
       g_test_message ("URI %" G_GSIZE_FORMAT ": %s", i, tests[i].uri);
 
       g_assert (tests[i].expected_n_params < 0 ||
                 tests[i].expected_n_params <= G_N_ELEMENTS (tests[i].expected_param_key_values) / 2);
 
       /* The tests get run twice: once with the length unspecified, using a
        * nul-terminated string; and once with the length specified and a copy of
        * the string with the trailing nul explicitly removed (to help catch
        * buffer overflows). */
       if (use_nul_terminated)
         {
           uri_len = -1;
           uri = g_strdup (tests[i].uri);
         }
       else
         {
           uri_len = strlen (tests[i].uri);  /* no trailing nul */
           uri = g_memdup (tests[i].uri, uri_len);
         }
 
       params = g_uri_parse_params (uri, uri_len, tests[i].separator, tests[i].case_insensitive);
 
       if (tests[i].expected_n_params < 0)
         {
           g_assert_null (params);
         }
       else
         {
           gsize j;
 
           g_assert_cmpint (g_hash_table_size (params), ==, tests[i].expected_n_params);
 
           for (j = 0; j < tests[i].expected_n_params; j += 2)
             g_assert_cmpstr (g_hash_table_lookup (params, tests[i].expected_param_key_values[j]), ==,
                              tests[i].expected_param_key_values[j + 1]);
         }
 
       g_clear_pointer (&params, g_hash_table_unref);
       g_free (uri);
     }
 }
