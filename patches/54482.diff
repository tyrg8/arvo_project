commit 40342c9437712cd51e37dc54f1f535bb24ae7529
Author: Garret Rieger <grieger@google.com>
Date:   Wed Dec 21 21:52:28 2022 +0000

    [subset] check for addition overflow in hdmx size calculation.
    
    Fixes https://oss-fuzz.com/testcase-detail/4877336988483584.

diff --git a/src/hb-ot-hdmx-table.hh b/src/hb-ot-hdmx-table.hh
index dea2b7e29..a86cc3c31 100644
--- a/src/hb-ot-hdmx-table.hh
+++ b/src/hb-ot-hdmx-table.hh
@@ -83,95 +83,96 @@ struct DeviceRecord
 struct hdmx
 {
   static constexpr hb_tag_t tableTag = HB_OT_TAG_hdmx;
 
   unsigned int get_size () const
   { return min_size + numRecords * sizeDeviceRecord; }
 
   const DeviceRecord& operator [] (unsigned int i) const
   {
     /* XXX Null(DeviceRecord) is NOT safe as it's num-glyphs lengthed.
      * https://github.com/harfbuzz/harfbuzz/issues/1300 */
     if (unlikely (i >= numRecords)) return Null (DeviceRecord);
     return StructAtOffset<DeviceRecord> (&this->firstDeviceRecord, i * sizeDeviceRecord);
   }
 
   template<typename Iterator,
 	   hb_requires (hb_is_iterator (Iterator))>
   bool serialize (hb_serialize_context_t *c, unsigned version, Iterator it)
   {
     TRACE_SERIALIZE (this);
 
     if (unlikely (!c->extend_min ((*this))))  return_trace (false);
 
     this->version = version;
     this->numRecords = it.len ();
     this->sizeDeviceRecord = DeviceRecord::get_size (it ? (*it).second.len () : 0);
 
     for (const hb_item_type<Iterator>& _ : +it)
       c->start_embed<DeviceRecord> ()->serialize (c, _.first, _.second);
 
     return_trace (c->successful ());
   }
 
 
   bool subset (hb_subset_context_t *c) const
   {
     TRACE_SUBSET (this);
 
     hdmx *hdmx_prime = c->serializer->start_embed <hdmx> ();
     if (unlikely (!hdmx_prime)) return_trace (false);
 
     auto it =
     + hb_range ((unsigned) numRecords)
     | hb_map ([c, this] (unsigned _)
 	{
 	  const DeviceRecord *device_record =
 	    &StructAtOffset<DeviceRecord> (&firstDeviceRecord,
 					   _ * sizeDeviceRecord);
 	  auto row =
 	    + hb_range (c->plan->num_output_glyphs ())
 	    | hb_map (c->plan->reverse_glyph_map)
 	    | hb_map ([this, c, device_record] (hb_codepoint_t _)
 		      {
 			if (c->plan->is_empty_glyph (_))
 			  return Null (HBUINT8);
 			return device_record->widthsZ.as_array (get_num_glyphs ()) [_];
 		      })
 	    ;
 	  return hb_pair ((unsigned) device_record->pixelSize, +row);
 	})
     ;
 
     hdmx_prime->serialize (c->serializer, version, it);
     return_trace (true);
   }
 
   unsigned get_num_glyphs () const
   {
     return sizeDeviceRecord - DeviceRecord::min_size;
   }
 
   bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     return_trace (c->check_struct (this) &&
 		  !hb_unsigned_mul_overflows (numRecords, sizeDeviceRecord) &&
+                  min_size + numRecords * sizeDeviceRecord > numRecords * sizeDeviceRecord &&
 		  sizeDeviceRecord >= DeviceRecord::min_size &&
 		  c->check_range (this, get_size ()));
   }
 
   protected:
   HBUINT16	version;	/* Table version number (0) */
   HBUINT16	numRecords;	/* Number of device records. */
   HBUINT32	sizeDeviceRecord;
 				/* Size of a device record, 32-bit aligned. */
   DeviceRecord	firstDeviceRecord;
 				/* Array of device records. */
   public:
   DEFINE_SIZE_MIN (8);
 };
 
 } /* namespace OT */
 
 
 #endif /* HB_OT_HDMX_TABLE_HH */
diff --git a/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-4877336988483584 b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-4877336988483584
new file mode 100644
index 000000000..73d4e5de7
Binary files /dev/null and b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-4877336988483584 differ
