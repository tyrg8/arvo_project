commit 52ff00a38447f06a17eab1caa2cf0730a119c751
Author: Syoyo Fujita <syoyo@lighttransport.com>
Date:   Tue Aug 16 20:08:45 2022 +0900

    Do not expand file path since its not necessary for glTF asset path(URI) and for security reason(`wordexp`).

diff --git a/tiny_gltf.h b/tiny_gltf.h
index 59756e9..7481345 100644
--- a/tiny_gltf.h
+++ b/tiny_gltf.h
@@ -1,92 +1,93 @@
 //
 // Header-only tiny glTF 2.0 loader and serializer.
 //
 //
 // The MIT License (MIT)
 //
 // Copyright (c) 2015 - Present Syoyo Fujita, Aur√©lien Chatelain and many
 // contributors.
 //
 // Permission is hereby granted, free of charge, to any person obtaining a copy
 // of this software and associated documentation files (the "Software"), to deal
 // in the Software without restriction, including without limitation the rights
 // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 // copies of the Software, and to permit persons to whom the Software is
 // furnished to do so, subject to the following conditions:
 //
 // The above copyright notice and this permission notice shall be included in
 // all copies or substantial portions of the Software.
 //
 // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 // THE SOFTWARE.
 
 // Version:
+//  - v2.6.0 Disable expanding file path for security(no use of awkward `wordexp` anymore).
 //  - v2.5.0 Add SetPreserveImageChannels() option to load image data as is.
 //  - v2.4.3 Fix null object output when when material has all default
 //  parameters.
 //  - v2.4.2 Decode percent-encoded URI.
 //  - v2.4.1 Fix some glTF object class does not have `extensions` and/or
 //  `extras` property.
 //  - v2.4.0 Experimental RapidJSON and C++14 support(Thanks to @jrkoone).
 //  - v2.3.1 Set default value of minFilter and magFilter in Sampler to -1.
 //  - v2.3.0 Modified Material representation according to glTF 2.0 schema
 //           (and introduced TextureInfo class)
 //           Change the behavior of `Value::IsNumber`. It return true either the
 //           value is int or real.
 //  - v2.2.0 Add loading 16bit PNG support. Add Sparse accessor support(Thanks
 //  to @Ybalrid)
 //  - v2.1.0 Add draco compression.
 //  - v2.0.1 Add comparsion feature(Thanks to @Selmar).
 //  - v2.0.0 glTF 2.0!.
 //
 // Tiny glTF loader is using following third party libraries:
 //
 //  - jsonhpp: C++ JSON library.
 //  - base64: base64 decode/encode library.
 //  - stb_image: Image loading library.
 //
 #ifndef TINY_GLTF_H_
 #define TINY_GLTF_H_
 
 #include <array>
 #include <cassert>
 #include <cmath>  // std::fabs
 #include <cstdint>
 #include <cstdlib>
 #include <cstring>
 #include <limits>
 #include <map>
 #include <string>
 #include <vector>
 
 #ifndef TINYGLTF_USE_CPP14
 #include <functional>
 #endif
 
 #ifdef __ANDROID__
 #ifdef TINYGLTF_ANDROID_LOAD_FROM_ASSETS
 #include <android/asset_manager.h>
 #endif
 #endif
 
 #ifdef __GNUC__
 #if (__GNUC__ < 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ <= 8))
 #define TINYGLTF_NOEXCEPT
 #else
 #define TINYGLTF_NOEXCEPT noexcept
 #endif
 #else
 #define TINYGLTF_NOEXCEPT noexcept
 #endif
 
 #define DEFAULT_METHODS(x)             \
   ~x() = default;                      \
   x(const x &) = default;              \
   x(x &&) TINYGLTF_NOEXCEPT = default; \
   x &operator=(const x &) = default;   \
   x &operator=(x &&) TINYGLTF_NOEXCEPT = default;
@@ -94,95 +95,99 @@
 namespace tinygltf {
 
 #define TINYGLTF_MODE_POINTS (0)
 #define TINYGLTF_MODE_LINE (1)
 #define TINYGLTF_MODE_LINE_LOOP (2)
 #define TINYGLTF_MODE_LINE_STRIP (3)
 #define TINYGLTF_MODE_TRIANGLES (4)
 #define TINYGLTF_MODE_TRIANGLE_STRIP (5)
 #define TINYGLTF_MODE_TRIANGLE_FAN (6)
 
 #define TINYGLTF_COMPONENT_TYPE_BYTE (5120)
 #define TINYGLTF_COMPONENT_TYPE_UNSIGNED_BYTE (5121)
 #define TINYGLTF_COMPONENT_TYPE_SHORT (5122)
 #define TINYGLTF_COMPONENT_TYPE_UNSIGNED_SHORT (5123)
 #define TINYGLTF_COMPONENT_TYPE_INT (5124)
 #define TINYGLTF_COMPONENT_TYPE_UNSIGNED_INT (5125)
 #define TINYGLTF_COMPONENT_TYPE_FLOAT (5126)
-#define TINYGLTF_COMPONENT_TYPE_DOUBLE (5130) // OpenGL double type. Note that some of glTF 2.0 validator does not support double type even the schema seems allow any value of integer: https://github.com/KhronosGroup/glTF/blob/b9884a2fd45130b4d673dd6c8a706ee21ee5c5f7/specification/2.0/schema/accessor.schema.json#L22
+#define TINYGLTF_COMPONENT_TYPE_DOUBLE \
+  (5130)  // OpenGL double type. Note that some of glTF 2.0 validator does not
+          // support double type even the schema seems allow any value of
+          // integer:
+          // https://github.com/KhronosGroup/glTF/blob/b9884a2fd45130b4d673dd6c8a706ee21ee5c5f7/specification/2.0/schema/accessor.schema.json#L22
 
 #define TINYGLTF_TEXTURE_FILTER_NEAREST (9728)
 #define TINYGLTF_TEXTURE_FILTER_LINEAR (9729)
 #define TINYGLTF_TEXTURE_FILTER_NEAREST_MIPMAP_NEAREST (9984)
 #define TINYGLTF_TEXTURE_FILTER_LINEAR_MIPMAP_NEAREST (9985)
 #define TINYGLTF_TEXTURE_FILTER_NEAREST_MIPMAP_LINEAR (9986)
 #define TINYGLTF_TEXTURE_FILTER_LINEAR_MIPMAP_LINEAR (9987)
 
 #define TINYGLTF_TEXTURE_WRAP_REPEAT (10497)
 #define TINYGLTF_TEXTURE_WRAP_CLAMP_TO_EDGE (33071)
 #define TINYGLTF_TEXTURE_WRAP_MIRRORED_REPEAT (33648)
 
 // Redeclarations of the above for technique.parameters.
 #define TINYGLTF_PARAMETER_TYPE_BYTE (5120)
 #define TINYGLTF_PARAMETER_TYPE_UNSIGNED_BYTE (5121)
 #define TINYGLTF_PARAMETER_TYPE_SHORT (5122)
 #define TINYGLTF_PARAMETER_TYPE_UNSIGNED_SHORT (5123)
 #define TINYGLTF_PARAMETER_TYPE_INT (5124)
 #define TINYGLTF_PARAMETER_TYPE_UNSIGNED_INT (5125)
 #define TINYGLTF_PARAMETER_TYPE_FLOAT (5126)
 
 #define TINYGLTF_PARAMETER_TYPE_FLOAT_VEC2 (35664)
 #define TINYGLTF_PARAMETER_TYPE_FLOAT_VEC3 (35665)
 #define TINYGLTF_PARAMETER_TYPE_FLOAT_VEC4 (35666)
 
 #define TINYGLTF_PARAMETER_TYPE_INT_VEC2 (35667)
 #define TINYGLTF_PARAMETER_TYPE_INT_VEC3 (35668)
 #define TINYGLTF_PARAMETER_TYPE_INT_VEC4 (35669)
 
 #define TINYGLTF_PARAMETER_TYPE_BOOL (35670)
 #define TINYGLTF_PARAMETER_TYPE_BOOL_VEC2 (35671)
 #define TINYGLTF_PARAMETER_TYPE_BOOL_VEC3 (35672)
 #define TINYGLTF_PARAMETER_TYPE_BOOL_VEC4 (35673)
 
 #define TINYGLTF_PARAMETER_TYPE_FLOAT_MAT2 (35674)
 #define TINYGLTF_PARAMETER_TYPE_FLOAT_MAT3 (35675)
 #define TINYGLTF_PARAMETER_TYPE_FLOAT_MAT4 (35676)
 
 #define TINYGLTF_PARAMETER_TYPE_SAMPLER_2D (35678)
 
 // End parameter types
 
 #define TINYGLTF_TYPE_VEC2 (2)
 #define TINYGLTF_TYPE_VEC3 (3)
 #define TINYGLTF_TYPE_VEC4 (4)
 #define TINYGLTF_TYPE_MAT2 (32 + 2)
 #define TINYGLTF_TYPE_MAT3 (32 + 3)
 #define TINYGLTF_TYPE_MAT4 (32 + 4)
 #define TINYGLTF_TYPE_SCALAR (64 + 1)
 #define TINYGLTF_TYPE_VECTOR (64 + 4)
 #define TINYGLTF_TYPE_MATRIX (64 + 16)
 
 #define TINYGLTF_IMAGE_FORMAT_JPEG (0)
 #define TINYGLTF_IMAGE_FORMAT_PNG (1)
 #define TINYGLTF_IMAGE_FORMAT_BMP (2)
 #define TINYGLTF_IMAGE_FORMAT_GIF (3)
 
 #define TINYGLTF_TEXTURE_FORMAT_ALPHA (6406)
 #define TINYGLTF_TEXTURE_FORMAT_RGB (6407)
 #define TINYGLTF_TEXTURE_FORMAT_RGBA (6408)
 #define TINYGLTF_TEXTURE_FORMAT_LUMINANCE (6409)
 #define TINYGLTF_TEXTURE_FORMAT_LUMINANCE_ALPHA (6410)
 
 #define TINYGLTF_TEXTURE_TARGET_TEXTURE2D (3553)
 #define TINYGLTF_TEXTURE_TYPE_UNSIGNED_BYTE (5121)
 
 #define TINYGLTF_TARGET_ARRAY_BUFFER (34962)
 #define TINYGLTF_TARGET_ELEMENT_ARRAY_BUFFER (34963)
 
 #define TINYGLTF_SHADER_TYPE_VERTEX_SHADER (35633)
 #define TINYGLTF_SHADER_TYPE_FRAGMENT_SHADER (35632)
 
 #define TINYGLTF_DOUBLE_EPS (1.e-12)
 #define TINYGLTF_DOUBLE_EQUAL(a, b) (std::fabs((b) - (a)) < TINYGLTF_DOUBLE_EPS)
 
 #ifdef __ANDROID__
 #ifdef TINYGLTF_ANDROID_LOAD_FROM_ASSETS
@@ -600,33 +605,34 @@ struct Skin {
 struct Sampler {
   std::string name;
   // glTF 2.0 spec does not define default value for `minFilter` and
   // `magFilter`. Set -1 in TinyGLTF(issue #186)
   int minFilter =
       -1;  // optional. -1 = no filter defined. ["NEAREST", "LINEAR",
            // "NEAREST_MIPMAP_NEAREST", "LINEAR_MIPMAP_NEAREST",
            // "NEAREST_MIPMAP_LINEAR", "LINEAR_MIPMAP_LINEAR"]
   int magFilter =
       -1;  // optional. -1 = no filter defined. ["NEAREST", "LINEAR"]
   int wrapS =
       TINYGLTF_TEXTURE_WRAP_REPEAT;  // ["CLAMP_TO_EDGE", "MIRRORED_REPEAT",
                                      // "REPEAT"], default "REPEAT"
   int wrapT =
       TINYGLTF_TEXTURE_WRAP_REPEAT;  // ["CLAMP_TO_EDGE", "MIRRORED_REPEAT",
                                      // "REPEAT"], default "REPEAT"
-  //int wrapR = TINYGLTF_TEXTURE_WRAP_REPEAT;  // TinyGLTF extension. currently not used.
+  // int wrapR = TINYGLTF_TEXTURE_WRAP_REPEAT;  // TinyGLTF extension. currently
+  // not used.
 
   Value extras;
   ExtensionMap extensions;
 
   // Filled when SetStoreOriginalJSONForExtrasAndExtensions is enabled.
   std::string extras_json_string;
   std::string extensions_json_string;
 
   Sampler()
       : minFilter(-1),
         magFilter(-1),
         wrapS(TINYGLTF_TEXTURE_WRAP_REPEAT),
         wrapT(TINYGLTF_TEXTURE_WRAP_REPEAT) {}
   DEFAULT_METHODS(Sampler)
   bool operator==(const Sampler &) const;
 };
@@ -1275,343 +1281,347 @@ bool WriteWholeFile(std::string *err, const std::string &filepath,
 ///
 /// glTF Parser/Serialier context.
 ///
 class TinyGLTF {
  public:
 #ifdef __clang__
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wc++98-compat"
 #endif
 
   TinyGLTF() : bin_data_(nullptr), bin_size_(0), is_binary_(false) {}
 
 #ifdef __clang__
 #pragma clang diagnostic pop
 #endif
 
   ~TinyGLTF() {}
 
   ///
   /// Loads glTF ASCII asset from a file.
   /// Set warning message to `warn` for example it fails to load asserts.
   /// Returns false and set error string to `err` if there's an error.
   ///
   bool LoadASCIIFromFile(Model *model, std::string *err, std::string *warn,
                          const std::string &filename,
                          unsigned int check_sections = REQUIRE_VERSION);
 
   ///
   /// Loads glTF ASCII asset from string(memory).
   /// `length` = strlen(str);
-  /// Set warning message to `warn` for example it fails to load asserts.
-  /// Returns false and set error string to `err` if there's an error.
+  /// `base_dir` is a search path of glTF asset(e.g. images). Path Must be an
+  /// expanded path (e.g. no tilde(`~`), no environment variables). Set warning
+  /// message to `warn` for example it fails to load asserts. Returns false and
+  /// set error string to `err` if there's an error.
   ///
   bool LoadASCIIFromString(Model *model, std::string *err, std::string *warn,
                            const char *str, const unsigned int length,
                            const std::string &base_dir,
                            unsigned int check_sections = REQUIRE_VERSION);
 
   ///
   /// Loads glTF binary asset from a file.
   /// Set warning message to `warn` for example it fails to load asserts.
   /// Returns false and set error string to `err` if there's an error.
   ///
   bool LoadBinaryFromFile(Model *model, std::string *err, std::string *warn,
                           const std::string &filename,
                           unsigned int check_sections = REQUIRE_VERSION);
 
   ///
   /// Loads glTF binary asset from memory.
   /// `length` = strlen(str);
+  /// `base_dir` is a search path of glTF asset(e.g. images). Path Must be an
+  /// expanded path (e.g. no tilde(`~`), no environment variables).
   /// Set warning message to `warn` for example it fails to load asserts.
   /// Returns false and set error string to `err` if there's an error.
   ///
   bool LoadBinaryFromMemory(Model *model, std::string *err, std::string *warn,
                             const unsigned char *bytes,
                             const unsigned int length,
                             const std::string &base_dir = "",
                             unsigned int check_sections = REQUIRE_VERSION);
 
   ///
   /// Write glTF to stream, buffers and images will be embeded
   ///
   bool WriteGltfSceneToStream(Model *model, std::ostream &stream,
                               bool prettyPrint, bool writeBinary);
 
   ///
   /// Write glTF to file.
   ///
   bool WriteGltfSceneToFile(Model *model, const std::string &filename,
                             bool embedImages, bool embedBuffers,
                             bool prettyPrint, bool writeBinary);
 
   ///
   /// Set callback to use for loading image data
   ///
   void SetImageLoader(LoadImageDataFunction LoadImageData, void *user_data);
 
   ///
   /// Unset(remove) callback of loading image data
   ///
   void RemoveImageLoader();
 
   ///
   /// Set callback to use for writing image data
   ///
   void SetImageWriter(WriteImageDataFunction WriteImageData, void *user_data);
 
   ///
   /// Set callbacks to use for filesystem (fs) access and their user data
   ///
   void SetFsCallbacks(FsCallbacks callbacks);
 
   ///
   /// Set serializing default values(default = false).
   /// When true, default values are force serialized to .glTF.
   /// This may be helpfull if you want to serialize a full description of glTF
   /// data.
   ///
   /// TODO(LTE): Supply parsing option as function arguments to
   /// `LoadASCIIFromFile()` and others, not by a class method
   ///
   void SetSerializeDefaultValues(const bool enabled) {
     serialize_default_values_ = enabled;
   }
 
   bool GetSerializeDefaultValues() const { return serialize_default_values_; }
 
   ///
   /// Store original JSON string for `extras` and `extensions`.
   /// This feature will be useful when the user want to reconstruct custom data
   /// structure from JSON string.
   ///
   void SetStoreOriginalJSONForExtrasAndExtensions(const bool enabled) {
     store_original_json_for_extras_and_extensions_ = enabled;
   }
 
   bool GetStoreOriginalJSONForExtrasAndExtensions() const {
     return store_original_json_for_extras_and_extensions_;
   }
 
   ///
   /// Specify whether preserve image channales when loading images or not.
   /// (Not effective when the user suppy their own LoadImageData callbacks)
   ///
   void SetPreserveImageChannels(bool onoff) {
     preserve_image_channels_ = onoff;
   }
 
   bool GetPreserveImageChannels() const { return preserve_image_channels_; }
 
  private:
   ///
   /// Loads glTF asset from string(memory).
   /// `length` = strlen(str);
   /// Set warning message to `warn` for example it fails to load asserts
   /// Returns false and set error string to `err` if there's an error.
   ///
   bool LoadFromString(Model *model, std::string *err, std::string *warn,
                       const char *str, const unsigned int length,
                       const std::string &base_dir, unsigned int check_sections);
 
   const unsigned char *bin_data_ = nullptr;
   size_t bin_size_ = 0;
   bool is_binary_ = false;
 
   bool serialize_default_values_ = false;  ///< Serialize default values?
 
   bool store_original_json_for_extras_and_extensions_ = false;
 
   bool preserve_image_channels_ = false;  /// Default false(expand channels to
                                           /// RGBA) for backward compatibility.
 
   FsCallbacks fs = {
 #ifndef TINYGLTF_NO_FS
       &tinygltf::FileExists, &tinygltf::ExpandFilePath,
       &tinygltf::ReadWholeFile, &tinygltf::WriteWholeFile,
 
       nullptr  // Fs callback user data
 #else
       nullptr, nullptr, nullptr, nullptr,
 
       nullptr  // Fs callback user data
 #endif
   };
 
   LoadImageDataFunction LoadImageData =
 #ifndef TINYGLTF_NO_STB_IMAGE
       &tinygltf::LoadImageData;
 #else
       nullptr;
 #endif
   void *load_image_user_data_{nullptr};
   bool user_image_loader_{false};
 
   WriteImageDataFunction WriteImageData =
 #ifndef TINYGLTF_NO_STB_IMAGE_WRITE
       &tinygltf::WriteImageData;
 #else
       nullptr;
 #endif
   void *write_image_user_data_{nullptr};
 };
 
 #ifdef __clang__
 #pragma clang diagnostic pop  // -Wpadded
 #endif
 
 }  // namespace tinygltf
 
 #endif  // TINY_GLTF_H_
 
 #if defined(TINYGLTF_IMPLEMENTATION) || defined(__INTELLISENSE__)
 #include <algorithm>
 //#include <cassert>
 #ifndef TINYGLTF_NO_FS
 #include <cstdio>
 #include <fstream>
 #endif
 #include <sstream>
 
 #ifdef __clang__
 // Disable some warnings for external files.
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wfloat-equal"
 #pragma clang diagnostic ignored "-Wexit-time-destructors"
 #pragma clang diagnostic ignored "-Wconversion"
 #pragma clang diagnostic ignored "-Wold-style-cast"
 #pragma clang diagnostic ignored "-Wglobal-constructors"
 #if __has_warning("-Wreserved-id-macro")
 #pragma clang diagnostic ignored "-Wreserved-id-macro"
 #endif
 #pragma clang diagnostic ignored "-Wdisabled-macro-expansion"
 #pragma clang diagnostic ignored "-Wpadded"
 #pragma clang diagnostic ignored "-Wc++98-compat"
 #pragma clang diagnostic ignored "-Wc++98-compat-pedantic"
 #pragma clang diagnostic ignored "-Wdocumentation-unknown-command"
 #pragma clang diagnostic ignored "-Wswitch-enum"
 #pragma clang diagnostic ignored "-Wimplicit-fallthrough"
 #pragma clang diagnostic ignored "-Wweak-vtables"
 #pragma clang diagnostic ignored "-Wcovered-switch-default"
 #if __has_warning("-Wdouble-promotion")
 #pragma clang diagnostic ignored "-Wdouble-promotion"
 #endif
 #if __has_warning("-Wcomma")
 #pragma clang diagnostic ignored "-Wcomma"
 #endif
 #if __has_warning("-Wzero-as-null-pointer-constant")
 #pragma clang diagnostic ignored "-Wzero-as-null-pointer-constant"
 #endif
 #if __has_warning("-Wcast-qual")
 #pragma clang diagnostic ignored "-Wcast-qual"
 #endif
 #if __has_warning("-Wmissing-variable-declarations")
 #pragma clang diagnostic ignored "-Wmissing-variable-declarations"
 #endif
 #if __has_warning("-Wmissing-prototypes")
 #pragma clang diagnostic ignored "-Wmissing-prototypes"
 #endif
 #if __has_warning("-Wcast-align")
 #pragma clang diagnostic ignored "-Wcast-align"
 #endif
 #if __has_warning("-Wnewline-eof")
 #pragma clang diagnostic ignored "-Wnewline-eof"
 #endif
 #if __has_warning("-Wunused-parameter")
 #pragma clang diagnostic ignored "-Wunused-parameter"
 #endif
 #if __has_warning("-Wmismatched-tags")
 #pragma clang diagnostic ignored "-Wmismatched-tags"
 #endif
 #if __has_warning("-Wextra-semi-stmt")
 #pragma clang diagnostic ignored "-Wextra-semi-stmt"
 #endif
 #endif
 
 // Disable GCC warnigs
 #ifdef __GNUC__
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wtype-limits"
 #endif  // __GNUC__
 
 #ifndef TINYGLTF_NO_INCLUDE_JSON
 #ifndef TINYGLTF_USE_RAPIDJSON
 #include "json.hpp"
 #else
 #ifndef TINYGLTF_NO_INCLUDE_RAPIDJSON
 #include "document.h"
 #include "prettywriter.h"
 #include "rapidjson.h"
 #include "stringbuffer.h"
 #include "writer.h"
 #endif
 #endif
 #endif
 
 #ifdef TINYGLTF_ENABLE_DRACO
 #include "draco/compression/decode.h"
 #include "draco/core/decoder_buffer.h"
 #endif
 
 #ifndef TINYGLTF_NO_STB_IMAGE
 #ifndef TINYGLTF_NO_INCLUDE_STB_IMAGE
 #include "stb_image.h"
 #endif
 #endif
 
 #ifndef TINYGLTF_NO_STB_IMAGE_WRITE
 #ifndef TINYGLTF_NO_INCLUDE_STB_IMAGE_WRITE
 #include "stb_image_write.h"
 #endif
 #endif
 
 #ifdef __clang__
 #pragma clang diagnostic pop
 #endif
 
 #ifdef __GNUC__
 #pragma GCC diagnostic pop
 #endif
 
 #ifdef _WIN32
 
 // issue 143.
 // Define NOMINMAX to avoid min/max defines,
 // but undef it after included windows.h
 #ifndef NOMINMAX
 #define TINYGLTF_INTERNAL_NOMINMAX
 #define NOMINMAX
 #endif
 
 #ifndef WIN32_LEAN_AND_MEAN
 #define WIN32_LEAN_AND_MEAN
 #define TINYGLTF_INTERNAL_WIN32_LEAN_AND_MEAN
 #endif
 #include <windows.h>  // include API for expanding a file path
 
 #ifdef TINYGLTF_INTERNAL_WIN32_LEAN_AND_MEAN
 #undef WIN32_LEAN_AND_MEAN
 #endif
 
 #if defined(TINYGLTF_INTERNAL_NOMINMAX)
 #undef NOMINMAX
 #endif
 
 #if defined(__GLIBCXX__)  // mingw
 
 #include <fcntl.h>  // _O_RDONLY
 
 #include <ext/stdio_filebuf.h>  // fstream (all sorts of IO stuff) + stdio_filebuf (=streambuf)
 
 #endif
 
 #elif !defined(__ANDROID__) && !defined(__OpenBSD__)
-#include <wordexp.h>
+//#include <wordexp.h>
 #endif
 
 #if defined(__sparcv9) || defined(__powerpc__)
 // Big endian
 #else
 #if (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__) || MINIZ_X86_OR_X64_CPU
 #define TINYGLTF_LITTLE_ENDIAN 1
 #endif
 #endif
@@ -1928,15 +1938,14 @@ bool Primitive::operator==(const Primitive &other) const {
   return this->attributes == other.attributes && this->extras == other.extras &&
          this->indices == other.indices && this->material == other.material &&
          this->mode == other.mode && this->targets == other.targets;
 }
 bool Sampler::operator==(const Sampler &other) const {
   return this->extensions == other.extensions && this->extras == other.extras &&
          this->magFilter == other.magFilter &&
          this->minFilter == other.minFilter && this->name == other.name &&
-         this->wrapS == other.wrapS &&
-         this->wrapT == other.wrapT;
+         this->wrapS == other.wrapS && this->wrapT == other.wrapT;
 
-         //this->wrapR == other.wrapR
+  // this->wrapR == other.wrapR
 }
 bool Scene::operator==(const Scene &other) const {
   return this->extensions == other.extensions && this->extras == other.extras &&
@@ -2042,8 +2051,7 @@ static std::string GetBaseDir(const std::string &filepath) {
 
 static std::string GetBaseFilename(const std::string &filepath) {
   auto idx = filepath.find_last_of("/\\");
-  if (idx != std::string::npos)
-    return filepath.substr(idx + 1);
+  if (idx != std::string::npos) return filepath.substr(idx + 1);
   return filepath;
 }
 
@@ -2605,53 +2613,66 @@ bool FileExists(const std::string &abs_filename, void *) {
 }
 
 std::string ExpandFilePath(const std::string &filepath, void *) {
+  // https://github.com/syoyo/tinygltf/issues/368
+  //
+  // No file path expansion in built-in FS function anymore, since glTF URI
+  // should not contain tilde('~') and environment variables, and for security
+  // reason(`wordexp`).
+  //
+  // Users need to supply `base_dir`(in `LoadASCIIFromString`,
+  // `LoadBinaryFromMemory`) in expanded absolute path.
+
+  return filepath;
+
+#if 0
 #ifdef _WIN32
   // Assume input `filepath` is encoded in UTF-8
   std::wstring wfilepath = UTF8ToWchar(filepath);
   DWORD wlen = ExpandEnvironmentStringsW(wfilepath.c_str(), nullptr, 0);
   wchar_t *wstr = new wchar_t[wlen];
   ExpandEnvironmentStringsW(wfilepath.c_str(), wstr, wlen);
 
   std::wstring ws(wstr);
   delete[] wstr;
   return WcharToUTF8(ws);
 
 #else
 
 #if defined(TARGET_OS_IPHONE) || defined(TARGET_IPHONE_SIMULATOR) || \
     defined(__ANDROID__) || defined(__EMSCRIPTEN__) || defined(__OpenBSD__)
   // no expansion
   std::string s = filepath;
 #else
   std::string s;
   wordexp_t p;
 
   if (filepath.empty()) {
     return "";
   }
 
   // Quote the string to keep any spaces in filepath intact.
   std::string quoted_path = "\"" + filepath + "\"";
   // char** w;
   int ret = wordexp(quoted_path.c_str(), &p, 0);
   if (ret) {
     // err
     s = filepath;
     return s;
   }
 
   // Use first element only.
   if (p.we_wordv) {
     s = std::string(p.we_wordv[0]);
     wordfree(&p);
   } else {
     s = filepath;
   }
 
 #endif
 
   return s;
 #endif
+#endif
 }
 
 bool ReadWholeFile(std::vector<unsigned char> *out, std::string *err,
@@ -4220,53 +4241,53 @@ static bool ParseBufferView(
 static bool ParseSparseAccessor(Accessor *accessor, std::string *err,
                                 const json &o) {
   accessor->sparse.isSparse = true;
 
   int count = 0;
   if (!ParseIntegerProperty(&count, err, o, "count", true, "SparseAccessor")) {
     return false;
   }
 
   json_const_iterator indices_iterator;
   json_const_iterator values_iterator;
   if (!FindMember(o, "indices", indices_iterator)) {
     (*err) = "the sparse object of this accessor doesn't have indices";
     return false;
   }
 
   if (!FindMember(o, "values", values_iterator)) {
     (*err) = "the sparse object ob ths accessor doesn't have values";
     return false;
   }
 
   const json &indices_obj = GetValue(indices_iterator);
   const json &values_obj = GetValue(values_iterator);
 
   int indices_buffer_view = 0, indices_byte_offset = 0, component_type = 0;
-  if (!ParseIntegerProperty(&indices_buffer_view, err, indices_obj, "bufferView",
-                       true, "SparseAccessor")) {
+  if (!ParseIntegerProperty(&indices_buffer_view, err, indices_obj,
+                            "bufferView", true, "SparseAccessor")) {
     return false;
   }
   ParseIntegerProperty(&indices_byte_offset, err, indices_obj, "byteOffset",
                        false);
   if (!ParseIntegerProperty(&component_type, err, indices_obj, "componentType",
-                       true, "SparseAccessor")) {
+                            true, "SparseAccessor")) {
     return false;
   }
 
   int values_buffer_view = 0, values_byte_offset = 0;
   if (!ParseIntegerProperty(&values_buffer_view, err, values_obj, "bufferView",
-                       true, "SparseAccessor")) {
+                            true, "SparseAccessor")) {
     return false;
   }
   ParseIntegerProperty(&values_byte_offset, err, values_obj, "byteOffset",
                        false);
 
   accessor->sparse.count = count;
   accessor->sparse.indices.bufferView = indices_buffer_view;
   accessor->sparse.indices.byteOffset = indices_byte_offset;
   accessor->sparse.indices.componentType = component_type;
   accessor->sparse.values.bufferView = values_buffer_view;
   accessor->sparse.values.byteOffset = values_byte_offset;
 
   return true;
 }
@@ -5089,44 +5110,45 @@ static bool ParseAnimation(Animation *animation, std::string *err,
 static bool ParseSampler(Sampler *sampler, std::string *err, const json &o,
                          bool store_original_json_for_extras_and_extensions) {
   ParseStringProperty(&sampler->name, err, o, "name", false);
 
   int minFilter = -1;
   int magFilter = -1;
   int wrapS = TINYGLTF_TEXTURE_WRAP_REPEAT;
   int wrapT = TINYGLTF_TEXTURE_WRAP_REPEAT;
-  //int wrapR = TINYGLTF_TEXTURE_WRAP_REPEAT;
+  // int wrapR = TINYGLTF_TEXTURE_WRAP_REPEAT;
   ParseIntegerProperty(&minFilter, err, o, "minFilter", false);
   ParseIntegerProperty(&magFilter, err, o, "magFilter", false);
   ParseIntegerProperty(&wrapS, err, o, "wrapS", false);
   ParseIntegerProperty(&wrapT, err, o, "wrapT", false);
-  //ParseIntegerProperty(&wrapR, err, o, "wrapR", false);  // tinygltf extension
+  // ParseIntegerProperty(&wrapR, err, o, "wrapR", false);  // tinygltf
+  // extension
 
   // TODO(syoyo): Check the value is alloed one.
   // (e.g. we allow 9728(NEAREST), but don't allow 9727)
 
   sampler->minFilter = minFilter;
   sampler->magFilter = magFilter;
   sampler->wrapS = wrapS;
   sampler->wrapT = wrapT;
-  //sampler->wrapR = wrapR;
+  // sampler->wrapR = wrapR;
 
   ParseExtensionsProperty(&(sampler->extensions), err, o);
   ParseExtrasProperty(&(sampler->extras), o);
 
   if (store_original_json_for_extras_and_extensions) {
     {
       json_const_iterator it;
       if (FindMember(o, "extensions", it)) {
         sampler->extensions_json_string = JsonToString(GetValue(it));
       }
     }
     {
       json_const_iterator it;
       if (FindMember(o, "extras", it)) {
         sampler->extras_json_string = JsonToString(GetValue(it));
       }
     }
   }
 
   return true;
 }
@@ -7167,15 +7189,15 @@ static void SerializeGltfNode(Node &node, json &o) {
 static void SerializeGltfSampler(Sampler &sampler, json &o) {
   if (sampler.magFilter != -1) {
     SerializeNumberProperty("magFilter", sampler.magFilter, o);
   }
   if (sampler.minFilter != -1) {
     SerializeNumberProperty("minFilter", sampler.minFilter, o);
   }
-  //SerializeNumberProperty("wrapR", sampler.wrapR, o);
+  // SerializeNumberProperty("wrapR", sampler.wrapR, o);
   SerializeNumberProperty("wrapS", sampler.wrapS, o);
   SerializeNumberProperty("wrapT", sampler.wrapT, o);
 
   if (sampler.extras.Type() != NULL_TYPE) {
     SerializeValue("extras", sampler.extras, o);
   }
 }
@@ -7528,55 +7550,57 @@ static bool WriteGltfFile(const std::string &output,
 static void WriteBinaryGltfStream(std::ostream &stream,
                                   const std::string &content,
                                   const std::vector<unsigned char> &binBuffer) {
   const std::string header = "glTF";
   const int version = 2;
 
   const uint32_t content_size = uint32_t(content.size());
   const uint32_t binBuffer_size = uint32_t(binBuffer.size());
   // determine number of padding bytes required to ensure 4 byte alignment
-  const uint32_t content_padding_size = content_size % 4 == 0 ? 0 : 4 - content_size % 4;
-  const uint32_t bin_padding_size = binBuffer_size % 4 == 0 ? 0 : 4 - binBuffer_size % 4;
+  const uint32_t content_padding_size =
+      content_size % 4 == 0 ? 0 : 4 - content_size % 4;
+  const uint32_t bin_padding_size =
+      binBuffer_size % 4 == 0 ? 0 : 4 - binBuffer_size % 4;
 
   // 12 bytes for header, JSON content length, 8 bytes for JSON chunk info.
   // Chunk data must be located at 4-byte boundary, which may require padding
   const uint32_t length =
       12 + 8 + content_size + content_padding_size +
       (binBuffer_size ? (8 + binBuffer_size + bin_padding_size) : 0);
 
   stream.write(header.c_str(), std::streamsize(header.size()));
   stream.write(reinterpret_cast<const char *>(&version), sizeof(version));
   stream.write(reinterpret_cast<const char *>(&length), sizeof(length));
 
   // JSON chunk info, then JSON data
   const uint32_t model_length = uint32_t(content.size()) + content_padding_size;
   const uint32_t model_format = 0x4E4F534A;
   stream.write(reinterpret_cast<const char *>(&model_length),
                sizeof(model_length));
   stream.write(reinterpret_cast<const char *>(&model_format),
                sizeof(model_format));
   stream.write(content.c_str(), std::streamsize(content.size()));
 
   // Chunk must be multiplies of 4, so pad with spaces
   if (content_padding_size > 0) {
     const std::string padding = std::string(size_t(content_padding_size), ' ');
     stream.write(padding.c_str(), std::streamsize(padding.size()));
   }
   if (binBuffer.size() > 0) {
     // BIN chunk info, then BIN data
     const uint32_t bin_length = uint32_t(binBuffer.size()) + bin_padding_size;
     const uint32_t bin_format = 0x004e4942;
     stream.write(reinterpret_cast<const char *>(&bin_length),
                  sizeof(bin_length));
     stream.write(reinterpret_cast<const char *>(&bin_format),
                  sizeof(bin_format));
     stream.write(reinterpret_cast<const char *>(binBuffer.data()),
                  std::streamsize(binBuffer.size()));
     // Chunksize must be multiplies of 4, so pad with zeroes
     if (bin_padding_size > 0) {
       const std::vector<unsigned char> padding =
           std::vector<unsigned char>(size_t(bin_padding_size), 0);
       stream.write(reinterpret_cast<const char *>(padding.data()),
                    std::streamsize(padding.size()));
     }
   }
 }
