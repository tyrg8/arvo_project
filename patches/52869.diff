commit 075cee9e9f1bedb6b2ca87e73a952fb2e92da3c1
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Sat Oct 29 15:38:16 2022 +0200

    xinclude: Fix memory leak when fuzzing
    
    This only affects the fuzzing build mode.

diff --git a/xinclude.c b/xinclude.c
index 57970e03..d0386f53 100644
--- a/xinclude.c
+++ b/xinclude.c
@@ -2226,85 +2226,85 @@ static int
 xmlXIncludeDoProcess(xmlXIncludeCtxtPtr ctxt, xmlNodePtr tree) {
     xmlXIncludeRefPtr ref;
     xmlNodePtr cur;
     int ret = 0;
     int i;
 
     if ((tree == NULL) || (tree->type == XML_NAMESPACE_DECL))
 	return(-1);
     if (ctxt == NULL)
 	return(-1);
 
     /*
      * First phase: lookup the elements in the document
      */
     cur = tree;
     do {
 	/* TODO: need to work on entities -> stack */
         if (xmlXIncludeTestNode(ctxt, cur) == 1) {
 #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
             /*
              * Avoid superlinear expansion by limiting the total number
              * of replacements.
              */
             if (ctxt->incTotal >= 20)
-                return(-1);
+                break;
 #endif
             ctxt->incTotal++;
             ref = xmlXIncludeExpandNode(ctxt, cur);
             /*
              * Mark direct includes.
              */
             if (ref != NULL)
                 ref->replace = 1;
         } else if ((cur->children != NULL) &&
                    ((cur->type == XML_DOCUMENT_NODE) ||
                     (cur->type == XML_ELEMENT_NODE))) {
             cur = cur->children;
             continue;
         }
         do {
             if (cur == tree)
                 break;
             if (cur->next != NULL) {
                 cur = cur->next;
                 break;
             }
             cur = cur->parent;
         } while (cur != NULL);
     } while ((cur != NULL) && (cur != tree));
 
     /*
      * Second phase: extend the original document infoset.
      */
     for (i = 0; i < ctxt->incNr; i++) {
 	if (ctxt->incTab[i]->replace != 0) {
             if ((ctxt->incTab[i]->inc != NULL) ||
                 (ctxt->incTab[i]->emptyFb != 0)) {	/* (empty fallback) */
                 xmlXIncludeIncludeNode(ctxt, ctxt->incTab[i]);
                 ctxt->incTab[i]->replace = 0;
             }
         } else {
             /*
              * Ignore includes which were added indirectly, for example
              * inside xi:fallback elements.
              */
             if (ctxt->incTab[i]->inc != NULL) {
                 xmlFreeNodeList(ctxt->incTab[i]->inc);
                 ctxt->incTab[i]->inc = NULL;
             }
         }
 	ret++;
     }
 
     return(ret);
 }
 
 /**
  * xmlXIncludeSetFlags:
  * @ctxt:  an XInclude processing context
  * @flags: a set of xmlParserOption used for parsing XML includes
  *
  * Set the flags used for further processing of XML resources.
  *
  * Returns 0 in case of success and -1 in case of error.
  */
