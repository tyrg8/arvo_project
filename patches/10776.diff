commit 943c28d70cafc2ca929a939d72afa0db195f77b2
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Tue Oct 2 19:36:36 2018 -0400

    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=10776

diff --git a/MagickCore/draw.c b/MagickCore/draw.c
index 58190521e..f203362ba 100644
--- a/MagickCore/draw.c
+++ b/MagickCore/draw.c
@@ -1501,226 +1501,242 @@ MagickExport MagickBooleanType DrawClipPath(Image *image,
   clip_path=GetImageArtifact(image,id);
   if (clip_path == (const char *) NULL)
     return(MagickFalse);
   clipping_mask=DrawClippingMask(image,draw_info,draw_info->clip_mask,clip_path,
     exception);
   if (clipping_mask == (Image *) NULL)
     return(MagickFalse);
   status=SetImageMask(image,WritePixelMask,clipping_mask,exception);
   clipping_mask=DestroyImage(clipping_mask);
   return(status);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   D r a w C l i p p i n g M a s k                                           %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  DrawClippingMask() draws the clip path and returns it as an image clipping
 %  mask.
 %
 %  The format of the DrawClippingMask method is:
 %
 %      Image *DrawClippingMask(Image *image,const DrawInfo *draw_info,
 %        const char *id,const char *clip_path,ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image: the image.
 %
 %    o draw_info: the draw info.
 %
 %    o id: the clip path id.
 %
 %    o clip_path: the clip path.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
 static Image *DrawClippingMask(Image *image,const DrawInfo *draw_info,
   const char *id,const char *clip_path,ExceptionInfo *exception)
 {
   DrawInfo
     *clone_info;
 
   Image
     *clip_mask,
     *separate_mask;
 
   MagickStatusType
     status;
 
   /*
     Draw a clip path.
   */
   assert(image != (Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",image->filename);
   assert(draw_info != (const DrawInfo *) NULL);
   clip_mask=AcquireImage((const ImageInfo *) NULL,exception);
   status=SetImageExtent(clip_mask,image->columns,image->rows,exception);
   if (status == MagickFalse)
     return(DestroyImage(clip_mask));
   status=SetImageMask(clip_mask,WritePixelMask,(Image *) NULL,exception);
   status=QueryColorCompliance("#0000",AllCompliance,
     &clip_mask->background_color,exception);
   clip_mask->background_color.alpha=(MagickRealType) TransparentAlpha;
   clip_mask->background_color.alpha_trait=BlendPixelTrait;
   status=SetImageBackgroundColor(clip_mask,exception);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(DrawEvent,GetMagickModule(),"\nbegin clip-path %s",
       id);
   clone_info=CloneDrawInfo((ImageInfo *) NULL,draw_info);
   (void) CloneString(&clone_info->primitive,clip_path);
   status=QueryColorCompliance("#ffffff",AllCompliance,&clone_info->fill,
     exception);
   if (clone_info->clip_mask != (char *) NULL)
     clone_info->clip_mask=DestroyString(clone_info->clip_mask);
   status=QueryColorCompliance("#00000000",AllCompliance,&clone_info->stroke,
     exception);
   clone_info->stroke_width=0.0;
   clone_info->alpha=OpaqueAlpha;
   clone_info->clip_path=MagickTrue;
   status=RenderMVGContent(clip_mask,clone_info,1,exception);
   clone_info=DestroyDrawInfo(clone_info);
-  separate_mask=SeparateImage(clip_mask,AlphaChannel,exception);
-  if (separate_mask != (Image *) NULL)
+  if (status != MagickFalse)
     {
-      clip_mask=DestroyImage(clip_mask);
-      clip_mask=separate_mask;
-      status=NegateImage(clip_mask,MagickFalse,exception);
-      if (status == MagickFalse)
-        clip_mask=DestroyImage(clip_mask);
+      status=SetImageMask(clip_mask,CompositePixelMask,(Image *) NULL,
+        exception);
+      if (status != MagickFalse)
+        {
+          separate_mask=SeparateImage(clip_mask,AlphaChannel,exception);
+          if (separate_mask != (Image *) NULL)
+            {
+              clip_mask=DestroyImage(clip_mask);
+              clip_mask=separate_mask;
+              status=NegateImage(clip_mask,MagickFalse,exception);
+            }
+        }
     }
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(DrawEvent,GetMagickModule(),"end clip-path");
+  if (status == MagickFalse)
+    clip_mask=DestroyImage(clip_mask);
   return(clip_mask);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   D r a w C o m p o s i t e M a s k                                         %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  DrawCompositeMask() draws the mask path and returns it as an image mask.
 %
 %  The format of the DrawCompositeMask method is:
 %
 %      Image *DrawCompositeMask(Image *image,const DrawInfo *draw_info,
 %        const char *id,const char *mask_path,ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image: the image.
 %
 %    o draw_info: the draw info.
 %
 %    o id: the mask path id.
 %
 %    o mask_path: the mask path.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
 static Image *DrawCompositeMask(Image *image,const DrawInfo *draw_info,
   const char *id,const char *mask_path,ExceptionInfo *exception)
 {
   Image
     *composite_mask,
     *separate_mask;
 
   DrawInfo
     *clone_info;
 
   MagickStatusType
     status;
 
   /*
     Draw a mask path.
   */
   assert(image != (Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",image->filename);
   assert(draw_info != (const DrawInfo *) NULL);
   composite_mask=AcquireImage((const ImageInfo *) NULL,exception);
   status=SetImageExtent(composite_mask,image->columns,image->rows,exception);
   if (status == MagickFalse)
     return(DestroyImage(composite_mask));
   status=SetImageMask(composite_mask,CompositePixelMask,(Image *) NULL,
     exception);
   status=QueryColorCompliance("#0000",AllCompliance,
     &composite_mask->background_color,exception);
   composite_mask->background_color.alpha=(MagickRealType) TransparentAlpha;
   composite_mask->background_color.alpha_trait=BlendPixelTrait;
   (void) SetImageBackgroundColor(composite_mask,exception);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(DrawEvent,GetMagickModule(),"\nbegin mask-path %s",
       id);
   clone_info=CloneDrawInfo((ImageInfo *) NULL,draw_info);
   (void) CloneString(&clone_info->primitive,mask_path);
   status=QueryColorCompliance("#ffffff",AllCompliance,&clone_info->fill,
     exception);
   status=QueryColorCompliance("#00000000",AllCompliance,&clone_info->stroke,
     exception);
   clone_info->stroke_width=0.0;
   clone_info->alpha=OpaqueAlpha;
   status=RenderMVGContent(composite_mask,clone_info,1,exception);
   clone_info=DestroyDrawInfo(clone_info);
-  separate_mask=SeparateImage(composite_mask,AlphaChannel,exception);
-  if (separate_mask != (Image *) NULL)
+  if (status != MagickFalse)
     {
-      composite_mask=DestroyImage(composite_mask);
-      composite_mask=separate_mask;
-      status=NegateImage(composite_mask,MagickFalse,exception);
-      if (status == MagickFalse)
-        composite_mask=DestroyImage(composite_mask);
+      status=SetImageMask(composite_mask,CompositePixelMask,(Image *) NULL,
+        exception);
+      if (status != MagickFalse)
+        {
+          separate_mask=SeparateImage(composite_mask,AlphaChannel,exception);
+          if (separate_mask != (Image *) NULL)
+            {
+              composite_mask=DestroyImage(composite_mask);
+              composite_mask=separate_mask;
+              status=NegateImage(composite_mask,MagickFalse,exception);
+            }
+        }
     }
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(DrawEvent,GetMagickModule(),"end mask-path");
+  if (status == MagickFalse)
+    composite_mask=DestroyImage(composite_mask);
   return(composite_mask);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 +   D r a w D a s h P o l y g o n                                             %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  DrawDashPolygon() draws a dashed polygon (line, rectangle, ellipse) on the
 %  image while respecting the dash offset and dash pattern attributes.
 %
 %  The format of the DrawDashPolygon method is:
 %
 %      MagickBooleanType DrawDashPolygon(const DrawInfo *draw_info,
 %        const PrimitiveInfo *primitive_info,Image *image,
 %        ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o draw_info: the draw info.
 %
 %    o primitive_info: Specifies a pointer to a PrimitiveInfo structure.
 %
 %    o image: the image.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
