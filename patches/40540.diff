commit 0a7563a53ffedd735cb41c03f697269ef48f0ec2
Author: Qunxin Liu <qxliu@google.com>
Date:   Mon Nov 1 14:56:14 2021 -0700

    [subset] fuzzer fix: https://oss-fuzz.com/testcase?key=6254792024915968
    
    Make sure input is valid, each gid has a corresponding offset value in
    the map

diff --git a/src/hb-ot-color-colr-table.hh b/src/hb-ot-color-colr-table.hh
index 936ea0b99..03476faba 100644
--- a/src/hb-ot-color-colr-table.hh
+++ b/src/hb-ot-color-colr-table.hh
@@ -967,92 +967,95 @@ struct ClipRecord
 struct ClipList
 {
   unsigned serialize_clip_records (hb_serialize_context_t *c,
                                    const hb_set_t& gids,
                                    const hb_map_t& gid_offset_map) const
   {
     TRACE_SERIALIZE (this);
-    if (gids.is_empty ()) return_trace (0);
+    if (gids.is_empty () ||
+        gid_offset_map.get_population () != gids.get_population ())
+      return_trace (0);
+
     unsigned count  = 0;
 
     hb_codepoint_t start_gid= gids.get_min ();
     hb_codepoint_t prev_gid = start_gid;
 
     unsigned offset = gid_offset_map.get (start_gid);
     unsigned prev_offset = offset;
     for (const hb_codepoint_t _ : gids.iter ())
     {
       if (_ == start_gid) continue;
       
       offset = gid_offset_map.get (_);
       if (_ == prev_gid + 1 &&  offset == prev_offset)
       {
         prev_gid = _;
         continue;
       }
 
       ClipRecord record;
       record.startGlyphID = start_gid;
       record.endGlyphID = prev_gid;
       record.clipBox = prev_offset;
 
       if (!c->copy (record, this)) return_trace (0);
       count++;
 
       start_gid = _;
       prev_gid = _;
       prev_offset = offset;
     }
 
     //last one
     {
       ClipRecord record;
       record.startGlyphID = start_gid;
       record.endGlyphID = prev_gid;
       record.clipBox = prev_offset;
       if (!c->copy (record, this)) return_trace (0);
       count++;
     }
     return_trace (count);
   }
 
   bool subset (hb_subset_context_t *c) const
   {
     TRACE_SUBSET (this);
     auto *out = c->serializer->start_embed (*this);
     if (unlikely (!c->serializer->extend_min (out))) return_trace (false);
     if (!c->serializer->check_assign (out->format, format, HB_SERIALIZE_ERROR_INT_OVERFLOW)) return_trace (false);
 
     const hb_set_t& glyphset = *c->plan->_glyphset;
     const hb_map_t &glyph_map = *c->plan->glyph_map;
     
     hb_map_t new_gid_offset_map;
     hb_set_t new_gids;
     for (const ClipRecord& record : clips.iter ())
     {
       unsigned start_gid = record.startGlyphID;
       unsigned end_gid = record.endGlyphID;
       for (unsigned gid = start_gid; gid <= end_gid; gid++)
       {
         if (!glyphset.has (gid) || !glyph_map.has (gid)) continue;
         unsigned new_gid = glyph_map.get (gid);
         new_gid_offset_map.set (new_gid, record.clipBox);
         new_gids.add (new_gid);
       }
     }
 
     unsigned count = serialize_clip_records (c->serializer, new_gids, new_gid_offset_map);
     if (!count) return_trace (false);
     return_trace (c->serializer->check_assign (out->clips.len, count, HB_SERIALIZE_ERROR_INT_OVERFLOW));
   }
 
   bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     return_trace (c->check_struct (this) && clips.sanitize (c, this));
   }
 
   HBUINT8			format;  // Set to 1.
   Array32Of<ClipRecord>		clips;  // Clip records, sorted by startGlyphID
   public:
   DEFINE_SIZE_ARRAY_SIZED (5, clips);
 };
diff --git a/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-6254792024915968 b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-6254792024915968
new file mode 100644
index 000000000..9debc1d5c
Binary files /dev/null and b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-6254792024915968 differ
