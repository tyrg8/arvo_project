commit 78846115eaaa0ad13bb36ab87b5d6be2ebd2dc02
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Sun Sep 24 16:40:40 2017 +0300

    DngOpcodes::FixBadPixelsList: iRectangle2D fullImage: fix off-by-one
    
    isPointInside()/isThisInside() considers both of the points
    to be valid, thus later on we could end up with invalid info.

diff --git a/src/librawspeed/common/DngOpcodes.cpp b/src/librawspeed/common/DngOpcodes.cpp
index 66beebad..13adc1f3 100644
--- a/src/librawspeed/common/DngOpcodes.cpp
+++ b/src/librawspeed/common/DngOpcodes.cpp
@@ -99,54 +99,54 @@ class DngOpcodes::FixBadPixelsList final : public DngOpcodes::DngOpcode {
 
 public:
   explicit FixBadPixelsList(const RawImage& ri, ByteStream* bs) {
-    const iRectangle2D fullImage(0, 0, ri->getUncroppedDim().x,
-                                 ri->getUncroppedDim().y);
+    const iRectangle2D fullImage(0, 0, ri->getUncroppedDim().x - 1,
+                                 ri->getUncroppedDim().y - 1);
 
     bs->getU32(); // Skip phase - we don't care
     auto badPointCount = bs->getU32();
     auto badRectCount = bs->getU32();
 
     bs->check(2 * 4 * badPointCount + 4 * 4 * badRectCount);
 
     // Read points
     badPixels.reserve(badPixels.size() + badPointCount);
     for (auto i = 0U; i < badPointCount; ++i) {
       auto y = bs->getU32();
       auto x = bs->getU32();
 
       const iPoint2D badPoint(x, y);
       if (!fullImage.isPointInside(badPoint))
         ThrowRDE("Bad point not inside image.");
 
       badPixels.emplace_back(y << 16 | x);
     }
 
     // Read rects
     for (auto i = 0U; i < badRectCount; ++i) {
       auto top = bs->getU32();
       auto left = bs->getU32();
       auto bottom = bs->getU32();
       auto right = bs->getU32();
 
       const iRectangle2D badRect(left, top, right - left, bottom - top);
       if (!badRect.isThisInside(fullImage))
         ThrowRDE("Bad rectangle not inside image.");
 
       auto area = (1 + bottom - top) * (1 + right - left);
       badPixels.reserve(badPixels.size() + area);
       for (auto y = top; y <= bottom; ++y) {
         for (auto x = left; x <= right; ++x) {
           badPixels.emplace_back(y << 16 | x);
         }
       }
     }
   }
 
   void apply(const RawImage& ri) override {
     MutexLocker guard(&ri->mBadPixelMutex);
     ri->mBadPixelPositions.insert(ri->mBadPixelPositions.begin(),
                                   badPixels.begin(), badPixels.end());
   }
 };
 
 // ****************************************************************************
