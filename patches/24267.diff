commit 03d578619513b7186624172538f655a59ab4204b
Author: Nickolay Olshevsky <o.nickolay@gmail.com>
Date:   Wed Jul 29 18:00:33 2020 +0300

    Use uint8_t instead of signed char/int when accessing B64DEC array.

diff --git a/src/librepgp/stream-armor.cpp b/src/librepgp/stream-armor.cpp
index 88383288..e11bbba5 100644
--- a/src/librepgp/stream-armor.cpp
+++ b/src/librepgp/stream-armor.cpp
@@ -127,28 +127,28 @@ static bool
 armor_read_crc(pgp_source_t *src)
 {
     uint8_t                     dec[4] = {0};
     char                        crc[8] = {0};
     size_t                      clen = 0;
     pgp_source_armored_param_t *param = (pgp_source_armored_param_t *) src->param;
 
     if (!src_peek_line(param->readsrc, crc, sizeof(crc), &clen)) {
         return false;
     }
 
     if ((clen != 5) || (crc[0] != CH_EQ)) {
         return false;
     }
 
     for (int i = 0; i < 4; i++) {
-        if ((dec[i] = B64DEC[(int) crc[i + 1]]) >= 64) {
+        if ((dec[i] = B64DEC[(uint8_t) crc[i + 1]]) >= 64) {
             return false;
         }
     }
 
     param->readcrc[0] = (dec[0] << 2) | ((dec[1] >> 4) & 0x0F);
     param->readcrc[1] = (dec[1] << 4) | ((dec[2] >> 2) & 0x0F);
     param->readcrc[2] = (dec[2] << 6) | dec[3];
 
     src_skip(param->readsrc, 5);
     return src_skip_eol(param->readsrc);
 }
@@ -218,191 +218,191 @@ static bool
 armored_src_read(pgp_source_t *src, void *buf, size_t len, size_t *readres)
 {
     pgp_source_armored_param_t *param = (pgp_source_armored_param_t *) src->param;
     uint8_t  b64buf[ARMORED_BLOCK_SIZE];     /* input base64 data with spaces and so on */
     uint8_t  decbuf[ARMORED_BLOCK_SIZE + 4]; /* decoded 6-bit values */
     uint8_t *bufptr = (uint8_t *) buf;       /* for better readability below */
     uint8_t *bptr, *bend;                    /* pointer to input data in b64buf */
     uint8_t *dptr, *dend, *pend; /* pointers to decoded data in decbuf: working pointer, last
                                     available byte, last byte to process */
     uint8_t  bval;
     uint32_t b24;
     size_t   read = 0;
     size_t   left = len;
     size_t   eqcount = 0; /* number of '=' at the end of base64 stream */
 
     if (!param) {
         return false;
     }
 
     /* checking whether there are some decoded bytes */
     if (param->restpos < param->restlen) {
         if (param->restlen - param->restpos >= len) {
             memcpy(bufptr, &param->rest[param->restpos], len);
             param->restpos += len;
             pgp_hash_add(&param->crc_ctx, bufptr, len);
             *readres = len;
             return true;
         } else {
             left = len - (param->restlen - param->restpos);
             memcpy(bufptr, &param->rest[param->restpos], len - left);
             param->restpos = param->restlen = 0;
             bufptr += len - left;
         }
     }
 
     if (param->eofb64) {
         *readres = len - left;
         return true;
     }
 
     memcpy(decbuf, param->brest, param->brestlen);
     dend = decbuf + param->brestlen;
 
     do {
         if (!src_peek(param->readsrc, b64buf, sizeof(b64buf), &read)) {
             return false;
         }
         if (!read) {
             RNP_LOG("premature end of armored input");
             return false;
         }
 
         dptr = dend;
         bptr = b64buf;
         bend = b64buf + read;
         /* checking input data, stripping away whitespaces, checking for end of the b64 data */
         while (bptr < bend) {
             if ((bval = B64DEC[*(bptr++)]) < 64) {
                 *(dptr++) = bval;
             } else if (bval == 0xfe) {
                 /* '=' means the base64 padding or the beginning of checksum */
                 param->eofb64 = true;
                 break;
             } else if (bval == 0xff) {
-                RNP_LOG("wrong base64 character %c", (char) *(bptr - 1));
+                RNP_LOG("wrong base64 character 0x%02hhX", *(bptr - 1));
                 return false;
             }
         }
 
         dend = dptr;
         dptr = decbuf;
         /* Processing full 4s which will go directly to the buf.
            After this left < 3 or decbuf has < 4 bytes */
         if ((size_t)(dend - dptr) / 4 * 3 < left) {
             pend = decbuf + (dend - dptr) / 4 * 4;
             left -= (dend - dptr) / 4 * 3;
         } else {
             pend = decbuf + (left / 3) * 4;
             left -= left / 3 * 3;
         }
 
         /* this one would the most performance-consuming part for large chunks */
         while (dptr < pend) {
             b24 = *dptr++ << 18;
             b24 |= *dptr++ << 12;
             b24 |= *dptr++ << 6;
             b24 |= *dptr++;
             *bufptr++ = b24 >> 16;
             *bufptr++ = b24 >> 8;
             *bufptr++ = b24 & 0xff;
         }
 
         /* moving rest to the beginning of decbuf */
         memmove(decbuf, dptr, dend - dptr);
         dend = decbuf + (dend - dptr);
 
         if (param->eofb64) {
             /* '=' reached, bptr points on it */
             src_skip(param->readsrc, bptr - b64buf - 1);
 
             /* reading b64 padding if any */
             if (!armor_read_padding(src, &eqcount)) {
                 RNP_LOG("wrong padding");
                 return false;
             }
 
             /* reading crc */
             if (!armor_read_crc(src)) {
                 RNP_LOG("wrong crc line");
                 return false;
             }
             /* reading armor trailing line */
             if (!armor_read_trailer(src)) {
                 RNP_LOG("wrong armor trailer");
                 return false;
             }
 
             break;
         } else {
             /* all input is base64 data or eol/spaces, so skipping it */
             src_skip(param->readsrc, read);
         }
     } while (left >= 3);
 
     /* process bytes left in decbuf */
 
     dptr = decbuf;
     pend = decbuf + (dend - decbuf) / 4 * 4;
     bptr = param->rest;
     while (dptr < pend) {
         b24 = *dptr++ << 18;
         b24 |= *dptr++ << 12;
         b24 |= *dptr++ << 6;
         b24 |= *dptr++;
         *bptr++ = b24 >> 16;
         *bptr++ = b24 >> 8;
         *bptr++ = b24 & 0xff;
     }
 
     pgp_hash_add(&param->crc_ctx, buf, bufptr - (uint8_t *) buf);
 
     if (param->eofb64) {
         if ((dend - dptr + eqcount) % 4 != 0) {
             RNP_LOG("wrong b64 padding");
             return false;
         }
 
         if (eqcount == 1) {
             b24 = (*dptr << 10) | (*(dptr + 1) << 4) | (*(dptr + 2) >> 2);
             *bptr++ = b24 >> 8;
             *bptr++ = b24 & 0xff;
         } else if (eqcount == 2) {
             *bptr++ = (*dptr << 2) | (*(dptr + 1) >> 4);
         }
 
         uint8_t crc_fin[5];
         /* Calculate CRC after reading whole input stream */
         pgp_hash_add(&param->crc_ctx, param->rest, bptr - param->rest);
         if (!pgp_hash_finish(&param->crc_ctx, crc_fin)) {
             RNP_LOG("Can't finalize RNP ctx");
             return false;
         }
 
         if (memcmp(param->readcrc, crc_fin, 3)) {
             RNP_LOG("CRC mismatch");
             return false;
         }
     } else {
         /* few bytes which do not fit to 4 boundary */
         for (int i = 0; i < dend - dptr; i++) {
             param->brest[i] = *(dptr + i);
         }
         param->brestlen = dend - dptr;
     }
 
     param->restlen = bptr - param->rest;
 
     /* check whether we have some bytes to add */
     if ((left > 0) && (param->restlen > 0)) {
         read = left > param->restlen ? param->restlen : left;
         memcpy(bufptr, param->rest, read);
         if (!param->eofb64) {
             pgp_hash_add(&param->crc_ctx, bufptr, read);
         }
         left -= read;
         param->restpos += read;
     }
 
     *readres = len - left;
     return true;
 }
@@ -534,42 +534,42 @@ static bool
 armor_parse_header(pgp_source_t *src)
 {
     char                        hdr[128];
     const char *                armhdr;
     size_t                      armhdrlen;
     size_t                      read;
     pgp_source_armored_param_t *param = (pgp_source_armored_param_t *) src->param;
 
     if (!src_peek(param->readsrc, hdr, sizeof(hdr), &read) || (read < 20)) {
         return false;
     }
 
     if (!(armhdr = find_armor_header(hdr, read, &armhdrlen))) {
         RNP_LOG("no armor header");
         return false;
     }
 
     /* if there are non-whitespaces before the armor header then issue warning */
     for (char *ch = hdr; ch < armhdr; ch++) {
-        if (B64DEC[(int) *ch] != 0xfd) {
+        if (B64DEC[(uint8_t) *ch] != 0xfd) {
             RNP_LOG("extra data before the header line");
             break;
         }
     }
 
     param->type = armor_str_to_data_type(armhdr + 5, armhdrlen - 10);
     if (param->type == PGP_ARMORED_UNKNOWN) {
         RNP_LOG("unknown armor header");
         return false;
     }
 
     if ((param->armorhdr = (char *) malloc(armhdrlen - 9)) == NULL) {
         RNP_LOG("allocation failed");
         return false;
     }
 
     memcpy(param->armorhdr, armhdr + 5, armhdrlen - 10);
     param->armorhdr[armhdrlen - 10] = '\0';
     src_skip(param->readsrc, armhdr - hdr + armhdrlen);
     armor_skip_chars(param->readsrc, "\t ");
     return true;
 }
