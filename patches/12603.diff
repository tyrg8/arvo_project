commit 07eebcd72f45c8fd7563d3f9ec5d2bed48f65f36
Author: Cristy <mikayla-grace@urban-warrior.org>
Date:   Mon Mar 4 19:25:01 2019 -0500

    ...

diff --git a/MagickCore/locale.c b/MagickCore/locale.c
index d30960e9d..158b7ef92 100644
--- a/MagickCore/locale.c
+++ b/MagickCore/locale.c
@@ -1495,73 +1495,73 @@ MagickExport void LocaleLower(char *string)
   assert(string != (char *) NULL);
   for (q=string; *q != '\0'; q++)
     *q=(char) LocaleLowercase((int) *q);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   L o c a l e L o w e r c a s e                                             %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  LocaleLowercase() convert to lowercase.
 %
 %  The format of the LocaleLowercase method is:
 %
 %      void LocaleLowercase(const int c)
 %
 %  A description of each parameter follows:
 %
 %    o If c is a uppercase letter, return its lowercase equivalent.
 %
 */
 MagickExport int LocaleLowercase(const int c)
 {
 #if defined(MAGICKCORE_LOCALE_SUPPORT)
   if (c_locale != (locale_t) NULL)
-    return(tolower_l(c,c_locale));
+    return(tolower_l((int) ((unsigned char) c),c_locale));
 #endif
-  return(tolower(c));
+  return(tolower((int) ((unsigned char) c)));
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   L o c a l e N C o m p a r e                                               %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  LocaleNCompare() performs a case-insensitive comparison of two strings
 %  byte-by-byte, according to the ordering of the current locale encoding.
 %
 %  LocaleNCompare returns an integer greater than, equal to, or less than 0,
 %  if the string pointed to by p is greater than, equal to, or less than the
 %  string pointed to by q respectively.  The sign of a non-zero return value
 %  is determined by the sign of the difference between the values of the first
 %  pair of bytes that differ in the strings being compared.
 %
 %  The LocaleNCompare method makes the same comparison as LocaleCompare but
 %  looks at a maximum of n bytes.  Bytes following a null byte are not
 %  compared.
 %
 %  The format of the LocaleNCompare method is:
 %
 %      int LocaleNCompare(const char *p,const char *q,const size_t n)
 %
 %  A description of each parameter follows:
 %
 %    o p: A pointer to a character string.
 %
 %    o q: A pointer to a character string to compare to p.
 %
 %    o length: the number of characters to compare in strings p and q.
 %
 */
@@ -1633,54 +1633,54 @@ MagickExport void LocaleUpper(char *string)
   assert(string != (char *) NULL);
   for (q=string; *q != '\0'; q++)
     *q=(char) LocaleUppercase((int) *q);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   L o c a l e U p p e r c a s e                                             %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  LocaleUppercase() convert to uppercase.
 %
 %  The format of the LocaleUppercase method is:
 %
 %      void LocaleUppercase(const int c)
 %
 %  A description of each parameter follows:
 %
 %    o If c is a lowercase letter, return its uppercase equivalent.
 %
 */
 MagickExport int LocaleUppercase(const int c)
 {
 #if defined(MAGICKCORE_LOCALE_SUPPORT)
   if (c_locale != (locale_t) NULL)
-    return(toupper_l(c,c_locale));
+    return(toupper_l((int) ((unsigned char) c),c_locale));
 #endif
-  return(toupper(c));
+  return(toupper((int) ((unsigned char) c)));
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 +   L o c a l e C o m p o n e n t G e n e s i s                               %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  LocaleComponentGenesis() instantiates the locale component.
 %
 %  The format of the LocaleComponentGenesis method is:
 %
 %      MagickBooleanType LocaleComponentGenesis(void)
 %
 */
