commit c388a879d73633b6ebe8353fd2a0407b908fe26f
Author: Sam Atkins <atkinssj@serenityos.org>
Date:   Thu Jan 20 17:18:17 2022 +0000

    AK+Userland: Make AK::decode_base64 return ErrorOr

diff --git a/AK/Base64.cpp b/AK/Base64.cpp
index 11b190ec08..364425f468 100644
--- a/AK/Base64.cpp
+++ b/AK/Base64.cpp
@@ -48,56 +48,49 @@ size_t calculate_base64_encoded_length(ReadonlyBytes input)
     return ((4 * input.size() / 3) + 3) & ~3;
 }
 
-Optional<ByteBuffer> decode_base64(StringView input)
+ErrorOr<ByteBuffer> decode_base64(StringView input)
 {
-    auto get = [&](const size_t offset, bool* is_padding) -> Optional<u8> {
+    auto get = [&](const size_t offset, bool* is_padding) -> ErrorOr<u8> {
         constexpr auto table = make_lookup_table();
         if (offset >= input.length())
             return 0;
         if (input[offset] == '=') {
             if (!is_padding)
-                return {};
+                return Error::from_string_literal("Invalid '=' character outside of padding in base64 data");
             *is_padding = true;
             return 0;
         }
         i16 result = table[static_cast<unsigned char>(input[offset])];
         if (result < 0)
-            return {};
+            return Error::from_string_literal("Invalid character in base64 data");
         VERIFY(result < 256);
         return { result };
     };
-#define TRY_GET(index, is_padding)                       \
-    ({                                                   \
-        auto _temporary_result = get(index, is_padding); \
-        if (!_temporary_result.has_value())              \
-            return {};                                   \
-        _temporary_result.value();                       \
-    })
 
     Vector<u8> output;
     output.ensure_capacity(calculate_base64_decoded_length(input));
 
     for (size_t i = 0; i < input.length(); i += 4) {
         bool in2_is_padding = false;
         bool in3_is_padding = false;
 
-        const u8 in0 = TRY_GET(i, nullptr);
-        const u8 in1 = TRY_GET(i + 1, nullptr);
-        const u8 in2 = TRY_GET(i + 2, &in2_is_padding);
-        const u8 in3 = TRY_GET(i + 3, &in3_is_padding);
+        const u8 in0 = TRY(get(i, nullptr));
+        const u8 in1 = TRY(get(i + 1, nullptr));
+        const u8 in2 = TRY(get(i + 2, &in2_is_padding));
+        const u8 in3 = TRY(get(i + 3, &in3_is_padding));
 
         const u8 out0 = (in0 << 2) | ((in1 >> 4) & 3);
         const u8 out1 = ((in1 & 0xf) << 4) | ((in2 >> 2) & 0xf);
         const u8 out2 = ((in2 & 0x3) << 6) | in3;
 
         output.append(out0);
         if (!in2_is_padding)
             output.append(out1);
         if (!in3_is_padding)
             output.append(out2);
     }
 
-    return ByteBuffer::copy(output).release_value_but_fixme_should_propagate_errors();
+    return ByteBuffer::copy(output);
 }
 
 String encode_base64(ReadonlyBytes input)
diff --git a/AK/Base64.h b/AK/Base64.h
index 6b7eae8d87..9493e634e5 100644
--- a/AK/Base64.h
+++ b/AK/Base64.h
@@ -17,7 +17,7 @@ size_t calculate_base64_decoded_length(StringView);
 
 size_t calculate_base64_encoded_length(ReadonlyBytes);
 
-Optional<ByteBuffer> decode_base64(StringView);
+ErrorOr<ByteBuffer> decode_base64(StringView);
 
 String encode_base64(ReadonlyBytes);
 
diff --git a/Tests/AK/TestBase64.cpp b/Tests/AK/TestBase64.cpp
index 38767e1741..fcda584a28 100644
--- a/Tests/AK/TestBase64.cpp
+++ b/Tests/AK/TestBase64.cpp
@@ -13,28 +13,28 @@
 TEST_CASE(test_decode)
 {
     auto decode_equal = [&](const char* input, const char* expected) {
         auto decoded_option = decode_base64(StringView(input));
-        EXPECT(decoded_option.has_value());
+        EXPECT(!decoded_option.is_error());
         auto decoded = decoded_option.release_value();
         EXPECT(String::copy(decoded) == String(expected));
         EXPECT(StringView(expected).length() <= calculate_base64_decoded_length(StringView(input).bytes()));
     };
 
     decode_equal("", "");
     decode_equal("Zg==", "f");
     decode_equal("Zm8=", "fo");
     decode_equal("Zm9v", "foo");
     decode_equal("Zm9vYg==", "foob");
     decode_equal("Zm9vYmE=", "fooba");
     decode_equal("Zm9vYmFy", "foobar");
 }
 
 TEST_CASE(test_decode_invalid)
 {
-    EXPECT(!decode_base64(StringView("asdf\xffqwe")).has_value());
-    EXPECT(!decode_base64(StringView("asdf\x80qwe")).has_value());
-    EXPECT(!decode_base64(StringView("asdf:qwe")).has_value());
-    EXPECT(!decode_base64(StringView("asdf=qwe")).has_value());
+    EXPECT(decode_base64(StringView("asdf\xffqwe")).is_error());
+    EXPECT(decode_base64(StringView("asdf\x80qwe")).is_error());
+    EXPECT(decode_base64(StringView("asdf:qwe")).is_error());
+    EXPECT(decode_base64(StringView("asdf=qwe")).is_error());
 }
 
 TEST_CASE(test_encode)
diff --git a/Userland/Applications/Mail/MailWidget.cpp b/Userland/Applications/Mail/MailWidget.cpp
index 15c01513f7..e5e6670233 100644
--- a/Userland/Applications/Mail/MailWidget.cpp
+++ b/Userland/Applications/Mail/MailWidget.cpp
@@ -383,132 +383,134 @@ void MailWidget::selected_mailbox()
 void MailWidget::selected_email_to_load()
 {
     auto const& index = m_individual_mailbox_view->selection().first();
 
     if (!index.is_valid())
         return;
 
     // IMAP is 1-based.
     int id_of_email_to_load = index.row() + 1;
 
     auto fetch_command = IMAP::FetchCommand {
         .sequence_set = { { id_of_email_to_load, id_of_email_to_load } },
         .data_items = {
             IMAP::FetchCommand::DataItem {
                 .type = IMAP::FetchCommand::DataItemType::BodyStructure,
             },
         },
     };
 
     auto fetch_response = m_imap_client->fetch(fetch_command, false)->await().release_value();
 
     if (fetch_response.status() != IMAP::ResponseStatus::OK) {
         dbgln("Failed to retrieve the body structure of the selected e-mail. The server says: '{}'", fetch_response.response_text());
         GUI::MessageBox::show_error(window(), String::formatted("Failed to retrieve the selected e-mail. The server says: '{}'", fetch_response.response_text()));
         return;
     }
 
     Vector<u32> selected_alternative_position;
     String selected_alternative_encoding;
 
     auto& response_data = fetch_response.data().fetch_data().last().get<IMAP::FetchResponseData>();
 
     response_data.body_structure().data().visit(
         [&](IMAP::BodyStructureData const& data) {
             // The message will be in the first position.
             selected_alternative_position.append(1);
             selected_alternative_encoding = data.encoding;
         },
         [&](IMAP::MultiPartBodyStructureData const& data) {
             auto alternatives = get_alternatives(data);
             if (alternatives.is_empty()) {
                 dbgln("No alternatives. The server said: '{}'", fetch_response.response_text());
                 GUI::MessageBox::show_error(window(), "The server sent no message to display.");
                 return;
             }
 
             // We can choose whichever alternative we want. In general, we should choose the last alternative that know we can display.
             // RFC 2046 Section 5.1.4 https://datatracker.ietf.org/doc/html/rfc2046#section-5.1.4
             auto chosen_alternative = alternatives.last_matching([this](auto& alternative) {
                 return is_supported_alternative(alternative);
             });
 
             if (!chosen_alternative.has_value()) {
                 GUI::MessageBox::show(window(), "Displaying this type of e-mail is currently unsupported.", "Unsupported", GUI::MessageBox::Type::Information);
                 return;
             }
 
             selected_alternative_position = chosen_alternative->position;
             selected_alternative_encoding = chosen_alternative->body_structure.encoding;
         });
 
     if (selected_alternative_position.is_empty()) {
         // An error occurred above, return.
         return;
     }
 
     fetch_command = IMAP::FetchCommand {
         .sequence_set { { id_of_email_to_load, id_of_email_to_load } },
         .data_items = {
             IMAP::FetchCommand::DataItem {
                 .type = IMAP::FetchCommand::DataItemType::BodySection,
                 .section = IMAP::FetchCommand::DataItem::Section {
                     .type = IMAP::FetchCommand::DataItem::SectionType::Parts,
                     .parts = selected_alternative_position,
                 },
                 .partial_fetch = false,
             },
         },
     };
 
     fetch_response = m_imap_client->fetch(fetch_command, false)->await().release_value();
 
     if (fetch_response.status() != IMAP::ResponseStatus::OK) {
         dbgln("Failed to retrieve the body of the selected e-mail. The server says: '{}'", fetch_response.response_text());
         GUI::MessageBox::show_error(window(), String::formatted("Failed to retrieve the selected e-mail. The server says: '{}'", fetch_response.response_text()));
         return;
     }
 
     auto& fetch_data = fetch_response.data().fetch_data();
 
     if (fetch_data.is_empty()) {
         dbgln("The server sent no fetch data.");
         GUI::MessageBox::show_error(window(), "The server sent no data.");
         return;
     }
 
     auto& fetch_response_data = fetch_data.last().get<IMAP::FetchResponseData>();
 
     if (!fetch_response_data.contains_response_type(IMAP::FetchResponseType::Body)) {
         GUI::MessageBox::show_error(window(), "The server sent no body.");
         return;
     }
 
     auto& body_data = fetch_response_data.body_data();
     auto body_text_part_iterator = body_data.find_if([](Tuple<IMAP::FetchCommand::DataItem, Optional<String>>& data) {
         const auto data_item = data.get<0>();
         return data_item.section.has_value() && data_item.section->type == IMAP::FetchCommand::DataItem::SectionType::Parts;
     });
     VERIFY(body_text_part_iterator != body_data.end());
 
     auto& encoded_data = body_text_part_iterator->get<1>().value();
 
     String decoded_data;
 
     // FIXME: String uses char internally, so 8bit shouldn't be stored in it.
     //        However, it works for now.
     if (selected_alternative_encoding.equals_ignoring_case("7bit") || selected_alternative_encoding.equals_ignoring_case("8bit")) {
         decoded_data = encoded_data;
     } else if (selected_alternative_encoding.equals_ignoring_case("base64")) {
-        decoded_data = decode_base64(encoded_data).value_or(ByteBuffer());
+        auto decoded_base64 = decode_base64(encoded_data);
+        if (!decoded_base64.is_error())
+            decoded_data = decoded_base64.release_value();
     } else if (selected_alternative_encoding.equals_ignoring_case("quoted-printable")) {
         decoded_data = IMAP::decode_quoted_printable(encoded_data);
     } else {
         dbgln("Mail: Unimplemented decoder for encoding: {}", selected_alternative_encoding);
         GUI::MessageBox::show(window(), String::formatted("The e-mail encoding '{}' is currently unsupported.", selected_alternative_encoding), "Unsupported", GUI::MessageBox::Type::Information);
         return;
     }
 
     // FIXME: I'm not sure what the URL should be. Just use the default URL "about:blank".
     // FIXME: It would be nice if we could pass over the charset.
     m_web_view->load_html(decoded_data, "about:blank");
 }
diff --git a/Userland/Applications/PixelPaint/Image.cpp b/Userland/Applications/PixelPaint/Image.cpp
index c16f337d95..b61152a4ae 100644
--- a/Userland/Applications/PixelPaint/Image.cpp
+++ b/Userland/Applications/PixelPaint/Image.cpp
@@ -81,33 +81,30 @@ ErrorOr<NonnullRefPtr<Image>> Image::try_create_from_bitmap(NonnullRefPtr<Gfx::B
 ErrorOr<NonnullRefPtr<Image>> Image::try_create_from_pixel_paint_json(JsonObject const& json)
 {
     auto image = TRY(try_create_with_size({ json.get("width").to_i32(), json.get("height").to_i32() }));
 
     auto layers_value = json.get("layers");
     for (auto& layer_value : layers_value.as_array().values()) {
         auto& layer_object = layer_value.as_object();
         auto name = layer_object.get("name").as_string();
 
         auto bitmap_base64_encoded = layer_object.get("bitmap").as_string();
-        auto bitmap_data = decode_base64(bitmap_base64_encoded);
-        if (!bitmap_data.has_value())
-            return Error::from_string_literal("Base64 decode failed"sv);
-
-        auto bitmap = TRY(try_decode_bitmap(bitmap_data.value()));
+        auto bitmap_data = TRY(decode_base64(bitmap_base64_encoded));
+        auto bitmap = TRY(try_decode_bitmap(bitmap_data));
         auto layer = TRY(Layer::try_create_with_bitmap(*image, move(bitmap), name));
 
         auto width = layer_object.get("width").to_i32();
         auto height = layer_object.get("height").to_i32();
 
         if (width != layer->size().width() || height != layer->size().height())
             return Error::from_string_literal("Decoded layer bitmap has wrong size"sv);
 
         image->add_layer(*layer);
 
         layer->set_location({ layer_object.get("locationx").to_i32(), layer_object.get("locationy").to_i32() });
         layer->set_opacity_percent(layer_object.get("opacity_percent").to_i32());
         layer->set_visible(layer_object.get("visible").as_bool());
         layer->set_selected(layer_object.get("selected").as_bool());
     }
 
     return image;
 }
diff --git a/Userland/Libraries/LibCrypto/ASN1/PEM.cpp b/Userland/Libraries/LibCrypto/ASN1/PEM.cpp
index 90f957cfc9..a23bed08bf 100644
--- a/Userland/Libraries/LibCrypto/ASN1/PEM.cpp
+++ b/Userland/Libraries/LibCrypto/ASN1/PEM.cpp
@@ -13,47 +13,47 @@ namespace Crypto {
 ByteBuffer decode_pem(ReadonlyBytes data)
 {
     GenericLexer lexer { data };
     ByteBuffer decoded;
 
     // FIXME: Parse multiple.
     enum {
         PreStartData,
         Started,
         Ended,
     } state { PreStartData };
     while (!lexer.is_eof()) {
         switch (state) {
         case PreStartData:
             if (lexer.consume_specific("-----BEGIN"))
                 state = Started;
             lexer.consume_line();
             break;
         case Started: {
             if (lexer.consume_specific("-----END")) {
                 state = Ended;
                 lexer.consume_line();
                 break;
             }
             auto b64decoded = decode_base64(lexer.consume_line().trim_whitespace(TrimMode::Right));
-            if (!b64decoded.has_value()) {
-                dbgln("Failed to decode PEM, likely bad Base64");
+            if (b64decoded.is_error()) {
+                dbgln("Failed to decode PEM: {}", b64decoded.error().string_literal());
                 return {};
             }
             if (decoded.try_append(b64decoded.value().data(), b64decoded.value().size()).is_error()) {
                 dbgln("Failed to decode PEM, likely OOM condition");
                 return {};
             }
             break;
         }
         case Ended:
             lexer.consume_all();
             break;
         default:
             VERIFY_NOT_REACHED();
         }
     }
 
     return decoded;
 }
 
 }
diff --git a/Userland/Libraries/LibHTTP/HttpRequest.cpp b/Userland/Libraries/LibHTTP/HttpRequest.cpp
index fc8e003694..034bc56766 100644
--- a/Userland/Libraries/LibHTTP/HttpRequest.cpp
+++ b/Userland/Libraries/LibHTTP/HttpRequest.cpp
@@ -193,20 +193,20 @@ Optional<HttpRequest::Header> HttpRequest::get_http_basic_authentication_header(
 Optional<HttpRequest::BasicAuthenticationCredentials> HttpRequest::parse_http_basic_authentication_header(String const& value)
 {
     if (!value.starts_with("Basic ", AK::CaseSensitivity::CaseInsensitive))
         return {};
     auto token = value.substring_view(6);
     if (token.is_empty())
         return {};
     auto decoded_token_bb = decode_base64(token);
-    if (!decoded_token_bb.has_value())
+    if (decoded_token_bb.is_error())
         return {};
     auto decoded_token = String::copy(decoded_token_bb.value());
     auto colon_index = decoded_token.find(':');
     if (!colon_index.has_value())
         return {};
     auto username = decoded_token.substring_view(0, colon_index.value());
     auto password = decoded_token.substring_view(colon_index.value() + 1);
     return BasicAuthenticationCredentials { username, password };
 }
 
 }
diff --git a/Userland/Libraries/LibWeb/Bindings/WindowObject.cpp b/Userland/Libraries/LibWeb/Bindings/WindowObject.cpp
index 85eaf2632d..88a20ab02a 100644
--- a/Userland/Libraries/LibWeb/Bindings/WindowObject.cpp
+++ b/Userland/Libraries/LibWeb/Bindings/WindowObject.cpp
@@ -337,14 +337,14 @@ JS_DEFINE_NATIVE_FUNCTION(WindowObject::queue_microtask)
 JS_DEFINE_NATIVE_FUNCTION(WindowObject::atob)
 {
     if (!vm.argument_count())
         return vm.throw_completion<JS::TypeError>(global_object, JS::ErrorType::BadArgCountOne, "atob");
     auto string = TRY(vm.argument(0).to_string(global_object));
     auto decoded = decode_base64(StringView(string));
-    if (!decoded.has_value())
+    if (decoded.is_error())
         return vm.throw_completion<JS::TypeError>(global_object, JS::ErrorType::InvalidFormat, "Base64");
 
     // decode_base64() returns a byte string. LibJS uses UTF-8 for strings. Use Latin1Decoder to convert bytes 128-255 to UTF-8.
     auto decoder = TextCodec::decoder_for("windows-1252");
     VERIFY(decoder);
     return JS::js_string(vm, decoder->to_utf8(decoded.value()));
 }
diff --git a/Userland/Libraries/LibWeb/Loader/ResourceLoader.cpp b/Userland/Libraries/LibWeb/Loader/ResourceLoader.cpp
index cb41f1ea73..818a992bb8 100644
--- a/Userland/Libraries/LibWeb/Loader/ResourceLoader.cpp
+++ b/Userland/Libraries/LibWeb/Loader/ResourceLoader.cpp
@@ -117,135 +117,135 @@ static String sanitized_url_for_logging(AK::URL const& url)
 void ResourceLoader::load(LoadRequest& request, Function<void(ReadonlyBytes, const HashMap<String, String, CaseInsensitiveStringTraits>& response_headers, Optional<u32> status_code)> success_callback, Function<void(const String&, Optional<u32> status_code)> error_callback)
 {
     auto& url = request.url();
     request.start_timer();
     dbgln("ResourceLoader: Starting load of: \"{}\"", sanitized_url_for_logging(url));
 
     const auto log_success = [](const auto& request) {
         auto& url = request.url();
         auto load_time_ms = request.load_time().to_milliseconds();
         dbgln("ResourceLoader: Finished load of: \"{}\", Duration: {}ms", sanitized_url_for_logging(url), load_time_ms);
     };
 
     const auto log_failure = [](const auto& request, const auto error_message) {
         auto& url = request.url();
         auto load_time_ms = request.load_time().to_milliseconds();
         dbgln("ResourceLoader: Failed load of: \"{}\", \033[32;1mError: {}\033[0m, Duration: {}ms", sanitized_url_for_logging(url), error_message, load_time_ms);
     };
 
     if (is_port_blocked(url.port_or_default())) {
         log_failure(request, String::formatted("The port #{} is blocked", url.port_or_default()));
         return;
     }
 
     if (ContentFilter::the().is_filtered(url)) {
         auto filter_message = "URL was filtered"sv;
         log_failure(request, filter_message);
         error_callback(filter_message, {});
         return;
     }
 
     if (url.protocol() == "about") {
         dbgln_if(SPAM_DEBUG, "Loading about: URL {}", url);
         log_success(request);
         deferred_invoke([success_callback = move(success_callback)] {
             success_callback(String::empty().to_byte_buffer(), {}, {});
         });
         return;
     }
 
     if (url.protocol() == "data") {
         dbgln_if(SPAM_DEBUG, "ResourceLoader loading a data URL with mime-type: '{}', base64={}, payload='{}'",
             url.data_mime_type(),
             url.data_payload_is_base64(),
             url.data_payload());
 
         ByteBuffer data;
         if (url.data_payload_is_base64()) {
             auto data_maybe = decode_base64(url.data_payload());
-            if (!data_maybe.has_value()) {
-                auto error_message = "Base64 data contains an invalid character"sv;
+            if (data_maybe.is_error()) {
+                auto error_message = data_maybe.error().string_literal();
                 log_failure(request, error_message);
                 error_callback(error_message, {});
                 return;
             }
             data = data_maybe.value();
         } else {
             data = url.data_payload().to_byte_buffer();
         }
 
         log_success(request);
         deferred_invoke([data = move(data), success_callback = move(success_callback)] {
             success_callback(data, {}, {});
         });
         return;
     }
 
     if (url.protocol() == "file") {
         auto file_result = Core::File::open(url.path(), Core::OpenMode::ReadOnly);
         if (file_result.is_error()) {
             auto& error = file_result.error();
             log_failure(request, error);
             if (error_callback)
                 error_callback(String::formatted("{}", error), error.code());
             return;
         }
 
         auto file = file_result.release_value();
         auto data = file->read_all();
         log_success(request);
         deferred_invoke([data = move(data), success_callback = move(success_callback)] {
             success_callback(data, {}, {});
         });
         return;
     }
 
     if (url.protocol() == "http" || url.protocol() == "https" || url.protocol() == "gemini") {
         HashMap<String, String> headers;
         headers.set("User-Agent", m_user_agent);
         headers.set("Accept-Encoding", "gzip, deflate");
 
         for (auto& it : request.headers()) {
             headers.set(it.key, it.value);
         }
 
         auto protocol_request = protocol_client().start_request(request.method(), url, headers, request.body());
         if (!protocol_request) {
             auto start_request_failure_msg = "Failed to initiate load"sv;
             log_failure(request, start_request_failure_msg);
             if (error_callback)
                 error_callback(start_request_failure_msg, {});
             return;
         }
         m_active_requests.set(*protocol_request);
         protocol_request->on_buffered_request_finish = [this, success_callback = move(success_callback), error_callback = move(error_callback), log_success, log_failure, request, &protocol_request = *protocol_request](bool success, auto, auto& response_headers, auto status_code, ReadonlyBytes payload) {
             --m_pending_loads;
             if (on_load_counter_change)
                 on_load_counter_change();
             if (!success) {
                 auto http_load_failure_msg = "HTTP load failed"sv;
                 log_failure(request, http_load_failure_msg);
                 if (error_callback)
                     error_callback(http_load_failure_msg, {});
                 return;
             }
             log_success(request);
             success_callback(payload, response_headers, status_code);
             deferred_invoke([this, &protocol_request] {
                 m_active_requests.remove(protocol_request);
             });
         };
         protocol_request->set_should_buffer_all_input(true);
         protocol_request->on_certificate_requested = []() -> Protocol::Request::CertificateAndKey {
             return {};
         };
         ++m_pending_loads;
         if (on_load_counter_change)
             on_load_counter_change();
         return;
     }
 
     auto not_implemented_error = String::formatted("Protocol not implemented: {}", url.protocol());
     log_failure(request, not_implemented_error);
     if (error_callback)
         error_callback(not_implemented_error, {});
 }
diff --git a/Userland/Utilities/base64.cpp b/Userland/Utilities/base64.cpp
index 0febee2374..c612e39cea 100644
--- a/Userland/Utilities/base64.cpp
+++ b/Userland/Utilities/base64.cpp
@@ -18,44 +18,40 @@
 ErrorOr<int> serenity_main(Main::Arguments arguments)
 {
     TRY(Core::System::pledge("stdio rpath"));
 
     bool decode = false;
     const char* filepath = nullptr;
 
     Core::ArgsParser args_parser;
     args_parser.add_option(decode, "Decode data", "decode", 'd');
     args_parser.add_positional_argument(filepath, "", "file", Core::ArgsParser::Required::No);
     args_parser.parse(arguments);
 
     ByteBuffer buffer;
     if (filepath == nullptr || strcmp(filepath, "-") == 0) {
         auto file = Core::File::construct();
         bool success = file->open(
             STDIN_FILENO,
             Core::OpenMode::ReadOnly,
             Core::File::ShouldCloseFileDescriptor::Yes);
         VERIFY(success);
         buffer = file->read_all();
     } else {
         auto result = Core::File::open(filepath, Core::OpenMode::ReadOnly);
         VERIFY(!result.is_error());
         auto file = result.value();
         buffer = file->read_all();
     }
 
     TRY(Core::System::pledge("stdio"));
 
     if (decode) {
-        auto decoded = decode_base64(StringView(buffer));
-        if (!decoded.has_value()) {
-            warnln("base64: invalid input");
-            return 1;
-        }
-        fwrite(decoded.value().data(), sizeof(u8), decoded.value().size(), stdout);
+        auto decoded = TRY(decode_base64(StringView(buffer)));
+        fwrite(decoded.data(), sizeof(u8), decoded.size(), stdout);
         return 0;
     }
 
     auto encoded = encode_base64(buffer);
     outln("{}", encoded);
     return 0;
 }
diff --git a/Userland/Utilities/telws.cpp b/Userland/Utilities/telws.cpp
index 502b13fc8b..7d70d6f68b 100644
--- a/Userland/Utilities/telws.cpp
+++ b/Userland/Utilities/telws.cpp
@@ -18,140 +18,140 @@
 int main(int argc, char** argv)
 {
     if (pledge("stdio unix inet accept rpath wpath cpath fattr tty sigaction", nullptr) < 0) {
         perror("pledge");
         return 1;
     }
 
     Core::ArgsParser args_parser;
 
     String origin;
     String url_string;
 
     args_parser.add_positional_argument(url_string, "URL to connect to", "url", Core::ArgsParser::Required::Yes);
     args_parser.add_option(origin, "URL to use as origin", "origin", 'o', "origin");
 
     args_parser.parse(argc, argv);
 
     URL url(url_string);
 
     if (!url.is_valid()) {
         warnln("The given URL is not valid");
         return 1;
     }
 
     Core::EventLoop loop;
 
     auto maybe_websocket_client = Protocol::WebSocketClient::try_create();
     if (maybe_websocket_client.is_error()) {
         warnln("Failed to connect to the websocket server: {}\n", maybe_websocket_client.error());
     }
     auto websocket_client = maybe_websocket_client.release_value();
 
     RefPtr<Line::Editor> editor = Line::Editor::construct();
     bool should_quit = false;
     auto socket = websocket_client->connect(url, origin);
     if (!socket) {
         warnln("Failed to start socket for '{}'\n", url);
         return 1;
     }
     socket->on_open = [&]() {
         outln("[WebSocket opened]"sv);
     };
     socket->on_error = [&](auto error) {
         outln("[WebSocket Error : {}]", (unsigned)error);
     };
     socket->on_message = [&](auto message) {
         if (!message.is_text) {
             outln("[Received binary data : {} bytes]", message.data.size());
             return;
         }
         outln("[Received utf8 text] {}", String(ReadonlyBytes(message.data)));
     };
     socket->on_close = [&](auto code, auto message, bool was_clean) {
         outln("[Server {} closed connection : '{}' (code {})]",
             was_clean ? "cleanly" : "dirtily",
             message,
             code);
         should_quit = true;
         Core::EventLoop::current().quit(0);
     };
 
     if (pledge("stdio unix inet accept rpath wpath tty sigaction", nullptr) < 0) {
         perror("pledge");
         return 1;
     }
 
     if (unveil(nullptr, nullptr) < 0) {
         perror("unveil");
         return 1;
     }
 
     outln("Started server. Commands :");
     outln("- '<text>' send the text as message");
     outln("- '.text <data>' send the text as message");
     outln("- '.base64 <data>' send the binary data from a base64-encoded string as message");
     outln("- '.exit' Ask to exit the server");
     outln("- '.forceexit' Exit the server");
     while (!should_quit) {
         auto line_or_error = editor->get_line(">");
         if (line_or_error.is_error()) {
             continue;
         }
         auto line = line_or_error.value();
         if (line.is_empty())
             continue;
 
         if (line.starts_with(".")) {
             if (line.starts_with(".text ")) {
                 editor->add_to_history(line);
                 if (socket->ready_state() != Protocol::WebSocket::ReadyState::Open) {
                     outln("Could not send message : socket is not open.");
                     continue;
                 }
                 socket->send(line.substring(6));
                 continue;
             }
             if (line.starts_with(".base64 ")) {
                 editor->add_to_history(line);
                 if (socket->ready_state() != Protocol::WebSocket::ReadyState::Open) {
                     outln("Could not send message : socket is not open.");
                     continue;
                 }
                 auto base64_data = line.substring(8);
                 auto buffer = decode_base64(base64_data);
-                if (buffer.has_value()) {
-                    socket->send(buffer.value(), false);
+                if (buffer.is_error()) {
+                    outln("Could not send message : {}", buffer.error().string_literal());
                 } else {
-                    outln("Could not send message : Base64 string contains an invalid character.");
+                    socket->send(buffer.value(), false);
                 }
                 continue;
             }
             if (line == ".exit") {
                 editor->add_to_history(line);
                 if (socket->ready_state() != Protocol::WebSocket::ReadyState::Open) {
                     outln("Socket is not open. Exiting.");
                     should_quit = true;
                     continue;
                 }
                 socket->close();
                 continue;
             }
             if (line == ".forceexit") {
                 editor->add_to_history(line);
                 if (socket->ready_state() == Protocol::WebSocket::ReadyState::Open)
                     socket->close();
                 return 1;
             }
             outln("Unknown command : {}", line);
             continue;
         }
         editor->add_to_history(line);
         if (socket->ready_state() != Protocol::WebSocket::ReadyState::Open) {
             outln("Could not send message : socket is not open.");
             continue;
         }
         socket->send(line);
     }
 
     return 0;
 }
