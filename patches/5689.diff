commit 7e43b65c51cdad7c46a83eea9a3103d2dbac303c
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Sun Jan 28 09:42:42 2018 -0500

    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=5522

diff --git a/Magick++/lib/Image.cpp b/Magick++/lib/Image.cpp
index 362993168..9e4f7196a 100644
--- a/Magick++/lib/Image.cpp
+++ b/Magick++/lib/Image.cpp
@@ -4867,52 +4867,58 @@ void Magick::Image::whiteThresholdChannel(const ChannelType channel_,
 void Magick::Image::write(Blob *blob_)
 {
   size_t
     length=0;
 
   void
     *data;
 
   modifyImage();
   GetPPException;
   data=ImagesToBlob(constImageInfo(),image(),&length,exceptionInfo);
   if (length > 0)
     blob_->updateNoCopy(data,length,Blob::MallocAllocator);
+  if (data != NULL)
+    data=RelinquishMagickMemory(data);
   ThrowImageException;
 }
 
 void Magick::Image::write(Blob *blob_,const std::string &magick_)
 {
   size_t
     length=0;
 
   void
     *data;
 
   modifyImage();
   magick(magick_);
   GetPPException;
   data=ImagesToBlob(constImageInfo(),image(),&length,exceptionInfo);
   if (length > 0)
     blob_->updateNoCopy(data,length,Blob::MallocAllocator);
+  if (data != NULL)
+    data=RelinquishMagickMemory(data);
   ThrowImageException;
 }
 
 void Magick::Image::write(Blob *blob_,const std::string &magick_,
   const size_t depth_)
 {
   size_t
     length=0;
 
   void
     *data;
 
   modifyImage();
   magick(magick_);
   depth(depth_);
   GetPPException;
   data=ImagesToBlob(constImageInfo(),image(),&length,exceptionInfo);
   if (length > 0)
     blob_->updateNoCopy(data,length,Blob::MallocAllocator);
+  if (data != NULL)
+    data=RelinquishMagickMemory(data);
   ThrowImageException;
 }
 
diff --git a/MagickCore/blob.c b/MagickCore/blob.c
index 226f03e91..85c91858d 100644
--- a/MagickCore/blob.c
+++ b/MagickCore/blob.c
@@ -1811,171 +1811,172 @@ MagickExport StreamHandler GetBlobStreamHandler(const Image *image)
 {
   assert(image != (const Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",image->filename);
   return(image->blob->stream);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   I m a g e T o B l o b                                                     %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ImageToBlob() implements direct to memory image formats.  It returns the
 %  image as a formatted blob and its length.  The magick member of the Image
 %  structure determines the format of the returned blob (GIF, JPEG, PNG,
 %  etc.).  This method is the equivalent of WriteImage(), but writes the
 %  formatted "file" to a memory buffer rather than to an actual file.
 %
 %  The format of the ImageToBlob method is:
 %
 %      void *ImageToBlob(const ImageInfo *image_info,Image *image,
 %        size_t *length,ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image_info: the image info.
 %
 %    o image: the image.
 %
 %    o length: return the actual length of the blob.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
 MagickExport void *ImageToBlob(const ImageInfo *image_info,
   Image *image,size_t *length,ExceptionInfo *exception)
 {
   const MagickInfo
     *magick_info;
 
   ImageInfo
     *blob_info;
 
   MagickBooleanType
     status;
 
   void
     *blob;
 
   assert(image_info != (const ImageInfo *) NULL);
   assert(image_info->signature == MagickCoreSignature);
   if (image_info->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",
       image_info->filename);
   assert(image != (Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   assert(exception != (ExceptionInfo *) NULL);
   *length=0;
   blob=(unsigned char *) NULL;
   blob_info=CloneImageInfo(image_info);
   blob_info->adjoin=MagickFalse;
   (void) SetImageInfo(blob_info,1,exception);
   if (*blob_info->magick != '\0')
     (void) CopyMagickString(image->magick,blob_info->magick,MagickPathExtent);
   magick_info=GetMagickInfo(image->magick,exception);
   if (magick_info == (const MagickInfo *) NULL)
     {
       (void) ThrowMagickException(exception,GetMagickModule(),
         MissingDelegateError,"NoDecodeDelegateForThisImageFormat","`%s'",
         image->magick);
       blob_info=DestroyImageInfo(blob_info);
       return(blob);
     }
   (void) CopyMagickString(blob_info->magick,image->magick,MagickPathExtent);
   if (GetMagickBlobSupport(magick_info) != MagickFalse)
     {
       /*
         Native blob support for this image format.
       */
       blob_info->length=0;
       blob_info->blob=AcquireQuantumMemory(MagickMaxBlobExtent,
         sizeof(unsigned char));
       if (blob_info->blob == NULL)
         (void) ThrowMagickException(exception,GetMagickModule(),
           ResourceLimitError,"MemoryAllocationFailed","`%s'",image->filename);
       else
         {
           (void) CloseBlob(image);
           image->blob->exempt=MagickTrue;
           *image->filename='\0';
           status=WriteImage(blob_info,image,exception);
           *length=image->blob->length;
           blob=DetachBlob(image->blob);
           if (status == MagickFalse)
             blob=RelinquishMagickMemory(blob);
           else
             blob=ResizeQuantumMemory(blob,*length+1,sizeof(unsigned char));
         }
+      blob_info->blob=RelinquishMagickMemory(blob_info->blob);
     }
   else
     {
       char
         unique[MagickPathExtent];
 
       int
         file;
 
       /*
         Write file to disk in blob image format.
       */
       file=AcquireUniqueFileResource(unique);
       if (file == -1)
         {
           ThrowFileException(exception,BlobError,"UnableToWriteBlob",
             image_info->filename);
         }
       else
         {
           blob_info->file=fdopen(file,"wb");
           if (blob_info->file != (FILE *) NULL)
             {
               (void) FormatLocaleString(image->filename,MagickPathExtent,
                 "%s:%s",image->magick,unique);
               status=WriteImage(blob_info,image,exception);
               (void) CloseBlob(image);
               (void) fclose(blob_info->file);
               if (status != MagickFalse)
                 blob=FileToBlob(unique,~0UL,length,exception);
             }
           (void) RelinquishUniqueFileResource(unique);
         }
     }
   blob_info=DestroyImageInfo(blob_info);
   return(blob);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 +  I m a g e T o C u s t o m S t r e a m                                      %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ImageToCustomStream() is the equivalent of WriteImage(), but writes the
 %  formatted "file" to the custom stream rather than to an actual file.
 %
 %  The format of the ImageToCustomStream method is:
 %
 %      void ImageToCustomStream(const ImageInfo *image_info,Image *image,
 %        ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image_info: the image info.
 %
 %    o image: the image.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
