commit b60638452a5c74d94f3d08910e4e1037be28b1f7
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Sun May 14 02:26:41 2017 +0000

    Internal libtiff: resync with CVS. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1563. Credit to OSS-Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@38299 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/autotest/gcore/data/packbits-not-enough-data.tif b/autotest/gcore/data/packbits-not-enough-data.tif
new file mode 100644
index 0000000000..3b02ae3c6e
Binary files /dev/null and b/autotest/gcore/data/packbits-not-enough-data.tif differ
diff --git a/autotest/gcore/tiff_read.py b/autotest/gcore/tiff_read.py
index f4499cf51a..8045e8828a 100755
--- a/autotest/gcore/tiff_read.py
+++ b/autotest/gcore/tiff_read.py
@@ -3095,16 +3095,30 @@ def tiff_read_uint33():
 ###############################################################################
 # Test fix for https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1545
 def tiff_read_corrupted_deflate_singlestrip():
 
     if not check_libtiff_internal_or_greater(4,0,8):
         return 'skip'
 
     with gdaltest.error_handler():
         ds = gdal.Open('data/corrupted_deflate_singlestrip.tif')
         ds.GetRasterBand(1).Checksum()
 
     return 'success'
 
+###############################################################################
+# Test fix for https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1563
+
+def tiff_read_packbits_not_enough_data():
+
+    if not check_libtiff_internal_or_greater(4,0,8):
+        return 'skip'
+
+    with gdaltest.error_handler():
+        ds = gdal.Open('data/packbits-not-enough-data.tif')
+        ds.GetRasterBand(1).Checksum()
+
+    return 'success'
+
 ###############################################################################
 
 for item in init_list:
@@ -3211,6 +3225,7 @@ gdaltest_list.append( (tiff_read_huge_number_strips) )
 gdaltest_list.append( (tiff_read_many_blocks) )
 gdaltest_list.append( (tiff_read_uint33) )
 gdaltest_list.append( (tiff_read_corrupted_deflate_singlestrip) )
+gdaltest_list.append( (tiff_read_packbits_not_enough_data) )
 
 gdaltest_list.append( (tiff_read_online_1) )
 gdaltest_list.append( (tiff_read_online_2) )
diff --git a/gdal/frmts/gtiff/libtiff/tif_packbits.c b/gdal/frmts/gtiff/libtiff/tif_packbits.c
index 0495e688a6..18904b0137 100644
--- a/gdal/frmts/gtiff/libtiff/tif_packbits.c
+++ b/gdal/frmts/gtiff/libtiff/tif_packbits.c
@@ -1,34 +1,34 @@
-/* $Id: tif_packbits.c,v 1.25 2017-01-11 20:33:35 erouault Exp $ */
+/* $Id: tif_packbits.c,v 1.26 2017-05-14 02:26:07 erouault Exp $ */
 
 /*
  * Copyright (c) 1988-1997 Sam Leffler
  * Copyright (c) 1991-1997 Silicon Graphics, Inc.
  *
  * Permission to use, copy, modify, distribute, and sell this software and 
  * its documentation for any purpose is hereby granted without fee, provided
  * that (i) the above copyright notices and this permission notice appear in
  * all copies of the software and related documentation, and (ii) the names of
  * Sam Leffler and Silicon Graphics may not be used in any advertising or
  * publicity relating to the software without the specific, prior written
  * permission of Sam Leffler and Silicon Graphics.
  * 
  * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
  * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
  * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
  * 
  * IN NO EVENT SHALL SAM LEFFLER OR SILICON GRAPHICS BE LIABLE FOR
  * ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND,
  * OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
  * WHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF 
  * LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 
  * OF THIS SOFTWARE.
  */
 
 #include "tiffiop.h"
 #ifdef PACKBITS_SUPPORT
 /*
  * TIFF Library.
  *
  * PackBits Compression Algorithm Support
  */
 #include <stdio.h>
@@ -216,65 +216,71 @@ static int
 PackBitsDecode(TIFF* tif, uint8* op, tmsize_t occ, uint16 s)
 {
 	static const char module[] = "PackBitsDecode";
 	char *bp;
 	tmsize_t cc;
 	long n;
 	int b;
 
 	(void) s;
 	bp = (char*) tif->tif_rawcp;
 	cc = tif->tif_rawcc;
 	while (cc > 0 && occ > 0) {
 		n = (long) *bp++;
 		cc--;
 		/*
 		 * Watch out for compilers that
 		 * don't sign extend chars...
 		 */
 		if (n >= 128)
 			n -= 256;
 		if (n < 0) {		/* replicate next byte -n+1 times */
 			if (n == -128)	/* nop */
 				continue;
 			n = -n + 1;
 			if( occ < (tmsize_t)n )
 			{
 				TIFFWarningExt(tif->tif_clientdata, module,
 				    "Discarding %lu bytes to avoid buffer overrun",
 				    (unsigned long) ((tmsize_t)n - occ));
 				n = (long)occ;
 			}
+			if( cc == 0 )
+			{
+				TIFFWarningExt(tif->tif_clientdata, module,
+					       "Terminating PackBitsDecode due to lack of data.");
+				break;
+			}
 			occ -= n;
 			b = *bp++;
 			cc--;
 			while (n-- > 0)
 				*op++ = (uint8) b;
 		} else {		/* copy next n+1 bytes literally */
 			if (occ < (tmsize_t)(n + 1))
 			{
 				TIFFWarningExt(tif->tif_clientdata, module,
 				    "Discarding %lu bytes to avoid buffer overrun",
 				    (unsigned long) ((tmsize_t)n - occ + 1));
 				n = (long)occ - 1;
 			}
 			if (cc < (tmsize_t) (n+1)) 
 			{
 				TIFFWarningExt(tif->tif_clientdata, module,
 					       "Terminating PackBitsDecode due to lack of data.");
 				break;
 			}
 			_TIFFmemcpy(op, bp, ++n);
 			op += n; occ -= n;
 			bp += n; cc -= n;
 		}
 	}
 	tif->tif_rawcp = (uint8*) bp;
 	tif->tif_rawcc = cc;
 	if (occ > 0) {
 		TIFFErrorExt(tif->tif_clientdata, module,
 		    "Not enough data for scanline %lu",
 		    (unsigned long) tif->tif_row);
 		return (0);
 	}
 	return (1);
 }
