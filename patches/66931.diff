commit 5a83f50fe9a6cd513029e37cc723ae53c01807c3
Author: Aurelien David <aurelien.david@telecom-paristech.fr>
Date:   Fri Feb 23 16:55:07 2024 +0100

    inspect: check size against nalu_size_length
    
    ossfuzz 66931

diff --git a/src/filters/inspect.c b/src/filters/inspect.c
index 8304d6da8..e5594a078 100644
--- a/src/filters/inspect.c
+++ b/src/filters/inspect.c
@@ -3194,184 +3194,188 @@ static void inspect_dump_packet(GF_InspectCtx *ctx, FILE *dump, GF_FilterPacket
 props_done:
 	if (!ctx->analyze || !size) {
 		if (ctx->xml) {
 			inspect_printf(dump, "/>\n");
 		}
 		return;
 	}
 	inspect_printf(dump, ">\n");
 
 #ifndef GPAC_DISABLE_AV_PARSERS
 	if (pctx->hevc_state || pctx->avc_state || pctx->vvc_state) {
 		idx=1;
 
 		if (pctx->is_adobe_protected) {
 			u8 encrypted_au = data[0];
 			if (encrypted_au) {
 				inspect_printf(dump, "   <!-- Packet is an Adobe's protected frame and can not be dumped -->\n");
 				inspect_printf(dump, "</Packet>\n");
 				return;
 			}
 			else {
 				data++;
 				size--;
 			}
 		}
 		while (size) {
+			if (size < pctx->nalu_size_length) {
+				inspect_printf(dump, "   <!-- NALU is corrupted: nalu_size_length is %u but only %d remains -->\n", pctx->nalu_size_length, size);
+				break;
+			}
 			u32 nal_size = inspect_get_nal_size((char*)data, pctx->nalu_size_length);
 			data += pctx->nalu_size_length;
 
 			if (nal_size >= GF_UINT_MAX - pctx->nalu_size_length || pctx->nalu_size_length + nal_size > size) {
 				inspect_printf(dump, "   <!-- NALU is corrupted: size is %u but only %d remains -->\n", nal_size, size);
 				break;
 			} else {
 				inspect_printf(dump, "   <NALU size=\"%d\" ", nal_size);
 				gf_inspect_dump_nalu_internal(dump, data, nal_size, pctx->has_svcc ? 1 : 0, pctx->hevc_state, pctx->avc_state, pctx->vvc_state, pctx->nalu_size_length, ctx->crc, pctx->is_cenc_protected, ctx->analyze, pctx);
 			}
 			idx++;
 			data += nal_size;
 			size -= nal_size + pctx->nalu_size_length;
 		}
 	} else if (pctx->av1_state) {
 		gf_bs_reassign_buffer(pctx->bs, data, size);
 		while (size) {
 			ObuType obu_type = 0;
 			u64 obu_size = 0;
 			u32 hdr_size = 0;
 
 			obu_size = gf_inspect_dump_obu_internal(dump, pctx->av1_state, (char *) data, size, obu_type, obu_size, hdr_size, ctx->crc, pctx, ctx->analyze);
 
 			if (obu_size > size) {
 				inspect_printf(dump, "   <!-- OBU is corrupted: size is %d but only %d remains -->\n", (u32) obu_size, size);
 				break;
 			}
 			data += obu_size;
 			size -= (u32)obu_size;
 			idx++;
 		}
 	} else {
 		u32 hdr, pos, fsize, i;
 		u32 dflag=0;
 		switch (pctx->codec_id) {
 		case GF_CODECID_MPEG1:
 		case GF_CODECID_MPEG2_422:
 		case GF_CODECID_MPEG2_SNR:
 		case GF_CODECID_MPEG2_HIGH:
 		case GF_CODECID_MPEG2_MAIN:
 		case GF_CODECID_MPEG2_SIMPLE:
 		case GF_CODECID_MPEG2_SPATIAL:
 		case GF_CODECID_MPEG4_PART2:
 			inspect_dump_mpeg124(pctx, (char *) data, size, dump);
 			break;
 		case GF_CODECID_MPEG_AUDIO:
 		case GF_CODECID_MPEG2_PART3:
 		case GF_CODECID_MPEG_AUDIO_L1:
 			pos = 0;
 			while (size) {
 				hdr = gf_mp3_get_next_header_mem(data, size, &pos);
 				if (!hdr) {
 					inspect_printf(dump, "<!-- Invalid MPEGAudioFrame -->\n");
 					break;
 				}
 				fsize = gf_mp3_frame_size(hdr);
 				inspect_printf(dump, "<MPEGAudioFrame size=\"%d\" layer=\"%d\" version=\"%d\" bitrate=\"%d\" channels=\"%d\" samplesPerFrame=\"%d\" samplerate=\"%d\"/>\n", fsize, gf_mp3_layer(hdr), gf_mp3_version(hdr), gf_mp3_bit_rate(hdr), gf_mp3_num_channels(hdr), gf_mp3_window_size(hdr), gf_mp3_sampling_rate(hdr));
 				if (size<pos+fsize) break;
 				data += pos + fsize;
 				size -= pos + fsize;
 			}
 			break;
 		case GF_CODECID_TMCD:
 			inspect_dump_tmcd(ctx, pctx, (char *) data, size, dump);
 			break;
 		case GF_CODECID_SUBS_TEXT:
 		case GF_CODECID_META_TEXT:
 			dflag=1;
 		case GF_CODECID_SUBS_XML:
 		case GF_CODECID_META_XML:
 			if (dflag)
 				inspect_printf(dump, "<![CDATA[");
 			for (i=0; i<size; i++) {
 				gf_fputc(data[i], dump);
 			}
 			if (dflag)
 				inspect_printf(dump, "]]>\n");
 			break;
 		case GF_CODECID_APCH:
 		case GF_CODECID_APCO:
 		case GF_CODECID_APCN:
 		case GF_CODECID_APCS:
 		case GF_CODECID_AP4X:
 		case GF_CODECID_AP4H:
 			gf_inspect_dump_prores_internal(dump, (char *) data, size, ctx->crc, pctx);
 			break;
 
 		case GF_CODECID_MPHA:
 			gf_bs_reassign_buffer(pctx->bs, data, size);
 			gf_inspect_dump_mha_frame(dump, pctx->bs, "");
 			break;
 
 		case GF_CODECID_MHAS:
 			gf_inspect_dump_mhas(dump, (char *) data, size, ctx->crc, pctx);
 			break;
 		case GF_CODECID_VP8:
 			dflag=1;
 		case GF_CODECID_VP9:
 			inspect_dump_vpx(ctx, dump, (char *) data, size, ctx->crc, pctx, dflag ? 8 : 9);
 			break;
 		case GF_CODECID_AC3:
 			dflag=1;
 		case GF_CODECID_EAC3:
 			inspect_dump_ac3_eac3(ctx, dump, (char *) data, size, ctx->crc, pctx, dflag ? 0 : 1);
 			break;
 		case GF_CODECID_TRUEHD:
 			gf_bs_reassign_buffer(pctx->bs, data, size);
 			gf_inspect_dump_truehd_frame(dump, pctx->bs);
 			break;
 		case GF_CODECID_OPUS:
 			gf_inspect_dump_opus_internal(dump, data, size, 0, ctx->crc, pctx);
 			break;
 		case GF_CODECID_ALAC:
 		{
 			gf_bs_reassign_buffer(pctx->bs, data, size);
 			u32 val, partial;
 
 #define get_and_print(name, bits) \
 			val = gf_bs_read_int(pctx->bs, bits); \
 			inspect_printf(dump, " "name"=\"%u\"", val);
 
 			inspect_printf(dump, " <ALACSegment");
 
 			get_and_print("type", 3);
 			get_and_print("reserved", 12);
 			get_and_print("partial", 1);
 			partial=val;
 			get_and_print("shift_off", 2);
 			get_and_print("escape", 1);
 			if (partial) {
 				get_and_print("frameLength", 32);
 			}
 			inspect_printf(dump, "/>\n");
 
 #undef get_and_print
 
 		}
 			break;
 
 		}
 	}
 #endif
 	inspect_printf(dump, "</Packet>\n");
 }
 
 #define DUMP_ARRAY(arr, name, loc, _is_svc)\
 	if (arr && gf_list_count(arr)) {\
 		inspect_printf(dump, "  <%sArray location=\"%s\">\n", name, loc);\
 		for (i=0; i<gf_list_count(arr); i++) {\
 			slc = gf_list_get(arr, i);\
 			inspect_printf(dump, "   <NALU size=\"%d\" ", slc->size);\
 			gf_inspect_dump_nalu_internal(dump, slc->data, slc->size, _is_svc, pctx->hevc_state, pctx->avc_state, pctx->vvc_state, nalh_size, ctx->crc, GF_FALSE, ctx->analyze, pctx);\
 		}\
 		inspect_printf(dump, "  </%sArray>\n", name);\
 	}\
 
 
 #ifndef GPAC_DISABLE_AV_PARSERS
