commit 38adbc6eebd7f2f34ecf1b0b18019e88bad9d9f4
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Tue Jan 24 22:48:46 2023 +0100

    avcodec/g2meet: Replace fake allocation avoidance for framebuf
    
    framebuf is only allocated when the new width/height are larger than the old
    but nothing sets the old so its always allocated.
    Use av_fast_mallocz() instead.
    
    Fixes: Timeout
    Fixes: 55094/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_G2M_fuzzer-5116909932904448
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavcodec/g2meet.c b/libavcodec/g2meet.c
index 32b966e8ef..05b5a5124f 100644
--- a/libavcodec/g2meet.c
+++ b/libavcodec/g2meet.c
@@ -133,29 +133,30 @@ typedef struct JPGContext {
 typedef struct G2MContext {
     ePICContext ec;
     JPGContext jc;
 
     int        version;
 
     int        compression;
     int        width, height, bpp;
     int        orig_width, orig_height;
     int        tile_width, tile_height;
     int        tiles_x, tiles_y, tile_x, tile_y;
 
     int        got_header;
 
     uint8_t    *framebuf;
-    int        framebuf_stride, old_width, old_height;
+    int        framebuf_stride;
+    unsigned int framebuf_allocated;
 
     uint8_t    *synth_tile, *jpeg_tile, *epic_buf, *epic_buf_base;
     int        tile_stride, epic_buf_stride, old_tile_w, old_tile_h;
     int        swapuv;
 
     uint8_t    *kempf_buf, *kempf_flags;
 
     uint8_t    *cursor;
     int        cursor_stride;
     int        cursor_fmt;
     int        cursor_w, cursor_h, cursor_x, cursor_y;
     int        cursor_hot_x, cursor_hot_y;
 } G2MContext;
@@ -1159,43 +1160,42 @@ static int kempf_decode_tile(G2MContext *c, int tile_x, int tile_y,
 static int g2m_init_buffers(G2MContext *c)
 {
     int aligned_height;
 
-    if (!c->framebuf || c->old_width < c->width || c->old_height < c->height) {
-        c->framebuf_stride = FFALIGN(c->width + 15, 16) * 3;
-        aligned_height     = c->height + 15;
-        av_free(c->framebuf);
-        c->framebuf = av_calloc(c->framebuf_stride, aligned_height);
-        if (!c->framebuf)
-            return AVERROR(ENOMEM);
-    }
+    c->framebuf_stride = FFALIGN(c->width + 15, 16) * 3;
+    aligned_height = c->height + 15;
+
+    av_fast_mallocz(&c->framebuf, &c->framebuf_allocated, c->framebuf_stride * aligned_height);
+    if (!c->framebuf)
+        return AVERROR(ENOMEM);
+
     if (!c->synth_tile || !c->jpeg_tile ||
         (c->compression == 2 && !c->epic_buf_base) ||
         c->old_tile_w < c->tile_width ||
         c->old_tile_h < c->tile_height) {
         c->tile_stride     = FFALIGN(c->tile_width, 16) * 3;
         c->epic_buf_stride = FFALIGN(c->tile_width * 4, 16);
         aligned_height     = FFALIGN(c->tile_height,    16);
         av_freep(&c->synth_tile);
         av_freep(&c->jpeg_tile);
         av_freep(&c->kempf_buf);
         av_freep(&c->kempf_flags);
         av_freep(&c->epic_buf_base);
         c->epic_buf    = NULL;
         c->synth_tile  = av_mallocz(c->tile_stride      * aligned_height);
         c->jpeg_tile   = av_mallocz(c->tile_stride      * aligned_height);
         c->kempf_buf   = av_mallocz((c->tile_width + 1) * aligned_height +
                                     AV_INPUT_BUFFER_PADDING_SIZE);
         c->kempf_flags = av_mallocz(c->tile_width       * aligned_height);
         if (!c->synth_tile || !c->jpeg_tile ||
             !c->kempf_buf || !c->kempf_flags)
             return AVERROR(ENOMEM);
         if (c->compression == 2) {
             c->epic_buf_base = av_mallocz(c->epic_buf_stride * aligned_height + 4);
             if (!c->epic_buf_base)
                 return AVERROR(ENOMEM);
             c->epic_buf = c->epic_buf_base + 4;
         }
     }
 
     return 0;
 }
@@ -1606,17 +1606,18 @@ static av_cold int g2m_decode_init(AVCodecContext *avctx)
 static av_cold int g2m_decode_end(AVCodecContext *avctx)
 {
     G2MContext *const c = avctx->priv_data;
 
     jpg_free_context(&c->jc);
 
     av_freep(&c->epic_buf_base);
     c->epic_buf = NULL;
     av_freep(&c->kempf_buf);
     av_freep(&c->kempf_flags);
     av_freep(&c->synth_tile);
     av_freep(&c->jpeg_tile);
     av_freep(&c->cursor);
     av_freep(&c->framebuf);
+    c->framebuf_allocated = 0;
 
     return 0;
 }
