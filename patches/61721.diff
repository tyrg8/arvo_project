commit 3107b453bcceb0e2d2590fef3612859f2f802d72
Author: Guido van Rossum <guido@python.org>
Date:   Wed Aug 23 15:36:19 2023 -0700

    gh-108253: Fix reads of uninitialized memory in funcobject.c (#108383)

diff --git a/Objects/funcobject.c b/Objects/funcobject.c
index 2820e47bdf..648b660859 100644
--- a/Objects/funcobject.c
+++ b/Objects/funcobject.c
@@ -107,32 +107,32 @@ PyFunctionObject *
 _PyFunction_FromConstructor(PyFrameConstructor *constr)
 {
     PyObject *module = Py_XNewRef(PyDict_GetItemWithError(constr->fc_globals, &_Py_ID(__name__)));
     if (!module && PyErr_Occurred()) {
         return NULL;
     }
 
     PyFunctionObject *op = PyObject_GC_New(PyFunctionObject, &PyFunction_Type);
     if (op == NULL) {
         Py_XDECREF(module);
         return NULL;
     }
     op->func_globals = Py_NewRef(constr->fc_globals);
     op->func_builtins = Py_NewRef(constr->fc_builtins);
     op->func_name = Py_NewRef(constr->fc_name);
     op->func_qualname = Py_NewRef(constr->fc_qualname);
     op->func_code = Py_NewRef(constr->fc_code);
     op->func_defaults = Py_XNewRef(constr->fc_defaults);
     op->func_kwdefaults = Py_XNewRef(constr->fc_kwdefaults);
     op->func_closure = Py_XNewRef(constr->fc_closure);
     op->func_doc = Py_NewRef(Py_None);
     op->func_dict = NULL;
     op->func_weakreflist = NULL;
     op->func_module = module;
     op->func_annotations = NULL;
     op->func_typeparams = NULL;
     op->vectorcall = _PyFunction_Vectorcall;
-    _PyFunction_SetVersion(op, 0);
+    op->func_version = 0;
     _PyObject_GC_TRACK(op);
     handle_func_event(PyFunction_EVENT_CREATE, op, NULL);
     return op;
 }
@@ -141,86 +141,86 @@ PyObject *
 PyFunction_NewWithQualName(PyObject *code, PyObject *globals, PyObject *qualname)
 {
     assert(globals != NULL);
     assert(PyDict_Check(globals));
     Py_INCREF(globals);
 
     PyThreadState *tstate = _PyThreadState_GET();
 
     PyCodeObject *code_obj = (PyCodeObject *)Py_NewRef(code);
 
     assert(code_obj->co_name != NULL);
     PyObject *name = Py_NewRef(code_obj->co_name);
 
     if (!qualname) {
         qualname = code_obj->co_qualname;
     }
     assert(qualname != NULL);
     Py_INCREF(qualname);
 
     PyObject *consts = code_obj->co_consts;
     assert(PyTuple_Check(consts));
     PyObject *doc;
     if (PyTuple_Size(consts) >= 1) {
         doc = PyTuple_GetItem(consts, 0);
         if (!PyUnicode_Check(doc)) {
             doc = Py_None;
         }
     }
     else {
         doc = Py_None;
     }
     Py_INCREF(doc);
 
     // __module__: Use globals['__name__'] if it exists, or NULL.
     PyObject *module = PyDict_GetItemWithError(globals, &_Py_ID(__name__));
     PyObject *builtins = NULL;
     if (module == NULL && _PyErr_Occurred(tstate)) {
         goto error;
     }
     Py_XINCREF(module);
 
     builtins = _PyEval_BuiltinsFromGlobals(tstate, globals); // borrowed ref
     if (builtins == NULL) {
         goto error;
     }
     Py_INCREF(builtins);
 
     PyFunctionObject *op = PyObject_GC_New(PyFunctionObject, &PyFunction_Type);
     if (op == NULL) {
         goto error;
     }
     /* Note: No failures from this point on, since func_dealloc() does not
        expect a partially-created object. */
 
     op->func_globals = globals;
     op->func_builtins = builtins;
     op->func_name = name;
     op->func_qualname = qualname;
     op->func_code = (PyObject*)code_obj;
     op->func_defaults = NULL;    // No default positional arguments
     op->func_kwdefaults = NULL;  // No default keyword arguments
     op->func_closure = NULL;
     op->func_doc = doc;
     op->func_dict = NULL;
     op->func_weakreflist = NULL;
     op->func_module = module;
     op->func_annotations = NULL;
     op->func_typeparams = NULL;
     op->vectorcall = _PyFunction_Vectorcall;
-    _PyFunction_SetVersion(op, 0);
+    op->func_version = 0;
     _PyObject_GC_TRACK(op);
     handle_func_event(PyFunction_EVENT_CREATE, op, NULL);
     return (PyObject *)op;
 
 error:
     Py_DECREF(globals);
     Py_DECREF(code_obj);
     Py_DECREF(name);
     Py_DECREF(qualname);
     Py_DECREF(doc);
     Py_XDECREF(module);
     Py_XDECREF(builtins);
     return NULL;
 }
 
 /*
