commit 30ebadfe82ce2d0133d98820522020d5f0ba441a
Merge: 5c308f0cd2 d0891c58f9
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Fri Oct 15 09:39:43 2021 -0700

    Merge branch 'V5-9-patches'
    
    * V5-9-patches:
      snmpd: Fix memory allocation

diff --git a/agent/snmp_agent.c b/agent/snmp_agent.c
index 6e4fc90b9f..858d0738b8 100644
--- a/agent/snmp_agent.c
+++ b/agent/snmp_agent.c
@@ -3726,187 +3726,189 @@ int
 handle_pdu(netsnmp_agent_session *asp)
 {
     int             status, inclusives = 0;
     netsnmp_variable_list *v = NULL;
 
     /*
      * for illegal requests, mark all nodes as ASN_NULL 
      */
     switch (asp->pdu->command) {
 
 #ifndef NETSNMP_NO_WRITE_SUPPORT
     case SNMP_MSG_INTERNAL_SET_RESERVE2:
     case SNMP_MSG_INTERNAL_SET_ACTION:
     case SNMP_MSG_INTERNAL_SET_COMMIT:
     case SNMP_MSG_INTERNAL_SET_FREE:
     case SNMP_MSG_INTERNAL_SET_UNDO:
         status = get_set_cache(asp);
         if (status != SNMP_ERR_NOERROR)
             return status;
         break;
 #endif /* NETSNMP_NO_WRITE_SUPPORT */
 
     case SNMP_MSG_GET:
     case SNMP_MSG_GETNEXT:
     case SNMP_MSG_GETBULK:
         for (v = asp->pdu->variables; v != NULL; v = v->next_variable) {
             if (v->type == ASN_PRIV_INCL_RANGE) {
                 /*
                  * Leave the type for now (it gets set to
                  * ASN_NULL in netsnmp_add_varbind_to_cache,
                  * called by netsnmp_create_subtree_cache below).
                  * If we set it to ASN_NULL now, we wouldn't be
                  * able to distinguish INCLUSIVE search
                  * ranges.  
                  */
                 inclusives++;
             } else {
                 snmp_set_var_typed_value(v, ASN_NULL, NULL, 0);
             }
         }
         /* FALL THROUGH */
 
     default:
 #ifndef NETSNMP_NO_WRITE_SUPPORT
     case SNMP_MSG_INTERNAL_SET_BEGIN:
     case SNMP_MSG_INTERNAL_SET_RESERVE1:
 #endif /* NETSNMP_NO_WRITE_SUPPORT */
         asp->vbcount = count_varbinds(asp->pdu->variables);
-        asp->requests = calloc(asp->vbcount, sizeof(netsnmp_request_info));
+        asp->requests =
+            calloc(asp->vbcount ? asp->vbcount : 1,
+                   sizeof(netsnmp_request_info));
         /*
          * collect varbinds 
          */
         status = netsnmp_create_subtree_cache(asp);
         if (status != SNMP_ERR_NOERROR)
             return status;
     }
 
     asp->mode = asp->pdu->command;
     switch (asp->mode) {
     case SNMP_MSG_GET:
         /*
          * increment the message type counter 
          */
         snmp_increment_statistic(STAT_SNMPINGETREQUESTS);
 
         /*
          * check vacm ahead of time 
          */
         check_acm(asp, SNMP_NOSUCHOBJECT);
 
         /*
          * get the results 
          */
         status = handle_var_requests(asp);
 
         /*
          * Deal with unhandled results -> noSuchInstance (rather
          * than noSuchObject -- in that case, the type will
          * already have been set to noSuchObject when we realised
          * we couldn't find an appropriate tree).  
          */
         if (status == SNMP_ERR_NOERROR)
             snmp_replace_var_types(asp->pdu->variables, ASN_NULL,
                                    SNMP_NOSUCHINSTANCE);
         break;
 
     case SNMP_MSG_GETNEXT:
         snmp_increment_statistic(STAT_SNMPINGETNEXTS);
         /* FALL THROUGH */
 
     case SNMP_MSG_GETBULK:     /* note: there is no getbulk stat */
         /*
          * loop through our mib tree till we find an
          * appropriate response to return to the caller. 
          */
 
         if (inclusives) {
             /*
              * This is a special case for AgentX INCLUSIVE getNext
              * requests where a result lexi-equal to the request is okay
              * but if such a result does not exist, we still want the
              * lexi-next one.  So basically we do a GET first, and if any
              * of the INCLUSIVE requests are satisfied, we use that
              * value.  Then, unsatisfied INCLUSIVE requests, and
              * non-INCLUSIVE requests get done as normal.  
              */
 
             DEBUGMSGTL(("snmp_agent", "inclusive range(s) in getNext\n"));
             asp->oldmode = asp->mode;
             asp->mode = SNMP_MSG_GET;
         }
 
         /*
          * first pass 
          */
         status = handle_var_requests(asp);
         if (status != SNMP_ERR_NOERROR) {
             if (!inclusives)
                 return status;  /* should never really happen */
             else
                 asp->status = SNMP_ERR_NOERROR;
         }
 
         /*
          * loop through our mib tree till we find an
          * appropriate response to return to the caller. 
          */
 
         status = handle_getnext_loop(asp);
         break;
 
 #ifndef NETSNMP_NO_WRITE_SUPPORT
     case SNMP_MSG_SET:
 #ifdef NETSNMP_DISABLE_SET_SUPPORT
         return SNMP_ERR_NOTWRITABLE;
 #else
         /*
          * check access permissions first 
          */
         if (check_acm(asp, SNMP_NOSUCHOBJECT))
             return SNMP_ERR_NOTWRITABLE;
 
         asp->mode = MODE_SET_BEGIN;
         status = handle_set_loop(asp);
 #endif
         break;
 
     case SNMP_MSG_INTERNAL_SET_BEGIN:
     case SNMP_MSG_INTERNAL_SET_RESERVE1:
     case SNMP_MSG_INTERNAL_SET_RESERVE2:
     case SNMP_MSG_INTERNAL_SET_ACTION:
     case SNMP_MSG_INTERNAL_SET_COMMIT:
     case SNMP_MSG_INTERNAL_SET_FREE:
     case SNMP_MSG_INTERNAL_SET_UNDO:
         asp->pdu->flags |= UCD_MSG_FLAG_ONE_PASS_ONLY;
         status = handle_set_loop(asp);
         /*
          * asp related cache is saved in cleanup 
          */
         break;
 #endif /* NETSNMP_NO_WRITE_SUPPORT */
 
     case SNMP_MSG_RESPONSE:
         snmp_increment_statistic(STAT_SNMPINGETRESPONSES);
         return SNMP_ERR_NOERROR;
 
     case SNMP_MSG_TRAP:
     case SNMP_MSG_TRAP2:
         snmp_increment_statistic(STAT_SNMPINTRAPS);
         return SNMP_ERR_NOERROR;
 
     default:
         /*
          * WWW: are reports counted somewhere ? 
          */
         snmp_increment_statistic(STAT_SNMPINASNPARSEERRS);
         return SNMPERR_GENERR;  /* shouldn't get here */
         /*
          * WWW 
          */
     }
     return status;
 }
 
 /** set error for a request
  * \internal external interface: netsnmp_request_set_error
  */
