commit 931dc5b29fbee66743c4b85dbfdf97bd2b72ca53
Merge: 54f072fd8 46e260dd6
Author: David Garske <david@wolfssl.com>
Date:   Wed Jan 6 14:10:28 2021 -0800

    Merge pull request #3619 from tmael/fuzz_math
    
    Fix for OSS-Fuzz issue #29103: out-of-bounds read in TLSX_CSR_Parse()

diff --git a/src/tls.c b/src/tls.c
index 4aa1078da..152520550 100644
--- a/src/tls.c
+++ b/src/tls.c
@@ -2979,197 +2979,197 @@ static word16 TLSX_CSR_Write(CertificateStatusRequest* csr, byte* output,
 static int TLSX_CSR_Parse(WOLFSSL* ssl, byte* input, word16 length,
                                                                  byte isRequest)
 {
     int ret;
 #if !defined(NO_WOLFSSL_SERVER)
     byte status_type;
     word16 size = 0;
 #if defined(WOLFSSL_TLS13)
     DecodedCert* cert;
 #endif
 #endif
 
 #if !defined(NO_WOLFSSL_CLIENT) || !defined(NO_WOLFSSL_SERVER) \
     && defined(WOLFSSL_TLS13)
     OcspRequest* request;
     TLSX* extension;
     CertificateStatusRequest* csr;
 #endif
 
 #if !defined(NO_WOLFSSL_CLIENT) && defined(WOLFSSL_TLS13) \
  || !defined(NO_WOLFSSL_SERVER) 
     word32 offset = 0;
 #endif
 
 #if !defined(NO_WOLFSSL_CLIENT) && defined(WOLFSSL_TLS13)
     word32 resp_length;
 #endif
 
     /* shut up compiler warnings */
     (void) ssl; (void) input;
 
     if (!isRequest) {
 #ifndef NO_WOLFSSL_CLIENT
         extension = TLSX_Find(ssl->extensions, TLSX_STATUS_REQUEST);
         csr = extension ? (CertificateStatusRequest*)extension->data : NULL;
 
         if (!csr) {
             /* look at context level */
             extension = TLSX_Find(ssl->ctx->extensions, TLSX_STATUS_REQUEST);
             csr = extension ? (CertificateStatusRequest*)extension->data : NULL;
 
             if (!csr) /* unexpected extension */
                 return TLSX_HandleUnsupportedExtension(ssl);
 
             /* enable extension at ssl level */
             ret = TLSX_UseCertificateStatusRequest(&ssl->extensions,
                                      csr->status_type, csr->options, ssl,
                                      ssl->heap, ssl->devId);
             if (ret != WOLFSSL_SUCCESS)
                 return ret;
 
             switch (csr->status_type) {
                 case WOLFSSL_CSR_OCSP:
                     /* propagate nonce */
                     if (csr->request.ocsp.nonceSz) {
                         request = 
                             (OcspRequest*)TLSX_CSR_GetRequest(ssl->extensions);
 
                         if (request) {
                             XMEMCPY(request->nonce, csr->request.ocsp.nonce,
                                                     csr->request.ocsp.nonceSz);
                             request->nonceSz = csr->request.ocsp.nonceSz;
                         }
                     }
                 break;
             }
         }
 
         ssl->status_request = 1;
 
     #ifdef WOLFSSL_TLS13
         if (ssl->options.tls1_3) {
             /* Get the new extension potentially created above. */
             extension = TLSX_Find(ssl->extensions, TLSX_STATUS_REQUEST);
             csr = extension ? (CertificateStatusRequest*)extension->data : NULL;
             if (csr == NULL)
                 return MEMORY_ERROR;
 
             ret = 0;
             if (OPAQUE8_LEN + OPAQUE24_LEN > length)
                 ret = BUFFER_ERROR;
             if (ret == 0 && input[offset++] != WOLFSSL_CSR_OCSP)
                 ret = BAD_CERTIFICATE_STATUS_ERROR;
             if (ret == 0) {
                 c24to32(input + offset, &resp_length);
                 offset += OPAQUE24_LEN;
                 if (offset + resp_length != length)
                     ret = BUFFER_ERROR;
             }
             if (ret == 0) {
                 csr->response.buffer = input + offset;
                 csr->response.length = resp_length;
             }
 
             return ret;
         }
         else
     #endif
         {
             /* extension_data MUST be empty. */
             return length ? BUFFER_ERROR : 0;
         }
 #endif
     }
     else {
 #ifndef NO_WOLFSSL_SERVER
         if (length == 0)
             return 0;
 
         status_type = input[offset++];
 
         switch (status_type) {
             case WOLFSSL_CSR_OCSP: {
 
                 /* skip responder_id_list */
-                if (length - offset < OPAQUE16_LEN)
+                if ((int)(length - offset) < OPAQUE16_LEN)
                     return BUFFER_ERROR;
 
                 ato16(input + offset, &size);
                 offset += OPAQUE16_LEN + size;
 
                 /* skip request_extensions */
-                if (length - offset < OPAQUE16_LEN)
+                if ((int)(length - offset) < OPAQUE16_LEN)
                     return BUFFER_ERROR;
 
                 ato16(input + offset, &size);
                 offset += OPAQUE16_LEN + size;
 
                 if (offset > length)
                     return BUFFER_ERROR;
 
                 /* is able to send OCSP response? */
                 if (ssl->ctx->cm == NULL || !ssl->ctx->cm->ocspStaplingEnabled)
                     return 0;
             }
             break;
 
             /* unknown status type */
             default:
                 return 0;
         }
 
         /* if using status_request and already sending it, skip this one */
         #ifdef HAVE_CERTIFICATE_STATUS_REQUEST_V2
         if (ssl->status_request_v2)
             return 0;
         #endif
 
         /* accept the first good status_type and return */
         ret = TLSX_UseCertificateStatusRequest(&ssl->extensions, status_type,
                                                  0, ssl, ssl->heap, ssl->devId);
         if (ret != WOLFSSL_SUCCESS)
             return ret; /* throw error */
 
     #if defined(WOLFSSL_TLS13)
         if (ssl->options.tls1_3) {
             cert = (DecodedCert*)XMALLOC(sizeof(DecodedCert), ssl->heap,
                                          DYNAMIC_TYPE_DCERT);
             if (cert == NULL) {
                 return MEMORY_E;
             }
             InitDecodedCert(cert, ssl->buffers.certificate->buffer,
                             ssl->buffers.certificate->length, ssl->heap);
             ret = ParseCert(cert, CERT_TYPE, 1, ssl->ctx->cm);
             if (ret != 0 ) {
                 XFREE(cert, ssl->heap, DYNAMIC_TYPE_DCERT);
                 return ret;
             }
             ret = TLSX_CSR_InitRequest(ssl->extensions, cert, ssl->heap);
             if (ret != 0 ) {
                 XFREE(cert, ssl->heap, DYNAMIC_TYPE_DCERT);
                 return ret;
             }
             XFREE(cert, ssl->heap, DYNAMIC_TYPE_DCERT);
 
             extension = TLSX_Find(ssl->extensions, TLSX_STATUS_REQUEST);
             csr = extension ?
                 (CertificateStatusRequest*)extension->data : NULL;
             if (csr == NULL)
                 return MEMORY_ERROR;
 
             request = &csr->request.ocsp;
             ret = CreateOcspResponse(ssl, &request, &csr->response);
             if (ret != 0)
                 return ret;
             if (csr->response.buffer)
                 TLSX_SetResponse(ssl, TLSX_STATUS_REQUEST);
         }
         else
     #endif
             TLSX_SetResponse(ssl, TLSX_STATUS_REQUEST);
         ssl->status_request = status_type;
 #endif
     }
 
     return 0;
 }
@@ -3426,153 +3426,153 @@ static word16 TLSX_CSR2_Write(CertificateStatusRequestItemV2* csr2,
 static int TLSX_CSR2_Parse(WOLFSSL* ssl, byte* input, word16 length,
                                                                  byte isRequest)
 {
     int ret;
 
     /* shut up compiler warnings */
     (void) ssl; (void) input;
 
     if (!isRequest) {
 #ifndef NO_WOLFSSL_CLIENT
         TLSX* extension = TLSX_Find(ssl->extensions, TLSX_STATUS_REQUEST_V2);
         CertificateStatusRequestItemV2* csr2 = extension ?
                         (CertificateStatusRequestItemV2*)extension->data : NULL;
 
         if (!csr2) {
             /* look at context level */
             extension = TLSX_Find(ssl->ctx->extensions, TLSX_STATUS_REQUEST_V2);
             csr2 = extension ?
                         (CertificateStatusRequestItemV2*)extension->data : NULL;
 
             if (!csr2) /* unexpected extension */
                 return TLSX_HandleUnsupportedExtension(ssl);
 
             /* enable extension at ssl level */
             for (; csr2; csr2 = csr2->next) {
                 ret = TLSX_UseCertificateStatusRequestV2(&ssl->extensions,
                                     csr2->status_type, csr2->options, ssl->heap,
                                                                     ssl->devId);
                 if (ret != WOLFSSL_SUCCESS)
                     return ret;
 
                 switch (csr2->status_type) {
                     case WOLFSSL_CSR2_OCSP:
                         /* followed by */
                     case WOLFSSL_CSR2_OCSP_MULTI:
                         /* propagate nonce */
                         if (csr2->request.ocsp[0].nonceSz) {
                             OcspRequest* request =
                              (OcspRequest*)TLSX_CSR2_GetRequest(ssl->extensions,
                                                           csr2->status_type, 0);
 
                             if (request) {
                                 XMEMCPY(request->nonce,
                                         csr2->request.ocsp[0].nonce,
                                         csr2->request.ocsp[0].nonceSz);
 
                                 request->nonceSz =
                                                   csr2->request.ocsp[0].nonceSz;
                             }
                         }
                     break;
                 }
             }
         }
 
         ssl->status_request_v2 = 1;
 
         return length ? BUFFER_ERROR : 0; /* extension_data MUST be empty. */
 #endif
     }
     else {
 #ifndef NO_WOLFSSL_SERVER
         byte   status_type;
         word16 request_length;
         word16 offset = 0;
         word16 size = 0;
 
         /* list size */
         if (offset + OPAQUE16_LEN >= length) {
             return BUFFER_E;
         }
 
         ato16(input + offset, &request_length);
         offset += OPAQUE16_LEN;
 
         if (length - OPAQUE16_LEN != request_length)
             return BUFFER_ERROR;
 
         while (length > offset) {
-            if (length - offset < ENUM_LEN + OPAQUE16_LEN)
+            if ((int)(length - offset) < ENUM_LEN + OPAQUE16_LEN)
                 return BUFFER_ERROR;
 
             status_type = input[offset++];
 
             ato16(input + offset, &request_length);
             offset += OPAQUE16_LEN;
 
             if (length - offset < request_length)
                 return BUFFER_ERROR;
 
             switch (status_type) {
                 case WOLFSSL_CSR2_OCSP:
                 case WOLFSSL_CSR2_OCSP_MULTI:
                     /* skip responder_id_list */
-                    if (length - offset < OPAQUE16_LEN)
+                    if ((int)(length - offset) < OPAQUE16_LEN)
                         return BUFFER_ERROR;
 
                     ato16(input + offset, &size);
                     if (length - offset < size)
                         return BUFFER_ERROR;
 
                     offset += OPAQUE16_LEN + size;
                     /* skip request_extensions */
-                    if (length - offset < OPAQUE16_LEN)
+                    if ((int)(length - offset) < OPAQUE16_LEN)
                         return BUFFER_ERROR;
 
                     ato16(input + offset, &size);
                     if (length - offset < size)
                         return BUFFER_ERROR;
 
                     offset += OPAQUE16_LEN + size;
                     if (offset > length)
                         return BUFFER_ERROR;
 
                     /* is able to send OCSP response? */
                     if (ssl->ctx->cm == NULL
                     || !ssl->ctx->cm->ocspStaplingEnabled)
                         continue;
                 break;
 
                 default:
                     /* unknown status type, skipping! */
                     offset += request_length;
                     continue;
             }
 
             /* if using status_request and already sending it, skip this one */
             #ifdef HAVE_CERTIFICATE_STATUS_REQUEST
             if (ssl->status_request)
                 return 0;
             #endif
 
             /* TLS 1.3 servers MUST NOT act upon presence or information in
              * this extension (RFC 8448 Section 4.4.2.1).
              */
             if (!IsAtLeastTLSv1_3(ssl->version)) {
                 /* accept the first good status_type and return */
                 ret = TLSX_UseCertificateStatusRequestV2(&ssl->extensions,
                                          status_type, 0, ssl->heap, ssl->devId);
                 if (ret != WOLFSSL_SUCCESS)
                     return ret; /* throw error */
 
                 TLSX_SetResponse(ssl, TLSX_STATUS_REQUEST_V2);
                 ssl->status_request_v2 = status_type;
             }
 
             return 0;
         }
 #endif
     }
 
     return 0;
 }
@@ -8497,155 +8497,155 @@ static int TLSX_PreSharedKey_Write(PreSharedKey* list, byte* output,
 /* Parse the pre-shared key extension.
  * Different formats in different messages.
  *
  * ssl      The SSL/TLS object.
  * input    The extension data.
  * length   The length of the extension data.
  * msgType  The type of the message this extension is being parsed from.
  * returns 0 on success and other values indicate failure.
  */
 static int TLSX_PreSharedKey_Parse(WOLFSSL* ssl, byte* input, word16 length,
                                    byte msgType)
 {
     TLSX*         extension;
     PreSharedKey* list;
 
     if (msgType == client_hello) {
         int    ret;
         word16 len;
         word16 idx = 0;
 
         TLSX_Remove(&ssl->extensions, TLSX_PRE_SHARED_KEY, ssl->heap);
 
         /* Length of identities and of binders. */
-        if (length - idx < OPAQUE16_LEN + OPAQUE16_LEN)
+        if ((int)(length - idx) < OPAQUE16_LEN + OPAQUE16_LEN)
             return BUFFER_E;
 
         /* Length of identities. */
         ato16(input + idx, &len);
         idx += OPAQUE16_LEN;
         if (len < MIN_PSK_ID_LEN || length - idx < len)
             return BUFFER_E;
 
         /* Create a pre-shared key object for each identity. */
         while (len > 0) {
             byte*  identity;
             word16 identityLen;
             word32 age;
 
             if (len < OPAQUE16_LEN)
                 return BUFFER_E;
 
             /* Length of identity. */
             ato16(input + idx, &identityLen);
             idx += OPAQUE16_LEN;
             if (len < OPAQUE16_LEN + identityLen + OPAQUE32_LEN ||
                     identityLen > MAX_PSK_ID_LEN)
                 return BUFFER_E;
             /* Cache identity pointer. */
             identity = input + idx;
             idx += identityLen;
             /* Ticket age. */
             ato32(input + idx, &age);
             idx += OPAQUE32_LEN;
 
             ret = TLSX_PreSharedKey_Use(ssl, identity, identityLen, age, no_mac,
                                         0, 0, 1, NULL);
             if (ret != 0)
                 return ret;
 
             /* Done with this identity. */
             len -= OPAQUE16_LEN + identityLen + OPAQUE32_LEN;
         }
 
         /* Find the list of identities sent to server. */
         extension = TLSX_Find(ssl->extensions, TLSX_PRE_SHARED_KEY);
         if (extension == NULL)
             return PSK_KEY_ERROR;
         list = (PreSharedKey*)extension->data;
 
         /* Length of binders. */
         if (idx + OPAQUE16_LEN > length)
             return BUFFER_E;
         ato16(input + idx, &len);
         idx += OPAQUE16_LEN;
         if (len < MIN_PSK_BINDERS_LEN || length - idx < len)
             return BUFFER_E;
 
         /* Set binder for each identity. */
         while (list != NULL && len > 0) {
             /* Length of binder */
             list->binderLen = input[idx++];
             if (list->binderLen < WC_SHA256_DIGEST_SIZE ||
                     list->binderLen > WC_MAX_DIGEST_SIZE)
                 return BUFFER_E;
             if (len < OPAQUE8_LEN + list->binderLen)
                 return BUFFER_E;
 
             /* Copy binder into static buffer. */
             XMEMCPY(list->binder, input + idx, list->binderLen);
             idx += list->binderLen;
 
             /* Done with binder entry. */
             len -= OPAQUE8_LEN + list->binderLen;
 
             /* Next identity. */
             list = list->next;
         }
         if (list != NULL || len != 0)
             return BUFFER_E;
 
         return 0;
     }
 
     if (msgType == server_hello) {
         word16 idx;
 
         /* Index of identity chosen by server. */
         if (length != OPAQUE16_LEN)
             return BUFFER_E;
         ato16(input, &idx);
 
     #ifdef WOLFSSL_EARLY_DATA
         ssl->options.pskIdIndex = idx + 1;
     #endif
 
         /* Find the list of identities sent to server. */
         extension = TLSX_Find(ssl->extensions, TLSX_PRE_SHARED_KEY);
         if (extension == NULL)
             return PSK_KEY_ERROR;
         list = (PreSharedKey*)extension->data;
 
         /* Mark the identity as chosen. */
         for (; list != NULL && idx > 0; idx--)
             list = list->next;
         if (list == NULL)
             return PSK_KEY_ERROR;
         list->chosen = 1;
 
     #ifdef HAVE_SESSION_TICKET
         if (list->resumption) {
            /* Check that the session's details are the same as the server's. */
            if (ssl->options.cipherSuite0  != ssl->session.cipherSuite0       ||
                ssl->options.cipherSuite   != ssl->session.cipherSuite        ||
                ssl->session.version.major != ssl->ctx->method->version.major ||
                ssl->session.version.minor != ssl->ctx->method->version.minor) {
                return PSK_KEY_ERROR;
            }
         }
     #endif
 
         return 0;
     }
 
     return SANITY_MSG_E;
 }
 
 /* Create a new pre-shared key and put it into the list.
  *
  * list          The linked list of pre-shared key.
  * identity      The identity.
  * len           The length of the identity data.
  * heap          The memory to allocate with.
  * preSharedKey  The new pre-shared key object.
  * returns 0 on success and other values indicate failure.
  */
