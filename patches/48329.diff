commit 86b0e3f7c7fc2c689db88972221b5d4da1c7214f
Author: HoundThe <houndthe@protonmail.com>
Date:   Tue Jul 12 10:23:07 2022 +0200

    Fix unaligned read and missing length check in read_blob_*. (#1742)
    
    Add depth limit in namespace recursion due to the possible loops.

diff --git a/libyara/include/yara/dotnet.h b/libyara/include/yara/dotnet.h
index 8d66d33e..8462deac 100644
--- a/libyara/include/yara/dotnet.h
+++ b/libyara/include/yara/dotnet.h
@@ -61,160 +61,161 @@ typedef struct _STREAM_HEADER
 //
 // CLI #~ Stream Header
 // ECMA-335 Section II.24.2.6
 //
 typedef struct _TILDE_HEADER
 {
   DWORD Reserved1;
   BYTE MajorVersion;
   BYTE MinorVersion;
   BYTE HeapSizes;
   BYTE Reserved2;
   ULONGLONG Valid;
   ULONGLONG Sorted;
 } TILDE_HEADER, *PTILDE_HEADER;
 
 // flag in HeapSizes that denotes extra 4 bytes after Rows
 #define HEAP_EXTRA_DATA 0x40
 #define SIG_FLAG_GENERIC 0x10
 
 // These are the bit positions in Valid which will be set if the table
 // exists.
 #define BIT_MODULE                 0x00
 #define BIT_TYPEREF                0x01
 #define BIT_TYPEDEF                0x02
 #define BIT_FIELDPTR               0x03  // Not documented in ECMA-335
 #define BIT_FIELD                  0x04
 #define BIT_METHODDEFPTR           0x05  // Not documented in ECMA-335
 #define BIT_METHODDEF              0x06
 #define BIT_PARAMPTR               0x07  // Not documented in ECMA-335
 #define BIT_PARAM                  0x08
 #define BIT_INTERFACEIMPL          0x09
 #define BIT_MEMBERREF              0x0A
 #define BIT_CONSTANT               0x0B
 #define BIT_CUSTOMATTRIBUTE        0x0C
 #define BIT_FIELDMARSHAL           0x0D
 #define BIT_DECLSECURITY           0x0E
 #define BIT_CLASSLAYOUT            0x0F
 #define BIT_FIELDLAYOUT            0x10
 #define BIT_STANDALONESIG          0x11
 #define BIT_EVENTMAP               0x12
 #define BIT_EVENTPTR               0x13  // Not documented in ECMA-335
 #define BIT_EVENT                  0x14
 #define BIT_PROPERTYMAP            0x15
 #define BIT_PROPERTYPTR            0x16  // Not documented in ECMA-335
 #define BIT_PROPERTY               0x17
 #define BIT_METHODSEMANTICS        0x18
 #define BIT_METHODIMPL             0x19
 #define BIT_MODULEREF              0x1A
 #define BIT_TYPESPEC               0x1B
 #define BIT_IMPLMAP                0x1C
 #define BIT_FIELDRVA               0x1D
 #define BIT_ENCLOG                 0x1E  // Not documented in ECMA-335
 #define BIT_ENCMAP                 0x1F  // Not documented in ECMA-335
 #define BIT_ASSEMBLY               0x20
 #define BIT_ASSEMBLYPROCESSOR      0x21
 #define BIT_ASSEMBLYOS             0x22
 #define BIT_ASSEMBLYREF            0x23
 #define BIT_ASSEMBLYREFPROCESSOR   0x24
 #define BIT_ASSEMBLYREFOS          0x25
 #define BIT_FILE                   0x26
 #define BIT_EXPORTEDTYPE           0x27
 #define BIT_MANIFESTRESOURCE       0x28
 #define BIT_NESTEDCLASS            0x29
 #define BIT_GENERICPARAM           0x2A
 #define BIT_METHODSPEC             0x2B
 #define BIT_GENERICPARAMCONSTRAINT 0x2C
 // These are not documented in ECMA-335 nor is it clear what the format is.
 // They are for debugging information as far as I can tell.
 //#define BIT_DOCUMENT               0x30
 //#define BIT_METHODDEBUGINFORMATION 0x31
 //#define BIT_LOCALSCOPE             0x32
 //#define BIT_LOCALVARIABLE          0x33
 //#define BIT_LOCALCONSTANT          0x34
 //#define BIT_IMPORTSCOPE            0x35
 //#define BIT_STATEMACHINEMETHOD     0x36
 
 // The string length of a typelib attribute is at most 0xFF.
 #define MAX_TYPELIB_SIZE 0xFF
 
 // Flags and Masks for .NET tables
 #define TYPE_ATTR_CLASS_SEMANTIC_MASK 0x20
 #define TYPE_ATTR_CLASS               0x0
 #define TYPE_ATTR_INTERFACE           0x20
 
 #define TYPE_ATTR_VISIBILITY_MASK      0x7
 #define TYPE_ATTR_NOT_PUBLIC           0x0
 #define TYPE_ATTR_PUBLIC               0x1
 #define TYPE_ATTR_NESTED_PUBLIC        0x2
 #define TYPE_ATTR_NESTED_PRIVATE       0x3
 #define TYPE_ATTR_NESTED_FAMILY        0x4
 #define TYPE_ATTR_NESTED_ASSEMBLY      0x5
 #define TYPE_ATTR_NESTED_FAM_AND_ASSEM 0x6
 #define TYPE_ATTR_NESTED_FAM_OR_ASSEM  0x7
 
 #define TYPE_ATTR_ABSTRACT 0x80
 #define TYPE_ATTR_SEALED   0x100
 
 #define METHOD_ATTR_ACCESS_MASK   0x7
 #define METHOD_ATTR_PRIVATE       0x1
 #define METHOD_ATTR_FAM_AND_ASSEM 0x2
 #define METHOD_ATTR_ASSEM         0x3
 #define METHOD_ATTR_FAMILY        0x4
 #define METHOD_ATTR_FAM_OR_ASSEM  0x5
 #define METHOD_ATTR_PUBLIC        0x6
 
 #define METHOD_ATTR_STATIC   0x10
 #define METHOD_ATTR_FINAL    0x20
 #define METHOD_ATTR_VIRTUAL  0x40
 #define METHOD_ATTR_ABSTRACT 0x400
 
 // Element types ECMA-335 Section II.23.1.16
 #define TYPE_END         0x0
 #define TYPE_VOID        0x1
 #define TYPE_BOOL        0x2
 #define TYPE_CHAR        0x3
 #define TYPE_I1          0x4
 #define TYPE_U1          0x5
 #define TYPE_I2          0x6
 #define TYPE_U2          0x7
 #define TYPE_I4          0x8
 #define TYPE_U4          0x9
 #define TYPE_I8          0xa
 #define TYPE_U8          0xb
 #define TYPE_R4          0xc
 #define TYPE_R8          0xd
 #define TYPE_STRING      0xe
 #define TYPE_PTR         0xf
 #define TYPE_BYREF       0x10
 #define TYPE_VALUETYPE   0x11
 #define TYPE_CLASS       0x12
 #define TYPE_VAR         0x13
 #define TYPE_ARRAY       0x14
 #define TYPE_GENERICINST 0x15
 #define TYPE_TYPEDREF    0x16
 #define TYPE_I           0x18
 #define TYPE_U           0x19
 #define TYPE_FNPTR       0x1b
 #define TYPE_OBJECT      0x1c
 #define TYPE_SZARRAY     0x1d
 #define TYPE_MVAR        0x1e
 #define TYPE_CMOD_REQD   0x1f
 #define TYPE_CMOD_OPT    0x20
 #define TYPE_INTERNAL    0x21
 #define TYPE_MODIFIER    0x40
 #define TYPE_SENTINEL    0x41
 #define TYPE_PINNED      0x45
 
 // Sane boundaries for invalid files
 #define MAX_ARRAY_RANK      50
 #define MAX_PARAM_COUNT     2000
 #define MAX_GEN_PARAM_COUNT 1000
 #define MAX_METHOD_COUNT    20000
 #define MAX_STRING_LENGTH   10000
 // Sanity check for loops in type parser
-#define MAX_TYPE_DEPTH 0x10
+#define MAX_TYPE_DEPTH      0x10
+#define MAX_NAMESPACE_DEPTH 0x0a
 
 //
 // Module table
 // ECMA-335 Section II.22.30
 //
diff --git a/libyara/modules/dotnet/dotnet.c b/libyara/modules/dotnet/dotnet.c
index facd24fb..58c3779f 100644
--- a/libyara/modules/dotnet/dotnet.c
+++ b/libyara/modules/dotnet/dotnet.c
@@ -496,121 +496,124 @@ static bool read_nestedclass(
 // ECMA-335 II.23.2 blob heap uses variable length encoding of integers
 static uint32_t read_blob_unsigned(const uint8_t** data, uint32_t* len)
 {
   if (*len < 1)
     return 0;
 
   // first byte is enough to decode the length
   // without worrying about endiannity
   // Compressed integers use big-endian order
   uint8_t first_byte = *(*data);
 
   // If the value lies between 0 (0x00) and 127 (0x7F), inclusive, encode as a
   // one-byte integer (bit 7 is clear, value held in bits 6 through 0)
   if (!(first_byte & 0x80))
   {
     *data += sizeof(uint8_t);
     *len -= sizeof(uint8_t);
     return first_byte;
   }
 
   if (*len < 2)
     return 0;
 
   // If the value lies between 2^8 (0x80) and 2^14 â€“ 1 (0x3FFF), inclusive,
   // encode as a 2-byte integer with bit 15 set, bit 14 clear (value held in
   // bits 13 through 0)
   if ((first_byte & 0xC0) == 0x80)
   {
-    uint32_t result = yr_be16toh(*(uint16_t*) *data);
+    uint32_t result = yr_be16toh(yr_unaligned_u16(*data));
     *data += sizeof(uint16_t);
     *len -= sizeof(uint16_t);
     // value is in lower 14 bits
     return result & 0x3FFF;
   }
 
   if (*len < 4)
     return 0;
 
   // Otherwise, encode as a 4-byte integer, with bit 31 set, bit 30 set,
   // bit 29 clear (value held in bits 28 through 0)
   if ((first_byte & 0xE0) == 0xC0)
   {
-    uint32_t result = yr_be32toh(*(uint32_t*) *data);
+    uint32_t result = yr_be32toh(yr_unaligned_u32(*data));
     *data += sizeof(uint32_t);
     *len -= sizeof(uint32_t);
     // Uses last 29 bits for the result
     return result & 0x1FFFFFFF;
   }
 
   return 0;
 }
 
 // ECMA-335 II.23.2 blob heap uses variable length encoding of integers
 // Probably wouldn't work on non 2's complement arches?
 static int32_t read_blob_signed(const uint8_t** data, uint32_t* len)
 {
   // Compressed integers use big-endian order!
   if (*len < 1)
     return 0;
 
   // first byte is enough to decode the length
   // without worrying about endiannity
   uint8_t first_byte = *(*data);
 
   // Encode as a one-byte integer, bit 7 clear, rotated value in bits 6
   // through 0, giving 0x01 (-2^6) to 0x7E (2^6-1).
   if (!(first_byte & 0x80))
   {
     uint8_t tmp = first_byte >> 1;
     // sign extension in case of negative number
     if (first_byte & 0x1)
       tmp |= 0xC0;
 
     *data += sizeof(uint8_t);
     *len -= sizeof(uint8_t);
 
     return (int32_t) tmp;
   }
 
   if (*len < 2)
     return 0;
 
   // Encode as a two-byte integer: bit 15 set, bit 14 clear, rotated value
   // in bits 13 through 0, giving 0x8001 (-2^13) to 0xBFFE (2^13-1).
   if ((first_byte & 0xC0) == 0x80)
   {
-    uint16_t tmp1 = yr_be16toh(*(uint16_t*) *data);
+    uint16_t tmp1 = yr_be16toh(yr_unaligned_u16(*data));
     // shift and leave top 2 bits clear
     uint16_t tmp2 = (tmp1 >> 1) & 0x3FFF;
     // sign extension in case of negative number
     if (tmp1 & 0x1)
       tmp2 |= 0xC000;
 
     *data += sizeof(uint16_t);
     *len -= sizeof(uint16_t);
 
     return (int32_t) tmp2;
   }
 
+  if (*len < 4)
+    return 0;
+
   // Encode as a four-byte integer: bit 31 set, 30 set, bit 29 clear,
   // rotated value in bits 28 through 0, giving 0xC0000001 (-2^28) to
   // 0xDFFFFFFE (2^28-1).
   if ((first_byte & 0xE0) == 0xC0)
   {
-    uint32_t tmp1 = yr_be32toh(*(uint32_t*) *data);
+    uint32_t tmp1 = yr_be32toh(yr_unaligned_u32(*data));
     // shift and leave top 3 bits clear
     uint32_t tmp2 = (tmp1 >> 1) & 0x1FFFFFFF;
     // sign extension in case of negative number
     if (tmp1 & 0x1)
       tmp2 |= 0xE0000000;
 
     *data += sizeof(uint32_t);
     *len -= sizeof(uint32_t);
 
     return (int32_t) tmp2;
   }
 
   return 0;
 }
 
 // Forward declarations
@@ -622,94 +625,97 @@ static char* parse_signature_type(
     GENERIC_PARAMETERS* method_gen_params,
     uint32_t depth);
 
-static char* parse_enclosing_types(const CLASS_CONTEXT* ctx, uint32_t type_idx);
+static char* parse_enclosing_types(
+    const CLASS_CONTEXT* ctx,
+    uint32_t nested_idx,
+    uint32_t depth);
 
 static char* get_type_def_or_ref_fullname(
     const CLASS_CONTEXT* ctx,
     uint32_t coded_index,
     GENERIC_PARAMETERS* class_gen_params,
     GENERIC_PARAMETERS* method_gen_params)
 {
   // first 2 bits define table, index starts with third bit
   uint32_t index = coded_index >> 2;
   if (!index)
     return NULL;
 
   const uint8_t* str_heap = ctx->str_heap;
   uint32_t str_size = ctx->str_size;
 
   uint8_t table = coded_index & 0x3;
   if (table == 0)  // TypeDef
   {
     const uint8_t* data = get_table_offset(&ctx->tables->typedef_, index);
     if (!data)
       return NULL;
 
     TYPEDEF_ROW def_row;
     bool result = read_typedef(ctx, data, &def_row);
     if (result)
     {
       const char* name = pe_get_dotnet_string(
           ctx->pe, str_heap, str_size, def_row.Name);
       const char* namespace = pe_get_dotnet_string(
           ctx->pe, str_heap, str_size, def_row.Namespace);
 
       char* result = NULL;
       // Type might be nested, try to find correct namespace
       if (is_nested(def_row.Flags))
       {
-        char* nested_namespace = parse_enclosing_types(ctx, index);
+        char* nested_namespace = parse_enclosing_types(ctx, index, 1);
         char* tmp = create_full_name(namespace, nested_namespace);
         result = create_full_name(name, tmp);
         yr_free(nested_namespace);
         yr_free(tmp);
       }
       else
         result = create_full_name(name, namespace);
 
       return result;
     }
   }
   else if (table == 1)  // TypeRef
   {
     const uint8_t* data = get_table_offset(&ctx->tables->typeref, index);
     if (!data)
       return NULL;
 
     TYPEREF_ROW ref_row;
     bool result = read_typeref(ctx, data, &ref_row);
     if (result)
     {
       const char* name = pe_get_dotnet_string(
           ctx->pe, str_heap, str_size, ref_row.Name);
       const char* namespace = pe_get_dotnet_string(
           ctx->pe, str_heap, str_size, ref_row.Namespace);
 
       return create_full_name(name, namespace);
     }
   }
   else if (table == 2)  // TypeSpec
   {
     const uint8_t* data = get_table_offset(&ctx->tables->typespec, index);
     if (!data)
       return NULL;
 
     TYPESPEC_ROW spec_row;
     bool result = read_typespec(ctx, data, &spec_row);
     if (result)
     {
       const uint8_t* sig_data = ctx->blob_heap + spec_row.Signature;
 
       // Read the blob entry with the data
       BLOB_PARSE_RESULT blob_res = dotnet_parse_blob_entry(ctx->pe, sig_data);
       sig_data += blob_res.size;
       uint32_t sig_len = blob_res.length;
 
       // Valid blob
       if (blob_res.size)
         return parse_signature_type(
             ctx, &sig_data, &sig_len, class_gen_params, NULL, 0);
     }
   }
   return NULL;
 }
@@ -1463,189 +1469,193 @@ static void parse_methods(
 // Walks NestedClass table, returns enclosing type fullname or NULL
 static char* parse_enclosing_types(
     const CLASS_CONTEXT* ctx,
-    uint32_t nested_idx)
+    uint32_t nested_idx,
+    uint32_t depth)
 {
+  if (depth > MAX_NAMESPACE_DEPTH)
+    return NULL;
+
   const uint8_t* str_heap = ctx->str_heap;
   uint32_t str_size = ctx->str_size;
 
   for (uint32_t idx = 0; idx < ctx->tables->nestedclass.RowCount; ++idx)
   {
     const uint8_t* nested_data = get_table_offset(
         &ctx->tables->nestedclass, idx + 1);
 
     NESTEDCLASS_ROW nested_row = {0};
     bool read_result = read_nestedclass(ctx, nested_data, &nested_row);
     if (!read_result)
       continue;
 
     // We found enclosing class, get the namespace
     if (nested_row.NestedClass == nested_idx)
     {
       const uint8_t* typedef_data = get_table_offset(
           &ctx->tables->typedef_, nested_row.EnclosingClass);
 
       TYPEDEF_ROW typedef_row = {0};
       bool result = read_typedef(ctx, typedef_data, &typedef_row);
       if (!result)
         break;
 
       const char* name = pe_get_dotnet_string(
           ctx->pe, str_heap, str_size, typedef_row.Name);
 
       // Skip the Module pseudo class
       if (name && strcmp(name, "<Module>") == 0)
         break;
 
       const char* namespace = pe_get_dotnet_string(
           ctx->pe, str_heap, str_size, typedef_row.Namespace);
 
       // Type might be further nested, try to find correct namespace,
       // check for self-reference
       if (is_nested(typedef_row.Flags) &&
           nested_row.EnclosingClass != nested_row.NestedClass)
       {
         char* nested_namespace = parse_enclosing_types(
-            ctx, nested_row.EnclosingClass);
+            ctx, nested_row.EnclosingClass, depth + 1);
 
         char* tmp = create_full_name(namespace, nested_namespace);
         char* fullname = create_full_name(name, tmp);
         yr_free(nested_namespace);
         yr_free(tmp);
         return fullname;
       }
 
       return create_full_name(name, namespace);
     }
   }
 
   return NULL;
 }
 
 // Parses and reconstructs user defined types with their methods and base types
 static void parse_user_types(const CLASS_CONTEXT* ctx)
 {
   const uint8_t* str_heap = ctx->str_heap;
   uint32_t str_size = ctx->str_size;
 
   // Index for output tracking, we can't use
   // offset as some classes can get skipped
   uint32_t out_idx = 0;
   // skip first class as it's module pseudo class -> start at index 1
   for (uint32_t idx = 0; idx < ctx->tables->typedef_.RowCount; ++idx)
   {
     YR_OBJECT* out_obj = ctx->pe->object;
     // Tables indexing starts at 1
     const uint8_t* data = get_table_offset(&ctx->tables->typedef_, idx + 1);
 
     TYPEDEF_ROW row = {0};
     bool result = read_typedef(ctx, data, &row);
     if (!result)
       continue;
 
     const char* name = pe_get_dotnet_string(
         ctx->pe, str_heap, str_size, row.Name);
     const char* type = get_typedef_type(row.Flags);
 
     // Ignore invalid types and invalid (empty) names
     if (!name || !*name || !type)
       continue;
 
     // If the type is generic, it will include ` at the end of a name
     // with number of generic arguments, just use the part before that
     const char* end = strchr(name, '`');
     // If the name will turn out empty, skip it and skip Module pseudo class
     if (end == name || strcmp(name, "<Module>") == 0)
       continue;
 
     if (end)
       set_sized_string(name, end - name, out_obj, "classes[%i].name", out_idx);
     else
       set_string(name, out_obj, "classes[%i].name", out_idx);
 
     char* fullname = NULL;
     char* namespace = pe_get_dotnet_string(
         ctx->pe, str_heap, str_size, row.Namespace);
 
     // Type might be nested, if so -> find correct namespace
     if (is_nested(row.Flags))
     {
-      char* nested_namespace = parse_enclosing_types(ctx, idx + 1);
+      char* nested_namespace = parse_enclosing_types(ctx, idx + 1, 1);
       namespace = create_full_name(namespace, nested_namespace);
       set_string(namespace, out_obj, "classes[%i].namespace", out_idx);
       fullname = create_full_name(name, namespace);
       yr_free(nested_namespace);
       yr_free(namespace);
     }
     else
     {
       set_string(namespace, out_obj, "classes[%i].namespace", out_idx);
       fullname = create_full_name(name, namespace);
     }
 
     const char* visibility = get_type_visibility(row.Flags);
     uint32_t abstract = (row.Flags & TYPE_ATTR_ABSTRACT) != 0;
     uint32_t sealed = (row.Flags & TYPE_ATTR_SEALED) != 0;
 
     set_string(fullname, out_obj, "classes[%i].fullname", out_idx);
     set_string(visibility, out_obj, "classes[%i].visibility", out_idx);
     set_string(type, out_obj, "classes[%i].type", out_idx);
     set_integer(abstract, out_obj, "classes[%i].abstract", out_idx);
     set_integer(sealed, out_obj, "classes[%i].sealed", out_idx);
 
     yr_free(fullname);
 
     // Find if type has any Generic parameters
     GENERIC_PARAMETERS gen_params = {0};
     parse_generic_params(ctx, false, idx + 1, &gen_params);
 
     set_integer(
         gen_params.len,
         out_obj,
         "classes[%i].number_of_generic_parameters",
         out_idx);
 
     for (uint32_t i = 0; i < gen_params.len; ++i)
     {
       set_string(
           gen_params.names[i],
           out_obj,
           "classes[%i].generic_parameters[%i]",
           out_idx,
           i);
     }
     // Find type and interfaces the type inherits
     parse_type_parents(ctx, row.Extends, idx + 1, out_idx, &gen_params);
 
     // To get the number of methods, we must peek where the MethodList
     // of the next type is, then there is next.MethodList - this.MethodList
     // number of methods, or if there is no following type,
     // the rest of the MethodDef table is used
     uint32_t method_count = 0;
     // If there is next method
     if (idx + 1 < ctx->tables->typedef_.RowCount)
     {
       const uint8_t* data = get_table_offset(&ctx->tables->typedef_, idx + 2);
 
       TYPEDEF_ROW next_row = {0};
       result = read_typedef(ctx, data, &next_row);
 
       // overflow check
       if (result && next_row.Method >= row.Method)
         method_count = next_row.Method - row.Method;
     }
     // overflow check - use the rest of the methods in the table
     else if (ctx->tables->methoddef.RowCount >= row.Method)
     {
       method_count = ctx->tables->methoddef.RowCount + 1 - row.Method;
     }
 
     // Sanity check for corrupted files
     if (method_count <= MAX_METHOD_COUNT)
       parse_methods(ctx, row.Method, method_count, out_idx, &gen_params);
 
     yr_free(gen_params.names);
     out_idx++;
   }
 
   set_integer(out_idx, ctx->pe->object, "number_of_classes");
 }
