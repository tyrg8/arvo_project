commit 02e62a08365ad11ae408fec3fbd2d6ee9822a325
Author: Tor Andersson <tor.andersson@artifex.com>
Date:   Tue Dec 1 17:07:27 2020 +0100

    Bug 703211: Pass scissor by value to avoid pointer aliasing issues.

diff --git a/source/fitz/draw-device.c b/source/fitz/draw-device.c
index a46d3ae59..1e2399d42 100644
--- a/source/fitz/draw-device.c
+++ b/source/fitz/draw-device.c
@@ -602,54 +602,54 @@ static void
 fz_draw_fill_path(fz_context *ctx, fz_device *devp, const fz_path *path, int even_odd, fz_matrix in_ctm,
 	fz_colorspace *colorspace_in, const float *color, float alpha, fz_color_params color_params)
 {
 	fz_draw_device *dev = (fz_draw_device*)devp;
 	fz_matrix ctm = fz_concat(in_ctm, dev->transform);
 	fz_rasterizer *rast = dev->rast;
 	fz_colorspace *colorspace = fz_default_colorspace(ctx, dev->default_cs, colorspace_in);
 	float expansion = fz_matrix_expansion(ctm);
 	float flatness;
 	unsigned char colorbv[FZ_MAX_COLORS + 1];
 	fz_irect bbox;
 	fz_draw_state *state = &dev->stack[dev->top];
 	fz_overprint op = { { 0 } };
 	fz_overprint *eop;
 
 	if (dev->top == 0 && dev->resolve_spots)
 		state = push_group_for_separations(ctx, dev, color_params, dev->default_cs);
 
 	if (expansion < FLT_EPSILON)
 		expansion = 1;
 	flatness = 0.3f / expansion;
 	if (flatness < 0.001f)
 		flatness = 0.001f;
 
 	bbox = fz_intersect_irect(fz_pixmap_bbox(ctx, state->dest), state->scissor);
-	if (fz_flatten_fill_path(ctx, rast, path, ctm, flatness, &bbox, &bbox))
+	if (fz_flatten_fill_path(ctx, rast, path, ctm, flatness, bbox, &bbox))
 		return;
 
 	if (state->blendmode & FZ_BLEND_KNOCKOUT)
 		state = fz_knockout_begin(ctx, dev);
 
 	eop = resolve_color(ctx, &op, color, colorspace, alpha, color_params, colorbv, state->dest);
 
 	fz_convert_rasterizer(ctx, rast, even_odd, state->dest, colorbv, eop);
 	if (state->shape)
 	{
 		if (!rast->fns.reusable)
-			fz_flatten_fill_path(ctx, rast, path, ctm, flatness, &bbox, NULL);
+			fz_flatten_fill_path(ctx, rast, path, ctm, flatness, bbox, NULL);
 
 		colorbv[0] = 255;
 		fz_convert_rasterizer(ctx, rast, even_odd, state->shape, colorbv, 0);
 	}
 	if (state->group_alpha)
 	{
 		if (!rast->fns.reusable)
-			fz_flatten_fill_path(ctx, rast, path, ctm, flatness, &bbox, NULL);
+			fz_flatten_fill_path(ctx, rast, path, ctm, flatness, bbox, NULL);
 
 		colorbv[0] = alpha * 255;
 		fz_convert_rasterizer(ctx, rast, even_odd, state->group_alpha, colorbv, 0);
 	}
 
 	if (state->blendmode & FZ_BLEND_KNOCKOUT)
 		fz_knockout_end(ctx, dev);
 }
@@ -658,80 +658,80 @@ static void
 fz_draw_stroke_path(fz_context *ctx, fz_device *devp, const fz_path *path, const fz_stroke_state *stroke, fz_matrix in_ctm,
 	fz_colorspace *colorspace_in, const float *color, float alpha, fz_color_params color_params)
 {
 	fz_draw_device *dev = (fz_draw_device*)devp;
 	fz_matrix ctm = fz_concat(in_ctm, dev->transform);
 	fz_rasterizer *rast = dev->rast;
 	fz_colorspace *colorspace = fz_default_colorspace(ctx, dev->default_cs, colorspace_in);
 	float expansion = fz_matrix_expansion(ctm);
 	float flatness;
 	float linewidth = stroke->linewidth;
 	unsigned char colorbv[FZ_MAX_COLORS + 1];
 	fz_irect bbox;
 	float aa_level = 2.0f/(fz_rasterizer_graphics_aa_level(rast)+2);
 	fz_draw_state *state = &dev->stack[dev->top];
 	float mlw = fz_rasterizer_graphics_min_line_width(rast);
 	fz_overprint op = { { 0 } };
 	fz_overprint *eop;
 
 	if (dev->top == 0 && dev->resolve_spots)
 		state = push_group_for_separations(ctx, dev, color_params, dev->default_cs);
 
 	if (mlw > aa_level)
 		aa_level = mlw;
 	if (expansion < FLT_EPSILON)
 		expansion = 1;
 	if (linewidth * expansion < aa_level)
 		linewidth = aa_level / expansion;
 	flatness = 0.3f / expansion;
 	if (flatness < 0.001f)
 		flatness = 0.001f;
 
 	bbox = fz_intersect_irect(fz_pixmap_bbox_no_ctx(state->dest), state->scissor);
-	if (fz_flatten_stroke_path(ctx, rast, path, stroke, ctm, flatness, linewidth, &bbox, &bbox))
+	if (fz_flatten_stroke_path(ctx, rast, path, stroke, ctm, flatness, linewidth, bbox, &bbox))
 		return;
 
 	if (state->blendmode & FZ_BLEND_KNOCKOUT)
 		state = fz_knockout_begin(ctx, dev);
 
 	eop = resolve_color(ctx, &op, color, colorspace, alpha, color_params, colorbv, state->dest);
 
 #ifdef DUMP_GROUP_BLENDS
 	dump_spaces(dev->top, "");
 	fz_dump_blend(ctx, "Before stroke ", state->dest);
 	if (state->shape)
 		fz_dump_blend(ctx, "/S=", state->shape);
 	if (state->group_alpha)
 		fz_dump_blend(ctx, "/GA=", state->group_alpha);
 	printf("\n");
 #endif
 	fz_convert_rasterizer(ctx, rast, 0, state->dest, colorbv, eop);
 	if (state->shape)
 	{
 		if (!rast->fns.reusable)
-			(void)fz_flatten_stroke_path(ctx, rast, path, stroke, ctm, flatness, linewidth, &bbox, NULL);
+			(void)fz_flatten_stroke_path(ctx, rast, path, stroke, ctm, flatness, linewidth, bbox, NULL);
 
 		colorbv[0] = 255;
 		fz_convert_rasterizer(ctx, rast, 0, state->shape, colorbv, 0);
 	}
 	if (state->group_alpha)
 	{
 		if (!rast->fns.reusable)
-			(void)fz_flatten_stroke_path(ctx, rast, path, stroke, ctm, flatness, linewidth, &bbox, NULL);
+			(void)fz_flatten_stroke_path(ctx, rast, path, stroke, ctm, flatness, linewidth, bbox, NULL);
 
 		colorbv[0] = 255 * alpha;
 		fz_convert_rasterizer(ctx, rast, 0, state->group_alpha, colorbv, 0);
 	}
 
 #ifdef DUMP_GROUP_BLENDS
 	dump_spaces(dev->top, "");
 	fz_dump_blend(ctx, "After stroke ", state->dest);
 	if (state->shape)
 		fz_dump_blend(ctx, "/S=", state->shape);
 	if (state->group_alpha)
 		fz_dump_blend(ctx, "/GA=", state->group_alpha);
 	printf("\n");
 #endif
 
 	if (state->blendmode & FZ_BLEND_KNOCKOUT)
 		fz_knockout_end(ctx, dev);
 }
@@ -740,69 +740,69 @@ static void
 fz_draw_clip_path(fz_context *ctx, fz_device *devp, const fz_path *path, int even_odd, fz_matrix in_ctm, fz_rect scissor)
 {
 	fz_draw_device *dev = (fz_draw_device*)devp;
 	fz_matrix ctm = fz_concat(in_ctm, dev->transform);
 	fz_rasterizer *rast = dev->rast;
 
 	float expansion = fz_matrix_expansion(ctm);
 	float flatness;
 	fz_irect bbox;
 	fz_draw_state *state = &dev->stack[dev->top];
 	fz_colorspace *model;
 
 	if (dev->top == 0 && dev->resolve_spots)
 		state = push_group_for_separations(ctx, dev, fz_default_color_params /* FIXME */, dev->default_cs);
 
 	if (expansion < FLT_EPSILON)
 		expansion = 1;
 	flatness = 0.3f / expansion;
 	if (flatness < 0.001f)
 		flatness = 0.001f;
 
 	state = push_stack(ctx, dev, "clip path");
 
 	model = state->dest->colorspace;
 
 	if (!fz_is_infinite_rect(scissor))
 	{
 		bbox = fz_irect_from_rect(fz_transform_rect(scissor, dev->transform));
 		bbox = fz_intersect_irect(bbox, fz_pixmap_bbox(ctx, state->dest));
 		bbox = fz_intersect_irect(bbox, state->scissor);
 	}
 	else
 	{
 		bbox = fz_intersect_irect(fz_pixmap_bbox(ctx, state->dest), state->scissor);
 	}
 
-	if (fz_flatten_fill_path(ctx, rast, path, ctm, flatness, &bbox, &bbox) || fz_is_rect_rasterizer(ctx, rast))
+	if (fz_flatten_fill_path(ctx, rast, path, ctm, flatness, bbox, &bbox) || fz_is_rect_rasterizer(ctx, rast))
 	{
 		state[1].scissor = bbox;
 		state[1].mask = NULL;
 #ifdef DUMP_GROUP_BLENDS
 		dump_spaces(dev->top-1, "Clip (rectangular) begin\n");
 #endif
 		return;
 	}
 
 	state[1].mask = fz_new_pixmap_with_bbox(ctx, NULL, bbox, NULL, 1);
 	fz_clear_pixmap(ctx, state[1].mask);
 	state[1].dest = fz_new_pixmap_with_bbox(ctx, model, bbox, state[0].dest->seps, state[0].dest->alpha);
 	fz_copy_pixmap_rect(ctx, state[1].dest, state[0].dest, bbox, dev->default_cs);
 	if (state[1].shape)
 	{
 		state[1].shape = fz_new_pixmap_with_bbox(ctx, NULL, bbox, NULL, 1);
 		fz_copy_pixmap_rect(ctx, state[1].shape, state[0].shape, bbox, dev->default_cs);
 	}
 	if (state[1].group_alpha)
 	{
 		state[1].group_alpha = fz_new_pixmap_with_bbox(ctx, NULL, bbox, NULL, 1);
 		fz_copy_pixmap_rect(ctx, state[1].group_alpha, state[0].group_alpha, bbox, dev->default_cs);
 	}
 
 	fz_convert_rasterizer(ctx, rast, even_odd, state[1].mask, NULL, 0);
 
 	state[1].scissor = bbox;
 
 #ifdef DUMP_GROUP_BLENDS
 	dump_spaces(dev->top-1, "Clip (non-rectangular) begin\n");
 #endif
 }
@@ -811,84 +811,84 @@ static void
 fz_draw_clip_stroke_path(fz_context *ctx, fz_device *devp, const fz_path *path, const fz_stroke_state *stroke, fz_matrix in_ctm, fz_rect scissor)
 {
 	fz_draw_device *dev = (fz_draw_device*)devp;
 	fz_matrix ctm = fz_concat(in_ctm, dev->transform);
 	fz_rasterizer *rast = dev->rast;
 
 	float expansion = fz_matrix_expansion(ctm);
 	float flatness;
 	float linewidth = stroke->linewidth;
 	fz_irect bbox;
 	fz_draw_state *state = &dev->stack[dev->top];
 	fz_colorspace *model;
 	float aa_level = 2.0f/(fz_rasterizer_graphics_aa_level(rast)+2);
 	float mlw = fz_rasterizer_graphics_min_line_width(rast);
 
 	if (dev->top == 0 && dev->resolve_spots)
 		state = push_group_for_separations(ctx, dev, fz_default_color_params /* FIXME */, dev->default_cs);
 
 	if (mlw > aa_level)
 		aa_level = mlw;
 	if (expansion < FLT_EPSILON)
 		expansion = 1;
 	if (linewidth * expansion < aa_level)
 		linewidth = aa_level / expansion;
 	flatness = 0.3f / expansion;
 	if (flatness < 0.001f)
 		flatness = 0.001f;
 
 	state = push_stack(ctx, dev, "clip stroke");
 
 	model = state->dest->colorspace;
 
 	if (!fz_is_infinite_rect(scissor))
 	{
 		bbox = fz_irect_from_rect(fz_transform_rect(scissor, dev->transform));
 		bbox = fz_intersect_irect(bbox, fz_pixmap_bbox(ctx, state->dest));
 		bbox = fz_intersect_irect(bbox, state->scissor);
 	}
 	else
 	{
 		bbox = fz_intersect_irect(fz_pixmap_bbox(ctx, state->dest), state->scissor);
 	}
 
-	if (fz_flatten_stroke_path(ctx, rast, path, stroke, ctm, flatness, linewidth, &bbox, &bbox))
+	if (fz_flatten_stroke_path(ctx, rast, path, stroke, ctm, flatness, linewidth, bbox, &bbox))
 	{
 		state[1].scissor = bbox;
 		state[1].mask = NULL;
 #ifdef DUMP_GROUP_BLENDS
 		dump_spaces(dev->top-1, "Clip (stroke, empty) begin\n");
 #endif
 		return;
 	}
 
 	state[1].mask = fz_new_pixmap_with_bbox(ctx, NULL, bbox, NULL, 1);
 	fz_clear_pixmap(ctx, state[1].mask);
 	/* When there is no alpha in the current destination (state[0].dest->alpha == 0)
 	 * we have a choice. We can either create the new destination WITH alpha, or
 	 * we can copy the old pixmap contents in. We opt for the latter here, but
 	 * may want to revisit this decision in the future. */
 	state[1].dest = fz_new_pixmap_with_bbox(ctx, model, bbox, state[0].dest->seps, state[0].dest->alpha);
 	if (state[0].dest->alpha)
 		fz_clear_pixmap(ctx, state[1].dest);
 	else
 		fz_copy_pixmap_rect(ctx, state[1].dest, state[0].dest, bbox, dev->default_cs);
 	if (state->shape)
 	{
 		state[1].shape = fz_new_pixmap_with_bbox(ctx, NULL, bbox, NULL, 1);
 		fz_copy_pixmap_rect(ctx, state[1].shape, state[0].shape, bbox, dev->default_cs);
 	}
 	if (state->group_alpha)
 	{
 		state[1].group_alpha = fz_new_pixmap_with_bbox(ctx, NULL, bbox, NULL, 1);
 		fz_copy_pixmap_rect(ctx, state[1].group_alpha, state[0].group_alpha, bbox, dev->default_cs);
 	}
 
 	fz_convert_rasterizer(ctx, rast, 0, state[1].mask, NULL, 0);
 
 	state[1].blendmode |= FZ_BLEND_ISOLATED;
 	state[1].scissor = bbox;
 
 #ifdef DUMP_GROUP_BLENDS
 	dump_spaces(dev->top-1, "Clip (stroke) begin\n");
 #endif
 }
@@ -3078,21 +3078,21 @@ fz_new_draw_device_type3(fz_context *ctx, fz_matrix transform, fz_pixmap *dest)
 }
 
 fz_irect *
-fz_bound_path_accurate(fz_context *ctx, fz_irect *bbox, const fz_irect *scissor, const fz_path *path, const fz_stroke_state *stroke, fz_matrix ctm, float flatness, float linewidth)
+fz_bound_path_accurate(fz_context *ctx, fz_irect *bbox, fz_irect scissor, const fz_path *path, const fz_stroke_state *stroke, fz_matrix ctm, float flatness, float linewidth)
 {
 	fz_rasterizer *rast = fz_new_rasterizer(ctx, NULL);
 
 	fz_try(ctx)
 	{
 		if (stroke)
 			(void)fz_flatten_stroke_path(ctx, rast, path, stroke, ctm, flatness, linewidth, scissor, bbox);
 		else
 			(void)fz_flatten_fill_path(ctx, rast, path, ctm, flatness, scissor, bbox);
 	}
 	fz_always(ctx)
 		fz_drop_rasterizer(ctx, rast);
 	fz_catch(ctx)
 		fz_rethrow(ctx);
 
 	return bbox;
 }
diff --git a/source/fitz/draw-imp.h b/source/fitz/draw-imp.h
index 43b641503..3bb066304 100644
--- a/source/fitz/draw-imp.h
+++ b/source/fitz/draw-imp.h
@@ -421,10 +421,10 @@ typedef enum
 
 fz_rasterizer *fz_new_edgebuffer(fz_context *ctx, fz_edgebuffer_rule rule);
 
-int fz_flatten_fill_path(fz_context *ctx, fz_rasterizer *rast, const fz_path *path, fz_matrix ctm, float flatness, const fz_irect *irect, fz_irect *bounds);
-int fz_flatten_stroke_path(fz_context *ctx, fz_rasterizer *rast, const fz_path *path, const fz_stroke_state *stroke, fz_matrix ctm, float flatness, float linewidth, const fz_irect *irect, fz_irect *bounds);
+int fz_flatten_fill_path(fz_context *ctx, fz_rasterizer *rast, const fz_path *path, fz_matrix ctm, float flatness, fz_irect scissor, fz_irect *bbox);
+int fz_flatten_stroke_path(fz_context *ctx, fz_rasterizer *rast, const fz_path *path, const fz_stroke_state *stroke, fz_matrix ctm, float flatness, float linewidth, fz_irect scissor, fz_irect *bbox);
 
-fz_irect *fz_bound_path_accurate(fz_context *ctx, fz_irect *bbox, const fz_irect *scissor, const fz_path *path, const fz_stroke_state *stroke, fz_matrix ctm, float flatness, float linewidth);
+fz_irect *fz_bound_path_accurate(fz_context *ctx, fz_irect *bbox, fz_irect scissor, const fz_path *path, const fz_stroke_state *stroke, fz_matrix ctm, float flatness, float linewidth);
 
 typedef void (fz_solid_color_painter_t)(unsigned char * FZ_RESTRICT dp, int n, int w, const unsigned char * FZ_RESTRICT color, int da, const fz_overprint * FZ_RESTRICT eop);
 
diff --git a/source/fitz/draw-path.c b/source/fitz/draw-path.c
index 370fe83c1..1780adbb7 100644
--- a/source/fitz/draw-path.c
+++ b/source/fitz/draw-path.c
@@ -263,42 +263,42 @@ static const fz_path_walker flatten_proc =
 };
 
 int
-fz_flatten_fill_path(fz_context *ctx, fz_rasterizer *rast, const fz_path *path, fz_matrix ctm, float flatness, const fz_irect *scissor, fz_irect *bbox)
+fz_flatten_fill_path(fz_context *ctx, fz_rasterizer *rast, const fz_path *path, fz_matrix ctm, float flatness, fz_irect scissor, fz_irect *bbox)
 {
 	flatten_arg arg;
 
-	if (fz_reset_rasterizer(ctx, rast, *scissor))
+	if (fz_reset_rasterizer(ctx, rast, scissor))
 	{
 		arg.rast = rast;
 		arg.ctm = ctm;
 		arg.flatness = flatness;
 		arg.b.x = arg.b.y = arg.c.x = arg.c.y = 0;
 
 		fz_walk_path(ctx, path, &flatten_proc, &arg);
 		if (arg.c.x != arg.b.x || arg.c.y != arg.b.y)
 			line(ctx, rast, ctm, arg.c.x, arg.c.y, arg.b.x, arg.b.y);
 
 		fz_gap_rasterizer(ctx, rast);
 
 		fz_postindex_rasterizer(ctx, rast);
 	}
 
 	arg.rast = rast;
 	arg.ctm = ctm;
 	arg.flatness = flatness;
 	arg.b.x = arg.b.y = arg.c.x = arg.c.y = 0;
 
 	fz_walk_path(ctx, path, &flatten_proc, &arg);
 	if (arg.c.x != arg.b.x || arg.c.y != arg.b.y)
 		line(ctx, rast, ctm, arg.c.x, arg.c.y, arg.b.x, arg.b.y);
 
 	fz_gap_rasterizer(ctx, rast);
 
 	if (!bbox)
 		return 0;
 
 	*bbox = fz_bound_rasterizer(ctx, rast);
-	return fz_is_empty_irect(fz_intersect_irect(*bbox, *scissor));
+	return fz_is_empty_irect(fz_intersect_irect(*bbox, scissor));
 }
 
 enum {
@@ -1416,80 +1416,79 @@ static const fz_path_walker dash_proc =
 };
 
 static int
-do_flatten_stroke(fz_context *ctx, fz_rasterizer *rast, const fz_path *path, const fz_stroke_state *stroke, fz_matrix ctm, float flatness, float linewidth, const fz_irect *scissor, fz_irect *bbox)
+do_flatten_stroke(fz_context *ctx, fz_rasterizer *rast, const fz_path *path, const fz_stroke_state *stroke, fz_matrix ctm, float flatness, float linewidth, fz_irect *bbox)
 {
 	struct sctx s;
 	const fz_path_walker *proc = &stroke_proc;
 
 	s.stroke = stroke;
 	s.rast = rast;
 	s.ctm = ctm;
 	s.flatness = flatness;
 	s.linejoin = stroke->linejoin;
 	s.linewidth = linewidth * 0.5f; /* hairlines use a different value from the path value */
 	s.miterlimit = stroke->miterlimit;
 	s.sn = 0;
 	s.dot = ONLY_MOVES;
 	s.toggle = 0;
 	s.offset = 0;
 	s.phase = 0;
 
 	s.cap = stroke->start_cap;
 
 	s.dash_list = NULL;
 	s.dash_len = stroke->dash_len;
 	if (s.dash_len > 0)
 	{
 		int i;
 		fz_matrix inv;
 		float max_expand;
 		const float *list = stroke->dash_list;
 
 		s.dash_total = 0;
 		for (i = 0; i < s.dash_len; i++)
 			s.dash_total += list[i];
 		if (s.dash_total == 0)
 			return 1;
 
 		s.rect = fz_scissor_rasterizer(ctx, rast);
 		if (fz_try_invert_matrix(&inv, ctm))
 			return 1;
 		s.rect = fz_transform_rect(s.rect, inv);
 		s.rect.x0 -= linewidth;
 		s.rect.x1 += linewidth;
 		s.rect.y0 -= linewidth;
 		s.rect.y1 += linewidth;
 
 		max_expand = fz_matrix_max_expansion(ctm);
 		if (s.dash_total >= 0.01f && s.dash_total * max_expand >= 0.5f)
 		{
 			proc = &dash_proc;
 			s.dash_phase = fmodf(stroke->dash_phase, s.dash_total);
 			s.dash_list = list;
 		}
 	}
 
 	s.cur.x = s.cur.y = 0;
 	fz_walk_path(ctx, path, proc, &s);
 	fz_stroke_flush(ctx, &s, s.cap, stroke->end_cap);
 
 	if (!bbox)
 		return 0;
 
 	*bbox = fz_bound_rasterizer(ctx, rast);
 	return fz_is_empty_irect(*bbox);
 }
 
 int
-fz_flatten_stroke_path(fz_context *ctx, fz_rasterizer *rast, const fz_path *path, const fz_stroke_state *stroke, fz_matrix ctm, float flatness, float linewidth, const fz_irect *scissor, fz_irect *bbox)
+fz_flatten_stroke_path(fz_context *ctx, fz_rasterizer *rast, const fz_path *path, const fz_stroke_state *stroke, fz_matrix ctm, float flatness, float linewidth, fz_irect scissor, fz_irect *bbox)
 {
-	if (fz_reset_rasterizer(ctx, rast, *scissor))
+	if (fz_reset_rasterizer(ctx, rast, scissor))
 	{
-		if (do_flatten_stroke(ctx, rast, path, stroke, ctm, flatness, linewidth, scissor, bbox))
-			return 1;
+		if (do_flatten_stroke(ctx, rast, path, stroke, ctm, flatness, linewidth, bbox))
+			return 1; /* empty path, exit early */
 		fz_postindex_rasterizer(ctx, rast);
-		bbox = NULL;
 	}
 
-	return do_flatten_stroke(ctx, rast, path, stroke, ctm, flatness, linewidth, scissor, bbox);
+	return do_flatten_stroke(ctx, rast, path, stroke, ctm, flatness, linewidth, bbox);
 }
diff --git a/source/fitz/draw-rasterize.c b/source/fitz/draw-rasterize.c
index 4174e36d2..3803385b2 100644
--- a/source/fitz/draw-rasterize.c
+++ b/source/fitz/draw-rasterize.c
@@ -219,23 +219,24 @@ static fz_irect fz_clip_rasterizer(fz_context *ctx, const fz_rasterizer *rast)
 int fz_reset_rasterizer(fz_context *ctx, fz_rasterizer *rast, fz_irect clip)
 {
 	const int hscale = fz_rasterizer_aa_hscale(rast);
 	const int vscale = fz_rasterizer_aa_vscale(rast);
 
 	if (fz_is_infinite_irect(clip))
 	{
 		rast->clip.x0 = rast->clip.y0 = BBOX_MIN;
 		rast->clip.x1 = rast->clip.y1 = BBOX_MAX;
 	}
 	else {
 		rast->clip.x0 = clip.x0 * hscale;
 		rast->clip.x1 = clip.x1 * hscale;
 		rast->clip.y0 = clip.y0 * vscale;
 		rast->clip.y1 = clip.y1 * vscale;
 	}
 
 	rast->bbox.x0 = rast->bbox.y0 = BBOX_MAX;
 	rast->bbox.x1 = rast->bbox.y1 = BBOX_MIN;
+
 	if (rast->fns.reset)
 		return rast->fns.reset(ctx, rast);
 	return 0;
 }
