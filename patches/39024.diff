commit 07527e688cfa41fa9406a1271052de3cd677069a
Author: Eric Blankenhorn <eric@wolfssl.com>
Date:   Sun Oct 3 14:05:14 2021 -0500

    Fix v5 prop handling

diff --git a/examples/mqttexample.h b/examples/mqttexample.h
index e315d23..2783831 100644
--- a/examples/mqttexample.h
+++ b/examples/mqttexample.h
@@ -1,81 +1,91 @@
 /* mqttexample.h
  *
  * Copyright (C) 2006-2021 wolfSSL Inc.
  *
  * This file is part of wolfMQTT.
  *
  * wolfMQTT is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
  *
  * wolfMQTT is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  */
 
 #ifndef WOLFMQTT_EXAMPLE_H
 #define WOLFMQTT_EXAMPLE_H
 
 #ifdef __cplusplus
     extern "C" {
 #endif
 
 /* Compatibility Options */
 #ifdef NO_EXIT
 	#undef exit
 	#define exit(rc) return rc
 #endif
 
 #ifndef MY_EX_USAGE
 #define MY_EX_USAGE 2 /* Exit reason code */
 #endif
 
 /* STDIN / FGETS for examples */
 #ifndef WOLFMQTT_NO_STDIO
     /* For Linux/Mac */
     #if !defined(FREERTOS) && !defined(USE_WINDOWS_API) && \
         !defined(FREESCALE_MQX) && !defined(FREESCALE_KSDK_MQX) && \
         !defined(MICROCHIP_MPLAB_HARMONY)
         /* Make sure its not explicitly disabled and not already defined */
         #if !defined(WOLFMQTT_NO_STDIN_CAP) && \
             !defined(WOLFMQTT_ENABLE_STDIN_CAP)
             /* Wake on stdin activity */
             #define WOLFMQTT_ENABLE_STDIN_CAP
         #endif
     #endif
 
     #ifdef WOLFMQTT_ENABLE_STDIN_CAP
         #ifndef XFGETS
             #define XFGETS     fgets
         #endif
         #ifndef STDIN
             #define STDIN 0
         #endif
     #endif
 #endif /* !WOLFMQTT_NO_STDIO */
 
 
 /* Default Configurations */
+
+#ifndef DEFAULT_MQTT_HOST
+    /* Default MQTT host broker to use,
+     * when none is specified in the examples */
+    #define DEFAULT_MQTT_HOST   "test.mosquitto.org"
+    /* "iot.eclipse.org" */
+    /* "broker.emqx.io" */
+    /* "broker.hivemq.com" */
+#endif
+
 #define DEFAULT_CMD_TIMEOUT_MS  30000
 #define DEFAULT_CON_TIMEOUT_MS  5000
 #define DEFAULT_MQTT_QOS        MQTT_QOS_0
 #define DEFAULT_KEEP_ALIVE_SEC  60
 #define DEFAULT_CLIENT_ID       "WolfMQTTClient"
 #define WOLFMQTT_TOPIC_NAME     "wolfMQTT/example/"
 #define DEFAULT_TOPIC_NAME      WOLFMQTT_TOPIC_NAME"testTopic"
 #define DEFAULT_AUTH_METHOD    "EXTERNAL"
 #define PRINT_BUFFER_SIZE       80
 #define DEFAULT_MESSAGE         "test"
 
 #ifdef WOLFMQTT_V5
 #define DEFAULT_MAX_PKT_SZ      1024*1024 /* The max MQTT control packet size
                                              the client is willing to accept. */
 #endif
 
 /* MQTT Client state */
diff --git a/examples/mqttnet.h b/examples/mqttnet.h
index 383370b..c796db1 100644
--- a/examples/mqttnet.h
+++ b/examples/mqttnet.h
@@ -1,38 +1,33 @@
 /* mqttnet.h
  *
  * Copyright (C) 2006-2021 wolfSSL Inc.
  *
  * This file is part of wolfMQTT.
  *
  * wolfMQTT is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
  *
  * wolfMQTT is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  */
 
 #ifndef WOLFMQTT_NET_H
 #define WOLFMQTT_NET_H
 
 #ifdef __cplusplus
     extern "C" {
 #endif
 
 #include "examples/mqttexample.h"
 
-/* Default MQTT host broker to use, when none is specified in the examples */
-#ifndef DEFAULT_MQTT_HOST
-#define DEFAULT_MQTT_HOST       "test.mosquitto.org" /* broker.hivemq.com */
-#endif
-
 /* Functions used to handle the MqttNet structure creation / destruction */
 int MqttClientNet_Init(MqttNet* net, MQTTCtx* mqttCtx);
 int MqttClientNet_DeInit(MqttNet* net);
diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index 224eba9..1f7061e 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -318,219 +318,225 @@ static int Handle_Props(MqttClient* client, MqttProp* props)
  *  \return     Returns length decoded or error (as negative) MQTT_CODE_ERROR_*
                 (see enum MqttPacketResponseCodes)
  */
 static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
     word32 rx_len, void *packet_obj, MqttPacketType* ppacket_type,
     MqttQoS* ppacket_qos, word16* ppacket_id)
 {
     int rc = MQTT_CODE_SUCCESS;
     MqttPacket* header;
     MqttPacketType packet_type;
     MqttQoS packet_qos;
     word16 packet_id = 0;
 
     /* must have rx buffer with at least 2 byes for header */
     if (rx_buf == NULL || rx_len < MQTT_PACKET_HEADER_MIN_SIZE) {
         return MQTT_CODE_ERROR_BAD_ARG;
     }
 
     /* Decode header */
     header = (MqttPacket*)rx_buf;
     packet_type = (MqttPacketType)MQTT_PACKET_TYPE_GET(header->type_flags);
     if (ppacket_type) {
         *ppacket_type = packet_type;
     }
     packet_qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
     if (ppacket_qos) {
         *ppacket_qos = packet_qos;
     }
 
     /* Decode packet specific data (if requested) */
     if (ppacket_id || packet_obj) {
         switch (packet_type) {
         case MQTT_PACKET_TYPE_CONNECT_ACK:
         {
             MqttConnectAck connect_ack, *p_connect_ack = &connect_ack;
             if (packet_obj) {
                 p_connect_ack = (MqttConnectAck*)packet_obj;
             }
             else {
                 XMEMSET(p_connect_ack, 0, sizeof(MqttConnectAck));
             }
         #ifdef WOLFMQTT_V5
             p_connect_ack->protocol_level = client->protocol_level;
         #endif
             rc = MqttDecode_ConnectAck(rx_buf, rx_len, p_connect_ack);
         #ifdef WOLFMQTT_V5
             if (rc >= 0) {
-                rc = Handle_Props(client, p_connect_ack->props);
+                int tmp = Handle_Props(client, p_connect_ack->props);
+                if (tmp != MQTT_CODE_SUCCESS) {
+                    rc = tmp;
+                }
             }
         #endif
             break;
         }
         case MQTT_PACKET_TYPE_PUBLISH:
         {
             MqttPublish publish, *p_publish = &publish;
             if (packet_obj) {
                 p_publish = (MqttPublish*)packet_obj;
             }
             else {
                 XMEMSET(p_publish, 0, sizeof(MqttPublish));
             }
         #ifdef WOLFMQTT_V5
             p_publish->protocol_level = client->protocol_level;
         #endif
             rc = MqttDecode_Publish(rx_buf, rx_len, p_publish);
             if (rc >= 0) {
                 packet_id = p_publish->packet_id;
             #ifdef WOLFMQTT_V5
-                rc = Handle_Props(client, p_publish->props);
+                int tmp = Handle_Props(client, p_publish->props);
+                if (tmp != MQTT_CODE_SUCCESS) {
+                    rc = tmp;
+                }
             #endif
             }
             break;
         }
         case MQTT_PACKET_TYPE_PUBLISH_ACK:
         case MQTT_PACKET_TYPE_PUBLISH_REC:
         case MQTT_PACKET_TYPE_PUBLISH_REL:
         case MQTT_PACKET_TYPE_PUBLISH_COMP:
         {
             MqttPublishResp publish_resp, *p_publish_resp = &publish_resp;
             if (packet_obj) {
                 p_publish_resp = (MqttPublishResp*)packet_obj;
             }
             else {
                 XMEMSET(p_publish_resp, 0, sizeof(MqttPublishResp));
             }
         #ifdef WOLFMQTT_V5
                 p_publish_resp->protocol_level = client->protocol_level;
         #endif
                 rc = MqttDecode_PublishResp(rx_buf, rx_len, packet_type,
                 p_publish_resp);
             if (rc >= 0) {
                 packet_id = p_publish_resp->packet_id;
             #ifdef WOLFMQTT_V5
                 rc = Handle_Props(client, p_publish_resp->props);
             #endif
             }
             break;
         }
         case MQTT_PACKET_TYPE_SUBSCRIBE_ACK:
         {
             MqttSubscribeAck subscribe_ack, *p_subscribe_ack = &subscribe_ack;
             if (packet_obj) {
                 p_subscribe_ack = (MqttSubscribeAck*)packet_obj;
             }
             else {
                 XMEMSET(p_subscribe_ack, 0, sizeof(MqttSubscribeAck));
             }
         #ifdef WOLFMQTT_V5
             p_subscribe_ack->protocol_level = client->protocol_level;
         #endif
             rc = MqttDecode_SubscribeAck(rx_buf, rx_len, p_subscribe_ack);
             if (rc >= 0) {
                 packet_id = p_subscribe_ack->packet_id;
             #ifdef WOLFMQTT_V5
                 rc = Handle_Props(client, p_subscribe_ack->props);
             #endif
             }
             break;
         }
         case MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK:
         {
             MqttUnsubscribeAck unsubscribe_ack,
                                *p_unsubscribe_ack = &unsubscribe_ack;
             if (packet_obj) {
                 p_unsubscribe_ack = (MqttUnsubscribeAck*)packet_obj;
             }
             else {
                 XMEMSET(p_unsubscribe_ack, 0, sizeof(MqttUnsubscribeAck));
             }
         #ifdef WOLFMQTT_V5
             p_unsubscribe_ack->protocol_level = client->protocol_level;
         #endif
             rc = MqttDecode_UnsubscribeAck(rx_buf, rx_len, p_unsubscribe_ack);
             if (rc >= 0) {
                 packet_id = p_unsubscribe_ack->packet_id;
             #ifdef WOLFMQTT_V5
                 rc = Handle_Props(client, p_unsubscribe_ack->props);
             #endif
             }
             break;
         }
         case MQTT_PACKET_TYPE_PING_RESP:
         {
             MqttPing ping, *p_ping = &ping;
             if (packet_obj) {
                 p_ping = (MqttPing*)packet_obj;
             }
             else {
                 XMEMSET(p_ping, 0, sizeof(MqttPing));
             }
             rc = MqttDecode_Ping(rx_buf, rx_len, p_ping);
             break;
         }
         case MQTT_PACKET_TYPE_AUTH:
         {
         #ifdef WOLFMQTT_V5
             MqttAuth auth, *p_auth = &auth;
             if (packet_obj) {
                 p_auth = (MqttAuth*)packet_obj;
             }
             else {
                 XMEMSET(p_auth, 0, sizeof(MqttAuth));
             }
             rc = MqttDecode_Auth(rx_buf, rx_len, p_auth);
             if (rc >= 0) {
                 rc = Handle_Props(client, p_auth->props);
             }
         #else
             rc = MQTT_CODE_ERROR_PACKET_TYPE;
         #endif /* WOLFMQTT_V5 */
             break;
         }
         case MQTT_PACKET_TYPE_DISCONNECT:
         {
         #ifdef WOLFMQTT_V5
             MqttDisconnect disc, *p_disc = &disc;
             if (packet_obj) {
                 p_disc = (MqttDisconnect*)packet_obj;
             }
             else {
                 XMEMSET(p_disc, 0, sizeof(MqttDisconnect));
             }
             rc = MqttDecode_Disconnect(rx_buf, rx_len, p_disc);
             if (rc >= 0) {
                 rc = Handle_Props(client, p_disc->props);
             }
         #else
             rc = MQTT_CODE_ERROR_PACKET_TYPE;
         #endif /* WOLFMQTT_V5 */
             break;
         }
         case MQTT_PACKET_TYPE_CONNECT:
         case MQTT_PACKET_TYPE_SUBSCRIBE:
         case MQTT_PACKET_TYPE_UNSUBSCRIBE:
         case MQTT_PACKET_TYPE_PING_REQ:
         case MQTT_PACKET_TYPE_ANY:
         case MQTT_PACKET_TYPE_RESERVED:
         default:
             /* these type are only encoded by client */
             rc = MQTT_CODE_ERROR_PACKET_TYPE;
             break;
         } /* switch (packet_type) */
     }
 
     if (ppacket_id) {
         *ppacket_id = packet_id;
     }
 
     (void)client;
 
 #ifdef WOLFMQTT_DEBUG_CLIENT
     PRINTF("MqttClient_DecodePacket: Rc %d, Len %d, Type %s (%d), ID %d,"
             " QoS %d",
         rc, rx_len, MqttPacket_TypeDesc(packet_type), packet_type, packet_id,
         packet_qos);
 #endif
 
     return rc;
 }
diff --git a/src/mqtt_packet.c b/src/mqtt_packet.c
index d345178..bc2ede2 100755
--- a/src/mqtt_packet.c
+++ b/src/mqtt_packet.c
@@ -266,12 +266,12 @@ int MqttEncode_Vbi(byte *buf, word32 x)
 /* Returns number of buffer bytes decoded */
 int MqttDecode_Num(byte* buf, word16 *len)
 {
     if (len) {
-        *len = buf[0];
-        *len = (*len << 8) | buf[1];
+        *len =  (word32)buf[0] << 8;
+        *len += buf[1];
     }
     return MQTT_DATA_LEN_SIZE;
 }
 
 /* Returns number of buffer bytes encoded
    If buf is NULL, return number of bytes that would be encoded. */
@@ -287,14 +287,14 @@ int MqttEncode_Num(byte *buf, word16 len)
 /* Returns number of buffer bytes decoded */
 int MqttDecode_Int(byte* buf, word32* len)
 {
     if (len) {
-        *len = buf[0];
-        *len = (*len <<  8) | buf[1];
-        *len = (*len << 16) | buf[2];
-        *len = (*len << 24) | buf[3];
+        *len =  (word32)buf[0] << 24;
+        *len += (word32)buf[1] << 16;
+        *len += (word32)buf[2] << 8;
+        *len += buf[3];
     }
     return MQTT_DATA_INT_SIZE;
 }
 
 /* Returns number of buffer bytes encoded
    If buf is NULL, return number of bytes that would be encoded. */
@@ -475,135 +475,159 @@ int MqttEncode_Props(MqttPacketType packet, MqttProp* props, byte* buf)
 /* Returns the (positive) number of bytes decoded, or a (negative) error code.
    Allocates MqttProp structures for all properties.
    Head of list is stored in props. */
 int MqttDecode_Props(MqttPacketType packet, MqttProp** props, byte* pbuf,
         word32 buf_len, word32 prop_len)
 {
     /* TODO: Validate property type is allowed for packet type */
 
     int rc = 0;
     int tmp;
     MqttProp* cur_prop;
     byte* buf = pbuf;
 
     *props = NULL;
 
-    while (prop_len > 0)
+    while ((prop_len > 0) && (rc >= 0))
     {
         /* Allocate a structure and add to head. */
         cur_prop = MqttProps_Add(props);
         if (cur_prop == NULL)
             return MQTT_CODE_ERROR_MEMORY;
 
         /* Decode the Identifier */
         tmp = MqttDecode_Vbi(buf, (word32*)&cur_prop->type,
                 (word32)(buf_len - (buf - pbuf)));
         if (tmp < 0) {
             return tmp;
         }
         buf += tmp;
         rc += (int)tmp;
         prop_len -= tmp;
 
         /* TODO: validate packet type */
         (void)packet;
 
         if (cur_prop->type >= sizeof(gPropMatrix) / sizeof(gPropMatrix[0])) {
-            return MQTT_CODE_ERROR_PROPERTY;
+            rc = MQTT_CODE_ERROR_PROPERTY;
+            break;
         }
 
         switch (gPropMatrix[cur_prop->type].data)
         {
             case MQTT_DATA_TYPE_BYTE:
             {
                 cur_prop->data_byte = *buf++;
                 tmp++;
                 rc++;
                 prop_len--;
                 break;
             }
             case MQTT_DATA_TYPE_SHORT:
             {
                 tmp = MqttDecode_Num(buf, &cur_prop->data_short);
                 buf += tmp;
                 rc += (int)tmp;
                 prop_len -= tmp;
                 break;
             }
             case MQTT_DATA_TYPE_INT:
             {
                 tmp = MqttDecode_Int(buf, &cur_prop->data_int);
                 buf += tmp;
                 rc += (int)tmp;
                 prop_len -= tmp;
                 break;
             }
             case MQTT_DATA_TYPE_STRING:
             {
                 tmp = MqttDecode_String(buf,
                         (const char**)&cur_prop->data_str.str,
                         &cur_prop->data_str.len);
-                buf += tmp;
-                rc += (int)tmp;
-                prop_len -= tmp;
+                if (cur_prop->data_str.len <= (buf_len - (buf - pbuf))) {
+                    buf += tmp;
+                    rc += (int)tmp;
+                    prop_len -= tmp;
+                }
+                else {
+                    /* Invalid length */
+                    rc = MQTT_CODE_ERROR_PROPERTY;
+                }
                 break;
             }
             case MQTT_DATA_TYPE_VAR_INT:
             {
                 tmp = MqttDecode_Vbi(buf, &cur_prop->data_int,
                         (word32)(buf_len -(buf - pbuf)));
                 if (tmp < 0) {
                     return tmp;
                 }
                 buf += tmp;
                 rc += (int)tmp;
                 prop_len -= tmp;
                 break;
             }
             case MQTT_DATA_TYPE_BINARY:
             {
                 /* Binary type is a two byte integer "length"
                    followed by that number of bytes */
                 tmp = MqttDecode_Num(buf, &cur_prop->data_bin.len);
                 buf += tmp;
                 rc += (int)tmp;
                 prop_len -= tmp;
 
-                cur_prop->data_bin.data = buf;
-                buf += cur_prop->data_bin.len;
-                rc += (int)cur_prop->data_bin.len;
-                prop_len -= cur_prop->data_bin.len;
+                if (cur_prop->data_bin.len <= (buf_len - (buf - pbuf))) {
+                    cur_prop->data_bin.data = buf;
+                    buf += cur_prop->data_bin.len;
+                    rc += (int)cur_prop->data_bin.len;
+                    prop_len -= cur_prop->data_bin.len;
+                }
+                else {
+                    /* Invalid length */
+                    rc = MQTT_CODE_ERROR_PROPERTY;
+                }
                 break;
             }
             case MQTT_DATA_TYPE_STRING_PAIR:
             {
                 /* String is prefixed with a Two Byte Integer length
                    field that gives the number of bytes */
                 tmp = MqttDecode_String(buf,
                         (const char**)&cur_prop->data_str.str,
                         &cur_prop->data_str.len);
                 buf += tmp;
                 rc += (int)tmp;
                 prop_len -= tmp;
 
-                tmp = MqttDecode_String(buf,
-                        (const char**)&cur_prop->data_str2.str,
-                        &cur_prop->data_str2.len);
-                buf += tmp;
-                rc += (int)tmp;
-                prop_len -= tmp;
+                if (cur_prop->data_str.len <= (buf_len - (buf - pbuf))) {
+                    tmp = MqttDecode_String(buf,
+                            (const char**)&cur_prop->data_str2.str,
+                            &cur_prop->data_str2.len);
+                    buf += tmp;
+                    rc += (int)tmp;
+                    prop_len -= tmp;
+                }
+                else {
+                    /* Invalid length */
+                    rc = MQTT_CODE_ERROR_PROPERTY;
+                }
                 break;
             }
             case MQTT_DATA_TYPE_NONE:
             default:
             {
                 /* Do nothing */
                 break;
             }
         }
     };
 
+    if (rc < 0) {
+        /* Free the properties */
+        MqttProps_Free(*props);
+    }
+
     return rc;
 }
 #endif
 
 /* Packet Type Encoders/Decoders */
