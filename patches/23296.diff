commit d0c4e7802dae311d71059d0e2114150a5e09acf1
Author: Alan Modra <amodra@gmail.com>
Date:   Thu Jun 11 13:27:50 2020 +0930

    asan: readelf: process_mips_specific buffer overflow
    
    DT_MIPS_OPTIONS is not a regular array as assumed by readelf.  This
    patch corrects that assumption, and to do so easily, makes various
    internal (host byte order) structs the same size as external (target
    byte order) structs.
    
    include/
            * elf/mips.h (Elf32_RegInfo): Use fixed width integer types.
            (Elf64_Internal_RegInfo, Elf_Internal_Options): Likewise.
    binutils/
            * readelf.c (process_mips_specific): Assert size of internal
            types match size of external types, and simplify allocation of
            internal buffer.  Catch possible integer overflow when sanity
            checking option size.  Don't assume options are a regular array.
            Sanity check reginfo option against option size.  Use PRI macros
            when printing.

diff --git a/binutils/ChangeLog b/binutils/ChangeLog
index 43eabaa0441..25e21ff6dca 100644
--- a/binutils/ChangeLog
+++ b/binutils/ChangeLog
@@ -1,940 +1,949 @@
+2020-06-11  Alan Modra  <amodra@gmail.com>
+
+	* readelf.c (process_mips_specific): Assert size of internal
+	types match size of external types, and simplify allocation of
+	internal buffer.  Catch possible integer overflow when sanity
+	checking option size.  Don't assume options are a regular array.
+	Sanity check reginfo option against option size.  Use PRI macros
+	when printing.
+
 2020-06-10  Ralf Habacker  <ralf.habacker@freenet.de>
 
 	PR 26082
 	* mclex.c (yylex): Reject lines that reach end-of-file without a
 	terminating newline character.
 
 2020-06-08  Nick Clifton  <nickc@redhat.com>
 
 	PR 26093
 	* doc/binutils.texi (strings): Fix typo.
 
 2020-06-08  Nick Clifton  <nickc@redhat.com>
 
 	PR 26086
 	* dwarf.c (process_debug_info): Check that there is space in the
 	debug_information array before filling in an entry.
 
 2020-06-06  Alan Modra  <amodra@gmail.com>
 
 	* doc/binutils.texi (PowerPC -M option): Mention power10 and pwr10.
 
 2020-06-05  Joel Anderson  <joelanderson333@gmail.com>
 
 	PR 26082
 	* mclex.c (yylex): Add test for an empty input stream.
 
 2020-06-04  Stephen Casner  <casner@acm.org>
 
 	* testsuite/binutils-all/pr25662-pdp11.s: Alternate source file
 	for test using section pseudo-ops compatible with pdp11.
 	* testsuite/binutils-all/objcopy.exp: Select alternate source.
 
 2020-06-04  Jose E. Marchesi  <jose.marchesi@oracle.com>
 
 	* objdump.c (disassemble_data): Set disasm_info.endian_code to
 	disasm_info.endian after the latter is initialized to the
 	endianness reported by BFD.
 
 2020-06-04  Alan Modra  <amodra@gmail.com>
 
 	* testsuite/binutils-all/i386/i386.exp: Remove global directive
 	outside proc body.
 	* testsuite/binutils-all/x86-64/objects.exp: Likewise.
 	* testsuite/binutils-all/x86-64/x86-64.exp: Likewise.
 
 2020-06-03  Joel Anderson  <joelanderson333@gmail.com>
 
 	* windmc.h (struct mc_node): Add id_typecast field.
 	* mcparse.y (message): Initialise the id_typecast field.
 	* windmc.c (write_dbg): Use the id_typecast field as a parameter
 	when calling write_dbg_define.
 	(write_header): Likewise.
 
 2020-06-03  Alan Modra  <amodra@gmail.com>
 
 	PR 26069
 	* objcopy.c (copy_relocations_in_section): Free relpp on error.
 	Don't accidentally free isection->orelocation.
 
 2020-06-02  Alan Modra  <amodra@gmail.com>
 
 	* testsuite/binutils-all/ar.exp (obj): Set up object file name
 	extension.  Use throughout.  Don't completely exclude non-ELF
 	alpha targets.  Run long_filenames test for tic30.  Exclude thin
 	archive tests for aix, ecoff and vms.
 	* estsuite/binutils-all/objdump.exp (obj): Set up object file name
 	extension.  Use throughout.  Don't exclude non-ELF alpha targets
 	from "bintest.a".
 
 2020-05-28  Max Filippov  <jcmvbkbc@gmail.com>
 
 	* MAINTAINERS (Xtensa): Add myself as maintainer.
 
 2020-05-23  Alan Modra  <amodra@gmail.com>
 
 	* testsuite/binutils-all/ar.exp (many_files): New test.
 
 2020-05-21  Alan Modra  <amodra@gmail.com>
 
 	* addr2line.c: Replace "if (x) free (x)" with "free (x)" throughout.
 	* dlltool.c: Likewise.
 	* elfcomm.c: Likewise.
 	* rddbg.c: Likewise.
 	* readelf.c: Likewise.
 	* stabs.c: Likewise.
 	* windmc.c: Likewise.
 	* windres.c: Likewise.
 	* wrstabs.c: Likewise.
 
 2020-05-21  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (get_num_dynamic_syms): Bounds check mipsxlat array
 	access.
 
 2020-05-20  Nelson Chu  <nelson.chu@sifive.com>
 
 	* dwarf.c: Updated since DECLARE_CSR is changed.
 
 2020-05-19  H.J. Lu  <hjl.tools@gmail.com>
 
 	PR binutils/25809
 	* readelf.c (process_program_headers): Warn if the PT_DYNAMIC
 	segment doesn't match the .dynamic section and checks are
 	enabled.
 	(struct filedata): Add dynamic_symtab_section and
 	dynamic_strtab_section fields.
 	(process_section_headers): Set dynamic_symtab_section to the
 	.dynsym section.  Set dynamic_strtab_section to the .dynstr
 	section.
 	(process_dynamic_section): Warn if the .dynsym section doesn't
 	match DT_SYMTAB and DT_SYMENT or the .dynstr section doesn't
 	DT_STRTAB and DT_STRSZ.  But only if checks are enabled.
 
 2020-05-19  Alan Modra  <amodra@gmail.com>
 
 	* ar.c (map_over_members, get_pos_bfd, delete_members, move_members),
 	(replace_members): Use bfd_get_filename rather than accessing
 	bfd->filename directly.
 	* arsup.c (map_over_list, ar_delete, ar_replace, ar_extract): Likewise.
 	* binemul.c (do_ar_emul_append): Likewise.
 	* coffgrok.c (coff_grok): Likewise.
 
 2020-05-18  Stafford Horne  <shorne@gmail.com>
 
 	* MAINTAINERS (OR1K): Add myself as maintainer.
 
 2020-05-07  Andrew Burgess  <andrew.burgess@embecosm.com>
 
 	* doc/binutils.texi: Mention 'entry address' in the set-start and
 	adjust-start options descriptions.
 
 2020-05-05  Nick Clifton  <nickc@redhat.com>
 
 	* dwarf.c (do_checks): New global variable.
 	(display_formatted_table): Warn about an unexpected number of
 	columns in the table, if checks are enabled.  Do not complain
 	about the lack of data following the number of entries in the
 	table if the table is empty.
 	(display_debug_lines_decoded): Only warn about an unexpected
 	number of columns in a table if checks are enabled.
 	* dwarf.h (do_checks): Add a prototype.
 	* elfcomm.c (error): Remove weak attribute.
 	(warn): Likewise.
 	* readelf.c (do_checks): Delete.
 	(warn): Delete.
 	(process_section_headers): Only warn about empty sections if
 	checks are enabled.
 
 2020-05-04  Fangrui Song   <maskray@google.com>
 
 	* objcopy.c (copy_object): Allow empty section.
 	* testsuite/binutils-all/update-section.exp: Add test.
 
 2020-05-04  Nick Clifton  <nickc@redhat.com>
 
 	PR 25917
 	* dwarf.c (display_debug_lines_decoded): Warn if encountering a
 	supicious number of entries for DWARF-5 format directory and file
 	name tables.  Do not display file name table header if the table
 	is empty.  Do not allocate space for empty tables.
 
 2020-05-04  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (process_nds32_specific): Check size of .nds32_e_flags
 	section.  Don't assume endian of host matches nds32 target.  Free
 	buffer.
 
 2020-05-01  Alan Modra  <amodra@gmail.com>
 	    Haim Shimonovich  <Haim.Shimonovich@ceva-dsp.com>
 
 	* objdump.c (disassemble_bytes): Don't scan for zeros when
 	disassembling zeros.  Translate "resuming at file offset" message.
 	Formatting.  Replace some signed variables with unsigned.
 
 2020-04-30  Alex Coplan  <alex.coplan@arm.com>
 
 	* testsuite/binutils-all/aarch64/in-order-all.d: Update to use new
 	disassembly.
 	* testsuite/binutils-all/aarch64/out-of-order-all.d: Likewise.
 
 2020-04-30  Nick Clifton  <nickc@redhat.com>
 
 	* testsuite/lib/binutils-common.exp (check_pie_support): New
 	proc.
 
 2020-04-29  Andrew Burgess  <andrew.burgess@embecosm.com>
 
 	* dwarf.c (display_debug_ranges): Ignore duplicate entries in
 	range_entries for the same offset.
 
 2020-04-29  Nick Clifton  <nickc@redhat.com>
 
 	* readelf.c (warn): New function - like elfcomm.c version but only
 	produces output if warnings are enabled.
 	(struct options): Add --lint and --enable-checks.
 	(usage): Add entry for --lint.
 	(parse_args): Handle -L.  If checks are enabled but no dumps have
 	been selected then enable all dumps.
 	(process_section_headers): Replace long if-then-else sequence with
 	a switch.  Add warning messages for empty SHT_REL, SHT_RELA and
 	SHT_PROGBITS sections.
 	(process_file): Do not complain if the file is an archive and lint
 	mode has been enabled.
 	* elfcomm.c (error): Make the function weak.
 	(warn): Likewise.
 	* NEWS: Mention the new feature.
 	* doc/binutils.texi: Document the new feature.
 	* dwarf.h (report_leb_status): Add file name and line number
 	parameters.  Include them in the diagnostic output.
 	(READ_ULEB): Pass file and line number to report_leb_status.
 	(READ_SLEB): Likewise.
 	* dwarf.c (read_and_print_leb128): Pass file and line number to
 	report_leb_status.
 	* testsuite/binutils-all/readelf.exp: Add test of new feature.
 	* testsuite/binutils-all/zero-sec.s: New test source file.
 	* testsuite/binutils-all/zero-sec.r: Expected output from new
 	test.
 
 2020-04-29  Nick Clifton  <nickc@redhat.com>
 
 	* po/sr.po: Updated Serbian translation.
 
 2020-04-26  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (get_num_dynamic_syms): Check DT_MIPS_XHASH was
 	read before dereferencing, and gracefully return.  Remove
 	gnu_hash_error variable.  Free gnu hash arrays if number of
 	syms found is zero.
 
 2020-04-24  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (get_num_dynamic_syms): Check for nbuckets and nchains
 	non-zero.
 	(process_dynamic_section): Call get_num_dynamic_syms once rather
 	than in segment loop.  Break out of segment loop on a successful
 	load of dynamic symbols.  Formatting.
 	(process_object): Return error status from process_dynamic_section.
 
 2020-04-23  Anton Kolesov  <anton.kolesov@synopsys.com>
 
 	* elf-bfd.h (elfcore_write_arc_v2): Add prototype.
 	* elf.c (elfcore_grok_arc_v2): New function.
 	(elfcore_grok_note): Call the new function to handle the corresponding
 	note.
 	(elfcore_write_arc_v2): New function.
 	(elfcore_write_register_note): Call the new function to handle the
 	corresponding pseudo-sections.
 
 2020-04-22  Max Filippov  <jcmvbkbc@gmail.com>
 
 	PR ld/25861
 	* readelf.c (is_none_reloc): Recognize
 	BFD_RELOC_XTENSA_PDIFF{8,16,32} and
 	BFD_RELOC_XTENSA_NDIFF{8,16,32}.
 
 2020-04-22  Nick Clifton  <nickc@redhat.com>
 
 	* MAINTAINERS: Remove Chris Faylor as the ix86 PE maintainer.
 
 2020-04-22  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (archive_file_offset, archive_file_size, dynamic_addr),
 	(dynamic_size, dynamic_nent, dynamic_strings, dynamic_strings_length),
 	(num_dynamic_syms, nbuckets, nchains, buckets, chains),
 	(ngnubuckets, gnubuckets, gnuchains, mipsxlat, ngnuchains),
 	(gnusymidx, dynamic_symbols, dynamic_syminfo, dynamic_syminfo_offset),
 	(dynamic_syminfo_nent, program_interpreter, dynamic_info),
 	(dynamic_info_DT_GNU_HASH, dynamic_info_DT_MIPS_XHASH, version_info),
 	(dynamic_section, symtab_shndx_list, group_count, section_groups),
 	(section_headers_groups): Move to struct filedata.  Update use
 	throughout file.
 
 2020-04-22  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (struct dump_data): New, used..
 	(cmdline): ..here, and..
 	(struct filedata): ..here.  Adjust all uses.
 	(request_dump_bynumber, request_dump, parse_args): Pass in a
 	struct dump_data* rather than Filedata*.  Adjust callers.
 	(main): Don't set cmdline.file_name.
 
 2020-04-20  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (process_symbol_table): Clear ngnuchains, ngnubuckets
 	and nbuckets.
 
 2020-04-20  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (process_section_headers): Free dynamic symbols etc.
 	earlier.
 
 2020-04-20  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (get_num_dynamic_syms): Formatting.  Don't return
 	on error without freeing.
 	(process_dynamic_section): Don't recreate dynamic symbols from
 	dynamic tag info when the dynamic symbols have already been
 	read via section headers.
 
 2020-04-17  Fredrik Strupe  <fredrik@strupe.net>
 
 	* testsuite/binutils-all/arm/vdup-cond.d: New test for testing that
 	conditional VDUP instructions are disassembled correctly.
 	* testsuite/binutils-all/arm/vdup-cond.s: New file used by
 	vdup-cond.d.
 	* testsuite/binutils-all/arm/vdup-thumb.d: New test for testing
 	that VDUP instructions (which are conditional in A32) can be
 	disassembled in thumb mode.
 	* testsuite/binutils-all/arm/vdup-cond.s: New file used by
 	vdup-thumb.d.
 
 2020-04-17  Alan Modra  <amodra@gmail.com>
 
 	PR 25840
 	* debug.c (debug_class_type_samep): Don't segfault on NULL type.
 
 2020-04-16  Alan Modra  <amodra@gmail.com>
 
 	* doc/binutils.texi: Mention --no-show-raw-insn in objdump
 	--no-addresses description.
 
 2020-04-15  Alan Modra  <amodra@gmail.com>
 
 	* objdump.c (no_addresses): New static var.
 	(usage): Print help for --no-addresses.
 	(long_options): Add --no-addresses entry.
 	(objdump_print_addr_with_sym, objdump_print_addr): Omit symbol address.
 	(disassemble_bytes): Don't print current line address, or reloc
 	address.
 	* doc/binutils.texi: Document objdump --no-addresses.
 
 2020-04-15  Alan Modra  <amodra@gmail.com>
 
 	PR 25822
 	* readelf.c (get_num_dynamic_syms): Don't set num_of_syms when
 	reading buckets or chains fails.
 
 2020-04-15  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (process_symbol_table): Zero gnubuckets, gnuchains
 	etc. after freeing.
 
 2020-04-15  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (get_group_flags): Translate text.
 	(get_file_type, get_symbol_binding, get_symbol_type),
 	(get_ppc64_symbol_other, get_symbol_other): Increase size of buffer.
 
 2020-04-15  Alan Modra  <amodra@gmail.com>
 
 	PR 25821
 	* readelf.c (get_num_dynamic_syms): Typo fix.
 
 2020-04-14  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (process_mips_specific): Free eopt and iopt.  Avoid
 	possibility of overflow when checking number of conflicts.
 
 2020-04-14  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR binutils/25707
 	* readelf.c (nbuckets): New.
 	(nchains): Likewise.
 	(buckets): Likewise.
 	(chains): Likewise.
 	(ngnubuckets): Likewise.
 	(gnubuckets): Likewise.
 	(gnuchains): Likewise.
 	(mipsxlat): Likewise.
 	(ngnuchains): Likewise.
 	(gnusymidx): Likewise.
 	(VALID_SYMBOL_NAME): Likewise.
 	(VALID_DYNAMIC_NAME): Use it.
 	(get_dynamic_data): Moved before process_dynamic_section.
 	(get_num_dynamic_syms): New function.
 	(process_dynamic_section): Use DT_SYMTAB, DT_SYMENT, DT_HASH,
 	DT_GNU_HASH and DT_MIPS_XHASH to reconstruct dynamic symbol
 	table.  Use DT_STRTAB and DT_STRSZ to reconstruct dynamic string
 	table.
 	(get_symbol_index_type): Don't print "bad section index" when
 	there is no section header.
 	(print_dynamic_symbol): Rewrite.
 	(process_symbol_table): Call print_dynamic_symbol to dump dynamic
 	symbol table.
 
 2020-04-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>
 
 	* testsuite/lib/binutils-common.exp (supports_gnu_osabi): Don't
 	enable on *-*-solaris*.
 
 2020-03-30  Nick Clifton  <nickc@redhat.com>
 
 	PR binutils/25662
 	* objcopy.c (copy_object): When copying PE format files set the
 	timestamp field in the pe_data structure if the preserve_dates
 	flag is set.
 	* testsuite/binutils-all/objcopy.exp (objcopy_test) Use
 	--preserve-dates in place of the -p option, in order to make its
 	effect more obvious.
 
 2020-03-28  Alan Modra  <amodra@gmail.com>
 
 	* testsuite/binutils-all/objcopy.exp (objcopy_test): Only
 	clear_xfail hppa*-*-*elf*.  Revert mips xfails.
 
 2020-03-28  Alan Modra  <amodra@gmail.com>
 
 	* testsuite/binutils-all/objcopy.exp (objcopy_test): Move xfails
 	from here to calls.  Remove "m8*-*-*" entry.  Don't xfail tic54x
 	but do xfail spu, mipstx39 and mips-sgi-irix for the executable
 	test.  Pass "-p" to objcopy for the executable test.
 
 2020-03-27  Jozef Lawrynowicz  <jozef.l@mittosystems.com>
 
 	PR binutils/25662
 	* testsuite/binutils-all/objcopy.exp (objcopy_test): Add argument to
 	specify whether an object file or executable should be built and tested.
 	Change test names to report whether an object file or executable is
 	being tested.
 	* testsuite/binutils-all/pr25662.ld: New test.
 	* testsuite/binutils-all/pr25662.s: New test.
 
 2020-03-27  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (process_archive): Don't double free qualified_name.
 	Don't break out of loop with "negative" archive_file_size, just
 	set file offset to max.
 
 2020-03-25  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (process_archive): Prevent endless loop.
 
 2020-03-24  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR binutils/25708
 	* nm.c (print_symname): Replace _bfd_elf_get_symbol_version_name
 	with bfd_get_symbol_version_string.
 	(print_symbo): Pass TRUE to bfd_get_symbol_version_string.
 	* objdump.c (objdump_print_symname): Likewise.
 
 2020-03-24  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR binutils/25708
 	* nm.c (SYM_NAME): Removed.
 	(print_symname): Add a pointer to struct extended_symbol_info
 	argument.  Call _bfd_elf_get_symbol_version_name to get symbol
 	version.
 	(print_symdef_entry): Pass NULL to print_symname.
 	(print_symbol_info_bsd): Update call to print_symname.
 	(print_symbol_info_sysv): Likewise.
 	(print_symbol_info_posix): Likewise.
 
 2020-03-24  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (process_mips_specific): Free iconf on error path.
 
 2020-03-23  Nick Clifton  <nickc@redhat.com>
 
 	PR 25714
 	* wrstabs.c (stab_pop_type): Replace assertion with error return.
 	* write_stabs_in_sections_debugging_info: Likewise.
 	* stab_enum_type: Likewise.
 	* stab_modify_type: Likewise.
 	* stab_struct_field: Likewise.
 	* stab_end_struct_type: Likewise.
 	* stab_start_class_type: Likewise.
 	* stab_class_static_member: Likewise.
 	* stab_class_baseclass: Likewise.
 	* stab_class_start_method: Likewise.
 	* stab_class_method_var: Likewise.
 	* stab_class_end_method: Likewise.
 	* stab_end_class_type: Likewise.
 	* stab_typedef_type: Likewise.
 	* stab_start_function: Likewise.
 	* stab_end_block: Likewise.
 	* stab_lineno: Likewise.
 
 2020-03-20  Nick Clifton  <nickc@redhat.com>
 
 	* readelf.c (get_compression_header): Add ATTRIBUTE_WARN_UNUSED_RESULT.
 	(process_section_headers): Check the return value from
 	get_compression_header.
 	(dump_section_as_strings): Likewise.
 	(dump_section_as_bytes): Likewise.
 	(load_specific_debug_section): Likewise.
 
 2020-03-20  H.J. Lu  <hongjiu.lu@intel.com>
 
 	* ar.c (main): Update bfd_plugin_set_program_name call.
 	* nm.c (main): Likewise.
 
 2020-03-19  Nick Clifton  <nickc@redhat.com>
 
 	PR 25676
 	* testsuite/binutils-all/dw4.s: New test source file.
 	* testsuite/binutils-all/nm.exp: Run the new test.
 
 2020-03-19  H.J. Lu  <hongjiu.lu@intel.com>
 
 	* readelf.c (process_symbol_table): Use unsigned long for si.
 
 2020-03-19  Alan Modra  <amodra@gmail.com>
 
 	* elfcomm.c: Don't include bfd.h or bucomm.h.
 	(program_name): Declare.
 	(process_archive_index_and_symbols): Replace bfd_boolean with int,
 	and substitute FALSE and TRUE.
 	(setup_archive, setup_nested_archive): Likewise.
 	* elfcomm.h: Likewise.
 
 2020-03-19  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (process_archive): Always return via path freeing
 	memory.  Formatting.
 
 2020-03-19  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (process_netbsd_elf_note): Validate descsz before
 	accessing descdata.  Formatting.
 
 2020-03-19  Alan Modra  <amodra@gmail.com>
 
 	* elfcomm.c (setup_archive): Make file_size an off_t.  Comment.
 	* elfcomm.h (setup_archive): Update prototype.
 
 2020-03-16  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (get_symbols): New function.
 	(process_relocs, ia64_process_unwind, hppa_process_unwind),
 	(arm_process_unwind, get_symbol_for_build_attribute): Use it.
 
 2020-03-16  Alan Modra  <amodra@gmail.com>
 
 	* unwind-ia64.c (unw_decode_uleb128): Prevent overlarge shifts.
 	Detect shift overflows and check that terminating byte is found.
 	Print an error on a bad uleb128.
 
 2020-03-14  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (process_file): Clean ba_cache.
 
 2020-03-14  Alan Modra  <amodra@gmail.com>
 
 	* elfcomm.h (setup_archive): Update prototype.
 	* elfcomm.c (setup_archive): Add file_size parameter and sanity
 	check longnames_size.
 	(setup_nested_archive): Get file size and pass to setup_archive.
 	* elfedit.c (process_archive): Likewise.
 	* readelf.c (process_archive): Pass filedata->file_size to
 	setup_archive.
 
 2020-03-14  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (dump_section_as_strings): Free memory on error exit.
 	(dump_section_as_bytes, process_notes_at): Likewise.
 	(get_build_id): Free enote.
 
 2020-03-13  Kamil Rytarowski  <n54@gmx.com>
 
 	* readelf.c (get_netbsd_elfcore_note_type): Add support for
 	NT_NETBSDCORE_LWPSTATUS notes.
 
 2020-03-13  Alan Modra  <amodra@gmail.com>
 
 	* elfcomm.c (get_archive_member_name): Always return malloc'd
 	string or NULL.
 	* elfedit.c (process_archive): Tidy memory on all return paths.
 	* readelf.c (process_archive): Likewise.
 	(process_symbol_table): Likewise.
 	(ba_cache): New, replacing ..
 	(get_symbol_for_build_attribute): ..static vars here.  Free
 	strtab and symtab before loading new ones.  Reject symtab without
 	valid strtab in loop, breaking out of loop on valid symtab.
 	(process_file): Free ba_cache symtab and strtab here, resetting
 	ba_cache.
 
 2020-03-12  Alan Modra  <amodra@gmail.com>
 
 	* readelf.c (process_section_headers): Don't just set
 	filedata->section_headers NULL, free it first.  Similarly for
 	dynamic_symbols, dynamic_strings, dynamic_syminfo and
 	symtab_shndx_list.  Zero associated counts too.
 	(process_object): Free symtab_shndx_list.
 	(process_file): Free various allocated filedata tables.
 
 2020-03-11  Nick Clifton  <nickc@redhat.com>
 
 	PR 25611
 	PR 25614
 	* dwarf.h (DWARF2_Internal_LineInfo): Add li_address_size and
 	li_segment_size fields.
 	* dwarf.c (read_debug_line_header): Record the address size and
 	segment selector size values (if present) in the lineinfo
 	structure.
 	(display_formatted_table): Warn if the format count is empty but
 	the table itself is not empty.
 	Display the format count and entry count at the start of the table
 	dump.
 	(display_debug_lines_raw): Display the address size and segement
 	selector size fields, if present.
 	* testsuite/binutils-all/dw5.W: Update expected output.
 
 2020-03-11  Alan Modra  <amodra@gmail.com>
 
 	PR 25651
 	* objcopy.c (copy_object): Test "gaps" not gap_fill_set or
 	pad_to_set on second block of code dealing with padding.
 	Replace "c" with "num_sec" and don't recalculate number of
 	sections on second block.  Size arrays using sizeof (element)
 	rather than sizeof (element type).
 
 2020-03-10  Alan Modra  <amodra@gmail.com>
 
 	* objdump.c (disassemble_section): Don't call qsort unless
 	sym count is at least two.
 	(disassemble_data): Don't call memcpy with NULL src.
 
 2020-03-09  Alan Modra  <amodra@gmail.com>
 
 	PR 25645
 	* readelf.c (dump_ia64_vms_dynamic_fixups): Pass size and nmemb
 	to get_data rather than multiplying.
 	(dump_ia64_vms_dynamic_relocs): Likewise.
 	(process_version_sections): Correct order of size and nmemb args
 	in get_data call.
 	(process_mips_specific): Likewise.
 
 2020-03-08  H.J. Lu  <hongjiu.lu@intel.com>
 
 	* readelf.c (get_dynamic_data): Replace "memory chekers" with
 	"memory checkers" in comments.
 
 2020-03-06  Simon Marchi  <simon.marchi@efficios.com>
 
 	PR 25491
 	* doc/Makefile.am: Rename MOSTLYCLEANFILES to MAINTAINERCLEANFILES.
 	* doc/Makefile.in: Re-generate.
 
 2020-03-06  Nick Clifton  <nickc@redhat.com>
 
 	* objcopy.c (check_new_section_flags): New function.  Reject the
 	SEC_COFF_SHARED flag if the target is not a COFF binary.
 	(copy_object): Call check_new_section_flags.
 	(setup_section): Likewise.
 	* doc/binutils.texi (objcopy): Add a note that the 'share' section
 	flag cannot be applied to ELF binaries.
 
 2020-03-06  Alan Modra  <amodra@gmail.com>
 
 	PR 25637
 	* objcopy.c (filter_symbols): Correct rem_leading_char logic.
 
 2020-03-05  Alan Modra  <amodra@gmail.com>
 
 	PR 25629
 	* objcopy.c (filter_symbols): Don't segfault on NULL
 	prefix_symbols_string.
 
 2020-03-04  Christian Eggers  <ceggers@gmx.de>
 
 	* objcopy.c (copy_object): Convert from bytes to octets for
 	--gap-fill and --pad-to.
 
 2020-03-03  Nick Clifton  <nickc@redhat.com>
 
 	PR 25625
 	* prdbg.c (pr_tag_type): Remove call to abort.
 
 2020-03-02  Aaron Merey  <amerey@redhat.com>
 
 	* binutils/testsuite/binutils-all/debuginfod.exp: Improve port
 	selection.
 
 2020-03-02  Nick Clifton  <nickc@redhat.com>
 
 	PR 25543
 	* readelf.c (dump_section_as_strings): Display new-line characters
 	as \n and then insert a line break.
 	* testsuite/binutils-all/pr25543.s: New test.
 	* testsuite/binutils-all/pr25543.d: Test driver.
 	* testsuite/binutils-all/readelf.exp: Run the new test.
 
 2020-02-27  Nick Clifton  <nickc@redhat.com>
 
 	PR 25526
 	* readelf.c (process_ia64_vms_dynamic_relocs): Check to see if
 	get_data is unable to load the string table.
 
 2020-02-26  Alan Modra  <amodra@gmail.com>
 
 	* elfedit.c: Indent labels correctly.
 	* readelf.c: Likewise.
 	* resres.c: Likewise.
 
 2020-02-25  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR binutils/25584
 	* ar.c (main): Pass 0 to bfd_plugin_set_program_name.
 	* nm.c (main): Pass 1 to bfd_plugin_set_program_name.
 
 2020-02-24  Nick Clifton  <nickc@redhat.com>
 
 	PR 25499
 	* doc/binutils.texi (objdump): Fix typo in description of
 	objdump's -g option.
 
 2020-02-20  Nelson Chu  <nelson.chu@sifive.com>
 
 	* dwarf.c (regname_internal_riscv): Updated since the DECLARE_CSR
 	is changed.
 
 2020-02-19  Jordan Rupprecht  <rupprecht@google.com>
 
 	* objdump.c (show_line): call bfd_demangle when using do_demangle.
 
 2020-02-19  Andrew Burgess  <andrew.burgess@embecosm.com>
 
 	* configure: Regenerate.
 
 2020-02-10  Fangrui Song   <maskray@google.com>
 
 	* objcopy.c (parse_flags): Handle "exclude".
 	* doc/binutils.texi: Document the support.
 
 2020-02-10  Aaron Merey  <amerey@redhat.com>
 
 	* binutils/testsuite/binutils-all/debuginfod.exp:
 	Replace set ::env with setenv.
 	Start server before setting environment variable.
 	Specify tmpdir as the location of the server's
 	database.
 	Check additional server metrics at start-up.
 
 2020-02-07  Nick Clifton  <nickc@redhat.com>
 
 	* README-how-to-make-a-release: Add note about updating the
 	GAS/NEWS URL in the next release.
 
 2020-02-07  Sergey Belyashov  <sergey.belyashov@gmail.com>
 
 	PR 25469
 	* readelf.c (get_machine_flags): Add support for Z80N machine
 	number.
 
 2020-02-07  Nick Clifton  <nickc@redhat.com>
 
 	* dwarf.c (display_debug_lines_decoded): Force a NUL termination
 	of the truncated file name.
 
 2020-02-06  Andrew Burgess  <andrew.burgess@embecosm.com>
 
 	* objdump.c (print_jump_visualisation): New function.
 	(disassemble_bytes): Call new function.
 
 2020-02-06  Alan Modra  <amodra@gmail.com>
 
 	* testsuite/lib/binutils-common.exp (match_target): Accept '!' before
 	TCL procedure.
 	(supports_gnu_osabi): New procedure.
 	(is_generic): New, from ld-lib.exp.
 	(supports_gnu_unique): Use the above.
 
 2020-02-04  Alan Modra  <amodra@gmail.com>
 
 	* Makefile.am (CFILES): Add od-elf32_avr.c.
 	* Makefile.in: Regenerate.
 	* po/POTFILES.in: Regenerate.
 
 2020-02-03  Andreas Schwab  <schwab@linux-m68k.org>
 
 	* readelf.c (dump_relocations, dump_relocations)
 	(decode_arm_unwind_bytecode, process_dynamic_section)
 	(get_symbol_visibility, get_alpha_symbol_other): Add newline to
 	error message.
 
 2020-02-03  Sergei Trofimovich  <siarheit@google.com>
 
 	* coffdump.c (program_name): Drop redundant definition.
 	* srconv.c (program_name): Likewise
 	* sysdump.c (program_name): Likewise
 
 2020-02-02  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR gas/25380
 	* objdump.c (sym_ok): Return FALSE if 2 sections are in the
 	same file with different section pointers.
 
 2020-02-01  Nick Clifton  <nickc@redhat.com>
 
 	* README-how-to-make-a-release: Update with more details on the
 	release making process.
 
 2020-01-31  Nick Clifton  <nickc@redhat.com>
 
 	* po/sv.po: Updated Swedish translation.
 
 2020-01-28  Nick Clifton  <nickc@redhat.com>
 
 	* readelf.c (get_build_id): Simplify warning message about corrupt
 	notes encountered whilst scanning for the build-id.
 
 2020-01-27  Roland McGrath  <mcgrathr@google.com>
 
 	* objcopy.c (compare_gnu_build_notes): Fix comparison results
 	for overlapping ranges so that (A == B) == (B == A) holds.
 
 2020-01-27  Alan Modra  <amodra@gmail.com>
 
 	* testsuite/lib/binutils-common.exp (big_or_little_endian): Replace
 	case statement with switch statement.
 
 2020-01-24  Nick Clifton  <nickc@redhat.com>
 
 	* readelf.c (get_build_id): Fix warning messages about corrupt
 	notes.
 
 2020-01-23  Nick Clifton  <nickc@redhat.com>
 
 	* po/fr.po: Updated French translation.
 
 2020-01-22  Yuri Chornoivan  <yurchor@mageia.org>
 
 	PR 25417
 	* readelf.c (get_alpha_symbol_other): Fix error message typo.
 
 2020-01-20  Nick Clifton  <nickc@redhat.com>
 
 	* po/pt.po: Updated Portuguese translation.
 	* po/uk.po: Updated Ukranian translation.
 
 2020-01-18  Nick Clifton  <nickc@redhat.com>
 
 	* README-how-to-make-a-release: Update notes on how to cut a
 	branch for a release.
 
 2020-01-18  Nick Clifton  <nickc@redhat.com>
 
 	* configure: Regenerate.
 	* po/binutils.pot: Regenerate.
 
 2020-01-18  Nick Clifton  <nickc@redhat.com>
 
 	Binutils 2.34 branch created.
 
 2020-01-17  Thomas Troeger  <tstroege@gmx.de>
 
 	* objdump.c (jump_info_visualize_address): Discard jumps that are
 	no longer needed.
 	(disassemble_bytes): Only compute the maximum level if jumps were
 	detected.
 
 2020-01-13  Nick Clifton  <nickc@redhat.com>
 
 	* objdump.c (disassemble_bytes): Remove C99-ism.
 	* testsuite/binutils-all/debuginfod.exp: New tests.
 
 2020-01-13  Thomas Troeger  <tstroege@gmx.de>
 
 	* objdump.c (visualize_jumps, color_output, extended_color_output)
 	(detected_jumps): New variables.
 	(usage): Add the new jump visualization options.
 	(option_values): Add new option value.
 	(long_options): Add the new option.
 	(jump_info_new, jump_info_free): New functions.
 	(jump_info_min_address, jump_info_max_address): Likewise.
 	(jump_info_end_address, jump_info_is_start_address): Likewise.
 	(jump_info_is_end_address, jump_info_size): Likewise.
 	(jump_info_unlink, jump_info_insert): Likewise.
 	(jump_info_add_front, jump_info_move_linked): Likewise.
 	(jump_info_intersect, jump_info_merge): Likewise.
 	(jump_info_sort, jump_info_visualize_address): Likewise.
 	(disassemble_jumps): New function - used to locate jumps.
 	(disassemble_bytes): Add ascii art generation.
 	(disassemble_section): Add scan to locate jumps.
 	(main): Parse the new visualization option.
 	* doc/binutils.texi: Document the new feature.
 	* NEWS: Mention the new feature.
 
 2020-01-13  Alan Modra  <amodra@gmail.com>
 
 	PR 25360
 	PR 25361
 	* dwarf.c (display_debug_frames): Move fde_fc earlier.  Free
 	fde_fc col_type and col_offset.
 	* readelf.c (apply_relocations): Move symsec check earlier.
 	(free_debug_section): Free reloc_info.
 	(process_notes_at): Free pnotes on error path.
 	(process_object): Free dump_sects here..
 	(process_archive): ..not here.
 
 2020-01-13  Alan Modra  <amodra@gmail.com>
 
 	PR 25362
 	* nm.c (display_rel_file): Free dyn_syms.
 
 2020-01-09  Nick Clifton  <nickc@redhat.com>
 
 	PR 25220
 	* objcopy.c (empty_name): New variable.
 	(need_sym_before): Prevent an attempt to free a static variable.
 	(filter_symbols): Avoid strcmp test by checking for pointer
 	equality.
 
 2020-01-09  Nick Clifton  <nickc@redhat.com>
 
 	* po/zh_TW.po: Updated Traditional Chinese translation.
 
 2020-01-09  Aaron Merey  <amerey@redhat.com>
 
         * Makefile.am (readelf_LDADD, objdump_LDADD): Add libdebuginfod.
         * Makefile.in: Regenerate.
         * NEWS: Update.
         * config.in: Regenerate.
         * configure: Regenerate.
         * configure.ac: Call AC_DEBUGINFOD.
         * doc/Makefile.in: Regenerate.
         * doc/binutils.texi: Add section on using binutils
         with debuginfod.
         * dwarf.c (debuginfod_fetch_separate_debug_info): New function.
         Query debuginfod servers for the target debug file.
         (load_separate_debug_info): Call
         debuginfod_fetch_separate_debug_info if configured with
         debuginfod.
         (load_separate_debug_files): Add file argument to
         load_separate_debug_info calls.
         * dwarf.h (get_build_id): Add declaration.
         * objdump.c (get_build_id): New function. Get build-id of file.
         * readelf.c (get_build_id): Likewise.
         * testsuite/binutils-all/debuginfod.exp: New tests.
         * testsuite/binutils-all/linkdebug.s: Add .note.gnu.build-id
         section.
 
 2020-01-02  Sergey Belyashov  <sergey.belyashov@gmail.com>
 
 	* readelf.c: Add support for new Z*) relocations and machine
 	types.
 
 2020-01-01  Alan Modra  <amodra@gmail.com>
 
 	Update year range in copyright notice of all files.
diff --git a/binutils/readelf.c b/binutils/readelf.c
index 0bdabccc8eb..0705a49c0d8 100644
--- a/binutils/readelf.c
+++ b/binutils/readelf.c
@@ -16566,876 +16566,877 @@ static bfd_boolean
 process_mips_specific (Filedata * filedata)
 {
   Elf_Internal_Dyn * entry;
   Elf_Internal_Shdr *sect = NULL;
   size_t liblist_offset = 0;
   size_t liblistno = 0;
   size_t conflictsno = 0;
   size_t options_offset = 0;
   size_t conflicts_offset = 0;
   size_t pltrelsz = 0;
   size_t pltrel = 0;
   bfd_vma pltgot = 0;
   bfd_vma mips_pltgot = 0;
   bfd_vma jmprel = 0;
   bfd_vma local_gotno = 0;
   bfd_vma gotsym = 0;
   bfd_vma symtabno = 0;
   bfd_boolean res = TRUE;
 
   if (! process_attributes (filedata, NULL, SHT_GNU_ATTRIBUTES, NULL,
 			    display_mips_gnu_attribute))
     res = FALSE;
 
   sect = find_section (filedata, ".MIPS.abiflags");
 
   if (sect != NULL)
     {
       Elf_External_ABIFlags_v0 *abiflags_ext;
       Elf_Internal_ABIFlags_v0 abiflags_in;
 
       if (sizeof (Elf_External_ABIFlags_v0) != sect->sh_size)
 	{
 	  error (_("Corrupt MIPS ABI Flags section.\n"));
 	  res = FALSE;
 	}
       else
 	{
 	  abiflags_ext = get_data (NULL, filedata, sect->sh_offset, 1,
 				   sect->sh_size, _("MIPS ABI Flags section"));
 	  if (abiflags_ext)
 	    {
 	      abiflags_in.version = BYTE_GET (abiflags_ext->version);
 	      abiflags_in.isa_level = BYTE_GET (abiflags_ext->isa_level);
 	      abiflags_in.isa_rev = BYTE_GET (abiflags_ext->isa_rev);
 	      abiflags_in.gpr_size = BYTE_GET (abiflags_ext->gpr_size);
 	      abiflags_in.cpr1_size = BYTE_GET (abiflags_ext->cpr1_size);
 	      abiflags_in.cpr2_size = BYTE_GET (abiflags_ext->cpr2_size);
 	      abiflags_in.fp_abi = BYTE_GET (abiflags_ext->fp_abi);
 	      abiflags_in.isa_ext = BYTE_GET (abiflags_ext->isa_ext);
 	      abiflags_in.ases = BYTE_GET (abiflags_ext->ases);
 	      abiflags_in.flags1 = BYTE_GET (abiflags_ext->flags1);
 	      abiflags_in.flags2 = BYTE_GET (abiflags_ext->flags2);
 
 	      printf ("\nMIPS ABI Flags Version: %d\n", abiflags_in.version);
 	      printf ("\nISA: MIPS%d", abiflags_in.isa_level);
 	      if (abiflags_in.isa_rev > 1)
 		printf ("r%d", abiflags_in.isa_rev);
 	      printf ("\nGPR size: %d",
 		      get_mips_reg_size (abiflags_in.gpr_size));
 	      printf ("\nCPR1 size: %d",
 		      get_mips_reg_size (abiflags_in.cpr1_size));
 	      printf ("\nCPR2 size: %d",
 		      get_mips_reg_size (abiflags_in.cpr2_size));
 	      fputs ("\nFP ABI: ", stdout);
 	      print_mips_fp_abi_value (abiflags_in.fp_abi);
 	      fputs ("ISA Extension: ", stdout);
 	      print_mips_isa_ext (abiflags_in.isa_ext);
 	      fputs ("\nASEs:", stdout);
 	      print_mips_ases (abiflags_in.ases);
 	      printf ("\nFLAGS 1: %8.8lx", abiflags_in.flags1);
 	      printf ("\nFLAGS 2: %8.8lx", abiflags_in.flags2);
 	      fputc ('\n', stdout);
 	      free (abiflags_ext);
 	    }
 	}
     }
 
   /* We have a lot of special sections.  Thanks SGI!  */
   if (filedata->dynamic_section == NULL)
     {
       /* No dynamic information available.  See if there is static GOT.  */
       sect = find_section (filedata, ".got");
       if (sect != NULL)
 	{
 	  unsigned char *data_end;
 	  unsigned char *data;
 	  bfd_vma ent, end;
 	  int addr_size;
 
 	  pltgot = sect->sh_addr;
 
 	  ent = pltgot;
 	  addr_size = (is_32bit_elf ? 4 : 8);
 	  end = pltgot + sect->sh_size;
 
 	  data = (unsigned char *) get_data (NULL, filedata, sect->sh_offset,
 					     end - pltgot, 1,
 					     _("Global Offset Table data"));
 	  /* PR 12855: Null data is handled gracefully throughout.  */
 	  data_end = data + (end - pltgot);
 
 	  printf (_("\nStatic GOT:\n"));
 	  printf (_(" Canonical gp value: "));
 	  print_vma (ent + 0x7ff0, LONG_HEX);
 	  printf ("\n\n");
 
 	  /* In a dynamic binary GOT[0] is reserved for the dynamic
 	     loader to store the lazy resolver pointer, however in
 	     a static binary it may well have been omitted and GOT
 	     reduced to a table of addresses.
 	     PR 21344: Check for the entry being fully available
 	     before fetching it.  */
 	  if (data
 	      && data + ent - pltgot + addr_size <= data_end
 	      && byte_get (data + ent - pltgot, addr_size) == 0)
 	    {
 	      printf (_(" Reserved entries:\n"));
 	      printf (_("  %*s %10s %*s\n"),
 		      addr_size * 2, _("Address"), _("Access"),
 		      addr_size * 2, _("Value"));
 	      ent = print_mips_got_entry (data, pltgot, ent, data_end);
 	      printf ("\n");
 	      if (ent == (bfd_vma) -1)
 		goto sgot_print_fail;
 
 	      /* Check for the MSB of GOT[1] being set, identifying a
 		 GNU object.  This entry will be used by some runtime
 		 loaders, to store the module pointer.  Otherwise this
 		 is an ordinary local entry.
 		 PR 21344: Check for the entry being fully available
 		 before fetching it.  */
 	      if (data
 		  && data + ent - pltgot + addr_size <= data_end
 		  && (byte_get (data + ent - pltgot, addr_size)
 		      >> (addr_size * 8 - 1)) != 0)
 		{
 		  ent = print_mips_got_entry (data, pltgot, ent, data_end);
 		  printf ("\n");
 		  if (ent == (bfd_vma) -1)
 		    goto sgot_print_fail;
 		}
 	      printf ("\n");
 	    }
 
 	  if (data != NULL && ent < end)
 	    {
 	      printf (_(" Local entries:\n"));
 	      printf ("  %*s %10s %*s\n",
 		      addr_size * 2, _("Address"), _("Access"),
 		      addr_size * 2, _("Value"));
 	      while (ent < end)
 		{
 		  ent = print_mips_got_entry (data, pltgot, ent, data_end);
 		  printf ("\n");
 		  if (ent == (bfd_vma) -1)
 		    goto sgot_print_fail;
 		}
 	      printf ("\n");
 	    }
 
 	sgot_print_fail:
 	  free (data);
 	}
       return res;
     }
 
   for (entry = filedata->dynamic_section;
        /* PR 17531 file: 012-50589-0.004.  */
        (entry < filedata->dynamic_section + filedata->dynamic_nent
 	&& entry->d_tag != DT_NULL);
        ++entry)
     switch (entry->d_tag)
       {
       case DT_MIPS_LIBLIST:
 	liblist_offset
 	  = offset_from_vma (filedata, entry->d_un.d_val,
 			     liblistno * sizeof (Elf32_External_Lib));
 	break;
       case DT_MIPS_LIBLISTNO:
 	liblistno = entry->d_un.d_val;
 	break;
       case DT_MIPS_OPTIONS:
 	options_offset = offset_from_vma (filedata, entry->d_un.d_val, 0);
 	break;
       case DT_MIPS_CONFLICT:
 	conflicts_offset
 	  = offset_from_vma (filedata, entry->d_un.d_val,
 			     conflictsno * sizeof (Elf32_External_Conflict));
 	break;
       case DT_MIPS_CONFLICTNO:
 	conflictsno = entry->d_un.d_val;
 	break;
       case DT_PLTGOT:
 	pltgot = entry->d_un.d_ptr;
 	break;
       case DT_MIPS_LOCAL_GOTNO:
 	local_gotno = entry->d_un.d_val;
 	break;
       case DT_MIPS_GOTSYM:
 	gotsym = entry->d_un.d_val;
 	break;
       case DT_MIPS_SYMTABNO:
 	symtabno = entry->d_un.d_val;
 	break;
       case DT_MIPS_PLTGOT:
 	mips_pltgot = entry->d_un.d_ptr;
 	break;
       case DT_PLTREL:
 	pltrel = entry->d_un.d_val;
 	break;
       case DT_PLTRELSZ:
 	pltrelsz = entry->d_un.d_val;
 	break;
       case DT_JMPREL:
 	jmprel = entry->d_un.d_ptr;
 	break;
       default:
 	break;
       }
 
   if (liblist_offset != 0 && liblistno != 0 && do_dynamic)
     {
       Elf32_External_Lib * elib;
       size_t cnt;
 
       elib = (Elf32_External_Lib *) get_data (NULL, filedata, liblist_offset,
 					      sizeof (Elf32_External_Lib),
 					      liblistno,
 					      _("liblist section data"));
       if (elib)
 	{
 	  printf (ngettext ("\nSection '.liblist' contains %lu entry:\n",
 			    "\nSection '.liblist' contains %lu entries:\n",
 			    (unsigned long) liblistno),
 		  (unsigned long) liblistno);
 	  fputs (_("     Library              Time Stamp          Checksum   Version Flags\n"),
 		 stdout);
 
 	  for (cnt = 0; cnt < liblistno; ++cnt)
 	    {
 	      Elf32_Lib liblist;
 	      time_t atime;
 	      char timebuf[128];
 	      struct tm * tmp;
 
 	      liblist.l_name = BYTE_GET (elib[cnt].l_name);
 	      atime = BYTE_GET (elib[cnt].l_time_stamp);
 	      liblist.l_checksum = BYTE_GET (elib[cnt].l_checksum);
 	      liblist.l_version = BYTE_GET (elib[cnt].l_version);
 	      liblist.l_flags = BYTE_GET (elib[cnt].l_flags);
 
 	      tmp = gmtime (&atime);
 	      snprintf (timebuf, sizeof (timebuf),
 			"%04u-%02u-%02uT%02u:%02u:%02u",
 			tmp->tm_year + 1900, tmp->tm_mon + 1, tmp->tm_mday,
 			tmp->tm_hour, tmp->tm_min, tmp->tm_sec);
 
 	      printf ("%3lu: ", (unsigned long) cnt);
 	      if (VALID_DYNAMIC_NAME (filedata, liblist.l_name))
 		print_symbol (20, GET_DYNAMIC_NAME (filedata, liblist.l_name));
 	      else
 		printf (_("<corrupt: %9ld>"), liblist.l_name);
 	      printf (" %s %#10lx %-7ld", timebuf, liblist.l_checksum,
 		      liblist.l_version);
 
 	      if (liblist.l_flags == 0)
 		puts (_(" NONE"));
 	      else
 		{
 		  static const struct
 		  {
 		    const char * name;
 		    int bit;
 		  }
 		  l_flags_vals[] =
 		  {
 		    { " EXACT_MATCH", LL_EXACT_MATCH },
 		    { " IGNORE_INT_VER", LL_IGNORE_INT_VER },
 		    { " REQUIRE_MINOR", LL_REQUIRE_MINOR },
 		    { " EXPORTS", LL_EXPORTS },
 		    { " DELAY_LOAD", LL_DELAY_LOAD },
 		    { " DELTA", LL_DELTA }
 		  };
 		  int flags = liblist.l_flags;
 		  size_t fcnt;
 
 		  for (fcnt = 0; fcnt < ARRAY_SIZE (l_flags_vals); ++fcnt)
 		    if ((flags & l_flags_vals[fcnt].bit) != 0)
 		      {
 			fputs (l_flags_vals[fcnt].name, stdout);
 			flags ^= l_flags_vals[fcnt].bit;
 		      }
 		  if (flags != 0)
 		    printf (" %#x", (unsigned int) flags);
 
 		  puts ("");
 		}
 	    }
 
 	  free (elib);
 	}
       else
 	res = FALSE;
     }
 
   if (options_offset != 0)
     {
       Elf_External_Options * eopt;
       size_t offset;
       int cnt;
       sect = filedata->section_headers;
 
       /* Find the section header so that we get the size.  */
       sect = find_section_by_type (filedata, SHT_MIPS_OPTIONS);
       /* PR 17533 file: 012-277276-0.004.  */
       if (sect == NULL)
 	{
 	  error (_("No MIPS_OPTIONS header found\n"));
 	  return FALSE;
 	}
       /* PR 24243  */
       if (sect->sh_size < sizeof (* eopt))
 	{
 	  error (_("The MIPS options section is too small.\n"));
 	  return FALSE;
 	}
 
       eopt = (Elf_External_Options *) get_data (NULL, filedata, options_offset, 1,
                                                 sect->sh_size, _("options"));
       if (eopt)
 	{
 	  Elf_Internal_Options * iopt;
 	  Elf_Internal_Options * option;
-	  Elf_Internal_Options * iopt_end;
 
-	  iopt = (Elf_Internal_Options *)
-              cmalloc ((sect->sh_size / sizeof (eopt)), sizeof (* iopt));
+	  assert (sizeof (Elf_Internal_Options) == sizeof (Elf_External_Options));
+	  assert (sizeof (Elf32_RegInfo) == sizeof (Elf32_External_RegInfo));
+	  assert (sizeof (Elf64_Internal_RegInfo) == sizeof (Elf64_External_RegInfo));
+	  iopt = (Elf_Internal_Options *) cmalloc (sect->sh_size, 1);
 	  if (iopt == NULL)
 	    {
 	      error (_("Out of memory allocating space for MIPS options\n"));
 	      free (eopt);
 	      return FALSE;
 	    }
 
 	  offset = cnt = 0;
 	  option = iopt;
-	  iopt_end = iopt + (sect->sh_size / sizeof (eopt));
 	  
 	  while (offset <= sect->sh_size - sizeof (* eopt))
 	    {
 	      Elf_External_Options * eoption;
 
 	      eoption = (Elf_External_Options *) ((char *) eopt + offset);
 
 	      option->kind = BYTE_GET (eoption->kind);
 	      option->size = BYTE_GET (eoption->size);
 	      option->section = BYTE_GET (eoption->section);
 	      option->info = BYTE_GET (eoption->info);
 
 	      /* PR 17531: file: ffa0fa3b.  */
 	      if (option->size < sizeof (* eopt)
-		  || offset + option->size > sect->sh_size)
+		  || option->size > sect->sh_size - offset)
 		{
 		  error (_("Invalid size (%u) for MIPS option\n"),
 			 option->size);
 		  free (iopt);
 		  free (eopt);
 		  return FALSE;
 		}
 	      offset += option->size;
 
 	      ++option;
 	      ++cnt;
 	    }
 
 	  printf (ngettext ("\nSection '%s' contains %d entry:\n",
 			    "\nSection '%s' contains %d entries:\n",
 			    cnt),
 		  printable_section_name (filedata, sect), cnt);
 
-	  option = iopt;
 	  offset = 0;
-
 	  while (cnt-- > 0)
 	    {
 	      size_t len;
 
+	      option = (Elf_Internal_Options *) ((char *) iopt + offset);
 	      switch (option->kind)
 		{
 		case ODK_NULL:
 		  /* This shouldn't happen.  */
-		  printf (" NULL       %d %lx", option->section, option->info);
+		  printf (" NULL       %" PRId16 " %" PRIx32,
+			  option->section, option->info);
 		  break;
 
 		case ODK_REGINFO:
 		  printf (" REGINFO    ");
 		  if (filedata->file_header.e_machine == EM_MIPS)
 		    {
 		      Elf32_External_RegInfo * ereg;
 		      Elf32_RegInfo reginfo;
 
 		      /* 32bit form.  */
-		      if (option + 2 > iopt_end)
+		      if (option->size < (sizeof (Elf_External_Options)
+					  + sizeof (Elf32_External_RegInfo)))
 			{
 			  printf (_("<corrupt>\n"));
 			  error (_("Truncated MIPS REGINFO option\n"));
 			  cnt = 0;
 			  break;
 			}
 
 		      ereg = (Elf32_External_RegInfo *) (option + 1);
 
 		      reginfo.ri_gprmask = BYTE_GET (ereg->ri_gprmask);
 		      reginfo.ri_cprmask[0] = BYTE_GET (ereg->ri_cprmask[0]);
 		      reginfo.ri_cprmask[1] = BYTE_GET (ereg->ri_cprmask[1]);
 		      reginfo.ri_cprmask[2] = BYTE_GET (ereg->ri_cprmask[2]);
 		      reginfo.ri_cprmask[3] = BYTE_GET (ereg->ri_cprmask[3]);
 		      reginfo.ri_gp_value = BYTE_GET (ereg->ri_gp_value);
 
-		      printf ("GPR %08lx  GP 0x%lx\n",
-			      reginfo.ri_gprmask,
-			      (unsigned long) reginfo.ri_gp_value);
-		      printf ("            CPR0 %08lx  CPR1 %08lx  CPR2 %08lx  CPR3 %08lx\n",
+		      printf ("GPR %08" PRIx32 "  GP 0x%" PRIx32 "\n",
+			      reginfo.ri_gprmask, reginfo.ri_gp_value);
+		      printf ("          "
+			      "  CPR0 %08" PRIx32 "  CPR1 %08" PRIx32
+			      "  CPR2 %08" PRIx32 "  CPR3 %08" PRIx32 "\n",
 			      reginfo.ri_cprmask[0], reginfo.ri_cprmask[1],
 			      reginfo.ri_cprmask[2], reginfo.ri_cprmask[3]);
 		    }
 		  else
 		    {
 		      /* 64 bit form.  */
 		      Elf64_External_RegInfo * ereg;
 		      Elf64_Internal_RegInfo reginfo;
 
-		      if (option + 2 > iopt_end)
+		      if (option->size < (sizeof (Elf_External_Options)
+					  + sizeof (Elf64_External_RegInfo)))
 			{
 			  printf (_("<corrupt>\n"));
 			  error (_("Truncated MIPS REGINFO option\n"));
 			  cnt = 0;
 			  break;
 			}
 
 		      ereg = (Elf64_External_RegInfo *) (option + 1);
 		      reginfo.ri_gprmask    = BYTE_GET (ereg->ri_gprmask);
 		      reginfo.ri_cprmask[0] = BYTE_GET (ereg->ri_cprmask[0]);
 		      reginfo.ri_cprmask[1] = BYTE_GET (ereg->ri_cprmask[1]);
 		      reginfo.ri_cprmask[2] = BYTE_GET (ereg->ri_cprmask[2]);
 		      reginfo.ri_cprmask[3] = BYTE_GET (ereg->ri_cprmask[3]);
 		      reginfo.ri_gp_value   = BYTE_GET (ereg->ri_gp_value);
 
-		      printf ("GPR %08lx  GP 0x",
-			      reginfo.ri_gprmask);
-		      printf_vma (reginfo.ri_gp_value);
-		      printf ("\n");
-
-		      printf ("            CPR0 %08lx  CPR1 %08lx  CPR2 %08lx  CPR3 %08lx\n",
+		      printf ("GPR %08" PRIx32 "  GP 0x%" PRIx64 "\n",
+			      reginfo.ri_gprmask, reginfo.ri_gp_value);
+		      printf ("          "
+			      "  CPR0 %08" PRIx32 "  CPR1 %08" PRIx32
+			      "  CPR2 %08" PRIx32 "  CPR3 %08" PRIx32 "\n",
 			      reginfo.ri_cprmask[0], reginfo.ri_cprmask[1],
 			      reginfo.ri_cprmask[2], reginfo.ri_cprmask[3]);
 		    }
-		  ++option;
+		  offset += option->size;
 		  continue;
 
 		case ODK_EXCEPTIONS:
 		  fputs (" EXCEPTIONS fpe_min(", stdout);
 		  process_mips_fpe_exception (option->info & OEX_FPU_MIN);
 		  fputs (") fpe_max(", stdout);
 		  process_mips_fpe_exception ((option->info & OEX_FPU_MAX) >> 8);
 		  fputs (")", stdout);
 
 		  if (option->info & OEX_PAGE0)
 		    fputs (" PAGE0", stdout);
 		  if (option->info & OEX_SMM)
 		    fputs (" SMM", stdout);
 		  if (option->info & OEX_FPDBUG)
 		    fputs (" FPDBUG", stdout);
 		  if (option->info & OEX_DISMISS)
 		    fputs (" DISMISS", stdout);
 		  break;
 
 		case ODK_PAD:
 		  fputs (" PAD       ", stdout);
 		  if (option->info & OPAD_PREFIX)
 		    fputs (" PREFIX", stdout);
 		  if (option->info & OPAD_POSTFIX)
 		    fputs (" POSTFIX", stdout);
 		  if (option->info & OPAD_SYMBOL)
 		    fputs (" SYMBOL", stdout);
 		  break;
 
 		case ODK_HWPATCH:
 		  fputs (" HWPATCH   ", stdout);
 		  if (option->info & OHW_R4KEOP)
 		    fputs (" R4KEOP", stdout);
 		  if (option->info & OHW_R8KPFETCH)
 		    fputs (" R8KPFETCH", stdout);
 		  if (option->info & OHW_R5KEOP)
 		    fputs (" R5KEOP", stdout);
 		  if (option->info & OHW_R5KCVTL)
 		    fputs (" R5KCVTL", stdout);
 		  break;
 
 		case ODK_FILL:
 		  fputs (" FILL       ", stdout);
 		  /* XXX Print content of info word?  */
 		  break;
 
 		case ODK_TAGS:
 		  fputs (" TAGS       ", stdout);
 		  /* XXX Print content of info word?  */
 		  break;
 
 		case ODK_HWAND:
 		  fputs (" HWAND     ", stdout);
 		  if (option->info & OHWA0_R4KEOP_CHECKED)
 		    fputs (" R4KEOP_CHECKED", stdout);
 		  if (option->info & OHWA0_R4KEOP_CLEAN)
 		    fputs (" R4KEOP_CLEAN", stdout);
 		  break;
 
 		case ODK_HWOR:
 		  fputs (" HWOR      ", stdout);
 		  if (option->info & OHWA0_R4KEOP_CHECKED)
 		    fputs (" R4KEOP_CHECKED", stdout);
 		  if (option->info & OHWA0_R4KEOP_CLEAN)
 		    fputs (" R4KEOP_CLEAN", stdout);
 		  break;
 
 		case ODK_GP_GROUP:
-		  printf (" GP_GROUP  %#06lx  self-contained %#06lx",
+		  printf (" GP_GROUP  %#06x  self-contained %#06x",
 			  option->info & OGP_GROUP,
 			  (option->info & OGP_SELF) >> 16);
 		  break;
 
 		case ODK_IDENT:
-		  printf (" IDENT     %#06lx  self-contained %#06lx",
+		  printf (" IDENT     %#06x  self-contained %#06x",
 			  option->info & OGP_GROUP,
 			  (option->info & OGP_SELF) >> 16);
 		  break;
 
 		default:
 		  /* This shouldn't happen.  */
-		  printf (" %3d ???     %d %lx",
+		  printf (" %3d ???     %" PRId16 " %" PRIx32,
 			  option->kind, option->section, option->info);
 		  break;
 		}
 
 	      len = sizeof (* eopt);
 	      while (len < option->size)
 		{
 		  unsigned char datum = * ((unsigned char *) eopt + offset + len);
 
 		  if (ISPRINT (datum))
 		    printf ("%c", datum);
 		  else
 		    printf ("\\%03o", datum);
 		  len ++;
 		}
 	      fputs ("\n", stdout);
 
 	      offset += option->size;
-	      ++option;
 	    }
 	  free (iopt);
 	  free (eopt);
 	}
       else
 	res = FALSE;
     }
 
   if (conflicts_offset != 0 && conflictsno != 0)
     {
       Elf32_Conflict * iconf;
       size_t cnt;
 
       if (filedata->dynamic_symbols == NULL)
 	{
 	  error (_("conflict list found without a dynamic symbol table\n"));
 	  return FALSE;
 	}
 
       /* PR 21345 - print a slightly more helpful error message
 	 if we are sure that the cmalloc will fail.  */
       if (conflictsno > filedata->file_size / sizeof (* iconf))
 	{
 	  error (_("Overlarge number of conflicts detected: %lx\n"),
 		 (long) conflictsno);
 	  return FALSE;
 	}
 
       iconf = (Elf32_Conflict *) cmalloc (conflictsno, sizeof (* iconf));
       if (iconf == NULL)
 	{
 	  error (_("Out of memory allocating space for dynamic conflicts\n"));
 	  return FALSE;
 	}
 
       if (is_32bit_elf)
 	{
 	  Elf32_External_Conflict * econf32;
 
 	  econf32 = (Elf32_External_Conflict *)
 	    get_data (NULL, filedata, conflicts_offset,
 		      sizeof (*econf32), conflictsno, _("conflict"));
 	  if (!econf32)
 	    {
 	      free (iconf);
 	      return FALSE;
 	    }
 
 	  for (cnt = 0; cnt < conflictsno; ++cnt)
 	    iconf[cnt] = BYTE_GET (econf32[cnt]);
 
 	  free (econf32);
 	}
       else
 	{
 	  Elf64_External_Conflict * econf64;
 
 	  econf64 = (Elf64_External_Conflict *)
 	    get_data (NULL, filedata, conflicts_offset,
 		      sizeof (*econf64), conflictsno, _("conflict"));
 	  if (!econf64)
 	    {
 	      free (iconf);
 	      return FALSE;
 	    }
 
 	  for (cnt = 0; cnt < conflictsno; ++cnt)
 	    iconf[cnt] = BYTE_GET (econf64[cnt]);
 
 	  free (econf64);
 	}
 
       printf (ngettext ("\nSection '.conflict' contains %lu entry:\n",
 			"\nSection '.conflict' contains %lu entries:\n",
 			(unsigned long) conflictsno),
 	      (unsigned long) conflictsno);
       puts (_("  Num:    Index       Value  Name"));
 
       for (cnt = 0; cnt < conflictsno; ++cnt)
 	{
 	  printf ("%5lu: %8lu  ", (unsigned long) cnt, iconf[cnt]);
 
 	  if (iconf[cnt] >= filedata->num_dynamic_syms)
 	    printf (_("<corrupt symbol index>"));
 	  else
 	    {
 	      Elf_Internal_Sym * psym;
 
 	      psym = & filedata->dynamic_symbols[iconf[cnt]];
 	      print_vma (psym->st_value, FULL_HEX);
 	      putchar (' ');
 	      if (VALID_DYNAMIC_NAME (filedata, psym->st_name))
 		print_symbol (25, GET_DYNAMIC_NAME (filedata, psym->st_name));
 	      else
 		printf (_("<corrupt: %14ld>"), psym->st_name);
 	    }
 	  putchar ('\n');
 	}
 
       free (iconf);
     }
 
   if (pltgot != 0 && local_gotno != 0)
     {
       bfd_vma ent, local_end, global_end;
       size_t i, offset;
       unsigned char * data;
       unsigned char * data_end;
       int addr_size;
 
       ent = pltgot;
       addr_size = (is_32bit_elf ? 4 : 8);
       local_end = pltgot + local_gotno * addr_size;
 
       /* PR binutils/17533 file: 012-111227-0.004  */
       if (symtabno < gotsym)
 	{
 	  error (_("The GOT symbol offset (%lu) is greater than the symbol table size (%lu)\n"),
 		 (unsigned long) gotsym, (unsigned long) symtabno);
 	  return FALSE;
 	}
 
       global_end = local_end + (symtabno - gotsym) * addr_size;
       /* PR 17531: file: 54c91a34.  */
       if (global_end < local_end)
 	{
 	  error (_("Too many GOT symbols: %lu\n"), (unsigned long) symtabno);
 	  return FALSE;
 	}
 
       offset = offset_from_vma (filedata, pltgot, global_end - pltgot);
       data = (unsigned char *) get_data (NULL, filedata, offset,
                                          global_end - pltgot, 1,
 					 _("Global Offset Table data"));
       /* PR 12855: Null data is handled gracefully throughout.  */
       data_end = data + (global_end - pltgot);
 
       printf (_("\nPrimary GOT:\n"));
       printf (_(" Canonical gp value: "));
       print_vma (pltgot + 0x7ff0, LONG_HEX);
       printf ("\n\n");
 
       printf (_(" Reserved entries:\n"));
       printf (_("  %*s %10s %*s Purpose\n"),
 	      addr_size * 2, _("Address"), _("Access"),
 	      addr_size * 2, _("Initial"));
       ent = print_mips_got_entry (data, pltgot, ent, data_end);
       printf (_(" Lazy resolver\n"));
       if (ent == (bfd_vma) -1)
 	goto got_print_fail;
 
       /* Check for the MSB of GOT[1] being set, denoting a GNU object.
 	 This entry will be used by some runtime loaders, to store the
 	 module pointer.  Otherwise this is an ordinary local entry.
 	 PR 21344: Check for the entry being fully available before
 	 fetching it.  */
       if (data
 	  && data + ent - pltgot + addr_size <= data_end
 	  && (byte_get (data + ent - pltgot, addr_size)
 	      >> (addr_size * 8 - 1)) != 0)
 	{
 	  ent = print_mips_got_entry (data, pltgot, ent, data_end);
 	  printf (_(" Module pointer (GNU extension)\n"));
 	  if (ent == (bfd_vma) -1)
 	    goto got_print_fail;
 	}
       printf ("\n");
 
       if (data != NULL && ent < local_end)
 	{
 	  printf (_(" Local entries:\n"));
 	  printf ("  %*s %10s %*s\n",
 		  addr_size * 2, _("Address"), _("Access"),
 		  addr_size * 2, _("Initial"));
 	  while (ent < local_end)
 	    {
 	      ent = print_mips_got_entry (data, pltgot, ent, data_end);
 	      printf ("\n");
 	      if (ent == (bfd_vma) -1)
 		goto got_print_fail;
 	    }
 	  printf ("\n");
 	}
 
       if (data != NULL && gotsym < symtabno)
 	{
 	  int sym_width;
 
 	  printf (_(" Global entries:\n"));
 	  printf ("  %*s %10s %*s %*s %-7s %3s %s\n",
 		  addr_size * 2, _("Address"),
 		  _("Access"),
 		  addr_size * 2, _("Initial"),
 		  addr_size * 2, _("Sym.Val."),
 		  _("Type"),
 		  /* Note for translators: "Ndx" = abbreviated form of "Index".  */
 		  _("Ndx"), _("Name"));
 
 	  sym_width = (is_32bit_elf ? 80 : 160) - 28 - addr_size * 6 - 1;
 
 	  for (i = gotsym; i < symtabno; i++)
 	    {
 	      ent = print_mips_got_entry (data, pltgot, ent, data_end);
 	      printf (" ");
 
 	      if (filedata->dynamic_symbols == NULL)
 		printf (_("<no dynamic symbols>"));
 	      else if (i < filedata->num_dynamic_syms)
 		{
 		  Elf_Internal_Sym * psym = filedata->dynamic_symbols + i;
 
 		  print_vma (psym->st_value, LONG_HEX);
 		  printf (" %-7s %3s ",
 			  get_symbol_type (filedata, ELF_ST_TYPE (psym->st_info)),
 			  get_symbol_index_type (filedata, psym->st_shndx));
 
 		  if (VALID_DYNAMIC_NAME (filedata, psym->st_name))
 		    print_symbol (sym_width,
 				  GET_DYNAMIC_NAME (filedata, psym->st_name));
 		  else
 		    printf (_("<corrupt: %14ld>"), psym->st_name);
 		}
 	      else
 		printf (_("<symbol index %lu exceeds number of dynamic symbols>"),
 			(unsigned long) i);
 
 	      printf ("\n");
 	      if (ent == (bfd_vma) -1)
 		break;
 	    }
 	  printf ("\n");
 	}
 
     got_print_fail:
       free (data);
     }
 
   if (mips_pltgot != 0 && jmprel != 0 && pltrel != 0 && pltrelsz != 0)
     {
       bfd_vma ent, end;
       size_t offset, rel_offset;
       unsigned long count, i;
       unsigned char * data;
       int addr_size, sym_width;
       Elf_Internal_Rela * rels;
 
       rel_offset = offset_from_vma (filedata, jmprel, pltrelsz);
       if (pltrel == DT_RELA)
 	{
 	  if (!slurp_rela_relocs (filedata, rel_offset, pltrelsz, &rels, &count))
 	    return FALSE;
 	}
       else
 	{
 	  if (!slurp_rel_relocs (filedata, rel_offset, pltrelsz, &rels, &count))
 	    return FALSE;
 	}
 
       ent = mips_pltgot;
       addr_size = (is_32bit_elf ? 4 : 8);
       end = mips_pltgot + (2 + count) * addr_size;
 
       offset = offset_from_vma (filedata, mips_pltgot, end - mips_pltgot);
       data = (unsigned char *) get_data (NULL, filedata, offset, end - mips_pltgot,
                                          1, _("Procedure Linkage Table data"));
       if (data == NULL)
 	return FALSE;
 
       printf ("\nPLT GOT:\n\n");
       printf (_(" Reserved entries:\n"));
       printf (_("  %*s %*s Purpose\n"),
 	      addr_size * 2, _("Address"), addr_size * 2, _("Initial"));
       ent = print_mips_pltgot_entry (data, mips_pltgot, ent);
       printf (_(" PLT lazy resolver\n"));
       ent = print_mips_pltgot_entry (data, mips_pltgot, ent);
       printf (_(" Module pointer\n"));
       printf ("\n");
 
       printf (_(" Entries:\n"));
       printf ("  %*s %*s %*s %-7s %3s %s\n",
 	      addr_size * 2, _("Address"),
 	      addr_size * 2, _("Initial"),
 	      addr_size * 2, _("Sym.Val."), _("Type"), _("Ndx"), _("Name"));
       sym_width = (is_32bit_elf ? 80 : 160) - 17 - addr_size * 6 - 1;
       for (i = 0; i < count; i++)
 	{
 	  unsigned long idx = get_reloc_symindex (rels[i].r_info);
 
 	  ent = print_mips_pltgot_entry (data, mips_pltgot, ent);
 	  printf (" ");
 
 	  if (idx >= filedata->num_dynamic_syms)
 	    printf (_("<corrupt symbol index: %lu>"), idx);
 	  else
 	    {
 	      Elf_Internal_Sym * psym = filedata->dynamic_symbols + idx;
 
 	      print_vma (psym->st_value, LONG_HEX);
 	      printf (" %-7s %3s ",
 		      get_symbol_type (filedata, ELF_ST_TYPE (psym->st_info)),
 		      get_symbol_index_type (filedata, psym->st_shndx));
 	      if (VALID_DYNAMIC_NAME (filedata, psym->st_name))
 		print_symbol (sym_width,
 			      GET_DYNAMIC_NAME (filedata, psym->st_name));
 	      else
 		printf (_("<corrupt: %14ld>"), psym->st_name);
 	    }
 	  printf ("\n");
 	}
       printf ("\n");
 
       free (data);
       free (rels);
     }
 
   return res;
 }
diff --git a/include/ChangeLog b/include/ChangeLog
index f6200db75c1..3c2765274d4 100644
--- a/include/ChangeLog
+++ b/include/ChangeLog
@@ -1,325 +1,330 @@
+2020-06-11  Alan Modra  <amodra@gmail.com>
+
+	* elf/mips.h (Elf32_RegInfo): Use fixed width integer types.
+	(Elf64_Internal_RegInfo, Elf_Internal_Options): Likewise.
+
 2020-06-06  Alan Modra  <amodra@gmail.com>
 
 	* elf/ppc64.h (elf_ppc64_reloc_type): Rename
 	R_PPC64_GOT_TLSGD34 to R_PPC64_GOT_TLSGD_PCREL34,
 	R_PPC64_GOT_TLSLD34 to R_PPC64_GOT_TLSLD_PCREL34,
 	R_PPC64_GOT_TPREL34 to R_PPC64_GOT_TPREL_PCREL34, and
 	R_PPC64_GOT_DTPREL34 to R_PPC64_GOT_DTPREL_PCREL34.
 
 2020-06-04  Jose E. Marchesi  <jose.marchesi@oracle.com>
 
 	* opcode/cgen.h: Get an `endian' argument in both
 	cgen_get_insn_value and cgen_put_insn_value.
 
 2020-06-04  Jose E. Marchesi  <jemarch@gnu.org>
 
 	* opcode/cgen.h (enum cgen_cpu_open_arg): New value
 	CGEN_CPU_OPEN_INSN_ENDIAN.
 
 2020-06-03  Nelson Chu  <nelson.chu@sifive.com>
 
 	* opcode/riscv.h: Remove #include "bfd.h".  And change the return
 	types of riscv_get_isa_spec_class and riscv_get_priv_spec_class
 	from bfd_boolean to int.
 
 2020-05-28  Alan Modra  <amodra@gmail.com>
 
 	PR 26044
 	* opcode/tilepro.h (TILEPRO_NUM_PIPELINE_ENCODINGS): Move to
 	tilepro_pipeline enum.
 
 2020-05-27  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR ld/22909
 	* bfdlink.h (textrel_check_method): New enum.
 	(bfd_link_textrel_check): New.
 	(bfd_link_info): Replace warn_shared_textrel and error_textrel
 	with textrel_check.
 
 2020-05-25  H.J. Lu  <hongjiu.lu@intel.com>
 
 	* elf/common.h: Update comments for ET_EXEC and ET_DYN.
 
 2020-05-20  Nelson Chu  <nelson.chu@sifive.com>
 
 	* opcode/riscv.h: Include "bfd.h" to support bfd_boolean.
 	(enum riscv_isa_spec_class): New enum class.  All supported ISA spec
 	belong to one of the class
 	(struct riscv_ext_version): New structure holds version information
 	for the specific ISA.
 	* opcode/riscv-opc.h (DECLARE_CSR): There are two version information,
 	define_version and abort_version.  The define_version means which
 	privilege spec is started to define the CSR, and the abort_version
 	means which privilege spec is started to abort the CSR.  If the CSR is
 	valid for the newest spec, then the abort_version should be
 	PRIV_SPEC_CLASS_DRAFT.
 	(DECLARE_CSR_ALIAS): Same as DECLARE_CSR, but only for the obselete CSR.
 	* opcode/riscv.h (enum riscv_priv_spec_class): New enum class.  Define
 	the current supported privilege spec versions.
 	(struct riscv_csr_extra): Add new fields to store more information
 	about the CSR.  We use these information to find the suitable CSR
 	address when user choosing a specific privilege spec.
 
 2020-05-19  Alexander Fedotov  <alfedotov@gmail.com>
 
 	PR 25992
 	* opcode/arm.h (ARM_EXT2_V8R): Define. Modified ARM_AEXT2_V8R.
 
 2020-05-11  Alan Modra  <amodra@gmail.com>
 
 	* opcode/ppc.h (PPC_OPERAND_ACC): Define.  Renumber following
 	PPC_OPERAND defines.
 
 2020-05-11  Alan Modra  <amodra@gmail.com>
 
 	* elf/ppc64.h: Update comment.
 	* opcode/ppc.h (PPC_OPCODE_POWER10): Rename from PPC_OPCODE_POWERXX.
 
 2020-04-30  Alex Coplan  <alex.coplan@arm.com>
 
 	* opcode/aarch64.h (enum aarch64_opnd): Add
 	AARCH64_OPND_UNDEFINED.
 
 2020-04-23  Anton Kolesov  <anton.kolesov@synopsys.com>
 
 	* elf/common.h (NT_ARC_V2): New macro definitions.
 
 2020-04-22  Max Filippov  <jcmvbkbc@gmail.com>
 
 	PR ld/25861
 	* elf/xtensa.h (elf_xtensa_reloc_type): New entries for
 	R_XTENSA_PDIFF{8,16,32} and R_XTENSA_NDIFF{8,16,32}.
 
 2020-04-21  Alan Modra  <amodra@gmail.com>
 
 	* elf/sh.h (STO_SH5_ISA32, SHF_SH5_ISA32, SHF_SH5_ISA32_MIXED),
 	(SHT_SH5_CR_SORTED, STT_DATALABEL): Delete.
 
 2020-04-10  Fangrui Song <maskray@google.com>
 
 	PR binutils/24613
 	* bfdlink.h (enum report_method): Delete RM_GENERATE_WARNING and
 	RM_GENERATE_ERROR. Add RM_DIAGNOSE.
 	(struct bfd_link_info): Add warn_unresolved_syms.
 
 2020-04-14  Stephen Casner  <casner@acm.org>
 
 	PR ld/25677
 	* aout/aout64.h (N_DATADDR): Add IMAGIC case.
 
 2020-04-02  Jan W. Jagersma  <jwjagersma@gmail.com>
 
 	* coff/go32exe.h: Remove file.
 	* coff/internal.h (struct internal_filehdr): Remove field
 	go32stub.  Remove flag F_GO32STUB.
 
 2020-04-01  Martin Liska  <mliska@suse.cz>
 	    Maciej W. Rozycki <macro@linux-mips.org>
 
 	PR lto/94249
 	* plugin-api.h: Fix a typo.
 
 2020-03-30  Nelson Chu  <nelson.chu@sifive.com>
 
 	* opcode/riscv-opc.h: Update CSR to 1.11.
 
 2020-03-26  John Baldwin  <jhb@FreeBSD.org>
 
 	* elf/common.h (AT_FREEBSD_BSDFLAGS): Define.
 
 2020-03-24  Martin Liska  <mliska@suse.cz>
 
 	PR lto/94249
 	* plugin-api.h: Add more robust endianess detection.
 
 2020-03-21  Martin Liska  <mliska@suse.cz>
 
 	* plugin-api.h (enum ld_plugin_symbol_type): Remove
 	comma after last value of an enum.
 	* lto-symtab.h (enum gcc_plugin_symbol_type): Likewise.
 
 2020-03-19  Martin Liska  <mliska@suse.cz>
 
 	* lto-symtab.h (enum gcc_plugin_symbol_type): New.
 	(enum gcc_plugin_symbol_section_kind): Likewise.
 
 2020-03-19  Martin Liska  <mliska@suse.cz>
 
 	* plugin-api.h (struct ld_plugin_symbol): Split
 	int def into 4 char fields.
 	(enum ld_plugin_symbol_type): New.
 	(enum ld_plugin_symbol_section_kind): New.
 	(enum ld_plugin_tag): Add LDPT_ADD_SYMBOLS_V2.
 
 2020-03-13  Kamil Rytarowski  <n54@gmx.com>
 
 	* elf/common.h (NT_NETBSDCORE_LWPSTATUS): New define.
 
 2020-03-13  Kamil Rytarowski  <n54@gmx.com>
 
 	* elf/common.h (NT_NETBSDCORE_AUXV): New define.
 
 2020-03-13  Christophe Lyon  <christophe.lyon@linaro.org>
 
 	* bfdlink.h (bfd_link_info): Add non_contiguous_regions and
 	non_contiguous_regions_warnings fields.
 
 2020-03-13  Christian Eggers  <ceggers@gmx.de>
 
 	* bfdlink.h (struct bfd_link_order): Add unit (bytes/octets) to
 	offset and size members.
 	* elf/internal.h (struct elf_internal_phdr): Likewise for
 	p_align member.
 	(struct elf_segment_map): Likewise for p_paddr and p_size
 	members
 
 2020-03-13  Christian Eggers  <ceggers@gmx.de>
 
 	* elf/internal.h (struct elf_internal_phdr): Add unit (octets)
 	to several member field comments.
 	(Elf_Internal_Shdr): likewise.
 
 2020-03-10  Alan Modra  <amodra@gmail.com>
 
 	* som/aout.h (SOM_AUX_ID_MANDATORY, SOM_SPACE_IS_LOADABLE),
 	(SOM_SYMBOL_HIDDEN, SOM_SYMBOL_HAS_LONG_RETURN): Use 1u << 31.
 	* som/lst.h (LST_SYMBOL_HIDDEN): Likewise.
 
 2020-03-03  Luis Machado  <luis.machado@linaro.org>
 
 	* elf/common.h (AT_L1I_CACHESIZE, AT_L1I_CACHEGEOMETRY)
 	(AT_L1D_CACHESIZE, AT_L1D_CACHEGEOMETRY, AT_L2_CACHESIZE)
 	(AT_L2_CACHEGEOMETRY, AT_L3_CACHESIZE, AT_L3_CACHEGEOMETRY)
 	(AT_MINSIGSTKSZ): New defines, imported from glibc.
 
 2020-02-25  Andrew Burgess  <andrew.burgess@embecosm.com>
 
 	Import from gcc mainline:
 	2020-02-05  Andrew Burgess  <andrew.burgess@embecosm.com>
 
 	* hashtab.h (htab_remove_elt): Make a parameter const.
 	(htab_remove_elt_with_hash): Likewise.
 
 2020-02-20  Nelson Chu  <nelson.chu@sifive.com>
 
 	* opcode/riscv-opc.h: Extend DECLARE_CSR and DECLARE_CSR_ALIAS to
 	record riscv_csr_class.
 
 2020-02-10  Stam Markianos-Wright  <stam.markianos-wright@arm.com>
 	    Matthew Malcomson  <matthew.malcomson@arm.com>
 
 	* opcode/arm.h (ARM_EXT2_CDE): New extension macro.
 	(ARM_EXT2_CDE0): New extension macro.
 	(ARM_EXT2_CDE1): New extension macro.
 	(ARM_EXT2_CDE2): New extension macro.
 	(ARM_EXT2_CDE3): New extension macro.
 	(ARM_EXT2_CDE4): New extension macro.
 	(ARM_EXT2_CDE5): New extension macro.
 	(ARM_EXT2_CDE6): New extension macro.
 	(ARM_EXT2_CDE7): New extension macro.
 
 2020-02-07  Sergey Belyashov  <sergey.belyashov@gmail.com>
 
 	PR 25469
 	* coff/internal.h (R_IMM16BE): Define.
 	* elf/z80.h (EF_Z80_MACH_Z80N): Define.
 	(R_Z80_16_BE): New reloc.
 
 2020-02-04  Alan Modra  <amodra@gmail.com>
 
 	* opcode/d30v.h (struct pd_reg): Make value field unsigned.
 
 2020-01-16  Jon Turney  <jon.turney@dronecode.org.uk>
 
 	* coff/internal.h (PE_IMAGE_DEBUG_TYPE_VC_FEATURE)
 	(PE_IMAGE_DEBUG_TYPE_POGO, PE_IMAGE_DEBUG_TYPE_ILTCG)
 	(PE_IMAGE_DEBUG_TYPE_MPX, PE_IMAGE_DEBUG_TYPE_REPRO): Add.
 
 2020-01-18  Nick Clifton  <nickc@redhat.com>
 
 	Binutils 2.34 branch created.
 
 2020-01-17  Nick Clifton  <nickc@redhat.com>
 
 	* Import from gcc mainline:
 	2019-06-10  Martin Liska  <mliska@suse.cz>
 
 	* ansidecl.h (ATTRIBUTE_WARN_UNUSED_RESULT): New macro.
 	* libiberty.h (xmalloc): Use it.
 	(xrealloc): Likewise.
 	(xcalloc): Likewise.
 	(xstrdup): Likewise.
 	(xstrndup): Likewise.
 	(xmemdup): Likewise.
 
 	2019-06-10  Martin Liska  <mliska@suse.cz>
 
 	* ansidecl.h:
 	(ATTRIBUTE_RESULT_SIZE_1): Define new macro.
 	(ATTRIBUTE_RESULT_SIZE_2): Likewise.
 	(ATTRIBUTE_RESULT_SIZE_1_2): Likewise.
 	* libiberty.h (xmalloc): Add RESULT_SIZE attribute.
 	(xrealloc): Likewise.
 	(xcalloc): Likewise.
 
 	2019-11-16  Tim Ruehsen  <tim.ruehsen@gmx.de>
 
 	* demangle.h (struct demangle_component): Add member
 	d_counting.
 
 	2019-11-16  Eduard-Mihai Burtescu  <eddyb@lyken.rs>
 
 	* demangle.h (rust_demangle_callback): Add.
 
 	2019-07-18  Eduard-Mihai Burtescu  <eddyb@lyken.rs>
 
 	* demangle.h (rust_is_mangled): Move to libiberty/rust-demangle.h.
 	(rust_demangle_sym): Move to libiberty/rust-demangle.h.
 
 2020-01-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
 
 	PR 25376
 	* opcodes/arm.h (FPU_MVE, FPU_MVE_FPU): Move these features to...
 	(ARM_EXT2_MVE, ARM_EXT2_MVE_FP): ... the CORE_HIGH space.
 	(ARM_ANY): Redefine to not include any MVE bits.
 	(ARM_FEATURE_ALL): Removed.
 
 2020-01-15  Jozef Lawrynowicz  <jozef.l@mittosystems.com>
 
 	* opcode/msp430.h (enum msp430_expp_e): New.
 	(struct msp430_operand_s): Add expp member to struct.
 
 2020-01-13  Claudiu Zissulescu  <claziss@gmail.com>
 
 	* elf/arc-cpu.def: Update ARC cpu list.
 
 2020-01-13  Alan Modra  <amodra@gmail.com>
 
 	* opcode/tic4x.h (EXTR): Delete.
 	(EXTRU, EXTRS, INSERTU, INSERTS): Rewrite without zero/sign
 	extension using shifts.  Do trim INSERTU value to specified bitfield.
 
 2020-01-10  Alan Modra  <amodra@gmail.com>
 
 	* opcode/spu.h: Formatting.
 	(UNSIGNED_EXTRACT): Use 1u.
 	(SIGNED_EXTRACT): Don't sign extend with shifts.
 	(DECODE_INSN_I9a, DECODE_INSN_I9b): Avoid left shift of signed value.
 	Keep result signed.
 	(DECODE_INSN_U9a, DECODE_INSN_U9b): Delete.
 
 2020-01-07  Shahab Vahedi  <shahab@synopsys.com>
 
 	* opcode/arc.h (insn_class_t): Add 'LLOCK' and 'SCOND'.
 
 2020-01-02  Sergey Belyashov  <sergey.belyashov@gmail.com>
 
 	* coff/internal.h: Add defintions of Z80 reloc names.
 
 2020-01-02  Christian Biesinger  <cbiesinger@google.com>
 
 	* opcode/s12z.h: Undef REG_Y.
 
 2020-01-01  Alan Modra  <amodra@gmail.com>
 
 	Update year range in copyright notice of all files.
diff --git a/include/elf/mips.h b/include/elf/mips.h
index d116b036b62..cc08ebd4318 100644
--- a/include/elf/mips.h
+++ b/include/elf/mips.h
@@ -558,13 +558,13 @@ typedef union
 /* A section of type SHT_MIPS_REGINFO contains the following
    structure.  */
 typedef struct
 {
   /* Mask of general purpose registers used.  */
-  unsigned long ri_gprmask;
+  uint32_t ri_gprmask;
   /* Mask of co-processor registers used.  */
-  unsigned long ri_cprmask[4];
+  uint32_t ri_cprmask[4];
   /* GP register value for this object file.  */
-  long ri_gp_value;
+  uint32_t ri_gp_value;
 } Elf32_RegInfo;
 
 /* The external version of the Elf_RegInfo structure.  */
@@ -1004,13 +1004,13 @@ typedef struct
 typedef struct
 {
   /* Type of option.  */
   unsigned char kind;
   /* Size of option descriptor, including header.  */
   unsigned char size;
   /* Section index of affected section, or 0 for global option.  */
-  unsigned short section;
+  uint16_t section;
   /* Information specific to this kind of option.  */
-  unsigned long info;
+  uint32_t info;
 } Elf_Internal_Options;
 
 /* MIPS ELF option header swapping routines.  */
@@ -1074,13 +1074,13 @@ typedef struct
 typedef struct
 {
   /* Mask of general purpose registers used.  */
-  unsigned long ri_gprmask;
+  uint32_t ri_gprmask;
   /* Padding.  */
-  unsigned long ri_pad;
+  uint32_t ri_pad;
   /* Mask of co-processor registers used.  */
-  unsigned long ri_cprmask[4];
+  uint32_t ri_cprmask[4];
   /* GP register value for this object file.  */
-  bfd_vma ri_gp_value;
+  uint64_t ri_gp_value;
 } Elf64_Internal_RegInfo;
 
 /* ABI Flags structure version 0.  */
