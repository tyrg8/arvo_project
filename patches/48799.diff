commit 9450f759748d02d1d284d2e4afd741cb0fe0c04a
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Tue Jul 12 20:43:20 2022 +0200

    avcodec/lagarith: Check dst/src in zero run code
    
    Fixes: out of array access
    Fixes: 48799/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_LAGARITH_fuzzer-4764457825337344
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg
    Reviewed-by: Paul B Mahol <onemda@gmail.com>
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavcodec/lagarith.c b/libavcodec/lagarith.c
index 3aeb1c8a99..00e8005222 100644
--- a/libavcodec/lagarith.c
+++ b/libavcodec/lagarith.c
@@ -387,39 +387,42 @@ static int lag_decode_zero_run_line(LagarithContext *l, uint8_t *dst,
 output_zeros:
     if (l->zeros_rem) {
         count = FFMIN(l->zeros_rem, width - i);
         if (end - dst < count) {
             av_log(l->avctx, AV_LOG_ERROR, "Too many zeros remaining.\n");
             return AVERROR_INVALIDDATA;
         }
 
         memset(dst, 0, count);
         l->zeros_rem -= count;
         dst += count;
     }
 
     while (dst < end) {
         i = 0;
         while (!zero_run && dst + i < end) {
             i++;
             if (i+2 >= src_end - src)
                 return AVERROR_INVALIDDATA;
             zero_run =
                 !(src[i] | (src[i + 1] & mask1) | (src[i + 2] & mask2));
         }
         if (zero_run) {
             zero_run = 0;
             i += esc_count;
+            if (i >  end - dst ||
+                i >= src_end - src)
+                return AVERROR_INVALIDDATA;
             memcpy(dst, src, i);
             dst += i;
             l->zeros_rem = lag_calc_zero_run(src[i]);
 
             src += i + 1;
             goto output_zeros;
         } else {
             memcpy(dst, src, i);
             src += i;
             dst += i;
         }
     }
     return  src - src_start;
 }
