commit c6adb90a273f22159b0775f798724d36d552d36c
Author: Garret Rieger <grieger@google.com>
Date:   Mon Mar 29 16:08:44 2021 -0700

    [subset] fix nullptr deref.

diff --git a/src/hb-ot-layout-gsubgpos.hh b/src/hb-ot-layout-gsubgpos.hh
index 6fdf190cc..35fdfbdcd 100644
--- a/src/hb-ot-layout-gsubgpos.hh
+++ b/src/hb-ot-layout-gsubgpos.hh
@@ -67,122 +67,124 @@ struct hb_have_non_1to1_context_t :
 struct hb_closure_context_t :
        hb_dispatch_context_t<hb_closure_context_t>
 {
   typedef return_t (*recurse_func_t) (hb_closure_context_t *c, unsigned lookup_index, hb_set_t *covered_seq_indicies, unsigned seq_index, unsigned end_index);
   template <typename T>
   return_t dispatch (const T &obj) { obj.closure (this); return hb_empty_t (); }
   static return_t default_return_value () { return hb_empty_t (); }
   void recurse (unsigned lookup_index, hb_set_t *covered_seq_indicies, unsigned seq_index, unsigned end_index)
   {
     if (unlikely (nesting_level_left == 0 || !recurse_func))
       return;
 
     nesting_level_left--;
     recurse_func (this, lookup_index, covered_seq_indicies, seq_index, end_index);
     nesting_level_left++;
   }
 
   bool lookup_limit_exceeded ()
   { return lookup_count > HB_MAX_LOOKUP_INDICES; }
 
   bool should_visit_lookup (unsigned int lookup_index)
   {
     if (lookup_count++ > HB_MAX_LOOKUP_INDICES)
       return false;
 
     if (is_lookup_done (lookup_index))
       return false;
 
     return true;
   }
 
   bool is_lookup_done (unsigned int lookup_index)
   {
     if (done_lookups_glyph_count->in_error () ||
         done_lookups_glyph_set->in_error ())
       return true;
 
     /* Have we visited this lookup with the current set of glyphs? */
     if (done_lookups_glyph_count->get (lookup_index) != glyphs->get_population ())
     {
       done_lookups_glyph_count->set (lookup_index, glyphs->get_population ());
-      
+
       if (!done_lookups_glyph_set->get (lookup_index))
+      {
         done_lookups_glyph_set->set (lookup_index, hb_set_create ());
-
-      done_lookups_glyph_set->get (lookup_index)->clear ();
+      } else {
+        done_lookups_glyph_set->get (lookup_index)->clear ();
+      }
     }
 
     hb_set_t *covered_glyph_set = done_lookups_glyph_set->get (lookup_index);
     if (parent_active_glyphs ()->is_subset (covered_glyph_set))
       return true;
-    
+
     hb_set_union (covered_glyph_set, parent_active_glyphs ());
     return false;
   }
 
   hb_set_t* parent_active_glyphs ()
   {
     if (active_glyphs_stack.length < 1)
       return glyphs;
-    
+
     return active_glyphs_stack.tail ();
   }
 
   void push_cur_active_glyphs (hb_set_t* cur_active_glyph_set)
   {
     active_glyphs_stack.push (cur_active_glyph_set);
   }
 
   bool pop_cur_done_glyphs ()
   {
     if (active_glyphs_stack.length < 1)
       return false;
 
     active_glyphs_stack.pop ();
     return true;
   }
 
   hb_face_t *face;
   hb_set_t *glyphs;
   hb_set_t *cur_intersected_glyphs;
   hb_set_t output[1];
   hb_vector_t<hb_set_t *> active_glyphs_stack;
   recurse_func_t recurse_func;
   unsigned int nesting_level_left;
 
   hb_closure_context_t (hb_face_t *face_,
 			hb_set_t *glyphs_,
 			hb_set_t *cur_intersected_glyphs_,
 			hb_map_t *done_lookups_glyph_count_,
 			hb_hashmap_t<unsigned, hb_set_t *, (unsigned)-1, nullptr> *done_lookups_glyph_set_,
 			unsigned int nesting_level_left_ = HB_MAX_NESTING_LEVEL) :
 			  face (face_),
 			  glyphs (glyphs_),
 			  cur_intersected_glyphs (cur_intersected_glyphs_),
 			  recurse_func (nullptr),
 			  nesting_level_left (nesting_level_left_),
 			  done_lookups_glyph_count (done_lookups_glyph_count_),
 			  done_lookups_glyph_set (done_lookups_glyph_set_),
 			  lookup_count (0)
   {
     push_cur_active_glyphs (glyphs_);
   }
 
   ~hb_closure_context_t () { flush (); }
 
   void set_recurse_func (recurse_func_t func) { recurse_func = func; }
 
   void flush ()
   {
     hb_set_del_range (output, face->get_num_glyphs (), hb_set_get_max (output));	/* Remove invalid glyphs. */
     hb_set_union (glyphs, output);
     hb_set_clear (output);
     active_glyphs_stack.pop ();
     active_glyphs_stack.fini ();
   }
 
   private:
   hb_map_t *done_lookups_glyph_count;
   hb_hashmap_t<unsigned, hb_set_t *, (unsigned)-1, nullptr> *done_lookups_glyph_set;
   unsigned int lookup_count;
 };
@@ -1231,62 +1233,62 @@ enum ContextFormat { SimpleContext = 1, ClassBasedContext = 2, CoverageBasedCont
 static void context_closure_recurse_lookups (hb_closure_context_t *c,
 					     unsigned inputCount, const HBUINT16 input[],
 					     unsigned lookupCount,
 					     const LookupRecord lookupRecord[] /* Array of LookupRecords--in design order */,
 					     unsigned value,
 					     ContextFormat context_format,
 					     const void *data,
 					     intersected_glyphs_func_t intersected_glyphs_func)
 {
   hb_set_t *covered_seq_indicies = hb_set_create ();
   for (unsigned int i = 0; i < lookupCount; i++)
   {
     unsigned seqIndex = lookupRecord[i].sequenceIndex;
     if (seqIndex > inputCount) continue;
 
     hb_set_t *pos_glyphs = hb_set_create ();
 
     if (hb_set_is_empty (covered_seq_indicies) || !hb_set_has (covered_seq_indicies, seqIndex))
     {
       if (seqIndex == 0)
       {
         switch (context_format) {
         case ContextFormat::SimpleContext:
           pos_glyphs->add (value);
           break;
         case ContextFormat::ClassBasedContext:
           intersected_glyphs_func (c->cur_intersected_glyphs, data, value, pos_glyphs);
           break;
         case ContextFormat::CoverageBasedContext:
           hb_set_set (pos_glyphs, c->cur_intersected_glyphs);
           break;
         }
       }
       else
       {
         const void *input_data = input;
         unsigned input_value = seqIndex - 1;
         if (context_format != ContextFormat::SimpleContext)
         {
           input_data = data;
           input_value = input[seqIndex - 1];
         }
-       
+
         intersected_glyphs_func (c->glyphs, input_data, input_value, pos_glyphs);
       }
     }
 
     hb_set_add (covered_seq_indicies, seqIndex);
     c->push_cur_active_glyphs (pos_glyphs);
-   
+
     unsigned endIndex = inputCount;
     if (context_format == ContextFormat::CoverageBasedContext)
       endIndex += 1;
 
     c->recurse (lookupRecord[i].lookupListIndex, covered_seq_indicies, seqIndex, endIndex);
-    
+
     c->pop_cur_done_glyphs ();
     hb_set_destroy (pos_glyphs);
   }
 
   hb_set_destroy (covered_seq_indicies);
 }
@@ -3506,313 +3508,313 @@ struct hb_ot_layout_lookup_accelerator_t
 struct GSUBGPOS
 {
   bool has_data () const { return version.to_int (); }
   unsigned int get_script_count () const
   { return (this+scriptList).len; }
   const Tag& get_script_tag (unsigned int i) const
   { return (this+scriptList).get_tag (i); }
   unsigned int get_script_tags (unsigned int start_offset,
 				unsigned int *script_count /* IN/OUT */,
 				hb_tag_t     *script_tags /* OUT */) const
   { return (this+scriptList).get_tags (start_offset, script_count, script_tags); }
   const Script& get_script (unsigned int i) const
   { return (this+scriptList)[i]; }
   bool find_script_index (hb_tag_t tag, unsigned int *index) const
   { return (this+scriptList).find_index (tag, index); }
 
   unsigned int get_feature_count () const
   { return (this+featureList).len; }
   hb_tag_t get_feature_tag (unsigned int i) const
   { return i == Index::NOT_FOUND_INDEX ? HB_TAG_NONE : (this+featureList).get_tag (i); }
   unsigned int get_feature_tags (unsigned int start_offset,
 				 unsigned int *feature_count /* IN/OUT */,
 				 hb_tag_t     *feature_tags /* OUT */) const
   { return (this+featureList).get_tags (start_offset, feature_count, feature_tags); }
   const Feature& get_feature (unsigned int i) const
   { return (this+featureList)[i]; }
   bool find_feature_index (hb_tag_t tag, unsigned int *index) const
   { return (this+featureList).find_index (tag, index); }
 
   unsigned int get_lookup_count () const
   { return (this+lookupList).len; }
   const Lookup& get_lookup (unsigned int i) const
   { return (this+lookupList)[i]; }
 
   bool find_variations_index (const int *coords, unsigned int num_coords,
 			      unsigned int *index) const
   {
 #ifdef HB_NO_VAR
     *index = FeatureVariations::NOT_FOUND_INDEX;
     return false;
 #endif
     return (version.to_int () >= 0x00010001u ? this+featureVars : Null (FeatureVariations))
 	    .find_index (coords, num_coords, index);
   }
   const Feature& get_feature_variation (unsigned int feature_index,
 					unsigned int variations_index) const
   {
 #ifndef HB_NO_VAR
     if (FeatureVariations::NOT_FOUND_INDEX != variations_index &&
 	version.to_int () >= 0x00010001u)
     {
       const Feature *feature = (this+featureVars).find_substitute (variations_index,
 								   feature_index);
       if (feature)
 	return *feature;
     }
 #endif
     return get_feature (feature_index);
   }
 
   void feature_variation_collect_lookups (const hb_set_t *feature_indexes,
 					  hb_set_t       *lookup_indexes /* OUT */) const
   {
 #ifndef HB_NO_VAR
     if (version.to_int () >= 0x00010001u)
       (this+featureVars).collect_lookups (feature_indexes, lookup_indexes);
 #endif
   }
 
   template <typename TLookup>
   void closure_lookups (hb_face_t      *face,
 			const hb_set_t *glyphs,
 			hb_set_t       *lookup_indexes /* IN/OUT */) const
   {
     hb_set_t visited_lookups, inactive_lookups;
     OT::hb_closure_lookups_context_t c (face, glyphs, &visited_lookups, &inactive_lookups);
 
     for (unsigned lookup_index : + hb_iter (lookup_indexes))
       reinterpret_cast<const TLookup &> (get_lookup (lookup_index)).closure_lookups (&c, lookup_index);
 
     hb_set_union (lookup_indexes, &visited_lookups);
     hb_set_subtract (lookup_indexes, &inactive_lookups);
   }
 
   void prune_langsys (const hb_map_t *duplicate_feature_map,
                       hb_hashmap_t<unsigned, hb_set_t *, (unsigned)-1, nullptr> *script_langsys_map,
                       hb_set_t       *new_feature_indexes /* OUT */) const
   {
     hb_prune_langsys_context_t c (this, script_langsys_map, duplicate_feature_map, new_feature_indexes);
-    
+
     unsigned count = get_script_count ();
     for (unsigned script_index = 0; script_index < count; script_index++)
     {
       const Script& s = get_script (script_index);
       s.prune_langsys (&c, script_index);
     }
   }
 
   template <typename TLookup>
   bool subset (hb_subset_layout_context_t *c) const
   {
     TRACE_SUBSET (this);
     auto *out = c->subset_context->serializer->embed (*this);
     if (unlikely (!out)) return_trace (false);
 
     typedef LookupOffsetList<TLookup> TLookupList;
     reinterpret_cast<OffsetTo<TLookupList> &> (out->lookupList)
 	.serialize_subset (c->subset_context,
 			   reinterpret_cast<const OffsetTo<TLookupList> &> (lookupList),
 			   this,
 			   c);
 
     reinterpret_cast<OffsetTo<RecordListOfFeature> &> (out->featureList)
 	.serialize_subset (c->subset_context,
 			   reinterpret_cast<const OffsetTo<RecordListOfFeature> &> (featureList),
 			   this,
 			   c);
 
     out->scriptList.serialize_subset (c->subset_context,
 				      scriptList,
 				      this,
 				      c);
 
 #ifndef HB_NO_VAR
     if (version.to_int () >= 0x00010001u)
     {
       bool ret = out->featureVars.serialize_subset (c->subset_context, featureVars, this, c);
       if (!ret)
       {
 	out->version.major = 1;
 	out->version.minor = 0;
       }
     }
 #endif
 
     return_trace (true);
   }
 
   void find_duplicate_features (const hb_map_t *lookup_indices,
                                 const hb_set_t *feature_indices,
                                 hb_map_t *duplicate_feature_map /* OUT */) const
   {
     //find out duplicate features after subset
     unsigned prev = 0xFFFFu;
     for (unsigned i : feature_indices->iter ())
     {
       if (prev == 0xFFFFu)
       {
         duplicate_feature_map->set (i, i);
         prev = i;
         continue;
       }
 
       hb_tag_t t = get_feature_tag (i);
       hb_tag_t prev_t = get_feature_tag (prev);
       if (t != prev_t)
       {
         duplicate_feature_map->set (i, i);
         prev = i;
         continue;
       }
 
       const Feature& f = get_feature (i);
       const Feature& prev_f = get_feature (prev);
 
       auto f_iter =
       + hb_iter (f.lookupIndex)
       | hb_filter (lookup_indices)
       ;
 
       auto prev_iter =
       + hb_iter (prev_f.lookupIndex)
       | hb_filter (lookup_indices)
       ;
 
       if (f_iter.len () != prev_iter.len ())
       {
         duplicate_feature_map->set (i, i);
         prev = i;
         continue;
       }
 
       bool is_equal = true;
       for (auto _ : + hb_zip (f_iter, prev_iter))
         if (_.first != _.second) { is_equal = false; break; }
 
       if (is_equal == true) duplicate_feature_map->set (i, prev);
       else
       {
         duplicate_feature_map->set (i, i);
         prev = i;
       }
     }
   }
 
   void prune_features (const hb_map_t *lookup_indices, /* IN */
 		       hb_set_t       *feature_indices /* IN/OUT */) const
   {
 #ifndef HB_NO_VAR
     // This is the set of feature indices which have alternate versions defined
     // if the FeatureVariation's table and the alternate version(s) intersect the
     // set of lookup indices.
     hb_set_t alternate_feature_indices;
     if (version.to_int () >= 0x00010001u)
       (this+featureVars).closure_features (lookup_indices, &alternate_feature_indices);
     if (unlikely (alternate_feature_indices.in_error())) {
       feature_indices->successful = false;
       return;
     }
 #endif
 
     for (unsigned i : feature_indices->iter())
     {
       const Feature& f = get_feature (i);
 
       if (f.featureParams.is_null ()
 	  && !f.intersects_lookup_indexes (lookup_indices)
 #ifndef HB_NO_VAR
           && !alternate_feature_indices.has (i)
 #endif
 	  )
 	feature_indices->del (i);
     }
   }
 
   unsigned int get_size () const
   {
     return min_size +
 	   (version.to_int () >= 0x00010001u ? featureVars.static_size : 0);
   }
 
   template <typename TLookup>
   bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     typedef OffsetListOf<TLookup> TLookupList;
     if (unlikely (!(version.sanitize (c) &&
 		    likely (version.major == 1) &&
 		    scriptList.sanitize (c, this) &&
 		    featureList.sanitize (c, this) &&
 		    reinterpret_cast<const OffsetTo<TLookupList> &> (lookupList).sanitize (c, this))))
       return_trace (false);
 
 #ifndef HB_NO_VAR
     if (unlikely (!(version.to_int () < 0x00010001u || featureVars.sanitize (c, this))))
       return_trace (false);
 #endif
 
     return_trace (true);
   }
 
   template <typename T>
   struct accelerator_t
   {
     void init (hb_face_t *face)
     {
       this->table = hb_sanitize_context_t ().reference_table<T> (face);
       if (unlikely (this->table->is_blocklisted (this->table.get_blob (), face)))
       {
 	hb_blob_destroy (this->table.get_blob ());
 	this->table = hb_blob_get_empty ();
       }
 
       this->lookup_count = table->get_lookup_count ();
 
       this->accels = (hb_ot_layout_lookup_accelerator_t *) calloc (this->lookup_count, sizeof (hb_ot_layout_lookup_accelerator_t));
       if (unlikely (!this->accels))
       {
 	this->lookup_count = 0;
 	this->table.destroy ();
 	this->table = hb_blob_get_empty ();
       }
 
       for (unsigned int i = 0; i < this->lookup_count; i++)
 	this->accels[i].init (table->get_lookup (i));
     }
 
     void fini ()
     {
       for (unsigned int i = 0; i < this->lookup_count; i++)
 	this->accels[i].fini ();
       free (this->accels);
       this->table.destroy ();
     }
 
     hb_blob_ptr_t<T> table;
     unsigned int lookup_count;
     hb_ot_layout_lookup_accelerator_t *accels;
   };
 
   protected:
   FixedVersion<>version;	/* Version of the GSUB/GPOS table--initially set
 				 * to 0x00010000u */
   OffsetTo<ScriptList>
 		scriptList;	/* ScriptList table */
   OffsetTo<FeatureList>
 		featureList;	/* FeatureList table */
   OffsetTo<LookupList>
 		lookupList;	/* LookupList table */
   LOffsetTo<FeatureVariations>
 		featureVars;	/* Offset to Feature Variations
 				   table--from beginning of table
 				 * (may be NULL).  Introduced
 				 * in version 0x00010001. */
   public:
   DEFINE_SIZE_MIN (10);
 };
 
 
 } /* namespace OT */
 
 
 #endif /* HB_OT_LAYOUT_GSUBGPOS_HH */
