commit 5c205e6ea14ac1fad40720da0689256103739b60
Author: KOBAYASHI Shuji <shuujii@gmail.com>
Date:   Tue Dec 1 12:16:55 2020 +0900

    Revert "Create presym files for each build target" (58ba883e)
    
    Due to the above changes, it may not work with the existing build
    configurations in cross-compilation (even if we can build without presym),
    therefore revert it once (ref https://github.com/mruby/mruby/pull/5202#issuecomment-735412643). Sorry for the lack of consideration.

diff --git a/Rakefile b/Rakefile
index 8be192155..8ac1f7f8f 100644
--- a/Rakefile
+++ b/Rakefile
@@ -25,9 +25,9 @@ end
 # load custom rules
 load "#{MRUBY_ROOT}/tasks/core.rake"
 load "#{MRUBY_ROOT}/tasks/mrblib.rake"
+
 load "#{MRUBY_ROOT}/tasks/mrbgems.rake"
 load "#{MRUBY_ROOT}/tasks/libmruby.rake"
-load "#{MRUBY_ROOT}/tasks/presym.rake"
 
 load "#{MRUBY_ROOT}/tasks/benchmark.rake"
 
@@ -55,47 +55,179 @@ else
   depfiles = []
 end
 
+cfiles  = Dir.glob("#{MRUBY_ROOT}/src/*.c")
+rbfiles = Dir.glob("#{MRUBY_ROOT}/mrblib/**/*.rb")
+psfiles = []
 MRuby.each_target do |target|
   gems.each do |gem|
     current_dir = gem.dir.relative_path_from(Dir.pwd)
     relative_from_root = gem.dir.relative_path_from(MRUBY_ROOT)
     current_build_dir = File.expand_path "#{build_dir}/#{relative_from_root}"
 
     if current_build_dir !~ /^#{Regexp.escape(build_dir)}/
       current_build_dir = "#{build_dir}/mrbgems/#{gem.name}"
     end
 
     gem.bins.each do |bin|
       exec = exefile("#{build_dir}/bin/#{bin}")
       objs = Dir.glob("#{current_dir}/tools/#{bin}/*.{c,cpp,cxx,cc}").map { |f| objfile(f.pathmap("#{current_build_dir}/tools/#{bin}/%n")) }
 
       file exec => objs + target.libraries do |t|
         gem_flags = gems.map { |g| g.linker.flags }
         gem_flags_before_libraries = gems.map { |g| g.linker.flags_before_libraries }
         gem_flags_after_libraries = gems.map { |g| g.linker.flags_after_libraries }
         gem_libraries = gems.map { |g| g.linker.libraries }
         gem_library_paths = gems.map { |g| g.linker.library_paths }
         linker.run t.name, t.prerequisites, gem_libraries, gem_library_paths, gem_flags, gem_flags_before_libraries, gem_flags_after_libraries
       end
 
       if target == MRuby.targets['host']
         install_path = MRuby.targets['host'].exefile("#{bin_path}/#{bin}")
 
         file install_path => exec do |t|
           install_D t.prerequisites.first, t.name
         end
         depfiles += [ install_path ]
       else
         depfiles += [ exec ]
       end
     end
+
+    cfiles += Dir.glob(gem.dir+"/{src,core,tools/*}/*.c")
+    if gem.cdump?
+      rbfiles += Dir.glob(gem.dir+"/mrblib/**/*.rb")
+      psfiles += Dir.glob(gem.dir+"/**/presym")
+    end
   end
 end
 
-desc "preallocated symbols"
-task :gensym do
-  MRuby.each_target{|build| Rake::Task[build.presym_file].invoke}
+mkdir_p "#{MRUBY_ROOT}/build"
+symbols = []
+psfiles.each do |file|
+  symbols += File.readlines(file).grep_v(/^# /)
 end
+symbols.each{|x| x.chomp!}
+presym_file="#{MRUBY_ROOT}/build/presym"
+presym_inc="#{presym_file}.inc"
+op_table = {
+  "!" => "not",
+  "!=" => "neq",
+  "!~" => "nmatch",
+  "%" => "mod",
+  "&" => "and",
+  "&&" => "andand",
+  "*" => "mul",
+  "**" => "pow",
+  "+" => "add",
+  "+@" => "plus",
+  "-" => "sub",
+  "-@" => "minus",
+  "/" => "div",
+  "<" => "lt",
+  "<=" => "le",
+  "<<" => "lshift",
+  "<=>" => "cmp",
+  "==" => "eq",
+  "===" => "eqq",
+  "=~" => "match",
+  ">" => "gt",
+  ">=" => "ge",
+  ">>" => "rshift",
+  "[]" => "aref",
+  "[]=" => "aset",
+  "^" => "xor",
+  "`" => "tick",
+  "|" => "or",
+  "||" => "oror",
+  "~" => "neg",
+}
+macro_to_symbol = {
+#      Macro               Symbol
+# [prefix, suffix] => [prefix, suffix]
+  ["CV"  , ""    ] => ["@@"  , ""    ],
+  ["IV"  , ""    ] => ["@"   , ""    ],
+  [""    , "_B"  ] => [""    , "!"   ],
+  [""    , "_Q"  ] => [""    , "?"   ],
+  [""    , "_E"  ] => [""    , "="   ],
+  [""    , ""    ] => [""    , ""    ],
+}
+
+file presym_file => cfiles+rbfiles+psfiles+[__FILE__] do
+  prefix_re = Regexp.union(*macro_to_symbol.keys.map(&:first).uniq)
+  suffix_re = Regexp.union(*macro_to_symbol.keys.map(&:last).uniq)
+  macro_re = /MRB_(#{prefix_re})SYM(#{suffix_re})\((\w+)\)/o
+  csymbols = cfiles.map do |f|
+    src = File.read(f)
+    src.gsub!(/\/\/.+(\n|$)/, "\n")
+    [src.scan(/intern_lit\([^\n"]*"([^\n "]*)"/),
+     src.scan(/mrb_define_method\([^\n"]*"([^\n"]*)"/),
+     src.scan(/mrb_define_class_method\([^\n"]*"([^\n"]*)"/),
+     src.scan(/mrb_define_class\([^\n"]*"([^\n"]*)"/),
+     src.scan(/mrb_define_module\([^\n"]*"([^\n"]*)"/),
+     src.scan(/mrb_define_module_function\([^\n"]*"([^\n"]*)"/),
+     src.scan(/mrb_define_const\([^\n"]*"([^\n"]*)"/),
+     src.scan(/mrb_define_global_const\([^\n"]*"([^\n"]*)"/),
+     src.scan(macro_re).map{|prefix, suffix, name|
+       macro_to_symbol[[prefix, suffix]] * name
+     }]
+  end
+  csymbols += File.readlines("#{MRUBY_ROOT}/include/mruby.h").grep(/define E_/).join.scan(/MRB_SYM\((\w+)\)/)
+
+  rbsymbols = rbfiles.map do |f|
+    src = File.read(f)
+    src.force_encoding(Encoding::BINARY)
+    [src.scan(/\bclass +([A-Z]\w*)/),
+     src.scan(/\bmodule +([A-Z]\w*)/),
+     src.scan(/\bdef +(\w+[!?=]?)/),
+     src.scan(/\balias +(\w+[!?]?)/),
+     src.scan(/\b([A-Z]\w*) *=[^=]/),
+     src.scan(/(\$[a-zA-Z_]\w*)/),
+     src.scan(/(\$[$!?0-9]\w*)/),
+     src.scan(/(@@?[a-zA-Z_]\w*)/),
+     src.scan(/[^.]\.([a-zA-Z_]\w*[!?]?)/),
+     src.scan(/\.([a-zA-Z_]\w* *=)/).map{|x|x.map{|s|s.gsub(' ', '')}},
+     src.scan(/\b([a-zA-Z_]\w*):/),
+     src.scan(/:([a-zA-Z_]\w*[!?=]?)/),
+     src.scan(/[\(\[\{ ]:"([^"]+)"/).map{|x|x.map{|s|s.gsub('\#', '#')}},
+     src.scan(/[ \(\[\{]:'([^']+)'/)
+    ]
+  end
+  symbols = (symbols+csymbols+rbsymbols+op_table.keys).flatten.compact.uniq.grep_v(/#/).map{|x| x.gsub("\n", '\n')}.sort_by!{|x| [x.bytesize, x]}
+  presyms = File.readlines(presym_file) rescue []
+  presyms.each{|x| x.chomp!}
+  if presyms != symbols
+    _pp "GEN", presym_file.relative_path
+    File.write(presym_file, symbols.join("\n"))
+    Rake::Task[presym_inc].invoke
+  end
+end
+
+task presym_inc do
+  presyms = File.readlines(presym_file)
+  presyms.each{|x| x.chomp!}
+  symbol_to_macro = macro_to_symbol.invert
+  prefix_re = Regexp.union(*symbol_to_macro.keys.map(&:first).uniq)
+  suffix_re = Regexp.union(*symbol_to_macro.keys.map(&:last).uniq)
+  sym_re = /\A(#{prefix_re})?([\w&&\D]\w*)(#{suffix_re})?\z/o
+  _pp "GEN", presym_inc.relative_path
+  File.open(presym_inc, "w") do |f|
+    f.puts "/* MRB_PRESYM_NAMED(lit, num, type, name) */"
+    f.puts "/* MRB_PRESYM_UNNAMED(lit, num) */"
+    presyms.each.with_index(1) do |sym, num|
+      if sym_re =~ sym && (affixes = symbol_to_macro[[$1, $3]])
+        f.puts %|MRB_PRESYM_NAMED("#{sym}", #{num}, #{affixes * 'SYM'}, #{$2})|
+      elsif name = op_table[sym]
+        f.puts %|MRB_PRESYM_NAMED("#{sym}", #{num}, OPSYM, #{name})|
+      elsif
+        f.puts %|MRB_PRESYM_UNNAMED("#{sym}", #{num})|
+      end
+    end
+    f.print "#define MRB_PRESYM_MAX #{presyms.size}"
+  end
+end
+
+desc "preallocated symbols"
+task :gensym => presym_file
 
 depfiles += MRuby.targets.map { |n, t|
   t.libraries
@@ -153,6 +285,8 @@ desc "clean everything!"
 task :deep_clean => ["clean", "clean_doc"] do
   MRuby.each_target do |t|
     rm_rf t.gem_clone_dir
   end
+  rm_f presym_file
+  rm_f presym_inc
   puts "Cleaned up mrbgems build folder"
 end
diff --git a/include/mruby/presym.h b/include/mruby/presym.h
index 876e4f4fb..fd08a24da 100644
--- a/include/mruby/presym.h
+++ b/include/mruby/presym.h
@@ -16,33 +16,33 @@
 #define MRB_PRESYM_UNNAMED(lit, num)
 
 enum mruby_presym {
-#include <mruby/presym.inc>
+#include <../build/presym.inc>
 };
 
 #undef MRB_PRESYM_NAMED
 #undef MRB_PRESYM_UNNAMED
 
 /*
  * For `MRB_OPSYM`, specify the names corresponding to operators (refer to
  * `op_table` in `Rakefile` for the names that can be specified for it).
  * Other than that, describe only word characters excluding leading and
  * ending punctuations.
  *
  * Example:
  *   MRB_OPSYM(and)  //=> &
  *   MRB_CVSYM(foo)  //=> @@foo
  *   MRB_IVSYM(foo)  //=> @foo
  *   MRB_SYM_B(foo)  //=> foo!
  *   MRB_SYM_Q(foo)  //=> foo?
  *   MRB_SYM_E(foo)  //=> foo=
  *   MRB_SYM(foo)    //=> foo
  */
 #define MRB_OPSYM(name) MRB_OPSYM__##name  /* Operator */
 #define MRB_CVSYM(name) MRB_CVSYM__##name  /* Class Variable */
 #define MRB_IVSYM(name) MRB_IVSYM__##name  /* Instance Variable */
 #define MRB_SYM_B(name) MRB_SYM_B__##name  /* Method with Bang */
 #define MRB_SYM_Q(name) MRB_SYM_Q__##name  /* Method with Question mark */
 #define MRB_SYM_E(name) MRB_SYM_E__##name  /* Method with Equal */
 #define MRB_SYM(name)   MRB_SYM__##name    /* Word characters */
 
 #endif  /* MRUBY_PRESYM_H */
diff --git a/lib/mruby/build.rb b/lib/mruby/build.rb
index 1ada8b657..a03c5fefe 100644
--- a/lib/mruby/build.rb
+++ b/lib/mruby/build.rb
@@ -192,234 +192,226 @@ extern "C" {
 #endif
 #include "#{File.absolute_path src}"
 #ifndef MRB_USE_CXX_ABI
 }
 #endif
 EOS
       end
 
       file obj => cxx_src do |t|
         cxx.run t.name, t.prerequisites.first, [], ["#{MRUBY_ROOT}/src"] + includes
       end
 
       obj
     end
 
     def enable_bintest
       @enable_bintest = true
     end
 
     def bintest_enabled?
       @enable_bintest
     end
 
     def toolchain(name, params={})
       name = name.to_s
       tc = Toolchain.toolchains[name] || begin
         path = "#{MRUBY_ROOT}/tasks/toolchains/#{name}.rake"
         fail "Unknown #{name} toolchain" unless File.exist?(path)
         load path
         Toolchain.toolchains[name]
       end
       tc.setup(self, params)
       @toolchains.unshift name
     end
 
     def primary_toolchain
       @toolchains.first
     end
 
     def root
       MRUBY_ROOT
     end
 
     def enable_test
       @enable_test = true
     end
 
     def test_enabled?
       @enable_test
     end
 
     def build_mrbtest
       gem :core => 'mruby-test'
     end
 
     def build_mrbc_exec
       gem :core => 'mruby-bin-mrbc'
     end
 
     def locks
       Lockfile.build(@name)
     end
 
     def mrbcfile
       return @mrbcfile if @mrbcfile
 
       unless gems.detect {|v| v.name == 'mruby-bin-mrbc' }
         build_mrbc_exec
         gems.detect {|v| v.name == 'mruby-bin-mrbc' }.setup
       end
       @mrbcfile = self.exefile("#{self.build_dir}/bin/mrbc")
     end
 
     def compilers
       COMPILERS.map do |c|
         instance_variable_get("@#{c}")
       end
     end
 
     def define_rules
       use_mrdb = @gems.find{|g| g.name == "mruby-bin-debugger"}
       compilers.each do |compiler|
         if respond_to?(:enable_gems?) && enable_gems?
           compiler.defines -= %w(MRB_NO_GEMS)
         else
           compiler.defines += %w(MRB_NO_GEMS)
         end
         compiler.defines |= %w(MRB_USE_DEBUG_HOOK) if use_mrdb
         compiler.define_rules build_dir, File.expand_path(File.join(File.dirname(__FILE__), '..', '..'))
       end
     end
 
     def filename(name)
       if name.is_a?(Array)
         name.flatten.map { |n| filename(n) }
       else
         name.gsub('/', file_separator)
       end
     end
 
     def exefile(name)
       if name.is_a?(Array)
         name.flatten.map { |n| exefile(n) }
       elsif File.extname(name).empty?
         "#{name}#{exts.executable}"
       else
         # `name` sometimes have (non-standard) extension (e.g. `.bat`).
         name
       end
     end
 
     def objfile(name)
       if name.is_a?(Array)
         name.flatten.map { |n| objfile(n) }
       else
         "#{name}#{exts.object}"
       end
     end
 
     def libfile(name)
       if name.is_a?(Array)
         name.flatten.map { |n| libfile(n) }
       else
         "#{name}#{exts.library}"
       end
     end
 
     def build_mrbtest_lib_only
       @build_mrbtest_lib_only = true
     end
 
     def build_mrbtest_lib_only?
       @build_mrbtest_lib_only
     end
 
     def verbose_flag
       Rake.verbose ? ' -v' : ''
     end
 
     def run_test
       puts ">>> Test #{name} <<<"
       mrbtest = exefile("#{build_dir}/bin/mrbtest")
       sh "#{filename mrbtest.relative_path}#{verbose_flag}"
       puts
     end
 
     def run_bintest
       puts ">>> Bintest #{name} <<<"
       targets = @gems.select { |v| File.directory? "#{v.dir}/bintest" }.map { |v| filename v.dir }
       targets << filename(".") if File.directory? "./bintest"
       env = {"BUILD_DIR" => @build_dir}
       sh env, "ruby test/bintest.rb#{verbose_flag} #{targets.join ' '}"
     end
 
     def print_build_summary
       puts "================================================"
       puts "      Config Name: #{@name}"
       puts " Output Directory: #{self.build_dir.relative_path}"
       puts "         Binaries: #{@bins.join(', ')}" unless @bins.empty?
       unless @gems.empty?
         puts "    Included Gems:"
         gems = @gems.sort_by { |gem| gem.name }
         gems.each do |gem|
           gem_version = " - #{gem.version}" if gem.version != '0.0.0'
           gem_summary = " - #{gem.summary}" if gem.summary
           puts "             #{gem.name}#{gem_version}#{gem_summary}"
           puts "               - Binaries: #{gem.bins.join(', ')}" unless gem.bins.empty?
         end
       end
       puts "================================================"
       puts
     end
 
     def libmruby_static
       libfile("#{build_dir}/lib/libmruby")
     end
 
     def libmruby_core_static
       libfile("#{build_dir}/lib/libmruby_core")
     end
 
     def libraries
       [libmruby_static]
     end
-
-    def presym_file
-      "#{build_dir}/presym"
-    end
-
-    def presym_inc
-      "#{build_dir}/include/mruby/presym.inc"
-    end
   end # Build
 
   class CrossBuild < Build
     attr_block %w(test_runner)
     # cross compiling targets for building native extensions.
     # host  - arch of where the built binary will run
     # build - arch of the machine building the binary
     attr_accessor :host_target, :build_target
 
     def initialize(name, build_dir=nil, &block)
       unless MRuby.targets['host']
         # add minimal 'host'
         MRuby::Build.new('host') do |conf|
           if ENV['VisualStudioVersion'] || ENV['VSINSTALLDIR']
             toolchain :visualcpp
           else
             toolchain :gcc
           end
           conf.gem :core => 'mruby-bin-mrbc'
         end
       end
       @endian = nil
       @test_runner = Command::CrossTestRunner.new(self)
       super
     end
 
     def mrbcfile
       host = MRuby.targets['host']
       host.exefile("#{host.build_dir}/bin/mrbc")
     end
 
     def run_test
       @test_runner.runner_options << verbose_flag
       mrbtest = exefile("#{build_dir}/bin/mrbtest")
       if (@test_runner.command == nil)
         puts "You should run #{mrbtest} on target device."
         puts
       else
         @test_runner.run(mrbtest)
       end
     end
   end # CrossBuild
diff --git a/src/symbol.c b/src/symbol.c
index 18ef44e77..c78f41f63 100644
--- a/src/symbol.c
+++ b/src/symbol.c
@@ -19,8 +19,8 @@
 static const struct {
   const char *name;
   uint16_t len;
 } presym_table[] = {
-#include <mruby/presym.inc>
+#include <../build/presym.inc>
 };
 
 static mrb_sym
diff --git a/tasks/presym.rake b/tasks/presym.rake
deleted file mode 100644
index 1d6ef490e..000000000
--- a/tasks/presym.rake
+++ /dev/null
@@ -1,139 +0,0 @@
-op_table = {
-  "!" => "not",
-  "!=" => "neq",
-  "!~" => "nmatch",
-  "%" => "mod",
-  "&" => "and",
-  "&&" => "andand",
-  "*" => "mul",
-  "**" => "pow",
-  "+" => "add",
-  "+@" => "plus",
-  "-" => "sub",
-  "-@" => "minus",
-  "/" => "div",
-  "<" => "lt",
-  "<=" => "le",
-  "<<" => "lshift",
-  "<=>" => "cmp",
-  "==" => "eq",
-  "===" => "eqq",
-  "=~" => "match",
-  ">" => "gt",
-  ">=" => "ge",
-  ">>" => "rshift",
-  "[]" => "aref",
-  "[]=" => "aset",
-  "^" => "xor",
-  "`" => "tick",
-  "|" => "or",
-  "||" => "oror",
-  "~" => "neg",
-}
-macro_to_symbol = {
-#      Macro               Symbol
-# [prefix, suffix] => [prefix, suffix]
-  ["CV"  , ""    ] => ["@@"  , ""    ],
-  ["IV"  , ""    ] => ["@"   , ""    ],
-  [""    , "_B"  ] => [""    , "!"   ],
-  [""    , "_Q"  ] => [""    , "?"   ],
-  [""    , "_E"  ] => [""    , "="   ],
-  [""    , ""    ] => [""    , ""    ],
-}
-
-core_cfiles = Dir.glob("#{MRUBY_ROOT}/src/*.c")
-core_rbfiles = Dir.glob("#{MRUBY_ROOT}/mrblib/*.rb")
-MRuby.each_target do |build|
-  cfiles = core_cfiles.dup
-  rbfiles = core_rbfiles.dup
-  psfiles = []
-  presym_file = build.presym_file
-  presym_inc = build.presym_inc
-
-  build.compilers.each {|c| c.include_paths << "#{build.build_dir}/include"}
-  build.gems.each do |gem|
-    cfiles.concat(Dir.glob(gem.dir+"/{src,core,tools/*}/*.c"))
-    if gem.cdump?
-      rbfiles.concat(gem.rbfiles)
-      psfiles.concat(Dir.glob(gem.dir+"/**/presym"))
-    end
-    gem.compilers.each {|c| c.include_paths << "#{build.build_dir}/include"}
-  end
-
-  file presym_file => [*cfiles, *rbfiles, *psfiles, __FILE__] do
-    prefix_re = Regexp.union(*macro_to_symbol.keys.map(&:first).uniq)
-    suffix_re = Regexp.union(*macro_to_symbol.keys.map(&:last).uniq)
-    macro_re = /MRB_(#{prefix_re})SYM(#{suffix_re})\((\w+)\)/o
-    csymbols = cfiles.map do |f|
-      src = File.read(f)
-      src.gsub!(/\/\/.+(\n|$)/, "\n")
-      [src.scan(/intern_lit\([^\n"]*"([^\n "]*)"/),
-        src.scan(/mrb_define_method\([^\n"]*"([^\n"]*)"/),
-        src.scan(/mrb_define_class_method\([^\n"]*"([^\n"]*)"/),
-        src.scan(/mrb_define_class\([^\n"]*"([^\n"]*)"/),
-        src.scan(/mrb_define_module\([^\n"]*"([^\n"]*)"/),
-        src.scan(/mrb_define_module_function\([^\n"]*"([^\n"]*)"/),
-        src.scan(/mrb_define_const\([^\n"]*"([^\n"]*)"/),
-        src.scan(/mrb_define_global_const\([^\n"]*"([^\n"]*)"/),
-        src.scan(macro_re).map{|prefix, suffix, name|
-          macro_to_symbol[[prefix, suffix]] * name
-        }]
-    end
-    csymbols += File.readlines("#{MRUBY_ROOT}/include/mruby.h").grep(/define E_/).join.scan(/MRB_SYM\((\w+)\)/)
-
-    rbsymbols = rbfiles.map do |f|
-      src = File.read(f)
-      src.force_encoding(Encoding::BINARY)
-      [src.scan(/\bclass +([A-Z]\w*)/),
-        src.scan(/\bmodule +([A-Z]\w*)/),
-        src.scan(/\bdef +(\w+[!?=]?)/),
-        src.scan(/\balias +(\w+[!?]?)/),
-        src.scan(/\b([A-Z]\w*) *=[^=]/),
-        src.scan(/(\$[a-zA-Z_]\w*)/),
-        src.scan(/(\$[$!?0-9]\w*)/),
-        src.scan(/(@@?[a-zA-Z_]\w*)/),
-        src.scan(/[^.]\.([a-zA-Z_]\w*[!?]?)/),
-        src.scan(/\.([a-zA-Z_]\w* *=)/).map{|x|x.map{|s|s.gsub(' ', '')}},
-        src.scan(/\b([a-zA-Z_]\w*):/),
-        src.scan(/:([a-zA-Z_]\w*[!?=]?)/),
-        src.scan(/[\(\[\{ ]:"([^"]+)"/).map{|x|x.map{|s|s.gsub('\#', '#')}},
-        src.scan(/[ \(\[\{]:'([^']+)'/)
-      ]
-    end
-    symbols = [csymbols, rbsymbols, op_table.keys, psfiles.map{|file| symbols.concat(File.readlines(file).grep_v(/^# /))}]
-    symbols = symbols.flatten.compact.uniq.grep_v(/#/).map{|x| x.gsub("\n", '\n')}.sort_by!{|x| [x.bytesize, x]}
-    presyms = File.readlines(presym_file) rescue []
-    presyms.each{|x| x.chomp!}
-    if presyms != symbols
-      _pp "GEN", presym_file.relative_path
-      mkdir_p(File.dirname(presym_file))
-      File.write(presym_file, symbols.join("\n"))
-      Rake::Task["gensym:#{presym_inc}"].invoke
-    end
-  end
-
-  task "gensym:#{presym_inc}" do
-    presyms = File.readlines(presym_file)
-    presyms.each{|x| x.chomp!}
-    symbol_to_macro = macro_to_symbol.invert
-    prefix_re = Regexp.union(*symbol_to_macro.keys.map(&:first).uniq)
-    suffix_re = Regexp.union(*symbol_to_macro.keys.map(&:last).uniq)
-    macro_re = /\A(#{prefix_re})?([\w&&\D]\w*)(#{suffix_re})?\z/o
-    mkdir_p(File.dirname(presym_inc))
-    _pp "GEN", presym_inc.relative_path
-    File.open(presym_inc, "w") do |f|
-      f.puts "/* MRB_PRESYM_NAMED(lit, num, type, name) */"
-      f.puts "/* MRB_PRESYM_UNNAMED(lit, num) */"
-      presyms.each.with_index(1) do |sym, num|
-        if macro_re =~ sym && (affixes = symbol_to_macro[[$1, $3]])
-          f.puts %|MRB_PRESYM_NAMED("#{sym}", #{num}, #{affixes * 'SYM'}, #{$2})|
-        elsif name = op_table[sym]
-          f.puts %|MRB_PRESYM_NAMED("#{sym}", #{num}, OPSYM, #{name})|
-        elsif
-          f.puts %|MRB_PRESYM_UNNAMED("#{sym}", #{num})|
-        end
-      end
-      f.print "#define MRB_PRESYM_MAX #{presyms.size}"
-    end
-  end
-end
