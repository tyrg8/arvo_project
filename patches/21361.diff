commit 3f42d02b6d24f458b301af5db491f5ea7d9b4f90
Merge: ca7bf0c142 95727499e1
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Tue Mar 24 10:23:51 2020 +0100

    Merge pull request #2335 from dg0yt/dg0yt
    
    Revise drivers GDAL_DMD_HELPTOPIC

diff --git a/gdal/frmts/aaigrid/aaigriddataset.cpp b/gdal/frmts/aaigrid/aaigriddataset.cpp
index b1c6a0337a..4ae4b74f20 100644
--- a/gdal/frmts/aaigrid/aaigriddataset.cpp
+++ b/gdal/frmts/aaigrid/aaigriddataset.cpp
@@ -1498,42 +1498,42 @@ static CPLString OSR_GDS( char **papszNV, const char *pszField,
 void GDALRegister_AAIGrid()
 
 {
     if( GDALGetDriverByName("AAIGrid") != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("AAIGrid");
     poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_LONGNAME, "Arc/Info ASCII Grid");
-    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "frmt_various.html#AAIGrid");
+    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "drivers/raster/aaigrid.html");
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSION, "asc");
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONDATATYPES,
                               "Byte UInt16 Int16 Int32 Float32");
 
     poDriver->SetMetadataItem(GDAL_DCAP_VIRTUALIO, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>\n"
 "   <Option name='FORCE_CELLSIZE' type='boolean' description='Force use of CELLSIZE, default is FALSE.'/>\n"
 "   <Option name='DECIMAL_PRECISION' type='int' description='Number of decimal when writing floating-point numbers(%f).'/>\n"
 "   <Option name='SIGNIFICANT_DIGITS' type='int' description='Number of significant digits when writing floating-point numbers(%g).'/>\n"
 "</CreationOptionList>\n");
     poDriver->SetMetadataItem(GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionLists>\n"
 "   <Option name='DATATYPE' type='string-select' description='Data type to be used.'>\n"
 "       <Value>Int32</Value>\n"
 "       <Value>Float32</Value>\n"
 "       <Value>Float64</Value>\n"
 "   </Option>\n"
 "</OpenOptionLists>\n");
 
     poDriver->pfnOpen = AAIGDataset::Open;
     poDriver->pfnIdentify = AAIGDataset::Identify;
     poDriver->pfnCreateCopy = AAIGDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
 
 /************************************************************************/
 /*                   GDALRegister_GRASSASCIIGrid()                      */
 /************************************************************************/
@@ -1541,25 +1541,25 @@ void GDALRegister_AAIGrid()
 void GDALRegister_GRASSASCIIGrid()
 
 {
     if( GDALGetDriverByName("GRASSASCIIGrid") != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("GRASSASCIIGrid");
     poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_LONGNAME, "GRASS ASCII Grid");
     poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC,
-                              "frmt_various.html#GRASSASCIIGrid");
+                              "drivers/raster/grassasciigrid.html");
 
     poDriver->SetMetadataItem(GDAL_DCAP_VIRTUALIO, "YES");
 
     poDriver->pfnOpen = GRASSASCIIDataset::Open;
     poDriver->pfnIdentify = GRASSASCIIDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
 
 /************************************************************************/
 /*                       GDALRegister_ISG()                             */
 /************************************************************************/
@@ -1567,22 +1567,22 @@ void GDALRegister_GRASSASCIIGrid()
 void GDALRegister_ISG()
 
 {
     if( GDALGetDriverByName("ISG") != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("ISG");
     poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_LONGNAME, "International Service for the Geoid");
     poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC,
-                              "isg.html");
+                              "drivers/raster/isg.html");
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSION, "isg");
 
     poDriver->SetMetadataItem(GDAL_DCAP_VIRTUALIO, "YES");
 
     poDriver->pfnOpen = ISGDataset::Open;
     poDriver->pfnIdentify = ISGDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
diff --git a/gdal/frmts/adrg/adrgdataset.cpp b/gdal/frmts/adrg/adrgdataset.cpp
index e031769de2..eddf901927 100644
--- a/gdal/frmts/adrg/adrgdataset.cpp
+++ b/gdal/frmts/adrg/adrgdataset.cpp
@@ -2367,25 +2367,25 @@ void ADRGDataset::WriteTHFFile()
 void GDALRegister_ADRG()
 
 {
     if( GDALGetDriverByName( "ADRG" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "ADRG" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "ARC Digitized Raster Graphics" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#ADRG" );
+                               "drivers/raster/adrg.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "gen" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte" );
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = ADRGDataset::Open;
     poDriver->pfnCreate = ADRGDataset::Create;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/adrg/srpdataset.cpp b/gdal/frmts/adrg/srpdataset.cpp
index 55992f5e44..90f91f2b14 100644
--- a/gdal/frmts/adrg/srpdataset.cpp
+++ b/gdal/frmts/adrg/srpdataset.cpp
@@ -1662,21 +1662,21 @@ GDALDataset *SRPDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_SRP()
 
 {
     if( GDALGetDriverByName( "SRP" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "SRP" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Standard Raster Product (ASRP/USRP)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#SRP" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/srp.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "img" );
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = SRPDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/aigrid/aigdataset.cpp b/gdal/frmts/aigrid/aigdataset.cpp
index 1898d4cd43..ed73bcd480 100644
--- a/gdal/frmts/aigrid/aigdataset.cpp
+++ b/gdal/frmts/aigrid/aigdataset.cpp
@@ -1057,23 +1057,23 @@ static CPLErr AIGDelete( const char *pszDatasetname )
 void GDALRegister_AIGrid()
 
 {
     if( GDALGetDriverByName( "AIG" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "AIG" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Arc/Info Binary Grid" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#AIG" );
+                               "drivers/raster/aig.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = AIGDataset::Open;
 
     poDriver->pfnRename = AIGRename;
     poDriver->pfnDelete = AIGDelete;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/airsar/airsardataset.cpp b/gdal/frmts/airsar/airsardataset.cpp
index 343ede5d43..0b9c0ea31c 100644
--- a/gdal/frmts/airsar/airsardataset.cpp
+++ b/gdal/frmts/airsar/airsardataset.cpp
@@ -632,20 +632,20 @@ GDALDataset *AirSARDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_AirSAR()
 
 {
     if( GDALGetDriverByName( "AirSAR" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "AirSAR" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "AirSAR Polarimetric Image" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_airsar.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/airsar.html" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = AirSARDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/arg/argdataset.cpp b/gdal/frmts/arg/argdataset.cpp
index 45885294f5..a63871d5be 100644
--- a/gdal/frmts/arg/argdataset.cpp
+++ b/gdal/frmts/arg/argdataset.cpp
@@ -795,21 +795,21 @@ GDALDataset *ARGDataset::CreateCopy( const char *pszFilename,
 void GDALRegister_ARG()
 {
     if( GDALGetDriverByName( "ARG" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "ARG" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Azavea Raster Grid format" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#ARG" );
+                               "drivers/raster/arg.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnIdentify = ARGDataset::Identify;
     poDriver->pfnOpen = ARGDataset::Open;
     poDriver->pfnCreateCopy = ARGDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/blx/blxdataset.cpp b/gdal/frmts/blx/blxdataset.cpp
index 7b5fc3b256..664f610e47 100644
--- a/gdal/frmts/blx/blxdataset.cpp
+++ b/gdal/frmts/blx/blxdataset.cpp
@@ -425,23 +425,23 @@ BLXCreateCopy( const char * pszFilename, GDALDataset *poSrcDS,
 void GDALRegister_BLX()
 
 {
     if( GDALGetDriverByName( "BLX" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "BLX" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Magellan topo (.blx)" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#BLX" );
+                               "drivers/raster/blx.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "blx" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = BLXDataset::Open;
     poDriver->pfnCreateCopy = BLXCreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/bmp/bmpdataset.cpp b/gdal/frmts/bmp/bmpdataset.cpp
index 62583fdded..f81c327b13 100644
--- a/gdal/frmts/bmp/bmpdataset.cpp
+++ b/gdal/frmts/bmp/bmpdataset.cpp
@@ -1599,29 +1599,29 @@ GDALDataset *BMPDataset::Create( const char * pszFilename,
 void GDALRegister_BMP()
 
 {
     if( GDALGetDriverByName( "BMP" ) != nullptr )
       return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "BMP" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "MS Windows Device Independent Bitmap" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_bmp.html" );
+                               "drivers/raster/bmp.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "bmp" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Byte" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='WORLDFILE' type='boolean' description='Write out world file'/>"
 "</CreationOptionList>" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = BMPDataset::Open;
     poDriver->pfnCreate = BMPDataset::Create;
     poDriver->pfnIdentify = BMPDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/bpg/bpgdataset.cpp b/gdal/frmts/bpg/bpgdataset.cpp
index e34768c610..7d48978a78 100644
--- a/gdal/frmts/bpg/bpgdataset.cpp
+++ b/gdal/frmts/bpg/bpgdataset.cpp
@@ -329,24 +329,24 @@ GDALDataset *BPGDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_BPG()
 
 {
     if( GDALGetDriverByName( "BPG" ) != NULL )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "BPG" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Better Portable Graphics" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_bpg.html" );
+                               "drivers/raster/bpg.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "bpg" );
     // poDriver->SetMetadataItem( GDAL_DMD_MIMETYPE, "image/bpg" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnIdentify = BPGDataset::Identify;
     poDriver->pfnOpen = BPGDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/bsb/bsbdataset.cpp b/gdal/frmts/bsb/bsbdataset.cpp
index bd9d67d662..b215e7d860 100644
--- a/gdal/frmts/bsb/bsbdataset.cpp
+++ b/gdal/frmts/bsb/bsbdataset.cpp
@@ -1158,25 +1158,25 @@ BSBCreateCopy( const char * pszFilename, GDALDataset *poSrcDS,
 void GDALRegister_BSB()
 
 {
     if( GDALGetDriverByName( "BSB" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "BSB" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Maptech BSB Nautical Charts" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#BSB" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/bsb.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 #ifdef BSB_CREATE
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Byte" );
 #endif
     poDriver->pfnOpen = BSBDataset::Open;
     poDriver->pfnIdentify = BSBDataset::Identify;
 #ifdef BSB_CREATE
     poDriver->pfnCreateCopy = BSBCreateCopy;
 #endif
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/cals/calsdataset.cpp b/gdal/frmts/cals/calsdataset.cpp
index 9d90f6db8c..358ec2ca21 100644
--- a/gdal/frmts/cals/calsdataset.cpp
+++ b/gdal/frmts/cals/calsdataset.cpp
@@ -598,23 +598,23 @@ GDALDataset *CALSDataset::CreateCopy( const char *pszFilename,
 void GDALRegister_CALS()
 
 {
     if( GDALGetDriverByName( "CALS" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "CALS" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "CALS (Type 1)" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_cals.html" );
+                               "drivers/raster/cals.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSIONS, "cal ct1");
 
     poDriver->pfnIdentify = CALSDataset::Identify;
     poDriver->pfnOpen = CALSDataset::Open;
     poDriver->pfnCreateCopy = CALSDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/ceos/ceosdataset.cpp b/gdal/frmts/ceos/ceosdataset.cpp
index c94e22204c..ba1703e4d0 100644
--- a/gdal/frmts/ceos/ceosdataset.cpp
+++ b/gdal/frmts/ceos/ceosdataset.cpp
@@ -222,20 +222,20 @@ GDALDataset *CEOSDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_CEOS()
 
 {
     if( GDALGetDriverByName( "CEOS" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "CEOS" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "CEOS Image" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#CEOS" );
+                               "drivers/raster/ceos.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = CEOSDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/ceos2/sar_ceosdataset.cpp b/gdal/frmts/ceos2/sar_ceosdataset.cpp
index 61ac93ec29..d3983e649e 100644
--- a/gdal/frmts/ceos2/sar_ceosdataset.cpp
+++ b/gdal/frmts/ceos2/sar_ceosdataset.cpp
@@ -2186,20 +2186,20 @@ ProcessData( VSILFILE *fp, int fileid, CeosSARVolume_t *sar, int max_records,
 void GDALRegister_SAR_CEOS()
 
 {
     if( GDALGetDriverByName( "SAR_CEOS" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "SAR_CEOS" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "CEOS SAR Image" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#SAR_CEOS" );
+                               "drivers/raster/sar_ceos.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = SAR_CEOSDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/coasp/coasp_dataset.cpp b/gdal/frmts/coasp/coasp_dataset.cpp
index aea9e8dd3c..393c1795ed 100644
--- a/gdal/frmts/coasp/coasp_dataset.cpp
+++ b/gdal/frmts/coasp/coasp_dataset.cpp
@@ -557,18 +557,18 @@ GDALDataset *COASPDataset::Open( GDALOpenInfo *poOpenInfo )
 void GDALRegister_COASP()
 {
     if( GDALGetDriverByName( "COASP" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "COASP" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "DRDC COASP SAR Processor Raster" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION,
                                "hdr" );
-    // poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_coasp.html");
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/coasp.html");
     poDriver->pfnIdentify = COASPDataset::Identify;
     poDriver->pfnOpen = COASPDataset::Open;
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/cosar/cosar_dataset.cpp b/gdal/frmts/cosar/cosar_dataset.cpp
index 7655667f18..50896974a9 100644
--- a/gdal/frmts/cosar/cosar_dataset.cpp
+++ b/gdal/frmts/cosar/cosar_dataset.cpp
@@ -207,18 +207,18 @@ GDALDataset *COSARDataset::Open( GDALOpenInfo * pOpenInfo ) {
 /* register the driver with GDAL */
 void GDALRegister_COSAR()
 
 {
     if( GDALGetDriverByName( "cosar" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
     poDriver->SetDescription("COSAR");
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "COSAR Annotated Binary Matrix (TerraSAR-X)");
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_cosar.html");
+                               "drivers/raster/cosar.html");
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->pfnOpen = COSARDataset::Open;
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
diff --git a/gdal/frmts/ctg/ctgdataset.cpp b/gdal/frmts/ctg/ctgdataset.cpp
index 50cbe282e4..2b222296b5 100644
--- a/gdal/frmts/ctg/ctgdataset.cpp
+++ b/gdal/frmts/ctg/ctgdataset.cpp
@@ -576,22 +576,22 @@ const char* CTGDataset::_GetProjectionRef()
 void GDALRegister_CTG()
 
 {
     if( GDALGetDriverByName( "CTG" ) != nullptr )
       return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "CTG" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "USGS LULC Composite Theme Grid" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#CTG" );
+                               "drivers/raster/ctg.html" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = CTGDataset::Open;
     poDriver->pfnIdentify = CTGDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/daas/daasdataset.cpp b/gdal/frmts/daas/daasdataset.cpp
index a57defcfd2..b489afb741 100644
--- a/gdal/frmts/daas/daasdataset.cpp
+++ b/gdal/frmts/daas/daasdataset.cpp
@@ -2628,53 +2628,53 @@ CPLErr GDALDAASRasterBand::GetBlocks(int nBlockXOff, int nBlockYOff,
 void GDALRegister_DAAS()
 
 {
     if( GDALGetDriverByName( "DAAS" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "DAAS" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Airbus DS Intelligence "
                                "Data As A Service driver" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_daas.html" );
+                               "drivers/raster/daas.html" );
 
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "  <Option name='GET_METADATA_URL' type='string' "
         "description='URL to GetImageMetadata' "
         "required='true'/>"
 "  <Option name='API_KEY' alt_config_option='GDAL_DAAS_API_KEY' type='string' "
         "description='API key'/>"
 "  <Option name='CLIENT_ID' alt_config_option='GDAL_DAAS_CLIENT_ID' "
         "type='string' description='Client id'/>"
 "  <Option name='ACCESS_TOKEN' alt_config_option='GDAL_DAAS_ACCESS_TOKEN' "
         "type='string' description='Authorization access token'/>"
 "  <Option name='X_FORWARDED_USER' "
         "alt_config_option='GDAL_DAAS_X_FORWARDED_USER' type='string' "
         "description='User from which the request originates from'/>"
 "  <Option name='BLOCK_SIZE' type='integer' "
                                 "description='Size of a block' default='512'/>"
 "  <Option name='PIXEL_ENCODING' type='string-select' "
                         "description='Format in which pixels are queried'>"
 "       <Value>AUTO</Value>"
 "       <Value>RAW</Value>"
 "       <Value>PNG</Value>"
 "       <Value>JPEG</Value>"
 "       <Value>JPEG2000</Value>"
 "   </Option>"
 "  <Option name='TARGET_SRS' type='string' description="
                                 "'SRS name for server-side reprojection.'/>"
 "  <Option name='MASKS' type='boolean' "
                     "description='Whether to expose mask bands' default='YES'/>"
 "</OpenOptionList>" );
 
     poDriver->SetMetadataItem( GDAL_DMD_CONNECTION_PREFIX, "DAAS:" );
 
     poDriver->pfnIdentify = GDALDAASDataset::Identify;
     poDriver->pfnOpen = GDALDAASDataset::OpenStatic;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/derived/deriveddataset.cpp b/gdal/frmts/derived/deriveddataset.cpp
index a7aa8b6519..615151990d 100644
--- a/gdal/frmts/derived/deriveddataset.cpp
+++ b/gdal/frmts/derived/deriveddataset.cpp
@@ -204,20 +204,20 @@ GDALDataset * DerivedDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_Derived()
 {
     if( GDALGetDriverByName( "DERIVED" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "DERIVED" );
 #ifdef GDAL_DCAP_RASTER
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
 #endif
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Derived datasets using VRT pixel functions" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_derived.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/derived.html" );
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "NO" );
 
     poDriver->pfnOpen = DerivedDataset::Open;
     poDriver->pfnIdentify = DerivedDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/dimap/dimapdataset.cpp b/gdal/frmts/dimap/dimapdataset.cpp
index 66aaf77ae2..17ea1d3d79 100644
--- a/gdal/frmts/dimap/dimapdataset.cpp
+++ b/gdal/frmts/dimap/dimapdataset.cpp
@@ -1601,21 +1601,21 @@ const GDAL_GCP *DIMAPDataset::GetGCPs()
 void GDALRegister_DIMAP()
 
 {
     if( GDALGetDriverByName( "DIMAP" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "DIMAP" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "SPOT DIMAP" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#DIMAP" );
+                               "drivers/raster/dimap.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = DIMAPDataset::Open;
     poDriver->pfnIdentify = DIMAPDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/dods/dodsdataset2.cpp b/gdal/frmts/dods/dodsdataset2.cpp
index d87d2fd452..2fcc528217 100644
--- a/gdal/frmts/dods/dodsdataset2.cpp
+++ b/gdal/frmts/dods/dodsdataset2.cpp
@@ -1706,20 +1706,20 @@ double DODSRasterBand::GetNoDataValue( int * pbSuccess )
 void GDALRegister_DODS()
 
 {
     if( !GDAL_CHECK_VERSION("GDAL/DODS driver") )
         return;
 
     if( GDALGetDriverByName( "DODS" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "DODS" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "DAP 3.x servers" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#DODS" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/dods.html" );
 
     poDriver->pfnOpen = DODSDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/dted/dteddataset.cpp b/gdal/frmts/dted/dteddataset.cpp
index 2f1b4113ec..fd5b195cc3 100644
--- a/gdal/frmts/dted/dteddataset.cpp
+++ b/gdal/frmts/dted/dteddataset.cpp
@@ -907,26 +907,26 @@ DTEDCreateCopy( const char * pszFilename, GDALDataset *poSrcDS,
 void GDALRegister_DTED()
 
 {
     if( GDALGetDriverByName( "DTED" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "DTED" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "DTED Elevation Raster" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSIONS, "dt0 dt1 dt2" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#DTED" );
+                               "drivers/raster/dted.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 UInt16" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = DTEDDataset::Open;
     poDriver->pfnIdentify = DTEDDataset::Identify;
     poDriver->pfnCreateCopy = DTEDCreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/e00grid/e00griddataset.cpp b/gdal/frmts/e00grid/e00griddataset.cpp
index d97f1823c2..8756fc349b 100644
--- a/gdal/frmts/e00grid/e00griddataset.cpp
+++ b/gdal/frmts/e00grid/e00griddataset.cpp
@@ -911,23 +911,23 @@ void E00GRIDDataset::ReadMetadata()
 void GDALRegister_E00GRID()
 
 {
     if( GDALGetDriverByName( "E00GRID" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "E00GRID" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Arc/Info Export E00 GRID" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#E00GRID" );
+                               "drivers/raster/e00grid.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "e00" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = E00GRIDDataset::Open;
     poDriver->pfnIdentify = E00GRIDDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/ecw/ecwdataset.cpp b/gdal/frmts/ecw/ecwdataset.cpp
index c2fbd4f366..c92dc29897 100644
--- a/gdal/frmts/ecw/ecwdataset.cpp
+++ b/gdal/frmts/ecw/ecwdataset.cpp
@@ -3533,77 +3533,77 @@ static void GDALDeregister_ECW( GDALDriver * )
 void GDALRegister_ECW()
 
 {
 #ifdef FRMT_ecw
     if( !GDAL_CHECK_VERSION( "ECW driver" ) )
         return;
 
     if( GDALGetDriverByName( "ECW" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "ECW" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
 
     CPLString osLongName = "ERDAS Compressed Wavelets (SDK ";
 
 #ifdef NCS_ECWSDK_VERSION_STRING
     osLongName += NCS_ECWSDK_VERSION_STRING;
 #else
     osLongName += "3.x";
 #endif
     osLongName += ")";
 
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, osLongName );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_ecw.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/ecw.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "ecw" );
 
     poDriver->pfnIdentify = ECWDataset::IdentifyECW;
     poDriver->pfnOpen = ECWDataset::OpenECW;
     poDriver->pfnUnloadDriver = GDALDeregister_ECW;
 #ifdef HAVE_COMPRESS
     // The create method does not work with SDK 3.3 ( crash in
     // CNCSJP2FileView::WriteLineBIL() due to m_pFile being nullptr ).
 #if ECWSDK_VERSION >= 50
     poDriver->pfnCreate = ECWCreateECW;
 #endif
     poDriver->pfnCreateCopy = ECWCreateCopyECW;
 #if ECWSDK_VERSION >= 50
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Byte UInt16" );
 #else
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,  "Byte" );
 #endif
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='TARGET' type='float' description='Compression Percentage' />"
 "   <Option name='PROJ' type='string' description='ECW Projection Name'/>"
 "   <Option name='DATUM' type='string' description='ECW Datum Name' />"
 
 #if ECWSDK_VERSION < 40
 "   <Option name='LARGE_OK' type='boolean' description='Enable compressing 500+MB files'/>"
 #else
 "   <Option name='ECW_ENCODE_KEY' type='string' description='OEM Compress Key from ERDAS.'/>"
 "   <Option name='ECW_ENCODE_COMPANY' type='string' description='OEM Company Name.'/>"
 #endif
 
 #if ECWSDK_VERSION >= 50
 "   <Option name='ECW_FORMAT_VERSION' type='integer' description='ECW format version (2 or 3).' default='2'/>"
 #endif
 
 "</CreationOptionList>" );
 #else
     // In read-only mode, we support VirtualIO. This is not the case
     // for ECWCreateCopyECW().
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 #endif
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 #endif /* def FRMT_ecw */
 }
 
 /************************************************************************/
 /*                      GDALRegister_ECW_JP2ECW()                       */
 /*                                                                      */
 /*      This function exists so that when built as a plugin, there      */
 /*      is a function that will register both drivers.                  */
 /************************************************************************/
@@ -3626,106 +3626,106 @@ GDALDataset* ECWDatasetOpenJPEG2000(GDALOpenInfo* poOpenInfo)
 /************************************************************************/
 /*                        GDALRegister_JP2ECW()                         */
 /************************************************************************/
 void GDALRegister_JP2ECW()
 
 {
 #ifdef FRMT_ecw
     if( !GDAL_CHECK_VERSION( "JP2ECW driver" ) )
         return;
 
     if( GDALGetDriverByName( "JP2ECW" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "JP2ECW" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_VECTOR, "YES" );
 
     CPLString osLongName = "ERDAS JPEG2000 (SDK ";
 
 #ifdef NCS_ECWSDK_VERSION_STRING
     osLongName += NCS_ECWSDK_VERSION_STRING;
 #else
     osLongName += "3.x";
 #endif
     osLongName += ")";
 
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, osLongName );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_jp2ecw.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/jp2ecw.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "jp2" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnIdentify = ECWDataset::IdentifyJPEG2000;
     poDriver->pfnOpen = ECWDataset::OpenJPEG2000;
 
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "   <Option name='1BIT_ALPHA_PROMOTION' type='boolean' description='Whether a 1-bit alpha channel should be promoted to 8-bit' default='YES'/>"
 "   <Option name='OPEN_REMOTE_GML' type='boolean' description='Whether to load remote vector layers referenced by a link in a GMLJP2 v2 box' default='NO'/>"
 "   <Option name='GEOREF_SOURCES' type='string' description='Comma separated list made with values INTERNAL/GMLJP2/GEOJP2/WORLDFILE/PAM/NONE that describe the priority order for georeferencing' default='PAM,GEOJP2,GMLJP2,WORLDFILE'/>"
 "</OpenOptionList>" );
 
 #ifdef HAVE_COMPRESS
     poDriver->pfnCreate = ECWCreateJPEG2000;
     poDriver->pfnCreateCopy = ECWCreateCopyJPEG2000;
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte UInt16 Int16 UInt32 Int32 "
                                "Float32 "
 #if ECWSDK_VERSION >= 40
     // Crashes for sure with 3.3. Didn't try other versions
                                "Float64"
 #endif
                               );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='TARGET' type='float' description='Compression Percentage' />"
 "   <Option name='PROJ' type='string' description='ECW Projection Name'/>"
 "   <Option name='DATUM' type='string' description='ECW Datum Name' />"
 "   <Option name='UNITS' type='string-select' description='ECW Projection Units'>"
 "       <Value>METERS</Value>"
 "       <Value>FEET</Value>"
 "   </Option>"
 
 #if ECWSDK_VERSION < 40
 "   <Option name='LARGE_OK' type='boolean' description='Enable compressing 500+MB files'/>"
 #else
 "   <Option name='ECW_ENCODE_KEY' type='string' description='OEM Compress Key from ERDAS.'/>"
 "   <Option name='ECW_ENCODE_COMPANY' type='string' description='OEM Company Name.'/>"
 #endif
 
 "   <Option name='GeoJP2' type='boolean' description='defaults to ON'/>"
 "   <Option name='GMLJP2' type='boolean' description='defaults to ON'/>"
 "   <Option name='GMLJP2V2_DEF' type='string' description='Definition file to describe how a GMLJP2 v2 box should be generated. If set to YES, a minimal instance will be created'/>"
 "   <Option name='PROFILE' type='string-select'>"
 "       <Value>BASELINE_0</Value>"
 "       <Value>BASELINE_1</Value>"
 "       <Value>BASELINE_2</Value>"
 "       <Value>NPJE</Value>"
 "       <Value>EPJE</Value>"
 "   </Option>"
 "   <Option name='PROGRESSION' type='string-select'>"
 "       <Value>LRCP</Value>"
 "       <Value>RLCP</Value>"
 "       <Value>RPCL</Value>"
 "   </Option>"
 "   <Option name='CODESTREAM_ONLY' type='boolean' description='No JP2 wrapper'/>"
 "   <Option name='NBITS' type='int' description='Bits (precision) for sub-byte files (1-7), sub-uint16 (9-15)'/>"
 "   <Option name='LEVELS' type='int'/>"
 "   <Option name='LAYERS' type='int'/>"
 "   <Option name='PRECINCT_WIDTH' type='int'/>"
 "   <Option name='PRECINCT_HEIGHT' type='int'/>"
 "   <Option name='TILE_WIDTH' type='int'/>"
 "   <Option name='TILE_HEIGHT' type='int'/>"
 "   <Option name='INCLUDE_SOP' type='boolean'/>"
 "   <Option name='INCLUDE_EPH' type='boolean'/>"
 "   <Option name='DECOMPRESS_LAYERS' type='int'/>"
 "   <Option name='DECOMPRESS_RECONSTRUCTION_PARAMETER' type='float'/>"
 "   <Option name='WRITE_METADATA' type='boolean' description='Whether metadata should be written, in a dedicated JP2 XML box' default='NO'/>"
 "   <Option name='MAIN_MD_DOMAIN_ONLY' type='boolean' description='(Only if WRITE_METADATA=YES) Whether only metadata from the main domain should be written' default='NO'/>"
 "</CreationOptionList>" );
 #endif
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 #endif /* def FRMT_ecw */
 }
diff --git a/gdal/frmts/eeda/eedadataset.cpp b/gdal/frmts/eeda/eedadataset.cpp
index de2ec52743..6d83e7d693 100644
--- a/gdal/frmts/eeda/eedadataset.cpp
+++ b/gdal/frmts/eeda/eedadataset.cpp
@@ -1221,24 +1221,24 @@ static GDALDataset* GDALEEDAOpen(GDALOpenInfo* poOpenInfo)
 void GDALRegister_EEDA()
 
 {
     if( GDALGetDriverByName( "EEDA" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "EEDA" );
     poDriver->SetMetadataItem( GDAL_DCAP_VECTOR, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Earth Engine Data API" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_eeda.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/vector/eeda.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CONNECTION_PREFIX, "EEDA:" );
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "  <Option name='COLLECTION' type='string' description='Collection name'/>"
 "</OpenOptionList>");
 
     poDriver->pfnOpen = GDALEEDAOpen;
     poDriver->pfnIdentify = GDALEEDAdentify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/eeda/eedaidataset.cpp b/gdal/frmts/eeda/eedaidataset.cpp
index db859c6bfe..aba0cd63bc 100644
--- a/gdal/frmts/eeda/eedaidataset.cpp
+++ b/gdal/frmts/eeda/eedaidataset.cpp
@@ -1636,38 +1636,38 @@ static GDALDataset* GDALEEDAIOpen(GDALOpenInfo* poOpenInfo)
 void GDALRegister_EEDAI()
 
 {
     if( GDALGetDriverByName( "EEDAI" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "EEDAI" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Earth Engine Data API Image" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_eedai.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/eedai.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CONNECTION_PREFIX, "EEDAI:" );
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "  <Option name='ASSET' type='string' description='Asset name'/>"
 "  <Option name='BANDS' type='string' "
                         "description='Comma separated list of band names'/>"
 "  <Option name='PIXEL_ENCODING' type='string-select' "
                         "description='Format in which pixls are queried'>"
 "       <Value>AUTO</Value>"
 "       <Value>PNG</Value>"
 "       <Value>JPEG</Value>"
 "       <Value>GEO_TIFF</Value>"
 "       <Value>AUTO_JPEG_PNG</Value>"
 "       <Value>NPY</Value>"
 "   </Option>"
 "  <Option name='BLOCK_SIZE' type='integer' "
                                 "description='Size of a block' default='256'/>"
 "</OpenOptionList>");
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
 
     poDriver->pfnOpen = GDALEEDAIOpen;
     poDriver->pfnIdentify = GDALEEDAIIdentify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/envisat/envisatdataset.cpp b/gdal/frmts/envisat/envisatdataset.cpp
index 3d40e6f76a..4e8c0e36c8 100644
--- a/gdal/frmts/envisat/envisatdataset.cpp
+++ b/gdal/frmts/envisat/envisatdataset.cpp
@@ -1150,20 +1150,20 @@ GDALDataset *EnvisatDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_Envisat()
 
 {
     if( GDALGetDriverByName( "ESAT" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "ESAT" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Envisat Image Format" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#Envisat" );
+                               "drivers/raster/esat.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "n1" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = EnvisatDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/epsilon/epsilondataset.cpp b/gdal/frmts/epsilon/epsilondataset.cpp
index 3ba795d4de..c9d35079ef 100644
--- a/gdal/frmts/epsilon/epsilondataset.cpp
+++ b/gdal/frmts/epsilon/epsilondataset.cpp
@@ -994,58 +994,58 @@ EpsilonDatasetCreateCopy( const char * pszFilename, GDALDataset *poSrcDS,
 void GDALRegister_EPSILON()
 
 {
     if( !GDAL_CHECK_VERSION( "EPSILON driver" ) )
         return;
 
     if( GDALGetDriverByName( "EPSILON" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "EPSILON" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
 
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Epsilon wavelets" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_epsilon.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/epsilon.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Byte" );
 
     CPLString osMethods;
     char** papszFBID = eps_get_fb_info(EPS_FB_ID);
     char** papszFBIDIter = papszFBID;
     while(papszFBIDIter && *papszFBIDIter)
     {
         osMethods += "       <Value>";
         osMethods += *papszFBIDIter;
         osMethods += "</Value>\n";
         papszFBIDIter ++;
     }
     eps_free_fb_info(papszFBID);
 
     CPLString osOptionList;
     osOptionList.Printf(
 "<CreationOptionList>"
 "   <Option name='TARGET' type='int' description='target size reduction as a percentage of the original (0-100)' default='75'/>"
 "   <Option name='FILTER' type='string-select' description='Filter ID' default='daub97lift'>"
 "%s"
 "   </Option>"
 "   <Option name='BLOCKXSIZE' type='int' description='Tile Width. Between 32 and 1024' default='256'/>"
 "   <Option name='BLOCKYSIZE' type='int' description='Tile Height. Between 32 and 1024' default='256'/>"
 "   <Option name='MODE' type='string-select' default='OTLPF'>"
 "       <Value>NORMAL</Value>"
 "       <Value>OTLPF</Value>"
 "   </Option>"
 "   <Option name='RGB_RESAMPLE' type='boolean' description='if RGB must be resampled to 4:2:0' default='YES'/>"
 "   <Option name='RASTERLITE_OUTPUT' type='boolean' description='if Rasterlite header and footers must be inserted' default='FALSE'/>"
 "</CreationOptionList>", osMethods.c_str()  );
 
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
                                osOptionList.c_str() );
 
     poDriver->pfnOpen = EpsilonDataset::Open;
     poDriver->pfnIdentify = EpsilonDataset::Identify;
     poDriver->pfnCreateCopy = EpsilonDatasetCreateCopy;
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/ers/ersdataset.cpp b/gdal/frmts/ers/ersdataset.cpp
index 04a258ab1e..ec99edc2dd 100644
--- a/gdal/frmts/ers/ersdataset.cpp
+++ b/gdal/frmts/ers/ersdataset.cpp
@@ -1504,36 +1504,36 @@ GDALDataset *ERSDataset::Create( const char * pszFilename,
 void GDALRegister_ERS()
 
 {
     if( GDALGetDriverByName( "ERS" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "ERS" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "ERMapper .ers Labelled" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_ers.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/ers.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "ers" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 UInt16 Int32 UInt32 "
                                "Float32 Float64" );
 
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='PIXELTYPE' type='string' description='By setting this to SIGNEDBYTE, a new Byte file can be forced to be written as signed byte'/>"
 "   <Option name='PROJ' type='string' description='ERS Projection Name'/>"
 "   <Option name='DATUM' type='string' description='ERS Datum Name' />"
 "   <Option name='UNITS' type='string-select' description='ERS Projection Units'>"
 "       <Value>METERS</Value>"
 "       <Value>FEET</Value>"
 "   </Option>"
 "</CreationOptionList>" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = ERSDataset::Open;
     poDriver->pfnIdentify = ERSDataset::Identify;
     poDriver->pfnCreate = ERSDataset::Create;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/fit/fitdataset.cpp b/gdal/frmts/fit/fitdataset.cpp
index 8c75ccf283..becc537341 100644
--- a/gdal/frmts/fit/fitdataset.cpp
+++ b/gdal/frmts/fit/fitdataset.cpp
@@ -1342,23 +1342,23 @@ static GDALDataset *FITCreateCopy(const char * pszFilename,
 void GDALRegister_FIT()
 
 {
     if( GDALGetDriverByName( "FIT" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "FIT" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "FIT Image" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/fit.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = FITDataset::Open;
     poDriver->pfnCreateCopy = FITCreateCopy;
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte UInt16 Int16 UInt32 Int32 "
                                "Float32 Float64" );
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/fits/fitsdataset.cpp b/gdal/frmts/fits/fitsdataset.cpp
index 1457219472..ac026a3ab2 100644
--- a/gdal/frmts/fits/fitsdataset.cpp
+++ b/gdal/frmts/fits/fitsdataset.cpp
@@ -1569,23 +1569,23 @@ void FITSDataset::LoadFITSInfo()
 void GDALRegister_FITS()
 
 {
     if( GDALGetDriverByName( "FITS" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "FITS" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Flexible Image Transport System" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#FITS" );
+                               "drivers/raster/fits.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte UInt16 Int16 UInt32 Int32 Float32 Float64" );
 
     poDriver->pfnOpen = FITSDataset::Open;
     poDriver->pfnCreate = FITSDataset::Create;
     poDriver->pfnCreateCopy = nullptr;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
diff --git a/gdal/frmts/georaster/georaster_dataset.cpp b/gdal/frmts/georaster/georaster_dataset.cpp
index f55f085a64..ff1b0a088e 100644
--- a/gdal/frmts/georaster/georaster_dataset.cpp
+++ b/gdal/frmts/georaster/georaster_dataset.cpp
@@ -2925,95 +2925,95 @@ CPLErr GeoRasterDataset::CreateMaskBand( int /*nFlags*/ )
 void CPL_DLL GDALRegister_GEOR()
 
 {
     if( !GDAL_CHECK_VERSION( "GeoRaster driver" ) )
         return;
 
     if( GDALGetDriverByName( "GeoRaster" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription(  "GeoRaster" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Oracle Spatial GeoRaster" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_georaster.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/georaster.html" );
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte UInt16 Int16 UInt32 Int32 Float32 "
                                "Float64 CFloat32 CFloat64" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "  <Option name='DESCRIPTION' type='string' description='Table Description'/>"
 "  <Option name='INSERT'      type='string' description='Column Values'/>"
 "  <Option name='BLOCKXSIZE'  type='int'    description='Column Block Size' "
                                            "default='512'/>"
 "  <Option name='BLOCKYSIZE'  type='int'    description='Row Block Size' "
                                            "default='512'/>"
 "  <Option name='BLOCKBSIZE'  type='int'    description='Band Block Size'/>"
 "  <Option name='BLOCKING'    type='string-select' default='YES'>"
 "       <Value>YES</Value>"
 "       <Value>NO</Value>"
 "       <Value>OPTIMALPADDING</Value>"
 "  </Option>"
 "  <Option name='SRID'        type='int'    description='Overwrite EPSG code'/>"
 "  <Option name='GENPYRAMID'  type='string-select' "
 " description='Generate Pyramid, inform resampling method'>"
 "       <Value>NN</Value>"
 "       <Value>BILINEAR</Value>"
 "       <Value>BIQUADRATIC</Value>"
 "       <Value>CUBIC</Value>"
 "       <Value>AVERAGE4</Value>"
 "       <Value>AVERAGE16</Value>"
 "  </Option>"
 "  <Option name='GENPYRLEVELS'  type='int'  description='Number of pyramid level to generate'/>"
 "  <Option name='OBJECTTABLE' type='boolean' "
                                            "description='Create RDT as object table'/>"
 "  <Option name='SPATIALEXTENT' type='boolean' "
                                            "description='Generate Spatial Extent' "
                                            "default='TRUE'/>"
 "  <Option name='EXTENTSRID'  type='int'    description='Spatial ExtentSRID code'/>"
 "  <Option name='COORDLOCATION'    type='string-select' default='CENTER'>"
 "       <Value>CENTER</Value>"
 "       <Value>UPPERLEFT</Value>"
 "  </Option>"
 "  <Option name='VATNAME'     type='string' description='Value Attribute Table Name'/>"
 "  <Option name='NBITS'       type='int'    description='BITS for sub-byte "
                                            "data types (1,2,4) bits'/>"
 "  <Option name='INTERLEAVE'  type='string-select'>"
 "       <Value>BSQ</Value>"
 "       <Value>BIP</Value>"
 "       <Value>BIL</Value>"
 "   </Option>"
 "  <Option name='COMPRESS'    type='string-select'>"
 "       <Value>NONE</Value>"
 "       <Value>JPEG-F</Value>"
 "       <Value>JP2-F</Value>"
 "       <Value>DEFLATE</Value>"
 "  </Option>"
 "  <Option name='QUALITY'     type='int'    description='JPEG quality 0..100' "
                                            "default='75'/>"
 "  <Option name='JP2_QUALITY'     type='string' description='For JP2-F compression, single quality value or comma separated list "
         "of increasing quality values for several layers, each in the 0-100 range' default='25'/>"
 "  <Option name='JP2_BLOCKXSIZE'  type='int' description='For JP2 compression, tile Width' default='1024'/>"
 "  <Option name='JP2_BLOCKYSIZE'  type='int' description='For JP2 compression, tile Height' default='1024'/>"
 "  <Option name='JP2_REVERSIBLE'  type='boolean' description='For JP2-F compression, True if the compression is reversible' default='false'/>"
 "  <Option name='JP2_RESOLUTIONS' type='int' description='For JP2-F compression, Number of resolutions.' min='1' max='30'/>"
 "  <Option name='JP2_PROGRESSION' type='string-select' description='For JP2-F compression, progression order' default='LRCP'>"
 "    <Value>LRCP</Value>"
 "    <Value>RLCP</Value>"
 "    <Value>RPCL</Value>"
 "    <Value>PCRL</Value>"
 "    <Value>CPRL</Value>"
 "  </Option>"
 "</CreationOptionList>" );
 
     poDriver->pfnOpen       = GeoRasterDataset::Open;
     poDriver->pfnCreate     = GeoRasterDataset::Create;
     poDriver->pfnCreateCopy = GeoRasterDataset::CreateCopy;
     poDriver->pfnIdentify   = GeoRasterDataset::Identify;
     poDriver->pfnDelete     = GeoRasterDataset::Delete;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 
     VSIInstallOCILobHandler();
 }
diff --git a/gdal/frmts/gff/gff_dataset.cpp b/gdal/frmts/gff/gff_dataset.cpp
index adf8b1070f..4ca83178c6 100644
--- a/gdal/frmts/gff/gff_dataset.cpp
+++ b/gdal/frmts/gff/gff_dataset.cpp
@@ -336,18 +336,18 @@ GDALDataset *GFFDataset::Open( GDALOpenInfo *poOpenInfo )
 void GDALRegister_GFF()
 {
     if( GDALGetDriverByName( "GFF" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("GFF");
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem(
         GDAL_DMD_LONGNAME,
         "Ground-based SAR Applications Testbed File Format (.gff)");
-    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "frmt_various.html#GFF");
+    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "drivers/raster/gff.html");
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSION, "gff");
     poDriver->SetMetadataItem(GDAL_DCAP_VIRTUALIO, "YES");
     poDriver->pfnOpen = GFFDataset::Open;
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
diff --git a/gdal/frmts/gif/biggifdataset.cpp b/gdal/frmts/gif/biggifdataset.cpp
index 614fb78aa3..47326fc38d 100644
--- a/gdal/frmts/gif/biggifdataset.cpp
+++ b/gdal/frmts/gif/biggifdataset.cpp
@@ -377,23 +377,23 @@ GDALDataset *BIGGIFDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_BIGGIF()
 
 {
     if( GDALGetDriverByName( "BIGGIF" ) != nullptr )
         return;
 
      GDALDriver *poDriver = new GDALDriver();
 
      poDriver->SetDescription( "BIGGIF" );
      poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
      poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                 "Graphics Interchange Format (.gif)" );
      poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                                "frmt_gif.html" );
+                                "drivers/raster/gif.html" );
      poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "gif" );
      poDriver->SetMetadataItem( GDAL_DMD_MIMETYPE, "image/gif" );
      poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
      poDriver->pfnOpen = BIGGIFDataset::Open;
      poDriver->pfnIdentify = GIFAbstractDataset::Identify;
 
      GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/gif/gifdataset.cpp b/gdal/frmts/gif/gifdataset.cpp
index 288448cabd..5daf158e2d 100644
--- a/gdal/frmts/gif/gifdataset.cpp
+++ b/gdal/frmts/gif/gifdataset.cpp
@@ -704,32 +704,32 @@ error:
 void GDALRegister_GIF()
 
 {
     if( GDALGetDriverByName( "GIF" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "GIF" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Graphics Interchange Format (.gif)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_gif.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/gif.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "gif" );
     poDriver->SetMetadataItem( GDAL_DMD_MIMETYPE, "image/gif" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Byte" );
 
     poDriver->SetMetadataItem(
         GDAL_DMD_CREATIONOPTIONLIST,
         "<CreationOptionList>\n"
         "   <Option name='INTERLACING' type='boolean'/>\n"
         "   <Option name='WORLDFILE' type='boolean'/>\n"
         "</CreationOptionList>\n" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = GIFDataset::Open;
     poDriver->pfnCreateCopy = GIFDataset::CreateCopy;
     poDriver->pfnIdentify = GIFAbstractDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/grass/grass57dataset.cpp b/gdal/frmts/grass/grass57dataset.cpp
index 7f7ac6cdee..a77d93f116 100644
--- a/gdal/frmts/grass/grass57dataset.cpp
+++ b/gdal/frmts/grass/grass57dataset.cpp
@@ -1043,19 +1043,19 @@ GDALDataset *GRASSDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_GRASS()
 {
     if( !GDAL_CHECK_VERSION( "GDAL/GRASS57 driver" ) )
         return;
 
     if( GDALGetDriverByName( "GRASS" ) != NULL )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "GRASS" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "GRASS Rasters (5.7+)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_grass.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/grass.html" );
 
     poDriver->pfnOpen = GRASSDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/grass/grassdataset.cpp b/gdal/frmts/grass/grassdataset.cpp
index 4bad05c945..33a0fc7d63 100644
--- a/gdal/frmts/grass/grassdataset.cpp
+++ b/gdal/frmts/grass/grassdataset.cpp
@@ -574,20 +574,20 @@ GDALDataset *GRASSDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_GRASS()
 
 {
     if( !GDAL_CHECK_VERSION( "GDAL/GRASS driver" ) )
         return;
 
     if( GDALGetDriverByName( "GRASS" ) != NULL )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "GRASS" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "GRASS Database Rasters" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_grass.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/grass.html" );
 
     poDriver->pfnOpen = GRASSDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/grib/gribdataset.cpp b/gdal/frmts/grib/gribdataset.cpp
index d39ed643d3..ee4336386c 100644
--- a/gdal/frmts/grib/gribdataset.cpp
+++ b/gdal/frmts/grib/gribdataset.cpp
@@ -2257,16 +2257,16 @@ class GDALGRIBDriver: public GDALDriver
 GDALGRIBDriver::GDALGRIBDriver() : bHasFullInitMetadata(false)
 {
     aosMetadata.SetNameValue(GDAL_DCAP_RASTER, "YES");
     aosMetadata.SetNameValue(GDAL_DMD_LONGNAME, "GRIdded Binary (.grb, .grb2)");
-    aosMetadata.SetNameValue(GDAL_DMD_HELPTOPIC, "frmt_grib.html");
+    aosMetadata.SetNameValue(GDAL_DMD_HELPTOPIC, "drivers/raster/grib.html");
     aosMetadata.SetNameValue(GDAL_DMD_EXTENSIONS, "grb grb2 grib2");
     aosMetadata.SetNameValue(GDAL_DCAP_VIRTUALIO, "YES");
 
     aosMetadata.SetNameValue( GDAL_DMD_CREATIONDATATYPES,
                             "Byte UInt16 Int16 UInt32 Int32 Float32 "
                             "Float64" );
 }
 
 /************************************************************************/
 /*                            GetMetadata()                             */
 /************************************************************************/
diff --git a/gdal/frmts/gsg/gs7bgdataset.cpp b/gdal/frmts/gsg/gs7bgdataset.cpp
index 46e1dae8dc..5c7d5b9062 100644
--- a/gdal/frmts/gsg/gs7bgdataset.cpp
+++ b/gdal/frmts/gsg/gs7bgdataset.cpp
@@ -1306,28 +1306,28 @@ GDALDataset *GS7BGDataset::CreateCopy( const char *pszFilename,
 /************************************************************************/
 /*                          GDALRegister_GS7BG()                        */
 /************************************************************************/
 void GDALRegister_GS7BG()
 
 {
     if( GDALGetDriverByName( "GS7BG" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "GS7BG" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Golden Software 7 Binary Grid (.grd)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#GS7BG" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/gs7bg.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "grd" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 UInt16 Float32 Float64" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnIdentify = GS7BGDataset::Identify;
     poDriver->pfnOpen = GS7BGDataset::Open;
     poDriver->pfnCreate = GS7BGDataset::Create;
     poDriver->pfnCreateCopy = GS7BGDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/gsg/gsagdataset.cpp b/gdal/frmts/gsg/gsagdataset.cpp
index 9e99de2a8d..eb166fbc51 100644
--- a/gdal/frmts/gsg/gsagdataset.cpp
+++ b/gdal/frmts/gsg/gsagdataset.cpp
@@ -1719,25 +1719,25 @@ GDALDataset *GSAGDataset::CreateCopy( const char *pszFilename,
 void GDALRegister_GSAG()
 
 {
     if( GDALGetDriverByName( "GSAG" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "GSAG" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Golden Software ASCII Grid (.grd)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#GSAG" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/gsag.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "grd" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 UInt16 Int32 UInt32 "
                                "Float32 Float64" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnIdentify = GSAGDataset::Identify;
     poDriver->pfnOpen = GSAGDataset::Open;
     poDriver->pfnCreateCopy = GSAGDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/gsg/gsbgdataset.cpp b/gdal/frmts/gsg/gsbgdataset.cpp
index 6356ed729f..5bf1681168 100644
--- a/gdal/frmts/gsg/gsbgdataset.cpp
+++ b/gdal/frmts/gsg/gsbgdataset.cpp
@@ -1107,25 +1107,25 @@ GDALDataset *GSBGDataset::CreateCopy( const char *pszFilename,
 void GDALRegister_GSBG()
 
 {
     if( GDALGetDriverByName( "GSBG" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "GSBG" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Golden Software Binary Grid (.grd)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#GSBG" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/gsbg.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "grd" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 UInt16 Float32" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnIdentify = GSBGDataset::Identify;
     poDriver->pfnOpen = GSBGDataset::Open;
     poDriver->pfnCreate = GSBGDataset::Create;
     poDriver->pfnCreateCopy = GSBGDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/gta/gtadataset.cpp b/gdal/frmts/gta/gtadataset.cpp
index 9b77256d72..0ebf3337b5 100644
--- a/gdal/frmts/gta/gtadataset.cpp
+++ b/gdal/frmts/gta/gtadataset.cpp
@@ -1695,44 +1695,44 @@ GTACreateCopy( const char * pszFilename, GDALDataset *poSrcDS,
 void GDALRegister_GTA()
 
 {
     if( GDALGetDriverByName( "GTA" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "GTA" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Generic Tagged Arrays (.gta)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_gta.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/gta.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "gta" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte UInt16 Int16 UInt32 Int32 Float32 Float64 "
                                "CInt16 CInt32 CFloat32 CFloat64" );
     poDriver->SetMetadataItem(
         GDAL_DMD_CREATIONOPTIONLIST,
         "<CreationOptionList>"
         "  <Option name='COMPRESS' type='string-select'>"
         "    <Value>NONE</Value>"
         "    <Value>BZIP2</Value>"
         "    <Value>XZ</Value>"
         "    <Value>ZLIB</Value>"
         "    <Value>ZLIB1</Value>"
         "    <Value>ZLIB2</Value>"
         "    <Value>ZLIB3</Value>"
         "    <Value>ZLIB4</Value>"
         "    <Value>ZLIB5</Value>"
         "    <Value>ZLIB6</Value>"
         "    <Value>ZLIB7</Value>"
         "    <Value>ZLIB8</Value>"
         "    <Value>ZLIB9</Value>"
         "  </Option>"
         "</CreationOptionList>" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = GTADataset::Open;
     poDriver->pfnCreateCopy = GTACreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/gtiff/cogdriver.cpp b/gdal/frmts/gtiff/cogdriver.cpp
index 79a47e0002..21c2fabf80 100644
--- a/gdal/frmts/gtiff/cogdriver.cpp
+++ b/gdal/frmts/gtiff/cogdriver.cpp
@@ -787,105 +787,105 @@ static GDALDataset* COGCreateCopy( const char * pszFilename,
 void GDALRegister_COG()
 
 {
     if( GDALGetDriverByName( "COG" ) != nullptr )
         return;
 
     bool bHasLZW = false;
     bool bHasDEFLATE = false;
     bool bHasLZMA = false;
     bool bHasZSTD = false;
     bool bHasJPEG = false;
     bool bHasWebP = false;
     CPLString osCompressValues(GTiffGetCompressValues(
         bHasLZW, bHasDEFLATE, bHasLZMA, bHasZSTD, bHasJPEG, bHasWebP,
         true /* bForCOG */));
 
     CPLString osOptions;
     osOptions = "<CreationOptionList>"
                 "   <Option name='COMPRESS' type='string-select'>";
     osOptions += osCompressValues;
     osOptions += "   </Option>";
     if( bHasLZW || bHasDEFLATE || bHasZSTD )
     {
         osOptions += "   <Option name='LEVEL' type='int' "
             "description='DEFLATE/ZSTD compression level: 1 (fastest)'/>";
         osOptions += "   <Option name='PREDICTOR' type='string-select' default='FALSE'>"
                      "     <Value>YES</Value>"
                      "     <Value>NO</Value>"
                      "     <Value alias='2'>STANDARD</Value>"
                      "     <Value alias='3'>FLOATING_POINT</Value>"
                      "   </Option>";
     }
     if( bHasJPEG || bHasWebP )
     {
         osOptions += "   <Option name='QUALITY' type='int' "
                      "description='JPEG/WEBP quality 1-100' default='75'/>";
     }
 #ifdef HAVE_LERC
     osOptions += ""
 "   <Option name='MAX_Z_ERROR' type='float' description='Maximum error for LERC compression' default='0'/>";
 #endif
     osOptions +=
 "   <Option name='NUM_THREADS' type='string' "
         "description='Number of worker threads for compression. "
         "Can be set to ALL_CPUS' default='1'/>"
 "   <Option name='BLOCKSIZE' type='int' "
         "description='Tile size in pixels' min='128' default='512'/>"
 "   <Option name='BIGTIFF' type='string-select' description='"
         "Force creation of BigTIFF file'>"
 "     <Value>YES</Value>"
 "     <Value>NO</Value>"
 "     <Value>IF_NEEDED</Value>"
 "     <Value>IF_SAFER</Value>"
 "   </Option>"
 "   <Option name='RESAMPLING' type='string' "
         "description='Resampling method for overviews or warping'/>"
 "   <Option name='OVERVIEWS' type='string-select' description='"
         "Behaviour regarding overviews'>"
 "     <Value>AUTO</Value>"
 "     <Value>IGNORE_EXISTING</Value>"
 "     <Value>FORCE_USE_EXISTING</Value>"
 "     <Value>NONE</Value>"
 "   </Option>"
 "  <Option name='TILING_SCHEME' type='string-select' description='"
         "Which tiling scheme to use' default='CUSTOM'>"
 "    <Value>CUSTOM</Value>"
 "    <Value>GoogleMapsCompatible</Value>"
 "  </Option>"
 "   <Option name='TARGET_SRS' type='string' "
         "description='Target SRS as EPSG:XXXX, WKT or PROJ string for reprojection'/>"
 "  <Option name='RES' type='float' description='"
         "Target resolution for reprojection'/>"
 "  <Option name='EXTENT' type='string' description='"
         "Target extent as minx,miny,maxx,maxy for reprojection'/>"
 "  <Option name='ALIGNED_LEVELS' type='int' description='"
         "Number of overview levels for which GeoTIFF tile and WebMercator "
         "tiles match'/>"
 "  <Option name='ADD_ALPHA' type='boolean' description='Can be set to NO to "
         "disable the addition of an alpha band in case of reprojection' default='YES'/>"
 #if LIBGEOTIFF_VERSION >= 1600
 "   <Option name='GEOTIFF_VERSION' type='string-select' default='AUTO' description='Which version of GeoTIFF must be used'>"
 "       <Value>AUTO</Value>"
 "       <Value>1.0</Value>"
 "       <Value>1.1</Value>"
 "   </Option>"
 #endif
 "</CreationOptionList>";
 
     auto poDriver = new GDALDriver();
     poDriver->SetDescription( "COG" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Cloud optimized GeoTIFF generator" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "cog.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/cog.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST, osOptions );
 
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte UInt16 Int16 UInt32 Int32 Float32 "
                                "Float64 CInt16 CInt32 CFloat32 CFloat64" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnCreateCopy = COGCreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/gtiff/geotiff.cpp b/gdal/frmts/gtiff/geotiff.cpp
index 9627a2414c..add2d73998 100644
--- a/gdal/frmts/gtiff/geotiff.cpp
+++ b/gdal/frmts/gtiff/geotiff.cpp
@@ -19782,186 +19782,186 @@ CPLString GTiffGetCompressValues(bool& bHasLZW,
 void GDALRegister_GTiff()
 
 {
     if( GDALGetDriverByName( "GTiff" ) != nullptr )
         return;
 
     CPLString osOptions;
 
     bool bHasLZW = false;
     bool bHasDEFLATE = false;
     bool bHasLZMA = false;
     bool bHasZSTD = false;
     bool bHasJPEG = false;
     bool bHasWebP = false;
     CPLString osCompressValues(GTiffGetCompressValues(
         bHasLZW, bHasDEFLATE, bHasLZMA, bHasZSTD, bHasJPEG, bHasWebP,
         false /* bForCOG */));
 
     GDALDriver *poDriver = new GDALDriver();
 
 /* -------------------------------------------------------------------- */
 /*      Build full creation option list.                                */
 /* -------------------------------------------------------------------- */
     osOptions = "<CreationOptionList>"
               "   <Option name='COMPRESS' type='string-select'>";
     osOptions += osCompressValues;
     osOptions += "   </Option>";
     if( bHasLZW || bHasDEFLATE || bHasZSTD )
         osOptions += ""
 "   <Option name='PREDICTOR' type='int' description='Predictor Type (1=default, 2=horizontal differencing, 3=floating point prediction)'/>";
     osOptions += ""
 "   <Option name='DISCARD_LSB' type='string' description='Number of least-significant bits to set to clear as a single value or comma-separated list of values for per-band values'/>";
     if( bHasJPEG )
     {
         osOptions += ""
 "   <Option name='JPEG_QUALITY' type='int' description='JPEG quality 1-100' default='75'/>"
 "   <Option name='JPEGTABLESMODE' type='int' description='Content of JPEGTABLES tag. 0=no JPEGTABLES tag, 1=Quantization tables only, 2=Huffman tables only, 3=Both' default='1'/>";
 #ifdef JPEG_DIRECT_COPY
         osOptions += ""
 "   <Option name='JPEG_DIRECT_COPY' type='boolean' description='To copy without any decompression/recompression a JPEG source file' default='NO'/>";
 #endif
     }
     if( bHasDEFLATE )
         osOptions += ""
 "   <Option name='ZLEVEL' type='int' description='DEFLATE compression level 1-9' default='6'/>";
     if( bHasLZMA )
         osOptions += ""
 "   <Option name='LZMA_PRESET' type='int' description='LZMA compression level 0(fast)-9(slow)' default='6'/>";
     if( bHasZSTD )
         osOptions += ""
 "   <Option name='ZSTD_LEVEL' type='int' description='ZSTD compression level 1(fast)-22(slow)' default='9'/>";
 #ifdef HAVE_LERC
     osOptions += ""
 "   <Option name='MAX_Z_ERROR' type='float' description='Maximum error for LERC compression' default='0'/>";
 #endif
     if ( bHasWebP )
     {
       osOptions += ""
 #if WEBP_ENCODER_ABI_VERSION >= 0x0100
 "   <Option name='WEBP_LOSSLESS' type='boolean' description='Whether lossless compression should be used' default='FALSE'/>"
 #endif
 "   <Option name='WEBP_LEVEL' type='int' description='WEBP quality level. Low values result in higher compression ratios' default='75'/>";
     }
     osOptions += ""
 "   <Option name='NUM_THREADS' type='string' description='Number of worker threads for compression. Can be set to ALL_CPUS' default='1'/>"
 "   <Option name='NBITS' type='int' description='BITS for sub-byte files (1-7), sub-uint16 (9-15), sub-uint32 (17-31), or float32 (16)'/>"
 "   <Option name='INTERLEAVE' type='string-select' default='PIXEL'>"
 "       <Value>BAND</Value>"
 "       <Value>PIXEL</Value>"
 "   </Option>"
 "   <Option name='TILED' type='boolean' description='Switch to tiled format'/>"
 "   <Option name='TFW' type='boolean' description='Write out world file'/>"
 "   <Option name='RPB' type='boolean' description='Write out .RPB (RPC) file'/>"
 "   <Option name='RPCTXT' type='boolean' description='Write out _RPC.TXT file'/>"
 "   <Option name='BLOCKXSIZE' type='int' description='Tile Width'/>"
 "   <Option name='BLOCKYSIZE' type='int' description='Tile/Strip Height'/>"
 "   <Option name='PHOTOMETRIC' type='string-select'>"
 "       <Value>MINISBLACK</Value>"
 "       <Value>MINISWHITE</Value>"
 "       <Value>PALETTE</Value>"
 "       <Value>RGB</Value>"
 "       <Value>CMYK</Value>"
 "       <Value>YCBCR</Value>"
 "       <Value>CIELAB</Value>"
 "       <Value>ICCLAB</Value>"
 "       <Value>ITULAB</Value>"
 "   </Option>"
 "   <Option name='SPARSE_OK' type='boolean' description='Should empty blocks be omitted on disk?' default='FALSE'/>"
 "   <Option name='ALPHA' type='string-select' description='Mark first extrasample as being alpha'>"
 "       <Value>NON-PREMULTIPLIED</Value>"
 "       <Value>PREMULTIPLIED</Value>"
 "       <Value>UNSPECIFIED</Value>"
 "       <Value aliasOf='NON-PREMULTIPLIED'>YES</Value>"
 "       <Value aliasOf='UNSPECIFIED'>NO</Value>"
 "   </Option>"
 "   <Option name='PROFILE' type='string-select' default='GDALGeoTIFF'>"
 "       <Value>GDALGeoTIFF</Value>"
 "       <Value>GeoTIFF</Value>"
 "       <Value>BASELINE</Value>"
 "   </Option>"
 "   <Option name='PIXELTYPE' type='string-select'>"
 "       <Value>DEFAULT</Value>"
 "       <Value>SIGNEDBYTE</Value>"
 "   </Option>"
 "   <Option name='BIGTIFF' type='string-select' description='Force creation of BigTIFF file'>"
 "     <Value>YES</Value>"
 "     <Value>NO</Value>"
 "     <Value>IF_NEEDED</Value>"
 "     <Value>IF_SAFER</Value>"
 "   </Option>"
 "   <Option name='ENDIANNESS' type='string-select' default='NATIVE' description='Force endianness of created file. For DEBUG purpose mostly'>"
 "       <Value>NATIVE</Value>"
 "       <Value>INVERTED</Value>"
 "       <Value>LITTLE</Value>"
 "       <Value>BIG</Value>"
 "   </Option>"
 "   <Option name='COPY_SRC_OVERVIEWS' type='boolean' default='NO' description='Force copy of overviews of source dataset (CreateCopy())'/>"
 "   <Option name='SOURCE_ICC_PROFILE' type='string' description='ICC profile'/>"
 "   <Option name='SOURCE_PRIMARIES_RED' type='string' description='x,y,1.0 (xyY) red chromaticity'/>"
 "   <Option name='SOURCE_PRIMARIES_GREEN' type='string' description='x,y,1.0 (xyY) green chromaticity'/>"
 "   <Option name='SOURCE_PRIMARIES_BLUE' type='string' description='x,y,1.0 (xyY) blue chromaticity'/>"
 "   <Option name='SOURCE_WHITEPOINT' type='string' description='x,y,1.0 (xyY) whitepoint'/>"
 "   <Option name='TIFFTAG_TRANSFERFUNCTION_RED' type='string' description='Transfer function for red'/>"
 "   <Option name='TIFFTAG_TRANSFERFUNCTION_GREEN' type='string' description='Transfer function for green'/>"
 "   <Option name='TIFFTAG_TRANSFERFUNCTION_BLUE' type='string' description='Transfer function for blue'/>"
 "   <Option name='TIFFTAG_TRANSFERRANGE_BLACK' type='string' description='Transfer range for black'/>"
 "   <Option name='TIFFTAG_TRANSFERRANGE_WHITE' type='string' description='Transfer range for white'/>"
 "   <Option name='STREAMABLE_OUTPUT' type='boolean' default='NO' description='Enforce a mode compatible with a streamable file'/>"
 "   <Option name='GEOTIFF_KEYS_FLAVOR' type='string-select' default='STANDARD' description='Which flavor of GeoTIFF keys must be used'>"
 "       <Value>STANDARD</Value>"
 "       <Value>ESRI_PE</Value>"
 "   </Option>"
 #if LIBGEOTIFF_VERSION >= 1600
 "   <Option name='GEOTIFF_VERSION' type='string-select' default='AUTO' description='Which version of GeoTIFF must be used'>"
 "       <Value>AUTO</Value>"
 "       <Value>1.0</Value>"
 "       <Value>1.1</Value>"
 "   </Option>"
 #endif
 "</CreationOptionList>";
 
 /* -------------------------------------------------------------------- */
 /*      Set the driver details.                                         */
 /* -------------------------------------------------------------------- */
     poDriver->SetDescription( "GTiff" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "GeoTIFF" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_gtiff.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/gtiff.html" );
     poDriver->SetMetadataItem( GDAL_DMD_MIMETYPE, "image/tiff" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "tif" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSIONS, "tif tiff" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte UInt16 Int16 UInt32 Int32 Float32 "
                                "Float64 CInt16 CInt32 CFloat32 CFloat64" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST, osOptions );
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "   <Option name='NUM_THREADS' type='string' description='Number of worker threads for compression. Can be set to ALL_CPUS' default='1'/>"
 "   <Option name='GEOTIFF_KEYS_FLAVOR' type='string-select' default='STANDARD' description='Which flavor of GeoTIFF keys must be used (for writing)'>"
 "       <Value>STANDARD</Value>"
 "       <Value>ESRI_PE</Value>"
 "   </Option>"
 "   <Option name='GEOREF_SOURCES' type='string' description='Comma separated list made with values INTERNAL/TABFILE/WORLDFILE/PAM/NONE that describe the priority order for georeferencing' default='PAM,INTERNAL,TABFILE,WORLDFILE'/>"
 "   <Option name='SPARSE_OK' type='boolean' description='Should empty blocks be omitted on disk?' default='FALSE'/>"
 "</OpenOptionList>" );
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
 #ifdef INTERNAL_LIBTIFF
     poDriver->SetMetadataItem( "LIBTIFF", "INTERNAL" );
 #else
     poDriver->SetMetadataItem( "LIBTIFF", TIFFLIB_VERSION_STR );
 #endif
 
 #define STRINGIFY(x) #x
 #define XSTRINGIFY(x) STRINGIFY(x)
     poDriver->SetMetadataItem( "LIBGEOTIFF", XSTRINGIFY(LIBGEOTIFF_VERSION) );
 
     poDriver->pfnOpen = GTiffDataset::Open;
     poDriver->pfnCreate = GTiffDataset::Create;
     poDriver->pfnCreateCopy = GTiffDataset::CreateCopy;
     poDriver->pfnUnloadDriver = GDALDeregister_GTiff;
     poDriver->pfnIdentify = GTiffDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/gxf/gxfdataset.cpp b/gdal/frmts/gxf/gxfdataset.cpp
index c7daf95fb1..ba712ce915 100644
--- a/gdal/frmts/gxf/gxfdataset.cpp
+++ b/gdal/frmts/gxf/gxfdataset.cpp
@@ -375,20 +375,20 @@ GDALDataset *GXFDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_GXF()
 
 {
     if( GDALGetDriverByName( "GXF" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "GXF" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "GeoSoft Grid Exchange Format" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#GXF" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/gxf.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "gxf" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = GXFDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/hdf4/hdf4dataset.cpp b/gdal/frmts/hdf4/hdf4dataset.cpp
index b81b4c869f..8c968560e3 100644
--- a/gdal/frmts/hdf4/hdf4dataset.cpp
+++ b/gdal/frmts/hdf4/hdf4dataset.cpp
@@ -1337,31 +1337,31 @@ static void HDF4UnloadDriver( GDALDriver * /* poDriver */ )
 void GDALRegister_HDF4()
 
 {
     if( !GDAL_CHECK_VERSION( "HDF4 driver" ) )
         return;
 
     if( GDALGetDriverByName( "HDF4" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "HDF4" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Hierarchical Data Format Release 4" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_hdf4.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/hdf4.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "hdf" );
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_MULTIDIM_RASTER, "YES" );
 
     poDriver->pfnOpen = HDF4Dataset::Open;
     poDriver->pfnIdentify = HDF4Dataset::Identify;
     poDriver->pfnUnloadDriver = HDF4UnloadDriver;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 
 #ifdef HDF4_PLUGIN
     GDALRegister_HDF4Image();
 #endif
 }
diff --git a/gdal/frmts/hdf4/hdf4imagedataset.cpp b/gdal/frmts/hdf4/hdf4imagedataset.cpp
index 0e8e90b937..32e058a330 100644
--- a/gdal/frmts/hdf4/hdf4imagedataset.cpp
+++ b/gdal/frmts/hdf4/hdf4imagedataset.cpp
@@ -4080,26 +4080,26 @@ GDALDataset *HDF4ImageDataset::Create( const char * pszFilename,
 void GDALRegister_HDF4Image()
 
 {
     if( GDALGetDriverByName( "HDF4Image" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "HDF4Image" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "HDF4 Dataset" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_hdf4.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/hdf4.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 UInt16 Int32 UInt32 "
                                "Float32 Float64" );
     poDriver->SetMetadataItem(
         GDAL_DMD_CREATIONOPTIONLIST,
         "<CreationOptionList>"
         "   <Option name='RANK' type='int' description='Rank of output SDS'/>"
         "</CreationOptionList>" );
 
     poDriver->pfnOpen = HDF4ImageDataset::Open;
     poDriver->pfnCreate = HDF4ImageDataset::Create;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/hdf5/bagdataset.cpp b/gdal/frmts/hdf5/bagdataset.cpp
index 8674f298d1..1289322a2a 100644
--- a/gdal/frmts/hdf5/bagdataset.cpp
+++ b/gdal/frmts/hdf5/bagdataset.cpp
@@ -4481,95 +4481,95 @@ BAGDataset::CreateCopy( const char *pszFilename, GDALDataset *poSrcDS,
 /************************************************************************/
 /*                          GDALRegister_BAG()                          */
 /************************************************************************/
 void GDALRegister_BAG()
 
 {
     if( !GDAL_CHECK_VERSION("BAG") )
         return;
 
     if( GDALGetDriverByName("BAG") != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("BAG");
     poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_LONGNAME, "Bathymetry Attributed Grid");
-    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "frmt_bag.html");
+    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "drivers/raster/bag.html");
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSION, "bag");
 
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONDATATYPES, "Float32");
 
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "   <Option name='MODE' type='string-select' default='AUTO'>"
 "       <Value>AUTO</Value>"
 "       <Value>LOW_RES_GRID</Value>"
 "       <Value>LIST_SUPERGRIDS</Value>"
 "       <Value>RESAMPLED_GRID</Value>"
 "   </Option>"
 "   <Option name='SUPERGRIDS_INDICES' type='string' description="
     "'Tuple(s) (y1,x1),(y2,x2),...  of supergrids, by indices, to expose as subdatasets'/>"
 "   <Option name='MINX' type='float' description='Minimum X value of area of interest'/>"
 "   <Option name='MINY' type='float' description='Minimum Y value of area of interest'/>"
 "   <Option name='MAXX' type='float' description='Maximum X value of area of interest'/>"
 "   <Option name='MAXY' type='float' description='Maximum Y value of area of interest'/>"
 "   <Option name='RESX' type='float' description="
     "'Horizontal resolution. Only used for MODE=RESAMPLED_GRID'/>"
 "   <Option name='RESY' type='float' description="
     "'Vertical resolution (positive value). Only used for MODE=RESAMPLED_GRID'/>"
 "   <Option name='RES_STRATEGY' type='string-select' description="
     "'Which strategy to apply to select the resampled grid resolution. "
     "Only used for MODE=RESAMPLED_GRID' default='AUTO'>"
 "       <Value>AUTO</Value>"
 "       <Value>MIN</Value>"
 "       <Value>MAX</Value>"
 "       <Value>MEAN</Value>"
 "   </Option>"
 "   <Option name='RES_FILTER_MIN' type='float' description="
     "'Minimum resolution of supergrids to take into account (excluded bound). "
     "Only used for MODE=RESAMPLED_GRID or LIST_SUPERGRIDS' default='0'/>"
 "   <Option name='RES_FILTER_MAX' type='float' description="
     "'Maximum resolution of supergrids to take into account (included bound). "
     "Only used for MODE=RESAMPLED_GRID or LIST_SUPERGRIDS' default='inf'/>"
 "   <Option name='VALUE_POPULATION' type='string-select' description="
     "'Which value population strategy to apply to compute the resampled cell "
     "values. Only used for MODE=RESAMPLED_GRID' default='MAX'>"
 "       <Value>MIN</Value>"
 "       <Value>MAX</Value>"
 "       <Value>MEAN</Value>"
 "   </Option>"
 "   <Option name='SUPERGRIDS_MASK' type='boolean' description="
     "'Whether the dataset should consist of a mask band indicating if a "
     "supergrid node matches each target pixel. Only used for "
     "MODE=RESAMPLED_GRID' default='NO'/>"
 "   <Option name='INTERPOLATION' type='string' description="
     "'Interpolation method. Currently only INVDIST supported' default='NO'/>"
 "   <Option name='NODATA_VALUE' type='float' default='1000000'/>"
 "</OpenOptionList>" );
 
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "  <Option name='VAR_*' type='string' description="
                     "'Value to substitute to a variable in the template'/>"
 "  <Option name='TEMPLATE' type='string' description="
                     "'.xml template to use'/>"
 "  <Option name='BAG_VERSION' type='string' description="
         "'Version to write in the Bag Version attribute' default='1.6.2'/>"
 "  <Option name='COMPRESS' type='string-select' default='DEFLATE'>"
 "    <Value>NONE</Value>"
 "    <Value>DEFLATE</Value>"
 "  </Option>"
 "  <Option name='ZLEVEL' type='int' "
     "description='DEFLATE compression level 1-9' default='6' />"
 "  <Option name='BLOCK_SIZE' type='int' description='Chunk size' />"
 "</CreationOptionList>" );
 
     poDriver->pfnOpen = BAGDataset::Open;
     poDriver->pfnIdentify = BAGDataset::Identify;
     poDriver->pfnUnloadDriver = BAGDatasetDriverUnload;
     poDriver->pfnCreateCopy = BAGDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
diff --git a/gdal/frmts/hdf5/hdf5dataset.cpp b/gdal/frmts/hdf5/hdf5dataset.cpp
index df2f57e087..32f6787ddf 100644
--- a/gdal/frmts/hdf5/hdf5dataset.cpp
+++ b/gdal/frmts/hdf5/hdf5dataset.cpp
@@ -87,36 +87,36 @@ static void HDF5DatasetDriverUnload(GDALDriver*)
 /************************************************************************/
 /*                        GDALRegister_HDF5()                           */
 /************************************************************************/
 void GDALRegister_HDF5()
 
 {
     if( GDALGetDriverByName("HDF5") != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("HDF5");
     poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_LONGNAME,
                               "Hierarchical Data Format Release 5");
-    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "frmt_hdf5.html");
+    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "drivers/raster/hdf5.html");
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSIONS, "h5 hdf5");
     poDriver->SetMetadataItem(GDAL_DMD_SUBDATASETS, "YES");
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_MULTIDIM_RASTER, "YES" );
 
     poDriver->pfnOpen = HDF5Dataset::Open;
     poDriver->pfnIdentify = HDF5Dataset::Identify;
     poDriver->pfnUnloadDriver = HDF5DatasetDriverUnload;
     GetGDALDriverManager()->RegisterDriver(poDriver);
 
 #ifdef HDF5_PLUGIN
     GDALRegister_HDF5Image();
     GDALRegister_BAG();
 #endif
 }
 
 /************************************************************************/
 /*                           HDF5Dataset()                              */
 /************************************************************************/
diff --git a/gdal/frmts/hdf5/hdf5imagedataset.cpp b/gdal/frmts/hdf5/hdf5imagedataset.cpp
index 6a01fb0186..f95130df64 100644
--- a/gdal/frmts/hdf5/hdf5imagedataset.cpp
+++ b/gdal/frmts/hdf5/hdf5imagedataset.cpp
@@ -586,39 +586,39 @@ static void HDF5ImageDatasetDriverUnload(GDALDriver*)
 /************************************************************************/
 /*                        GDALRegister_HDF5Image()                      */
 /************************************************************************/
 void GDALRegister_HDF5Image()
 
 {
     if( !GDAL_CHECK_VERSION("HDF5Image driver") )
         return;
 
     if( GDALGetDriverByName("HDF5Image") != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("HDF5Image");
     poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_LONGNAME, "HDF5 Dataset");
-    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "frmt_hdf5.html");
+    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "drivers/raster/hdf5.html");
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = HDF5ImageDataset::Open;
     poDriver->pfnIdentify = HDF5ImageDataset::Identify;
     poDriver->pfnUnloadDriver = HDF5ImageDatasetDriverUnload;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
 
 /************************************************************************/
 /*                       CreateODIMH5Projection()                       */
 /************************************************************************/
 
 // Reference:
 //   http://www.knmi.nl/opera/opera3/OPERA_2008_03_WP2.1b_ODIM_H5_v2.1.pdf
 //
 // 4.3.2 where for geographically referenced image Groups
 // We don't use the where_xscale and where_yscale parameters, but recompute them
 // from the lower-left and upper-right coordinates. There's some difference.
 // As all those parameters are linked together, I'm not sure which one should be
 // considered as the reference.
diff --git a/gdal/frmts/hf2/hf2dataset.cpp b/gdal/frmts/hf2/hf2dataset.cpp
index 7934977d2e..0196b80fdc 100644
--- a/gdal/frmts/hf2/hf2dataset.cpp
+++ b/gdal/frmts/hf2/hf2dataset.cpp
@@ -1166,29 +1166,29 @@ GDALDataset* HF2Dataset::CreateCopy( const char * pszFilename,
 void GDALRegister_HF2()
 
 {
     if( GDALGetDriverByName( "HF2" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "HF2" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "HF2/HFZ heightfield raster" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_hf2.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/hf2.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "hf2" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='VERTICAL_PRECISION' type='float' default='0.01' description='Vertical precision.'/>"
 "   <Option name='COMPRESS' type='boolean' default='false' description='Set to true to produce a GZip compressed file.'/>"
 "   <Option name='BLOCKSIZE' type='int' default='256' description='Tile size.'/>"
 "</CreationOptionList>");
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = HF2Dataset::Open;
     poDriver->pfnIdentify = HF2Dataset::Identify;
     poDriver->pfnCreateCopy = HF2Dataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/hfa/hfadataset.cpp b/gdal/frmts/hfa/hfadataset.cpp
index 261ae72bc4..b127474030 100644
--- a/gdal/frmts/hfa/hfadataset.cpp
+++ b/gdal/frmts/hfa/hfadataset.cpp
@@ -6086,42 +6086,42 @@ HFADataset::CreateCopy( const char *pszFilename, GDALDataset *poSrcDS,
 void GDALRegister_HFA()
 
 {
     if( GDALGetDriverByName("HFA") != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("HFA");
     poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_LONGNAME, "Erdas Imagine Images (.img)");
-    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "frmt_hfa.html");
+    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "drivers/raster/hfa.html");
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSION, "img");
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONDATATYPES,
                               "Byte Int16 UInt16 Int32 UInt32 Float32 Float64 "
                               "CFloat32 CFloat64");
 
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='BLOCKSIZE' type='integer' description='tile width/height (32-2048)' default='64'/>"
 "   <Option name='USE_SPILL' type='boolean' description='Force use of spill file'/>"
 "   <Option name='COMPRESSED' alias='COMPRESS' type='boolean' description='compress blocks'/>"
 "   <Option name='PIXELTYPE' type='string' description='By setting this to SIGNEDBYTE, a new Byte file can be forced to be written as signed byte'/>"
 "   <Option name='AUX' type='boolean' description='Create an .aux file'/>"
 "   <Option name='IGNOREUTM' type='boolean' description='Ignore UTM when selecting coordinate system - will use Transverse Mercator. Only used for Create() method'/>"
 "   <Option name='NBITS' type='integer' description='Create file with special sub-byte data type (1/2/4)'/>"
 "   <Option name='STATISTICS' type='boolean' description='Generate statistics and a histogram'/>"
 "   <Option name='DEPENDENT_FILE' type='string' description='Name of dependent file (must not have absolute path)'/>"
 "   <Option name='FORCETOPESTRING' type='boolean' description='Force use of ArcGIS PE String in file instead of Imagine coordinate system format'/>"
 "</CreationOptionList>");
 
     poDriver->SetMetadataItem(GDAL_DCAP_VIRTUALIO, "YES");
 
     poDriver->pfnOpen = HFADataset::Open;
     poDriver->pfnCreate = HFADataset::Create;
     poDriver->pfnCreateCopy = HFADataset::CreateCopy;
     poDriver->pfnIdentify = HFADataset::Identify;
     poDriver->pfnRename = HFADataset::Rename;
     poDriver->pfnCopyFiles = HFADataset::CopyFiles;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
diff --git a/gdal/frmts/idrisi/IdrisiDataset.cpp b/gdal/frmts/idrisi/IdrisiDataset.cpp
index 57441c0a5f..849354d8c0 100644
--- a/gdal/frmts/idrisi/IdrisiDataset.cpp
+++ b/gdal/frmts/idrisi/IdrisiDataset.cpp
@@ -3422,23 +3422,23 @@ int  SaveAsCRLF(char **papszStrList, const char *pszFname)
 void GDALRegister_IDRISI()
 {
     if( GDALGetDriverByName( "RST" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "RST" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, rstVERSION );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_Idrisi.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/Idrisi.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, extRST );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 Float32" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = IdrisiDataset::Open;
     poDriver->pfnCreate = IdrisiDataset::Create;
     poDriver->pfnCreateCopy = IdrisiDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/ignfheightasciigrid/ignfheightasciigrid.cpp b/gdal/frmts/ignfheightasciigrid/ignfheightasciigrid.cpp
index 1f50306e1e..8e5b4842f9 100644
--- a/gdal/frmts/ignfheightasciigrid/ignfheightasciigrid.cpp
+++ b/gdal/frmts/ignfheightasciigrid/ignfheightasciigrid.cpp
@@ -699,23 +699,23 @@ GDALDataset* IGNFHeightASCIIGridDataset::Open(GDALOpenInfo* poOpenInfo)
 void GDALRegister_IGNFHeightASCIIGrid()
 
 {
     if( GDALGetDriverByName("IGNFHeightASCIIGrid") != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("IGNFHeightASCIIGrid");
     poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_LONGNAME,
                               "IGN France height correction ASCII Grid");
     poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC,
-                              "frmt_various.html#IGNFHeightASCIIGrid");
+                              "drivers/raster/ignfheightasciigrid.html");
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSIONS, "mnt txt gra");
 
     poDriver->SetMetadataItem(GDAL_DCAP_VIRTUALIO, "YES");
 
     poDriver->pfnOpen = IGNFHeightASCIIGridDataset::Open;
     poDriver->pfnIdentify = IGNFHeightASCIIGridDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
diff --git a/gdal/frmts/ingr/IntergraphDataset.cpp b/gdal/frmts/ingr/IntergraphDataset.cpp
index 643781fede..98a37437a3 100644
--- a/gdal/frmts/ingr/IntergraphDataset.cpp
+++ b/gdal/frmts/ingr/IntergraphDataset.cpp
@@ -875,22 +875,22 @@ CPLErr IntergraphDataset::_SetProjection( const char * /* pszProjString */ )
 void GDALRegister_INGR()
 {
     if( GDALGetDriverByName( "INGR" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "INGR" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Intergraph Raster" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_IntergraphRaster.html" );
+                               "drivers/raster/intergraphraster.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 Int32 Float32 Float64" );
 
     poDriver->pfnOpen = IntergraphDataset::Open;
     poDriver->pfnCreate    = IntergraphDataset::Create;
     poDriver->pfnCreateCopy = IntergraphDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/iris/irisdataset.cpp b/gdal/frmts/iris/irisdataset.cpp
index 152ac1cbd1..7c4ab4c3a1 100644
--- a/gdal/frmts/iris/irisdataset.cpp
+++ b/gdal/frmts/iris/irisdataset.cpp
@@ -1151,21 +1151,21 @@ GDALDataset *IRISDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_IRIS()
 
 {
     if( GDALGetDriverByName( "IRIS" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "IRIS" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "IRIS data (.PPI, .CAPPi etc)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#IRIS" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/iris.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "ppi" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = IRISDataset::Open;
     poDriver->pfnIdentify = IRISDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/jaxapalsar/jaxapalsardataset.cpp b/gdal/frmts/jaxapalsar/jaxapalsardataset.cpp
index 33ac05fd52..ae24d1aaff 100644
--- a/gdal/frmts/jaxapalsar/jaxapalsardataset.cpp
+++ b/gdal/frmts/jaxapalsar/jaxapalsardataset.cpp
@@ -649,20 +649,20 @@ GDALDataset *PALSARJaxaDataset::Open( GDALOpenInfo * poOpenInfo ) {
 void GDALRegister_PALSARJaxa()
 
 {
     if( GDALGetDriverByName( "JAXAPALSAR" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "JAXAPALSAR" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "JAXA PALSAR Product Reader (Level 1.1/1.5)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_palsar.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/palsar.html" );
 
     poDriver->pfnOpen = PALSARJaxaDataset::Open;
     poDriver->pfnIdentify = PALSARJaxaDataset::Identify;
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/jdem/jdemdataset.cpp b/gdal/frmts/jdem/jdemdataset.cpp
index 9779ca8940..540c151fc2 100644
--- a/gdal/frmts/jdem/jdemdataset.cpp
+++ b/gdal/frmts/jdem/jdemdataset.cpp
@@ -362,20 +362,20 @@ GDALDataset *JDEMDataset::Open( GDALOpenInfo *poOpenInfo )
 void GDALRegister_JDEM()
 
 {
     if( GDALGetDriverByName("JDEM") != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("JDEM");
     poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_LONGNAME, "Japanese DEM (.mem)");
-    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "frmt_various.html#JDEM");
+    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "drivers/raster/jdem.html");
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSION, "mem");
     poDriver->SetMetadataItem(GDAL_DCAP_VIRTUALIO, "YES");
 
     poDriver->pfnOpen = JDEMDataset::Open;
     poDriver->pfnIdentify = JDEMDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
diff --git a/gdal/frmts/jp2kak/jp2kakdataset.cpp b/gdal/frmts/jp2kak/jp2kakdataset.cpp
index b7ad23fd98..20edac6a07 100644
--- a/gdal/frmts/jp2kak/jp2kakdataset.cpp
+++ b/gdal/frmts/jp2kak/jp2kakdataset.cpp
@@ -2690,76 +2690,76 @@ JP2KAKCreateCopy( const char * pszFilename, GDALDataset *poSrcDS,
 void GDALRegister_JP2KAK()
 
 {
     if( !GDAL_CHECK_VERSION("JP2KAK driver") )
         return;
 
     if( GDALGetDriverByName("JP2KAK") != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("JP2KAK");
     poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
     poDriver->SetMetadataItem(GDAL_DCAP_VECTOR, "YES");
     poDriver->SetMetadataItem(
         GDAL_DMD_LONGNAME, "JPEG-2000 (based on Kakadu " KDU_CORE_VERSION ")");
-    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "frmt_jp2kak.html");
+    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "drivers/raster/jp2kak.html");
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONDATATYPES, "Byte Int16 UInt16");
     poDriver->SetMetadataItem(GDAL_DMD_MIMETYPE, "image/jp2");
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSION, "jp2 j2k");
     poDriver->SetMetadataItem(GDAL_DCAP_VIRTUALIO, "YES");
 
     poDriver->SetMetadataItem(GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "   <Option name='1BIT_ALPHA_PROMOTION' type='boolean' description="
 "'Whether a 1-bit alpha channel should be promoted to 8-bit' default='YES'/>"
 "   <Option name='OPEN_REMOTE_GML' type='boolean' description="
 "'Whether to load remote vector layers referenced by "
 "a link in a GMLJP2 v2 box' default='NO'/>"
 "   <Option name='GEOREF_SOURCES' type='string' description="
 "'Comma separated list made with values "
 "INTERNAL/GMLJP2/GEOJP2/WORLDFILE/PAM/NONE that describe the priority order "
 "for georeferencing' default='PAM,GEOJP2,GMLJP2,WORLDFILE'/>"
 "</OpenOptionList>" );
 
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='CODEC' type='string-select' "
     "default='according to file extension. If unknown, default to JP2'>"
 "       <Value>JP2</Value>"
 "       <Value>J2K</Value>"
 "   </Option>"
 "   <Option name='QUALITY' type='integer' description="
 "'0.01-100, 100 is lossless'/>"
 "   <Option name='BLOCKXSIZE' type='int' description='Tile Width'/>"
 "   <Option name='BLOCKYSIZE' type='int' description='Tile Height'/>"
 "   <Option name='GeoJP2' type='boolean' description='defaults to ON'/>"
 "   <Option name='GMLJP2' type='boolean' description='defaults to ON'/>"
 "   <Option name='GMLJP2V2_DEF' type='string' description="
 "'Definition file to describe how a GMLJP2 v2 box should be generated. "
 "If set to YES, a minimal instance will be created'/>"
 "   <Option name='LAYERS' type='integer'/>"
 "   <Option name='ROI' type='string'/>"
 "   <Option name='COMSEG' type='boolean' />"
 "   <Option name='FLUSH' type='boolean' />"
 "   <Option name='NBITS' type='int' description="
 "'BITS (precision) for sub-byte files (1-7), sub-uint16 (9-15)'/>"
 "   <Option name='Corder' type='string'/>"
 "   <Option name='Cprecincts' type='string'/>"
 "   <Option name='Cmodes' type='string'/>"
 "   <Option name='Clevels' type='string'/>"
 "   <Option name='ORGgen_plt' type='string'/>"
 "   <Option name='ORGgen_tlm' type='string'/>"
 "   <Option name='Qguard' type='integer'/>"
 "   <Option name='Sprofile' type='string'/>"
 "   <Option name='Rshift' type='string'/>"
 "   <Option name='Rlevels' type='string'/>"
 "   <Option name='Rweight' type='string'/>"
 "</CreationOptionList>" );
 
     poDriver->pfnOpen = JP2KAKDataset::Open;
     poDriver->pfnIdentify = JP2KAKDataset::Identify;
     poDriver->pfnCreateCopy = JP2KAKCreateCopy;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
diff --git a/gdal/frmts/jp2lura/jp2luradataset.cpp b/gdal/frmts/jp2lura/jp2luradataset.cpp
index bf0b29cb1a..e4f0357626 100644
--- a/gdal/frmts/jp2lura/jp2luradataset.cpp
+++ b/gdal/frmts/jp2lura/jp2luradataset.cpp
@@ -2496,199 +2496,199 @@ void JP2LuraDataset::WriteXMLBoxes(VSILFILE* fp, GDALDataset* poSrcDS,
 void GDALRegister_JP2Lura()
 
 {
     GDALDriver  *poDriver;
 
     if (! GDAL_CHECK_VERSION("JP2Lura driver"))
         return;
 
     if( GDALGetDriverByName( "JP2Lura" ) == nullptr )
     {
         poDriver = new GDALDriver();
 
         poDriver->SetDescription( "JP2Lura" );
         poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
         poDriver->SetMetadataItem( GDAL_DCAP_VECTOR, "YES" );
         poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                 "JPEG-2000 driver based on Lurawave library" );
         poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                                   "frmt_jp2lura.html" );
+                                   "drivers/raster/jp2lura.html" );
         poDriver->SetMetadataItem( GDAL_DMD_MIMETYPE, "image/jp2" );
         poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "jp2" );
         poDriver->SetMetadataItem( GDAL_DMD_EXTENSIONS, "jp2 j2f j2k" );
         poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                    "Byte Int16 UInt16 Int32 UInt32 Float32");
 
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "   <Option name='OPEN_REMOTE_GML' type='boolean' description="
         "'Whether to load remote vector layers referenced by a link in a "
         "GMLJP2 v2 box' default='NO'/>"
 "   <Option name='GEOREF_SOURCES' type='string' description="
         "'Comma separated list made with values INTERNAL/GMLJP2/GEOJP2/"
         "WORLDFILE/PAM/NONE that describe the priority order for "
         "georeferencing' default='PAM,GEOJP2,GMLJP2,WORLDFILE'/>"
 "</OpenOptionList>" );
 
         poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='CODEC' type='string-select' description="
             "'Codec to use. Default according to file extension. "
             "If unknown, default to JP2'>"
 "       <Value>JP2</Value>"
 "       <Value alias='J2K'>Codestream</Value>"
 "   </Option>"
 "   <Option name='JPX' type='boolean' description="
         "'Whether to advertize JPX features when a GMLJP2 box is written "
         "(or use JPX branding if GMLJP2 v2)' default='YES'/>"
 "   <Option name='GeoJP2' type='boolean' description="
                         "'Whether to emit a GeoJP2 box' default='NO'/>"
 "   <Option name='GMLJP2' type='boolean' description="
                         "'Whether to emit a GMLJP2 v1 box' default='YES'/>"
 "   <Option name='GMLJP2V2_DEF' type='string' description="
         "'Definition file to describe how a GMLJP2 v2 box should be generated. "
         "If set to YES, a minimal instance will be created'/>"
 "   <Option name='SPLIT_IEEE754' type='boolean' description="
         "'Whether encoding of Float32 bands as 3 bands with IEEE754 sign bit, "
         "exponent, mantissa values (non standard extension)' default='NO'/>"
 "   <Option name='QUALITY_STYLE' type='string-select' description="
         "'This property tag is used to set the quality mode to be used during "
         "lossy compression.For normal images and situations (1:1 pixel display,"
         " ~50 cm viewing distance) we recommend Small or PSNR. For quality "
         "measurement only PSNR should be used' default='PSNR'>"
 "       <Value>PSNR</Value>"
 "       <Value>XXSmall</Value>"
 "       <Value>XSmall</Value>"
 "       <Value>Small</Value>"
 "       <Value>Medium</Value>"
 "       <Value>Large</Value>"
 "       <Value>XLarge</Value>"
 "       <Value>XXLarge</Value>"
 "   </Option>"
 "   <Option name='SPEED_MODE' type='string-select' description="
         "'This property tag is used to set the speed mode to be used "
         "during lossy compression. The following modes are defined' "
         "default='Fast'>"
 "       <Value>Fast</Value>"
 "       <Value>Accurate</Value>"
 "   </Option>"
 "   <Option name='RATE' type='int' description='"
         "When specifyig this value, the target compressed file size will be "
         "the uncompressed file size divided by RATE. In general the "
         "achieved rate will be exactly the requested size or a few bytes "
         "lower. Will force use of irreversible wavelet. "
         "Default value: 0 (maximum quality).' default='0'/>"
 "   <Option name='QUALITY' type='int' description="
         "'Compression to a particular quality is possible only when using "
         "the 9-7 filter with the standard expounded quantization and no regions"
         "of interest. A compression quality may be specified between 1 (low) "
         "and 100 (high). The size of the resulting JPEG2000 file will depend "
         "of the image content. Only used for irreversible compression. "
         "The compression quality cannot be used together "
         "the property RATE. Default value: 0 (maximum quality).' "
         "min='0' max='100' default='0'/>"
 "   <Option name='PRECISION' type='int' description="
         "'For improved efficiency, the library automatically, depending on the "
         "image depth, uses either 16 or 32 bit representation for wavelet "
         "coefficients. The precision property can be set to force the library "
         "to always use 32 bit representations. The use of 32 bit values may "
         "slightly improve image quality and the expense of speed and memory "
         "requirements. Default value: 0 (automatically select appropriate "
         "precision)' default='0'/>"
 "   <Option name='PROGRESSION' type='string-select' description="
         "'The organization of the coded data in the file can be set by this "
         "property tag. The following progression orders are defined: "
         "LRCP = Quality progressive, "
         "RLCP = Resolution then quality progressive, "
         "RPCL = Resolution then position progressive, "
         "PCRL = Position progressive, "
         "CPRL = Color/channel progressive. "
         "The setting LRCP (quality) is most useful when used with several "
         "layers. The PCRL (position) should be used with precincts.' "
         "default='LRCP'>"
 "       <Value>LRCP</Value>"
 "       <Value>RLCP</Value>"
 "       <Value>RPCL</Value>"
 "       <Value>PCRL</Value>"
 "       <Value>CPRL</Value>"
 "   </Option>"
 "   <Option name='REVERSIBLE' type='boolean' description="
         "'The reversible (Filter 5_3) and irreversible (Filter 9_7), may be "
         "selected using this property.' default='FALSE'/>"
 "   <Option name='LEVELS' type='int' description="
         "'The number of wavelet transformation levels can be set using this "
         "property. Valid values are in the range 0 (no wavelet analysis) to "
         "16 (very fine analysis). The memory requirements and compression time "
         "increases with the number of transformation levels. A reasonable "
         "number of transformation levels is in the 4-6 range.' "
         "min='0' max='16' default='5'/>"
 "   <Option name='QUANTIZATION_STYLE' type='string-select' description="
         "'This property may only be set when the irreversible filter (9_7) is "
         "used. The quantization steps can either be derived from a bases "
         "quantization step, DERIVED, or calculated for each image sub-band, "
         "EXPOUNDED.The EXPOUNDED style is recommended when using the "
         "irreversible filter.' default='EXPOUNDED'>"
 "       <Value>DERIVED</Value>"
 "       <Value>EXPOUNDED</Value>"
 "   </Option>"
 "   <Option name='TILEXSIZE' type='int' description="
         "'Tile Width. An image can  be split into smaller tiles, with each "
         "tile independently compressed. The basic tile size and the offset to "
         "the first tile on the virtual compression reference grid can be set "
         "using these properties. The first tile must contain the first image "
         "pixel. The tiling of an image is recommended only for very large "
         "images. Default value: (0) One Tile containing the complete image."
         "' default='0'/>"
 "   <Option name='TILEYSIZE' type='int' description="
         "'Tile Height. An image can be split into smaller tiles, with each "
         "tile independently compressed. The basic tile size and the offset to "
         "the first tile on the virtual compression reference grid can be set "
         "using these properties. The first tile must contain the first image "
         "pixel. The tiling of an image is recommended only for very large "
         "images. Default value: (0) One Tile containing the complete image."
         "' default='0'/>"
 "   <Option name='TLM' type='boolean' description="
     "'The efficiency of decoding regions in a tiled image may be improved by "
     "the usage of a tile length marker. Tile length markers contain the "
     "position of each tile in a JPEG2000 codestream, enabling faster access "
     "to tiled data.' default='FALSE'/>"
 "   <Option name='CODEBLOCK_WIDTH' type='int' description="
         "'The size of the blocks of data coded with the arithmetic entropy "
         "coder may be set using these parameters. A codeblock may contain no "
         "more than  4096 (result of CODEBLOCK_WIDTH x CODEBLOCK_HEIGHT) "
         "samples. Smaller codeblocks can aid the decoding of regions of an "
         "image and error resilience.' min='4' max='1024' default='64'/>"
 "   <Option name='CODEBLOCK_HEIGHT' type='int' description="
         "'The size of the blocks of data coded with the arithmetic entropy "
         "coder may be set using these parameters. A codeblock may contain no "
         "more than  4096 (result of CODEBLOCK_WIDTH x CODEBLOCK_HEIGHT) "
         "samples. Smaller codeblocks can aid the decoding of regions of an "
         "image and error resilience.' min='4' max='1024' default='64'/>"
 "   <Option name='ERROR_RESILIENCE' type='boolean' description="
         "'This option improves error resilient in JPEG2000 streams or for "
         "special codecs (e.g. hardware coder) for a faster compression/"
         "decompression. This option will increase the file size slightly when "
         "generating a code stream with the same image quality.' default='NO'/>"
 "   <Option name='WRITE_METADATA' type='boolean' description="
         "'Whether metadata should be written, in a dedicated JP2 XML box' "
         "default='NO'/>"
 "   <Option name='MAIN_MD_DOMAIN_ONLY' type='boolean' description="
         "'(Only if WRITE_METADATA=YES) Whether only metadata from the main "
         "domain should be written' default='NO'/>"
 "   <Option name='USE_SRC_CODESTREAM' type='boolean' description="
         "'When source dataset is JPEG2000, whether to reuse the codestream of "
         "the source dataset unmodified' default='NO'/>"
 "   <Option name='NBITS' type='int' description="
         "'Bits (precision) for sub-byte files (1-7), sub-uint16 (9-15), "
         "sub-uint32 (17-28)'/>"
 "</CreationOptionList>"  );
 
         poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
         poDriver->pfnIdentify = JP2LuraDataset::Identify;
         poDriver->pfnOpen = JP2LuraDataset::Open;
         poDriver->pfnCreateCopy = JP2LuraDataset::CreateCopy;
 
         GetGDALDriverManager()->RegisterDriver( poDriver );
     }
 }
 
diff --git a/gdal/frmts/jpeg/jpgdataset.cpp b/gdal/frmts/jpeg/jpgdataset.cpp
index 9767d50f07..40fe6c76a1 100644
--- a/gdal/frmts/jpeg/jpgdataset.cpp
+++ b/gdal/frmts/jpeg/jpgdataset.cpp
@@ -3519,35 +3519,35 @@ const char *GDALJPGDriver::GetMetadataItem( const char *pszName,
 void GDALRegister_JPEG()
 
 {
     if( GDALGetDriverByName("JPEG") != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALJPGDriver();
 
     poDriver->SetDescription("JPEG");
     poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_LONGNAME, "JPEG JFIF");
-    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "frmt_jpeg.html");
+    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "drivers/raster/jpeg.html");
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSION, "jpg");
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSIONS, "jpg jpeg");
     poDriver->SetMetadataItem(GDAL_DMD_MIMETYPE, "image/jpeg");
 
 #if defined(JPEG_LIB_MK1_OR_12BIT) || defined(JPEG_DUAL_MODE_8_12)
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONDATATYPES, "Byte UInt16");
 #else
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONDATATYPES, "Byte");
 #endif
     poDriver->SetMetadataItem(GDAL_DCAP_VIRTUALIO, "YES");
 
     poDriver->SetMetadataItem(GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>\n"
 "   <Option name='USE_INTERNAL_OVERVIEWS' type='boolean' description='whether to use implicit internal overviews' default='YES'/>\n"
 "</OpenOptionList>\n");
 
     poDriver->pfnIdentify = JPGDatasetCommon::Identify;
     poDriver->pfnOpen = JPGDatasetCommon::Open;
     poDriver->pfnCreateCopy = JPGDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
 #endif
diff --git a/gdal/frmts/jpeg2000/jpeg2000dataset.cpp b/gdal/frmts/jpeg2000/jpeg2000dataset.cpp
index bcceb3865b..3e668ffe50 100644
--- a/gdal/frmts/jpeg2000/jpeg2000dataset.cpp
+++ b/gdal/frmts/jpeg2000/jpeg2000dataset.cpp
@@ -1379,75 +1379,75 @@ JPEG2000CreateCopy( const char * pszFilename, GDALDataset *poSrcDS,
 void GDALRegister_JPEG2000()
 
 {
     if( !GDAL_CHECK_VERSION( "JPEG2000 driver" ) )
         return;
 
     if( GDALGetDriverByName( "JPEG2000" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "JPEG2000" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_VECTOR, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "JPEG-2000 part 1 (ISO/IEC 15444-1), "
                                "based on Jasper library" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_jpeg2000.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/jpeg2000.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 UInt16 Int32 UInt32" );
     poDriver->SetMetadataItem( GDAL_DMD_MIMETYPE, "image/jp2" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "jp2" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "   <Option name='1BIT_ALPHA_PROMOTION' type='boolean' description='Whether a 1-bit alpha channel should be promoted to 8-bit' default='YES'/>"
 "   <Option name='OPEN_REMOTE_GML' type='boolean' description='Whether to load remote vector layers referenced by a link in a GMLJP2 v2 box' default='NO'/>"
 "   <Option name='GEOREF_SOURCES' type='string' description='Comma separated list made with values INTERNAL/GMLJP2/GEOJP2/WORLDFILE/PAM/NONE that describe the priority order for georeferencing' default='PAM,GEOJP2,GMLJP2,WORLDFILE'/>"
 "</OpenOptionList>" );
 
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='FORMAT' type='string-select' default='according to file extension. If unknown, default to J2K'>"
 "       <Value>JP2</Value>"
 "       <Value>JPC</Value>"
 "   </Option>"
 "   <Option name='GeoJP2' type='boolean' description='Whether to emit a GeoJP2 box' default='YES'/>"
 "   <Option name='GMLJP2' type='boolean' description='Whether to emit a GMLJP2 v1 box' default='YES'/>"
 "   <Option name='GMLJP2V2_DEF' type='string' description='Definition file to describe how a GMLJP2 v2 box should be generated. If set to YES, a minimal instance will be created'/>"
 "   <Option name='WORLDFILE' type='boolean' description='Whether to write a worldfile .wld' default='NO'/>"
 "   <Option name='NBITS' type='int' description='Bits (precision) for sub-byte files (1-7), sub-uint16 (9-15)'/>"
 "   <Option name='imgareatlx' type='string' />"
 "   <Option name='imgareatly' type='string' />"
 "   <Option name='tilegrdtlx' type='string' />"
 "   <Option name='tilegrdtly' type='string' />"
 "   <Option name='tilewidth' type='string' />"
 "   <Option name='tileheight' type='string' />"
 "   <Option name='prcwidth' type='string' />"
 "   <Option name='prcheight' type='string' />"
 "   <Option name='cblkwidth' type='string' />"
 "   <Option name='cblkheight' type='string' />"
 "   <Option name='mode' type='string' />"
 "   <Option name='rate' type='string' />"
 "   <Option name='ilyrrates' type='string' />"
 "   <Option name='prg' type='string' />"
 "   <Option name='numrlvls' type='string' />"
 "   <Option name='sop' type='string' />"
 "   <Option name='eph' type='string' />"
 "   <Option name='lazy' type='string' />"
 "   <Option name='termall' type='string' />"
 "   <Option name='segsym' type='string' />"
 "   <Option name='vcausal' type='string' />"
 "   <Option name='pterm' type='string' />"
 "   <Option name='resetprob' type='string' />"
 "   <Option name='numgbits' type='string' />"
 "</CreationOptionList>"  );
 
     poDriver->pfnIdentify = JPEG2000Dataset::Identify;
     poDriver->pfnOpen = JPEG2000Dataset::Open;
     poDriver->pfnCreateCopy = JPEG2000CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/jpegls/jpeglsdataset.cpp b/gdal/frmts/jpegls/jpeglsdataset.cpp
index 3fd88fcc73..23f30524e7 100644
--- a/gdal/frmts/jpegls/jpeglsdataset.cpp
+++ b/gdal/frmts/jpegls/jpeglsdataset.cpp
@@ -761,36 +761,36 @@ JPEGLSDataset::CreateCopy( const char * pszFilename, GDALDataset *poSrcDS,
 void GDALRegister_JPEGLS()
 
 {
     if( !GDAL_CHECK_VERSION( "JPEGLS driver" ) )
         return;
 
     if( GDALGetDriverByName( "JPEGLS" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "JPEGLS" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "JPEGLS" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_jpegls.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/jpegls.html" );
     // poDriver->SetMetadataItem( GDAL_DMD_MIMETYPE, "image/jls" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "jls" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Byte Int16" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>\n"
 "   <Option name='INTERLEAVE' type='string-select' default='BAND' description='File interleaving'>"
 "       <Value>PIXEL</Value>"
 "       <Value>LINE</Value>"
 "       <Value>BAND</Value>"
 "   </Option>"
 "   <Option name='LOSS_FACTOR' type='int' default='0' description='0 = lossless, 1 = near lossless, >1 = lossy'/>"
 "</CreationOptionList>\n" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnIdentify = JPEGLSDataset::Identify;
     poDriver->pfnOpen = JPEGLSDataset::Open;
     poDriver->pfnCreateCopy = JPEGLSDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/jpipkak/jpipkakdataset.cpp b/gdal/frmts/jpipkak/jpipkakdataset.cpp
index 9096c4f2e1..989cb67574 100644
--- a/gdal/frmts/jpipkak/jpipkakdataset.cpp
+++ b/gdal/frmts/jpipkak/jpipkakdataset.cpp
@@ -1496,23 +1496,23 @@ GDALDataset *JPIPKAKDataset::Open(GDALOpenInfo * poOpenInfo)
 void GDALRegister_JPIPKAK()
 {
     if( !GDAL_CHECK_VERSION( "JPIPKAK driver" ) )
         return;
 
     if( GDALGetDriverByName( "JPIPKAK" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "JPIPKAK" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "JPIP (based on Kakadu)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_jpipkak.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/jpipkak.html" );
     poDriver->SetMetadataItem( GDAL_DMD_MIMETYPE, "image/jpp-stream" );
 
     poDriver->pfnOpen = JPIPKAKDataset::Open;
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
 
 /************************************************************************/
 /*                         JPIPKAKAsyncReader                         */
 /************************************************************************/
diff --git a/gdal/frmts/kea/keadriver.cpp b/gdal/frmts/kea/keadriver.cpp
index e965e9ab6f..0444b778de 100644
--- a/gdal/frmts/kea/keadriver.cpp
+++ b/gdal/frmts/kea/keadriver.cpp
@@ -35,53 +35,53 @@ CPL_CVSID("$Id$")
 // method to register this driver
 void GDALRegister_KEA()
 {
     if( !GDAL_CHECK_VERSION( "KEA" ) )
         return;
 
     if( GDALGetDriverByName( "KEA" ) != nullptr )
       return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "KEA" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "KEA Image Format (.kea)" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "kea" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_kea.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/kea.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 UInt16 Int32 UInt32 "
                                "Float32 Float64" );
     poDriver->SetMetadataItem(
         GDAL_DMD_CREATIONOPTIONLIST,
         CPLSPrintf(
 "<CreationOptionList> "
 "<Option name='IMAGEBLOCKSIZE' type='int' description='The size of each block for image data' default='%d'/> "
 "<Option name='ATTBLOCKSIZE' type='int' description='The size of each block for attribute data' default='%d'/> "
 "<Option name='MDC_NELMTS' type='int' description='Number of elements in the meta data cache' default='%d'/> "
 "<Option name='RDCC_NELMTS' type='int' description='Number of elements in the raw data chunk cache' default='%d'/> "
 "<Option name='RDCC_NBYTES' type='int' description='Total size of the raw data chunk cache, in bytes' default='%d'/> "
 "<Option name='RDCC_W0' type='float' min='0' max='1' description='Preemption policy' default='%.2f'/> "
 "<Option name='SIEVE_BUF' type='int' description='Sets the maximum size of the data sieve buffer' default='%d'/> "
 "<Option name='META_BLOCKSIZE' type='int' description='Sets the minimum size of metadata block allocations' default='%d'/> "
 "<Option name='DEFLATE' type='int' description='0 (no compression) to 9 (max compression)' default='%d'/> "
 "<Option name='THEMATIC' type='boolean' description='If YES then all bands are set to thematic' default='NO'/> "
 "</CreationOptionList>",
         static_cast<int>(kealib::KEA_IMAGE_CHUNK_SIZE),
         static_cast<int>(kealib::KEA_ATT_CHUNK_SIZE),
         static_cast<int>(kealib::KEA_MDC_NELMTS),
         static_cast<int>(kealib::KEA_RDCC_NELMTS),
         static_cast<int>(kealib::KEA_RDCC_NBYTES),
         kealib::KEA_RDCC_W0,
         static_cast<int>(kealib::KEA_SIEVE_BUF),
         static_cast<int>(kealib::KEA_META_BLOCKSIZE),
         kealib::KEA_DEFLATE ) );
     poDriver->SetMetadataItem(GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = KEADataset::Open;
     poDriver->pfnIdentify = KEADataset::Identify;
     poDriver->pfnCreate = KEADataset::Create;
     poDriver->pfnCreateCopy = KEADataset::CreateCopy;
     poDriver->pfnUnloadDriver = KEADatasetDriverUnload;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/l1b/l1bdataset.cpp b/gdal/frmts/l1b/l1bdataset.cpp
index 12e216d61a..028f26f9e1 100644
--- a/gdal/frmts/l1b/l1bdataset.cpp
+++ b/gdal/frmts/l1b/l1bdataset.cpp
@@ -3541,21 +3541,21 @@ bad:
 void GDALRegister_L1B()
 
 {
     if( GDALGetDriverByName( "L1B" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "L1B" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "NOAA Polar Orbiter Level 1b Data Set" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_l1b.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/l1b.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
 
     poDriver->pfnOpen = L1BDataset::Open;
     poDriver->pfnIdentify = L1BDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/leveller/levellerdataset.cpp b/gdal/frmts/leveller/levellerdataset.cpp
index a1fd49be06..4e1a5008b9 100644
--- a/gdal/frmts/leveller/levellerdataset.cpp
+++ b/gdal/frmts/leveller/levellerdataset.cpp
@@ -1552,21 +1552,21 @@ GDALDataset *LevellerDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_Leveller()
 
 {
     if( GDALGetDriverByName( "Leveller" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "Leveller" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "ter" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Leveller heightfield" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_leveller.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/leveller.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnIdentify = LevellerDataset::Identify;
     poDriver->pfnOpen = LevellerDataset::Open;
     poDriver->pfnCreate = LevellerDataset::Create;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/map/mapdataset.cpp b/gdal/frmts/map/mapdataset.cpp
index d8e89cdc80..bd23536751 100644
--- a/gdal/frmts/map/mapdataset.cpp
+++ b/gdal/frmts/map/mapdataset.cpp
@@ -490,20 +490,20 @@ char** MAPDataset::GetFileList()
 void GDALRegister_MAP()
 
 {
     if( GDALGetDriverByName( "MAP" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "MAP" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "OziExplorer .MAP" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_map.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/map.html" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = MAPDataset::Open;
     poDriver->pfnIdentify = MAPDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/mbtiles/mbtilesdataset.cpp b/gdal/frmts/mbtiles/mbtilesdataset.cpp
index ac827fae18..25405857e2 100644
--- a/gdal/frmts/mbtiles/mbtilesdataset.cpp
+++ b/gdal/frmts/mbtiles/mbtilesdataset.cpp
@@ -3531,43 +3531,43 @@ CPLErr MBTilesDataset::IBuildOverviews(
 void GDALRegister_MBTiles()
 
 {
     if( !GDAL_CHECK_VERSION( "MBTiles driver" ) )
         return;
 
     if( GDALGetDriverByName( "MBTiles" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "MBTiles" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_VECTOR, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "MBTiles" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_mbtiles.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/mbtiles.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "mbtiles" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Byte" );
 
 #define COMPRESSION_OPTIONS \
 "  <Option name='TILE_FORMAT' scope='raster' type='string-select' description='Format to use to create tiles' default='PNG'>" \
 "    <Value>PNG</Value>" \
 "    <Value>PNG8</Value>" \
 "    <Value>JPEG</Value>" \
 "  </Option>" \
 "  <Option name='QUALITY' scope='raster' type='int' min='1' max='100' description='Quality for JPEG tiles' default='75'/>" \
 "  <Option name='ZLEVEL' scope='raster' type='int' min='1' max='9' description='DEFLATE compression level for PNG tiles' default='6'/>" \
 "  <Option name='DITHER' scope='raster' type='boolean' description='Whether to apply Floyd-Steinberg dithering (for TILE_FORMAT=PNG8)' default='NO'/>" \
 
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST, "<OpenOptionList>"
 "  <Option name='ZOOM_LEVEL' scope='raster,vector' type='integer' description='Zoom level of full resolution. If not specified, maximum non-empty zoom level'/>"
 "  <Option name='BAND_COUNT' scope='raster' type='string-select' description='Number of raster bands' default='AUTO'>"
 "    <Value>AUTO</Value>"
 "    <Value>1</Value>"
 "    <Value>2</Value>"
 "    <Value>3</Value>"
 "    <Value>4</Value>"
 "  </Option>"
 "  <Option name='MINX' scope='raster,vector' type='float' description='Minimum X of area of interest'/>"
 "  <Option name='MINY' scope='raster,vector' type='float' description='Minimum Y of area of interest'/>"
 "  <Option name='MAXX' scope='raster,vector' type='float' description='Maximum X of area of interest'/>"
 "  <Option name='MAXY' scope='raster,vector' type='float' description='Maximum Y of area of interest'/>"
 "  <Option name='USE_BOUNDS' scope='raster,vector' type='boolean' description='Whether to use the bounds metadata, when available, to determine the AOI' default='YES'/>"
diff --git a/gdal/frmts/mrf/mrf_util.cpp b/gdal/frmts/mrf/mrf_util.cpp
index c0cfcf5233..8fc2b8be89 100644
--- a/gdal/frmts/mrf/mrf_util.cpp
+++ b/gdal/frmts/mrf/mrf_util.cpp
@@ -591,74 +591,74 @@ USING_NAMESPACE_MRF
 void GDALRegister_mrf()
 
 {
     if( GDALGetDriverByName("MRF") != nullptr )
         return;
 
     GDALDriver *driver = new GDALDriver();
     driver->SetDescription("MRF");
     driver->SetMetadataItem(GDAL_DMD_LONGNAME, "Meta Raster Format");
-    driver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "frmt_marfa.html");
+    driver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "drivers/raster/marfa.html");
     driver->SetMetadataItem(GDAL_DMD_EXTENSION, "mrf");
     driver->SetMetadataItem(GDAL_DCAP_VIRTUALIO, "YES");
 
 #if GDAL_VERSION_MAJOR >= 2
     driver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
 #endif
 
     // These will need to be revisited, do we support complex data types too?
     driver->SetMetadataItem(GDAL_DMD_CREATIONDATATYPES,
                             "Byte UInt16 Int16 Int32 UInt32 Float32 Float64");
 
     driver->SetMetadataItem(
         GDAL_DMD_CREATIONOPTIONLIST,
         "<CreationOptionList>"
         "   <Option name='COMPRESS' type='string-select' default='PNG' description='PPNG = Palette PNG; DEFLATE = zlib '>"
         "       <Value>JPEG</Value><Value>PNG</Value><Value>PPNG</Value><Value>JPNG</Value>"
         "       <Value>TIF</Value><Value>DEFLATE</Value><Value>NONE</Value>"
 #if defined(LERC)
         "       <Value>LERC</Value>"
 #endif
         "   </Option>"
         "   <Option name='INTERLEAVE' type='string-select' default='PIXEL'>"
         "       <Value>PIXEL</Value>"
         "       <Value>BAND</Value>"
         "   </Option>\n"
         "   <Option name='ZSIZE' type='int' description='Third dimension size' default='1'/>"
         "   <Option name='QUALITY' type='int' description='best=99, bad=0, default=85'/>\n"
         "   <Option name='OPTIONS' type='string' description='Freeform dataset parameters'/>\n"
         "   <Option name='BLOCKSIZE' type='int' description='Block size, both x and y, default 512'/>\n"
         "   <Option name='BLOCKXSIZE' type='int' description='Block x size, default=512'/>\n"
         "   <Option name='BLOCKYSIZE' type='int' description='Block y size, default=512'/>\n"
         "   <Option name='NETBYTEORDER' type='boolean' "
                     "description='Force endian for certain compress options, default is host order'/>\n"
         "   <Option name='CACHEDSOURCE' type='string' "
                     "description='The source raster, if this is a cache'/>\n"
         "   <Option name='UNIFORM_SCALE' type='int' description='Scale of overlays in MRF, usually 2'/>\n"
         "   <Option name='NOCOPY' type='boolean' description='Leave created MRF empty, default=no'/>\n"
         "   <Option name='DATANAME' type='string' description='Data file name'/>\n"
         "   <Option name='INDEXNAME' type='string' description='Index file name'/>\n"
         "   <Option name='SPACING' type='int' "
                     "description='Leave this many unused bytes before each tile, default=0'/>\n"
         "   <Option name='PHOTOMETRIC' type='string-select' default='DEFAULT' "
                     "description='Band interpretation, may affect block encoding'>\n"
         "       <Value>MULTISPECTRAL</Value>"
         "       <Value>RGB</Value>"
         "       <Value>YCC</Value>"
         "   </Option>\n"
         "</CreationOptionList>\n");
 
     driver->SetMetadataItem(
       GDAL_DMD_OPENOPTIONLIST,
       "<OpenOptionList>"
       "    <Option name='NOERRORS' type='boolean' description='Ignore decompression errors' default='FALSE'/>"
       "    <Option name='ZSLICE' type='int' description='For a third dimension MRF, pick a slice' default='0'/>"
       "</OpenOptionList>"
       );
 
     driver->pfnOpen = GDALMRFDataset::Open;
     driver->pfnIdentify = GDALMRFDataset::Identify;
     driver->pfnCreateCopy = GDALMRFDataset::CreateCopy;
     driver->pfnCreate = GDALMRFDataset::Create;
     driver->pfnDelete = GDALMRFDataset::Delete;
     GetGDALDriverManager()->RegisterDriver(driver);
 }
diff --git a/gdal/frmts/mrsid/mrsiddataset.cpp b/gdal/frmts/mrsid/mrsiddataset.cpp
index d841d76bca..70b1810b23 100644
--- a/gdal/frmts/mrsid/mrsiddataset.cpp
+++ b/gdal/frmts/mrsid/mrsiddataset.cpp
@@ -3535,87 +3535,87 @@ JP2CreateCopy( const char * pszFilename, GDALDataset *poSrcDS,
 void GDALRegister_MrSID()
 
 {
     if( !GDAL_CHECK_VERSION( "MrSID driver" ) )
         return;
 
 /* -------------------------------------------------------------------- */
 /*      MrSID driver.                                                   */
 /* -------------------------------------------------------------------- */
     if( GDALGetDriverByName( "MrSID" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "MrSID" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Multi-resolution Seamless Image Database "
                                "(MrSID)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_mrsid.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/mrsid.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "sid" );
 
 #ifdef MRSID_ESDK
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 UInt16 Int32 UInt32 "
                                "Float32 Float64" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 // Version 2 Options
 "   <Option name='COMPRESSION' type='double' description='Set compression ratio (0.0 default is meant to be lossless)'/>"
 // Version 3 Options
 "   <Option name='TWOPASS' type='int' description='Use twopass optimizer algorithm'/>"
 "   <Option name='FILESIZE' type='int' description='Set target file size (0 implies lossless compression)'/>"
 // Version 2 and 3 Option
 "   <Option name='WORLDFILE' type='boolean' description='Write out world file'/>"
 // Version Type
 "   <Option name='VERSION' type='int' description='Valid versions are 2 and 3, default = 3'/>"
 "</CreationOptionList>" );
 
     poDriver->pfnCreateCopy = MrSIDCreateCopy;
 
 #else
     // In read-only mode, we support VirtualIO. I don't think this is the case
     // for MrSIDCreateCopy().
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 #endif
     poDriver->pfnIdentify = MrSIDIdentify;
     poDriver->pfnOpen = MrSIDOpen;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 
 /* -------------------------------------------------------------------- */
 /*      JP2MRSID driver.                                                */
 /* -------------------------------------------------------------------- */
 #ifdef MRSID_J2K
     poDriver = new GDALDriver();
 
     poDriver->SetDescription( "JP2MrSID" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "MrSID JPEG2000" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_jp2mrsid.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/jp2mrsid.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "jp2" );
 
 #ifdef MRSID_ESDK
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 UInt16" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='COMPRESSION' type='double' description='Set compression ratio (0.0 default is meant to be lossless)'/>"
 "   <Option name='WORLDFILE' type='boolean' description='Write out world file'/>"
 "   <Option name='XMLPROFILE' type='string' description='Use named xml profile file'/>"
 "</CreationOptionList>" );
 
     poDriver->pfnCreateCopy = JP2CreateCopy;
 #else
         /* In read-only mode, we support VirtualIO. I don't think this is the case */
         /* for JP2CreateCopy() */
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 #endif
     poDriver->pfnIdentify = JP2Identify;
     poDriver->pfnOpen = JP2Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 #endif /* def MRSID_J2K */
 }
 
 #if defined(MRSID_USE_TIFFSYMS_WORKAROUND)
diff --git a/gdal/frmts/mrsid_lidar/gdal_MG4Lidar.cpp b/gdal/frmts/mrsid_lidar/gdal_MG4Lidar.cpp
index 24025c7d99..6468857a67 100644
--- a/gdal/frmts/mrsid_lidar/gdal_MG4Lidar.cpp
+++ b/gdal/frmts/mrsid_lidar/gdal_MG4Lidar.cpp
@@ -915,24 +915,24 @@ GDALDataset *MG4LidarDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_MG4Lidar()
 
 {
     if( !GDAL_CHECK_VERSION( "MG4Lidar driver" ) )
         return;
 
     if( GDALGetDriverByName( "MG4Lidar" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "MG4Lidar" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "MrSID Generation 4 / Lidar (.sid)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,  "frmt_mrsid_lidar.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,  "drivers/raster/mg4lidar.html" );
 
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "view" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Float64" );
 
     poDriver->pfnOpen = MG4LidarDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/msgn/msgndataset.cpp b/gdal/frmts/msgn/msgndataset.cpp
index d13602270a..267c12bbdd 100644
--- a/gdal/frmts/msgn/msgndataset.cpp
+++ b/gdal/frmts/msgn/msgndataset.cpp
@@ -550,20 +550,20 @@ GDALDataset *MSGNDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_MSGN()
 
 {
     if( GDALGetDriverByName( "MSGN" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "MSGN" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "EUMETSAT Archive native (.nat)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_msgn.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/msgn.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "nat" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = MSGNDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/netcdf/gmtdataset.cpp b/gdal/frmts/netcdf/gmtdataset.cpp
index 93aac378ef..bb87fdfad4 100644
--- a/gdal/frmts/netcdf/gmtdataset.cpp
+++ b/gdal/frmts/netcdf/gmtdataset.cpp
@@ -629,24 +629,24 @@ GMTCreateCopy( const char * pszFilename, GDALDataset *poSrcDS,
 void GDALRegister_GMT()
 
 {
     if( !GDAL_CHECK_VERSION( "GMT driver" ) )
         return;
 
     if( GDALGetDriverByName( "GMT" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "GMT" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "GMT NetCDF Grid Format" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#GMT" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/gmt.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "nc" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Int16 Int32 Float32 Float64" );
 
     poDriver->pfnOpen = GMTDataset::Open;
     poDriver->pfnCreateCopy = GMTCreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/netcdf/netcdfdataset.cpp b/gdal/frmts/netcdf/netcdfdataset.cpp
index 4e42543026..33aed6888d 100644
--- a/gdal/frmts/netcdf/netcdfdataset.cpp
+++ b/gdal/frmts/netcdf/netcdfdataset.cpp
@@ -9089,215 +9089,215 @@ static void NCDFUnloadDriver(CPL_UNUSED GDALDriver *poDriver)
 void GDALRegister_netCDF()
 
 {
     if( !GDAL_CHECK_VERSION("netCDF driver") )
         return;
 
     if( GDALGetDriverByName("netCDF") != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     // Set the driver details.
     poDriver->SetDescription("netCDF");
     poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
     poDriver->SetMetadataItem(GDAL_DCAP_VECTOR, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_LONGNAME, "Network Common Data Format");
-    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "frmt_netcdf.html");
+    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "drivers/raster/netcdf.html");
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSION, "nc");
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='FORMAT' type='string-select' default='NC'>"
 "     <Value>NC</Value>"
 #ifdef NETCDF_HAS_NC2
 "     <Value>NC2</Value>"
 #endif
 #ifdef NETCDF_HAS_NC4
 "     <Value>NC4</Value>"
 "     <Value>NC4C</Value>"
 #endif
 "   </Option>"
 #ifdef NETCDF_HAS_NC4
 "   <Option name='COMPRESS' type='string-select' default='NONE'>"
 "     <Value>NONE</Value>"
 "     <Value>DEFLATE</Value>"
 "   </Option>"
 "   <Option name='ZLEVEL' type='int' description='DEFLATE compression level 1-9' default='1'/>"
 #endif
 "   <Option name='WRITE_BOTTOMUP' type='boolean' default='YES'>"
 "   </Option>"
 "   <Option name='WRITE_GDAL_TAGS' type='boolean' default='YES'>"
 "   </Option>"
 "   <Option name='WRITE_LONLAT' type='string-select'>"
 "     <Value>YES</Value>"
 "     <Value>NO</Value>"
 "     <Value>IF_NEEDED</Value>"
 "   </Option>"
 "   <Option name='TYPE_LONLAT' type='string-select'>"
 "     <Value>float</Value>"
 "     <Value>double</Value>"
 "   </Option>"
 "   <Option name='PIXELTYPE' type='string-select' description='only used in Create()'>"
 "       <Value>DEFAULT</Value>"
 "       <Value>SIGNEDBYTE</Value>"
 "   </Option>"
 "   <Option name='CHUNKING' type='boolean' default='YES' description='define chunking when creating netcdf4 file'/>"
 "   <Option name='MULTIPLE_LAYERS' type='string-select' description='Behaviour regarding multiple vector layer creation' default='NO'>"
 "       <Value>NO</Value>"
 "       <Value>SEPARATE_FILES</Value>"
 #ifdef NETCDF_HAS_NC4
 "       <Value>SEPARATE_GROUPS</Value>"
 #endif
 "   </Option>"
 "   <Option name='GEOMETRY_ENCODING' type='string' default='CF_1.8' description='Specifies the type of geometry encoding when creating a netCDF dataset'>"
 "       <Value>WKT</Value>"
 "       <Value>CF_1.8</Value>"
 "   </Option>"
 "   <Option name='CONFIG_FILE' type='string' description='Path to a XML configuration file (or content inlined)'/>"
 "</CreationOptionList>"
                               );
     poDriver->SetMetadataItem(GDAL_DMD_SUBDATASETS, "YES");
 
     poDriver->SetMetadataItem(GDAL_DS_LAYER_CREATIONOPTIONLIST,
 "<LayerCreationOptionList>"
 "   <Option name='RECORD_DIM_NAME' type='string' description='Name of the unlimited dimension' default='record'/>"
 "   <Option name='STRING_DEFAULT_WIDTH' type='int' description='"
 #ifdef NETCDF_HAS_NC4
 "For non-NC4 format, "
 #endif
 "default width of strings. Default is 10 in autogrow mode, 80 otherwise.'/>"
 "   <Option name='WKT_DEFAULT_WIDTH' type='int' description='"
 #ifdef NETCDF_HAS_NC4
 "For non-NC4 format, "
 #endif
 "default width of WKT strings. Default is 1000 in autogrow mode, 10000 otherwise.'/>"
 "   <Option name='AUTOGROW_STRINGS' type='boolean' description='Whether to auto-grow non-bounded string fields of bidimensional char variable' default='YES'/>"
 #ifdef NETCDF_HAS_NC4
 "   <Option name='USE_STRING_IN_NC4' type='boolean' description='Whether to use NetCDF string type for strings in NC4 format. If NO, bidimensional char variable are used' default='YES'/>"
 #if 0
 "   <Option name='NCDUMP_COMPAT' type='boolean' description='When USE_STRING_IN_NC4=YEs, whether to use empty string instead of null string to avoid crashes with ncdump' default='NO'/>"
 #endif
 #endif
 "   <Option name='FEATURE_TYPE' type='string-select' description='CF FeatureType' default='AUTO'>"
 "       <Value>AUTO</Value>"
 "       <Value>POINT</Value>"
 "       <Value>PROFILE</Value>"
 "   </Option>"
 "   <Option name='BUFFER_SIZE' type='int' default='' description='Specifies the soft limit of buffer translation in bytes. Minimum size is 4096. Does not apply to datasets with CF version less than 1.8.'/>"
 "   <Option name='GROUPLESS_WRITE_BACK' type='boolean' default='NO' description='Enables or disables array building write back for CF-1.8.'/>"
 "   <Option name='PROFILE_DIM_NAME' type='string' description='Name of the profile dimension and variable' default='profile'/>"
 "   <Option name='PROFILE_DIM_INIT_SIZE' type='string' description='Initial size of profile dimension (default 100), or UNLIMITED for NC4 files'/>"
 "   <Option name='PROFILE_VARIABLES' type='string' description='Comma separated list of field names that must be indexed by the profile dimension'/>"
 "</LayerCreationOptionList>");
 
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "   <Option name='HONOUR_VALID_RANGE' type='boolean' "
     "description='Whether to set to nodata pixel values outside of the "
     "validity range' default='YES'/>"
 "</OpenOptionList>" );
 
 
     // Make driver config and capabilities available.
     poDriver->SetMetadataItem("NETCDF_VERSION", nc_inq_libvers());
     poDriver->SetMetadataItem("NETCDF_CONVENTIONS", NCDF_CONVENTIONS_CF_V1_5);
 #ifdef NETCDF_HAS_NC2
     poDriver->SetMetadataItem("NETCDF_HAS_NC2", "YES");
 #endif
 #ifdef NETCDF_HAS_NC4
     poDriver->SetMetadataItem("NETCDF_HAS_NC4", "YES");
 #endif
 #ifdef NETCDF_HAS_HDF4
     poDriver->SetMetadataItem("NETCDF_HAS_HDF4", "YES");
 #endif
 #ifdef HAVE_HDF4
     poDriver->SetMetadataItem("GDAL_HAS_HDF4", "YES");
 #endif
 #ifdef HAVE_HDF5
     poDriver->SetMetadataItem("GDAL_HAS_HDF5", "YES");
 #endif
 
 #ifdef ENABLE_NCDUMP
     poDriver->SetMetadataItem("ENABLE_NCDUMP", "YES");
 #endif
 
 #ifdef ENABLE_UFFD
     if( CPLIsUserFaultMappingSupported() )
     {
         poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     }
 #endif
 
 #ifdef NETCDF_HAS_NC4
     poDriver->SetMetadataItem( GDAL_DCAP_MULTIDIM_RASTER, "YES" );
 
     poDriver->SetMetadataItem(GDAL_DMD_MULTIDIM_DATASET_CREATIONOPTIONLIST,
 "<MultiDimDatasetCreationOptionList>"
 "   <Option name='FORMAT' type='string-select' default='NC4'>"
 "     <Value>NC</Value>"
 #ifdef NETCDF_HAS_NC2
 "     <Value>NC2</Value>"
 #endif
 "     <Value>NC4</Value>"
 "     <Value>NC4C</Value>"
 "   </Option>"
 "   <Option name='CONVENTIONS' type='string' default='CF-1.6' description='Value of the Conventions attribute'/>"
 "</MultiDimDatasetCreationOptionList>" );
 
     poDriver->SetMetadataItem(GDAL_DMD_MULTIDIM_DIMENSION_CREATIONOPTIONLIST,
 "<MultiDimDimensionCreationOptionList>"
 "   <Option name='UNLIMITED' type='boolean' description='Whether the dimension should be unlimited' default='false'/>"
 "</MultiDimDimensionCreationOptionList>" );
 
     poDriver->SetMetadataItem(GDAL_DMD_MULTIDIM_ARRAY_CREATIONOPTIONLIST,
 "<MultiDimArrayCreationOptionList>"
 "   <Option name='BLOCKSIZE' type='int' description='Block size in pixels'/>"
 "   <Option name='COMPRESS' type='string-select' default='NONE'>"
 "     <Value>NONE</Value>"
 "     <Value>DEFLATE</Value>"
 "   </Option>"
 "   <Option name='ZLEVEL' type='int' description='DEFLATE compression level 1-9' default='1'/>"
 "   <Option name='NC_TYPE' type='string-select' default='netCDF data type'>"
 "     <Value>AUTO</Value>"
 "     <Value>NC_BYTE</Value>"
 "     <Value>NC_INT64</Value>"
 "     <Value>NC_UINT64</Value>"
 "   </Option>"
 "</MultiDimArrayCreationOptionList>" );
 
     poDriver->SetMetadataItem(GDAL_DMD_MULTIDIM_ATTRIBUTE_CREATIONOPTIONLIST,
 "<MultiDimAttributeCreationOptionList>"
 "   <Option name='NC_TYPE' type='string-select' default='netCDF data type'>"
 "     <Value>AUTO</Value>"
 "     <Value>NC_BYTE</Value>"
 "     <Value>NC_CHAR</Value>"
 "     <Value>NC_INT64</Value>"
 "     <Value>NC_UINT64</Value>"
 "   </Option>"
 "</MultiDimAttributeCreationOptionList>" );
 #endif
 
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONFIELDDATATYPES,
                               "Integer Integer64 Real String Date DateTime");
 
     // Set pfns and register driver.
     poDriver->pfnOpen = netCDFDataset::Open;
     poDriver->pfnCreateCopy = netCDFDataset::CreateCopy;
     poDriver->pfnCreate = netCDFDataset::Create;
 #ifdef NETCDF_HAS_NC4
     poDriver->pfnCreateMultiDimensional = netCDFDataset::CreateMultiDimensional;
 #endif
     poDriver->pfnIdentify = netCDFDataset::Identify;
     poDriver->pfnUnloadDriver = NCDFUnloadDriver;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 
 #ifdef NETCDF_PLUGIN
     GDALRegister_GMT();
 #endif
 }
 
 /************************************************************************/
 /*                          New functions                               */
 /************************************************************************/
 
 /* Test for GDAL version string >= target */
diff --git a/gdal/frmts/ngsgeoid/ngsgeoiddataset.cpp b/gdal/frmts/ngsgeoid/ngsgeoiddataset.cpp
index ee7f177a83..8500e49322 100644
--- a/gdal/frmts/ngsgeoid/ngsgeoiddataset.cpp
+++ b/gdal/frmts/ngsgeoid/ngsgeoiddataset.cpp
@@ -458,22 +458,22 @@ const char* NGSGEOIDDataset::_GetProjectionRef()
 void GDALRegister_NGSGEOID()
 
 {
     if( GDALGetDriverByName( "NGSGEOID" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "NGSGEOID" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "NOAA NGS Geoid Height Grids" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_ngsgeoid.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/ngsgeoid.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "bin" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = NGSGEOIDDataset::Open;
     poDriver->pfnIdentify = NGSGEOIDDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/nitf/ecrgtocdataset.cpp b/gdal/frmts/nitf/ecrgtocdataset.cpp
index 8701ea2aa3..6313971763 100644
--- a/gdal/frmts/nitf/ecrgtocdataset.cpp
+++ b/gdal/frmts/nitf/ecrgtocdataset.cpp
@@ -1177,23 +1177,23 @@ GDALDataset *ECRGTOCDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_ECRGTOC()
 
 {
     if( GDALGetDriverByName( "ECRGTOC" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "ECRGTOC" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "ECRG TOC format" );
 
     poDriver->pfnIdentify = ECRGTOCDataset::Identify;
     poDriver->pfnOpen = ECRGTOCDataset::Open;
 
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#ECRGTOC" );
+                               "drivers/raster/ecrgtoc.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "xml" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/nitf/nitfdataset.cpp b/gdal/frmts/nitf/nitfdataset.cpp
index 8c020a3292..f604a1918a 100644
--- a/gdal/frmts/nitf/nitfdataset.cpp
+++ b/gdal/frmts/nitf/nitfdataset.cpp
@@ -6074,107 +6074,107 @@ static const char * const apszFieldsBLOCKA[] = {
 void GDALRegister_NITF()
 
 {
     if( GDALGetDriverByName( "NITF" ) != nullptr )
         return;
 
     CPLString osCreationOptions =
 "<CreationOptionList>"
 "   <Option name='IC' type='string-select' default='NC' description='Compression mode. NC=no compression. "
 #ifdef JPEG_SUPPORTED
                 "C3/M3=JPEG compression. "
 #endif
                 "C8=JP2 compression through the JP2ECW/JP2KAK/JP2OPENJPEG/JPEG2000 driver"
                 "'>"
 "       <Value>NC</Value>"
 #ifdef JPEG_SUPPORTED
 "       <Value>C3</Value>"
 "       <Value>M3</Value>"
 #endif
 "       <Value>C8</Value>"
 "   </Option>"
 #ifdef JPEG_SUPPORTED
 "   <Option name='QUALITY' type='int' description='JPEG quality 10-100' default='75'/>"
 "   <Option name='PROGRESSIVE' type='boolean' description='JPEG progressive mode'/>"
 "   <Option name='RESTART_INTERVAL' type='int' description='Restart interval (in MCUs). -1 for auto, 0 for none, > 0 for user specified' default='-1'/>"
 #endif
 "   <Option name='NUMI' type='int' default='1' description='Number of images to create (1-999). Only works with IC=NC'/>"
 "   <Option name='TARGET' type='float' description='For JP2 only. Compression Percentage'/>"
 "   <Option name='PROFILE' type='string-select' description='For JP2 only.'>"
 "       <Value>BASELINE_0</Value>"
 "       <Value>BASELINE_1</Value>"
 "       <Value>BASELINE_2</Value>"
 "       <Value>NPJE</Value>"
 "       <Value>EPJE</Value>"
 "   </Option>"
 "   <Option name='ICORDS' type='string-select' description='To ensure that space will be reserved for geographic corner coordinates in DMS (G), in decimal degrees (D), UTM North (N) or UTM South (S)'>"
 "       <Value>G</Value>"
 "       <Value>D</Value>"
 "       <Value>N</Value>"
 "       <Value>S</Value>"
 "   </Option>"
 "   <Option name='FHDR' type='string-select' description='File version' default='NITF02.10'>"
 "       <Value>NITF02.10</Value>"
 "       <Value>NSIF01.00</Value>"
 "   </Option>"
 "   <Option name='IREP' type='string' description='Set to RGB/LUT to reserve space for a color table for each output band. (Only needed for Create() method, not CreateCopy())'/>"
 "   <Option name='IREPBAND' type='string' description='Comma separated list of band IREPBANDs in band order'/>"
 "   <Option name='ISUBCAT' type='string' description='Comma separated list of band ISUBCATs in band order'/>"
 "   <Option name='LUT_SIZE' type='integer' description='Set to control the size of pseudocolor tables for RGB/LUT bands' default='256'/>"
 "   <Option name='BLOCKXSIZE' type='int' description='Set the block width'/>"
 "   <Option name='BLOCKYSIZE' type='int' description='Set the block height'/>"
 "   <Option name='BLOCKSIZE' type='int' description='Set the block with and height. Overridden by BLOCKXSIZE and BLOCKYSIZE'/>"
 "   <Option name='TEXT' type='string' description='TEXT options as text-option-name=text-option-content'/>"
 "   <Option name='CGM' type='string' description='CGM options in cgm-option-name=cgm-option-content'/>";
 
     for( unsigned int i=0;
          i < sizeof(asFieldDescription) / sizeof(asFieldDescription[0]);
          i++)
     {
         osCreationOptions += CPLString().Printf(
             "   <Option name='%s' type='string' description='%s' maxsize='%d'/>",
             asFieldDescription[i].pszName, asFieldDescription[i].pszDescription, asFieldDescription[i].nMaxLen);
     }
 
     osCreationOptions +=
 "   <Option name='TRE' type='string' description='Under the format TRE=tre-name,tre-contents'/>"
 "   <Option name='FILE_TRE' type='string' description='Under the format FILE_TRE=tre-name,tre-contents'/>"
 "   <Option name='BLOCKA_BLOCK_COUNT' type='int'/>";
 
     for( unsigned int i=0; apszFieldsBLOCKA[i] != nullptr; i+=3 )
     {
         char szFieldDescription[128];
         snprintf(szFieldDescription, sizeof(szFieldDescription),
                  "   <Option name='BLOCKA_%s_*' type='string' maxsize='%d'/>",
                 apszFieldsBLOCKA[i], atoi(apszFieldsBLOCKA[i+2]));
         osCreationOptions += szFieldDescription;
     }
     osCreationOptions +=
 "   <Option name='SDE_TRE' type='boolean' description='Write GEOLOB and GEOPSB TREs (only geographic SRS for now)' default='NO'/>"
 "   <Option name='RPC00B' type='boolean' description='Write RPC00B TRE (either from source TRE, or from RPC metadata)' default='YES'/>"
 "   <Option name='RPCTXT' type='boolean' description='Write out _RPC.TXT file' default='NO'/>"
 "   <Option name='USE_SRC_NITF_METADATA' type='boolean' description='Whether to use NITF source metadata in NITF-to-NITF conversions' default='YES'/>";
     osCreationOptions += "</CreationOptionList>";
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "NITF" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "National Imagery Transmission Format" );
 
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_nitf.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/nitf.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "ntf" );
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte UInt16 Int16 UInt32 Int32 Float32" );
 
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST, osCreationOptions);
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnIdentify = NITFDataset::Identify;
     poDriver->pfnOpen = NITFDataset::Open;
     poDriver->pfnCreate = NITFDataset::NITFDatasetCreate;
     poDriver->pfnCreateCopy = NITFDataset::NITFCreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/nitf/rpftocdataset.cpp b/gdal/frmts/nitf/rpftocdataset.cpp
index 1bce33e514..19b518928b 100644
--- a/gdal/frmts/nitf/rpftocdataset.cpp
+++ b/gdal/frmts/nitf/rpftocdataset.cpp
@@ -1330,24 +1330,24 @@ GDALDataset *RPFTOCDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_RPFTOC()
 
 {
     if( GDALGetDriverByName( "RPFTOC" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "RPFTOC" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Raster Product Format TOC format" );
 
     poDriver->pfnIdentify = RPFTOCDataset::Identify;
     poDriver->pfnOpen = RPFTOCDataset::Open;
 
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#RPFTOC" );
+                               "drivers/raster/rpftoc.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "toc" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/northwood/grcdataset.cpp b/gdal/frmts/northwood/grcdataset.cpp
index f271cf7cf9..0a630d0773 100644
--- a/gdal/frmts/northwood/grcdataset.cpp
+++ b/gdal/frmts/northwood/grcdataset.cpp
@@ -401,22 +401,22 @@ GDALDataset *NWT_GRCDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_NWT_GRC()
 
 {
     if( GDALGetDriverByName( "NWT_GRC" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "NWT_GRC" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Northwood Classified Grid Format .grc/.tab");
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#northwood_grc" );
+                               "drivers/raster/nwtgrd.html#driver-capabilities-nwt-grc" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "grc" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = NWT_GRCDataset::Open;
     poDriver->pfnIdentify = NWT_GRCDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/northwood/grddataset.cpp b/gdal/frmts/northwood/grddataset.cpp
index f628a423c5..f2a86b444c 100644
--- a/gdal/frmts/northwood/grddataset.cpp
+++ b/gdal/frmts/northwood/grddataset.cpp
@@ -1026,40 +1026,40 @@ GDALDataset * NWT_GRDDataset::CreateCopy(const char * pszFilename,
 /************************************************************************/
 /*                          GDALRegister_GRD()                          */
 /************************************************************************/
 void GDALRegister_NWT_GRD() {
     if (GDALGetDriverByName("NWT_GRD") != nullptr)
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("NWT_GRD");
     poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_LONGNAME,
             "Northwood Numeric Grid Format .grd/.tab");
-    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "frmt_nwtgrd.html");
+    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "drivers/raster/nwtgrd.html");
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSION, "grd");
     poDriver->SetMetadataItem(GDAL_DCAP_VIRTUALIO, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONDATATYPES, "Float32");
 
     poDriver->SetMetadataItem(GDAL_DMD_OPENOPTIONLIST,
       "<OpenOptionList>"
       "    <Option name='BAND_COUNT' type='int' description='1 (Z) or 4 (RGBZ). Only used in read-only mode' default='4'/>"
       "</OpenOptionList>");
 
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONOPTIONLIST,
       "<CreationOptionList>"
       "    <Option name='ZMIN' type='float' description='Minimum cell value of raster for defining RGB scaling' default='-2E+37'/>"
       "    <Option name='ZMAX' type='float' description='Maximum cell value of raster for defining RGB scaling' default='2E+38'/>"
       "    <Option name='BRIGHTNESS' type='int' description='Brightness to be recorded in TAB file. Only affects reading with MapInfo' default='50'/>"
       "    <Option name='CONTRAST' type='int' description='Contrast to be recorded in TAB file. Only affects reading with MapInfo' default='50'/>"
       "    <Option name='TRANSCOLOR' type='int' description='Transparent color to be recorded in TAB file. Only affects reading with MapInfo' default='0'/>"
       "    <Option name='TRANSLUCENCY' type='int' description='Level of translucency to be recorded in TAB file. Only affects reading with MapInfo' default='0'/>"
       "</CreationOptionList>");
 
     poDriver->pfnOpen = NWT_GRDDataset::Open;
     poDriver->pfnIdentify = NWT_GRDDataset::Identify;
     poDriver->pfnCreate = NWT_GRDDataset::Create;
     poDriver->pfnCreateCopy = NWT_GRDDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
diff --git a/gdal/frmts/openjpeg/openjpegdataset.cpp b/gdal/frmts/openjpeg/openjpegdataset.cpp
index f7efa1b2d1..8db7d78e26 100644
--- a/gdal/frmts/openjpeg/openjpegdataset.cpp
+++ b/gdal/frmts/openjpeg/openjpegdataset.cpp
@@ -4089,93 +4089,93 @@ GDALDataset * JP2OpenJPEGDataset::CreateCopy( const char * pszFilename,
 void GDALRegister_JP2OpenJPEG()
 
 {
     if( !GDAL_CHECK_VERSION( "JP2OpenJPEG driver" ) )
         return;
 
     if( GDALGetDriverByName( "JP2OpenJPEG" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "JP2OpenJPEG" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_VECTOR, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "JPEG-2000 driver based on OpenJPEG library" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_jp2openjpeg.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/jp2openjpeg.html" );
     poDriver->SetMetadataItem( GDAL_DMD_MIMETYPE, "image/jp2" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "jp2" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSIONS, "jp2 j2k" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 UInt16 Int32 UInt32" );
 
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "   <Option name='1BIT_ALPHA_PROMOTION' type='boolean' description='Whether a 1-bit alpha channel should be promoted to 8-bit' default='YES'/>"
 "   <Option name='OPEN_REMOTE_GML' type='boolean' description='Whether to load remote vector layers referenced by a link in a GMLJP2 v2 box' default='NO'/>"
 "   <Option name='GEOREF_SOURCES' type='string' description='Comma separated list made with values INTERNAL/GMLJP2/GEOJP2/WORLDFILE/PAM/NONE that describe the priority order for georeferencing' default='PAM,GEOJP2,GMLJP2,WORLDFILE'/>"
 "   <Option name='USE_TILE_AS_BLOCK' type='boolean' description='Whether to always use the JPEG-2000 block size as the GDAL block size' default='NO'/>"
 "</OpenOptionList>" );
 
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='CODEC' type='string-select' default='according to file extension. If unknown, default to J2K'>"
 "       <Value>JP2</Value>"
 "       <Value>J2K</Value>"
 "   </Option>"
 "   <Option name='GeoJP2' type='boolean' description='Whether to emit a GeoJP2 box' default='YES'/>"
 "   <Option name='GMLJP2' type='boolean' description='Whether to emit a GMLJP2 v1 box' default='YES'/>"
 "   <Option name='GMLJP2V2_DEF' type='string' description='Definition file to describe how a GMLJP2 v2 box should be generated. If set to YES, a minimal instance will be created'/>"
 "   <Option name='QUALITY' type='string' description='Single quality value or comma separated list of increasing quality values for several layers, each in the 0-100 range' default='25'/>"
 "   <Option name='REVERSIBLE' type='boolean' description='True if the compression is reversible' default='false'/>"
 "   <Option name='RESOLUTIONS' type='int' description='Number of resolutions.' min='1' max='30'/>"
 "   <Option name='BLOCKXSIZE' type='int' description='Tile Width' default='1024'/>"
 "   <Option name='BLOCKYSIZE' type='int' description='Tile Height' default='1024'/>"
 "   <Option name='PROGRESSION' type='string-select' default='LRCP'>"
 "       <Value>LRCP</Value>"
 "       <Value>RLCP</Value>"
 "       <Value>RPCL</Value>"
 "       <Value>PCRL</Value>"
 "       <Value>CPRL</Value>"
 "   </Option>"
 "   <Option name='SOP' type='boolean' description='True to insert SOP markers' default='false'/>"
 "   <Option name='EPH' type='boolean' description='True to insert EPH markers' default='false'/>"
 "   <Option name='YCBCR420' type='boolean' description='if RGB must be resampled to YCbCr 4:2:0' default='false'/>"
 "   <Option name='YCC' type='boolean' description='if RGB must be transformed to YCC color space (lossless MCT transform)' default='YES'/>"
 "   <Option name='NBITS' type='int' description='Bits (precision) for sub-byte files (1-7), sub-uint16 (9-15), sub-uint32 (17-31)'/>"
 "   <Option name='1BIT_ALPHA' type='boolean' description='Whether to encode the alpha channel as a 1-bit channel' default='NO'/>"
 "   <Option name='ALPHA' type='boolean' description='Whether to force encoding last channel as alpha channel' default='NO'/>"
 "   <Option name='PROFILE' type='string-select' description='Which codestream profile to use' default='AUTO'>"
 "       <Value>AUTO</Value>"
 "       <Value>UNRESTRICTED</Value>"
 "       <Value>PROFILE_1</Value>"
 "   </Option>"
 "   <Option name='INSPIRE_TG' type='boolean' description='Whether to use features that comply with Inspire Orthoimagery Technical Guidelines' default='NO'/>"
 "   <Option name='JPX' type='boolean' description='Whether to advertize JPX features when a GMLJP2 box is written (or use JPX branding if GMLJP2 v2)' default='YES'/>"
 "   <Option name='GEOBOXES_AFTER_JP2C' type='boolean' description='Whether to place GeoJP2/GMLJP2 boxes after the code-stream' default='NO'/>"
 "   <Option name='PRECINCTS' type='string' description='Precincts size as a string of the form {w,h},{w,h},... with power-of-two values'/>"
 "   <Option name='TILEPARTS' type='string-select' description='Whether to generate tile-parts and according to which criterion' default='DISABLED'>"
 "       <Value>DISABLED</Value>"
 "       <Value>RESOLUTIONS</Value>"
 "       <Value>LAYERS</Value>"
 "       <Value>COMPONENTS</Value>"
 "   </Option>"
 "   <Option name='CODEBLOCK_WIDTH' type='int' description='Codeblock width' default='64' min='4' max='1024'/>"
 "   <Option name='CODEBLOCK_HEIGHT' type='int' description='Codeblock height' default='64' min='4' max='1024'/>"
 "   <Option name='CT_COMPONENTS' type='int' min='3' max='4' description='If there is one color table, number of color table components to write. Autodetected if not specified.'/>"
 "   <Option name='WRITE_METADATA' type='boolean' description='Whether metadata should be written, in a dedicated JP2 XML box' default='NO'/>"
 "   <Option name='MAIN_MD_DOMAIN_ONLY' type='boolean' description='(Only if WRITE_METADATA=YES) Whether only metadata from the main domain should be written' default='NO'/>"
 "   <Option name='USE_SRC_CODESTREAM' type='boolean' description='When source dataset is JPEG2000, whether to reuse the codestream of the source dataset unmodified' default='NO'/>"
 #if OPJ_VERSION_MAJOR > 2 || OPJ_VERSION_MINOR >= 3
 "   <Option name='CODEBLOCK_STYLE' type='string' description='Comma-separated combination of BYPASS, RESET, TERMALL, VSC, PREDICTABLE, SEGSYM or value between 0 and 63'/>"
 #endif
 "</CreationOptionList>"  );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnIdentify = JP2OpenJPEGDataset::Identify;
     poDriver->pfnOpen = JP2OpenJPEGDataset::Open;
     poDriver->pfnCreateCopy = JP2OpenJPEGDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/ozi/ozidataset.cpp b/gdal/frmts/ozi/ozidataset.cpp
index c4d49849ae..85ee6fcb4a 100644
--- a/gdal/frmts/ozi/ozidataset.cpp
+++ b/gdal/frmts/ozi/ozidataset.cpp
@@ -669,22 +669,22 @@ GDALDataset *OZIDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_OZI()
 
 {
     if( !GDAL_CHECK_VERSION( "OZI driver" ) )
         return;
 
     if( GDALGetDriverByName( "OZI" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "OZI" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "OziExplorer Image File" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_ozi.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/ozi.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = OZIDataset::Open;
     poDriver->pfnIdentify = OZIDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/pcidsk/pcidskdataset2.cpp b/gdal/frmts/pcidsk/pcidskdataset2.cpp
index 4f8eae883d..4a0af5ee6b 100644
--- a/gdal/frmts/pcidsk/pcidskdataset2.cpp
+++ b/gdal/frmts/pcidsk/pcidskdataset2.cpp
@@ -2242,41 +2242,41 @@ PCIDSK2Dataset::ICreateLayer( const char * pszLayerName,
 void GDALRegister_PCIDSK()
 
 {
     if( GDALGetDriverByName( "PCIDSK" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "PCIDSK" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_VECTOR, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "PCIDSK Database File" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_pcidsk.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/pcidsk.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "pix" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte UInt16 Int16 Float32 CInt16 CFloat32" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='INTERLEAVING' type='string-select' default='BAND' description='raster data organization'>"
 "       <Value>PIXEL</Value>"
 "       <Value>BAND</Value>"
 "       <Value>FILE</Value>"
 "       <Value>TILED</Value>"
 "   </Option>"
 "   <Option name='COMPRESSION' type='string-select' default='NONE' description='compression - (INTERLEAVING=TILED only)'>"
 "       <Value>NONE</Value>"
 "       <Value>RLE</Value>"
 "       <Value>JPEG</Value>"
 "   </Option>"
 "   <Option name='TILESIZE' type='int' default='127' description='Tile Size (INTERLEAVING=TILED only)'/>"
 "</CreationOptionList>" );
     poDriver->SetMetadataItem( GDAL_DS_LAYER_CREATIONOPTIONLIST,
                                "<LayerCreationOptionList/>" );
 
     poDriver->pfnIdentify = PCIDSK2Dataset::Identify;
     poDriver->pfnOpen = PCIDSK2Dataset::Open;
     poDriver->pfnCreate = PCIDSK2Dataset::Create;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/pcraster/pcrastermisc.cpp b/gdal/frmts/pcraster/pcrastermisc.cpp
index 7101ea8579..58f76cf4ab 100644
--- a/gdal/frmts/pcraster/pcrastermisc.cpp
+++ b/gdal/frmts/pcraster/pcrastermisc.cpp
@@ -35,24 +35,24 @@ CPL_CVSID("$Id$")
 void GDALRegister_PCRaster()
 {
     if( !GDAL_CHECK_VERSION( "PCRaster driver" ) )
         return;
 
     if( GDALGetDriverByName( "PCRaster" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("PCRaster");
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
 
     poDriver->SetMetadataItem(GDAL_DMD_LONGNAME, "PCRaster Raster File");
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONDATATYPES, "Byte Int32 Float32");
-    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "frmt_various.html#PCRaster");
+    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "drivers/raster/pcraster.html");
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSION, "map" );
 
     poDriver->pfnOpen = PCRasterDataset::open;
     poDriver->pfnCreate = PCRasterDataset::create;
     poDriver->pfnCreateCopy = PCRasterDataset::createCopy;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
diff --git a/gdal/frmts/pdf/pdfdataset.cpp b/gdal/frmts/pdf/pdfdataset.cpp
index 49557503ae..f41325f05c 100644
--- a/gdal/frmts/pdf/pdfdataset.cpp
+++ b/gdal/frmts/pdf/pdfdataset.cpp
@@ -7189,113 +7189,113 @@ CPLString PDFSanitizeLayerName(const char* pszName)
 void GDALRegister_PDF()
 
 {
     if( !GDAL_CHECK_VERSION( "PDF driver" ) )
         return;
 
     if( GDALGetDriverByName( "PDF" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "PDF" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_VECTOR, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Geospatial PDF" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_pdf.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/pdf.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "pdf" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Byte" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONFIELDDATATYPES,
                                "Integer Integer64 Real String Date DateTime Time" );
 
 #if defined(HAVE_POPPLER) || defined(HAVE_PDFIUM)
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 #endif
 
     poDriver->SetMetadataItem( GDAL_DCAP_FEATURE_STYLES, "YES" );
 
 #ifdef HAVE_POPPLER
     poDriver->SetMetadataItem( "HAVE_POPPLER", "YES" );
 #endif // HAVE_POPPLER
 #ifdef HAVE_PODOFO
     poDriver->SetMetadataItem( "HAVE_PODOFO", "YES" );
 #endif // HAVE_PODOFO
 #ifdef HAVE_PDFIUM
     poDriver->SetMetadataItem( "HAVE_PDFIUM", "YES" );
 #endif // HAVE_PDFIUM
 
     poDriver->SetMetadataItem( GDAL_DS_LAYER_CREATIONOPTIONLIST,
 "<LayerCreationOptionList/>" );
 
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>\n"
 "   <Option name='COMPRESS' type='string-select' description='Compression method for raster data' default='DEFLATE'>\n"
 "     <Value>NONE</Value>\n"
 "     <Value>DEFLATE</Value>\n"
 "     <Value>JPEG</Value>\n"
 "     <Value>JPEG2000</Value>\n"
 "   </Option>\n"
 "   <Option name='STREAM_COMPRESS' type='string-select' description='Compression method for stream objects' default='DEFLATE'>\n"
 "     <Value>NONE</Value>\n"
 "     <Value>DEFLATE</Value>\n"
 "   </Option>\n"
 "   <Option name='GEO_ENCODING' type='string-select' description='Format of geo-encoding' default='ISO32000'>\n"
 "     <Value>NONE</Value>\n"
 "     <Value>ISO32000</Value>\n"
 "     <Value>OGC_BP</Value>\n"
 "     <Value>BOTH</Value>\n"
 "   </Option>\n"
 "   <Option name='NEATLINE' type='string' description='Neatline'/>\n"
 "   <Option name='DPI' type='float' description='DPI' default='72'/>\n"
 "   <Option name='WRITE_USERUNIT' type='boolean' description='Whether the UserUnit parameter must be written'/>\n"
 "   <Option name='PREDICTOR' type='int' description='Predictor Type (for DEFLATE compression)'/>\n"
 "   <Option name='JPEG_QUALITY' type='int' description='JPEG quality 1-100' default='75'/>\n"
 "   <Option name='JPEG2000_DRIVER' type='string'/>\n"
 "   <Option name='TILED' type='boolean' description='Switch to tiled format' default='NO'/>\n"
 "   <Option name='BLOCKXSIZE' type='int' description='Block Width'/>\n"
 "   <Option name='BLOCKYSIZE' type='int' description='Block Height'/>\n"
 "   <Option name='LAYER_NAME' type='string' description='Layer name for raster content'/>\n"
 "   <Option name='CLIPPING_EXTENT' type='string' description='Clipping extent for main and extra rasters. Format: xmin,ymin,xmax,ymax'/>\n"
 "   <Option name='EXTRA_RASTERS' type='string' description='List of extra (georeferenced) rasters.'/>\n"
 "   <Option name='EXTRA_RASTERS_LAYER_NAME' type='string' description='List of layer names for the extra (georeferenced) rasters.'/>\n"
 "   <Option name='EXTRA_STREAM' type='string' description='Extra data to insert into the page content stream'/>\n"
 "   <Option name='EXTRA_IMAGES' type='string' description='List of image_file_name,x,y,scale[,link=some_url] (possibly repeated)'/>\n"
 "   <Option name='EXTRA_LAYER_NAME' type='string' description='Layer name for extra content'/>\n"
 "   <Option name='MARGIN' type='int' description='Margin around image in user units'/>\n"
 "   <Option name='LEFT_MARGIN' type='int' description='Left margin in user units'/>\n"
 "   <Option name='RIGHT_MARGIN' type='int' description='Right margin in user units'/>\n"
 "   <Option name='TOP_MARGIN' type='int' description='Top margin in user units'/>\n"
 "   <Option name='BOTTOM_MARGIN' type='int' description='Bottom margin in user units'/>\n"
 "   <Option name='OGR_DATASOURCE' type='string' description='Name of OGR datasource to display on top of the raster layer'/>\n"
 "   <Option name='OGR_DISPLAY_FIELD' type='string' description='Name of field to use as the display field in the feature tree'/>\n"
 "   <Option name='OGR_DISPLAY_LAYER_NAMES' type='string' description='Comma separated list of OGR layer names to display in the feature tree'/>\n"
 "   <Option name='OGR_WRITE_ATTRIBUTES' type='boolean' description='Whether to write attributes of OGR features' default='YES'/>\n"
 "   <Option name='OGR_LINK_FIELD' type='string' description='Name of field to use as the URL field to make objects clickable.'/>\n"
 "   <Option name='XMP' type='string' description='xml:XMP metadata'/>\n"
 "   <Option name='WRITE_INFO' type='boolean' description='to control whether a Info block must be written' default='YES'/>\n"
 "   <Option name='AUTHOR' type='string'/>\n"
 "   <Option name='CREATOR' type='string'/>\n"
 "   <Option name='CREATION_DATE' type='string'/>\n"
 "   <Option name='KEYWORDS' type='string'/>\n"
 "   <Option name='PRODUCER' type='string'/>\n"
 "   <Option name='SUBJECT' type='string'/>\n"
 "   <Option name='TITLE' type='string'/>\n"
 "   <Option name='OFF_LAYERS' type='string' description='Comma separated list of layer names that should be initially hidden'/>\n"
 "   <Option name='EXCLUSIVE_LAYERS' type='string' description='Comma separated list of layer names, such that only one of those layers can be ON at a time.'/>\n"
 "   <Option name='JAVASCRIPT' type='string' description='Javascript script to embed and run at file opening'/>\n"
 "   <Option name='JAVASCRIPT_FILE' type='string' description='Filename of the Javascript script to embed and run at file opening'/>\n"
 "   <Option name='COMPOSITION_FILE' type='string' description='XML file describing how the PDF should be composed'/>\n"
 "</CreationOptionList>\n" );
 
 #ifdef HAVE_PDF_READ_SUPPORT
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST, szOpenOptionList );
     poDriver->pfnOpen = PDFDataset::OpenWrapper;
     poDriver->pfnIdentify = PDFDataset::Identify;
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
 #endif // HAVE_PDF_READ_SUPPORT
 
     poDriver->pfnCreateCopy = GDALPDFCreateCopy;
     poDriver->pfnCreate = PDFWritableVectorDataset::Create;
     poDriver->pfnUnloadDriver = GDALPDFUnloadDriver;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/pds/isis2dataset.cpp b/gdal/frmts/pds/isis2dataset.cpp
index 9daa8a45fa..bf2e38f6eb 100644
--- a/gdal/frmts/pds/isis2dataset.cpp
+++ b/gdal/frmts/pds/isis2dataset.cpp
@@ -1168,32 +1168,32 @@ int ISIS2Dataset::WriteLabel(
 void GDALRegister_ISIS2()
 
 {
     if( GDALGetDriverByName( "ISIS2" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "ISIS2" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "USGS Astrogeology ISIS cube (Version 2)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_isis2.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/isis2.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 UInt16 Float32 Float64");
 
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>\n"
 "   <Option name='LABELING_METHOD' type='string-select' default='ATTACHED'>\n"
 "     <Value>ATTACHED</Value>"
 "     <Value>DETACHED</Value>"
 "   </Option>"
 "   <Option name='IMAGE_EXTENSION' type='string' default='cub'/>\n"
 "</CreationOptionList>\n" );
 
     poDriver->pfnIdentify = ISIS2Dataset::Identify;
     poDriver->pfnOpen = ISIS2Dataset::Open;
     poDriver->pfnCreate = ISIS2Dataset::Create;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/pds/isis3dataset.cpp b/gdal/frmts/pds/isis3dataset.cpp
index 0a435caaff..06160a0fea 100644
--- a/gdal/frmts/pds/isis3dataset.cpp
+++ b/gdal/frmts/pds/isis3dataset.cpp
@@ -4331,94 +4331,94 @@ GDALDataset* ISIS3Dataset::CreateCopy( const char *pszFilename,
 void GDALRegister_ISIS3()
 
 {
     if( GDALGetDriverByName( "ISIS3" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "ISIS3" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "USGS Astrogeology ISIS cube (Version 3)" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_isis3.html" );
+                               "drivers/raster/isis3.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSIONS, "lbl cub" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte UInt16 Int16 Float32" );
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST, "<OpenOptionList/>");
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "  <Option name='DATA_LOCATION' type='string-select' "
                 "description='Location of pixel data' default='LABEL'>"
 "     <Value>LABEL</Value>"
 "     <Value>EXTERNAL</Value>"
 "     <Value>GEOTIFF</Value>"
 "  </Option>"
 "  <Option name='GEOTIFF_AS_REGULAR_EXTERNAL' type='boolean'"
     "description='Whether the GeoTIFF file, if uncompressed, should be "
     "registered as a regular raw file' default='YES'/>"
 "  <Option name='GEOTIFF_OPTIONS' type='string' "
     "description='Comma separated list of KEY=VALUE tuples to forward "
     "to the GeoTIFF driver'/>"
 "  <Option name='EXTERNAL_FILENAME' type='string' "
                 "description='Override default external filename. "
                 "Only for DATA_LOCATION=EXTERNAL or GEOTIFF'/>"
 "  <Option name='TILED' type='boolean' "
         "description='Whether the pixel data should be tiled' default='NO'/>"
 "  <Option name='BLOCKXSIZE' type='int' "
                             "description='Tile width' default='256'/>"
 "  <Option name='BLOCKYSIZE' type='int' "
                             "description='Tile height' default='256'/>"
 "  <Option name='COMMENT' type='string' "
     "description='Comment to add into the label'/>"
 "  <Option name='LATITUDE_TYPE' type='string-select' "
     "description='Value of Mapping.LatitudeType' default='Planetocentric'>"
 "     <Value>Planetocentric</Value>"
 "     <Value>Planetographic</Value>"
 "  </Option>"
 "  <Option name='LONGITUDE_DIRECTION' type='string-select' "
     "description='Value of Mapping.LongitudeDirection' "
     "default='PositiveEast'>"
 "     <Value>PositiveEast</Value>"
 "     <Value>PositiveWest</Value>"
 "  </Option>"
 "  <Option name='TARGET_NAME' type='string' description='Value of "
     "Mapping.TargetName'/>"
 "  <Option name='FORCE_360' type='boolean' "
     "description='Whether to force longitudes in [0,360] range' default='NO'/>"
 "  <Option name='WRITE_BOUNDING_DEGREES' type='boolean'"
     "description='Whether to write Min/MaximumLong/Latitude values' "
     "default='YES'/>"
 "  <Option name='BOUNDING_DEGREES' type='string'"
     "description='Manually set bounding box with the syntax "
     "min_long,min_lat,max_long,max_lat'/>"
 "  <Option name='USE_SRC_LABEL' type='boolean'"
     "description='Whether to use source label in ISIS3 to ISIS3 conversions' "
     "default='YES'/>"
 "  <Option name='USE_SRC_MAPPING' type='boolean'"
     "description='Whether to use Mapping group from source label in "
                  "ISIS3 to ISIS3 conversions' "
     "default='NO'/>"
 "  <Option name='USE_SRC_HISTORY' type='boolean'"
     "description='Whether to use content pointed by the History object in "
                  "ISIS3 to ISIS3 conversions' "
     "default='YES'/>"
 "  <Option name='ADD_GDAL_HISTORY' type='boolean'"
     "description='Whether to add GDAL specific history in the content pointed "
                  "by the History object in "
                  "ISIS3 to ISIS3 conversions' "
     "default='YES'/>"
 "  <Option name='GDAL_HISTORY' type='string'"
     "description='Manually defined GDAL history. Must be formatted as ISIS3 "
     "PDL. If not specified, it is automatically composed.'/>"
 "</CreationOptionList>"
     );
 
     poDriver->pfnOpen = ISIS3Dataset::Open;
     poDriver->pfnIdentify = ISIS3Dataset::Identify;
     poDriver->pfnCreate = ISIS3Dataset::Create;
     poDriver->pfnCreateCopy = ISIS3Dataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/pds/pds4dataset.cpp b/gdal/frmts/pds/pds4dataset.cpp
index 2f9c154ed5..dd639de957 100644
--- a/gdal/frmts/pds/pds4dataset.cpp
+++ b/gdal/frmts/pds/pds4dataset.cpp
@@ -4543,140 +4543,140 @@ CPLErr PDS4Dataset::Delete( const char * pszFilename )
 void GDALRegister_PDS4()
 
 {
     if( GDALGetDriverByName( "PDS4" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "PDS4" );
     poDriver->SetMetadataItem( GDAL_DCAP_VECTOR, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "NASA Planetary Data System 4" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_pds4.html" );
+                               "drivers/raster/pds4.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "xml" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte UInt16 Int16 UInt32 Int32 Float32 "
                                "Float64 CFloat32 CFloat64" );
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST, "<OpenOptionList/>");
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
 
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "  <Option name='LAT' type='string' scope='vector' description="
                     "'Name of a field containing a Latitude value' default='Latitude'/>"
 "  <Option name='LONG' type='string' scope='vector' description="
                     "'Name of a field containing a Longitude value' default='Longitude'/>"
 "  <Option name='ALT' type='string' scope='vector' description="
                     "'Name of a field containing a Altitude value' default='Altitude'/>"
 "  <Option name='WKT' type='string' scope='vector' description="
                     "'Name of a field containing a geometry encoded in the WKT format' default='WKT'/>"
 "  <Option name='KEEP_GEOM_COLUMNS' scope='vector' type='boolean' description="
                     "'whether to add original x/y/geometry columns as regular fields.' default='NO' />"
 "</OpenOptionList>" );
 
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "  <Option name='IMAGE_FILENAME' type='string' scope='raster' description="
                     "'Image filename'/>"
 "  <Option name='IMAGE_EXTENSION' type='string' scope='raster' description="
                     "'Extension of the binary raw/geotiff file'/>"
 "  <Option name='CREATE_LABEL_ONLY' scope='raster' type='boolean' description="
                     "'whether to create only the XML label when converting from an existing raw format.' default='NO' />"
 "  <Option name='IMAGE_FORMAT' type='string-select' scope='raster' "
                     "description='Format of the image file' default='RAW'>"
 "     <Value>RAW</Value>"
 "     <Value>GEOTIFF</Value>"
 "  </Option>"
 #ifdef notdef
 "  <Option name='GEOTIFF_OPTIONS' type='string' scope='raster' "
     "description='Comma separated list of KEY=VALUE tuples to forward "
     "to the GeoTIFF driver'/>"
 #endif
 "  <Option name='INTERLEAVE' type='string-select' scope='raster' description="
                     "'Pixel organization' default='BSQ'>"
 "     <Value>BSQ</Value>"
 "     <Value>BIP</Value>"
 "     <Value>BIL</Value>"
 "  </Option>"
 "  <Option name='VAR_*' type='string' scope='raster,vector' description="
                     "'Value to substitute to a variable in the template'/>"
 "  <Option name='TEMPLATE' type='string' scope='raster,vector' description="
                     "'.xml template to use'/>"
 "  <Option name='USE_SRC_LABEL' type='boolean' scope='raster' "
     "description='Whether to use source label in PDS4 to PDS4 conversions' "
     "default='YES'/>"
 "  <Option name='LATITUDE_TYPE' type='string-select' scope='raster,vector' "
     "description='Value of latitude_type' default='Planetocentric'>"
 "     <Value>Planetocentric</Value>"
 "     <Value>Planetographic</Value>"
 "  </Option>"
 "  <Option name='LONGITUDE_DIRECTION' type='string-select' scope='raster,vector' "
     "description='Value of longitude_direction' "
     "default='Positive East'>"
 "     <Value>Positive East</Value>"
 "     <Value>Positive West</Value>"
 "  </Option>"
 "  <Option name='RADII' type='string' scope='raster,vector' description='Value of form "
     "semi_major_radius,semi_minor_radius to override the ones of the SRS'/>"
 "  <Option name='ARRAY_TYPE' type='string-select' scope='raster' description='Name of the "
             "Array XML element' default='Array_3D_Image'>"
 "     <Value>Array</Value>"
 "     <Value>Array_2D</Value>"
 "     <Value>Array_2D_Image</Value>"
 "     <Value>Array_2D_Map</Value>"
 "     <Value>Array_2D_Spectrum</Value>"
 "     <Value>Array_3D</Value>"
 "     <Value>Array_3D_Image</Value>"
 "     <Value>Array_3D_Movie</Value>"
 "     <Value>Array_3D_Spectrum</Value>"
 "  </Option>"
 "  <Option name='ARRAY_IDENTIFIER' type='string' scope='raster' "
     "description='Identifier to put in the Array element'/>"
 "  <Option name='UNIT' type='string' scope='raster' "
     "description='Name of the unit of the array elements'/>"
 "  <Option name='BOUNDING_DEGREES' type='string' scope='raster,vector' "
     "description='Manually set bounding box with the syntax "
     "west_lon,south_lat,east_lon,north_lat'/>"
 "</CreationOptionList>" );
 
     poDriver->SetMetadataItem( GDAL_DS_LAYER_CREATIONOPTIONLIST,
 "<LayerCreationOptionList>"
 "  <Option name='TABLE_TYPE' type='string-select' description='Type of table' default='DELIMITED'>"
 "     <Value>DELIMITED</Value>"
 "     <Value>CHARACTER</Value>"
 "     <Value>BINARY</Value>"
 "  </Option>"
 "  <Option name='GEOM_COLUMNS' type='string-select' description='How geometry is encoded' default='AUTO'>"
 "     <Value>AUTO</Value>"
 "     <Value>WKT</Value>"
 "     <Value>LONG_LAT</Value>"
 "  </Option>"
 "  <Option name='CREATE_VRT' type='boolean' description='Whether to generate "
         "a OGR VRT file. Only applies for TABLE_TYPE=DELIMITED' default='YES'/>"
 "  <Option name='LAT' type='string' description="
                     "'Name of a field containing a Latitude value' default='Latitude'/>"
 "  <Option name='LONG' type='string' description="
                     "'Name of a field containing a Longitude value' default='Longitude'/>"
 "  <Option name='ALT' type='string' description="
                     "'Name of a field containing a Altitude value' default='Altitude'/>"
 "  <Option name='WKT' type='string' description="
                     "'Name of a field containing a WKT value' default='WKT'/>"
 "  <Option name='SAME_DIRECTORY' type='boolean' description="
                     "'Whether table files should be created in the same "
                     "directory, or in a subdirectory' default='NO'/>"
 "</LayerCreationOptionList>");
 
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONFIELDDATATYPES, "Integer Integer64 Real String Date DateTime Time" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONFIELDDATASUBTYPES, "Boolean" );
 
     poDriver->pfnOpen = PDS4Dataset::Open;
     poDriver->pfnIdentify = PDS4Dataset::Identify;
     poDriver->pfnCreate = PDS4Dataset::Create;
     poDriver->pfnCreateCopy = PDS4Dataset::CreateCopy;
     poDriver->pfnDelete = PDS4Dataset::Delete;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/pds/pdsdataset.cpp b/gdal/frmts/pds/pdsdataset.cpp
index c05718b693..17a375dad1 100644
--- a/gdal/frmts/pds/pdsdataset.cpp
+++ b/gdal/frmts/pds/pdsdataset.cpp
@@ -1561,21 +1561,21 @@ char **PDSDataset::GetMetadata( const char* pszDomain )
 void GDALRegister_PDS()
 
 {
     if( GDALGetDriverByName( "PDS" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "PDS" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "NASA Planetary Data System" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_pds.html" );
+                               "drivers/raster/pds.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = PDSDataset::Open;
     poDriver->pfnIdentify = PDSDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/pds/vicardataset.cpp b/gdal/frmts/pds/vicardataset.cpp
index 5f63c80657..7353e88fba 100644
--- a/gdal/frmts/pds/vicardataset.cpp
+++ b/gdal/frmts/pds/vicardataset.cpp
@@ -2913,56 +2913,56 @@ vsi_l_offset VICARDataset::GetVICARLabelOffsetFromPDS3(const char* pszHdr,
 void GDALRegister_VICAR()
 
 {
     if( GDALGetDriverByName( "VICAR" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "VICAR" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_VECTOR, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "MIPL VICAR file" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_vicar.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/vicar.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 Int32 Float32 Float64 CFloat32" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "  <Option name='COORDINATE_SYSTEM_NAME' type='string-select' "
     "description='Value of MAP.COORDINATE_SYSTEM_NAME' default='PLANETOCENTRIC'>"
 "     <Value>PLANETOCENTRIC</Value>"
 "     <Value>PLANETOGRAPHIC</Value>"
 "  </Option>"
 "  <Option name='POSITIVE_LONGITUDE_DIRECTION' type='string-select' "
     "description='Value of MAP.POSITIVE_LONGITUDE_DIRECTION' "
     "default='EAST'>"
 "     <Value>EAST</Value>"
 "     <Value>WEST</Value>"
 "  </Option>"
 "  <Option name='TARGET_NAME' type='string' description='Value of "
     "MAP.TARGET_NAME'/>"
 "  <Option name='USE_SRC_LABEL' type='boolean'"
     "description='Whether to use source label in VICAR to VICAR conversions' "
     "default='YES'/>"
 "  <Option name='USE_SRC_MAP' type='boolean'"
     "description='Whether to use MAP property from source label in "
                  "VICAR to VICAR conversions' "
     "default='NO'/>"
 "  <Option name='LABEL' type='string'"
     "description='Label to use, either as a JSON string or a filename containing one'/>"
 "  <Option name='COMPRESS' type='string-select' "
     "description='Compression method' default='NONE'>"
 "     <Value>NONE</Value>"
 "     <Value>BASIC</Value>"
 "     <Value>BASIC2</Value>"
 "  </Option>"
 "</CreationOptionList>"
     );
 
     poDriver->pfnOpen = VICARDataset::Open;
     poDriver->pfnIdentify = VICARDataset::Identify;
     poDriver->pfnCreate = VICARDataset::Create;
     poDriver->pfnCreateCopy = VICARDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/plmosaic/plmosaicdataset.cpp b/gdal/frmts/plmosaic/plmosaicdataset.cpp
index 3825fce48b..2477261ead 100644
--- a/gdal/frmts/plmosaic/plmosaicdataset.cpp
+++ b/gdal/frmts/plmosaic/plmosaicdataset.cpp
@@ -1480,31 +1480,31 @@ CPLErr  PLMosaicDataset::IRasterIO( GDALRWFlag eRWFlag,
 void GDALRegister_PLMOSAIC()
 
 {
     if( GDALGetDriverByName( "PLMOSAIC" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "PLMOSAIC" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Planet Labs Mosaics API" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_plmosaic.html" );
+                               "drivers/raster/plmosaic.html" );
 
     poDriver->SetMetadataItem( GDAL_DMD_CONNECTION_PREFIX, "PLMOSAIC:" );
 
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "  <Option name='API_KEY' type='string' description='Account API key' required='true'/>"
 "  <Option name='MOSAIC' type='string' description='Mosaic name'/>"
 "  <Option name='CACHE_PATH' type='string' description='Directory where to put cached quads'/>"
 "  <Option name='TRUST_CACHE' type='boolean' description='Whether already cached quads should be trusted as the most recent version' default='NO'/>"
 "  <Option name='USE_TILES' type='boolean' description='Whether to use the tile API even for full resolution data (only for Byte mosaics)' default='NO'/>"
 "</OpenOptionList>" );
 
     poDriver->pfnIdentify = PLMosaicDataset::Identify;
     poDriver->pfnOpen = PLMosaicDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/png/pngdataset.cpp b/gdal/frmts/png/pngdataset.cpp
index d69bdf1eda..69deca4579 100644
--- a/gdal/frmts/png/pngdataset.cpp
+++ b/gdal/frmts/png/pngdataset.cpp
@@ -2061,54 +2061,54 @@ static void png_gdal_warning( CPL_UNUSED png_structp png_ptr,
 void GDALRegister_PNG()
 
 {
     if( GDALGetDriverByName( "PNG" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "PNG" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Portable Network Graphics" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#PNG" );
+                               "drivers/raster/png.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "png" );
     poDriver->SetMetadataItem( GDAL_DMD_MIMETYPE, "image/png" );
 
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte UInt16" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>\n"
 "   <Option name='WORLDFILE' type='boolean' description='Create world file' default='FALSE'/>\n"
 "   <Option name='ZLEVEL' type='int' description='DEFLATE compression level 1-9' default='6'/>\n"
 "   <Option name='SOURCE_ICC_PROFILE' type='string' description='ICC Profile'/>\n"
 "   <Option name='SOURCE_ICC_PROFILE_NAME' type='string' description='ICC Profile name'/>\n"
 "   <Option name='SOURCE_PRIMARIES_RED' type='string' description='x,y,1.0 (xyY) red chromaticity'/>\n"
 "   <Option name='SOURCE_PRIMARIES_GREEN' type='string' description='x,y,1.0 (xyY) green chromaticity'/>\n"
 "   <Option name='SOURCE_PRIMARIES_BLUE' type='string' description='x,y,1.0 (xyY) blue chromaticity'/>\n"
 "   <Option name='SOURCE_WHITEPOINT' type='string' description='x,y,1.0 (xyY) whitepoint'/>\n"
 "   <Option name='PNG_GAMMA' type='string' description='Gamma'/>\n"
 "   <Option name='TITLE' type='string' description='Title'/>\n"
 "   <Option name='DESCRIPTION' type='string' description='Description'/>\n"
 "   <Option name='COPYRIGHT' type='string' description='Copyright'/>\n"
 "   <Option name='COMMENT' type='string' description='Comment'/>\n"
 "   <Option name='WRITE_METADATA_AS_TEXT' type='boolean' description='Whether to write source dataset metadata in TEXT chunks' default='FALSE'/>\n"
 "   <Option name='NBITS' type='int' description='Force output bit depth: 1, 2 or 4'/>\n"
 "</CreationOptionList>\n" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = PNGDataset::Open;
     poDriver->pfnCreateCopy = PNGDataset::CreateCopy;
     poDriver->pfnIdentify = PNGDataset::Identify;
 #ifdef SUPPORT_CREATE
     poDriver->pfnCreate = PNGDataset::Create;
 #endif
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
 
 #ifdef SUPPORT_CREATE
 /************************************************************************/
 /*                         IWriteBlock()                                */
 /************************************************************************/
diff --git a/gdal/frmts/prf/phprfdataset.cpp b/gdal/frmts/prf/phprfdataset.cpp
index 5787dbb123..6054ce4682 100644
--- a/gdal/frmts/prf/phprfdataset.cpp
+++ b/gdal/frmts/prf/phprfdataset.cpp
@@ -654,18 +654,18 @@ GDALDataset* PhPrfDataset::Open( GDALOpenInfo* poOpenInfo )
 void GDALRegister_PRF()
 {
     if( GDALGetDriverByName( PH_PRF_DRIVER ) != nullptr )
         return;
 
     GDALDriver* poDriver = new GDALDriver;
 
     poDriver->SetDescription( PH_PRF_DRIVER );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Racurs PHOTOMOD PRF" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "prf" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_prf.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/prf.html" );
     poDriver->pfnIdentify = PhPrfDataset::Identify;
     poDriver->pfnOpen = PhPrfDataset::Open;
     GDALRegisterDriver( (GDALDriverH)poDriver );
 }
 
diff --git a/gdal/frmts/r/rdataset.cpp b/gdal/frmts/r/rdataset.cpp
index 7acd8fd075..ef233038c5 100644
--- a/gdal/frmts/r/rdataset.cpp
+++ b/gdal/frmts/r/rdataset.cpp
@@ -594,28 +594,28 @@ GDALDataset *RDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_R()
 
 {
     if( GDALGetDriverByName("R") != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("R");
     poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_LONGNAME, "R Object Data Store");
-    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "frmt_r.html");
+    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "drivers/raster/r.html");
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSION, "rda");
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONDATATYPES, "Float32");
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='ASCII' type='boolean' description='For ASCII output, default NO'/>"
 "   <Option name='COMPRESS' type='boolean' description='Produced Compressed output, default YES'/>"
 "</CreationOptionList>");
 
     poDriver->SetMetadataItem(GDAL_DCAP_VIRTUALIO, "YES");
 
     poDriver->pfnOpen = RDataset::Open;
     poDriver->pfnIdentify = RDataset::Identify;
     poDriver->pfnCreateCopy = RCreateCopy;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
diff --git a/gdal/frmts/rasdaman/rasdamandataset.cpp b/gdal/frmts/rasdaman/rasdamandataset.cpp
index 06a1aa168e..4a80fca649 100644
--- a/gdal/frmts/rasdaman/rasdamandataset.cpp
+++ b/gdal/frmts/rasdaman/rasdamandataset.cpp
@@ -701,17 +701,17 @@ GDALDataset *RasdamanDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_RASDAMAN()
 
 {
   if( GDALGetDriverByName( "RASDAMAN" ) != NULL )
       return;
 
   GDALDriver *poDriver = new GDALDriver();
 
   poDriver->SetDescription( "RASDAMAN" );
   poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
   poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "RASDAMAN" );
-  poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_rasdaman.html" );
+  poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/rasdaman.html" );
 
   poDriver->pfnOpen = RasdamanDataset::Open;
 
   GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/rasterlite/rasterlitedataset.cpp b/gdal/frmts/rasterlite/rasterlitedataset.cpp
index 263d9fcd65..26024acd6f 100644
--- a/gdal/frmts/rasterlite/rasterlitedataset.cpp
+++ b/gdal/frmts/rasterlite/rasterlitedataset.cpp
@@ -1460,56 +1460,56 @@ end:
 void GDALRegister_Rasterlite()
 
 {
     if( !GDAL_CHECK_VERSION("Rasterlite driver") )
         return;
 
     if( GDALGetDriverByName( "Rasterlite" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "Rasterlite" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Rasterlite" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_rasterlite.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/rasterlite.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "sqlite" );
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte UInt16 Int16 UInt32 Int32 Float32 "
                                "Float64 CInt16 CInt32 CFloat32 CFloat64" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='WIPE' type='boolean' default='NO' description='Erase all preexisting data in the specified table'/>"
 "   <Option name='TILED' type='boolean' default='YES' description='Use tiling'/>"
 "   <Option name='BLOCKXSIZE' type='int' default='256' description='Tile Width'/>"
 "   <Option name='BLOCKYSIZE' type='int' default='256' description='Tile Height'/>"
 "   <Option name='DRIVER' type='string' default='GTiff' description='GDAL driver to use for storing tiles' default='GTiff'/>"
 "   <Option name='COMPRESS' type='string' default='(GTiff driver) Compression method' default='NONE'/>"
 "   <Option name='QUALITY' type='int' description='(JPEG-compressed GTiff, JPEG and WEBP drivers) JPEG/WEBP Quality 1-100' default='75'/>"
 "   <Option name='PHOTOMETRIC' type='string-select' description='(GTiff driver) Photometric interpretation'>"
 "       <Value>MINISBLACK</Value>"
 "       <Value>MINISWHITE</Value>"
 "       <Value>PALETTE</Value>"
 "       <Value>RGB</Value>"
 "       <Value>CMYK</Value>"
 "       <Value>YCBCR</Value>"
 "       <Value>CIELAB</Value>"
 "       <Value>ICCLAB</Value>"
 "       <Value>ITULAB</Value>"
 "   </Option>"
 "   <Option name='TARGET' type='int' description='(EPSILON driver) target size reduction as a percentage of the original (0-100)' default='96'/>"
 "   <Option name='FILTER' type='string' description='(EPSILON driver) Filter ID' default='daub97lift'/>"
 "</CreationOptionList>" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
 #ifdef ENABLE_SQL_SQLITE_FORMAT
     poDriver->SetMetadataItem("ENABLE_SQL_SQLITE_FORMAT", "YES");
 #endif
 
     poDriver->pfnOpen = RasterliteDataset::Open;
     poDriver->pfnIdentify = RasterliteDataset::Identify;
     poDriver->pfnCreateCopy = RasterliteCreateCopy;
     poDriver->pfnDelete = RasterliteDelete;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/ace2dataset.cpp b/gdal/frmts/raw/ace2dataset.cpp
index 0d2fb93847..a1146dc0b7 100644
--- a/gdal/frmts/raw/ace2dataset.cpp
+++ b/gdal/frmts/raw/ace2dataset.cpp
@@ -386,20 +386,20 @@ GDALDataset *ACE2Dataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_ACE2()
 
 {
     if( GDALGetDriverByName( "ACE2" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "ACE2" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "ACE2" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#ACE2" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/ace2.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "ACE2" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = ACE2Dataset::Open;
     poDriver->pfnIdentify = ACE2Dataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/btdataset.cpp b/gdal/frmts/raw/btdataset.cpp
index c57004523d..93d8974919 100644
--- a/gdal/frmts/raw/btdataset.cpp
+++ b/gdal/frmts/raw/btdataset.cpp
@@ -968,24 +968,24 @@ GDALDataset *BTDataset::Create( const char * pszFilename,
 void GDALRegister_BT()
 
 {
     if( GDALGetDriverByName( "BT" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "BT" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                    "VTP .bt (Binary Terrain) 1.3 Format" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                                   "frmt_various.html#BT" );
+                                   "drivers/raster/bt.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "bt" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Int16 Int32 Float32" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = BTDataset::Open;
     poDriver->pfnCreate = BTDataset::Create;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/byndataset.cpp b/gdal/frmts/raw/byndataset.cpp
index 971a9b1c0d..2d22d7878d 100644
--- a/gdal/frmts/raw/byndataset.cpp
+++ b/gdal/frmts/raw/byndataset.cpp
@@ -884,22 +884,22 @@ void BYNDataset::UpdateHeader()
 void GDALRegister_BYN()
 
 {
     if( GDALGetDriverByName( "BYN" ) != nullptr )
       return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "BYN" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Natural Resources Canada's Geoid" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSIONS, "byn err" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_byn.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/byn.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Int16 Int32" );
 
     poDriver->pfnOpen = BYNDataset::Open;
     poDriver->pfnIdentify = BYNDataset::Identify;
     poDriver->pfnCreate = BYNDataset::Create;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/doq1dataset.cpp b/gdal/frmts/raw/doq1dataset.cpp
index e67edd658a..b404a640f6 100644
--- a/gdal/frmts/raw/doq1dataset.cpp
+++ b/gdal/frmts/raw/doq1dataset.cpp
@@ -402,18 +402,18 @@ GDALDataset *DOQ1Dataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_DOQ1()
 
 {
     if( GDALGetDriverByName( "DOQ1" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "DOQ1" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "USGS DOQ (Old Style)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#DOQ1" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/doq1.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = DOQ1Dataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/doq2dataset.cpp b/gdal/frmts/raw/doq2dataset.cpp
index 8d46891d16..cbfe330db9 100644
--- a/gdal/frmts/raw/doq2dataset.cpp
+++ b/gdal/frmts/raw/doq2dataset.cpp
@@ -470,18 +470,18 @@ GDALDataset *DOQ2Dataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_DOQ2()
 
 {
     if( GDALGetDriverByName( "DOQ2" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "DOQ2" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "USGS DOQ (New Style)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#DOQ2" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/doq2.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = DOQ2Dataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/ehdrdataset.cpp b/gdal/frmts/raw/ehdrdataset.cpp
index 8c968a0dca..3454fc4056 100644
--- a/gdal/frmts/raw/ehdrdataset.cpp
+++ b/gdal/frmts/raw/ehdrdataset.cpp
@@ -2069,29 +2069,29 @@ CPLErr EHdrRasterBand::SetDefaultRAT( const GDALRasterAttributeTable * poRAT )
 void GDALRegister_EHdr()
 
 {
     if( GDALGetDriverByName("EHdr") != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("EHdr");
     poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_LONGNAME, "ESRI .hdr Labelled");
-    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "frmt_various.html#EHdr");
+    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "drivers/raster/ehdr.html");
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSION, "bil");
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONDATATYPES,
                               "Byte Int16 UInt16 Int32 UInt32 Float32");
 
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='NBITS' type='int' description='Special pixel bits (1-7)'/>"
 "   <Option name='PIXELTYPE' type='string' description='By setting this to SIGNEDBYTE, a new Byte file can be forced to be written as signed byte'/>"
 "</CreationOptionList>" );
 
     poDriver->SetMetadataItem(GDAL_DCAP_VIRTUALIO, "YES");
     poDriver->pfnOpen = EHdrDataset::Open;
     poDriver->pfnCreate = EHdrDataset::Create;
     poDriver->pfnCreateCopy = EHdrDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
diff --git a/gdal/frmts/raw/eirdataset.cpp b/gdal/frmts/raw/eirdataset.cpp
index da85677dba..6a6bc5815a 100644
--- a/gdal/frmts/raw/eirdataset.cpp
+++ b/gdal/frmts/raw/eirdataset.cpp
@@ -554,19 +554,19 @@ GDALDataset *EIRDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_EIR()
 
 {
     if( GDALGetDriverByName( "EIR" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "EIR" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Erdas Imagine Raw" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#EIR" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/eir.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = EIRDataset::Open;
     poDriver->pfnIdentify = EIRDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/envidataset.cpp b/gdal/frmts/raw/envidataset.cpp
index cffdf88d72..966950d338 100644
--- a/gdal/frmts/raw/envidataset.cpp
+++ b/gdal/frmts/raw/envidataset.cpp
@@ -2800,34 +2800,34 @@ CPLErr ENVIRasterBand::SetCategoryNames( char **papszCategoryNamesIn )
 void GDALRegister_ENVI()
 {
     if( GDALGetDriverByName("ENVI") != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("ENVI");
     poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_LONGNAME, "ENVI .hdr Labelled");
-    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "frmt_various.html#ENVI");
+    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC, "drivers/raster/envi.html");
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSION, "");
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONDATATYPES,
                               "Byte Int16 UInt16 Int32 UInt32 "
                               "Float32 Float64 CFloat32 CFloat64");
     poDriver->SetMetadataItem(
         GDAL_DMD_CREATIONOPTIONLIST,
         "<CreationOptionList>"
         "   <Option name='SUFFIX' type='string-select'>"
         "       <Value>ADD</Value>"
         "   </Option>"
         "   <Option name='INTERLEAVE' type='string-select'>"
         "       <Value>BIP</Value>"
         "       <Value>BIL</Value>"
         "       <Value>BSQ</Value>"
         "   </Option>"
         "</CreationOptionList>");
 
     poDriver->SetMetadataItem(GDAL_DCAP_VIRTUALIO, "YES");
     poDriver->pfnOpen = ENVIDataset::Open;
     poDriver->pfnCreate = ENVIDataset::Create;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
diff --git a/gdal/frmts/raw/fastdataset.cpp b/gdal/frmts/raw/fastdataset.cpp
index c3c770f963..ced291159d 100644
--- a/gdal/frmts/raw/fastdataset.cpp
+++ b/gdal/frmts/raw/fastdataset.cpp
@@ -1197,20 +1197,20 @@ GDALDataset *FASTDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_FAST()
 
 {
     if( GDALGetDriverByName( "FAST" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "FAST" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "EOSAT FAST Format" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_fast.html" );
+                               "drivers/raster/fast.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = FASTDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/fujibasdataset.cpp b/gdal/frmts/raw/fujibasdataset.cpp
index 39500778ab..e5e4811c05 100644
--- a/gdal/frmts/raw/fujibasdataset.cpp
+++ b/gdal/frmts/raw/fujibasdataset.cpp
@@ -240,19 +240,19 @@ GDALDataset *FujiBASDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_FujiBAS()
 
 {
     if( GDALGetDriverByName( "FujiBAS" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "FujiBAS" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Fuji BAS Scanner Image" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#FujiBAS" );
+                               "drivers/raster/fujibas.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = FujiBASDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/genbindataset.cpp b/gdal/frmts/raw/genbindataset.cpp
index 21367da338..3a40732fb1 100644
--- a/gdal/frmts/raw/genbindataset.cpp
+++ b/gdal/frmts/raw/genbindataset.cpp
@@ -903,20 +903,20 @@ GDALDataset *GenBinDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_GenBin()
 
 {
     if( GDALGetDriverByName( "GenBin" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "GenBin" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Generic Binary (.hdr Labelled)" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#GenBin" );
+                               "drivers/raster/genbin.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = GenBinDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/gscdataset.cpp b/gdal/frmts/raw/gscdataset.cpp
index f501cb7761..858c1ab932 100644
--- a/gdal/frmts/raw/gscdataset.cpp
+++ b/gdal/frmts/raw/gscdataset.cpp
@@ -218,20 +218,20 @@ GDALDataset *GSCDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_GSC()
 
 {
     if( GDALGetDriverByName( "GSC" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "GSC" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "GSC Geogrid" );
-    // poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-    //                            "frmt_various.html#GSC" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
+                               "drivers/raster/gsc.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = GSCDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/hkvdataset.cpp b/gdal/frmts/raw/hkvdataset.cpp
index 4fd97536b8..cd0df8a9c3 100644
--- a/gdal/frmts/raw/hkvdataset.cpp
+++ b/gdal/frmts/raw/hkvdataset.cpp
@@ -1871,23 +1871,23 @@ HKVDataset::CreateCopy( const char * pszFilename,
 void GDALRegister_HKV()
 
 {
     if( GDALGetDriverByName( "MFF2" ) != nullptr )
         return;
 
     GDALDriver*poDriver = new GDALDriver();
 
     poDriver->SetDescription( "MFF2" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Vexcel MFF2 (HKV) Raster" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_mff2.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/mff2.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 UInt16 Int32 UInt32 CInt16 "
                                "CInt32 Float32 Float64 CFloat32 CFloat64" );
 
     poDriver->pfnOpen = HKVDataset::Open;
     poDriver->pfnCreate = HKVDataset::Create;
     poDriver->pfnDelete = HKVDataset::Delete;
     poDriver->pfnCreateCopy = HKVDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/idadataset.cpp b/gdal/frmts/raw/idadataset.cpp
index 9dfdbc56d8..8c0274bcaf 100644
--- a/gdal/frmts/raw/idadataset.cpp
+++ b/gdal/frmts/raw/idadataset.cpp
@@ -1078,23 +1078,23 @@ GDALDataset *IDADataset::Create( const char * pszFilename,
 void GDALRegister_IDA()
 
 {
     if( GDALGetDriverByName( "IDA" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "IDA" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Image Data and Analysis" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#IDA" );
+                               "drivers/raster/ida.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Byte" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = IDADataset::Open;
     poDriver->pfnCreate = IDADataset::Create;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/iscedataset.cpp b/gdal/frmts/raw/iscedataset.cpp
index 7dfb22b3be..51db993c6c 100644
--- a/gdal/frmts/raw/iscedataset.cpp
+++ b/gdal/frmts/raw/iscedataset.cpp
@@ -930,30 +930,30 @@ ISCERasterBand::ISCERasterBand( GDALDataset *poDSIn, int nBandIn, VSILFILE *fpRa
 void GDALRegister_ISCE()
 {
     if( GDALGetDriverByName( "ISCE" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "ISCE" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "ISCE raster" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#ISCE" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/isce.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 Int32 Int64 Float32"
                                " Float64 CInt16 CInt64 CFloat32 "
                                " CFloat64" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
                                "<CreationOptionList>"
                                "   <Option name='SCHEME' type='string-select'>"
                                "       <Value>BIP</Value>"
                                "       <Value>BIL</Value>"
                                "       <Value>BSQ</Value>"
                                "   </Option>"
                                "</CreationOptionList>" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = ISCEDataset::Open;
     poDriver->pfnCreate = ISCEDataset::Create;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/landataset.cpp b/gdal/frmts/raw/landataset.cpp
index cbbd5f1e7f..5f41655357 100644
--- a/gdal/frmts/raw/landataset.cpp
+++ b/gdal/frmts/raw/landataset.cpp
@@ -1034,20 +1034,20 @@ GDALDataset *LANDataset::Create( const char * pszFilename,
 void GDALRegister_LAN()
 
 {
     if( GDALGetDriverByName( "LAN" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "LAN" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Erdas .LAN/.GIS" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#LAN" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/lan.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Byte Int16" );
 
     poDriver->pfnOpen = LANDataset::Open;
     poDriver->pfnCreate = LANDataset::Create;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/lcpdataset.cpp b/gdal/frmts/raw/lcpdataset.cpp
index 93e50a42e6..e9147e7764 100644
--- a/gdal/frmts/raw/lcpdataset.cpp
+++ b/gdal/frmts/raw/lcpdataset.cpp
@@ -1670,85 +1670,85 @@ const char *LCPDataset::_GetProjectionRef()
 void GDALRegister_LCP()
 
 {
     if( GDALGetDriverByName( "LCP" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "LCP" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "FARSITE v.4 Landscape File (.lcp)" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "lcp" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_lcp.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/lcp.html" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Int16" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='ELEVATION_UNIT' type='string-select' default='METERS' description='Elevation units'>"
 "       <Value>METERS</Value>"
 "       <Value>FEET</Value>"
 "   </Option>"
 "   <Option name='SLOPE_UNIT' type='string-select' default='DEGREES' description='Slope units'>"
 "       <Value>DEGREES</Value>"
 "       <Value>PERCENT</Value>"
 "   </Option>"
 "   <Option name='ASPECT_UNIT' type='string-select' default='AZIMUTH_DEGREES'>"
 "       <Value>GRASS_CATEGORIES</Value>"
 "       <Value>AZIMUTH_DEGREES</Value>"
 "       <Value>GRASS_DEGREES</Value>"
 "   </Option>"
 "   <Option name='FUEL_MODEL_OPTION' type='string-select' default='NO_CUSTOM_AND_NO_FILE'>"
 "       <Value>NO_CUSTOM_AND_NO_FILE</Value>"
 "       <Value>CUSTOM_AND_NO_FILE</Value>"
 "       <Value>NO_CUSTOM_AND_FILE</Value>"
 "       <Value>CUSTOM_AND_FILE</Value>"
 "   </Option>"
 "   <Option name='CANOPY_COV_UNIT' type='string-select' default='PERCENT'>"
 "       <Value>CATEGORIES</Value>"
 "       <Value>PERCENT</Value>"
 "   </Option>"
 "   <Option name='CANOPY_HT_UNIT' type='string-select' default='METERS_X_10'>"
 "       <Value>METERS</Value>"
 "       <Value>FEET</Value>"
 "       <Value>METERS_X_10</Value>"
 "       <Value>FEET_X_10</Value>"
 "   </Option>"
 "   <Option name='CBH_UNIT' type='string-select' default='METERS_X_10'>"
 "       <Value>METERS</Value>"
 "       <Value>FEET</Value>"
 "       <Value>METERS_X_10</Value>"
 "       <Value>FEET_X_10</Value>"
 "   </Option>"
 "   <Option name='CBD_UNIT' type='string-select' default='KG_PER_CUBIC_METER_X_100'>"
 "       <Value>KG_PER_CUBIC_METER</Value>"
 "       <Value>POUND_PER_CUBIC_FOOT</Value>"
 "       <Value>KG_PER_CUBIC_METER_X_100</Value>"
 "       <Value>POUND_PER_CUBIC_FOOT_X_1000</Value>"
 "   </Option>"
 "   <Option name='DUFF_UNIT' type='string-select' default='MG_PER_HECTARE_X_10'>"
 "       <Value>MG_PER_HECTARE_X_10</Value>"
 "       <Value>TONS_PER_ACRE_X_10</Value>"
 "   </Option>"
 // Kyle does not think we need to override this, but maybe?
 // "   <Option name='CWD_OPTION' type='boolean' default='FALSE' description='Override logic for setting the coarse woody presence'/>" */
 "   <Option name='CALCULATE_STATS' type='boolean' default='YES' description='Write the stats to the lcp'/>"
 "   <Option name='CLASSIFY_DATA' type='boolean' default='YES' description='Write the stats to the lcp'/>"
 "   <Option name='LINEAR_UNIT' type='string-select' default='SET_FROM_SRS' description='Set the linear units in the lcp'>"
 "       <Value>SET_FROM_SRS</Value>"
 "       <Value>METER</Value>"
 "       <Value>FOOT</Value>"
 "       <Value>KILOMETER</Value>"
 "   </Option>"
 "   <Option name='LATITUDE' type='int' default='' description='Set the latitude for the dataset, this overrides the driver trying to set it programmatically in EPSG:4269'/>"
 "   <Option name='DESCRIPTION' type='string' default='LCP file created by GDAL' description='A short description of the lcp file'/>"
 "</CreationOptionList>" );
 
     poDriver->pfnOpen = LCPDataset::Open;
     poDriver->pfnCreateCopy = LCPDataset::CreateCopy;
     poDriver->pfnIdentify = LCPDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/mffdataset.cpp b/gdal/frmts/raw/mffdataset.cpp
index 8d9105da97..3b056cfc3f 100644
--- a/gdal/frmts/raw/mffdataset.cpp
+++ b/gdal/frmts/raw/mffdataset.cpp
@@ -1640,24 +1640,24 @@ MFFDataset::CreateCopy( const char * pszFilename,
 void GDALRegister_MFF()
 
 {
     if( GDALGetDriverByName( "MFF" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "MFF" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Vexcel MFF Raster" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#MFF" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/mff.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "hdr" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte UInt16 Float32 CInt16 CFloat32" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = MFFDataset::Open;
     poDriver->pfnCreate = MFFDataset::Create;
     poDriver->pfnCreateCopy = MFFDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/ndfdataset.cpp b/gdal/frmts/raw/ndfdataset.cpp
index 68b2474f3e..ee53baf8b1 100644
--- a/gdal/frmts/raw/ndfdataset.cpp
+++ b/gdal/frmts/raw/ndfdataset.cpp
@@ -441,19 +441,19 @@ GDALDataset *NDFDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_NDF()
 
 {
     if( GDALGetDriverByName( "NDF" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "NDF" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "NLAPS Data Format" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#NDF" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/ndf.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnIdentify = NDFDataset::Identify;
     poDriver->pfnOpen = NDFDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/pauxdataset.cpp b/gdal/frmts/raw/pauxdataset.cpp
index 0bb8f88e9d..2defc6093b 100644
--- a/gdal/frmts/raw/pauxdataset.cpp
+++ b/gdal/frmts/raw/pauxdataset.cpp
@@ -1104,31 +1104,31 @@ static CPLErr PAuxDelete( const char * pszBasename )
 void GDALRegister_PAux()
 
 {
     if( GDALGetDriverByName( "PAux" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "PAux" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "PCI .aux Labelled" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#PAux" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/paux.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 UInt16 Float32" );
     poDriver->SetMetadataItem(
         GDAL_DMD_CREATIONOPTIONLIST,
         "<CreationOptionList>"
         "   <Option name='INTERLEAVE' type='string-select' default='BAND'>"
         "       <Value>BAND</Value>"
         "       <Value>LINE</Value>"
         "       <Value>PIXEL</Value>"
         "   </Option>"
         "</CreationOptionList>" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = PAuxDataset::Open;
     poDriver->pfnCreate = PAuxDataset::Create;
     poDriver->pfnDelete = PAuxDelete;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/pnmdataset.cpp b/gdal/frmts/raw/pnmdataset.cpp
index f6e4da652d..6ef3ec084b 100644
--- a/gdal/frmts/raw/pnmdataset.cpp
+++ b/gdal/frmts/raw/pnmdataset.cpp
@@ -416,31 +416,31 @@ GDALDataset *PNMDataset::Create( const char * pszFilename,
 void GDALRegister_PNM()
 
 {
     if( GDALGetDriverByName( "PNM" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "PNM" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Portable Pixmap Format (netpbm)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#PNM" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/pnm.html" );
     // pgm : grey
     // ppm : RGB
     // pnm : ??
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSIONS, "pgm ppm pnm" );
     poDriver->SetMetadataItem( GDAL_DMD_MIMETYPE, "image/x-portable-anymap" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Byte UInt16" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='MAXVAL' type='unsigned int' description='Maximum color value'/>"
 "</CreationOptionList>" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = PNMDataset::Open;
     poDriver->pfnCreate = PNMDataset::Create;
     poDriver->pfnIdentify = PNMDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/roipacdataset.cpp b/gdal/frmts/raw/roipacdataset.cpp
index d66123ec19..1f7b0bfe33 100644
--- a/gdal/frmts/raw/roipacdataset.cpp
+++ b/gdal/frmts/raw/roipacdataset.cpp
@@ -934,20 +934,20 @@ ROIPACRasterBand::ROIPACRasterBand( GDALDataset *poDSIn, int nBandIn, VSILFILE *
 void GDALRegister_ROIPAC()
 {
     if( GDALGetDriverByName( "ROI_PAC" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "ROI_PAC" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "ROI_PAC raster" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#ROI_PAC" );
+                               "drivers/raster/roi_pac.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = ROIPACDataset::Open;
     poDriver->pfnIdentify = ROIPACDataset::Identify;
     poDriver->pfnCreate = ROIPACDataset::Create;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/rrasterdataset.cpp b/gdal/frmts/raw/rrasterdataset.cpp
index 6b500590b8..cf6084c8ad 100644
--- a/gdal/frmts/raw/rrasterdataset.cpp
+++ b/gdal/frmts/raw/rrasterdataset.cpp
@@ -1549,37 +1549,37 @@ GDALDataset *RRASTERDataset::CreateCopy( const char * pszFilename,
 void GDALRegister_RRASTER()
 
 {
     if( GDALGetDriverByName( "RRASTER" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "RRASTER" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "grd" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "R Raster" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#RRASTER" );
+                               "drivers/raster/rraster.html" );
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONDATATYPES,
                               "Byte Int16 UInt16 Int32 UInt32 Float32 Float64");
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->SetMetadataItem(GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='PIXELTYPE' type='string' description='By setting this to "
     "SIGNEDBYTE, a new Byte file can be forced to be written as signed byte'/>"
 "   <Option name='INTERLEAVE' type='string-select' default='BIL'>"
 "       <Value>BIP</Value>"
 "       <Value>BIL</Value>"
 "       <Value>BSQ</Value>"
 "   </Option>"
 "</CreationOptionList>" );
 
     poDriver->pfnOpen = RRASTERDataset::Open;
     poDriver->pfnIdentify = RRASTERDataset::Identify;
     poDriver->pfnCreate = RRASTERDataset::Create;
     poDriver->pfnCreateCopy = RRASTERDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/raw/snodasdataset.cpp b/gdal/frmts/raw/snodasdataset.cpp
index ce83ab5cd1..e8b23136a7 100644
--- a/gdal/frmts/raw/snodasdataset.cpp
+++ b/gdal/frmts/raw/snodasdataset.cpp
@@ -513,21 +513,21 @@ GDALDataset *SNODASDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_SNODAS()
 
 {
     if( GDALGetDriverByName( "SNODAS" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "SNODAS" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Snow Data Assimilation System" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#SNODAS" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/snodas.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "hdr" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = SNODASDataset::Open;
     poDriver->pfnIdentify = SNODASDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/rda/rdadataset.cpp b/gdal/frmts/rda/rdadataset.cpp
index 69e54b2786..19a9e6160a 100644
--- a/gdal/frmts/rda/rdadataset.cpp
+++ b/gdal/frmts/rda/rdadataset.cpp
@@ -2274,28 +2274,28 @@ CPLErr GDALRDARasterBand::IReadBlock( int nBlockXOff, int nBlockYOff,
 void GDALRegister_RDA()
 
 {
     if( GDALGetDriverByName( "RDA" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "RDA" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "DigitalGlobe Raster Data Access driver" );
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_rda.html" );
+                               "drivers/raster/rda.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "dgrda" );
 
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "  <Option name='MAXCONNECT' type='int' min='1' max='256' "
                         "description='Maximum number of connections'/>"
 "</OpenOptionList>" );
 
     poDriver->pfnIdentify = GDALRDADataset::Identify;
     poDriver->pfnOpen = GDALRDADataset::OpenStatic;
     poDriver->pfnUnloadDriver = GDALRDADriverUnload;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/rdb/rdbdataset.cpp b/gdal/frmts/rdb/rdbdataset.cpp
index 871d5a978e..18c9a8e489 100644
--- a/gdal/frmts/rdb/rdbdataset.cpp
+++ b/gdal/frmts/rdb/rdbdataset.cpp
@@ -768,22 +768,21 @@ const char *RDBRasterBand::GetDescription() const
 }  // namespace rdb
 void GDALRegister_RDB()
 {
     if(!GDAL_CHECK_VERSION("RDB"))
         return;
     if(GDALGetDriverByName("RDB") != NULL)
         return;
     GDALDriver *poDriver = new GDALDriver();
     poDriver->SetDescription("RDB");
     poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
     poDriver->SetMetadataItem(GDAL_DMD_LONGNAME, "RIEGL RDB Map Pixel (.mpx)");
-    // TODO:
-    // poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC,
-    //                          "");
+    poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC,
+                              "drivers/raster/rdb.html");
     poDriver->SetMetadataItem(GDAL_DMD_EXTENSION, "mpx");
     poDriver->pfnOpen = rdb::RDBDataset::Open;
     poDriver->pfnIdentify = rdb::RDBDataset::Identify;
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
 
 // includes the cpp wrapper of the rdb library
 #include <riegl/rdb.cpp>
diff --git a/gdal/frmts/rik/rikdataset.cpp b/gdal/frmts/rik/rikdataset.cpp
index 1756b51c4a..2e7b0b12c2 100644
--- a/gdal/frmts/rik/rikdataset.cpp
+++ b/gdal/frmts/rik/rikdataset.cpp
@@ -1295,20 +1295,20 @@ GDALDataset *RIKDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_RIK()
 
 {
     if( GDALGetDriverByName( "RIK" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "RIK" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Swedish Grid RIK (.rik)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#RIK" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/rik.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "rik" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = RIKDataset::Open;
     poDriver->pfnIdentify = RIKDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/rmf/rmfdataset.cpp b/gdal/frmts/rmf/rmfdataset.cpp
index 764c5589b6..bbfd98a903 100644
--- a/gdal/frmts/rmf/rmfdataset.cpp
+++ b/gdal/frmts/rmf/rmfdataset.cpp
@@ -3062,50 +3062,50 @@ void RMFDataset::SetupNBits()
 void GDALRegister_RMF()
 
 {
     if( GDALGetDriverByName( "RMF" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "RMF" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Raster Matrix Format" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_rmf.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/rmf.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "rsw" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 Int32 Float64" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='MTW' type='boolean' description='Create MTW DEM matrix'/>"
 "   <Option name='BLOCKXSIZE' type='int' description='Tile Width'/>"
 "   <Option name='BLOCKYSIZE' type='int' description='Tile Height'/>"
 "   <Option name='RMFHUGE' type='string-select' description='Creation of huge RMF file (Supported by GIS Panorama since v11)'>"
 "     <Value>NO</Value>"
 "     <Value>YES</Value>"
 "     <Value>IF_SAFER</Value>"
 "   </Option>"
 "   <Option name='COMPRESS' type='string-select' default='NONE'>"
 "     <Value>NONE</Value>"
 "     <Value>LZW</Value>"
 "     <Value>JPEG</Value>"
 "     <Value>RMF_DEM</Value>"
 "   </Option>"
 "   <Option name='JPEG_QUALITY' type='int' description='JPEG quality 1-100' default='75'/>"
 "   <Option name='NUM_THREADS' type='string' description='Number of worker threads for compression. Can be set to ALL_CPUS' default='1'/>"
 "</CreationOptionList>" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnIdentify = RMFDataset::Identify;
     poDriver->pfnOpen = RMFDataset::Open;
     poDriver->pfnCreate = RMFDataset::Create;
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
         "<OpenOptionList>"
         "  <Option name='RMF_SET_VERTCS' type='string' description='Layers spatial reference will include vertical coordinate system description if exist' default='NO'/>"
         "</OpenOptionList>");
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
 
 /************************************************************************/
 /*                            RMFCompressData                           */
 /************************************************************************/
diff --git a/gdal/frmts/rs2/rs2dataset.cpp b/gdal/frmts/rs2/rs2dataset.cpp
index 5d01cfc7ae..6f6ef883dd 100644
--- a/gdal/frmts/rs2/rs2dataset.cpp
+++ b/gdal/frmts/rs2/rs2dataset.cpp
@@ -1501,20 +1501,20 @@ char **RS2Dataset::GetMetadata( const char *pszDomain )
 void GDALRegister_RS2()
 
 {
     if( GDALGetDriverByName( "RS2" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "RS2" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "RadarSat 2 XML Product" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_rs2.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/rs2.html" );
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = RS2Dataset::Open;
     poDriver->pfnIdentify = RS2Dataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/safe/safedataset.cpp b/gdal/frmts/safe/safedataset.cpp
index 51d2bd088e..e54a7fe047 100644
--- a/gdal/frmts/safe/safedataset.cpp
+++ b/gdal/frmts/safe/safedataset.cpp
@@ -1210,19 +1210,19 @@ char **SAFEDataset::GetMetadata( const char *pszDomain )
 void GDALRegister_SAFE()
 {
     if( GDALGetDriverByName( "SAFE" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "SAFE" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "Sentinel-1 SAR SAFE Product" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_safe.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/safe.html" );
 
     poDriver->pfnOpen = SAFEDataset::Open;
     poDriver->pfnIdentify = SAFEDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/saga/sagadataset.cpp b/gdal/frmts/saga/sagadataset.cpp
index 4f265217a4..a7fc0e526d 100644
--- a/gdal/frmts/saga/sagadataset.cpp
+++ b/gdal/frmts/saga/sagadataset.cpp
@@ -1095,25 +1095,25 @@ GDALDataset *SAGADataset::CreateCopy( const char *pszFilename,
 void GDALRegister_SAGA()
 
 {
     if( GDALGetDriverByName( "SAGA" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "SAGA" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "SAGA GIS Binary Grid (.sdat, .sg-grd-z)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#SAGA" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/sdat.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSIONS, "sdat sg-grd-z" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Byte Int16 "
                                "UInt16 Int32 UInt32 Float32 Float64" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = SAGADataset::Open;
     poDriver->pfnCreate = SAGADataset::Create;
     poDriver->pfnCreateCopy = SAGADataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/sde/sdedataset.cpp b/gdal/frmts/sde/sdedataset.cpp
index dd6338ab8f..a204e3b243 100644
--- a/gdal/frmts/sde/sdedataset.cpp
+++ b/gdal/frmts/sde/sdedataset.cpp
@@ -498,20 +498,20 @@ GDALDataset *SDEDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_SDE()
 
 {
     if( !GDAL_CHECK_VERSION( "SDE driver" ) )
         return;
 
     if( GDALGetDriverByName( "SDE" ) != NULL )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "SDE" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "ESRI ArcSDE" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,  "frmt_various.html#SDE" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,  "drivers/raster/sde.html" );
 
     poDriver->pfnOpen = SDEDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/sdts/sdtsdataset.cpp b/gdal/frmts/sdts/sdtsdataset.cpp
index b0fc5c2f02..0b2a9eaab5 100644
--- a/gdal/frmts/sdts/sdtsdataset.cpp
+++ b/gdal/frmts/sdts/sdtsdataset.cpp
@@ -398,19 +398,19 @@ const char *SDTSRasterBand::GetUnitType()
 void GDALRegister_SDTS()
 
 {
     if( GDALGetDriverByName( "SDTS" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "SDTS" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "SDTS Raster" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#SDTS" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/sdts.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "ddf" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = SDTSDataset::Open;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/sentinel2/sentinel2dataset.cpp b/gdal/frmts/sentinel2/sentinel2dataset.cpp
index cdf9406fdc..f729b1ffdd 100644
--- a/gdal/frmts/sentinel2/sentinel2dataset.cpp
+++ b/gdal/frmts/sentinel2/sentinel2dataset.cpp
@@ -3825,28 +3825,28 @@ GDALDataset* SENTINEL2Dataset::OpenL1CTileSubdataset( GDALOpenInfo * poOpenInfo
 void GDALRegister_SENTINEL2()
 {
     if( GDALGetDriverByName( "SENTINEL2" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "SENTINEL2" );
 #ifdef GDAL_DCAP_RASTER
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
 #endif
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Sentinel 2" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_sentinel2.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/sentinel2.html" );
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
 
 #ifdef GDAL_DMD_OPENOPTIONLIST
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "  <Option name='ALPHA' type='boolean' description='Whether to expose an alpha band' default='NO'/>"
 "</OpenOptionList>" );
 #endif
 
     poDriver->pfnOpen = SENTINEL2Dataset::Open;
     poDriver->pfnIdentify = SENTINEL2Dataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/sgi/sgidataset.cpp b/gdal/frmts/sgi/sgidataset.cpp
index f5b77c3030..3bbf42e54d 100644
--- a/gdal/frmts/sgi/sgidataset.cpp
+++ b/gdal/frmts/sgi/sgidataset.cpp
@@ -832,22 +832,22 @@ GDALDataset *SGIDataset::Create( const char * pszFilename,
 void GDALRegister_SGI()
 
 {
     if( GDALGetDriverByName( "SGI" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("SGI");
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "SGI Image File Format 1.0" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "rgb" );
     poDriver->SetMetadataItem( GDAL_DMD_MIMETYPE, "image/rgb" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#SGI" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/sgi.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Byte" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = SGIDataset::Open;
     poDriver->pfnCreate = SGIDataset::Create;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
diff --git a/gdal/frmts/sigdem/sigdemdataset.cpp b/gdal/frmts/sigdem/sigdemdataset.cpp
index 7d1b608816..f493aaf935 100644
--- a/gdal/frmts/sigdem/sigdemdataset.cpp
+++ b/gdal/frmts/sigdem/sigdemdataset.cpp
@@ -93,20 +93,20 @@ static OGRSpatialReference* BuildSRS(const char* pszWKT) {
 void GDALRegister_SIGDEM() {
     if (GDALGetDriverByName("SIGDEM") == nullptr) {
         GDALDriver *poDriver = new GDALDriver();
 
         poDriver->SetDescription("SIGDEM");
         poDriver->SetMetadataItem(GDAL_DCAP_RASTER, "YES");
         poDriver->SetMetadataItem(GDAL_DMD_LONGNAME,
                 "Scaled Integer Gridded DEM .sigdem");
         poDriver->SetMetadataItem(GDAL_DMD_HELPTOPIC,
-                "frmt_various.html#SIGDEM");
+                "drivers/raster/sigdem.html");
         poDriver->SetMetadataItem(GDAL_DMD_EXTENSION, "sigdem");
 
         poDriver->SetMetadataItem(GDAL_DCAP_VIRTUALIO, "YES");
         poDriver->pfnCreateCopy = SIGDEMDataset::CreateCopy;
         poDriver->pfnIdentify = SIGDEMDataset::Identify;
         poDriver->pfnOpen = SIGDEMDataset::Open;
 
         GetGDALDriverManager()->RegisterDriver(poDriver);
     }
 }
diff --git a/gdal/frmts/srtmhgt/srtmhgtdataset.cpp b/gdal/frmts/srtmhgt/srtmhgtdataset.cpp
index 2b1d4bf51a..80b9af5d2d 100644
--- a/gdal/frmts/srtmhgt/srtmhgtdataset.cpp
+++ b/gdal/frmts/srtmhgt/srtmhgtdataset.cpp
@@ -659,26 +659,26 @@ GDALDataset * SRTMHGTDataset::CreateCopy( const char * pszFilename,
 /************************************************************************/
 /*                         GDALRegister_SRTMHGT()                       */
 /************************************************************************/
 void GDALRegister_SRTMHGT()
 {
     if( GDALGetDriverByName( "SRTMHGT" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "SRTMHGT" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "SRTMHGT File Format");
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "hgt");
     poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC,
-                               "frmt_various.html#SRTMHGT" );
+                               "drivers/raster/srtmhgt.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 UInt16" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnIdentify = SRTMHGTDataset::Identify;
     poDriver->pfnOpen = SRTMHGTDataset::Open;
     poDriver->pfnCreateCopy = SRTMHGTDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
diff --git a/gdal/frmts/terragen/terragendataset.cpp b/gdal/frmts/terragen/terragendataset.cpp
index 0183282442..e960317b5e 100644
--- a/gdal/frmts/terragen/terragendataset.cpp
+++ b/gdal/frmts/terragen/terragendataset.cpp
@@ -1069,26 +1069,26 @@ GDALDataset *TerragenDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_Terragen()
 
 {
     if( GDALGetDriverByName( "Terragen" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "Terragen" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "ter" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Terragen heightfield" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_terragen.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/terragen.html" );
 
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='MINUSERPIXELVALUE' type='float' description='Lowest logical elevation'/>"
 "   <Option name='MAXUSERPIXELVALUE' type='float' description='Highest logical elevation'/>"
 "</CreationOptionList>" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = TerragenDataset::Open;
     poDriver->pfnCreate = TerragenDataset::Create;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/til/tildataset.cpp b/gdal/frmts/til/tildataset.cpp
index e841b8ded9..40435ad462 100644
--- a/gdal/frmts/til/tildataset.cpp
+++ b/gdal/frmts/til/tildataset.cpp
@@ -481,19 +481,19 @@ char **TILDataset::GetFileList()
 void GDALRegister_TIL()
 
 {
     if( GDALGetDriverByName( "TIL" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "TIL" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "EarthWatch .TIL" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_til.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/til.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = TILDataset::Open;
     poDriver->pfnIdentify = TILDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/tiledb/tiledbdataset.cpp b/gdal/frmts/tiledb/tiledbdataset.cpp
index 17403aad60..f9fbd5aef8 100644
--- a/gdal/frmts/tiledb/tiledbdataset.cpp
+++ b/gdal/frmts/tiledb/tiledbdataset.cpp
@@ -2086,53 +2086,53 @@ TileDBDataset::CreateCopy( const char * pszFilename, GDALDataset *poSrcDS,
 void GDALRegister_TileDB()
 
 {
     if( GDALGetDriverByName( "TileDB" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "TileDB" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_SUBCREATECOPY, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "TileDB" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_tiledb.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/tiledb.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte UInt16 Int16 UInt32 Int32 Float32 "
                                "Float64 CInt16 CInt32 CFloat32 CFloat64" );
     poDriver->SetMetadataItem(GDAL_DCAP_VIRTUALIO, "YES");
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>\n"
 "   <Option name='COMPRESSION' type='string-select' description='image compression to use' default='NONE'>\n"
 "       <Value>NONE</Value>\n"
 "       <Value>GZIP</Value>\n"
 "       <Value>ZSTD</Value>\n"
 "       <Value>LZ4</Value>\n"
 "       <Value>RLE</Value>\n"
 "       <Value>BZIP2</Value>\n"
 "       <Value>DOUBLE-DELTA</Value>\n"
 "       <Value>POSITIVE-DELTA</Value>\n"
 "   </Option>\n"
 "   <Option name='COMPRESSION_LEVEL' type='int' description='Compression level'/>\n"
 "   <Option name='BLOCKXSIZE' type='int' description='Tile Width'/>"
 "   <Option name='BLOCKYSIZE' type='int' description='Tile Height'/>"
 "   <Option name='STATS' type='boolean' description='Dump TileDB stats'/>"
 "   <Option name='TILEDB_CONFIG' type='string' description='location of configuration file for TileDB'/>"
 "   <Option name='TILEDB_ATTRIBUTE' type='string' description='co-registered file to add as TileDB attributes'/>"
 "</CreationOptionList>\n" );
 
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "   <Option name='STATS' type='boolean' description='Dump TileDB stats'/>"
 "   <Option name='TILEDB_ATTRIBUTE' type='string' description='Attribute to read from each band'/>"
 "   <Option name='TILEDB_CONFIG' type='string' description='location of configuration file for TileDB'/>"
 "</OpenOptionList>" );
 
     poDriver->pfnIdentify = TileDBDataset::Identify;
     poDriver->pfnOpen = TileDBDataset::Open;
     poDriver->pfnCreate = TileDBDataset::Create;
     poDriver->pfnCreateCopy = TileDBDataset::CreateCopy;
     poDriver->pfnDelete = TileDBDataset::Delete;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/tsx/tsxdataset.cpp b/gdal/frmts/tsx/tsxdataset.cpp
index 8d724cf920..f49c77850c 100644
--- a/gdal/frmts/tsx/tsxdataset.cpp
+++ b/gdal/frmts/tsx/tsxdataset.cpp
@@ -795,18 +795,18 @@ CPLErr TSXDataset::GetGeoTransform(double* padfTransform)
 void GDALRegister_TSX()
 {
     if( GDALGetDriverByName( "TSX" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "TSX" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "TerraSAR-X Product" );
-    // poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_tsx.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/tsx.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = TSXDataset::Open;
     poDriver->pfnIdentify = TSXDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/usgsdem/usgsdemdataset.cpp b/gdal/frmts/usgsdem/usgsdemdataset.cpp
index 9c4b3a4872..cdb7c2ad10 100644
--- a/gdal/frmts/usgsdem/usgsdemdataset.cpp
+++ b/gdal/frmts/usgsdem/usgsdemdataset.cpp
@@ -938,46 +938,46 @@ GDALDataset *USGSDEMDataset::Open( GDALOpenInfo * poOpenInfo )
 void GDALRegister_USGSDEM()
 
 {
     if( GDALGetDriverByName( "USGSDEM" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "USGSDEM" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "dem" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME,
                                "USGS Optional ASCII DEM (and CDED)" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_usgsdem.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/usgsdem.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Int16" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='PRODUCT' type='string-select' description='Specific Product Type'>"
 "       <Value>DEFAULT</Value>"
 "       <Value>CDED50K</Value>"
 "   </Option>"
 "   <Option name='TOPLEFT' type='string' description='Top left product corner (i.e. 117d15w,52d30n'/>"
 "   <Option name='RESAMPLE' type='string-select' description='Resampling kernel to use if resampled.'>"
 "       <Value>Nearest</Value>"
 "       <Value>Bilinear</Value>"
 "       <Value>Cubic</Value>"
 "       <Value>CubicSpline</Value>"
 "   </Option>"
 "   <Option name='TEMPLATE' type='string' description='File to default metadata from.'/>"
 "   <Option name='DEMLevelCode' type='int' description='DEM Level (1, 2 or 3 if set)'/>"
 "   <Option name='DataSpecVersion' type='int' description='Data and Specification version/revision (eg. 1020)'/>"
 "   <Option name='PRODUCER' type='string' description='Producer Agency (up to 60 characters)'/>"
 "   <Option name='OriginCode' type='string' description='Origin code (up to 4 characters, YT for Yukon)'/>"
 "   <Option name='ProcessCode' type='string' description='Processing Code (8=ANUDEM, 9=FME, A=TopoGrid)'/>"
 "   <Option name='ZRESOLUTION' type='float' description='Scaling factor for elevation values'/>"
 "   <Option name='NTS' type='string' description='NTS Mapsheet name, used to derive TOPLEFT.'/>"
 "   <Option name='INTERNALNAME' type='string' description='Dataset name written into file header.'/>"
 "</CreationOptionList>" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = USGSDEMDataset::Open;
     poDriver->pfnCreateCopy = USGSDEMCreateCopy;
     poDriver->pfnIdentify = USGSDEMDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/vrt/vrtdriver.cpp b/gdal/frmts/vrt/vrtdriver.cpp
index 681ae31fad..a6862469fb 100644
--- a/gdal/frmts/vrt/vrtdriver.cpp
+++ b/gdal/frmts/vrt/vrtdriver.cpp
@@ -396,46 +396,46 @@ VRTCreateCopy( const char * pszFilename,
 void GDALRegister_VRT()
 
 {
     if( GDALGetDriverByName( "VRT" ) != nullptr )
         return;
 
     // First register the pixel functions
     GDALRegisterDefaultPixelFunc();
 
     VRTDriver *poDriver = new VRTDriver();
 
     poDriver->SetDescription( "VRT" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DCAP_MULTIDIM_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "Virtual Raster" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "vrt" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "gdal_vrttut.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/vrt.html" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES,
                                "Byte Int16 UInt16 Int32 UInt32 Float32 Float64 "
                                "CInt16 CInt32 CFloat32 CFloat64" );
 
     poDriver->pfnOpen = VRTDataset::Open;
     poDriver->pfnCreateCopy = VRTCreateCopy;
     poDriver->pfnCreate = VRTDataset::Create;
     poDriver->pfnCreateMultiDimensional = VRTDataset::CreateMultiDimensional;
     poDriver->pfnIdentify = VRTDataset::Identify;
     poDriver->pfnDelete = VRTDataset::Delete;
 
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OptionList>"
 "  <Option name='ROOT_PATH' type='string' description='Root path to evaluate "
 "relative paths inside the VRT. Mainly useful for inlined VRT, or in-memory "
 "VRT, where their own directory does not make sense'/>"
 "</OptionList>" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->AddSourceParser( "SimpleSource", VRTParseCoreSources );
     poDriver->AddSourceParser( "ComplexSource", VRTParseCoreSources );
     poDriver->AddSourceParser( "AveragedSource", VRTParseCoreSources );
     poDriver->AddSourceParser( "KernelFilteredSource", VRTParseFilterSources );
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
 
 /*! @endcond */
diff --git a/gdal/frmts/wcs/wcsdataset.cpp b/gdal/frmts/wcs/wcsdataset.cpp
index 026f7ea573..f822964d04 100644
--- a/gdal/frmts/wcs/wcsdataset.cpp
+++ b/gdal/frmts/wcs/wcsdataset.cpp
@@ -1681,20 +1681,20 @@ char **WCSDataset::GetMetadata( const char *pszDomain )
 void GDALRegister_WCS()
 
 {
     if( GDALGetDriverByName( "WCS" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "WCS" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "OGC Web Coverage Service" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_wcs.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/wcs.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
 
     poDriver->pfnOpen = WCSDataset::Open;
     poDriver->pfnIdentify = WCSDataset::Identify;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/webp/webpdataset.cpp b/gdal/frmts/webp/webpdataset.cpp
index c9fa764db1..903e6bb924 100644
--- a/gdal/frmts/webp/webpdataset.cpp
+++ b/gdal/frmts/webp/webpdataset.cpp
@@ -866,55 +866,55 @@ WEBPDataset::CreateCopy( const char * pszFilename, GDALDataset *poSrcDS,
 void GDALRegister_WEBP()
 
 {
     if( GDALGetDriverByName( "WEBP" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "WEBP" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "WEBP" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_webp.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/webp.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "webp" );
     poDriver->SetMetadataItem( GDAL_DMD_MIMETYPE, "image/webp" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Byte" );
 
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>\n"
 "   <Option name='QUALITY' type='float' description='good=100, bad=0' default='75'/>\n"
 #if WEBP_ENCODER_ABI_VERSION >= 0x0100
 "   <Option name='LOSSLESS' type='boolean' description='Whether lossless compression should be used' default='FALSE'/>\n"
 #endif
 "   <Option name='PRESET' type='string-select' description='kind of image' default='DEFAULT'>\n"
 "       <Value>DEFAULT</Value>\n"
 "       <Value>PICTURE</Value>\n"
 "       <Value>PHOTO</Value>\n"
 "       <Value>DRAWING</Value>\n"
 "       <Value>ICON</Value>\n"
 "       <Value>TEXT</Value>\n"
 "   </Option>\n"
 "   <Option name='TARGETSIZE' type='int' description='if non-zero, desired target size in bytes. Has precedence over QUALITY'/>\n"
 "   <Option name='PSNR' type='float' description='if non-zero, minimal distortion to to achieve. Has precedence over TARGETSIZE'/>\n"
 "   <Option name='METHOD' type='int' description='quality/speed trade-off. fast=0, slower-better=6' default='4'/>\n"
 "   <Option name='SEGMENTS' type='int' description='maximum number of segments [1-4]' default='4'/>\n"
 "   <Option name='SNS_STRENGTH' type='int' description='Spatial Noise Shaping. off=0, maximum=100' default='50'/>\n"
 "   <Option name='FILTER_STRENGTH' type='int' description='Filter strength. off=0, strongest=100' default='20'/>\n"
 "   <Option name='FILTER_SHARPNESS' type='int' description='Filter sharpness. off=0, least sharp=7' default='0'/>\n"
 "   <Option name='FILTER_TYPE' type='int' description='Filtering type. simple=0, strong=1' default='0'/>\n"
 "   <Option name='AUTOFILTER' type='int' description=\"Auto adjust filter's strength. off=0, on=1\" default='0'/>\n"
 "   <Option name='PASS' type='int' description='Number of entropy analysis passes [1-10]' default='1'/>\n"
 "   <Option name='PREPROCESSING' type='int' description='Preprocessing filter. none=0, segment-smooth=1' default='0'/>\n"
 "   <Option name='PARTITIONS' type='int' description='log2(number of token partitions) in [0..3]' default='0'/>\n"
 #if WEBP_ENCODER_ABI_VERSION >= 0x0002
 "   <Option name='PARTITION_LIMIT' type='int' description='quality degradation allowed to fit the 512k limit on prediction modes coding (0=no degradation, 100=full)' default='0'/>\n"
 #endif
 "</CreationOptionList>\n" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnIdentify = WEBPDataset::Identify;
     poDriver->pfnOpen = WEBPDataset::Open;
     poDriver->pfnCreateCopy = WEBPDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/wms/wmsdriver.cpp b/gdal/frmts/wms/wmsdriver.cpp
index 4958006faf..140d6a5fcd 100644
--- a/gdal/frmts/wms/wmsdriver.cpp
+++ b/gdal/frmts/wms/wmsdriver.cpp
@@ -1044,33 +1044,33 @@ void WMSDeregister(CPL_UNUSED GDALDriver *d) {
 void GDALRegister_WMS()
 
 {
     if( GDALGetDriverByName( "WMS" ) != nullptr )
         return;
 
     // Register all minidrivers here
     RegisterMinidriver(WMS);
     RegisterMinidriver(TileService);
     RegisterMinidriver(WorldWind);
     RegisterMinidriver(TMS);
     RegisterMinidriver(TiledWMS);
     RegisterMinidriver(VirtualEarth);
     RegisterMinidriver(AGS);
     RegisterMinidriver(IIP);
     RegisterMinidriver(MRF);
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription("WMS");
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "OGC Web Map Service" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_wms.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/wms.html" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_SUBDATASETS, "YES" );
 
     poDriver->pfnOpen = GDALWMSDataset::Open;
     poDriver->pfnIdentify = GDALWMSDataset::Identify;
     poDriver->pfnUnloadDriver = WMSDeregister;
     poDriver->pfnCreateCopy = GDALWMSDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver(poDriver);
 }
diff --git a/gdal/frmts/wmts/wmtsdataset.cpp b/gdal/frmts/wmts/wmtsdataset.cpp
index 00d0a80c2c..19387128e0 100644
--- a/gdal/frmts/wmts/wmtsdataset.cpp
+++ b/gdal/frmts/wmts/wmtsdataset.cpp
@@ -2224,43 +2224,43 @@ GDALDataset *WMTSDataset::CreateCopy( const char * pszFilename,
 void GDALRegister_WMTS()
 
 {
     if( !GDAL_CHECK_VERSION( "WMTS driver" ) )
         return;
 
     if( GDALGetDriverByName( "WMTS" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "WMTS" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "OGC Web Map Tile Service" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_wmts.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/wmts.html" );
 
     poDriver->SetMetadataItem( GDAL_DMD_CONNECTION_PREFIX, "WMTS:" );
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->SetMetadataItem( GDAL_DMD_OPENOPTIONLIST,
 "<OpenOptionList>"
 "  <Option name='URL' type='string' description='URL that points to GetCapabilities response' required='YES'/>"
 "  <Option name='LAYER' type='string' description='Layer identifier'/>"
 "  <Option name='TILEMATRIXSET' alias='TMS' type='string' description='Tile matrix set identifier'/>"
 "  <Option name='TILEMATRIX' type='string' description='Tile matrix identifier of maximum zoom level. Exclusive with ZOOM_LEVEL.'/>"
 "  <Option name='ZOOM_LEVEL' alias='ZOOMLEVEL' type='int' description='Maximum zoom level. Exclusive with TILEMATRIX.'/>"
 "  <Option name='STYLE' type='string' description='Style identifier'/>"
 "  <Option name='EXTENDBEYONDDATELINE' type='boolean' description='Whether to enable extend-beyond-dateline behaviour' default='NO'/>"
 "  <Option name='EXTENT_METHOD' type='string-select' description='How the raster extent is computed' default='AUTO'>"
 "       <Value>AUTO</Value>"
 "       <Value>LAYER_BBOX</Value>"
 "       <Value>TILE_MATRIX_SET</Value>"
 "       <Value>MOST_PRECISE_TILE_MATRIX</Value>"
 "  </Option>"
 "</OpenOptionList>");
 
     poDriver->pfnOpen = WMTSDataset::Open;
     poDriver->pfnIdentify = WMTSDataset::Identify;
     poDriver->pfnCreateCopy = WMTSDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/xpm/xpmdataset.cpp b/gdal/frmts/xpm/xpmdataset.cpp
index 77afd84a13..f289dc9af4 100644
--- a/gdal/frmts/xpm/xpmdataset.cpp
+++ b/gdal/frmts/xpm/xpmdataset.cpp
@@ -434,27 +434,27 @@ XPMCreateCopy( const char * pszFilename,
 void GDALRegister_XPM()
 
 {
     if( GDALGetDriverByName( "XPM" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "XPM" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "X11 PixMap Format" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#XPM" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/xpm.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "xpm" );
     poDriver->SetMetadataItem( GDAL_DMD_MIMETYPE, "image/x-xpixmap" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONDATATYPES, "Byte" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = XPMDataset::Open;
     poDriver->pfnIdentify = XPMDataset::Identify;
     poDriver->pfnCreateCopy = XPMCreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
 
 /************************************************************************/
 /*                              ParseXPM()                              */
 /************************************************************************/
diff --git a/gdal/frmts/xyz/xyzdataset.cpp b/gdal/frmts/xyz/xyzdataset.cpp
index e1e065c5d7..0c4868b345 100644
--- a/gdal/frmts/xyz/xyzdataset.cpp
+++ b/gdal/frmts/xyz/xyzdataset.cpp
@@ -1427,29 +1427,29 @@ CPLErr XYZDataset::GetGeoTransform( double * padfTransform )
 void GDALRegister_XYZ()
 
 {
     if( GDALGetDriverByName( "XYZ" ) != nullptr )
       return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "XYZ" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "ASCII Gridded XYZ" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_xyz.html" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/xyz.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "xyz" );
     poDriver->SetMetadataItem( GDAL_DMD_CREATIONOPTIONLIST,
 "<CreationOptionList>"
 "   <Option name='COLUMN_SEPARATOR' type='string' default=' ' description='Separator between fields.'/>"
 "   <Option name='ADD_HEADER_LINE' type='boolean' default='false' description='Add an header line with column names.'/>"
 "   <Option name='SIGNIFICANT_DIGITS' type='int' description='Number of significant digits when writing floating-point numbers (%g format; default with 18).'/>\n"
 "   <Option name='DECIMAL_PRECISION' type='int' description='Number of decimal places when writing floating-point numbers (%f format).'/>\n"
 "</CreationOptionList>");
 
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = XYZDataset::Open;
     poDriver->pfnIdentify = XYZDataset::Identify;
     poDriver->pfnCreateCopy = XYZDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
diff --git a/gdal/frmts/zmap/zmapdataset.cpp b/gdal/frmts/zmap/zmapdataset.cpp
index 536f78f791..d4ea1b239b 100644
--- a/gdal/frmts/zmap/zmapdataset.cpp
+++ b/gdal/frmts/zmap/zmapdataset.cpp
@@ -716,21 +716,21 @@ CPLErr ZMapDataset::GetGeoTransform( double * padfTransform )
 void GDALRegister_ZMap()
 
 {
     if( GDALGetDriverByName( "ZMap" ) != nullptr )
         return;
 
     GDALDriver *poDriver = new GDALDriver();
 
     poDriver->SetDescription( "ZMap" );
     poDriver->SetMetadataItem( GDAL_DCAP_RASTER, "YES" );
     poDriver->SetMetadataItem( GDAL_DMD_LONGNAME, "ZMap Plus Grid" );
-    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "frmt_various.html#ZMap" );
+    poDriver->SetMetadataItem( GDAL_DMD_HELPTOPIC, "drivers/raster/zmap.html" );
     poDriver->SetMetadataItem( GDAL_DMD_EXTENSION, "dat" );
     poDriver->SetMetadataItem( GDAL_DCAP_VIRTUALIO, "YES" );
 
     poDriver->pfnOpen = ZMapDataset::Open;
     poDriver->pfnIdentify = ZMapDataset::Identify;
     poDriver->pfnCreateCopy = ZMapDataset::CreateCopy;
 
     GetGDALDriverManager()->RegisterDriver( poDriver );
 }
