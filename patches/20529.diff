commit 03cfcd34a472e1a249221a8fb1d275784ee63ea3
Author: Lorenzo Miniero <lminiero@gmail.com>
Date:   Wed Feb 5 11:48:57 2020 +0100

    Fixed RTCP parsing issue found by OSS-fuzz

diff --git a/fuzzers/corpora/rtcp_fuzzer/1meetecho/rtcp_fuzzer-crash-1640b2f21ba20409d930e9653052d579d450073a b/fuzzers/corpora/rtcp_fuzzer/1meetecho/rtcp_fuzzer-crash-1640b2f21ba20409d930e9653052d579d450073a
new file mode 100644
index 00000000..22892eb5
Binary files /dev/null and b/fuzzers/corpora/rtcp_fuzzer/1meetecho/rtcp_fuzzer-crash-1640b2f21ba20409d930e9653052d579d450073a differ
diff --git a/rtcp.c b/rtcp.c
index 8364e335..5d1f99da 100644
--- a/rtcp.c
+++ b/rtcp.c
@@ -168,100 +168,106 @@ static void janus_rtcp_incoming_sr(janus_rtcp_context *ctx, janus_rtcp_sr *sr) {
 
 /* Helper to handle an incoming transport-cc feedback: triggered by a call to janus_rtcp_fix_ssrc a valid context pointer */
 static void janus_rtcp_incoming_transport_cc(janus_rtcp_context *ctx, janus_rtcp_fb *twcc, int total) {
-	if(ctx == NULL || twcc == NULL || total < 16)
+	if(ctx == NULL || twcc == NULL || total < 20)
+		return;
+	if(!janus_rtcp_check_fci((janus_rtcp_header *)twcc, total, 4))
 		return;
 	/* Parse the header first */
 	uint8_t *data = (uint8_t *)twcc->fci;
 	uint16_t base_seq = 0, status_count = 0;
 	uint32_t reference = 0;
 	uint8_t fb_pkt = 0;
 	memcpy(&base_seq, data, sizeof(uint16_t));
 	base_seq = ntohs(base_seq);
 	memcpy(&status_count, data+2, sizeof(uint16_t));
 	status_count = ntohs(status_count);
 	memcpy(&reference, data+4, sizeof(uint32_t));
 	reference = ntohl(reference) >> 8;
 	fb_pkt = *(data+7);
 	JANUS_LOG(LOG_HUGE, "[TWCC] seq=%"SCNu16", psc=%"SCNu16", ref=%"SCNu32", fbpc=%"SCNu8"\n",
 		base_seq, status_count, reference, fb_pkt);
 	/* Now traverse the feedback: packet chunks first, and then recv deltas */
-	total -= 16;
+	total -= 20;
 	data += 8;
 	int psc = status_count;
 	uint16_t chunk = 0;
 	uint8_t t = 0, ss = 0, s = 0, length = 0;
 	/* Iterate on all packet chunks */
 	JANUS_LOG(LOG_HUGE, "[TWCC] Chunks:\n");
 	int num = 0;
 	GList *list = NULL;
 	while(psc > 0 && total > 0) {
 		num++;
 		memcpy(&chunk, data, sizeof(uint16_t));
 		chunk = ntohs(chunk);
 		t = (chunk & 0x8000) >> 15;
 		if(t == 0) {
 			/* Run length */
 			s = (chunk & 0x6000) >> 13;
 			length = (chunk & 0x1FFF);
 			JANUS_LOG(LOG_HUGE, "  [%d] t=run-length, s=%s, l=%"SCNu16"\n", num,
 				janus_rtp_packet_status_description(s), length);
 			while(length > 0 && psc > 0) {
 				list = g_list_append(list, GUINT_TO_POINTER(s));
 				length--;
 				psc--;
 			}
 		} else {
 			/* Status vector */
 			ss = (chunk & 0x4000) >> 14;
 			length = (s ? 7 : 14);
 			JANUS_LOG(LOG_HUGE, "  [%d] t=status-vector, ss=%s, l=%"SCNu16"\n", num,
 				s ? "2-bit" : "bit", length);
 			while(length > 0 && psc > 0) {
 				if(!ss)
 					s = (chunk & (1 << (length-1))) ? janus_rtp_packet_status_smalldelta : janus_rtp_packet_status_notreceived;
 				else
 					s = (chunk & (3 << (2*length-2))) >> (2*length-2);
 				list = g_list_append(list, GUINT_TO_POINTER(s));
 				length--;
 				psc--;
 			}
 		}
 		total -= 2;
 		data += 2;
 	}
+	if(psc > 0) {
+		/* Incomplete feedback? Drop... */
+		return;
+	}
 	/* Iterate on all recv deltas */
 	JANUS_LOG(LOG_HUGE, "[TWCC] Recv Deltas (%d/%"SCNu16"):\n", g_list_length(list), status_count);
 	num = 0;
 	uint16_t delta = 0;
 	uint32_t delta_us = 0;
 	GList *iter = list;
 	while(iter != NULL && total > 0) {
 		num++;
 		delta = 0;
 		s = GPOINTER_TO_UINT(iter->data);
 		if(s == janus_rtp_packet_status_smalldelta) {
 			/* Small delta = 1 byte */
 			delta = *data;
 			total--;
 			data++;
 		} else if(s == janus_rtp_packet_status_largeornegativedelta) {
 			/* Large or negative delta = 2 bytes */
 			if(total < 2)
 				break;
 			memcpy(&delta, data, sizeof(uint16_t));
 			delta = ntohs(delta);
 			total -= 2;
 			data += 2;
 		}
 		delta_us = delta*250;
 		/* Print summary */
 		JANUS_LOG(LOG_HUGE, "  [%02d][%"SCNu16"] %s (%"SCNu32"us)\n", num, base_seq+num-1,
 			janus_rtp_packet_status_description(s), delta_us);
 		iter = iter->next;
 	}
 	/* TODO Update the context with the feedback we got */
 	g_list_free(list);
 }
 
 /* Link quality estimate filter coefficient */
 #define LINK_QUALITY_FILTER_K 3.0
