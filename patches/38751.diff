commit b9675888c288fb8b293a69783712bbc2a4573773
Merge: b1b50116 05ebb558
Author: Martin Matu≈°ka <martin@matuska.org>
Date:   Wed Jan 12 16:02:58 2022 +0100

    Merge pull request #1492 from antekone/rar5_ossfuzz_30448
    
    RAR5 reader: fixed out of bounds read in some files

diff --git a/Makefile.am b/Makefile.am
index c5796f29..963c9421 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -660,324 +660,325 @@ libarchive_TESTS_ENVIRONMENT= LIBARCHIVE_TEST_FILES=`cd $(top_srcdir);/bin/pwd`/
 libarchive_test_EXTRA_DIST=\
 	libarchive/test/list.h \
 	libarchive/test/test_acl_pax_posix1e.tar.uu \
 	libarchive/test/test_acl_pax_nfs4.tar.uu \
 	libarchive/test/test_archive_string_conversion.txt.Z.uu \
 	libarchive/test/test_compat_bzip2_1.tbz.uu \
 	libarchive/test/test_compat_bzip2_2.tbz.uu \
 	libarchive/test/test_compat_cpio_1.cpio.uu \
 	libarchive/test/test_compat_gtar_1.tar.uu \
 	libarchive/test/test_compat_gtar_2.tar.uu \
 	libarchive/test/test_compat_gzip_1.tgz.uu \
 	libarchive/test/test_compat_gzip_2.tgz.uu \
 	libarchive/test/test_compat_lz4_1.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_2.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_3.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B4.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B4BD.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B4BDBX.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B5.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B5BD.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B6.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B6BD.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B7.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B7BD.tar.lz4.uu \
 	libarchive/test/test_compat_lzip_1.tlz.uu \
 	libarchive/test/test_compat_lzip_2.tlz.uu \
 	libarchive/test/test_compat_lzma_1.tlz.uu \
 	libarchive/test/test_compat_lzma_2.tlz.uu \
 	libarchive/test/test_compat_lzma_3.tlz.uu \
 	libarchive/test/test_compat_lzop_1.tar.lzo.uu \
 	libarchive/test/test_compat_lzop_2.tar.lzo.uu \
 	libarchive/test/test_compat_lzop_3.tar.lzo.uu \
 	libarchive/test/test_compat_mac-1.tar.Z.uu \
 	libarchive/test/test_compat_mac-2.tar.Z.uu \
 	libarchive/test/test_compat_perl_archive_tar.tar.uu \
 	libarchive/test/test_compat_plexus_archiver_tar.tar.uu \
 	libarchive/test/test_compat_solaris_pax_sparse_1.pax.Z.uu \
 	libarchive/test/test_compat_solaris_pax_sparse_2.pax.Z.uu \
 	libarchive/test/test_compat_solaris_tar_acl.tar.uu \
 	libarchive/test/test_compat_star_acl_nfs4.tar.uu \
 	libarchive/test/test_compat_star_acl_posix1e.tar.uu \
 	libarchive/test/test_compat_tar_directory_1.tar.uu \
 	libarchive/test/test_compat_tar_hardlink_1.tar.uu \
 	libarchive/test/test_compat_uudecode_large.tar.Z.uu \
 	libarchive/test/test_compat_xz_1.txz.uu \
 	libarchive/test/test_compat_zip_1.zip.uu \
 	libarchive/test/test_compat_zip_2.zip.uu \
 	libarchive/test/test_compat_zip_3.zip.uu \
 	libarchive/test/test_compat_zip_4.zip.uu \
 	libarchive/test/test_compat_zip_5.zip.uu \
 	libarchive/test/test_compat_zip_6.zip.uu \
 	libarchive/test/test_compat_zip_7.xps.uu \
 	libarchive/test/test_compat_zip_8.zip.uu \
 	libarchive/test/test_compat_zstd_1.tar.zst.uu \
 	libarchive/test/test_compat_zstd_2.tar.zst.uu \
 	libarchive/test/test_fuzz.cab.uu \
 	libarchive/test/test_fuzz.lzh.uu \
 	libarchive/test/test_fuzz_1.iso.Z.uu \
 	libarchive/test/test_pax_filename_encoding.tar.uu \
 	libarchive/test/test_pax_xattr_header_all.tar.uu \
 	libarchive/test/test_pax_xattr_header_libarchive.tar.uu \
 	libarchive/test/test_pax_xattr_header_schily.tar.uu \
 	libarchive/test/test_rar_multivolume_multiple_files.part1.rar.uu \
 	libarchive/test/test_rar_multivolume_multiple_files.part2.rar.uu \
 	libarchive/test/test_rar_multivolume_multiple_files.part3.rar.uu \
 	libarchive/test/test_rar_multivolume_multiple_files.part4.rar.uu \
 	libarchive/test/test_rar_multivolume_multiple_files.part5.rar.uu \
 	libarchive/test/test_rar_multivolume_multiple_files.part6.rar.uu \
 	libarchive/test/test_rar_multivolume_single_file.part1.rar.uu \
 	libarchive/test/test_rar_multivolume_single_file.part2.rar.uu \
 	libarchive/test/test_rar_multivolume_single_file.part3.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part01.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part02.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part03.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part04.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part05.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part06.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part07.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part08.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part09.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part10.rar.uu \
 	libarchive/test/test_read_filter_grzip.tar.grz.uu \
 	libarchive/test/test_read_filter_lrzip.tar.lrz.uu \
 	libarchive/test/test_read_filter_lzop.tar.lzo.uu \
 	libarchive/test/test_read_filter_lzop_multiple_parts.tar.lzo.uu \
 	libarchive/test/test_read_format_mtree_crash747.mtree.bz2.uu \
 	libarchive/test/test_read_format_mtree_noprint.mtree.uu \
 	libarchive/test/test_read_format_7zip_bcj2_bzip2.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj2_copy_1.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj2_copy_2.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj2_copy_lzma.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj2_deflate.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj2_lzma1_1.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj2_lzma1_2.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj2_lzma2_1.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj2_lzma2_2.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj_bzip2.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj_copy.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj_deflate.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj_lzma1.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj_lzma2.7z.uu \
 	libarchive/test/test_read_format_7zip_bzip2.7z.uu \
 	libarchive/test/test_read_format_7zip_copy.7z.uu \
 	libarchive/test/test_read_format_7zip_copy_2.7z.uu \
 	libarchive/test/test_read_format_7zip_deflate.7z.uu \
 	libarchive/test/test_read_format_7zip_delta_lzma1.7z.uu \
 	libarchive/test/test_read_format_7zip_delta4_lzma1.7z.uu \
 	libarchive/test/test_read_format_7zip_delta_lzma2.7z.uu \
 	libarchive/test/test_read_format_7zip_delta4_lzma2.7z.uu \
 	libarchive/test/test_read_format_7zip_empty_archive.7z.uu \
 	libarchive/test/test_read_format_7zip_empty_file.7z.uu \
 	libarchive/test/test_read_format_7zip_encryption.7z.uu \
 	libarchive/test/test_read_format_7zip_encryption_header.7z.uu \
 	libarchive/test/test_read_format_7zip_encryption_partially.7z.uu \
 	libarchive/test/test_read_format_7zip_lzma1.7z.uu \
 	libarchive/test/test_read_format_7zip_lzma1_2.7z.uu \
 	libarchive/test/test_read_format_7zip_lzma1_lzma2.7z.uu \
 	libarchive/test/test_read_format_7zip_lzma2.7z.uu \
 	libarchive/test/test_read_format_7zip_malformed.7z.uu \
 	libarchive/test/test_read_format_7zip_malformed2.7z.uu \
 	libarchive/test/test_read_format_7zip_packinfo_digests.7z.uu \
 	libarchive/test/test_read_format_7zip_ppmd.7z.uu \
 	libarchive/test/test_read_format_7zip_symbolic_name.7z.uu \
 	libarchive/test/test_read_format_ar.ar.uu \
 	libarchive/test/test_read_format_cab_1.cab.uu \
 	libarchive/test/test_read_format_cab_2.cab.uu \
 	libarchive/test/test_read_format_cab_3.cab.uu \
 	libarchive/test/test_read_format_cab_filename_cp932.cab.uu \
 	libarchive/test/test_read_format_cpio_bin_be.cpio.uu \
 	libarchive/test/test_read_format_cpio_bin_le.cpio.uu \
 	libarchive/test/test_read_format_cpio_filename_cp866.cpio.uu \
 	libarchive/test/test_read_format_cpio_filename_eucjp.cpio.uu \
 	libarchive/test/test_read_format_cpio_filename_koi8r.cpio.uu \
 	libarchive/test/test_read_format_cpio_filename_utf8_jp.cpio.uu \
 	libarchive/test/test_read_format_cpio_filename_utf8_ru.cpio.uu \
 	libarchive/test/test_read_format_cpio_svr4_bzip2_rpm.rpm.uu \
 	libarchive/test/test_read_format_cpio_svr4_gzip_rpm.rpm.uu \
 	libarchive/test/test_read_format_gtar_filename_cp866.tar.Z.uu \
 	libarchive/test/test_read_format_gtar_filename_eucjp.tar.Z.uu \
 	libarchive/test/test_read_format_gtar_filename_koi8r.tar.Z.uu \
 	libarchive/test/test_read_format_gtar_sparse_1_13.tar.uu \
 	libarchive/test/test_read_format_gtar_sparse_1_17.tar.uu \
 	libarchive/test/test_read_format_gtar_sparse_1_17_posix00.tar.uu \
 	libarchive/test/test_read_format_gtar_sparse_1_17_posix01.tar.uu \
 	libarchive/test/test_read_format_gtar_sparse_1_17_posix10.tar.uu \
 	libarchive/test/test_read_format_gtar_sparse_1_17_posix10_modified.tar.uu \
 	libarchive/test/test_read_format_gtar_sparse_skip_entry.tar.Z.uu \
 	libarchive/test/test_read_format_iso.iso.Z.uu \
 	libarchive/test/test_read_format_iso_2.iso.Z.uu \
 	libarchive/test/test_read_format_iso_joliet.iso.Z.uu \
 	libarchive/test/test_read_format_iso_joliet_by_nero.iso.Z.uu \
 	libarchive/test/test_read_format_iso_joliet_long.iso.Z.uu \
 	libarchive/test/test_read_format_iso_joliet_rockridge.iso.Z.uu \
 	libarchive/test/test_read_format_iso_multi_extent.iso.Z.uu \
 	libarchive/test/test_read_format_iso_rockridge.iso.Z.uu \
 	libarchive/test/test_read_format_iso_rockridge_ce.iso.Z.uu \
 	libarchive/test/test_read_format_iso_rockridge_new.iso.Z.uu \
 	libarchive/test/test_read_format_iso_rockridge_rr_moved.iso.Z.uu \
 	libarchive/test/test_read_format_iso_xorriso.iso.Z.uu \
 	libarchive/test/test_read_format_iso_zisofs.iso.Z.uu \
 	libarchive/test/test_read_format_lha_bugfix_0.lzh.uu \
 	libarchive/test/test_read_format_lha_filename_cp932.lzh.uu \
 	libarchive/test/test_read_format_lha_filename_utf16.lzh.uu \
 	libarchive/test/test_read_format_lha_header0.lzh.uu \
 	libarchive/test/test_read_format_lha_header1.lzh.uu \
 	libarchive/test/test_read_format_lha_header2.lzh.uu \
 	libarchive/test/test_read_format_lha_header3.lzh.uu \
 	libarchive/test/test_read_format_lha_lh0.lzh.uu \
 	libarchive/test/test_read_format_lha_lh6.lzh.uu \
 	libarchive/test/test_read_format_lha_lh7.lzh.uu \
 	libarchive/test/test_read_format_lha_withjunk.lzh.uu \
 	libarchive/test/test_read_format_mtree.mtree.uu \
 	libarchive/test/test_read_format_mtree_nomagic.mtree.uu \
 	libarchive/test/test_read_format_mtree_nomagic2.mtree.uu \
 	libarchive/test/test_read_format_mtree_nomagic3.mtree.uu \
 	libarchive/test/test_read_format_rar.rar.uu \
 	libarchive/test/test_read_format_rar_binary_data.rar.uu \
 	libarchive/test/test_read_format_rar_compress_best.rar.uu \
 	libarchive/test/test_read_format_rar_compress_normal.rar.uu \
 	libarchive/test/test_read_format_rar_encryption_data.rar.uu \
 	libarchive/test/test_read_format_rar_encryption_header.rar.uu \
 	libarchive/test/test_read_format_rar_encryption_partially.rar.uu \
 	libarchive/test/test_read_format_rar_filter.rar.uu \
 	libarchive/test/test_read_format_rar_invalid1.rar.uu \
 	libarchive/test/test_read_format_rar_multi_lzss_blocks.rar.uu \
 	libarchive/test/test_read_format_rar_multivolume.part0001.rar.uu \
 	libarchive/test/test_read_format_rar_multivolume.part0002.rar.uu \
 	libarchive/test/test_read_format_rar_multivolume.part0003.rar.uu \
 	libarchive/test/test_read_format_rar_multivolume.part0004.rar.uu \
 	libarchive/test/test_read_format_rar_noeof.rar.uu \
 	libarchive/test/test_read_format_rar_ppmd_lzss_conversion.rar.uu \
 	libarchive/test/test_read_format_rar_ppmd_use_after_free.rar.uu \
 	libarchive/test/test_read_format_rar_ppmd_use_after_free2.rar.uu \
 	libarchive/test/test_read_format_rar_sfx.exe.uu \
 	libarchive/test/test_read_format_rar_subblock.rar.uu \
 	libarchive/test/test_read_format_rar_unicode.rar.uu \
 	libarchive/test/test_read_format_rar_windows.rar.uu \
 	libarchive/test/test_read_format_rar5_arm.rar.uu \
 	libarchive/test/test_read_format_rar5_blake2.rar.uu \
 	libarchive/test/test_read_format_rar5_compressed.rar.uu \
 	libarchive/test/test_read_format_rar5_different_window_size.rar.uu \
 	libarchive/test/test_read_format_rar5_different_solid_window_size.rar.uu \
 	libarchive/test/test_read_format_rar5_distance_overflow.rar.uu \
 	libarchive/test/test_read_format_rar5_extra_field_version.rar.uu \
 	libarchive/test/test_read_format_rar5_fileattr.rar.uu \
 	libarchive/test/test_read_format_rar5_hardlink.rar.uu \
 	libarchive/test/test_read_format_rar5_invalid_dict_reference.rar.uu \
 	libarchive/test/test_read_format_rar5_leftshift1.rar.uu \
 	libarchive/test/test_read_format_rar5_leftshift2.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive.part01.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive.part02.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive.part03.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive.part04.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive.part05.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive.part06.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive.part07.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive.part08.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive_solid.part01.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive_solid.part02.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive_solid.part03.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive_solid.part04.rar.uu \
 	libarchive/test/test_read_format_rar5_multiple_files.rar.uu \
 	libarchive/test/test_read_format_rar5_multiple_files_solid.rar.uu \
 	libarchive/test/test_read_format_rar5_nonempty_dir_stream.rar.uu \
 	libarchive/test/test_read_format_rar5_owner.rar.uu \
 	libarchive/test/test_read_format_rar5_readtables_overflow.rar.uu \
 	libarchive/test/test_read_format_rar5_sfx.exe.uu \
 	libarchive/test/test_read_format_rar5_solid.rar.uu \
 	libarchive/test/test_read_format_rar5_stored.rar.uu \
 	libarchive/test/test_read_format_rar5_stored_manyfiles.rar.uu \
 	libarchive/test/test_read_format_rar5_symlink.rar.uu \
 	libarchive/test/test_read_format_rar5_truncated_huff.rar.uu \
 	libarchive/test/test_read_format_rar5_win32.rar.uu \
 	libarchive/test/test_read_format_rar5_arm_filter_on_window_boundary.rar.uu \
 	libarchive/test/test_read_format_rar5_different_winsize_on_merge.rar.uu \
 	libarchive/test/test_read_format_rar5_block_size_is_too_small.rar.uu \
+	libarchive/test/test_read_format_rar5_decode_number_out_of_bounds_read.rar.uu \
 	libarchive/test/test_read_format_raw.bufr.uu \
 	libarchive/test/test_read_format_raw.data.gz.uu \
 	libarchive/test/test_read_format_raw.data.Z.uu \
 	libarchive/test/test_read_format_raw.data.uu \
 	libarchive/test/test_read_format_tar_concatenated.tar.uu \
 	libarchive/test/test_read_format_tar_empty_filename.tar.uu \
 	libarchive/test/test_read_format_tar_empty_with_gnulabel.tar.uu \
 	libarchive/test/test_read_format_tar_empty_pax.tar.Z.uu \
 	libarchive/test/test_read_format_tar_filename_koi8r.tar.Z.uu \
 	libarchive/test/test_read_format_ustar_filename_cp866.tar.Z.uu \
 	libarchive/test/test_read_format_ustar_filename_eucjp.tar.Z.uu \
 	libarchive/test/test_read_format_ustar_filename_koi8r.tar.Z.uu \
 	libarchive/test/test_read_format_warc.warc.uu \
 	libarchive/test/test_read_format_zip.zip.uu \
 	libarchive/test/test_read_format_zip_7075_utf8_paths.zip.uu \
 	libarchive/test/test_read_format_zip_7z_deflate.zip.uu \
 	libarchive/test/test_read_format_zip_7z_lzma.zip.uu \
 	libarchive/test/test_read_format_zip_bz2_hang.zip.uu \
 	libarchive/test/test_read_format_zip_bzip2.zipx.uu \
 	libarchive/test/test_read_format_zip_bzip2_multi.zipx.uu \
 	libarchive/test/test_read_format_zip_comment_stored_1.zip.uu \
 	libarchive/test/test_read_format_zip_comment_stored_2.zip.uu \
 	libarchive/test/test_read_format_zip_encryption_data.zip.uu \
 	libarchive/test/test_read_format_zip_encryption_header.zip.uu \
 	libarchive/test/test_read_format_zip_encryption_partially.zip.uu \
 	libarchive/test/test_read_format_zip_extra_padding.zip.uu \
 	libarchive/test/test_read_format_zip_filename_cp866.zip.uu \
 	libarchive/test/test_read_format_zip_filename_cp932.zip.uu \
 	libarchive/test/test_read_format_zip_filename_koi8r.zip.uu \
 	libarchive/test/test_read_format_zip_filename_utf8_jp.zip.uu \
 	libarchive/test/test_read_format_zip_filename_utf8_ru.zip.uu \
 	libarchive/test/test_read_format_zip_filename_utf8_ru2.zip.uu \
 	libarchive/test/test_read_format_zip_high_compression.zip.uu \
 	libarchive/test/test_read_format_zip_length_at_end.zip.uu \
 	libarchive/test/test_read_format_zip_lzma.zipx.uu \
 	libarchive/test/test_read_format_zip_lzma_alone_leak.zipx.uu \
 	libarchive/test/test_read_format_zip_lzma_multi.zipx.uu \
 	libarchive/test/test_read_format_zip_lzma_stream_end.zipx.uu \
 	libarchive/test/test_read_format_zip_jar.jar.uu \
 	libarchive/test/test_read_format_zip_mac_metadata.zip.uu \
 	libarchive/test/test_read_format_zip_malformed1.zip.uu \
 	libarchive/test/test_read_format_zip_msdos.zip.uu \
 	libarchive/test/test_read_format_zip_nested.zip.uu \
 	libarchive/test/test_read_format_zip_nofiletype.zip.uu \
 	libarchive/test/test_read_format_zip_padded1.zip.uu \
 	libarchive/test/test_read_format_zip_padded2.zip.uu \
 	libarchive/test/test_read_format_zip_padded3.zip.uu \
 	libarchive/test/test_read_format_zip_ppmd8.zipx.uu \
 	libarchive/test/test_read_format_zip_ppmd8_crash_1.zipx.uu \
 	libarchive/test/test_read_format_zip_ppmd8_crash_2.zipx.uu \
 	libarchive/test/test_read_format_zip_ppmd8_multi.zipx.uu \
 	libarchive/test/test_read_format_zip_sfx.uu \
 	libarchive/test/test_read_format_zip_symlink.zip.uu \
 	libarchive/test/test_read_format_zip_traditional_encryption_data.zip.uu \
 	libarchive/test/test_read_format_zip_ux.zip.uu \
 	libarchive/test/test_read_format_zip_winzip_aes128.zip.uu \
 	libarchive/test/test_read_format_zip_winzip_aes256.zip.uu \
 	libarchive/test/test_read_format_zip_winzip_aes256_large.zip.uu \
 	libarchive/test/test_read_format_zip_winzip_aes256_stored.zip.uu \
 	libarchive/test/test_read_format_zip_with_invalid_traditional_eocd.zip.uu \
 	libarchive/test/test_read_format_zip_xz_multi.zipx.uu \
 	libarchive/test/test_read_format_zip_zip64a.zip.uu \
 	libarchive/test/test_read_format_zip_zip64b.zip.uu \
 	libarchive/test/test_read_large_splitted_rar_aa.uu \
 	libarchive/test/test_read_large_splitted_rar_ab.uu \
 	libarchive/test/test_read_large_splitted_rar_ac.uu \
 	libarchive/test/test_read_large_splitted_rar_ad.uu \
 	libarchive/test/test_read_large_splitted_rar_ae.uu \
 	libarchive/test/test_read_pax_xattr_rht_security_selinux.tar.uu \
 	libarchive/test/test_read_pax_xattr_schily.tar.uu \
 	libarchive/test/test_read_splitted_rar_aa.uu \
 	libarchive/test/test_read_splitted_rar_ab.uu \
 	libarchive/test/test_read_splitted_rar_ac.uu \
 	libarchive/test/test_read_splitted_rar_ad.uu \
 	libarchive/test/test_read_too_many_filters.gz.uu \
 	libarchive/test/test_splitted_rar_seek_support_aa.uu \
 	libarchive/test/test_splitted_rar_seek_support_ab.uu \
 	libarchive/test/test_splitted_rar_seek_support_ac.uu \
 	libarchive/test/test_write_disk_appledouble.cpio.gz.uu \
 	libarchive/test/test_write_disk_hfs_compression.tgz.uu \
 	libarchive/test/test_write_disk_mac_metadata.tar.gz.uu \
 	libarchive/test/test_write_disk_no_hfs_compression.tgz.uu \
 	libarchive/test/CMakeLists.txt \
 	libarchive/test/README
 
 #
 # Common code for libarchive frontends (cpio, tar)
 #
diff --git a/libarchive/archive_read_support_format_rar5.c b/libarchive/archive_read_support_format_rar5.c
index e89e988a..a91c73f8 100644
--- a/libarchive/archive_read_support_format_rar5.c
+++ b/libarchive/archive_read_support_format_rar5.c
@@ -1012,22 +1012,40 @@ static int read_var_sized(struct archive_read* a, size_t* pvalue,
 	return ret;
 }
 
-static int read_bits_32(struct rar5* rar, const uint8_t* p, uint32_t* value) {
+static int read_bits_32(struct archive_read* a, struct rar5* rar,
+	const uint8_t* p, uint32_t* value)
+{
+	if(rar->bits.in_addr >= rar->cstate.cur_block_size) {
+		archive_set_error(&a->archive,
+			ARCHIVE_ERRNO_PROGRAMMER,
+			"Premature end of stream during extraction of data (#1)");
+		return ARCHIVE_FATAL;
+	}
+
 	uint32_t bits = ((uint32_t) p[rar->bits.in_addr]) << 24;
 	bits |= p[rar->bits.in_addr + 1] << 16;
 	bits |= p[rar->bits.in_addr + 2] << 8;
 	bits |= p[rar->bits.in_addr + 3];
 	bits <<= rar->bits.bit_addr;
 	bits |= p[rar->bits.in_addr + 4] >> (8 - rar->bits.bit_addr);
 	*value = bits;
 	return ARCHIVE_OK;
 }
 
-static int read_bits_16(struct rar5* rar, const uint8_t* p, uint16_t* value) {
+static int read_bits_16(struct archive_read* a, struct rar5* rar,
+	const uint8_t* p, uint16_t* value)
+{
+	if(rar->bits.in_addr >= rar->cstate.cur_block_size) {
+		archive_set_error(&a->archive,
+			ARCHIVE_ERRNO_PROGRAMMER,
+			"Premature end of stream during extraction of data (#2)");
+		return ARCHIVE_FATAL;
+	}
+
 	int bits = (int) ((uint32_t) p[rar->bits.in_addr]) << 16;
 	bits |= (int) p[rar->bits.in_addr + 1] << 8;
 	bits |= (int) p[rar->bits.in_addr + 2];
 	bits >>= (8 - rar->bits.bit_addr);
 	*value = bits & 0xffff;
 	return ARCHIVE_OK;
 }
@@ -1039,29 +1057,29 @@ static void skip_bits(struct rar5* rar, int bits) {
 }
 
 /* n = up to 16 */
-static int read_consume_bits(struct rar5* rar, const uint8_t* p, int n,
-    int* value)
+static int read_consume_bits(struct archive_read* a, struct rar5* rar,
+	const uint8_t* p, int n, int* value)
 {
 	uint16_t v;
 	int ret, num;
 
 	if(n == 0 || n > 16) {
 		/* This is a programmer error and should never happen
 		 * in runtime. */
 		return ARCHIVE_FATAL;
 	}
 
-	ret = read_bits_16(rar, p, &v);
+	ret = read_bits_16(a, rar, p, &v);
 	if(ret != ARCHIVE_OK)
 		return ret;
 
 	num = (int) v;
 	num >>= 16 - n;
 
 	skip_bits(rar, n);
 
 	if(value)
 		*value = num;
 
 	return ARCHIVE_OK;
 }
@@ -2525,225 +2543,217 @@ static int create_decode_tables(uint8_t* bit_length,
 static int decode_number(struct archive_read* a, struct decode_table* table,
     const uint8_t* p, uint16_t* num)
 {
-	int i, bits, dist;
+	int i, bits, dist, ret;
 	uint16_t bitfield;
 	uint32_t pos;
 	struct rar5* rar = get_context(a);
 
-	if(ARCHIVE_OK != read_bits_16(rar, p, &bitfield)) {
-		return ARCHIVE_EOF;
+	if(ARCHIVE_OK != (ret = read_bits_16(a, rar, p, &bitfield))) {
+		return ret;
 	}
 
 	bitfield &= 0xfffe;
 
 	if(bitfield < table->decode_len[table->quick_bits]) {
 		int code = bitfield >> (16 - table->quick_bits);
 		skip_bits(rar, table->quick_len[code]);
 		*num = table->quick_num[code];
 		return ARCHIVE_OK;
 	}
 
 	bits = 15;
 
 	for(i = table->quick_bits + 1; i < 15; i++) {
 		if(bitfield < table->decode_len[i]) {
 			bits = i;
 			break;
 		}
 	}
 
 	skip_bits(rar, bits);
 
 	dist = bitfield - table->decode_len[bits - 1];
 	dist >>= (16 - bits);
 	pos = table->decode_pos[bits] + dist;
 
 	if(pos >= table->size)
 		pos = 0;
 
 	*num = table->decode_num[pos];
 	return ARCHIVE_OK;
 }
 
 /* Reads and parses Huffman tables from the beginning of the block. */
 static int parse_tables(struct archive_read* a, struct rar5* rar,
     const uint8_t* p)
 {
 	int ret, value, i, w, idx = 0;
 	uint8_t bit_length[HUFF_BC],
 		table[HUFF_TABLE_SIZE],
 		nibble_mask = 0xF0,
 		nibble_shift = 4;
 
 	enum { ESCAPE = 15 };
 
 	/* The data for table generation is compressed using a simple RLE-like
 	 * algorithm when storing zeroes, so we need to unpack it first. */
 	for(w = 0, i = 0; w < HUFF_BC;) {
 		if(i >= rar->cstate.cur_block_size) {
 			/* Truncated data, can't continue. */
 			archive_set_error(&a->archive,
 			    ARCHIVE_ERRNO_FILE_FORMAT,
 			    "Truncated data in huffman tables");
 			return ARCHIVE_FATAL;
 		}
 
 		value = (p[i] & nibble_mask) >> nibble_shift;
 
 		if(nibble_mask == 0x0F)
 			++i;
 
 		nibble_mask ^= 0xFF;
 		nibble_shift ^= 4;
 
 		/* Values smaller than 15 is data, so we write it directly.
 		 * Value 15 is a flag telling us that we need to unpack more
 		 * bytes. */
 		if(value == ESCAPE) {
 			value = (p[i] & nibble_mask) >> nibble_shift;
 			if(nibble_mask == 0x0F)
 				++i;
 			nibble_mask ^= 0xFF;
 			nibble_shift ^= 4;
 
 			if(value == 0) {
 				/* We sometimes need to write the actual value
 				 * of 15, so this case handles that. */
 				bit_length[w++] = ESCAPE;
 			} else {
 				int k;
 
 				/* Fill zeroes. */
 				for(k = 0; (k < value + 2) && (w < HUFF_BC);
 				    k++) {
 					bit_length[w++] = 0;
 				}
 			}
 		} else {
 			bit_length[w++] = value;
 		}
 	}
 
 	rar->bits.in_addr = i;
 	rar->bits.bit_addr = nibble_shift ^ 4;
 
 	ret = create_decode_tables(bit_length, &rar->cstate.bd, HUFF_BC);
 	if(ret != ARCHIVE_OK) {
 		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
 		    "Decoding huffman tables failed");
 		return ARCHIVE_FATAL;
 	}
 
 	for(i = 0; i < HUFF_TABLE_SIZE;) {
 		uint16_t num;
 
-		if((rar->bits.in_addr + 6) >= rar->cstate.cur_block_size) {
-			/* Truncated data, can't continue. */
-			archive_set_error(&a->archive,
-			    ARCHIVE_ERRNO_FILE_FORMAT,
-			    "Truncated data in huffman tables (#2)");
-			return ARCHIVE_FATAL;
-		}
-
 		ret = decode_number(a, &rar->cstate.bd, p, &num);
 		if(ret != ARCHIVE_OK) {
 			archive_set_error(&a->archive,
 			    ARCHIVE_ERRNO_FILE_FORMAT,
 			    "Decoding huffman tables failed");
 			return ARCHIVE_FATAL;
 		}
 
 		if(num < 16) {
 			/* 0..15: store directly */
 			table[i] = (uint8_t) num;
 			i++;
 		} else if(num < 18) {
 			/* 16..17: repeat previous code */
 			uint16_t n;
 
-			if(ARCHIVE_OK != read_bits_16(rar, p, &n))
-				return ARCHIVE_EOF;
+			if(ARCHIVE_OK != (ret = read_bits_16(a, rar, p, &n)))
+				return ret;
 
 			if(num == 16) {
 				n >>= 13;
 				n += 3;
 				skip_bits(rar, 3);
 			} else {
 				n >>= 9;
 				n += 11;
 				skip_bits(rar, 7);
 			}
 
 			if(i > 0) {
 				while(n-- > 0 && i < HUFF_TABLE_SIZE) {
 					table[i] = table[i - 1];
 					i++;
 				}
 			} else {
 				archive_set_error(&a->archive,
 				    ARCHIVE_ERRNO_FILE_FORMAT,
 				    "Unexpected error when decoding "
 				    "huffman tables");
 				return ARCHIVE_FATAL;
 			}
 		} else {
 			/* other codes: fill with zeroes `n` times */
 			uint16_t n;
 
-			if(ARCHIVE_OK != read_bits_16(rar, p, &n))
-				return ARCHIVE_EOF;
+			if(ARCHIVE_OK != (ret = read_bits_16(a, rar, p, &n)))
+				return ret;
 
 			if(num == 18) {
 				n >>= 13;
 				n += 3;
 				skip_bits(rar, 3);
 			} else {
 				n >>= 9;
 				n += 11;
 				skip_bits(rar, 7);
 			}
 
 			while(n-- > 0 && i < HUFF_TABLE_SIZE)
 				table[i++] = 0;
 		}
 	}
 
 	ret = create_decode_tables(&table[idx], &rar->cstate.ld, HUFF_NC);
 	if(ret != ARCHIVE_OK) {
 		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
 		     "Failed to create literal table");
 		return ARCHIVE_FATAL;
 	}
 
 	idx += HUFF_NC;
 
 	ret = create_decode_tables(&table[idx], &rar->cstate.dd, HUFF_DC);
 	if(ret != ARCHIVE_OK) {
 		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
 		    "Failed to create distance table");
 		return ARCHIVE_FATAL;
 	}
 
 	idx += HUFF_DC;
 
 	ret = create_decode_tables(&table[idx], &rar->cstate.ldd, HUFF_LDC);
 	if(ret != ARCHIVE_OK) {
 		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
 		    "Failed to create lower bits of distances table");
 		return ARCHIVE_FATAL;
 	}
 
 	idx += HUFF_LDC;
 
 	ret = create_decode_tables(&table[idx], &rar->cstate.rd, HUFF_RC);
 	if(ret != ARCHIVE_OK) {
 		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
 		    "Failed to create repeating distances table");
 		return ARCHIVE_FATAL;
 	}
 
 	return ARCHIVE_OK;
 }
 
 /* Parses the block header, verifies its CRC byte, and saves the header
  * fields inside the `hdr` pointer. */
@@ -2807,32 +2817,32 @@ static int parse_block_header(struct archive_read* a, const uint8_t* p,
 }
 
 /* Convenience function used during filter processing. */
-static int parse_filter_data(struct rar5* rar, const uint8_t* p,
-    uint32_t* filter_data)
+static int parse_filter_data(struct archive_read* a, struct rar5* rar,
+	const uint8_t* p, uint32_t* filter_data)
 {
-	int i, bytes;
+	int i, bytes, ret;
 	uint32_t data = 0;
 
-	if(ARCHIVE_OK != read_consume_bits(rar, p, 2, &bytes))
-		return ARCHIVE_EOF;
+	if(ARCHIVE_OK != (ret = read_consume_bits(a, rar, p, 2, &bytes)))
+		return ret;
 
 	bytes++;
 
 	for(i = 0; i < bytes; i++) {
 		uint16_t byte;
 
-		if(ARCHIVE_OK != read_bits_16(rar, p, &byte)) {
-			return ARCHIVE_EOF;
+		if(ARCHIVE_OK != (ret = read_bits_16(a, rar, p, &byte))) {
+			return ret;
 		}
 
 		/* Cast to uint32_t will ensure the shift operation will not
 		 * produce undefined result. */
 		data += ((uint32_t) byte >> 8) << (i * 8);
 		skip_bits(rar, 8);
 	}
 
 	*filter_data = data;
 	return ARCHIVE_OK;
 }
 
 /* Function is used during sanity checking. */
@@ -2861,88 +2871,90 @@ static int is_valid_filter_block_start(struct rar5* rar,
 /* The function will create a new filter, read its parameters from the input
  * stream and add it to the filter collection. */
 static int parse_filter(struct archive_read* ar, const uint8_t* p) {
 	uint32_t block_start, block_length;
 	uint16_t filter_type;
 	struct filter_info* filt = NULL;
 	struct rar5* rar = get_context(ar);
+	int ret;
 
 	/* Read the parameters from the input stream. */
-	if(ARCHIVE_OK != parse_filter_data(rar, p, &block_start))
-		return ARCHIVE_EOF;
+	if(ARCHIVE_OK != (ret = parse_filter_data(ar, rar, p, &block_start)))
+		return ret;
 
-	if(ARCHIVE_OK != parse_filter_data(rar, p, &block_length))
-		return ARCHIVE_EOF;
+	if(ARCHIVE_OK != (ret = parse_filter_data(ar, rar, p, &block_length)))
+		return ret;
 
-	if(ARCHIVE_OK != read_bits_16(rar, p, &filter_type))
-		return ARCHIVE_EOF;
+	if(ARCHIVE_OK != (ret = read_bits_16(ar, rar, p, &filter_type)))
+		return ret;
 
 	filter_type >>= 13;
 	skip_bits(rar, 3);
 
 	/* Perform some sanity checks on this filter parameters. Note that we
 	 * allow only DELTA, E8/E9 and ARM filters here, because rest of
 	 * filters are not used in RARv5. */
 
 	if(block_length < 4 ||
 	    block_length > 0x400000 ||
 	    filter_type > FILTER_ARM ||
 	    !is_valid_filter_block_start(rar, block_start))
 	{
 		archive_set_error(&ar->archive, ARCHIVE_ERRNO_FILE_FORMAT,
 		    "Invalid filter encountered");
 		return ARCHIVE_FATAL;
 	}
 
 	/* Allocate a new filter. */
 	filt = add_new_filter(rar);
 	if(filt == NULL) {
 		archive_set_error(&ar->archive, ENOMEM,
 		    "Can't allocate memory for a filter descriptor.");
 		return ARCHIVE_FATAL;
 	}
 
 	filt->type = filter_type;
 	filt->block_start = rar->cstate.write_ptr + block_start;
 	filt->block_length = block_length;
 
 	rar->cstate.last_block_start = filt->block_start;
 	rar->cstate.last_block_length = filt->block_length;
 
 	/* Read some more data in case this is a DELTA filter. Other filter
 	 * types don't require any additional data over what was already
 	 * read. */
 	if(filter_type == FILTER_DELTA) {
 		int channels;
 
-		if(ARCHIVE_OK != read_consume_bits(rar, p, 5, &channels))
-			return ARCHIVE_EOF;
+		if(ARCHIVE_OK != (ret = read_consume_bits(ar, rar, p, 5, &channels)))
+			return ret;
 
 		filt->channels = channels + 1;
 	}
 
 	return ARCHIVE_OK;
 }
 
-static int decode_code_length(struct rar5* rar, const uint8_t* p,
-    uint16_t code)
+static int decode_code_length(struct archive_read* a, struct rar5* rar,
+	const uint8_t* p, uint16_t code)
 {
 	int lbits, length = 2;
+
 	if(code < 8) {
 		lbits = 0;
 		length += code;
 	} else {
 		lbits = code / 4 - 1;
 		length += (4 | (code & 3)) << lbits;
 	}
 
 	if(lbits > 0) {
 		int add;
 
-		if(ARCHIVE_OK != read_consume_bits(rar, p, lbits, &add))
+		if(ARCHIVE_OK != read_consume_bits(a, rar, p, lbits, &add))
 			return -1;
 
 		length += add;
 	}
 
 	return length;
 }
@@ -2978,215 +2990,219 @@ static int copy_string(struct archive_read* a, int len, int dist) {
 static int do_uncompress_block(struct archive_read* a, const uint8_t* p) {
 	struct rar5* rar = get_context(a);
 	uint16_t num;
 	int ret;
 
 	const uint64_t cmask = rar->cstate.window_mask;
 	const struct compressed_block_header* hdr = &rar->last_block_hdr;
 	const uint8_t bit_size = 1 + bf_bit_size(hdr);
 
 	while(1) {
 		if(rar->cstate.write_ptr - rar->cstate.last_write_ptr >
 		    (rar->cstate.window_size >> 1)) {
 			/* Don't allow growing data by more than half of the
 			 * window size at a time. In such case, break the loop;
 			 *  next call to this function will continue processing
 			 *  from this moment. */
 			break;
 		}
 
 		if(rar->bits.in_addr > rar->cstate.cur_block_size - 1 ||
 		    (rar->bits.in_addr == rar->cstate.cur_block_size - 1 &&
 		    rar->bits.bit_addr >= bit_size))
 		{
 			/* If the program counter is here, it means the
 			 * function has finished processing the block. */
 			rar->cstate.block_parsing_finished = 1;
 			break;
 		}
 
 		/* Decode the next literal. */
 		if(ARCHIVE_OK != decode_number(a, &rar->cstate.ld, p, &num)) {
 			return ARCHIVE_EOF;
 		}
 
 		/* Num holds a decompression literal, or 'command code'.
 		 *
 		 * - Values lower than 256 are just bytes. Those codes
 		 *   can be stored in the output buffer directly.
 		 *
 		 * - Code 256 defines a new filter, which is later used to
 		 *   ransform the data block accordingly to the filter type.
 		 *   The data block needs to be fully uncompressed first.
 		 *
 		 * - Code bigger than 257 and smaller than 262 define
 		 *   a repetition pattern that should be copied from
 		 *   an already uncompressed chunk of data.
 		 */
 
 		if(num < 256) {
 			/* Directly store the byte. */
 			int64_t write_idx = rar->cstate.solid_offset +
 			    rar->cstate.write_ptr++;
 
 			rar->cstate.window_buf[write_idx & cmask] =
 			    (uint8_t) num;
 			continue;
 		} else if(num >= 262) {
 			uint16_t dist_slot;
-			int len = decode_code_length(rar, p, num - 262),
+			int len = decode_code_length(a, rar, p, num - 262),
 				dbits,
 				dist = 1;
 
 			if(len == -1) {
 				archive_set_error(&a->archive,
 				    ARCHIVE_ERRNO_PROGRAMMER,
 				    "Failed to decode the code length");
 
 				return ARCHIVE_FATAL;
 			}
 
 			if(ARCHIVE_OK != decode_number(a, &rar->cstate.dd, p,
 			    &dist_slot))
 			{
 				archive_set_error(&a->archive,
 				    ARCHIVE_ERRNO_PROGRAMMER,
 				    "Failed to decode the distance slot");
 
 				return ARCHIVE_FATAL;
 			}
 
 			if(dist_slot < 4) {
 				dbits = 0;
 				dist += dist_slot;
 			} else {
 				dbits = dist_slot / 2 - 1;
 
 				/* Cast to uint32_t will make sure the shift
 				 * left operation won't produce undefined
 				 * result. Then, the uint32_t type will
 				 * be implicitly casted to int. */
 				dist += (uint32_t) (2 |
 				    (dist_slot & 1)) << dbits;
 			}
 
 			if(dbits > 0) {
 				if(dbits >= 4) {
 					uint32_t add = 0;
 					uint16_t low_dist;
 
 					if(dbits > 4) {
-						if(ARCHIVE_OK != read_bits_32(
-						    rar, p, &add)) {
+						if(ARCHIVE_OK != (ret = read_bits_32(
+						    a, rar, p, &add))) {
 							/* Return EOF if we
 							 * can't read more
 							 * data. */
-							return ARCHIVE_EOF;
+							return ret;
 						}
 
 						skip_bits(rar, dbits - 4);
 						add = (add >> (
 						    36 - dbits)) << 4;
 						dist += add;
 					}
 
 					if(ARCHIVE_OK != decode_number(a,
 					    &rar->cstate.ldd, p, &low_dist))
 					{
 						archive_set_error(&a->archive,
 						    ARCHIVE_ERRNO_PROGRAMMER,
 						    "Failed to decode the "
 						    "distance slot");
 
 						return ARCHIVE_FATAL;
 					}
 
 					if(dist >= INT_MAX - low_dist - 1) {
 						/* This only happens in
 						 * invalid archives. */
 						archive_set_error(&a->archive,
 						    ARCHIVE_ERRNO_FILE_FORMAT,
 						    "Distance pointer "
 						    "overflow");
 						return ARCHIVE_FATAL;
 					}
 
 					dist += low_dist;
 				} else {
 					/* dbits is one of [0,1,2,3] */
 					int add;
 
-					if(ARCHIVE_OK != read_consume_bits(rar,
-					     p, dbits, &add)) {
+					if(ARCHIVE_OK != (ret = read_consume_bits(a, rar,
+					     p, dbits, &add))) {
 						/* Return EOF if we can't read
 						 * more data. */
-						return ARCHIVE_EOF;
+						return ret;
 					}
 
 					dist += add;
 				}
 			}
 
 			if(dist > 0x100) {
 				len++;
 
 				if(dist > 0x2000) {
 					len++;
 
 					if(dist > 0x40000) {
 						len++;
 					}
 				}
 			}
 
 			dist_cache_push(rar, dist);
 			rar->cstate.last_len = len;
 
 			if(ARCHIVE_OK != copy_string(a, len, dist))
 				return ARCHIVE_FATAL;
 
 			continue;
 		} else if(num == 256) {
 			/* Create a filter. */
 			ret = parse_filter(a, p);
 			if(ret != ARCHIVE_OK)
 				return ret;
 
 			continue;
 		} else if(num == 257) {
 			if(rar->cstate.last_len != 0) {
 				if(ARCHIVE_OK != copy_string(a,
 				    rar->cstate.last_len,
 				    rar->cstate.dist_cache[0]))
 				{
 					return ARCHIVE_FATAL;
 				}
 			}
 
 			continue;
 		} else {
 			/* num < 262 */
 			const int idx = num - 258;
 			const int dist = dist_cache_touch(rar, idx);
 
 			uint16_t len_slot;
 			int len;
 
 			if(ARCHIVE_OK != decode_number(a, &rar->cstate.rd, p,
 			    &len_slot)) {
 				return ARCHIVE_FATAL;
 			}
 
-			len = decode_code_length(rar, p, len_slot);
+			len = decode_code_length(a, rar, p, len_slot);
+			if (len == -1) {
+				return ARCHIVE_FATAL;
+			}
+
 			rar->cstate.last_len = len;
 
 			if(ARCHIVE_OK != copy_string(a, len, dist))
 				return ARCHIVE_FATAL;
 
 			continue;
 		}
 	}
 
 	return ARCHIVE_OK;
 }
 
 /* Binary search for the RARv5 signature. */
diff --git a/libarchive/test/test_read_format_rar5.c b/libarchive/test/test_read_format_rar5.c
index 9ac63f91..d8b9ff21 100644
--- a/libarchive/test/test_read_format_rar5.c
+++ b/libarchive/test/test_read_format_rar5.c
@@ -1295,3 +1295,19 @@ DEFINE_TEST(test_read_format_rar5_sfx)
 	assertEqualMem(buff, test_txt, size);
 }
 
+DEFINE_TEST(test_read_format_rar5_decode_number_out_of_bounds_read)
+{
+	/* oss fuzz 30448 */
+
+	char buf[4096];
+	PROLOGUE("test_read_format_rar5_decode_number_out_of_bounds_read.rar");
+
+	/* Return codes of those calls are ignored, because this sample file
+	 * is invalid. However, the unpacker shouldn't produce any SIGSEGV
+	 * errors during processing. */
+
+	(void) archive_read_next_header(a, &ae);
+	while(0 < archive_read_data(a, buf, sizeof(buf))) {}
+
+	EPILOGUE();
+}
diff --git a/libarchive/test/test_read_format_rar5_decode_number_out_of_bounds_read.rar.uu b/libarchive/test/test_read_format_rar5_decode_number_out_of_bounds_read.rar.uu
new file mode 100644
index 00000000..34d8ce3f
--- /dev/null
+++ b/libarchive/test/test_read_format_rar5_decode_number_out_of_bounds_read.rar.uu
@@ -0,0 +1,10 @@
+begin 644 test_read_format_rar5_decode_number_out_of_bounds_read.rar
+M4F%R(1H'`0!3@"KT`P+G(@(0("`@@`L!!"`@("`@(($D_[BJ2"!::7!)210V
+M+0#ZF#)Q!`+>YPW_("`@("``_R````````````````````````````!__P``
+M``````!T72`@/EW_(/\@("`@("`@("`@("`@("`@("`@("`@("`@(/\@("`@
+M("`@("#_("`@("`@("`@("`@("`@("`@("`@("`@("#_("`@("`@("`@_R`@
+M("`@("`@("`@("`@("`@("`@("`@("`@_R`@("`@("`@(/\@("`@("`@("`@
+M("`@("`@("`@("`@("`@(/\@("`@("`@("#_("`@("`@("`@("`@("`@("`@
+E("`@("`@("#_("`@("`@("`@_R`@("`@("`@("`@("`@("`@(```
+`
+end
