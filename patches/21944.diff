commit 8b8b37ef8864a976641d4382293de7fe3d5edd62
Author: K.Kosako <kkosako0@gmail.com>
Date:   Sun May 3 10:22:09 2020 +0900

    fix: 21944, 21977 in oss-fuzz

diff --git a/src/big5.c b/src/big5.c
index 79ae1e3..faff845 100644
--- a/src/big5.c
+++ b/src/big5.c
@@ -1,30 +1,30 @@
 /**********************************************************************
   big5.c -  Oniguruma (regular expression library)
 **********************************************************************/
 /*-
- * Copyright (c) 2002-2019  K.Kosako
+ * Copyright (c) 2002-2020  K.Kosako
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
  *    notice, this list of conditions and the following disclaimer in the
  *    documentation and/or other materials provided with the distribution.
  *
  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  */
 
 #include "regenc.h"
@@ -58,8 +58,15 @@ static int
 big5_code_to_mbclen(OnigCodePoint code)
 {
   if ((code & (~0xffff)) != 0) return ONIGERR_INVALID_CODE_POINT_VALUE;
-  if ((code &    0xff00) != 0) return 2;
-  if (EncLen_BIG5[(int )(code & 0xff)] == 1) return 1;
+
+  if ((code & 0xff00) != 0) {
+    if (EncLen_BIG5[(int )(code >> 8) & 0xff] == 2)
+      return 2;
+  }
+  else {
+    if (EncLen_BIG5[(int )(code & 0xff)] == 1)
+      return 1;
+  }
 
   return ONIGERR_INVALID_CODE_POINT_VALUE;
 }
diff --git a/src/euc_jp.c b/src/euc_jp.c
index 640b3e3..6ddd91c 100644
--- a/src/euc_jp.c
+++ b/src/euc_jp.c
@@ -1,32 +1,32 @@
 /**********************************************************************
   euc_jp.c -  Oniguruma (regular expression library)
 **********************************************************************/
 /*-
- * Copyright (c) 2002-2019  K.Kosako
+ * Copyright (c) 2002-2020  K.Kosako
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
  *    notice, this list of conditions and the following disclaimer in the
  *    documentation and/or other materials provided with the distribution.
  *
  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  */
 
 #include "regint.h"
 
 #define eucjp_islead(c)    ((UChar )((c) - 0xa1) > 0xfe - 0xa1)
@@ -114,10 +114,20 @@ static int
 code_to_mbclen(OnigCodePoint code)
 {
   if (ONIGENC_IS_CODE_ASCII(code)) return 1;
-  else if ((code & 0xff0000) != 0) return 3;
-  else if ((code &   0xff00) != 0) return 2;
-  else
-    return ONIGERR_INVALID_CODE_POINT_VALUE;
+  else if ((code & 0xff0000) != 0) {
+    if (EncLen_EUCJP[(int )(code >> 16) & 0xff] == 3)
+      return 3;
+  }
+  else if ((code & 0xff00) != 0) {
+    if (EncLen_EUCJP[(int )(code >> 8) & 0xff] == 2)
+      return 2;
+  }
+  else if (code < 256) {
+    if (EncLen_EUCJP[(int )(code & 0xff)] == 1)
+      return 1;
+  }
+
+  return ONIGERR_INVALID_CODE_POINT_VALUE;
 }
 
 static int
diff --git a/src/euc_kr.c b/src/euc_kr.c
index 7fa50af..b0e9fbf 100644
--- a/src/euc_kr.c
+++ b/src/euc_kr.c
@@ -1,30 +1,30 @@
 /**********************************************************************
   euc_kr.c -  Oniguruma (regular expression library)
 **********************************************************************/
 /*-
- * Copyright (c) 2002-2019  K.Kosako
+ * Copyright (c) 2002-2020  K.Kosako
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
  *    notice, this list of conditions and the following disclaimer in the
  *    documentation and/or other materials provided with the distribution.
  *
  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  */
 
 #include "regenc.h"
@@ -58,8 +58,15 @@ static int
 euckr_code_to_mbclen(OnigCodePoint code)
 {
   if ((code & (~0xffff)) != 0) return ONIGERR_INVALID_CODE_POINT_VALUE;
-  if ((code &    0xff00) != 0) return 2;
-  if (EncLen_EUCKR[(int )(code & 0xff)] == 1) return 1;
+
+  if ((code & 0xff00) != 0) {
+    if (EncLen_EUCKR[(int )(code >> 8) & 0xff] == 2)
+      return 2;
+  }
+  else {
+    if (EncLen_EUCKR[(int )(code & 0xff)] == 1)
+      return 1;
+  }
 
   return ONIGERR_INVALID_CODE_POINT_VALUE;
 }
diff --git a/src/euc_tw.c b/src/euc_tw.c
index 8e72b97..99dc5ec 100644
--- a/src/euc_tw.c
+++ b/src/euc_tw.c
@@ -1,30 +1,30 @@
 /**********************************************************************
   euc_tw.c -  Oniguruma (regular expression library)
 **********************************************************************/
 /*-
- * Copyright (c) 2002-2019  K.Kosako
+ * Copyright (c) 2002-2020  K.Kosako
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
  *    notice, this list of conditions and the following disclaimer in the
  *    documentation and/or other materials provided with the distribution.
  *
  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  */
 
 #include "regenc.h"
@@ -57,15 +57,22 @@ euctw_mbc_enc_len(const UChar* p)
 static int
 euctw_code_to_mbclen(OnigCodePoint code)
 {
-       if ((code & 0xff000000) != 0) return 4;
-  else if ((code &   0xff0000) != 0) return ONIGERR_INVALID_CODE_POINT_VALUE;
-  else if ((code &     0xff00) != 0) return 2;
+  if ((code & 0xff000000) != 0) {
+    if (EncLen_EUCTW[(int )(code >> 24) & 0xff] == 4)
+      return 4;
+  }
+  else if ((code & 0xff0000) != 0)
+    return ONIGERR_INVALID_CODE_POINT_VALUE;
+  else if ((code & 0xff00) != 0) {
+    if (EncLen_EUCTW[(int )(code >> 8) & 0xff] == 2)
+      return 2;
+  }
   else {
     if (EncLen_EUCTW[(int )(code & 0xff)] == 1)
       return 1;
-
-    return ONIGERR_INVALID_CODE_POINT_VALUE;
   }
+
+  return ONIGERR_INVALID_CODE_POINT_VALUE;
 }
 
 static int
diff --git a/src/gb18030.c b/src/gb18030.c
index 1385a7f..7409d3e 100644
--- a/src/gb18030.c
+++ b/src/gb18030.c
@@ -89,15 +89,25 @@ gb18030_mbc_enc_len(const UChar* p)
 static int
 gb18030_code_to_mbclen(OnigCodePoint code)
 {
-       if ((code & 0xff000000) != 0) return 4;
-  else if ((code &   0xff0000) != 0) return ONIGERR_INVALID_CODE_POINT_VALUE;
-  else if ((code &     0xff00) != 0) return 2;
+  if ((code & 0xff000000) != 0) {
+    if (GB18030_MAP[(int )(code >> 24) & 0xff] == CM)
+      if (GB18030_MAP[(int )(code >> 16) & 0xff] == C4)
+        return 4;
+  }
+  else if ((code & 0xff0000) != 0) return ONIGERR_INVALID_CODE_POINT_VALUE;
+  else if ((code & 0xff00) != 0) {
+    if (GB18030_MAP[(int )(code >> 8) & 0xff] == CM) {
+      char c = GB18030_MAP[(int )code & 0xff];
+      if (c == CM || c == C2)
+        return 2;
+    }
+  }
   else {
-    if (GB18030_MAP[(int )(code & 0xff)] == CM)
-      return ONIGERR_INVALID_CODE_POINT_VALUE;
-
-    return 1;
+    if (GB18030_MAP[(int )(code & 0xff)] != CM)
+      return 1;
   }
+
+  return ONIGERR_INVALID_CODE_POINT_VALUE;
 }
 
 static int
diff --git a/src/regexec.c b/src/regexec.c
index 1b6895d..cd4c1c1 100644
--- a/src/regexec.c
+++ b/src/regexec.c
@@ -2343,55 +2343,59 @@ stack_double(int* is_alloca, char** arg_alloc_base,
 static int string_cmp_ic(OnigEncoding enc, int case_fold_flag,
                          UChar* s1, UChar** ps2, int mblen)
 {
   UChar buf1[ONIGENC_MBC_CASE_FOLD_MAXLEN];
   UChar buf2[ONIGENC_MBC_CASE_FOLD_MAXLEN];
   UChar *p1, *p2, *end1, *s2, *end2;
   int len1, len2;
 
   s2   = *ps2;
   end1 = s1 + mblen;
   end2 = s2 + mblen;
   while (s1 < end1) {
     len1 = ONIGENC_MBC_CASE_FOLD(enc, case_fold_flag, &s1, end1, buf1);
     len2 = ONIGENC_MBC_CASE_FOLD(enc, case_fold_flag, &s2, end2, buf2);
     if (len1 != len2) return 0;
     p1 = buf1;
     p2 = buf2;
     while (len1-- > 0) {
       if (*p1 != *p2) return 0;
       p1++;
       p2++;
     }
+    if (s2 >= end2) {
+      if (s1 < end1) return 0;
+      else           break;
+    }
   }
 
   *ps2 = s2;
   return 1;
 }
 
 #define STRING_CMP_VALUE(s1,s2,len,is_fail) do {\
   is_fail = 0;\
   while (len-- > 0) {\
     if (*s1++ != *s2++) {\
       is_fail = 1; break;\
     }\
   }\
 } while(0)
 
 #define STRING_CMP_VALUE_IC(case_fold_flag,s1,ps2,len,is_fail) do {\
   if (string_cmp_ic(encode, case_fold_flag, s1, ps2, len) == 0) \
     is_fail = 1; \
   else \
     is_fail = 0; \
 } while(0)
 
 
 #define IS_EMPTY_STR           (str == end)
 #define ON_STR_BEGIN(s)        ((s) == str)
 #define ON_STR_END(s)          ((s) == end)
 #define DATA_ENSURE_CHECK1     (s < right_range)
 #define DATA_ENSURE_CHECK(n)   (s + (n) <= right_range)
 #define DATA_ENSURE(n)         if (s + (n) > right_range) goto fail
 
 #define INIT_RIGHT_RANGE    right_range = (UChar* )in_right_range
 
 #ifdef USE_CAPTURE_HISTORY
diff --git a/src/regparse.c b/src/regparse.c
index cc015a7..e815b94 100644
--- a/src/regparse.c
+++ b/src/regparse.c
@@ -4564,76 +4564,91 @@ fetch_interval(UChar** src, UChar* end, PToken* tok, ScanEnv* env)
 
 /* \M-, \C-, \c, or \... */
 static int
-fetch_escaped_value(UChar** src, UChar* end, ScanEnv* env, OnigCodePoint* val)
+fetch_escaped_value_raw(UChar** src, UChar* end, ScanEnv* env, OnigCodePoint* val)
 {
   int v;
   OnigCodePoint c;
   OnigEncoding enc = env->enc;
   UChar* p = *src;
 
   if (PEND) return ONIGERR_END_PATTERN_AT_ESCAPE;
 
   PFETCH_S(c);
   switch (c) {
   case 'M':
     if (IS_SYNTAX_OP2(env->syntax, ONIG_SYN_OP2_ESC_CAPITAL_M_BAR_META)) {
       if (PEND) return ONIGERR_END_PATTERN_AT_META;
       PFETCH_S(c);
       if (c != '-') return ONIGERR_META_CODE_SYNTAX;
       if (PEND) return ONIGERR_END_PATTERN_AT_META;
       PFETCH_S(c);
       if (c == MC_ESC(env->syntax)) {
-        v = fetch_escaped_value(&p, end, env, &c);
+        v = fetch_escaped_value_raw(&p, end, env, &c);
         if (v < 0) return v;
       }
       c = ((c & 0xff) | 0x80);
     }
     else
       goto backslash;
     break;
 
   case 'C':
     if (IS_SYNTAX_OP2(env->syntax, ONIG_SYN_OP2_ESC_CAPITAL_C_BAR_CONTROL)) {
       if (PEND) return ONIGERR_END_PATTERN_AT_CONTROL;
       PFETCH_S(c);
       if (c != '-') return ONIGERR_CONTROL_CODE_SYNTAX;
       goto control;
     }
     else
       goto backslash;
 
   case 'c':
     if (IS_SYNTAX_OP(env->syntax, ONIG_SYN_OP_ESC_C_CONTROL)) {
     control:
       if (PEND) return ONIGERR_END_PATTERN_AT_CONTROL;
       PFETCH_S(c);
       if (c == '?') {
         c = 0177;
       }
       else {
         if (c == MC_ESC(env->syntax)) {
-          v = fetch_escaped_value(&p, end, env, &c);
+          v = fetch_escaped_value_raw(&p, end, env, &c);
           if (v < 0) return v;
         }
         c &= 0x9f;
       }
       break;
     }
     /* fall through */
 
   default:
     {
     backslash:
       c = conv_backslash_value(c, env);
     }
     break;
   }
 
   *src = p;
   *val = c;
   return 0;
 }
 
+static int
+fetch_escaped_value(UChar** src, UChar* end, ScanEnv* env, OnigCodePoint* val)
+{
+  int r;
+  int len;
+
+  r = fetch_escaped_value_raw(src, end, env, val);
+  if (r != 0) return r;
+
+  len = ONIGENC_CODE_TO_MBCLEN(env->enc, *val);
+  if (len < 0) return len;
+
+  return 0;
+}
+
 static int fetch_token(PToken* tok, UChar** src, UChar* end, ScanEnv* env);
 
 static OnigCodePoint
@@ -5031,271 +5046,271 @@ static int
 fetch_token_cc(PToken* tok, UChar** src, UChar* end, ScanEnv* env, int state)
 {
   int r;
   OnigCodePoint code;
   OnigCodePoint c, c2;
   OnigSyntaxType* syn = env->syntax;
   OnigEncoding enc = env->enc;
   UChar* prev;
   UChar* p = *src;
   PFETCH_READY;
 
   if (tok->code_point_continue != 0) {
     r = get_next_code_point(&p, end, tok->base_num, enc, TRUE, &code);
     if (r == 1) {
       tok->code_point_continue = 0;
     }
     else if (r == 2) {
       tok->type = TK_CC_RANGE;
       goto end;
     }
     else if (r == 0) {
       tok->type   = TK_CODE_POINT;
       tok->u.code = code;
       goto end;
     }
     else
       return r; /* error */
   }
 
   if (PEND) {
     tok->type = TK_EOT;
     return tok->type;
   }
 
   PFETCH(c);
   tok->type = TK_CHAR;
   tok->base_num = 0;
   tok->u.code   = c;
   tok->escaped  = 0;
 
   if (c == ']') {
     tok->type = TK_CC_CLOSE;
   }
   else if (c == '-') {
     tok->type = TK_CC_RANGE;
   }
   else if (c == MC_ESC(syn)) {
     if (! IS_SYNTAX_BV(syn, ONIG_SYN_BACKSLASH_ESCAPE_IN_CC))
       goto end;
 
     if (PEND) return ONIGERR_END_PATTERN_AT_ESCAPE;
 
     PFETCH(c);
     tok->escaped = 1;
     tok->u.code = c;
     switch (c) {
     case 'w':
       tok->type = TK_CHAR_TYPE;
       tok->u.prop.ctype = ONIGENC_CTYPE_WORD;
       tok->u.prop.not   = 0;
       break;
     case 'W':
       tok->type = TK_CHAR_TYPE;
       tok->u.prop.ctype = ONIGENC_CTYPE_WORD;
       tok->u.prop.not   = 1;
       break;
     case 'd':
       tok->type = TK_CHAR_TYPE;
       tok->u.prop.ctype = ONIGENC_CTYPE_DIGIT;
       tok->u.prop.not   = 0;
       break;
     case 'D':
       tok->type = TK_CHAR_TYPE;
       tok->u.prop.ctype = ONIGENC_CTYPE_DIGIT;
       tok->u.prop.not   = 1;
       break;
     case 's':
       tok->type = TK_CHAR_TYPE;
       tok->u.prop.ctype = ONIGENC_CTYPE_SPACE;
       tok->u.prop.not   = 0;
       break;
     case 'S':
       tok->type = TK_CHAR_TYPE;
       tok->u.prop.ctype = ONIGENC_CTYPE_SPACE;
       tok->u.prop.not   = 1;
       break;
     case 'h':
       if (! IS_SYNTAX_OP2(syn, ONIG_SYN_OP2_ESC_H_XDIGIT)) break;
       tok->type = TK_CHAR_TYPE;
       tok->u.prop.ctype = ONIGENC_CTYPE_XDIGIT;
       tok->u.prop.not   = 0;
       break;
     case 'H':
       if (! IS_SYNTAX_OP2(syn, ONIG_SYN_OP2_ESC_H_XDIGIT)) break;
       tok->type = TK_CHAR_TYPE;
       tok->u.prop.ctype = ONIGENC_CTYPE_XDIGIT;
       tok->u.prop.not   = 1;
       break;
 
     case 'p':
     case 'P':
       if (PEND) break;
 
       c2 = PPEEK;
       if (c2 == '{' &&
           IS_SYNTAX_OP2(syn, ONIG_SYN_OP2_ESC_P_BRACE_CHAR_PROPERTY)) {
         PINC;
         tok->type = TK_CHAR_PROPERTY;
         tok->u.prop.not = c == 'P';
 
         if (!PEND && IS_SYNTAX_OP2(syn, ONIG_SYN_OP2_ESC_P_BRACE_CIRCUMFLEX_NOT)) {
           PFETCH(c2);
           if (c2 == '^') {
             tok->u.prop.not = tok->u.prop.not == 0;
           }
           else
             PUNFETCH;
         }
       }
       break;
 
     case 'o':
       if (PEND) break;
 
       prev = p;
       if (PPEEK_IS('{') && IS_SYNTAX_OP(syn, ONIG_SYN_OP_ESC_O_BRACE_OCTAL)) {
         PINC;
         r = scan_octal_number(&p, end, 0, 11, enc, &code);
         if (r < 0) return r;
         if (!PEND) {
           c2 = PPEEK;
           if (IS_CODE_DIGIT_ASCII(enc, c2))
             return ONIGERR_TOO_LONG_WIDE_CHAR_VALUE;
         }
 
         tok->base_num = 8;
         goto brace_code_point_entry;
       }
       break;
 
     case 'x':
       if (PEND) break;
 
       prev = p;
       if (PPEEK_IS('{') && IS_SYNTAX_OP(syn, ONIG_SYN_OP_ESC_X_BRACE_HEX8)) {
         PINC;
         r = scan_hexadecimal_number(&p, end, 0, 8, enc, &code);
         if (r < 0) return r;
         if (!PEND) {
           c2 = PPEEK;
           if (IS_CODE_XDIGIT_ASCII(enc, c2))
             return ONIGERR_TOO_LONG_WIDE_CHAR_VALUE;
         }
 
         tok->base_num = 16;
       brace_code_point_entry:
         if ((p > prev + enclen(enc, prev))) {
           if (PEND) return ONIGERR_INVALID_CODE_POINT_VALUE;
           if (PPEEK_IS('}')) {
             PINC;
           }
           else {
             int curr_state;
 
-	    curr_state = (state == CS_RANGE) ? CPS_EMPTY : CPS_START;
+            curr_state = (state == CS_RANGE) ? CPS_EMPTY : CPS_START;
             r = check_code_point_sequence_cc(p, end, tok->base_num, enc,
                                              curr_state);
             if (r < 0) return r;
             if (r == 0) return ONIGERR_INVALID_CODE_POINT_VALUE;
             tok->code_point_continue = TRUE;
           }
           tok->type   = TK_CODE_POINT;
           tok->u.code = code;
         }
         else {
           /* can't read nothing or invalid format */
           p = prev;
         }
       }
       else if (IS_SYNTAX_OP(syn, ONIG_SYN_OP_ESC_X_HEX2)) {
         r = scan_hexadecimal_number(&p, end, 0, 2, enc, &code);
         if (r < 0) return r;
         if (p == prev) {  /* can't read nothing. */
           code = 0; /* but, it's not error */
         }
         tok->type = TK_CRUDE_BYTE;
         tok->base_num = 16;
         tok->u.byte   = (UChar )code;
       }
       break;
 
     case 'u':
       if (PEND) break;
 
       prev = p;
       if (IS_SYNTAX_OP2(syn, ONIG_SYN_OP2_ESC_U_HEX4)) {
         r = scan_hexadecimal_number(&p, end, 4, 4, enc, &code);
         if (r < 0) return r;
         if (p == prev) {  /* can't read nothing. */
           code = 0; /* but, it's not error */
         }
         tok->type = TK_CODE_POINT;
         tok->base_num = 16;
         tok->u.code   = code;
       }
       break;
 
     case '0':
     case '1': case '2': case '3': case '4': case '5': case '6': case '7':
       if (IS_SYNTAX_OP(syn, ONIG_SYN_OP_ESC_OCTAL3)) {
         PUNFETCH;
         prev = p;
         r = scan_octal_number(&p, end, 0, 3, enc, &code);
         if (r < 0) return r;
         if (code >= 256) return ONIGERR_TOO_BIG_NUMBER;
         if (p == prev) {  /* can't read nothing. */
           code = 0; /* but, it's not error */
         }
         tok->type = TK_CRUDE_BYTE;
         tok->base_num = 8;
         tok->u.byte   = (UChar )code;
       }
       break;
 
     default:
       PUNFETCH;
       r = fetch_escaped_value(&p, end, env, &c2);
       if (r < 0) return r;
       if (tok->u.code != c2) {
         tok->u.code = c2;
         tok->type   = TK_CODE_POINT;
       }
       break;
     }
   }
   else if (c == '[') {
     if (IS_SYNTAX_OP(syn, ONIG_SYN_OP_POSIX_BRACKET) && (PPEEK_IS(':'))) {
       OnigCodePoint send[] = { (OnigCodePoint )':', (OnigCodePoint )']' };
       tok->backp = p; /* point at '[' is read */
       PINC;
       if (str_exist_check_with_esc(send, 2, p, end,
                                    (OnigCodePoint )']', enc, syn)) {
         tok->type = TK_CC_POSIX_BRACKET_OPEN;
       }
       else {
         PUNFETCH;
         goto cc_in_cc;
       }
     }
     else {
     cc_in_cc:
       if (IS_SYNTAX_OP2(syn, ONIG_SYN_OP2_CCLASS_SET_OP)) {
         tok->type = TK_CC_OPEN_CC;
       }
       else {
         CC_ESC_WARN(env, (UChar* )"[");
       }
     }
   }
   else if (c == '&') {
     if (IS_SYNTAX_OP2(syn, ONIG_SYN_OP2_CCLASS_SET_OP) &&
         !PEND && (PPEEK_IS('&'))) {
       PINC;
       tok->type = TK_CC_AND;
     }
   }
 
  end:
   *src = p;
   return tok->type;
 }
@@ -8288,398 +8303,399 @@ static int
 parse_exp(Node** np, PToken* tok, int term, UChar** src, UChar* end,
           ScanEnv* env, int group_head)
 {
   int r, len, group;
   Node* qn;
   Node** tp;
   unsigned int parse_depth;
 
  retry:
   group = 0;
   *np = NULL;
   if (tok->type == (enum TokenSyms )term)
     goto end_of_token;
 
   parse_depth = env->parse_depth;
 
   switch (tok->type) {
   case TK_ALT:
   case TK_EOT:
   end_of_token:
     *np = node_new_empty();
     CHECK_NULL_RETURN_MEMERR(*np);
     return tok->type;
   break;
 
   case TK_SUBEXP_OPEN:
     r = parse_bag(np, tok, TK_SUBEXP_CLOSE, src, end, env);
     if (r < 0) return r;
     if (r == 1) { /* group */
       if (group_head == 0)
         group = 1;
       else {
         Node* target = *np;
         *np = node_new_group(target);
         if (IS_NULL(*np)) {
           onig_node_free(target);
           return ONIGERR_MEMORY;
         }
         group = 2;
       }
     }
     else if (r == 2) { /* option only */
       if (IS_SYNTAX_BV(env->syntax, ONIG_SYN_ISOLATED_OPTION_CONTINUE_BRANCH)) {
         env->options = BAG_(*np)->o.options;
         r = fetch_token(tok, src, end, env);
         if (r < 0) return r;
         onig_node_free(*np);
         goto retry;
       }
       else {
         Node* target;
         OnigOptionType prev = env->options;
 
         env->options = BAG_(*np)->o.options;
         r = fetch_token(tok, src, end, env);
         if (r < 0) return r;
         r = parse_alts(&target, tok, term, src, end, env, FALSE);
         env->options = prev;
         if (r < 0) {
           onig_node_free(target);
           return r;
         }
         NODE_BODY(*np) = target;
       }
       return tok->type;
     }
     break;
 
   case TK_SUBEXP_CLOSE:
     if (! IS_SYNTAX_BV(env->syntax, ONIG_SYN_ALLOW_UNMATCHED_CLOSE_SUBEXP))
       return ONIGERR_UNMATCHED_CLOSE_PARENTHESIS;
 
     if (tok->escaped) goto tk_crude_byte;
     else goto tk_byte;
     break;
 
   case TK_STRING:
   tk_byte:
     {
       *np = node_new_str_with_options(tok->backp, *src, env->options);
       CHECK_NULL_RETURN_MEMERR(*np);
 
       while (1) {
         r = fetch_token(tok, src, end, env);
         if (r < 0) return r;
         if (r != TK_STRING) break;
 
         r = onig_node_str_cat(*np, tok->backp, *src);
         if (r < 0) return r;
       }
 
     string_end:
       tp = np;
       goto repeat;
     }
     break;
 
   case TK_CRUDE_BYTE:
   tk_crude_byte:
     {
       *np = node_new_str_crude_char(tok->u.byte, env->options);
       CHECK_NULL_RETURN_MEMERR(*np);
       len = 1;
       while (1) {
         if (len >= ONIGENC_MBC_MINLEN(env->enc)) {
           if (len == enclen(env->enc, STR_(*np)->s)) {
             r = fetch_token(tok, src, end, env);
             goto tk_crude_byte_end;
           }
         }
 
         r = fetch_token(tok, src, end, env);
         if (r < 0) return r;
         if (r != TK_CRUDE_BYTE)
           return ONIGERR_TOO_SHORT_MULTI_BYTE_STRING;
 
         r = node_str_cat_char(*np, tok->u.byte);
         if (r < 0) return r;
 
         len++;
       }
 
     tk_crude_byte_end:
       if (! ONIGENC_IS_VALID_MBC_STRING(env->enc, STR_(*np)->s, STR_(*np)->end))
         return ONIGERR_INVALID_WIDE_CHAR_VALUE;
 
       NODE_STRING_CLEAR_CRUDE(*np);
       goto string_end;
     }
     break;
 
   case TK_CODE_POINT:
     {
       UChar buf[ONIGENC_CODE_TO_MBC_MAXLEN];
-      len = ONIGENC_CODE_TO_MBC(env->enc, tok->u.code, buf);
+      len = ONIGENC_CODE_TO_MBCLEN(env->enc, tok->u.code);
       if (len < 0) return len;
+      len = ONIGENC_CODE_TO_MBC(env->enc, tok->u.code, buf);
 #ifdef NUMBERED_CHAR_IS_NOT_CASE_AMBIG
       *np = node_new_str_crude(buf, buf + len, env->options);
 #else
       *np = node_new_str_with_options(buf, buf + len, env->options);
 #endif
       CHECK_NULL_RETURN_MEMERR(*np);
     }
     break;
 
   case TK_QUOTE_OPEN:
     {
       OnigCodePoint end_op[2];
       UChar *qstart, *qend, *nextp;
 
       end_op[0] = (OnigCodePoint )MC_ESC(env->syntax);
       end_op[1] = (OnigCodePoint )'E';
       qstart = *src;
       qend = find_str_position(end_op, 2, qstart, end, &nextp, env->enc);
       if (IS_NULL(qend)) {
         nextp = qend = end;
       }
       *np = node_new_str_with_options(qstart, qend, env->options);
       CHECK_NULL_RETURN_MEMERR(*np);
       *src = nextp;
     }
     break;
 
   case TK_CHAR_TYPE:
     {
       switch (tok->u.prop.ctype) {
       case ONIGENC_CTYPE_WORD:
         *np = node_new_ctype(tok->u.prop.ctype, tok->u.prop.not, env->options);
         CHECK_NULL_RETURN_MEMERR(*np);
         break;
 
       case ONIGENC_CTYPE_SPACE:
       case ONIGENC_CTYPE_DIGIT:
       case ONIGENC_CTYPE_XDIGIT:
         {
           CClassNode* cc;
 
           *np = node_new_cclass();
           CHECK_NULL_RETURN_MEMERR(*np);
           cc = CCLASS_(*np);
           add_ctype_to_cc(cc, tok->u.prop.ctype, FALSE, env);
           if (tok->u.prop.not != 0) NCCLASS_SET_NOT(cc);
         }
         break;
 
       default:
         return ONIGERR_PARSER_BUG;
         break;
       }
     }
     break;
 
   case TK_CHAR_PROPERTY:
     r = parse_char_property(np, tok, src, end, env);
     if (r != 0) return r;
     break;
 
   case TK_OPEN_CC:
     {
       CClassNode* cc;
 
       r = parse_cc(np, tok, src, end, env);
       if (r != 0) return r;
 
       cc = CCLASS_(*np);
       if (OPTON_IGNORECASE(env->options)) {
         IApplyCaseFoldArg iarg;
 
         iarg.env      = env;
         iarg.cc       = cc;
         iarg.alt_root = NULL_NODE;
         iarg.ptail    = &(iarg.alt_root);
 
         r = ONIGENC_APPLY_ALL_CASE_FOLD(env->enc, env->case_fold_flag,
                                         i_apply_case_fold, &iarg);
         if (r != 0) {
           onig_node_free(iarg.alt_root);
           return r;
         }
         if (IS_NOT_NULL(iarg.alt_root)) {
           Node* work = onig_node_new_alt(*np, iarg.alt_root);
           if (IS_NULL(work)) {
             onig_node_free(iarg.alt_root);
             return ONIGERR_MEMORY;
           }
           *np = work;
         }
       }
     }
     break;
 
   case TK_ANYCHAR:
     *np = node_new_anychar(env->options);
     CHECK_NULL_RETURN_MEMERR(*np);
     break;
 
   case TK_ANYCHAR_ANYTIME:
     *np = node_new_anychar(env->options);
     CHECK_NULL_RETURN_MEMERR(*np);
     qn = node_new_quantifier(0, INFINITE_REPEAT, FALSE);
     CHECK_NULL_RETURN_MEMERR(qn);
     NODE_BODY(qn) = *np;
     *np = qn;
     break;
 
   case TK_BACKREF:
     len = tok->u.backref.num;
     *np = node_new_backref(len,
                   (len > 1 ? tok->u.backref.refs : &(tok->u.backref.ref1)),
                   tok->u.backref.by_name,
 #ifdef USE_BACKREF_WITH_LEVEL
                            tok->u.backref.exist_level,
                            tok->u.backref.level,
 #endif
                            env);
     CHECK_NULL_RETURN_MEMERR(*np);
     break;
 
 #ifdef USE_CALL
   case TK_CALL:
     {
       int gnum = tok->u.call.gnum;
 
       *np = node_new_call(tok->u.call.name, tok->u.call.name_end,
                           gnum, tok->u.call.by_number);
       CHECK_NULL_RETURN_MEMERR(*np);
       env->num_call++;
       if (tok->u.call.by_number != 0 && gnum == 0) {
         env->has_call_zero = 1;
       }
     }
     break;
 #endif
 
   case TK_ANCHOR:
     *np = node_new_anchor_with_options(tok->u.anchor, env->options);
     CHECK_NULL_RETURN_MEMERR(*np);
     break;
 
   case TK_REPEAT:
   case TK_INTERVAL:
     if (IS_SYNTAX_BV(env->syntax, ONIG_SYN_CONTEXT_INDEP_REPEAT_OPS)) {
       if (IS_SYNTAX_BV(env->syntax, ONIG_SYN_CONTEXT_INVALID_REPEAT_OPS))
         return ONIGERR_TARGET_OF_REPEAT_OPERATOR_NOT_SPECIFIED;
       else {
         *np = node_new_empty();
         CHECK_NULL_RETURN_MEMERR(*np);
       }
     }
     else {
       goto tk_byte;
     }
     break;
 
   case TK_KEEP:
     r = node_new_keep(np, env);
     if (r < 0) return r;
     break;
 
   case TK_GENERAL_NEWLINE:
     r = node_new_general_newline(np, env);
     if (r < 0) return r;
     break;
 
   case TK_NO_NEWLINE:
     r = node_new_no_newline(np, env);
     if (r < 0) return r;
     break;
 
   case TK_TRUE_ANYCHAR:
     r = node_new_true_anychar(np);
     if (r < 0) return r;
     break;
 
   case TK_TEXT_SEGMENT:
     r = make_text_segment(np, env);
     if (r < 0) return r;
     break;
 
   default:
     return ONIGERR_PARSER_BUG;
     break;
   }
 
   {
     tp = np;
 
   re_entry:
     r = fetch_token(tok, src, end, env);
     if (r < 0) return r;
 
   repeat:
     if (r == TK_REPEAT || r == TK_INTERVAL) {
       Node* target;
 
       if (is_invalid_quantifier_target(*tp))
         return ONIGERR_TARGET_OF_REPEAT_OPERATOR_INVALID;
 
       INC_PARSE_DEPTH(parse_depth);
 
       qn = node_new_quantifier(tok->u.repeat.lower, tok->u.repeat.upper,
                                r == TK_INTERVAL);
       CHECK_NULL_RETURN_MEMERR(qn);
       QUANT_(qn)->greedy = tok->u.repeat.greedy;
       if (group == 2) {
         target = node_drop_group(*tp);
         *tp = NULL_NODE;
       }
       else {
         target = *tp;
       }
       r = assign_quantifier_body(qn, target, group, env);
       if (r < 0) {
         onig_node_free(qn);
         *tp = NULL_NODE;
         return r;
       }
 
       if (tok->u.repeat.possessive != 0) {
         Node* en;
         en = node_new_bag(BAG_STOP_BACKTRACK);
         if (IS_NULL(en)) {
           onig_node_free(qn);
           return ONIGERR_MEMORY;
         }
         NODE_BODY(en) = qn;
         qn = en;
       }
 
       if (r == 0) {
         *tp = qn;
       }
       else if (r == 1) { /* x{1,1} ==> x */
         onig_node_free(qn);
         *tp = target;
       }
       else if (r == 2) { /* split case: /abc+/ */
         Node *tmp;
 
         *tp = node_new_list(*tp, NULL);
         if (IS_NULL(*tp)) {
           onig_node_free(qn);
           return ONIGERR_MEMORY;
         }
         tmp = NODE_CDR(*tp) = node_new_list(qn, NULL);
         if (IS_NULL(tmp)) {
           onig_node_free(qn);
           return ONIGERR_MEMORY;
         }
         tp = &(NODE_CAR(tmp));
       }
       group = 0;
       goto re_entry;
     }
   }
 
   return r;
 }
diff --git a/src/sjis.c b/src/sjis.c
index 1fd92d9..10afd9d 100644
--- a/src/sjis.c
+++ b/src/sjis.c
@@ -1,30 +1,30 @@
 /**********************************************************************
   sjis.c -  Oniguruma (regular expression library)
 **********************************************************************/
 /*-
- * Copyright (c) 2002-2019  K.Kosako
+ * Copyright (c) 2002-2020  K.Kosako
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
  *    notice, this list of conditions and the following disclaimer in the
  *    documentation and/or other materials provided with the distribution.
  *
  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  */
 
 #include "regint.h"
@@ -113,13 +113,15 @@ static int
 code_to_mbclen(OnigCodePoint code)
 {
   if (code < 256) {
-    return EncLen_SJIS[(int )code] == 1;
+    if (EncLen_SJIS[(int )code] == 1)
+      return 1;
   }
-  else if (code <= 0xffff) {
-    return 2;
+  else if (code < 0x10000) {
+    if (EncLen_SJIS[(int )(code >>  8) & 0xff] == 2)
+      return 2;
   }
-  else
-    return ONIGERR_INVALID_CODE_POINT_VALUE;
+
+  return ONIGERR_INVALID_CODE_POINT_VALUE;
 }
 
 static OnigCodePoint
