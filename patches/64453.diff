commit 81dd97bd5612846411b581bed5b8e02b624f1160
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Mon Nov 27 01:22:36 2023 +0100

    Fix offset check in bmp decoder.
    
    This fixes OSS-fuzz issue 64453.

diff --git a/source/fitz/load-bmp.c b/source/fitz/load-bmp.c
index 5b6a79bc2..402fc0d31 100644
--- a/source/fitz/load-bmp.c
+++ b/source/fitz/load-bmp.c
@@ -776,54 +776,54 @@ static fz_colorspace *
 bmp_read_color_profile(fz_context *ctx, struct info *info, const unsigned char *begin, const unsigned char *end)
 {
 	if (info->colorspacetype == 0)
 	{
 		float matrix[9] = { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
 		float wp[3] = { 0.95047f, 1.0f, 1.08883f }; /* D65 white point */
 		float bp[3] = { 0, 0, 0 };
 		float gamma[3] = { 1, 1, 1 };
 		int i;
 
 		for (i = 0; i < 3; i++)
 			gamma[i] = (float) info->gamma[i] / (float) (1 << 16);
 
 		for (i = 0; i < 9; i++)
 			matrix[i] = (float) info->endpoints[i] / (float) (1 << 30);
 
 		return fz_new_cal_rgb_colorspace(ctx, wp, bp, gamma, matrix);
 	}
 	else if (info->colorspacetype == 0x4c494e4b)
 	{
 		fz_warn(ctx, "ignoring linked color profile in bmp image");
 		return NULL;
 	}
 	else if (info->colorspacetype == 0x57696e20)
 	{
 		fz_warn(ctx, "ignoring windows color profile in bmp image");
 		return NULL;
 	}
 	else if (info->colorspacetype == 0x4d424544)
 	{
 		fz_buffer *profile;
 		fz_colorspace *cs;
 
-		if ((uint32_t)(end - begin) < info->profileoffset + info->profilesize)
+		if ((uint32_t)(end - begin) < info->profilesize)
 		{
 			fz_warn(ctx, "ignoring truncated color profile in bmp image");
 			return NULL;
 		}
 
 		profile = fz_new_buffer_from_copied_data(ctx, begin + info->profileoffset, info->profilesize);
 
 		fz_try(ctx)
 			cs = fz_new_icc_colorspace(ctx, FZ_COLORSPACE_RGB, 0, "BMPRGB", profile);
 		fz_always(ctx)
 			fz_drop_buffer(ctx, profile);
 		fz_catch(ctx)
 			fz_rethrow(ctx);
 
 		return cs;
 	}
 
 	fz_warn(ctx, "ignoring color profile with unknown type in bmp image");
 	return NULL;
 }
