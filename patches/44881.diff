commit ee5b175b8c223b4db2d21a41c502b782ad0febad
Merge: bf93f24ad8 5984b92726
Author: Luca Boccassi <bluca@debian.org>
Date:   Sun Apr 17 21:24:38 2022 +0200

    Merge pull request #23100 from yuwata/network-fix-tunnel-address-parser
    
    network: fix tunnel address parser

diff --git a/src/network/netdev/l2tp-tunnel.c b/src/network/netdev/l2tp-tunnel.c
index 9724e7760e..05af5dbf89 100644
--- a/src/network/netdev/l2tp-tunnel.c
+++ b/src/network/netdev/l2tp-tunnel.c
@@ -473,83 +473,95 @@ static int netdev_l2tp_is_ready_to_create(NetDev *netdev, Link *link) {
 int config_parse_l2tp_tunnel_local_address(
                 const char *unit,
                 const char *filename,
                 unsigned line,
                 const char *section,
                 unsigned section_line,
                 const char *lvalue,
                 int ltype,
                 const char *rvalue,
                 void *data,
                 void *userdata) {
 
         _cleanup_free_ char *addr_or_type = NULL, *ifname = NULL;
         L2tpLocalAddressType type;
         L2tpTunnel *t = userdata;
         const char *p = rvalue;
-        int r;
+        union in_addr_union a;
+        int r, f;
 
         assert(filename);
         assert(lvalue);
         assert(rvalue);
         assert(t);
 
         if (isempty(rvalue)) {
                 t->local_ifname = mfree(t->local_ifname);
                 t->local_address_type = NETDEV_L2TP_LOCAL_ADDRESS_AUTO;
                 t->local = IN_ADDR_NULL;
 
                 if (!in_addr_is_set(t->family, &t->remote))
                         /* If Remote= is not specified yet, then also clear family. */
                         t->family = AF_UNSPEC;
 
                 return 0;
         }
 
         r = extract_first_word(&p, &addr_or_type, "@", 0);
         if (r < 0)
                 return log_oom();
         if (r == 0) {
                 log_syntax(unit, LOG_WARNING, filename, line, 0,
                            "Invalid L2TP Tunnel address specified in %s=, ignoring assignment: %s", lvalue, rvalue);
                 return 0;
         }
 
         if (!isempty(p)) {
                 if (!ifname_valid_full(p, IFNAME_VALID_ALTERNATIVE)) {
                         log_syntax(unit, LOG_WARNING, filename, line, 0,
                                    "Invalid interface name specified in %s=, ignoring assignment: %s", lvalue, rvalue);
                         return 0;
                 }
 
                 ifname = strdup(p);
                 if (!ifname)
                         return log_oom();
         }
 
         type = l2tp_local_address_type_from_string(rvalue);
         if (type >= 0) {
                 free_and_replace(t->local_ifname, ifname);
                 t->local_address_type = type;
                 t->local = IN_ADDR_NULL;
 
                 if (!in_addr_is_set(t->family, &t->remote))
                         /* If Remote= is not specified yet, then also clear family. */
                         t->family = AF_UNSPEC;
 
                 return 0;
         }
 
-        if (t->family == AF_UNSPEC)
-                r = in_addr_from_string_auto(rvalue, &t->family, &t->local);
-        else
-                r = in_addr_from_string(t->family, rvalue, &t->local);
+        r = in_addr_from_string_auto(rvalue, &f, &a);
         if (r < 0) {
                 log_syntax(unit, LOG_WARNING, filename, line, r,
-                           "Invalid L2TP Tunnel address specified in %s=, ignoring assignment: %s", lvalue, rvalue);
+                           "Invalid L2TP Tunnel local address specified, ignoring assignment: %s", rvalue);
+                return 0;
+        }
+
+        if (in_addr_is_null(f, &a)) {
+                log_syntax(unit, LOG_WARNING, filename, line, r,
+                           "L2TP Tunnel local address cannot be null, ignoring assignment: %s", rvalue);
+                return 0;
+        }
+
+        if (t->family != AF_UNSPEC && t->family != f) {
+                log_syntax(unit, LOG_WARNING, filename, line, 0,
+                           "Address family does not match the previous assignment, ignoring assignment: %s", rvalue);
                 return 0;
         }
 
+        t->family = f;
+        t->local = a;
         free_and_replace(t->local_ifname, ifname);
         t->local_address_type = _NETDEV_L2TP_LOCAL_ADDRESS_INVALID;
         return 0;
 }
@@ -557,43 +569,55 @@ int config_parse_l2tp_tunnel_local_address(
 int config_parse_l2tp_tunnel_remote_address(
                 const char *unit,
                 const char *filename,
                 unsigned line,
                 const char *section,
                 unsigned section_line,
                 const char *lvalue,
                 int ltype,
                 const char *rvalue,
                 void *data,
                 void *userdata) {
 
         L2tpTunnel *t = userdata;
-        int r;
+        union in_addr_union a;
+        int r, f;
 
         assert(filename);
         assert(lvalue);
         assert(rvalue);
         assert(t);
 
         if (isempty(rvalue)) {
                 t->remote = IN_ADDR_NULL;
 
                 if (!in_addr_is_set(t->family, &t->local))
                         /* If Local= is not specified yet, then also clear family. */
                         t->family = AF_UNSPEC;
 
                 return 0;
         }
 
-        if (t->family == AF_UNSPEC)
-                r = in_addr_from_string_auto(rvalue, &t->family, &t->remote);
-        else
-                r = in_addr_from_string(t->family, rvalue, &t->remote);
+        r = in_addr_from_string_auto(rvalue, &f, &a);
         if (r < 0) {
                 log_syntax(unit, LOG_WARNING, filename, line, r,
-                           "Invalid L2TP Tunnel address specified in %s=, ignoring assignment: %s", lvalue, rvalue);
+                           "Invalid L2TP Tunnel remote address specified, ignoring assignment: %s", rvalue);
+                return 0;
+        }
+
+        if (in_addr_is_null(f, &a)) {
+                log_syntax(unit, LOG_WARNING, filename, line, r,
+                           "L2TP Tunnel remote address cannot be null, ignoring assignment: %s", rvalue);
+                return 0;
+        }
+
+        if (t->family != AF_UNSPEC && t->family != f) {
+                log_syntax(unit, LOG_WARNING, filename, line, 0,
+                           "Address family does not match the previous assignment, ignoring assignment: %s", rvalue);
                 return 0;
         }
 
+        t->family = f;
+        t->remote = a;
         return 0;
 }
 
diff --git a/src/network/netdev/tunnel.c b/src/network/netdev/tunnel.c
index 3ba4484b6b..747acb1e80 100644
--- a/src/network/netdev/tunnel.c
+++ b/src/network/netdev/tunnel.c
@@ -1,24 +1,25 @@
 /* SPDX-License-Identifier: LGPL-2.1-or-later */
 
 #include <netinet/in.h>
 #include <linux/fou.h>
 #include <linux/if_arp.h>
 #include <linux/if_tunnel.h>
 #include <linux/ip.h>
 #include <linux/ip6_tunnel.h>
 
+#include "af-list.h"
 #include "conf-parser.h"
 #include "hexdecoct.h"
 #include "missing_network.h"
 #include "netlink-util.h"
 #include "networkd-manager.h"
 #include "parse-util.h"
 #include "siphash24.h"
 #include "string-table.h"
 #include "string-util.h"
 #include "tunnel.h"
 #include "util.h"
 
 #define DEFAULT_IPV6_TTL   64
 #define IP6_FLOWINFO_FLOWLABEL  htobe32(0x000FFFFF)
 #define IP6_TNL_F_ALLOW_LOCAL_REMOTE 0x40
@@ -737,112 +738,130 @@ static int netdev_tunnel_verify(NetDev *netdev, const char *filename) {
         return 0;
 }
 
+static int unset_local(Tunnel *t) {
+        assert(t);
+
+        /* Unset the previous assignment. */
+        t->local = IN_ADDR_NULL;
+        t->local_type = _NETDEV_LOCAL_ADDRESS_TYPE_INVALID;
+
+        /* If the remote address is not specified, also clear the address family. */
+        if (!in_addr_is_set(t->family, &t->remote))
+                t->family = AF_UNSPEC;
+
+        return 0;
+}
+
 int config_parse_tunnel_local_address(
                 const char *unit,
                 const char *filename,
                 unsigned line,
                 const char *section,
                 unsigned section_line,
                 const char *lvalue,
                 int ltype,
                 const char *rvalue,
                 void *data,
                 void *userdata) {
 
         union in_addr_union buffer = IN_ADDR_NULL;
         NetDevLocalAddressType type;
         Tunnel *t = userdata;
         int r, f;
 
         assert(filename);
         assert(lvalue);
         assert(rvalue);
         assert(userdata);
 
-        if (isempty(rvalue) || streq(rvalue, "any")) {
-                /* Unset the previous assignment. */
-                t->local = IN_ADDR_NULL;
-                t->local_type = _NETDEV_LOCAL_ADDRESS_TYPE_INVALID;
-
-                /* If the remote address is not specified, also clear the address family. */
-                if (!in_addr_is_set(t->family, &t->remote))
-                        t->family = AF_UNSPEC;
-                return 0;
-        }
+        if (isempty(rvalue) || streq(rvalue, "any"))
+                return unset_local(t);
 
         type = netdev_local_address_type_from_string(rvalue);
         if (IN_SET(type, NETDEV_LOCAL_ADDRESS_IPV4LL, NETDEV_LOCAL_ADDRESS_DHCP4))
                 f = AF_INET;
         else if (IN_SET(type, NETDEV_LOCAL_ADDRESS_IPV6LL, NETDEV_LOCAL_ADDRESS_DHCP6, NETDEV_LOCAL_ADDRESS_SLAAC))
                 f = AF_INET6;
         else {
                 type = _NETDEV_LOCAL_ADDRESS_TYPE_INVALID;
                 r = in_addr_from_string_auto(rvalue, &f, &buffer);
                 if (r < 0) {
                         log_syntax(unit, LOG_WARNING, filename, line, r,
                                    "Tunnel address \"%s\" invalid, ignoring assignment: %m", rvalue);
                         return 0;
                 }
+
+                if (in_addr_is_null(f, &buffer))
+                        return unset_local(t);
         }
 
         if (t->family != AF_UNSPEC && t->family != f) {
                 log_syntax(unit, LOG_WARNING, filename, line, 0,
                            "Address family does not match the previous assignment, ignoring assignment: %s", rvalue);
                 return 0;
         }
 
         t->family = f;
         t->local = buffer;
         t->local_type = type;
         return 0;
 }
 
+static int unset_remote(Tunnel *t) {
+        assert(t);
+
+        /* Unset the previous assignment. */
+        t->remote = IN_ADDR_NULL;
+
+        /* If the local address is not specified, also clear the address family. */
+        if (t->local_type == _NETDEV_LOCAL_ADDRESS_TYPE_INVALID &&
+            !in_addr_is_set(t->family, &t->local))
+                t->family = AF_UNSPEC;
+
+        return 0;
+}
+
 int config_parse_tunnel_remote_address(
                 const char *unit,
                 const char *filename,
                 unsigned line,
                 const char *section,
                 unsigned section_line,
                 const char *lvalue,
                 int ltype,
                 const char *rvalue,
                 void *data,
                 void *userdata) {
 
         union in_addr_union buffer;
         Tunnel *t = userdata;
         int r, f;
 
         assert(filename);
         assert(lvalue);
         assert(rvalue);
         assert(userdata);
 
-        if (isempty(rvalue) || streq(rvalue, "any")) {
-                /* Unset the previous assignment. */
-                t->remote = IN_ADDR_NULL;
-
-                /* If the local address is not specified, also clear the address family. */
-                if (t->local_type == _NETDEV_LOCAL_ADDRESS_TYPE_INVALID &&
-                    !in_addr_is_set(t->family, &t->local))
-                        t->family = AF_UNSPEC;
-                return 0;
-        }
+        if (isempty(rvalue) || streq(rvalue, "any"))
+                return unset_remote(t);
 
         r = in_addr_from_string_auto(rvalue, &f, &buffer);
         if (r < 0) {
                 log_syntax(unit, LOG_WARNING, filename, line, r,
                            "Tunnel address \"%s\" invalid, ignoring assignment: %m", rvalue);
                 return 0;
         }
 
+        if (in_addr_is_null(f, &buffer))
+                return unset_remote(t);
+
         if (t->family != AF_UNSPEC && t->family != f) {
                 log_syntax(unit, LOG_WARNING, filename, line, 0,
                            "Address family does not match the previous assignment, ignoring assignment: %s", rvalue);
                 return 0;
         }
 
         t->family = f;
         t->remote = buffer;
         return 0;
 }
diff --git a/test/fuzz/fuzz-netdev-parser/clusterfuzz-testcase-minimized-fuzz-netdev-parser-4697395387039744 b/test/fuzz/fuzz-netdev-parser/clusterfuzz-testcase-minimized-fuzz-netdev-parser-4697395387039744
new file mode 100644
index 0000000000..d2de7fb187
Binary files /dev/null and b/test/fuzz/fuzz-netdev-parser/clusterfuzz-testcase-minimized-fuzz-netdev-parser-4697395387039744 differ
