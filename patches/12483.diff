commit 2ee498c6749a42e71707a054683e43a84cf10d82
Author: Ethan Nicholas <ethannicholas@google.com>
Date:   Fri Jan 11 15:32:05 2019 -0500

    fixed uninitialized value in Perlin noise shader
    
    Bug: skia:
    Change-Id: Ie1670dd574b19faa396c8db1a58cfe922925ae5a
    Reviewed-on: https://skia-review.googlesource.com/c/183386
    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>
    Reviewed-by: Brian Salomon <bsalomon@google.com>
    Commit-Queue: Mike Klein <mtklein@google.com>

diff --git a/src/shaders/SkPerlinNoiseShader.cpp b/src/shaders/SkPerlinNoiseShader.cpp
index 6e90011a60..5f4f4521bc 100644
--- a/src/shaders/SkPerlinNoiseShader.cpp
+++ b/src/shaders/SkPerlinNoiseShader.cpp
@@ -68,300 +68,302 @@ class SkPerlinNoiseShaderImpl : public SkShaderBase {
 public:
     struct StitchData {
         StitchData()
           : fWidth(0)
           , fWrapX(0)
           , fHeight(0)
           , fWrapY(0)
         {}
 
         StitchData(SkScalar w, SkScalar h)
           : fWidth(SkTMin(SkScalarRoundToInt(w), SK_MaxS32 - kPerlinNoise))
           , fWrapX(kPerlinNoise + fWidth)
           , fHeight(SkTMin(SkScalarRoundToInt(h), SK_MaxS32 - kPerlinNoise))
           , fWrapY(kPerlinNoise + fHeight) {}
 
         bool operator==(const StitchData& other) const {
             return fWidth == other.fWidth &&
                    fWrapX == other.fWrapX &&
                    fHeight == other.fHeight &&
                    fWrapY == other.fWrapY;
         }
 
         int fWidth; // How much to subtract to wrap for stitching.
         int fWrapX; // Minimum value to wrap.
         int fHeight;
         int fWrapY;
     };
 
     struct PaintingData {
         PaintingData(const SkISize& tileSize, SkScalar seed,
                      SkScalar baseFrequencyX, SkScalar baseFrequencyY,
                      const SkMatrix& matrix)
         {
             SkVector tileVec;
             matrix.mapVector(SkIntToScalar(tileSize.fWidth), SkIntToScalar(tileSize.fHeight),
                              &tileVec);
 
             SkSize scale;
-            matrix.decomposeScale(&scale, nullptr);
+            if (!matrix.decomposeScale(&scale, nullptr)) {
+                scale.set(SK_ScalarNearlyZero, SK_ScalarNearlyZero);
+            }
             fBaseFrequency.set(baseFrequencyX * SkScalarInvert(scale.width()),
                                baseFrequencyY * SkScalarInvert(scale.height()));
             fTileSize.set(SkScalarRoundToInt(tileVec.fX), SkScalarRoundToInt(tileVec.fY));
             this->init(seed);
             if (!fTileSize.isEmpty()) {
                 this->stitch();
             }
 
     #if SK_SUPPORT_GPU
             SkImageInfo info = SkImageInfo::MakeA8(kBlockSize, 1);
             SkPixmap permutationsPixmap(info, fLatticeSelector, info.minRowBytes());
             fPermutationsImage = SkImage::MakeFromRaster(permutationsPixmap, nullptr, nullptr);
 
             info = SkImageInfo::MakeN32Premul(kBlockSize, 4);
             SkPixmap noisePixmap(info, fNoise[0][0], info.minRowBytes());
             fNoiseImage = SkImage::MakeFromRaster(noisePixmap, nullptr, nullptr);
 
             info = SkImageInfo::MakeA8(256, 1);
             SkPixmap impPermutationsPixmap(info, improved_noise_permutations, info.minRowBytes());
             fImprovedPermutationsImage = SkImage::MakeFromRaster(impPermutationsPixmap, nullptr,
                                                                  nullptr);
 
             static uint8_t gradients[] = { 2, 2, 1, 0,
                                            0, 2, 1, 0,
                                            2, 0, 1, 0,
                                            0, 0, 1, 0,
                                            2, 1, 2, 0,
                                            0, 1, 2, 0,
                                            2, 1, 0, 0,
                                            0, 1, 0, 0,
                                            1, 2, 2, 0,
                                            1, 0, 2, 0,
                                            1, 2, 0, 0,
                                            1, 0, 0, 0,
                                            2, 2, 1, 0,
                                            1, 0, 2, 0,
                                            0, 2, 1, 0,
                                            1, 0, 0, 0 };
             info = SkImageInfo::MakeN32Premul(16, 1);
             SkPixmap gradPixmap(info, gradients, info.minRowBytes());
             fGradientImage = SkImage::MakeFromRaster(gradPixmap, nullptr, nullptr);
     #endif
         }
 
     #if SK_SUPPORT_GPU
         PaintingData(const PaintingData& that)
                 : fSeed(that.fSeed)
                 , fTileSize(that.fTileSize)
                 , fBaseFrequency(that.fBaseFrequency)
                 , fStitchDataInit(that.fStitchDataInit)
                 , fPermutationsImage(that.fPermutationsImage)
                 , fNoiseImage(that.fNoiseImage)
                 , fImprovedPermutationsImage(that.fImprovedPermutationsImage)
                 , fGradientImage(that.fGradientImage) {
             memcpy(fLatticeSelector, that.fLatticeSelector, sizeof(fLatticeSelector));
             memcpy(fNoise, that.fNoise, sizeof(fNoise));
             memcpy(fGradient, that.fGradient, sizeof(fGradient));
         }
     #endif
 
         int         fSeed;
         uint8_t     fLatticeSelector[kBlockSize];
         uint16_t    fNoise[4][kBlockSize][2];
         SkPoint     fGradient[4][kBlockSize];
         SkISize     fTileSize;
         SkVector    fBaseFrequency;
         StitchData  fStitchDataInit;
 
     private:
 
     #if SK_SUPPORT_GPU
         sk_sp<SkImage> fPermutationsImage;
         sk_sp<SkImage> fNoiseImage;
         sk_sp<SkImage> fImprovedPermutationsImage;
         sk_sp<SkImage> fGradientImage;
     #endif
 
         inline int random()  {
             static const int gRandAmplitude = 16807; // 7**5; primitive root of m
             static const int gRandQ = 127773; // m / a
             static const int gRandR = 2836; // m % a
 
             int result = gRandAmplitude * (fSeed % gRandQ) - gRandR * (fSeed / gRandQ);
             if (result <= 0)
                 result += kRandMaximum;
             fSeed = result;
             return result;
         }
 
         // Only called once. Could be part of the constructor.
         void init(SkScalar seed)
         {
             static const SkScalar gInvBlockSizef = SkScalarInvert(SkIntToScalar(kBlockSize));
 
             // According to the SVG spec, we must truncate (not round) the seed value.
             fSeed = SkScalarTruncToInt(seed);
             // The seed value clamp to the range [1, kRandMaximum - 1].
             if (fSeed <= 0) {
                 fSeed = -(fSeed % (kRandMaximum - 1)) + 1;
             }
             if (fSeed > kRandMaximum - 1) {
                 fSeed = kRandMaximum - 1;
             }
             for (int channel = 0; channel < 4; ++channel) {
                 for (int i = 0; i < kBlockSize; ++i) {
                     fLatticeSelector[i] = i;
                     fNoise[channel][i][0] = (random() % (2 * kBlockSize));
                     fNoise[channel][i][1] = (random() % (2 * kBlockSize));
                 }
             }
             for (int i = kBlockSize - 1; i > 0; --i) {
                 int k = fLatticeSelector[i];
                 int j = random() % kBlockSize;
                 SkASSERT(j >= 0);
                 SkASSERT(j < kBlockSize);
                 fLatticeSelector[i] = fLatticeSelector[j];
                 fLatticeSelector[j] = k;
             }
 
             // Perform the permutations now
             {
                 // Copy noise data
                 uint16_t noise[4][kBlockSize][2];
                 for (int i = 0; i < kBlockSize; ++i) {
                     for (int channel = 0; channel < 4; ++channel) {
                         for (int j = 0; j < 2; ++j) {
                             noise[channel][i][j] = fNoise[channel][i][j];
                         }
                     }
                 }
                 // Do permutations on noise data
                 for (int i = 0; i < kBlockSize; ++i) {
                     for (int channel = 0; channel < 4; ++channel) {
                         for (int j = 0; j < 2; ++j) {
                             fNoise[channel][i][j] = noise[channel][fLatticeSelector[i]][j];
                         }
                     }
                 }
             }
 
             // Half of the largest possible value for 16 bit unsigned int
             static const SkScalar gHalfMax16bits = 32767.5f;
 
             // Compute gradients from permutated noise data
             for (int channel = 0; channel < 4; ++channel) {
                 for (int i = 0; i < kBlockSize; ++i) {
                     fGradient[channel][i] = SkPoint::Make(
                         (fNoise[channel][i][0] - kBlockSize) * gInvBlockSizef,
                         (fNoise[channel][i][1] - kBlockSize) * gInvBlockSizef);
                     fGradient[channel][i].normalize();
                     // Put the normalized gradient back into the noise data
                     fNoise[channel][i][0] = SkScalarRoundToInt(
                                                    (fGradient[channel][i].fX + 1) * gHalfMax16bits);
                     fNoise[channel][i][1] = SkScalarRoundToInt(
                                                    (fGradient[channel][i].fY + 1) * gHalfMax16bits);
                 }
             }
         }
 
         // Only called once. Could be part of the constructor.
         void stitch() {
             SkScalar tileWidth  = SkIntToScalar(fTileSize.width());
             SkScalar tileHeight = SkIntToScalar(fTileSize.height());
             SkASSERT(tileWidth > 0 && tileHeight > 0);
             // When stitching tiled turbulence, the frequencies must be adjusted
             // so that the tile borders will be continuous.
             if (fBaseFrequency.fX) {
                 SkScalar lowFrequencx =
                     SkScalarFloorToScalar(tileWidth * fBaseFrequency.fX) / tileWidth;
                 SkScalar highFrequencx =
                     SkScalarCeilToScalar(tileWidth * fBaseFrequency.fX) / tileWidth;
                 // BaseFrequency should be non-negative according to the standard.
                 // lowFrequencx can be 0 if fBaseFrequency.fX is very small.
                 if (sk_ieee_float_divide(fBaseFrequency.fX, lowFrequencx) < highFrequencx / fBaseFrequency.fX) {
                     fBaseFrequency.fX = lowFrequencx;
                 } else {
                     fBaseFrequency.fX = highFrequencx;
                 }
             }
             if (fBaseFrequency.fY) {
                 SkScalar lowFrequency =
                     SkScalarFloorToScalar(tileHeight * fBaseFrequency.fY) / tileHeight;
                 SkScalar highFrequency =
                     SkScalarCeilToScalar(tileHeight * fBaseFrequency.fY) / tileHeight;
                 // lowFrequency can be 0 if fBaseFrequency.fY is very small.
                 if (sk_ieee_float_divide(fBaseFrequency.fY, lowFrequency) < highFrequency / fBaseFrequency.fY) {
                     fBaseFrequency.fY = lowFrequency;
                 } else {
                     fBaseFrequency.fY = highFrequency;
                 }
             }
             // Set up TurbulenceInitial stitch values.
             fStitchDataInit = StitchData(tileWidth * fBaseFrequency.fX,
                                          tileHeight * fBaseFrequency.fY);
         }
 
     public:
 
 #if SK_SUPPORT_GPU
         const sk_sp<SkImage> getPermutationsImage() const { return fPermutationsImage; }
 
         const sk_sp<SkImage> getNoiseImage() const { return fNoiseImage; }
 
         const sk_sp<SkImage> getImprovedPermutationsImage() const {
             return fImprovedPermutationsImage;
         }
 
         const sk_sp<SkImage> getGradientImage() const { return fGradientImage; }
 #endif
     };
 
     /**
      *  About the noise types : the difference between the first 2 is just minor tweaks to the
      *  algorithm, they're not 2 entirely different noises. The output looks different, but once the
      *  noise is generated in the [1, -1] range, the output is brought back in the [0, 1] range by
      *  doing :
      *  kFractalNoise_Type : noise * 0.5 + 0.5
      *  kTurbulence_Type   : abs(noise)
      *  Very little differences between the 2 types, although you can tell the difference visually.
      *  "Improved" is based on the Improved Perlin Noise algorithm described at
      *  http://mrl.nyu.edu/~perlin/noise/. It is quite distinct from the other two, and the noise is
      *  a 2D slice of a 3D noise texture. Minor changes to the Z coordinate will result in minor
      *  changes to the noise, making it suitable for animated noise.
      */
     enum Type {
         kFractalNoise_Type,
         kTurbulence_Type,
         kImprovedNoise_Type,
         kLast_Type = kImprovedNoise_Type
     };
 
     static const int kMaxOctaves = 255; // numOctaves must be <= 0 and <= kMaxOctaves
 
     SkPerlinNoiseShaderImpl(SkPerlinNoiseShaderImpl::Type type, SkScalar baseFrequencyX,
                       SkScalar baseFrequencyY, int numOctaves, SkScalar seed,
                       const SkISize* tileSize);
 
     class PerlinNoiseShaderContext : public Context {
     public:
         PerlinNoiseShaderContext(const SkPerlinNoiseShaderImpl& shader, const ContextRec&);
 
         void shadeSpan(int x, int y, SkPMColor[], int count) override;
 
     private:
         SkPMColor shade(const SkPoint& point, StitchData& stitchData) const;
         SkScalar calculateTurbulenceValueForPoint(
                                                   int channel,
                                                   StitchData& stitchData, const SkPoint& point) const;
         SkScalar calculateImprovedNoiseValueForPoint(int channel, const SkPoint& point) const;
         SkScalar noise2D(int channel,
                          const StitchData& stitchData, const SkPoint& noiseVector) const;
 
         SkMatrix     fMatrix;
         PaintingData fPaintingData;
 
         typedef Context INHERITED;
     };
 
 #if SK_SUPPORT_GPU
     std::unique_ptr<GrFragmentProcessor> asFragmentProcessor(const GrFPArgs&) const override;
 #endif
