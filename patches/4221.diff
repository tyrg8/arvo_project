commit 6e9f2d3c6ce6c4eae32b2d9c228a76e262edd52d
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Wed Nov 15 21:20:46 2017 +0300

    Decompressors should have decompress() function, not decode()

diff --git a/fuzz/librawspeed/decompressors/SonyArw2Decompressor.cpp b/fuzz/librawspeed/decompressors/SonyArw2Decompressor.cpp
index 5bfaa14c..afe32998 100644
--- a/fuzz/librawspeed/decompressors/SonyArw2Decompressor.cpp
+++ b/fuzz/librawspeed/decompressors/SonyArw2Decompressor.cpp
@@ -39,29 +39,29 @@ extern "C" int __attribute__((const)) rawspeed_get_number_of_processor_cores() {
 extern "C" int LLVMFuzzerTestOneInput(const uint8_t* Data, size_t Size) {
   assert(Data);
 
   try {
     const rawspeed::Buffer b(Data, Size);
     const rawspeed::DataBuffer db(b, rawspeed::Endianness::little);
     rawspeed::ByteStream bs(db);
 
     const rawspeed::uint32 width = bs.getU32();
     const rawspeed::uint32 height = bs.getU32();
     const auto format = rawspeed::RawImageType(bs.getU32());
     const rawspeed::uint32 cpp = bs.getU32();
 
     rawspeed::RawImage mRaw(rawspeed::RawImage::create(
         rawspeed::iPoint2D(width, height), format, cpp));
 
     rawspeed::SonyArw2Decompressor a(mRaw, bs.getStream(bs.getRemainSize()));
 
     mRaw->createData();
 
-    a.decode();
+    a.decompress();
 
     mRaw->checkMemIsInitialized();
   } catch (rawspeed::RawspeedException&) {
     // Exceptions are good, crashes are bad.
   }
 
   return 0;
 }
diff --git a/src/librawspeed/decoders/ArwDecoder.cpp b/src/librawspeed/decoders/ArwDecoder.cpp
index 9eec4831..2f25ac8b 100644
--- a/src/librawspeed/decoders/ArwDecoder.cpp
+++ b/src/librawspeed/decoders/ArwDecoder.cpp
@@ -262,21 +262,21 @@ void ArwDecoder::DecodeUncompressed(const TiffIFD* raw) {
 void ArwDecoder::DecodeARW2(const ByteStream& input, uint32 w, uint32 h,
                             uint32 bpp) {
 
   if (bpp == 8) {
     SonyArw2Decompressor a2(mRaw, input);
     mRaw->createData();
-    a2.decode();
+    a2.decompress();
     return;
   } // End bpp = 8
 
   if (bpp == 12) {
     mRaw->createData();
     UncompressedDecompressor u(input, mRaw);
     u.decode12BitRaw<Endianness::little>(w, h);
 
     // Shift scales, since black and white are the same as compressed precision
     mShiftDownScale = 2;
     return;
   }
   ThrowRDE("Unsupported bit depth");
 }
diff --git a/src/librawspeed/decoders/DngDecoder.cpp b/src/librawspeed/decoders/DngDecoder.cpp
index 82eba716..13625854 100644
--- a/src/librawspeed/decoders/DngDecoder.cpp
+++ b/src/librawspeed/decoders/DngDecoder.cpp
@@ -200,122 +200,122 @@ void DngDecoder::parseCFA(const TiffIFD* raw) {
 void DngDecoder::decodeData(const TiffIFD* raw, uint32 sample_format) {
   if (compression == 8 && sample_format != 3) {
     ThrowRDE("Only float format is supported for "
              "deflate-compressed data.");
   } else if ((compression == 7 || compression == 0x884c) &&
              sample_format != 1) {
     ThrowRDE("Only 16 bit unsigned data supported for "
              "JPEG-compressed data.");
   }
 
   uint32 predictor = -1;
   if (raw->hasEntry(PREDICTOR))
     predictor = raw->getEntry(PREDICTOR)->getU32();
 
   AbstractDngDecompressor slices(mRaw, compression, mFixLjpeg, bps, predictor);
 
   if (raw->hasEntry(TILEOFFSETS)) {
     const uint32 tilew = raw->getEntry(TILEWIDTH)->getU32();
     const uint32 tileh = raw->getEntry(TILELENGTH)->getU32();
 
     if (!(tilew > 0 && tileh > 0))
       ThrowRDE("Invalid tile size: (%u, %u)", tilew, tileh);
 
     assert(tilew > 0);
     const uint32 tilesX = roundUpDivision(mRaw->dim.x, tilew);
     if (!tilesX)
       ThrowRDE("Zero tiles horizontally");
 
     assert(tileh > 0);
     const uint32 tilesY = roundUpDivision(mRaw->dim.y, tileh);
     if (!tilesY)
       ThrowRDE("Zero tiles vertically");
 
     TiffEntry* offsets = raw->getEntry(TILEOFFSETS);
     TiffEntry* counts = raw->getEntry(TILEBYTECOUNTS);
     if (offsets->count != counts->count) {
       ThrowRDE("Tile count mismatch: offsets:%u count:%u", offsets->count,
                counts->count);
     }
 
     // tilesX * tilesY may overflow, but division is fine, so let's do that.
     if (offsets->count / tilesX != tilesY ||
         offsets->count / tilesY != tilesX) {
       ThrowRDE("Tile X/Y count mismatch: total:%u X:%u, Y:%u", offsets->count,
                tilesX, tilesY);
     }
 
     const uint32 nTiles = tilesX * tilesY;
     assert(nTiles > 0);
 
     slices.slices.reserve(nTiles);
 
     for (uint32 y = 0; y < tilesY; y++) {
       for (uint32 x = 0; x < tilesX; x++) {
         const auto s = x + y * tilesX;
         const auto offset = offsets->getU32(s);
         const auto count = counts->getU32(s);
 
         if (count < 1)
           ThrowRDE("Tile %u;%u is empty", x, y);
 
         ByteStream bs(mFile->getSubView(offset, count), 0);
 
         const uint32 offX = tilew * x;
         const uint32 offY = tileh * y;
 
         DngSliceElement e(bs, offX, offY, tilew, tileh);
         slices.slices.emplace_back(e);
       }
     }
 
     assert(slices.slices.size() == nTiles);
   } else { // Strips
     TiffEntry* offsets = raw->getEntry(STRIPOFFSETS);
     TiffEntry* counts = raw->getEntry(STRIPBYTECOUNTS);
 
     if (counts->count != offsets->count) {
       ThrowRDE("Byte count number does not match strip size: "
                "count:%u, stips:%u ",
                counts->count, offsets->count);
     }
 
     uint32 yPerSlice = raw->hasEntry(ROWSPERSTRIP) ?
           raw->getEntry(ROWSPERSTRIP)->getU32() : mRaw->dim.y;
 
     const uint32 yTotal = yPerSlice * counts->count;
     if (yPerSlice == 0 || yPerSlice > static_cast<uint32>(mRaw->dim.y) ||
         yTotal < static_cast<uint32>(mRaw->dim.y)) {
       ThrowRDE("Invalid y per slice %u or strip count %u (height = %u, got %u)",
                yPerSlice, counts->count, mRaw->dim.y, yTotal);
     }
 
     slices.slices.reserve(counts->count);
 
     uint32 offY = 0;
     for (uint32 s = 0; s < counts->count; s++) {
       const auto offset = offsets->getU32(s);
       const auto count = counts->getU32(s);
 
       if (count < 1)
         ThrowRDE("Slice %u is empty", s);
 
       ByteStream bs(mFile->getSubView(offset, count), 0);
       DngSliceElement e(bs, /*offsetX=*/0, offY, mRaw->dim.x, yPerSlice);
 
       slices.slices.emplace_back(e);
       offY += yPerSlice;
     }
 
     assert(static_cast<uint32>(mRaw->dim.y) <= offY);
     assert(slices.slices.size() == counts->count);
   }
 
   if (slices.slices.empty())
     ThrowRDE("No valid slices found.");
 
   mRaw->createData();
 
-  slices.decode();
+  slices.decompress();
 }
 
 RawImage DngDecoder::decodeRawInternal() {
diff --git a/src/librawspeed/decoders/RafDecoder.cpp b/src/librawspeed/decoders/RafDecoder.cpp
index 3a3b68f9..4dd30597 100644
--- a/src/librawspeed/decoders/RafDecoder.cpp
+++ b/src/librawspeed/decoders/RafDecoder.cpp
@@ -64,112 +64,112 @@ bool RafDecoder::isAppropriateDecoder(const TiffRootIFD* rootIFD,
 RawImage RafDecoder::decodeRawInternal() {
   auto raw = mRootIFD->getIFDWithTag(FUJI_STRIPOFFSETS);
   uint32 height = 0;
   uint32 width = 0;
 
   if (raw->hasEntry(FUJI_RAWIMAGEFULLHEIGHT)) {
     height = raw->getEntry(FUJI_RAWIMAGEFULLHEIGHT)->getU32();
     width = raw->getEntry(FUJI_RAWIMAGEFULLWIDTH)->getU32();
   } else if (raw->hasEntry(IMAGEWIDTH)) {
     TiffEntry *e = raw->getEntry(IMAGEWIDTH);
     height = e->getU16(0);
     width = e->getU16(1);
   } else
     ThrowRDE("Unable to locate image size");
 
   if (width == 0 || height == 0 || width > 9216 || height > 6210)
     ThrowRDE("Unexpected image dimensions found: (%u; %u)", width, height);
 
   if (raw->hasEntry(FUJI_LAYOUT)) {
     TiffEntry *e = raw->getEntry(FUJI_LAYOUT);
     alt_layout = !(e->getByte(0) >> 7);
   }
 
   TiffEntry *offsets = raw->getEntry(FUJI_STRIPOFFSETS);
   TiffEntry *counts = raw->getEntry(FUJI_STRIPBYTECOUNTS);
 
   if (offsets->count != 1 || counts->count != 1)
     ThrowRDE("Multiple Strips found: %u %u", offsets->count, counts->count);
 
   ByteStream input(offsets->getRootIfdData());
   input = input.getSubStream(offsets->getU32(), counts->getU32());
 
   if (isCompressed()) {
     mRaw->metadata.mode = "compressed";
 
     mRaw->dim = iPoint2D(width, height);
 
     FujiDecompressor f(mRaw, input);
 
     const iPoint2D hDim(f.header.raw_width, f.header.raw_height);
 
     if (mRaw->dim != hDim)
       ThrowRDE("RAF header specifies different dimensions!");
 
     mRaw->createData();
 
-    f.decode();
+    f.decompress();
 
     return mRaw;
   }
 
   // x-trans sensors report 14bpp, but data isn't packed
   // thus, unless someone has any better ideas, let's autodetect it.
   int bps;
 
   // Some fuji SuperCCD cameras include a second raw image next to the first one
   // that is identical but darker to the first. The two combined can produce
   // a higher dynamic range image. Right now we're ignoring it.
   bool double_width;
 
   assert(!isCompressed());
 
   if (8UL * counts->getU32() >= 2UL * 16UL * width * height) {
     bps = 16;
     double_width = true;
   } else if (8UL * counts->getU32() >= 2UL * 14UL * width * height) {
     bps = 14;
     double_width = true;
   } else if (8UL * counts->getU32() >= 2UL * 12UL * width * height) {
     bps = 12;
     double_width = true;
   } else if (8UL * counts->getU32() >= 16UL * width * height) {
     bps = 16;
     double_width = false;
   } else if (8UL * counts->getU32() >= 14UL * width * height) {
     bps = 14;
     double_width = false;
   } else if (8UL * counts->getU32() >= 12UL * width * height) {
     bps = 12;
     double_width = false;
   } else {
     ThrowRDE("Can not detect bitdepth. StripByteCounts = %u, width = %u, "
              "height = %u",
              counts->getU32(), width, height);
   }
 
   double_width = hints.has("double_width_unpacked");
   const uint32 real_width = double_width ? 2U * width : width;
 
   mRaw->dim = iPoint2D(real_width, height);
   mRaw->createData();
 
   UncompressedDecompressor u(input, mRaw);
 
   if (double_width) {
     u.decodeRawUnpacked<16, Endianness::little>(width * 2, height);
   } else if (input.getByteOrder() == Endianness::big &&
              getHostEndianness() == Endianness::little) {
     // FIXME: ^ that if seems fishy
     u.decodeRawUnpacked<16, Endianness::big>(width, height);
   } else {
     iPoint2D pos(0, 0);
     if (hints.has("jpeg32_bitorder")) {
       u.readUncompressedRaw(mRaw->dim, pos, width * bps / 8, bps,
                             BitOrder_MSB32);
     } else {
       u.readUncompressedRaw(mRaw->dim, pos, width * bps / 8, bps, BitOrder_LSB);
     }
   }
 
   return mRaw;
 }
diff --git a/src/librawspeed/decoders/Rw2Decoder.cpp b/src/librawspeed/decoders/Rw2Decoder.cpp
index ee244397..fb57315f 100644
--- a/src/librawspeed/decoders/Rw2Decoder.cpp
+++ b/src/librawspeed/decoders/Rw2Decoder.cpp
@@ -57,74 +57,74 @@ bool Rw2Decoder::isAppropriateDecoder(const TiffRootIFD* rootIFD,
 RawImage Rw2Decoder::decodeRawInternal() {
 
   const TiffIFD* raw = nullptr;
   bool isOldPanasonic = ! mRootIFD->hasEntryRecursive(PANASONIC_STRIPOFFSET);
 
   if (! isOldPanasonic)
     raw = mRootIFD->getIFDWithTag(PANASONIC_STRIPOFFSET);
   else
     raw = mRootIFD->getIFDWithTag(STRIPOFFSETS);
 
   uint32 height = raw->getEntry(static_cast<TiffTag>(3))->getU16();
   uint32 width = raw->getEntry(static_cast<TiffTag>(2))->getU16();
 
   if (isOldPanasonic) {
     if (width == 0 || height == 0 || width > 4330 || height > 2751)
       ThrowRDE("Unexpected image dimensions found: (%u; %u)", width, height);
 
     TiffEntry *offsets = raw->getEntry(STRIPOFFSETS);
 
     if (offsets->count != 1) {
       ThrowRDE("Multiple Strips found: %u", offsets->count);
     }
     offset = offsets->getU32();
     if (!mFile->isValid(offset))
       ThrowRDE("Invalid image data offset, cannot decode.");
 
     mRaw->dim = iPoint2D(width, height);
     mRaw->createData();
 
     uint32 size = mFile->getSize() - offset;
 
     UncompressedDecompressor u(ByteStream(mFile, offset), mRaw);
 
     if (size >= width*height*2) {
       // It's completely unpacked little-endian
       u.decodeRawUnpacked<12, Endianness::little>(width, height);
     } else if (size >= width*height*3/2) {
       // It's a packed format
       u.decode12BitRaw<Endianness::little, false, true>(width, height);
     } else {
       // It's using the new .RW2 decoding method
       load_flags = 0;
       // It's using the new .RW2 decoding method
       PanasonicDecompressor p(mRaw, ByteStream(mFile, offset),
                               hints.has("zero_is_not_bad"), load_flags);
-      p.decode();
+      p.decompress();
     }
   } else {
     if (width == 0 || height == 0 || width > 5488 || height > 3904)
       ThrowRDE("Unexpected image dimensions found: (%u; %u)", width, height);
 
     mRaw->dim = iPoint2D(width, height);
     mRaw->createData();
     TiffEntry *offsets = raw->getEntry(PANASONIC_STRIPOFFSET);
 
     if (offsets->count != 1) {
       ThrowRDE("Multiple Strips found: %u", offsets->count);
     }
 
     offset = offsets->getU32();
 
     if (!mFile->isValid(offset))
       ThrowRDE("Invalid image data offset, cannot decode.");
 
     // It's using the new .RW2 decoding method
     load_flags = 0x2008;
     // It's using the new .RW2 decoding method
     PanasonicDecompressor p(mRaw, ByteStream(mFile, offset),
                             hints.has("zero_is_not_bad"), load_flags);
-    p.decode();
+    p.decompress();
   }
 
   return mRaw;
 }
diff --git a/src/librawspeed/decompressors/AbstractDngDecompressor.cpp b/src/librawspeed/decompressors/AbstractDngDecompressor.cpp
index 61bc4996..bc429e93 100644
--- a/src/librawspeed/decompressors/AbstractDngDecompressor.cpp
+++ b/src/librawspeed/decompressors/AbstractDngDecompressor.cpp
@@ -40,7 +40,9 @@
 
 namespace rawspeed {
 
-void AbstractDngDecompressor::decode() const { startThreading(slices.size()); }
+void AbstractDngDecompressor::decompress() const {
+  startThreading(slices.size());
+}
 
 void AbstractDngDecompressor::decompressThreaded(
     const RawDecompressorThread* t) const {
diff --git a/src/librawspeed/decompressors/AbstractDngDecompressor.h b/src/librawspeed/decompressors/AbstractDngDecompressor.h
index c0c48b26..3a48d6eb 100644
--- a/src/librawspeed/decompressors/AbstractDngDecompressor.h
+++ b/src/librawspeed/decompressors/AbstractDngDecompressor.h
@@ -48,17 +48,17 @@ class AbstractDngDecompressor final : public AbstractParallelizedDecompressor {
 public:
   AbstractDngDecompressor(const RawImage& img, int compression_,
                           bool mFixLjpeg_, uint32 mBps_, uint32 mPredictor_)
       : AbstractParallelizedDecompressor(img), compression(compression_),
         mFixLjpeg(mFixLjpeg_), mBps(mBps_), mPredictor(mPredictor_) {}
 
-  void decode() const final;
+  void decompress() const final;
 
   std::vector<DngSliceElement> slices;
 
   const int compression;
   const bool mFixLjpeg = false;
   const uint32 mBps;
   const uint32 mPredictor;
 };
 
 } // namespace rawspeed
diff --git a/src/librawspeed/decompressors/AbstractParallelizedDecompressor.cpp b/src/librawspeed/decompressors/AbstractParallelizedDecompressor.cpp
index d22ff969..bcf5ff8f 100644
--- a/src/librawspeed/decompressors/AbstractParallelizedDecompressor.cpp
+++ b/src/librawspeed/decompressors/AbstractParallelizedDecompressor.cpp
@@ -118,8 +118,8 @@ void AbstractParallelizedDecompressor::startThreading(uint32 pieces) const {
 }
 #endif
 
-void AbstractParallelizedDecompressor::decode() const {
+void AbstractParallelizedDecompressor::decompress() const {
   startThreading(mRaw->dim.y);
 }
 
 } // namespace rawspeed
diff --git a/src/librawspeed/decompressors/AbstractParallelizedDecompressor.h b/src/librawspeed/decompressors/AbstractParallelizedDecompressor.h
index 36fd065a..018df385 100644
--- a/src/librawspeed/decompressors/AbstractParallelizedDecompressor.h
+++ b/src/librawspeed/decompressors/AbstractParallelizedDecompressor.h
@@ -42,8 +42,8 @@ class AbstractParallelizedDecompressor : public AbstractDecompressor {
 public:
   explicit AbstractParallelizedDecompressor(const RawImage& img) : mRaw(img) {}
   virtual ~AbstractParallelizedDecompressor() = default;
 
-  virtual void decode() const;
+  virtual void decompress() const;
 
 protected:
   RawImage mRaw;
diff --git a/src/librawspeed/decompressors/FujiDecompressor.cpp b/src/librawspeed/decompressors/FujiDecompressor.cpp
index fcc7c042..842c2594 100644
--- a/src/librawspeed/decompressors/FujiDecompressor.cpp
+++ b/src/librawspeed/decompressors/FujiDecompressor.cpp
@@ -758,7 +758,9 @@ void FujiDecompressor::fuji_compressed_load_raw() {
   }
 }
 
-void FujiDecompressor::decode() const { startThreading(header.blocks_in_row); }
+void FujiDecompressor::decompress() const {
+  startThreading(header.blocks_in_row);
+}
 
 void FujiDecompressor::decompressThreaded(
     const RawDecompressorThread* t) const {
diff --git a/src/librawspeed/decompressors/FujiDecompressor.h b/src/librawspeed/decompressors/FujiDecompressor.h
index 092df50b..1955e903 100644
--- a/src/librawspeed/decompressors/FujiDecompressor.h
+++ b/src/librawspeed/decompressors/FujiDecompressor.h
@@ -41,72 +41,72 @@ class FujiDecompressor final : public AbstractParallelizedDecompressor {
 public:
   struct FujiHeader {
     FujiHeader() = default;
 
     explicit FujiHeader(ByteStream* input_);
     explicit __attribute__((pure)) operator bool() const; // validity check
 
     ushort16 signature;
     uchar8 version;
     uchar8 raw_type;
     uchar8 raw_bits;
     ushort16 raw_height;
     ushort16 raw_rounded_width;
     ushort16 raw_width;
     ushort16 block_size;
     uchar8 blocks_in_row;
     ushort16 total_lines;
   };
 
   FujiHeader header;
 
   struct FujiStrip {
     // part of which 'image' this block is
     const FujiHeader& h;
 
     // which strip is this, 0 .. h.blocks_in_row-1
     const int n;
 
     // the compressed data of this strip
     const ByteStream bs;
 
     FujiStrip(const FujiHeader& h_, int block, ByteStream bs_)
         : h(h_), n(block), bs(std::move(bs_)) {
       assert(n >= 0 && n < h.blocks_in_row);
     }
 
     // each strip's line corresponds to 6 output lines.
     static int lineHeight() { return 6; }
 
     // how many vertical lines does this block encode?
     int height() const { return h.total_lines; }
 
     // how many horizontal pixels does this block encode?
     int width() const {
       // if this is not the last block, we are good.
       if ((n + 1) != h.blocks_in_row)
         return h.block_size;
 
       // ok, this is the last block...
 
       assert(h.block_size * h.blocks_in_row >= h.raw_width);
       return h.raw_width - offsetX();
     }
 
     // where vertically does this block start?
     int offsetY(int line = 0) const {
       assert(line >= 0 && line < height());
       return lineHeight() * line;
     }
 
     // where horizontally does this block start?
     int offsetX() const { return h.block_size * n; }
   };
 
   FujiDecompressor(const RawImage& img, ByteStream input);
 
   void fuji_compressed_load_raw();
 
-  void decode() const final;
+  void decompress() const final;
 
 protected:
   struct fuji_compressed_params {
