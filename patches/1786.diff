commit fff7cacb03a41e36bba2059cc7f0a60e233d014c
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Sat May 20 21:44:36 2017 +0000

    NITF: fix null pointer dereference on corrupted file. Credit to OSS Fuzz (run locally)
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@38535 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/frmts/nitf/nitfimage.c b/gdal/frmts/nitf/nitfimage.c
index 662342ceed..6d92aae5a7 100644
--- a/gdal/frmts/nitf/nitfimage.c
+++ b/gdal/frmts/nitf/nitfimage.c
@@ -3771,88 +3771,95 @@ static void NITFLoadLocationTable( NITFImage *psImage )
 static int NITFLoadVQTables( NITFImage *psImage, int bTryGuessingOffset )
 
 {
     int     i;
     GUInt32 nVQOffset=0 /*, nVQSize=0 */;
     GByte abyTestChunk[1000];
     const GByte abySignature[6] = { 0x00, 0x00, 0x00, 0x06, 0x00, 0x0E };
 
 /* -------------------------------------------------------------------- */
 /*      Do we already have the VQ tables?                               */
 /* -------------------------------------------------------------------- */
     if( psImage->apanVQLUT[0] != NULL )
         return TRUE;
 
 /* -------------------------------------------------------------------- */
 /*      Do we have the location information?                            */
 /* -------------------------------------------------------------------- */
     for( i = 0; i < psImage->nLocCount; i++ )
     {
         if( psImage->pasLocations[i].nLocId == LID_CompressionLookupSubsection)
         {
             nVQOffset = psImage->pasLocations[i].nLocOffset;
             /* nVQSize = psImage->pasLocations[i].nLocSize; */
         }
     }
 
     if( nVQOffset == 0 )
         return FALSE;
 
 /* -------------------------------------------------------------------- */
 /*      Does it look like we have the tables properly identified?       */
 /* -------------------------------------------------------------------- */
     if( VSIFSeekL( psImage->psFile->fp, nVQOffset, SEEK_SET ) != 0 ||
         VSIFReadL( abyTestChunk, sizeof(abyTestChunk), 1, psImage->psFile->fp ) != 1 )
     {
         return FALSE;
     }
 
     if( memcmp(abyTestChunk,abySignature,sizeof(abySignature)) != 0 )
     {
         int bFoundSignature = FALSE;
         if (!bTryGuessingOffset)
             return FALSE;
 
         for( i = 0; (size_t)i < sizeof(abyTestChunk) - sizeof(abySignature); i++ )
         {
             if( memcmp(abyTestChunk+i,abySignature,sizeof(abySignature)) == 0 )
             {
                 bFoundSignature = TRUE;
                 nVQOffset += i;
                 CPLDebug( "NITF",
                           "VQ CompressionLookupSubsection offsets off by %d bytes, adjusting accordingly.",
                           i );
                 break;
             }
         }
         if (!bFoundSignature)
             return FALSE;
     }
 
 /* -------------------------------------------------------------------- */
 /*      Load the tables.                                                */
 /* -------------------------------------------------------------------- */
     for( i = 0; i < 4; i++ )
     {
         GUInt32 nVQVector;
         int bOK;
 
         psImage->apanVQLUT[i] = (GUInt32 *) CPLCalloc(4096,sizeof(GUInt32));
 
         bOK = VSIFSeekL( psImage->psFile->fp, nVQOffset + 6 + i*14 + 10, SEEK_SET ) == 0;
         bOK &= VSIFReadL( &nVQVector, 1, 4, psImage->psFile->fp ) == 4;
         nVQVector = CPL_MSBWORD32( nVQVector );
 
         bOK &= VSIFSeekL( psImage->psFile->fp, nVQOffset + nVQVector, SEEK_SET ) == 0;
         bOK &= VSIFReadL( psImage->apanVQLUT[i], 4, 4096, psImage->psFile->fp ) == 4096;
         if( !bOK )
+        {
+            for( i = 0; i < 4; i++ )
+            {
+                CPLFree( psImage->apanVQLUT[i] );
+                psImage->apanVQLUT[i] = NULL;
+            }
             return FALSE;
+        }
     }
 
     return TRUE;
 }
 
 /************************************************************************/
 /*                           NITFReadSTDIDC()                           */
 /*                                                                      */
 /*      Read a STDIDC TRE and return contents as metadata strings.      */
 /************************************************************************/
