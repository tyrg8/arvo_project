commit 9fcfd01f205fdd092be0932ac0b7a6a4eb29d2b3
Author: Yukihiro "Matz" Matsumoto <matz@ruby.or.jp>
Date:   Thu Nov 10 22:21:12 2022 +0900

    mruby-pack/pack.c (read_tmpl): check integer overflow before casting.

diff --git a/mrbgems/mruby-pack/src/pack.c b/mrbgems/mruby-pack/src/pack.c
index 08c22b5eb..9999e0ef7 100644
--- a/mrbgems/mruby-pack/src/pack.c
+++ b/mrbgems/mruby-pack/src/pack.c
@@ -1112,236 +1112,236 @@ read_tmpl(mrb_state *mrb, struct tmpl *tmpl, enum pack_dir *dirp, enum pack_type
   t = tptr[tmpl->idx++];
 alias:
   switch (t) {
   case 'A':
     dir = PACK_DIR_STR;
     type = PACK_TYPE_STRING;
     flags |= PACK_FLAG_WIDTH | PACK_FLAG_COUNT2;
     break;
   case 'a':
     dir = PACK_DIR_STR;
     type = PACK_TYPE_STRING;
     flags |= PACK_FLAG_WIDTH | PACK_FLAG_COUNT2 | PACK_FLAG_a;
     break;
   case 'C':
     dir = PACK_DIR_CHAR;
     type = PACK_TYPE_INTEGER;
     size = 1;
     break;
   case 'c':
     dir = PACK_DIR_CHAR;
     type = PACK_TYPE_INTEGER;
     size = 1;
     flags |= PACK_FLAG_SIGNED;
     break;
   case 'D': case 'd':
     dir = PACK_DIR_DOUBLE;
     type = PACK_TYPE_FLOAT;
     size = 8;
     flags |= PACK_FLAG_SIGNED;
     break;
   case 'F': case 'f':
     dir = PACK_DIR_FLOAT;
     type = PACK_TYPE_FLOAT;
     size = 4;
     flags |= PACK_FLAG_SIGNED;
     break;
   case 'E':
     dir = PACK_DIR_DOUBLE;
     type = PACK_TYPE_FLOAT;
     size = 8;
     flags |= PACK_FLAG_SIGNED | PACK_FLAG_LT;
     break;
   case 'e':
     dir = PACK_DIR_FLOAT;
     type = PACK_TYPE_FLOAT;
     size = 4;
     flags |= PACK_FLAG_SIGNED | PACK_FLAG_LT;
     break;
   case 'G':
     dir = PACK_DIR_DOUBLE;
     type = PACK_TYPE_FLOAT;
     size = 8;
     flags |= PACK_FLAG_SIGNED | PACK_FLAG_GT;
     break;
   case 'g':
     dir = PACK_DIR_FLOAT;
     type = PACK_TYPE_FLOAT;
     size = 4;
     flags |= PACK_FLAG_SIGNED | PACK_FLAG_GT;
     break;
   case 'H':
     dir = PACK_DIR_HEX;
     type = PACK_TYPE_STRING;
     flags |= PACK_FLAG_COUNT2;
     break;
   case 'h':
     dir = PACK_DIR_HEX;
     type = PACK_TYPE_STRING;
     flags |= PACK_FLAG_COUNT2 | PACK_FLAG_LSB;
     break;
   case 'I':
     switch (sizeof(int)) {
       case 2: t = 'S'; goto alias;
       case 4: t = 'L'; goto alias;
       case 8: t = 'Q'; goto alias;
       default:
         mrb_raisef(mrb, E_RUNTIME_ERROR, "mruby-pack does not support sizeof(int) == %d", (int)sizeof(int));
     }
     break;
   case 'i':
     switch (sizeof(int)) {
       case 2: t = 's'; goto alias;
       case 4: t = 'l'; goto alias;
       case 8: t = 'q'; goto alias;
       default:
         mrb_raisef(mrb, E_RUNTIME_ERROR, "mruby-pack does not support sizeof(int) == %d", (int)sizeof(int));
     }
     break;
   case 'L':
     dir = PACK_DIR_LONG;
     type = PACK_TYPE_INTEGER;
     size = 4;
     break;
   case 'l':
     dir = PACK_DIR_LONG;
     type = PACK_TYPE_INTEGER;
     size = 4;
     flags |= PACK_FLAG_SIGNED;
     break;
   case 'w':
     dir = PACK_DIR_BER;
     type = PACK_TYPE_INTEGER;
     flags |= PACK_FLAG_SIGNED;
     break;
   case 'm':
     dir = PACK_DIR_BASE64;
     type = PACK_TYPE_STRING;
     flags |= PACK_FLAG_WIDTH | PACK_FLAG_COUNT2;
     break;
   case 'M':
     dir = PACK_DIR_QENC;
     type = PACK_TYPE_STRING;
     flags |= PACK_FLAG_WIDTH | PACK_FLAG_COUNT2;
     break;
   case 'N':  /* = "L>" */
     dir = PACK_DIR_LONG;
     type = PACK_TYPE_INTEGER;
     size = 4;
     flags |= PACK_FLAG_GT;
     break;
   case 'n':  /* = "S>" */
     dir = PACK_DIR_SHORT;
     type = PACK_TYPE_INTEGER;
     size = 2;
     flags |= PACK_FLAG_GT;
     break;
   case 'Q':
     dir = PACK_DIR_QUAD;
     type = PACK_TYPE_INTEGER;
     size = 8;
     break;
   case 'q':
     dir = PACK_DIR_QUAD;
     type = PACK_TYPE_INTEGER;
     size = 8;
     flags |= PACK_FLAG_SIGNED;
     break;
   case 'S':
     dir = PACK_DIR_SHORT;
     type = PACK_TYPE_INTEGER;
     size = 2;
     break;
   case 's':
     dir = PACK_DIR_SHORT;
     type = PACK_TYPE_INTEGER;
     size = 2;
     flags |= PACK_FLAG_SIGNED;
     break;
   case 'U':
     dir = PACK_DIR_UTF8;
     type = PACK_TYPE_INTEGER;
     break;
   case 'V':  /* = "L<" */
     dir = PACK_DIR_LONG;
     type = PACK_TYPE_INTEGER;
     size = 4;
     flags |= PACK_FLAG_LT;
     break;
   case 'v':  /* = "S<" */
     dir = PACK_DIR_SHORT;
     type = PACK_TYPE_INTEGER;
     size = 2;
     flags |= PACK_FLAG_LT;
     break;
   case 'x':
     dir = PACK_DIR_NUL;
     type = PACK_TYPE_NONE;
     break;
   case 'X':
     dir = PACK_DIR_BACK;
     type = PACK_TYPE_NONE;
     break;
   case '@':
     dir = PACK_DIR_ABS;
     type = PACK_TYPE_NONE;
     break;
   case 'Z':
     dir = PACK_DIR_STR;
     type = PACK_TYPE_STRING;
     flags |= PACK_FLAG_WIDTH | PACK_FLAG_COUNT2 | PACK_FLAG_Z;
     break;
   case 'p': case 'P':
   case '%':
     mrb_raisef(mrb, E_ARGUMENT_ERROR, "%c is not supported", (char)t);
     break;
   default:
     dir = PACK_DIR_INVALID;
     type = PACK_TYPE_NONE;
     break;
   }
 
   /* read suffix [0-9*_!<>] */
   while (tmpl->idx < tlen) {
     ch = tptr[tmpl->idx];
     if (ISDIGIT(ch)) {
       char *e;
       mrb_int n;
-      if (!mrb_read_int(tptr+tmpl->idx, tptr+tlen, &e, &n)) {
+      if (!mrb_read_int(tptr+tmpl->idx, tptr+tlen, &e, &n) || INT_MAX < n) {
         mrb_raise(mrb, E_RUNTIME_ERROR, "too big template length");
       }
       count = (int)n;
       tmpl->idx = (int)(e - tptr);
       continue;
     } else if (ch == '*')  {
       if (type == PACK_TYPE_NONE)
         count = 0;
       else
         count = -1;
     } else if (ch == '_' || ch == '!' || ch == '<' || ch == '>') {
       if (strchr("sSiIlLqQ", (int)t) == NULL) {
         mrb_raisef(mrb, E_ARGUMENT_ERROR, "'%c' allowed only after types sSiIlLqQ", ch);
       }
       if (ch == '_' || ch == '!') {
         flags |= PACK_FLAG_s;
       } else if (ch == '<') {
         flags |= PACK_FLAG_LT;
       } else if (ch == '>') {
         flags |= PACK_FLAG_GT;
       }
     }
     else {
       break;
     }
     tmpl->idx++;
   }
 
   if ((flags & PACK_FLAG_LT) || (!(flags & PACK_FLAG_GT) && littleendian)) {
     flags |= PACK_FLAG_LITTLEENDIAN;
   }
 
   *dirp = dir;
   *typep = type;
   *sizep = size;
   *countp = count;
   *flagsp = flags;
 }
