commit f9b1dbe2ac3da4ed87647ea27d9060879acc20fe
Author: Alexander Alekhin <alexander.a.alekhin@gmail.com>
Date:   Tue Feb 15 11:48:09 2022 +0000

    imgcodecs: add runtime checks to validate input

diff --git a/modules/imgcodecs/src/grfmt_jpeg2000_openjpeg.cpp b/modules/imgcodecs/src/grfmt_jpeg2000_openjpeg.cpp
index 73d49282d7..c5b1a292cc 100644
--- a/modules/imgcodecs/src/grfmt_jpeg2000_openjpeg.cpp
+++ b/modules/imgcodecs/src/grfmt_jpeg2000_openjpeg.cpp
@@ -507,78 +507,78 @@ Jpeg2KOpjDecoderBase::Jpeg2KOpjDecoderBase(OPJ_CODEC_FORMAT format)
 bool Jpeg2KOpjDecoderBase::readHeader()
 {
     if (!m_buf.empty()) {
         opjBuf_ = detail::OpjMemoryBuffer(m_buf);
         stream_ = opjCreateBufferInputStream(&opjBuf_);
     }
     else
     {
         stream_.reset(opj_stream_create_default_file_stream(m_filename.c_str(), OPJ_STREAM_READ));
     }
     if (!stream_)
         return false;
 
     codec_.reset(opj_create_decompress(format_));
     if (!codec_)
         return false;
 
     // Callbacks are cleared, when opj_destroy_codec is called,
     // They can provide some additional information for the user, about what goes wrong
     setupLogCallbacks(codec_.get());
 
     opj_dparameters parameters = setupDecoderParameters();
     if (!opj_setup_decoder(codec_.get(), &parameters))
         return false;
 
     {
         opj_image_t* rawImage;
         if (!opj_read_header(stream_.get(), codec_.get(), &rawImage))
             return false;
 
         image_.reset(rawImage);
     }
 
     m_width = image_->x1 - image_->x0;
     m_height = image_->y1 - image_->y0;
 
     /* Different components may have different precision,
      * so check all.
      */
     bool hasAlpha = false;
     const int numcomps = image_->numcomps;
-    CV_Assert(numcomps >= 1);
+    CV_Check(numcomps, numcomps >= 1 && numcomps <= 4, "Unsupported number of components");
     for (int i = 0; i < numcomps; i++)
     {
         const opj_image_comp_t& comp = image_->comps[i];
 
         if (comp.sgnd)
         {
             CV_Error(Error::StsNotImplemented, cv::format("OpenJPEG2000: Component %d/%d is signed", i, numcomps));
         }
 
         if (hasAlpha && comp.alpha)
         {
             CV_Error(Error::StsNotImplemented, cv::format("OpenJPEG2000: Component %d/%d is duplicate alpha channel", i, numcomps));
         }
 
         hasAlpha |= comp.alpha != 0;
 
         if (comp.prec > 64)
         {
             CV_Error(Error::StsNotImplemented, "OpenJPEG2000: precision > 64 is not supported");
         }
         m_maxPrec = std::max(m_maxPrec, comp.prec);
     }
 
     if (m_maxPrec < 8) {
         CV_Error(Error::StsNotImplemented, "OpenJPEG2000: Precision < 8 not supported");
     } else if (m_maxPrec == 8) {
         m_type = CV_MAKETYPE(CV_8U, numcomps);
     } else if (m_maxPrec <= 16) {
         m_type = CV_MAKETYPE(CV_16U, numcomps);
     } else if (m_maxPrec <= 23) {
         m_type = CV_MAKETYPE(CV_32F, numcomps);
     } else {
         m_type = CV_MAKETYPE(CV_64F, numcomps);
     }
     return true;
 }
diff --git a/modules/imgcodecs/src/grfmt_pam.cpp b/modules/imgcodecs/src/grfmt_pam.cpp
index 0c59702c41..1c8f8476a5 100644
--- a/modules/imgcodecs/src/grfmt_pam.cpp
+++ b/modules/imgcodecs/src/grfmt_pam.cpp
@@ -373,121 +373,125 @@ ImageDecoder PAMDecoder::newDecoder() const
 bool PAMDecoder::readHeader()
 {
     PamHeaderFieldType fieldtype = PAM_HEADER_NONE;
     char value[MAX_PAM_HEADER_VALUE_LENGTH+1];
     int byte;
 
     if( !m_buf.empty() )
     {
         if( !m_strm.open(m_buf) )
             return false;
     }
     else if( !m_strm.open( m_filename ))
         return false;
 
     try
     {
         byte = m_strm.getByte();
         if( byte != 'P' )
             throw RBS_BAD_HEADER;
 
         byte = m_strm.getByte();
         if (byte != '7')
             throw RBS_BAD_HEADER;
 
         byte = m_strm.getByte();
         if (byte != '\n' && byte != '\r')
             throw RBS_BAD_HEADER;
 
         bool flds_endhdr = false, flds_height = false, flds_width = false, flds_depth = false, flds_maxval = false;
 
         do {
             if (!ReadPAMHeaderLine(m_strm, fieldtype, value))
                 throw RBS_BAD_HEADER;
             switch (fieldtype)
             {
                 case PAM_HEADER_NONE:
                 case PAM_HEADER_COMMENT:
                     continue;
                 case PAM_HEADER_ENDHDR:
                     flds_endhdr = true;
                     break;
                 case PAM_HEADER_HEIGHT:
                     if (flds_height)
                         throw RBS_BAD_HEADER;
                     m_height = ParseInt(value, MAX_PAM_HEADER_VALUE_LENGTH);
                     flds_height = true;
                     break;
                 case PAM_HEADER_WIDTH:
                     if (flds_width)
                         throw RBS_BAD_HEADER;
                     m_width = ParseInt(value, MAX_PAM_HEADER_VALUE_LENGTH);
                     flds_width = true;
                     break;
                 case PAM_HEADER_DEPTH:
                     if (flds_depth)
                         throw RBS_BAD_HEADER;
                     m_channels = ParseInt(value, MAX_PAM_HEADER_VALUE_LENGTH);
                     flds_depth = true;
                     break;
                 case PAM_HEADER_MAXVAL:
                     if (flds_maxval)
                         throw RBS_BAD_HEADER;
                     m_maxval = ParseInt(value, MAX_PAM_HEADER_VALUE_LENGTH);
                     if ( m_maxval > 65535 )
                         throw RBS_BAD_HEADER;
                     m_sampledepth = (m_maxval > 255) ? CV_16U : CV_8U;
                     if (m_maxval == 1)
                         bit_mode = true;
                     flds_maxval = true;
                     break;
                 case PAM_HEADER_TUPLTYPE:
                 {
                     bool format_found = false;
                     for (uint i=0; i<PAM_FORMATS_NO; i++)
                     {
                         if (0 == strncmp(formats[i].name, value, MAX_PAM_HEADER_VALUE_LENGTH+1))
                         {
                             selected_fmt = formats[i].fmt;
                             format_found = true;
                             break;
                         }
                     }
                     CV_Assert(format_found);
                     break;
                 }
                 default:
                     throw RBS_BAD_HEADER;
             }
         } while (fieldtype != PAM_HEADER_ENDHDR);
 
         if (flds_endhdr && flds_height && flds_width && flds_depth && flds_maxval)
         {
             if (selected_fmt == IMWRITE_PAM_FORMAT_NULL)
             {
                 if (m_channels == 1 && m_maxval == 1)
                     selected_fmt = IMWRITE_PAM_FORMAT_BLACKANDWHITE;
                 else if (m_channels == 1 && m_maxval < 256)
                     selected_fmt = IMWRITE_PAM_FORMAT_GRAYSCALE;
                 else if (m_channels == 3 && m_maxval < 256)
                     selected_fmt = IMWRITE_PAM_FORMAT_RGB;
+                else
+                    CV_Error(Error::StsError, "Can't determine selected_fmt (IMWRITE_PAM_FORMAT_NULL)");
             }
+            CV_CheckDepth(m_sampledepth, m_sampledepth == CV_8U || m_sampledepth == CV_16U, "");
+            CV_Check(m_channels, m_channels >= 1 && m_channels <= 4, "Unsupported number of channels");
             m_type = CV_MAKETYPE(m_sampledepth, m_channels);
             m_offset = m_strm.getPos();
 
             return true;
         }
 
         // failed
         m_offset = -1;
         m_width = m_height = -1;
         m_strm.close();
         return false;
     }
     catch (...)
     {
         m_offset = -1;
         m_width = m_height = -1;
         m_strm.close();
         throw;
     }
 }
@@ -496,131 +500,135 @@ bool PAMDecoder::readHeader()
 bool PAMDecoder::readData(Mat& img)
 {
     uchar* data = img.ptr();
     const int target_channels = img.channels();
     size_t imp_stride = img.step;
     const int sample_depth = CV_ELEM_SIZE1(m_type);
     const int src_elems_per_row = m_width*m_channels;
     const int src_stride = src_elems_per_row*sample_depth;
     PaletteEntry palette[256] = {};
     const struct pam_format *fmt = NULL;
     struct channel_layout layout = { 0, 0, 0, 0 }; // normalized to 1-channel grey format
 
     /* setting buffer to max data size so scaling up is possible */
     AutoBuffer<uchar> _src(src_elems_per_row * 2);
     uchar* src = _src.data();
 
     if( m_offset < 0 || !m_strm.isOpened())
         return false;
 
     if (selected_fmt != IMWRITE_PAM_FORMAT_NULL)
         fmt = &formats[selected_fmt];
     else {
         /* default layout handling */
         if (m_channels >= 3) {
             layout.bchan = 0;
             layout.gchan = 1;
             layout.rchan = 2;
         }
     }
 
     {
         m_strm.setPos( m_offset );
 
         /* the case where data fits the opencv matrix */
         if (m_sampledepth == img.depth() && target_channels == m_channels && !bit_mode) {
             /* special case for 16bit images with wrong endianness */
             if (m_sampledepth == CV_16U && !isBigEndian())
             {
                 for (int y = 0; y < m_height; y++, data += imp_stride)
                 {
                     m_strm.getBytes( src, src_stride );
                     for (int x = 0; x < src_elems_per_row; x++)
                     {
                         uchar v = src[x * 2];
                         data[x * 2] = src[x * 2 + 1];
                         data[x * 2 + 1] = v;
                     }
                 }
             }
             else {
                 m_strm.getBytes( data, src_stride * m_height );
             }
 
         }
         else {
             /* black and white mode */
             if (bit_mode) {
                 if( target_channels == 1 )
                 {
                     uchar gray_palette[2] = {0, 255};
                     for (int y = 0; y < m_height; y++, data += imp_stride)
                     {
                         m_strm.getBytes( src, src_stride );
                         FillGrayRow1( data, src, m_width, gray_palette );
                     }
                 } else if ( target_channels == 3 )
                 {
                     FillGrayPalette( palette, 1 , false );
                     for (int y = 0; y < m_height; y++, data += imp_stride)
                     {
                         m_strm.getBytes( src, src_stride );
                         FillColorRow1( data, src, m_width, palette );
                     }
                 }
+                else
+                {
+                    CV_Error(Error::StsError, cv::format("Unsupported value of target_channels: %d", target_channels));
+                }
             } else {
                 for (int y = 0; y < m_height; y++, data += imp_stride)
                 {
                     m_strm.getBytes( src, src_stride );
 
                     /* endianness correction */
                     if( m_sampledepth == CV_16U && !isBigEndian() )
                     {
                         for (int x = 0; x < src_elems_per_row; x++)
                         {
                             uchar v = src[x * 2];
                             src[x * 2] = src[x * 2 + 1];
                             src[x * 2 + 1] = v;
                         }
                     }
 
                     /* scale down */
                     if( img.depth() == CV_8U && m_sampledepth == CV_16U )
                     {
                         for (int x = 0; x < src_elems_per_row; x++)
                         {
                             int v = ((ushort *)src)[x];
                             src[x] = (uchar)(v >> 8);
                         }
                     }
 
                     /* if we are only scaling up/down then we can then copy the data */
                     if (target_channels == m_channels) {
                         memcpy (data, src, imp_stride);
                     }
                     /* perform correct conversion based on format */
                     else if (fmt) {
                         bool funcout = false;
                         if (fmt->cvt_func)
                             funcout = fmt->cvt_func (src, data, m_width, target_channels,
                                 img.depth());
                         /* fall back to default if there is no conversion function or it
                          * can't handle the specified characteristics
                          */
                         if (!funcout)
                             basic_conversion (src, &fmt->layout, m_channels,
                                 m_width, data, target_channels, img.depth());
 
                     /* default to selecting the first available channels */
                     } else {
                         basic_conversion (src, &layout, m_channels,
                             m_width, data, target_channels, img.depth());
                     }
                 }
             }
         }
     }
     return true;
 }
 
 
 //////////////////////////////////////////////////////////////////////////////////////////
diff --git a/modules/imgcodecs/src/grfmt_tiff.cpp b/modules/imgcodecs/src/grfmt_tiff.cpp
index cb4afb9f25..36cf17e1e3 100644
--- a/modules/imgcodecs/src/grfmt_tiff.cpp
+++ b/modules/imgcodecs/src/grfmt_tiff.cpp
@@ -149,8 +149,8 @@ bool TiffDecoder::checkSignature( const String& signature ) const
 
 int TiffDecoder::normalizeChannelsNumber(int channels) const
 {
-    CV_Assert(channels <= 4);
-    return channels > 4 ? 4 : channels;
+    CV_Check(channels, channels >= 1 && channels <= 4, "Unsupported number of channels");
+    return channels;
 }
 
 ImageDecoder TiffDecoder::newDecoder() const
