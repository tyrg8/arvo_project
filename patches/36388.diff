commit 68aad5d8fa8ebe95f86726cb779b381820a05577
Author: Idan Horowitz <idan.horowitz@gmail.com>
Date:   Wed Jul 21 19:29:32 2021 +0300

    LibJS: Implement Temporal.PlainDate.prototype.valueOf

diff --git a/Userland/Libraries/LibJS/Runtime/Temporal/PlainDatePrototype.cpp b/Userland/Libraries/LibJS/Runtime/Temporal/PlainDatePrototype.cpp
index d486089e3c..81b55f221c 100644
--- a/Userland/Libraries/LibJS/Runtime/Temporal/PlainDatePrototype.cpp
+++ b/Userland/Libraries/LibJS/Runtime/Temporal/PlainDatePrototype.cpp
@@ -19,13 +19,16 @@ PlainDatePrototype::PlainDatePrototype(GlobalObject& global_object)
 void PlainDatePrototype::initialize(GlobalObject& global_object)
 {
     Object::initialize(global_object);
 
     auto& vm = this->vm();
 
     // 3.3.2 Temporal.PlainDate.prototype[ @@toStringTag ], https://tc39.es/proposal-temporal/#sec-temporal.plaindate.prototype-@@tostringtag
     define_direct_property(*vm.well_known_symbol_to_string_tag(), js_string(vm.heap(), "Temporal.PlainDate"), Attribute::Configurable);
 
     define_native_accessor(vm.names.calendar, calendar_getter, {}, Attribute::Configurable);
+
+    u8 attr = Attribute::Writable | Attribute::Configurable;
+    define_native_function(vm.names.valueOf, value_of, 0, attr);
 }
 
 static PlainDate* typed_this(GlobalObject& global_object)
@@ -44,14 +47,22 @@ static PlainDate* typed_this(GlobalObject& global_object)
 // 3.3.3 get Temporal.PlainDate.prototype.calendar, https://tc39.es/proposal-temporal/#sec-get-temporal.plaindate.prototype.calendar
 JS_DEFINE_NATIVE_FUNCTION(PlainDatePrototype::calendar_getter)
 {
     // 1. Let temporalDate be the this value.
     // Perform ? RequireInternalSlot(temporalDate, [[InitializedTemporalDate]]).
     auto* temporal_date = typed_this(global_object);
     if (vm.exception())
         return {};
 
     // 3. Return temporalDate.[[Calendar]].
     return Value(&temporal_date->calendar());
 }
 
+// 3.3.31 Temporal.PlainDate.prototype.valueOf ( ), https://tc39.es/proposal-temporal/#sec-temporal.plaindate.prototype.valueof
+JS_DEFINE_NATIVE_FUNCTION(PlainDatePrototype::value_of)
+{
+    // 1. Throw a TypeError exception.
+    vm.throw_exception<TypeError>(global_object, ErrorType::Convert, "Temporal.PlainDate", "a primitive value");
+    return {};
+}
+
 }
diff --git a/Userland/Libraries/LibJS/Runtime/Temporal/PlainDatePrototype.h b/Userland/Libraries/LibJS/Runtime/Temporal/PlainDatePrototype.h
index 69f93afa6f..ad37a19f0d 100644
--- a/Userland/Libraries/LibJS/Runtime/Temporal/PlainDatePrototype.h
+++ b/Userland/Libraries/LibJS/Runtime/Temporal/PlainDatePrototype.h
@@ -20,6 +20,8 @@ public:
 
 private:
     JS_DECLARE_NATIVE_FUNCTION(calendar_getter);
+
+    JS_DECLARE_NATIVE_FUNCTION(value_of);
 };
 
 }
diff --git a/Userland/Libraries/LibJS/Tests/builtins/Temporal/PlainDate/PlainDate.prototype.valueOf.js b/Userland/Libraries/LibJS/Tests/builtins/Temporal/PlainDate/PlainDate.prototype.valueOf.js
new file mode 100644
index 0000000000..293eb6f907
--- /dev/null
+++ b/Userland/Libraries/LibJS/Tests/builtins/Temporal/PlainDate/PlainDate.prototype.valueOf.js
@@ -0,0 +1,7 @@
+test("errors", () => {
+    test("throws TypeError", () => {
+        expect(() => {
+            new Temporal.PlainDate(2021, 7, 21).valueOf();
+        }).toThrowWithMessage(TypeError, "Cannot convert Temporal.PlainDate to a primitive value");
+    });
+});
