commit 8564f6f6d81270ec2306a2c5ee3697ef0366d3ae
Author: Florian Mayer <fmayer@google.com>
Date:   Tue May 25 13:34:49 2021 +0100

    Check Optional before using it.
    
    Change-Id: I8fef86ee7e12b3cee2c61205f2f8de350e93c8cf

diff --git a/src/trace_processor/importers/proto/track_event_parser.cc b/src/trace_processor/importers/proto/track_event_parser.cc
index 7926bd30c..6be84c52c 100644
--- a/src/trace_processor/importers/proto/track_event_parser.cc
+++ b/src/trace_processor/importers/proto/track_event_parser.cc
@@ -69,69 +69,71 @@ constexpr int64_t kPendingThreadInstructionDelta = -1;
 class TrackEventArgsParser : public util::ProtoToArgsParser::Delegate {
  public:
   TrackEventArgsParser(BoundInserter& inserter,
                        TraceStorage& storage,
                        PacketSequenceStateGeneration& sequence_state)
       : inserter_(inserter),
         storage_(storage),
         sequence_state_(sequence_state) {}
   ~TrackEventArgsParser() override;
 
   using Key = util::ProtoToArgsParser::Key;
 
   void AddInteger(const Key& key, int64_t value) final {
     inserter_.AddArg(storage_.InternString(base::StringView(key.flat_key)),
                      storage_.InternString(base::StringView(key.key)),
                      Variadic::Integer(value));
   }
   void AddUnsignedInteger(const Key& key, uint64_t value) final {
     inserter_.AddArg(storage_.InternString(base::StringView(key.flat_key)),
                      storage_.InternString(base::StringView(key.key)),
                      Variadic::UnsignedInteger(value));
   }
   void AddString(const Key& key, const protozero::ConstChars& value) final {
     inserter_.AddArg(storage_.InternString(base::StringView(key.flat_key)),
                      storage_.InternString(base::StringView(key.key)),
                      Variadic::String(storage_.InternString(value)));
   }
   void AddDouble(const Key& key, double value) final {
     inserter_.AddArg(storage_.InternString(base::StringView(key.flat_key)),
                      storage_.InternString(base::StringView(key.key)),
                      Variadic::Real(value));
   }
   void AddPointer(const Key& key, const void* value) final {
     inserter_.AddArg(storage_.InternString(base::StringView(key.flat_key)),
                      storage_.InternString(base::StringView(key.key)),
                      Variadic::Pointer(reinterpret_cast<uintptr_t>(value)));
   }
   void AddBoolean(const Key& key, bool value) final {
     inserter_.AddArg(storage_.InternString(base::StringView(key.flat_key)),
                      storage_.InternString(base::StringView(key.key)),
                      Variadic::Boolean(value));
   }
   bool AddJson(const Key& key, const protozero::ConstChars& value) final {
     auto json_value = json::ParseJsonString(value);
+    if (!json_value)
+      return false;
     return json::AddJsonValueToArgs(*json_value, base::StringView(key.flat_key),
                                     base::StringView(key.key), &storage_,
                                     &inserter_);
   }
 
   size_t GetArrayEntryIndex(const std::string& array_key) final {
     return inserter_.GetNextArrayEntryIndex(
         storage_.InternString(base::StringView(array_key)));
   }
 
   size_t IncrementArrayEntryIndex(const std::string& array_key) final {
     return inserter_.IncrementArrayEntryIndex(
         storage_.InternString(base::StringView(array_key)));
   }
 
   InternedMessageView* GetInternedMessageView(uint32_t field_id,
                                               uint64_t iid) final {
     return sequence_state_.GetInternedMessageView(field_id, iid);
   }
 
  private:
   BoundInserter& inserter_;
   TraceStorage& storage_;
   PacketSequenceStateGeneration& sequence_state_;
 };
