commit 2d3deb58df05c4686f19ecf16ddbd76a79b2d5a5
Author: Yifeng Sun <pkusunyifeng@gmail.com>
Date:   Thu Nov 1 10:33:03 2018 -0700

    odp-util: Validate close-brace in scan_geneve and fix return values of san_xxx functions
    
    This patch adds validation of close-braces in scan_geneve. An simple
    example is "set(encap(tunnel(geneve({{))))". When scan_geneve returns,
    (struct geneve_scan *key)->len equals to 2*sizeof(struct geneve_opt).
    That seems not correct.
    
    Found this issue while inspecting oss-fuzz
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=11153.
    
    In addition, SCAN_TYPE expects scan_XXX functions to return 0
    on errors. This patch inspects all related scan_XXX functions
    and fixes their return values.
    
    Signed-off-by: Yifeng Sun <pkusunyifeng@gmail.com>
    Signed-off-by: Ben Pfaff <blp@ovn.org>

diff --git a/lib/odp-util.c b/lib/odp-util.c
index 626a03b76..f50de7fd2 100644
--- a/lib/odp-util.c
+++ b/lib/odp-util.c
@@ -4804,41 +4804,41 @@ static int
 scan_vxlan_gbp(const char *s, uint32_t *key, uint32_t *mask)
 {
     const char *s_base = s;
     ovs_be16 id = 0, id_mask = 0;
     uint8_t flags = 0, flags_mask = 0;
     int len;
 
     if (!strncmp(s, "id=", 3)) {
         s += 3;
         len = scan_be16(s, &id, mask ? &id_mask : NULL);
         if (len == 0) {
-            return -EINVAL;
+            return 0;
         }
         s += len;
     }
 
     if (s[0] == ',') {
         s++;
     }
     if (!strncmp(s, "flags=", 6)) {
         s += 6;
         len = scan_u8(s, &flags, mask ? &flags_mask : NULL);
         if (len == 0) {
-            return -EINVAL;
+            return 0;
         }
         s += len;
     }
 
     if (!strncmp(s, "))", 2)) {
         s += 2;
 
         *key = (flags << 16) | ntohs(id);
         if (mask) {
             *mask = (flags_mask << 16) | ntohs(id_mask);
         }
 
         return s - s_base;
     }
 
     return 0;
 }
@@ -4847,79 +4847,79 @@ static int
 scan_erspan_metadata(const char *s,
                      struct erspan_metadata *key,
                      struct erspan_metadata *mask)
 {
     const char *s_base = s;
     uint32_t idx = 0, idx_mask = 0;
     uint8_t ver = 0, dir = 0, hwid = 0;
     uint8_t ver_mask = 0, dir_mask = 0, hwid_mask = 0;
     int len;
 
     if (!strncmp(s, "ver=", 4)) {
         s += 4;
         len = scan_u8(s, &ver, mask ? &ver_mask : NULL);
         if (len == 0) {
-            return -EINVAL;
+            return 0;
         }
         s += len;
     }
 
     if (s[0] == ',') {
         s++;
     }
 
     if (ver == 1) {
         if (!strncmp(s, "idx=", 4)) {
             s += 4;
             len = scan_u32(s, &idx, mask ? &idx_mask : NULL);
             if (len == 0) {
-                return -EINVAL;
+                return 0;
             }
             s += len;
         }
 
         if (!strncmp(s, ")", 1)) {
             s += 1;
             key->version = ver;
             key->u.index = htonl(idx);
             if (mask) {
                 mask->u.index = htonl(idx_mask);
             }
         }
         return s - s_base;
 
     } else if (ver == 2) {
         if (!strncmp(s, "dir=", 4)) {
             s += 4;
             len = scan_u8(s, &dir, mask ? &dir_mask : NULL);
             if (len == 0) {
-                return -EINVAL;
+                return 0;
             }
             s += len;
         }
         if (s[0] == ',') {
             s++;
         }
         if (!strncmp(s, "hwid=", 5)) {
             s += 5;
             len = scan_u8(s, &hwid, mask ? &hwid_mask : NULL);
             if (len == 0) {
-                return -EINVAL;
+                return 0;
             }
             s += len;
         }
 
         if (!strncmp(s, ")", 1)) {
             s += 1;
             key->version = ver;
             key->u.md2.hwid = hwid;
             key->u.md2.dir = dir;
             if (mask) {
                 mask->u.md2.hwid = hwid_mask;
                 mask->u.md2.dir = dir_mask;
             }
         }
         return s - s_base;
     }
 
     return 0;
 }
@@ -4928,107 +4928,109 @@ static int
 scan_geneve(const char *s, struct geneve_scan *key, struct geneve_scan *mask)
 {
     const char *s_base = s;
     struct geneve_opt *opt = key->d;
     struct geneve_opt *opt_mask = mask ? mask->d : NULL;
     int len_remain = sizeof key->d;
     int len;
 
     while (s[0] == '{' && len_remain >= sizeof *opt) {
         int data_len = 0;
 
         s++;
         len_remain -= sizeof *opt;
 
         if (!strncmp(s, "class=", 6)) {
             s += 6;
             len = scan_be16(s, &opt->opt_class,
                             mask ? &opt_mask->opt_class : NULL);
             if (len == 0) {
-                return -EINVAL;
+                return 0;
             }
             s += len;
         } else if (mask) {
             memset(&opt_mask->opt_class, 0, sizeof opt_mask->opt_class);
         }
 
         if (s[0] == ',') {
             s++;
         }
         if (!strncmp(s, "type=", 5)) {
             s += 5;
             len = scan_u8(s, &opt->type, mask ? &opt_mask->type : NULL);
             if (len == 0) {
-                return -EINVAL;
+                return 0;
             }
             s += len;
         } else if (mask) {
             memset(&opt_mask->type, 0, sizeof opt_mask->type);
         }
 
         if (s[0] == ',') {
             s++;
         }
         if (!strncmp(s, "len=", 4)) {
             uint8_t opt_len, opt_len_mask;
             s += 4;
             len = scan_u8(s, &opt_len, mask ? &opt_len_mask : NULL);
             if (len == 0) {
-                return -EINVAL;
+                return 0;
             }
             s += len;
 
             if (opt_len > 124 || opt_len % 4 || opt_len > len_remain) {
                 return 0;
             }
             opt->length = opt_len / 4;
             if (mask) {
                 opt_mask->length = opt_len_mask;
             }
             data_len = opt_len;
         } else if (mask) {
             memset(&opt_mask->type, 0, sizeof opt_mask->type);
         }
 
         if (s[0] == ',') {
             s++;
         }
         if (parse_int_string(s, (uint8_t *)(opt + 1), data_len, (char **)&s)) {
             return 0;
         }
 
         if (mask) {
             if (s[0] == '/') {
                 s++;
                 if (parse_int_string(s, (uint8_t *)(opt_mask + 1),
                                      data_len, (char **)&s)) {
                     return 0;
                 }
             }
             opt_mask->r1 = 0;
             opt_mask->r2 = 0;
             opt_mask->r3 = 0;
         }
 
         if (s[0] == '}') {
             s++;
             opt += 1 + data_len / 4;
             if (mask) {
                 opt_mask += 1 + data_len / 4;
             }
             len_remain -= data_len;
+        } else {
+            return 0;
         }
     }
 
     if (s[0] == ')') {
         len = sizeof key->d - len_remain;
 
         s++;
         key->len = len;
         if (mask) {
             mask->len = len;
         }
         return s - s_base;
     }
 
     return 0;
 }
