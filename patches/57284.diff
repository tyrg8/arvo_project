commit 7fbd454d9f70f0f0c0a0c27a7d541fed4d038c2a
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Tue Mar 21 13:26:36 2023 +0100

    parser: Grow input buffer earlier when reading characters
    
    Make more bytes available after invoking CUR_CHAR or NEXT.

diff --git a/HTMLparser.c b/HTMLparser.c
index 3bebda6e..b8b6bd23 100644
--- a/HTMLparser.c
+++ b/HTMLparser.c
@@ -401,135 +401,135 @@ static int
 htmlCurrentChar(xmlParserCtxtPtr ctxt, int *len) {
     const unsigned char *cur;
     unsigned char c;
     unsigned int val;
 
     if (ctxt->instate == XML_PARSER_EOF)
 	return(0);
 
     if (ctxt->token != 0) {
 	*len = 0;
 	return(ctxt->token);
     }
 
-    if ((ctxt->input->end - ctxt->input->cur < 4) &&
+    if ((ctxt->input->end - ctxt->input->cur < INPUT_CHUNK) &&
         (xmlParserGrow(ctxt) < 0))
         return(0);
 
     if (ctxt->charset != XML_CHAR_ENCODING_UTF8) {
         xmlChar * guess;
         xmlCharEncodingHandlerPtr handler;
 
         /*
          * Assume it's a fixed length encoding (1) with
          * a compatible encoding for the ASCII set, since
          * HTML constructs only use < 128 chars
          */
         if (*ctxt->input->cur < 0x80) {
             *len = 1;
             if ((*ctxt->input->cur == 0) &&
                 (ctxt->input->cur < ctxt->input->end)) {
                 htmlParseErrInt(ctxt, XML_ERR_INVALID_CHAR,
                                 "Char 0x%X out of allowed range\n", 0);
                 return(' ');
             }
             return(*ctxt->input->cur);
         }
 
         /*
          * Humm this is bad, do an automatic flow conversion
          */
         guess = htmlFindEncoding(ctxt);
         if (guess == NULL) {
             xmlSwitchEncoding(ctxt, XML_CHAR_ENCODING_8859_1);
         } else {
             if (ctxt->input->encoding != NULL)
                 xmlFree((xmlChar *) ctxt->input->encoding);
             ctxt->input->encoding = guess;
             handler = xmlFindCharEncodingHandler((const char *) guess);
             if (handler != NULL) {
                 /*
                  * Don't use UTF-8 encoder which isn't required and
                  * can produce invalid UTF-8.
                  */
                 if (!xmlStrEqual(BAD_CAST handler->name, BAD_CAST "UTF-8"))
                     xmlSwitchToEncoding(ctxt, handler);
             } else {
                 htmlParseErr(ctxt, XML_ERR_INVALID_ENCODING,
                              "Unsupported encoding %s", guess, NULL);
             }
         }
         ctxt->charset = XML_CHAR_ENCODING_UTF8;
     }
 
     /*
      * We are supposed to handle UTF8, check it's valid
      * From rfc2044: encoding of the Unicode values on UTF-8:
      *
      * UCS-4 range (hex.)           UTF-8 octet sequence (binary)
      * 0000 0000-0000 007F   0xxxxxxx
      * 0000 0080-0000 07FF   110xxxxx 10xxxxxx
      * 0000 0800-0000 FFFF   1110xxxx 10xxxxxx 10xxxxxx
      *
      * Check for the 0x110000 limit too
      */
     cur = ctxt->input->cur;
     c = *cur;
     if (c & 0x80) {
         size_t avail;
 
         if ((c & 0x40) == 0)
             goto encoding_error;
 
         avail = ctxt->input->end - ctxt->input->cur;
 
         if ((avail < 2) || ((cur[1] & 0xc0) != 0x80))
             goto encoding_error;
         if ((c & 0xe0) == 0xe0) {
             if ((avail < 3) || ((cur[2] & 0xc0) != 0x80))
                 goto encoding_error;
             if ((c & 0xf0) == 0xf0) {
                 if (((c & 0xf8) != 0xf0) ||
                     (avail < 4) || ((cur[3] & 0xc0) != 0x80))
                     goto encoding_error;
                 /* 4-byte code */
                 *len = 4;
                 val = (cur[0] & 0x7) << 18;
                 val |= (cur[1] & 0x3f) << 12;
                 val |= (cur[2] & 0x3f) << 6;
                 val |= cur[3] & 0x3f;
                 if (val < 0x10000)
                     goto encoding_error;
             } else {
               /* 3-byte code */
                 *len = 3;
                 val = (cur[0] & 0xf) << 12;
                 val |= (cur[1] & 0x3f) << 6;
                 val |= cur[2] & 0x3f;
                 if (val < 0x800)
                     goto encoding_error;
             }
         } else {
           /* 2-byte code */
             *len = 2;
             val = (cur[0] & 0x1f) << 6;
             val |= cur[1] & 0x3f;
             if (val < 0x80)
                 goto encoding_error;
         }
         if (!IS_CHAR(val)) {
             htmlParseErrInt(ctxt, XML_ERR_INVALID_CHAR,
                             "Char 0x%X out of allowed range\n", val);
         }
         return(val);
     } else {
         if ((*ctxt->input->cur == 0) &&
             (ctxt->input->cur < ctxt->input->end)) {
             htmlParseErrInt(ctxt, XML_ERR_INVALID_CHAR,
                             "Char 0x%X out of allowed range\n", 0);
             *len = 1;
             return(' ');
         }
         /* 1-byte code */
         *len = 1;
         return(*ctxt->input->cur);
     }
diff --git a/parserInternals.c b/parserInternals.c
index a06bb76a..52491505 100644
--- a/parserInternals.c
+++ b/parserInternals.c
@@ -517,108 +517,108 @@ void
 xmlNextChar(xmlParserCtxtPtr ctxt)
 {
     if ((ctxt == NULL) || (ctxt->instate == XML_PARSER_EOF) ||
         (ctxt->input == NULL))
         return;
 
     if (!(VALID_CTXT(ctxt))) {
         xmlErrInternal(ctxt, "Parser input data memory error\n", NULL);
 	ctxt->errNo = XML_ERR_INTERNAL_ERROR;
         xmlStopParser(ctxt);
 	return;
     }
 
-    if (ctxt->input->end - ctxt->input->cur < 4) {
+    if (ctxt->input->end - ctxt->input->cur < INPUT_CHUNK) {
         if (xmlParserGrow(ctxt) < 0)
             return;
         if (ctxt->input->cur >= ctxt->input->end)
             return;
     }
 
     if (ctxt->charset == XML_CHAR_ENCODING_UTF8) {
         const unsigned char *cur;
         unsigned char c;
 
         /*
          *   2.11 End-of-Line Handling
          *   the literal two-character sequence "#xD#xA" or a standalone
          *   literal #xD, an XML processor must pass to the application
          *   the single character #xA.
          */
         if (*(ctxt->input->cur) == '\n') {
             ctxt->input->line++; ctxt->input->col = 1;
         } else
             ctxt->input->col++;
 
         /*
          * We are supposed to handle UTF8, check it's valid
          * From rfc2044: encoding of the Unicode values on UTF-8:
          *
          * UCS-4 range (hex.)           UTF-8 octet sequence (binary)
          * 0000 0000-0000 007F   0xxxxxxx
          * 0000 0080-0000 07FF   110xxxxx 10xxxxxx
          * 0000 0800-0000 FFFF   1110xxxx 10xxxxxx 10xxxxxx
          *
          * Check for the 0x110000 limit too
          */
         cur = ctxt->input->cur;
 
         c = *cur;
         if (c & 0x80) {
             size_t avail;
 
             if (c == 0xC0)
 	        goto encoding_error;
 
             avail = ctxt->input->end - ctxt->input->cur;
 
             if ((avail < 2) || (cur[1] & 0xc0) != 0x80)
                 goto encoding_error;
             if ((c & 0xe0) == 0xe0) {
                 unsigned int val;
 
                 if ((avail < 3) || (cur[2] & 0xc0) != 0x80)
                     goto encoding_error;
                 if ((c & 0xf0) == 0xf0) {
                     if (((c & 0xf8) != 0xf0) ||
                         (avail < 4) || ((cur[3] & 0xc0) != 0x80))
                         goto encoding_error;
                     /* 4-byte code */
                     ctxt->input->cur += 4;
                     val = (cur[0] & 0x7) << 18;
                     val |= (cur[1] & 0x3f) << 12;
                     val |= (cur[2] & 0x3f) << 6;
                     val |= cur[3] & 0x3f;
                 } else {
                     /* 3-byte code */
                     ctxt->input->cur += 3;
                     val = (cur[0] & 0xf) << 12;
                     val |= (cur[1] & 0x3f) << 6;
                     val |= cur[2] & 0x3f;
                 }
                 if (((val > 0xd7ff) && (val < 0xe000)) ||
                     ((val > 0xfffd) && (val < 0x10000)) ||
                     (val >= 0x110000)) {
 		xmlErrEncodingInt(ctxt, XML_ERR_INVALID_CHAR,
 				  "Char 0x%X out of allowed range\n",
 				  val);
                 }
             } else
                 /* 2-byte code */
                 ctxt->input->cur += 2;
         } else
             /* 1-byte code */
             ctxt->input->cur++;
     } else {
         /*
          * Assume it's a fixed length encoding (1) with
          * a compatible encoding for the ASCII set, since
          * XML constructs only use < 128 chars
          */
 
         if (*(ctxt->input->cur) == '\n') {
             ctxt->input->line++; ctxt->input->col = 1;
         } else
             ctxt->input->col++;
         ctxt->input->cur++;
     }
     return;
@@ -672,107 +672,107 @@ int
 xmlCurrentChar(xmlParserCtxtPtr ctxt, int *len) {
     if ((ctxt == NULL) || (len == NULL) || (ctxt->input == NULL)) return(0);
     if (ctxt->instate == XML_PARSER_EOF)
 	return(0);
 
-    if ((ctxt->input->end - ctxt->input->cur < 4) &&
+    if ((ctxt->input->end - ctxt->input->cur < INPUT_CHUNK) &&
         (xmlParserGrow(ctxt) < 0))
         return(0);
 
     if ((*ctxt->input->cur >= 0x20) && (*ctxt->input->cur <= 0x7F)) {
 	    *len = 1;
 	    return(*ctxt->input->cur);
     }
     if (ctxt->charset == XML_CHAR_ENCODING_UTF8) {
 	/*
 	 * We are supposed to handle UTF8, check it's valid
 	 * From rfc2044: encoding of the Unicode values on UTF-8:
 	 *
 	 * UCS-4 range (hex.)           UTF-8 octet sequence (binary)
 	 * 0000 0000-0000 007F   0xxxxxxx
 	 * 0000 0080-0000 07FF   110xxxxx 10xxxxxx
 	 * 0000 0800-0000 FFFF   1110xxxx 10xxxxxx 10xxxxxx
 	 *
 	 * Check for the 0x110000 limit too
 	 */
 	const unsigned char *cur = ctxt->input->cur;
 	unsigned char c;
 	unsigned int val;
 
 	c = *cur;
 	if (c & 0x80) {
             size_t avail;
 
 	    if (((c & 0x40) == 0) || (c == 0xC0))
 		goto encoding_error;
 
             avail = ctxt->input->end - ctxt->input->cur;
 
 	    if ((avail < 2) || (cur[1] & 0xc0) != 0x80)
 		goto encoding_error;
 	    if ((c & 0xe0) == 0xe0) {
 		if ((avail < 3) || (cur[2] & 0xc0) != 0x80)
 		    goto encoding_error;
 		if ((c & 0xf0) == 0xf0) {
 		    if (((c & 0xf8) != 0xf0) ||
 			(avail < 4) || ((cur[3] & 0xc0) != 0x80))
 			goto encoding_error;
 		    /* 4-byte code */
 		    *len = 4;
 		    val = (cur[0] & 0x7) << 18;
 		    val |= (cur[1] & 0x3f) << 12;
 		    val |= (cur[2] & 0x3f) << 6;
 		    val |= cur[3] & 0x3f;
 		    if (val < 0x10000)
 			goto encoding_error;
 		} else {
 		  /* 3-byte code */
 		    *len = 3;
 		    val = (cur[0] & 0xf) << 12;
 		    val |= (cur[1] & 0x3f) << 6;
 		    val |= cur[2] & 0x3f;
 		    if (val < 0x800)
 			goto encoding_error;
 		}
 	    } else {
 	      /* 2-byte code */
 		*len = 2;
 		val = (cur[0] & 0x1f) << 6;
 		val |= cur[1] & 0x3f;
 		if (val < 0x80)
 		    goto encoding_error;
 	    }
 	    if (!IS_CHAR(val)) {
 	        xmlErrEncodingInt(ctxt, XML_ERR_INVALID_CHAR,
 				  "Char 0x%X out of allowed range\n", val);
 	    }
 	    return(val);
 	} else {
 	    /* 1-byte code */
 	    *len = 1;
 	    if ((*ctxt->input->cur == 0) &&
 	        (ctxt->input->end > ctxt->input->cur)) {
 	        xmlErrEncodingInt(ctxt, XML_ERR_INVALID_CHAR,
 				  "Char 0x0 out of allowed range\n", 0);
 	    }
 	    if (*ctxt->input->cur == 0xD) {
 		if (ctxt->input->cur[1] == 0xA) {
 		    ctxt->input->cur++;
 		}
 		return(0xA);
 	    }
 	    return(*ctxt->input->cur);
 	}
     }
     /*
      * Assume it's a fixed length encoding (1) with
      * a compatible encoding for the ASCII set, since
      * XML constructs only use < 128 chars
      */
     *len = 1;
     if (*ctxt->input->cur == 0xD) {
 	if (ctxt->input->cur[1] == 0xA) {
 	    ctxt->input->cur++;
 	}
 	return(0xA);
     }
     return(*ctxt->input->cur);
