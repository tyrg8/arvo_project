commit ce2ec60049b7695416d5ea5180469143ef0fc0bf
Author: Julius Pfrommer <julius.pfrommer@web.de>
Date:   Thu Jul 22 14:29:10 2021 +0200

    style(server): Cosmetic simplification in server.h

diff --git a/include/open62541/server.h b/include/open62541/server.h
index 5de3186ec..c0c93df97 100644
--- a/include/open62541/server.h
+++ b/include/open62541/server.h
@@ -1080,24 +1080,27 @@ UA_StatusCode UA_EXPORT UA_THREADSAFE
 UA_Server_setMethodNode_callback(UA_Server *server,
                                  const UA_NodeId methodNodeId,
                                  UA_MethodCallback methodCallback);
+
+UA_CallMethodResult UA_EXPORT UA_THREADSAFE
+UA_Server_call(UA_Server *server, const UA_CallMethodRequest *request);
 #endif
 
 /**
  * .. _object-interaction:
  *
  * Interacting with Objects
  * ------------------------
  * Objects in the information model are represented as ObjectNodes. Some
  * convenience functions are provided to simplify the interaction with objects.
  */
 
 /* Write an object property. The property is represented as a VariableNode with
  * a ``HasProperty`` reference from the ObjectNode. The VariableNode is
  * identified by its BrowseName. Writing the property sets the value attribute
  * of the VariableNode.
  *
  * @param server The server object
  * @param objectId The identifier of the object (node)
  * @param propertyName The name of the property
  * @param value The value to be set for the event attribute
  * @return The StatusCode for setting the event attribute */
@@ -1123,39 +1126,34 @@ UA_StatusCode UA_EXPORT UA_THREADSAFE
 UA_Server_readObjectProperty(UA_Server *server, const UA_NodeId objectId,
                              const UA_QualifiedName propertyName,
                              UA_Variant *value);
 
-#ifdef UA_ENABLE_METHODCALLS
-UA_CallMethodResult UA_EXPORT UA_THREADSAFE
-UA_Server_call(UA_Server *server, const UA_CallMethodRequest *request);
-#endif
-
 /**
  * .. _addnodes:
  *
  * Node Addition and Deletion
  * --------------------------
  * When creating dynamic node instances at runtime, chances are that you will
  * not care about the specific NodeId of the new node, as long as you can
  * reference it later. When passing numeric NodeIds with a numeric identifier 0,
  * the stack evaluates this as "select a random unassigned numeric NodeId in
  * that namespace". To find out which NodeId was actually assigned to the new
  * node, you may pass a pointer `outNewNodeId`, which will (after a successful
  * node insertion) contain the nodeId of the new node. You may also pass a
  * ``NULL`` pointer if this result is not needed.
  *
  * See the Section :ref:`node-lifecycle` on constructors and on attaching
  * user-defined data to nodes.
  *
  * The methods for node addition and deletion take mostly const arguments that
  * are not modified. When creating a node, a deep copy of the node identifier,
  * node attributes, etc. is created. Therefore, it is possible to call for
  * example ``UA_Server_addVariablenode`` with a value attribute (a
  * :ref:`variant`) pointing to a memory location on the stack. If you need
  * changes to a variable value to manifest at a specific memory location, please
  * use a :ref:`datasource` or a :ref:`value-callback`. */
 
 /* Protect against redundant definitions for server/client */
 #ifndef UA_DEFAULT_ATTRIBUTES_DEFINED
 #define UA_DEFAULT_ATTRIBUTES_DEFINED
 /* The default for variables is "BaseDataType" for the datatype, -2 for the
  * valuerank and a read-accesslevel. */
