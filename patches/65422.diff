commit 87f206b42d71fbf1c5601ce6679d22d0777e79bb
Author: akshayragir833 <110660198+akshayragir833@users.noreply.github.com>
Date:   Tue Jan 2 19:07:05 2024 +0530

    Fix for the Use-of-uninitialized-value in ixheaace_frame_info_generator (#75)
    
    These changes handle the runtime error reported by preventing the
    inappropriate access of uninitialized member from a structure.
    
    Bug: ossFuzz: 65422
    Test: poc in bug

diff --git a/encoder/ixheaace_sbr_main.c b/encoder/ixheaace_sbr_main.c
index a708db2..ba8fd00 100644
--- a/encoder/ixheaace_sbr_main.c
+++ b/encoder/ixheaace_sbr_main.c
@@ -423,111 +423,111 @@ UWORD32 ixheaace_sbr_limit_bitrate(UWORD32 bit_rate, UWORD32 num_ch, UWORD32 cor
 VOID ixheaace_adjust_sbr_settings(const ixheaace_pstr_sbr_cfg pstr_config, UWORD32 bit_rate,
                                   UWORD32 num_ch, UWORD32 fs_core, UWORD32 trans_fac,
                                   UWORD32 std_br, ixheaace_str_qmf_tabs *pstr_qmf_tab,
                                   WORD32 aot) {
   FLAG table_found = IXHEAACE_TABLE_IDX_NOT_FOUND;
   WORD32 idx_sr = 0;
   WORD32 idx_ch = 0;
   WORD32 idx_entry = 0;
   /* set the codec settings */
   pstr_config->codec_settings.bit_rate = bit_rate;
   pstr_config->codec_settings.num_channels = num_ch;
   pstr_config->codec_settings.sample_freq = fs_core;
   pstr_config->codec_settings.trans_fac = trans_fac;
   pstr_config->codec_settings.standard_bitrate = std_br;
 
   if (bit_rate <= 20000) {
     pstr_config->parametric_coding = 0;
     pstr_config->use_speech_config = 1;
   }
 
   table_found = ia_enhaacplus_enc_get_sbr_tuning_table_idx(
       bit_rate, num_ch, fs_core, pstr_qmf_tab, NULL, &idx_sr, &idx_ch, &idx_entry,
       ((AOT_AAC_ELD == aot) ? pstr_qmf_tab->sbr_tuning_table_ld
                             : pstr_qmf_tab->sbr_tuning_table_lc));
 
   if (table_found == IXHEAACE_TABLE_IDX_NOT_FOUND) {
     if (aot == AOT_USAC) {
       if (num_ch == 1) {
         if (bit_rate >= 30000) {
           pstr_config->start_freq = 7;
           pstr_config->stop_freq = 9;
         } else {
           pstr_config->start_freq = 5;
           pstr_config->stop_freq = 7;
         }
       } else {
         pstr_config->start_freq = 12;
         pstr_config->stop_freq = 9;
       }
     }
   } else {
     switch (aot) {
       case AOT_AAC_ELD: {
         pstr_config->start_freq =
             pstr_qmf_tab->sbr_tuning_table_ld[idx_sr][idx_ch][idx_entry].freq_band.start_freq;
         pstr_config->stop_freq =
             pstr_qmf_tab->sbr_tuning_table_ld[idx_sr][idx_ch][idx_entry].freq_band.stop_freq;
 
         pstr_config->sbr_noise_bands =
             pstr_qmf_tab->sbr_tuning_table_ld[idx_sr][idx_ch][idx_entry].noise.num_noise_bands;
 
         pstr_config->noise_floor_offset =
             pstr_qmf_tab->sbr_tuning_table_ld[idx_sr][idx_ch][idx_entry].noise.noise_floor_offset;
 
         pstr_config->ana_max_level =
             pstr_qmf_tab->sbr_tuning_table_ld[idx_sr][idx_ch][idx_entry].noise.noise_max_level;
         pstr_config->stereo_mode =
             pstr_qmf_tab->sbr_tuning_table_ld[idx_sr][idx_ch][idx_entry].stereo_mode;
         pstr_config->freq_scale =
             pstr_qmf_tab->sbr_tuning_table_ld[idx_sr][idx_ch][idx_entry].freq_scale;
         break;
       }
       default: {
         pstr_config->start_freq =
             pstr_qmf_tab->sbr_tuning_table_lc[idx_sr][idx_ch][idx_entry].freq_band.start_freq;
         pstr_config->stop_freq =
             pstr_qmf_tab->sbr_tuning_table_lc[idx_sr][idx_ch][idx_entry].freq_band.stop_freq;
 
         pstr_config->sbr_noise_bands =
             pstr_qmf_tab->sbr_tuning_table_lc[idx_sr][idx_ch][idx_entry].noise.num_noise_bands;
 
         pstr_config->noise_floor_offset =
             pstr_qmf_tab->sbr_tuning_table_lc[idx_sr][idx_ch][idx_entry].noise.noise_floor_offset;
 
         pstr_config->ana_max_level =
             pstr_qmf_tab->sbr_tuning_table_lc[idx_sr][idx_ch][idx_entry].noise.noise_max_level;
         pstr_config->stereo_mode =
             pstr_qmf_tab->sbr_tuning_table_lc[idx_sr][idx_ch][idx_entry].stereo_mode;
         pstr_config->freq_scale =
             pstr_qmf_tab->sbr_tuning_table_lc[idx_sr][idx_ch][idx_entry].freq_scale;
         break;
       }
     }
-    pstr_config->use_low_freq_res = 0;
+
     if (pstr_config->sbr_codec == ELD_SBR) {
       pstr_config->send_header_data_time = -1;
       if ((num_ch == NUM_CHANS_MONO) && (bit_rate <= 22000)) {
         pstr_config->use_low_freq_res = 1;
       }
       if ((num_ch == NUM_CHANS_STEREO) && (bit_rate <= 48000)) {
         pstr_config->use_low_freq_res = 1;
       }
     }
     else {
       if ((num_ch == NUM_CHANS_MONO) && (bit_rate <= 18000)) {
         pstr_config->use_low_freq_res = 1;
       }
       if ((num_ch == NUM_CHANS_STEREO) && (bit_rate <= 28000)) {
         pstr_config->use_low_freq_res = 1;
       }
     }
     if (bit_rate <= 20000) {
       pstr_config->parametric_coding = 0;
       pstr_config->use_speech_config = 1;
     }
 
     if (pstr_config->use_ps) {
       pstr_config->ps_mode = ixheaace_get_ps_mode(bit_rate);
     }
   }
 }
@@ -535,52 +535,53 @@ VOID ixheaace_adjust_sbr_settings(const ixheaace_pstr_sbr_cfg pstr_config, UWORD
 VOID ixheaace_initialize_sbr_defaults(ixheaace_pstr_sbr_cfg pstr_config) {
   pstr_config->send_header_data_time = 500;
   pstr_config->crc_sbr = 0;
   pstr_config->tran_thr = 13000;
   pstr_config->detect_missing_harmonics = 1;
   pstr_config->parametric_coding = 1;
   pstr_config->use_speech_config = 0;
 
   pstr_config->sbr_data_extra = 0;
   pstr_config->amp_res = IXHEAACE_SBR_AMP_RES_3_0;
   pstr_config->tran_fc = 0;
   pstr_config->tran_det_mode = 1;
   pstr_config->spread = 1;
   pstr_config->stat = 0;
   pstr_config->e = 1;
   pstr_config->delta_t_across_frames = 1;
   pstr_config->df_edge_1st_env = 0.3f;
   pstr_config->df_edge_incr = 0.3f;
 
   pstr_config->sbr_invf_mode = IXHEAACE_INVF_SWITCHED;
   pstr_config->sbr_xpos_mode = IXHEAACE_XPOS_LC;
   pstr_config->sbr_xpos_ctrl = SBR_XPOS_CTRL_DEFAULT;
   pstr_config->sbr_xpos_lvl = 0;
 
   pstr_config->use_ps = 0;
   pstr_config->ps_mode = -1;
 
   pstr_config->stereo_mode = IXHEAACE_SBR_MODE_SWITCH_LRC;
   pstr_config->ana_max_level = 6;
   pstr_config->noise_floor_offset = 0;
   pstr_config->start_freq = 5;
   pstr_config->stop_freq = 9;
 
   pstr_config->freq_scale = SBR_FREQ_SCALE_DEFAULT;
   pstr_config->alter_scale = SBR_ALTER_SCALE_DEFAULT;
   pstr_config->sbr_noise_bands = SBR_NOISE_BANDS_DEFAULT;
 
   pstr_config->sbr_limiter_bands = SBR_LIMITER_BANDS_DEFAULT;
   pstr_config->sbr_limiter_gains = SBR_LIMITER_GAINS_DEFAULT;
   pstr_config->sbr_interpol_freq = SBR_INTERPOL_FREQ_DEFAULT;
   pstr_config->sbr_smoothing_length = SBR_SMOOTHING_LENGTH_DEFAULT;
   pstr_config->is_ld_sbr = 0;
   pstr_config->is_esbr = 0;
   pstr_config->frame_flag_960 = 0;
   pstr_config->frame_flag_480 = 0;
   pstr_config->hq_esbr = 0;
   pstr_config->sbr_pvc_active = 0;
   pstr_config->sbr_harmonic = 0;
   pstr_config->sbr_ratio_idx = 0;  // NO_SBR
+  pstr_config->use_low_freq_res = 0;
 }
 
 static IA_ERRORCODE ia_enhaacplus_enc_update_freq_band_tab(
