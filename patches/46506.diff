commit 44283f701359c7b0bcf5e0b5466591c7442d081a
Author: L. Pereira <l@tia.mat.br>
Date:   Sat Apr 9 22:02:06 2022 -0700

    Address out-of-bounds read in huffman decoder for HTTP/2
    
    Since this code isn't being used at the moment, this is perfectly fine.
    It just means that the fuzzer is doing its job.
    
    This still needs to be optimized later, but let's not worry about that
    for now.  Let's just leave the fuzzer do its thing and find all the
    corner cases we'll need to think about when it's actually time to use
    this.
    
    Credits to oss-fuzz:
        https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=46506

diff --git a/fuzz/regression/clusterfuzz-testcase-minimized-h2_huffman_fuzzer-4703583657918464 b/fuzz/regression/clusterfuzz-testcase-minimized-h2_huffman_fuzzer-4703583657918464
new file mode 100644
index 00000000..790cc272
--- /dev/null
+++ b/fuzz/regression/clusterfuzz-testcase-minimized-h2_huffman_fuzzer-4703583657918464
@@ -0,0 +1 @@
+ ÿ    
\ No newline at end of file
diff --git a/src/lib/lwan-h2-huffman.c b/src/lib/lwan-h2-huffman.c
index 70cf23d6..c2c33848 100644
--- a/src/lib/lwan-h2-huffman.c
+++ b/src/lib/lwan-h2-huffman.c
@@ -299,10 +299,16 @@ static inline uint8_t peek_byte(struct bit_reader *reader)
 static inline bool consume(struct bit_reader *reader, int count)
 {
     assert(count > 0);
     reader->bitbuf <<= count;
     reader->bitcount -= count;
-    return !__builtin_sub_overflow(reader->total_bitcount, count,
-                                   &reader->total_bitcount);
+    if (__builtin_sub_overflow(reader->total_bitcount, count,
+                               &reader->total_bitcount)) {
+        return false;
+    }
+    if (reader->total_bitcount == 0) {
+        return false;
+    }
+    return true;
 }
 
 static inline size_t output_size(size_t input_size)
diff --git a/src/scripts/gentables.py b/src/scripts/gentables.py
index e957f367..ad5387a6 100755
--- a/src/scripts/gentables.py
+++ b/src/scripts/gentables.py
@@ -185,93 +185,97 @@ static inline uint8_t peek_byte(struct bit_reader *reader)
 static inline bool consume(struct bit_reader *reader, int count)
 {
     assert(count > 0);
     reader->bitbuf <<= count;
     reader->bitcount -= count;
-    return !__builtin_sub_overflow(reader->total_bitcount, count, &reader->total_bitcount);
+    if (__builtin_sub_overflow(reader->total_bitcount, count, &reader->total_bitcount))
+        return false;
+    if (reader->total_bitcount == 0)
+        return false;
+    return true;
 }
 """)
   
   print("""static inline size_t output_size(size_t input_size) {
   /* Smallest input is 5 bits which produces 8 bits. Scaling that to 8 bits, we
    * get 12.8 bits of output per 8 bits of input. */
   return (input_size * 128) / 10;
 }""")
 
   print("""uint8_t *h2_huffman_decode(const uint8_t *input, size_t input_len)
 {
     uint8_t *output = malloc(output_size(input_len));
     uint8_t *ret = output;
     struct bit_reader bit_reader = {.bitptr = input,
                                     .total_bitcount = input_len * 8};
 
     while ((int64_t)bit_reader.total_bitcount > 7) {
         uint8_t peeked_byte = peek_byte(&bit_reader);
         if (LIKELY(level0[peeked_byte].num_bits)) {
             *output++ = level0[peeked_byte].symbol;
             consume(&bit_reader, level0[peeked_byte].num_bits);
             continue;
         }
 
         if (!consume(&bit_reader, 8))
             goto fail;
 
         const struct h2_huffman_code *level1 = next_level0(peeked_byte);
         peeked_byte = peek_byte(&bit_reader);
         if (level1[peeked_byte].num_bits) {
             *output++ = level1[peeked_byte].symbol;
             consume(&bit_reader, level1[peeked_byte].num_bits);
             continue;
         }
 
         if (!consume(&bit_reader, 8))
             goto fail;
 
         const struct h2_huffman_code *level2 = next_level1(peeked_byte);
         peeked_byte = peek_byte(&bit_reader);
         if (level2[peeked_byte].num_bits) {
             *output++ = level2[peeked_byte].symbol;
             consume(&bit_reader, level2[peeked_byte].num_bits);
             continue;
         }
 
         if (!consume(&bit_reader, 8))
             goto fail;
 
         const struct h2_huffman_code *level3 = next_level2(peeked_byte);
         if (LIKELY(level3)) {
             peeked_byte = peek_byte(&bit_reader);
             if (UNLIKELY(level3[peeked_byte].num_bits < 0)) {
                 /* EOS found */
                 return ret;
             }
             if (LIKELY(level3[peeked_byte].num_bits)) {
                 *output++ = level3[peeked_byte].symbol;
                 consume(&bit_reader, level3[peeked_byte].num_bits);
                 continue;
             }
         }
 
         goto fail;
     }
 
     /* FIXME: ensure we're not promoting types unnecessarily here */
     if (bit_reader.total_bitcount) {
         const uint8_t peeked_byte = peek_byte(&bit_reader);
         const uint8_t eos_prefix = ((1 << bit_reader.total_bitcount) - 1)
                                    << (8 - bit_reader.total_bitcount);
 
         if ((peeked_byte & eos_prefix) == eos_prefix)
             goto done;
 
         if (level0[peeked_byte].num_bits == (int8_t)bit_reader.total_bitcount) {
             *output = level0[peeked_byte].symbol;
             goto done;
         }
 
         /* If we get here, then the remaining bits are either:
          *  - Not a prefix of EOS
          *  - Incomplete sequence
          *  - Has overlong padding
          */
         goto fail;
     }
