commit f95bdaf625a540cbd040508bfbb8808223f97aed
Author: Ivan Nardi <12729895+IvanNardi@users.noreply.github.com>
Date:   Thu Jan 19 14:12:51 2023 +0100

    Bittorrent: fix heap-buffer-overflow (#1863)
    
    ```
    ==258287==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60600068ff9d at pc 0x5653a6e35def bp 0x7ffeef5aa620 sp 0x7ffeef5a9dc8
    READ of size 22 at 0x60600068ff9d thread T0
        #0 0x5653a6e35dee in strncmp (/home/ivan/svnrepos/nDPI/fuzz/fuzz_ndpi_reader+0x4d2dee) (BuildId: 133b8c3c8ff99408109fcb9be2538bb8341f07f7)
        #1 0x5653a70d6624 in ndpi_search_bittorrent /home/ivan/svnrepos/nDPI/src/lib/protocols/bittorrent.c:500:71
        #2 0x5653a6ff255a in check_ndpi_detection_func /home/ivan/svnrepos/nDPI/src/lib/ndpi_main.c:5686:6
        #3 0x5653a6ff331b in check_ndpi_udp_flow_func /home/ivan/svnrepos/nDPI/src/lib/ndpi_main.c:5722:10
        #4 0x5653a6ff2cbc in ndpi_check_flow_func /home/ivan/svnrepos/nDPI/src/lib/ndpi_main.c:5755:12
        #5 0x5653a70016bf in ndpi_detection_process_packet /home/ivan/svnrepos/nDPI/src/lib/ndpi_main.c:6578:15
        #6 0x5653a6f1836d in packet_processing /home/ivan/svnrepos/nDPI/fuzz/../example/reader_util.c:1678:31
        #7 0x5653a6f140a1 in ndpi_workflow_process_packet /home/ivan/svnrepos/nDPI/fuzz/../example/reader_util.c:2256:10
    ```
    Found by oss-fuzz
    See: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=55218
    Fix: 470eaa6f

diff --git a/src/lib/protocols/bittorrent.c b/src/lib/protocols/bittorrent.c
index 852b7cba..64e46a4e 100644
--- a/src/lib/protocols/bittorrent.c
+++ b/src/lib/protocols/bittorrent.c
@@ -453,126 +453,124 @@ static void ndpi_skip_bittorrent(struct ndpi_detection_module_struct *ndpi_struc
 static void ndpi_search_bittorrent(struct ndpi_detection_module_struct *ndpi_struct,
 				   struct ndpi_flow_struct *flow) {
   struct ndpi_packet_struct *packet = &ndpi_struct->packet;
   char *bt_proto = NULL;
 
   NDPI_LOG_DBG(ndpi_struct, "Search bittorrent\n");
 
   /* This is broadcast */
   if(packet->iph) {
     if((packet->iph->saddr == 0xFFFFFFFF) || (packet->iph->daddr == 0xFFFFFFFF))
       goto exclude_bt;
 
     if(packet->udp) {
       u_int16_t sport = ntohs(packet->udp->source), dport = ntohs(packet->udp->dest);
 
       if(is_port(sport, dport, 3544) /* teredo */
 	 || is_port(sport, dport, 5246) || is_port(sport, dport, 5247) /* CAPWAP */) {
       exclude_bt:
 	NDPI_EXCLUDE_PROTO(ndpi_struct, flow);
 	return;
       }
     }
   }
 
   if(flow->detected_protocol_stack[0] != NDPI_PROTOCOL_BITTORRENT) {
     if(packet->tcp != NULL) {
       ndpi_int_search_bittorrent_tcp(ndpi_struct, flow);
     } else if(packet->udp != NULL) {
       /* UDP */
       const char *bt_search  = "BT-SEARCH * HTTP/1.1\r\n";
       const char *bt_search1 = "d1:ad2:id20:";
 
       if((ntohs(packet->udp->source) < 1024)
 	 || (ntohs(packet->udp->dest) < 1024) /* High ports only */) {
 	ndpi_skip_bittorrent(ndpi_struct, flow, packet);
 	return;
       }
 
       /*
 	Check for uTP http://www.bittorrent.org/beps/bep_0029.html
 
 	wireshark/epan/dissectors/packet-bt-utp.c
       */
 
-      if(packet->payload_packet_len >= 20 /* min header size */) {
 	if(
-	   (strncmp((const char*)packet->payload, bt_search, strlen(bt_search)) == 0)
-	   || (strncmp((const char*)packet->payload, bt_search1, strlen(bt_search1)) == 0)
+	   (packet->payload_packet_len > 22 && strncmp((const char*)packet->payload, bt_search, strlen(bt_search)) == 0) ||
+	   (packet->payload_packet_len > 12 && strncmp((const char*)packet->payload, bt_search1, strlen(bt_search1)) == 0)
 	   ) {
 	  ndpi_add_connection_as_bittorrent(ndpi_struct, flow, -1, 1, NDPI_CONFIDENCE_DPI);
 	  return;
-	} else {
+	} else if(packet->payload_packet_len >= 20) {
 	  /* Check if this is protocol v0 */
 	  u_int8_t v0_extension = packet->payload[17];
 	  u_int8_t v0_flags     = packet->payload[18];
 
 	  if(is_utpv1_pkt(packet->payload, packet->payload_packet_len)) {
 	    bt_proto = ndpi_strnstr((const char *)&packet->payload[20], BITTORRENT_PROTO_STRING, packet->payload_packet_len-20);
 	    goto bittorrent_found;
 	  } else if((packet->payload[0]== 0x60)
 		    && (packet->payload[1]== 0x0)
 		    && (packet->payload[2]== 0x0)
 		    && (packet->payload[3]== 0x0)
 		    && (packet->payload[4]== 0x0)) {
 	    /* Heuristic */
 	    bt_proto = ndpi_strnstr((const char *)&packet->payload[20], BITTORRENT_PROTO_STRING, packet->payload_packet_len-20);
 	    goto bittorrent_found;
 	    /* CSGO/DOTA conflict */
 	  } else if((v0_flags < 6 /* ST_NUM_STATES */) && (v0_extension < 3 /* EXT_NUM_EXT */)) {
 	    u_int32_t ts = ntohl(*((u_int32_t*)&(packet->payload[4])));
 	    u_int32_t now;
 
 	    now = (u_int32_t)(packet->current_time_ms / 1000);
 
 	    if((ts < (now+86400)) && (ts > (now-86400))) {
 	      bt_proto = ndpi_strnstr((const char *)&packet->payload[20], BITTORRENT_PROTO_STRING, packet->payload_packet_len-20);
 	      goto bittorrent_found;
 	    }
 	  } else if(ndpi_strnstr((const char *)&packet->payload[20], BITTORRENT_PROTO_STRING, packet->payload_packet_len-20)
 		    ) {
 	    goto bittorrent_found;
 	  }
 
 	}
-      }
 
       flow->bittorrent_stage++;
 
       if(flow->bittorrent_stage < 5) {
 	/* We have detected bittorrent but we need to wait until we get a hash */
 
 	if(packet->payload_packet_len > 19 /* min size */) {
 	  if(ndpi_strnstr((const char *)packet->payload, ":target20:", packet->payload_packet_len)
 	     || ndpi_strnstr((const char *)packet->payload, ":find_node1:", packet->payload_packet_len)
 	     || ndpi_strnstr((const char *)packet->payload, "d1:ad2:id20:", packet->payload_packet_len)
 	     || ndpi_strnstr((const char *)packet->payload, ":info_hash20:", packet->payload_packet_len)
 	     || ndpi_strnstr((const char *)packet->payload, ":filter64", packet->payload_packet_len)
 	     || ndpi_strnstr((const char *)packet->payload, "d1:rd2:id20:", packet->payload_packet_len)
 	     || (bt_proto = ndpi_strnstr((const char *)packet->payload, BITTORRENT_PROTO_STRING, packet->payload_packet_len))
 	     ) {
 	  bittorrent_found:
 	    if(bt_proto != NULL && ((u_int8_t *)&bt_proto[27] - packet->payload +
 				    sizeof(flow->protos.bittorrent.hash)) < packet->payload_packet_len) {
 	      memcpy(flow->protos.bittorrent.hash, &bt_proto[27], sizeof(flow->protos.bittorrent.hash));
 	      flow->extra_packets_func = NULL; /* Nothing else to do */
 	    }
 
 	    NDPI_LOG_INFO(ndpi_struct, "found BT: plain\n");
 	    ndpi_add_connection_as_bittorrent(ndpi_struct, flow, -1, 0, NDPI_CONFIDENCE_DPI);
 	    return;
 	  }
 	}
 
 	return;
       }
 
       ndpi_skip_bittorrent(ndpi_struct, flow, packet);
     }
   }
 
   if(flow->packet_counter > 8) {
     ndpi_skip_bittorrent(ndpi_struct, flow, packet);
   }
 }
 
 /* ************************************* */
