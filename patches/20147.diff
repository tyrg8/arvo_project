commit 2bddb71a7421213dd9d8b8f2db133b43f5e1357e
Author: Alan Modra <amodra@gmail.com>
Date:   Mon Jan 20 12:31:58 2020 +1030

    ubsan: arm: out of bounds array access
    
     .inst 0x81bdfe9f
    
    disassembles as
       0:   81bdfe9f        ldaexdhi        pc, reg-names-std, [sp]
    
    I'm quite sure "reg-names-std" isn't an ARM register.
    
            * arm-dis.c (print_insn_arm): Wrap 'T' value.

diff --git a/opcodes/ChangeLog b/opcodes/ChangeLog
index 1f717519270..04eaa863e7c 100644
--- a/opcodes/ChangeLog
+++ b/opcodes/ChangeLog
@@ -1,233 +1,237 @@
+2020-01-20  Alan Modra  <amodra@gmail.com>
+
+	* arm-dis.c (print_insn_arm): Wrap 'T' value.
+
 2020-01-18  Nick Clifton  <nickc@redhat.com>
 
 	* configure: Regenerate.
 	* po/opcodes.pot: Regenerate.
 
 2020-01-18  Nick Clifton  <nickc@redhat.com>
 
 	Binutils 2.34 branch created.
 
 2020-01-17  Christian Biesinger  <cbiesinger@google.com>
 
 	* opintl.h: Fix spelling error (seperate).
 
 2020-01-17  H.J. Lu  <hongjiu.lu@intel.com>
 
 	* i386-opc.tbl: Add {vex} pseudo prefix.
 	* i386-tbl.h: Regenerated.
 
 2020-01-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
 
 	PR 25376
 	* opcodes/arm-dis.c (coprocessor_opcodes): Use CORE_HIGH for MVE bits.
 	(neon_opcodes): Likewise.
 	(select_arm_features): Make sure we enable MVE bits when selecting
 	armv8.1-m.main.  Make sure we do not enable MVE bits when not selecting
 	any architecture.
 
 2020-01-16  Jan Beulich  <jbeulich@suse.com>
 
 	* i386-opc.tbl: Drop stale comment from XOP section.
 
 2020-01-16  Jan Beulich  <jbeulich@suse.com>
 
 	* i386-opc.tbl (movq): Add VexWIG to SSE2AVX XMM->XMM forms.
 	(extractps): Add VexWIG to SSE2AVX forms.
 	* i386-tbl.h: Re-generate.
 
 2020-01-16  Jan Beulich  <jbeulich@suse.com>
 
 	* i386-opc.tbl (pextrq, pinsrq): Drop IgnoreSize and Qword. Drop
 	Size64 from and use VexW1 on SSE2AVX forms.
 	(vpextrq, vpinsrq): Drop IgnoreSize and Qword. Drop Size64 from
 	VEX-encoded forms. Add Cpu64 to EVEX-encoded forms. Use VexW1.
 	* i386-tbl.h: Re-generate.
 
 2020-01-15  Alan Modra  <amodra@gmail.com>
 
 	* tic4x-dis.c (tic4x_version): Make unsigned long.
 	(optab, optab_special, registernames): New file scope vars.
 	(tic4x_print_register): Set up registernames rather than
 	malloc'd registertable.
 	(tic4x_disassemble): Delete optable and optable_special.  Use
 	optab and optab_special instead.  Throw away old optab,
 	optab_special and registernames when info->mach changes.
 
 2020-01-14  Sergey Belyashov  <sergey.belyashov@gmail.com>
 
 	PR 25377
 	* z80-dis.c (suffix): Use .db instruction to generate double
 	prefix.
 
 2020-01-14  Alan Modra  <amodra@gmail.com>
 
 	* z8k-dis.c (unpack_instr): Formatting.  Cast unsigned short
 	values to unsigned before shifting.
 
 2020-01-13  Thomas Troeger  <tstroege@gmx.de>
 
 	* arm-dis.c (print_insn_arm): Fill in insn info fields for control
 	flow instructions.
 	(print_insn_thumb16, print_insn_thumb32): Likewise.
 	(print_insn): Initialize the insn info.
 	* i386-dis.c (print_insn): Initialize the insn info fields, and
 	detect jumps.
 
 2012-01-13  Claudiu Zissulescu <claziss@gmail.com>
 
 	* arc-opc.c (C_NE): Make it required.
 
 2012-01-13  Claudiu Zissulescu <claziss@gmail.com>
 
         * opcode/arc-dis.c (regnames): Correct ACCL/ACCH naming, fix typo
 	reserved register name.
 
 2020-01-13  Alan Modra  <amodra@gmail.com>
 
 	* ns32k-dis.c (Is_gen): Use strchr, add 'f'.
 	(print_insn_ns32k): Adjust ioffset for 'f' index_offset.
 
 2020-01-13  Alan Modra  <amodra@gmail.com>
 
 	* wasm32-dis.c (print_insn_wasm32): Localise variables.  Store
 	result of wasm_read_leb128 in a uint64_t and check that bits
 	are not lost when copying to other locals.  Use uint32_t for
 	most locals.  Use PRId64 when printing int64_t.
 
 2020-01-13  Alan Modra  <amodra@gmail.com>
 
 	* score-dis.c: Formatting.
 	* score7-dis.c: Formatting.
 
 2020-01-13  Alan Modra  <amodra@gmail.com>
 
 	* score-dis.c (print_insn_score48): Use unsigned variables for
 	unsigned values.  Don't left shift negative values.
 	(print_insn_score32): Likewise.
 	* score7-dis.c (print_insn_score32, print_insn_score16): Likewise.
 
 2020-01-13  Alan Modra  <amodra@gmail.com>
 
 	* tic4x-dis.c (tic4x_print_register): Remove dead code.
 
 2020-01-13  Alan Modra  <amodra@gmail.com>
 
 	* fr30-ibld.c: Regenerate.
 
 2020-01-13  Alan Modra  <amodra@gmail.com>
 
 	* xgate-dis.c (print_insn): Don't left shift signed value.
 	(ripBits): Formatting, use 1u.
 
 2020-01-10  Alan Modra  <amodra@gmail.com>
 
 	* tilepro-opc.c (parse_insn_tilepro): Make opval unsigned.
 	* tilegx-opc.c (parse_insn_tilegx): Likewise.  Delete raw_opval.
 
 2020-01-10  Alan Modra  <amodra@gmail.com>
 
 	* m10300-dis.c (disassemble): Move extraction of DREG, AREG, RREG,
 	and XRREG value earlier to avoid a shift with negative exponent.
 	* m10200-dis.c (disassemble): Similarly.
 
 2020-01-09  Nick Clifton  <nickc@redhat.com>
 
 	PR 25224
 	* z80-dis.c (ld_ii_ii): Use correct cast.
 
 2020-01-03  Sergey Belyashov  <sergey.belyashov@gmail.com>
 
 	PR 25224
 	* z80-dis.c (ld_ii_ii): Use character constant when checking
 	opcode byte value.
 
 2020-01-09  Jan Beulich  <jbeulich@suse.com>
 
 	* i386-dis.c (SEP_Fixup): New.
 	(SEP): Define.
 	(dis386_twobyte): Use it for sysenter/sysexit.
 	(enum x86_64_isa): Change amd64 enumerator to value 1.
 	(OP_J): Compare isa64 against intel64 instead of amd64.
 	* i386-opc.tbl (sysenter, sysexit): Split into AMD64 and Intel64
 	forms.
 	* i386-tbl.h: Re-generate.
 
 2020-01-08  Alan Modra  <amodra@gmail.com>
 
 	* z8k-dis.c: Include libiberty.h
 	(instr_data_s): Make max_fetched unsigned.
 	(z8k_lookup_instr): Make nibl_index and tabl_index unsigned.
 	Don't exceed byte_info bounds.
 	(output_instr): Make num_bytes unsigned.
 	(unpack_instr): Likewise for nibl_count and loop.
 	* z8kgen.c (gas <opcode_entry_type>): Make noperands, length and
 	idx unsigned.
 	* z8k-opc.h: Regenerate.
 
 2020-01-07  Shahab Vahedi  <shahab@synopsys.com>
 
 	* arc-tbl.h (llock): Use 'LLOCK' as class.
 	(llockd): Likewise.
 	(scond): Use 'SCOND' as class.
 	(scondd): Likewise.
 	(llockd): Set data_size_mode to 'C_ZZ_D' which is 64-bit.
 	(scondd): Likewise.
 
 2020-01-06  Alan Modra  <amodra@gmail.com>
 
 	* m32c-ibld.c: Regenerate.
 
 2020-01-06  Alan Modra  <amodra@gmail.com>
 
 	PR 25344
 	* z80-dis.c (suffix): Don't use a local struct buffer copy.
 	Peek at next byte to prevent recursion on repeated prefix bytes.
 	Ensure uninitialised "mybuf" is not accessed.
 	(print_insn_z80): Don't zero n_fetch and n_used here,..
 	(print_insn_z80_buf): ..do it here instead.
 
 2020-01-04  Alan Modra  <amodra@gmail.com>
 
 	* m32r-ibld.c: Regenerate.
 
 2020-01-04  Alan Modra  <amodra@gmail.com>
 
 	* cr16-dis.c (cr16_match_opcode): Avoid shift left of signed value.
 
 2020-01-04  Alan Modra  <amodra@gmail.com>
 
 	* crx-dis.c (match_opcode): Avoid shift left of signed value.
 
 2020-01-04  Alan Modra  <amodra@gmail.com>
 
 	* d30v-dis.c (print_insn): Avoid signed overflow in left shift.
 
 2020-01-03  Jan Beulich  <jbeulich@suse.com>
 
 	* aarch64-tbl.h (aarch64_opcode_table): Use
 	SVE_ADDR_RX_LSL{1,2,3} for LD1RO{H,W,D}.
 
 2020-01-03  Jan Beulich  <jbeulich@suse.com>
 
 	* aarch64-tbl.h (aarch64_opcode_table): Correct SIMD
 	forms of SUDOT and USDOT.
 
 2020-01-03  Jan Beulich  <jbeulich@suse.com>
 
 	* aarch64-tbl.h (aarch64_opcode_table): Drop 'i' from
 	uzip{1,2}.
 	* opcodes/aarch64-dis-2.c: Re-generate.
 
 2020-01-03  Jan Beulich  <jbeulich@suse.com>
 
 	* aarch64-tbl.h (aarch64_opcode_table): Correct 64-bit
 	FMMLA encoding.
 	* opcodes/aarch64-dis-2.c: Re-generate.
 
 2020-01-02  Sergey Belyashov  <sergey.belyashov@gmail.com>
 
 	* z80-dis.c: Add support for eZ80 and Z80 instructions.
 
 2020-01-01  Alan Modra  <amodra@gmail.com>
 
 	Update year range in copyright notice of all files.
diff --git a/opcodes/arm-dis.c b/opcodes/arm-dis.c
index c986b5897ed..be2a93253bb 100644
--- a/opcodes/arm-dis.c
+++ b/opcodes/arm-dis.c
@@ -9715,538 +9715,538 @@ static void
 print_insn_arm (bfd_vma pc, struct disassemble_info *info, long given)
 {
   const struct opcode32 *insn;
   void *stream = info->stream;
   fprintf_ftype func = info->fprintf_func;
   struct arm_private_data *private_data = info->private_data;
 
   if (print_insn_coprocessor (pc, info, given, FALSE))
     return;
 
   if (print_insn_neon (info, given, FALSE))
     return;
 
   if (print_insn_generic_coprocessor (pc, info, given, FALSE))
     return;
 
   for (insn = arm_opcodes; insn->assembler; insn++)
     {
       if ((given & insn->mask) != insn->value)
 	continue;
 
       if (! ARM_CPU_HAS_FEATURE (insn->arch, private_data->features))
 	continue;
 
       /* Special case: an instruction with all bits set in the condition field
 	 (0xFnnn_nnnn) is only matched if all those bits are set in insn->mask,
 	 or by the catchall at the end of the table.  */
       if ((given & 0xF0000000) != 0xF0000000
 	  || (insn->mask & 0xF0000000) == 0xF0000000
 	  || (insn->mask == 0 && insn->value == 0))
 	{
 	  unsigned long u_reg = 16;
 	  unsigned long U_reg = 16;
 	  bfd_boolean is_unpredictable = FALSE;
 	  signed long value_in_comment = 0;
 	  const char *c;
 
 	  for (c = insn->assembler; *c; c++)
 	    {
 	      if (*c == '%')
 		{
 		  bfd_boolean allow_unpredictable = FALSE;
 
 		  switch (*++c)
 		    {
 		    case '%':
 		      func (stream, "%%");
 		      break;
 
 		    case 'a':
 		      value_in_comment = print_arm_address (pc, info, given);
 		      break;
 
 		    case 'P':
 		      /* Set P address bit and use normal address
 			 printing routine.  */
 		      value_in_comment = print_arm_address (pc, info, given | (1 << P_BIT));
 		      break;
 
 		    case 'S':
 		      allow_unpredictable = TRUE;
 		      /* Fall through.  */
 		    case 's':
                       if ((given & 0x004f0000) == 0x004f0000)
 			{
                           /* PC relative with immediate offset.  */
 			  bfd_vma offset = ((given & 0xf00) >> 4) | (given & 0xf);
 
 			  if (PRE_BIT_SET)
 			    {
 			      /* Elide positive zero offset.  */
 			      if (offset || NEGATIVE_BIT_SET)
 				func (stream, "[pc, #%s%d]\t; ",
 				      NEGATIVE_BIT_SET ? "-" : "", (int) offset);
 			      else
 				func (stream, "[pc]\t; ");
 			      if (NEGATIVE_BIT_SET)
 				offset = -offset;
 			      info->print_address_func (offset + pc + 8, info);
 			    }
 			  else
 			    {
 			      /* Always show the offset.  */
 			      func (stream, "[pc], #%s%d",
 				    NEGATIVE_BIT_SET ? "-" : "", (int) offset);
 			      if (! allow_unpredictable)
 				is_unpredictable = TRUE;
 			    }
 			}
 		      else
 			{
 			  int offset = ((given & 0xf00) >> 4) | (given & 0xf);
 
 			  func (stream, "[%s",
 				arm_regnames[(given >> 16) & 0xf]);
 
 			  if (PRE_BIT_SET)
 			    {
 			      if (IMMEDIATE_BIT_SET)
 				{
 				  /* Elide offset for non-writeback
 				     positive zero.  */
 				  if (WRITEBACK_BIT_SET || NEGATIVE_BIT_SET
 				      || offset)
 				    func (stream, ", #%s%d",
 					  NEGATIVE_BIT_SET ? "-" : "", offset);
 
 				  if (NEGATIVE_BIT_SET)
 				    offset = -offset;
 
 				  value_in_comment = offset;
 				}
 			      else
 				{
 				  /* Register Offset or Register Pre-Indexed.  */
 				  func (stream, ", %s%s",
 					NEGATIVE_BIT_SET ? "-" : "",
 					arm_regnames[given & 0xf]);
 
 				  /* Writing back to the register that is the source/
 				     destination of the load/store is unpredictable.  */
 				  if (! allow_unpredictable
 				      && WRITEBACK_BIT_SET
 				      && ((given & 0xf) == ((given >> 12) & 0xf)))
 				    is_unpredictable = TRUE;
 				}
 
 			      func (stream, "]%s",
 				    WRITEBACK_BIT_SET ? "!" : "");
 			    }
 			  else
 			    {
 			      if (IMMEDIATE_BIT_SET)
 				{
 				  /* Immediate Post-indexed.  */
 				  /* PR 10924: Offset must be printed, even if it is zero.  */
 				  func (stream, "], #%s%d",
 					NEGATIVE_BIT_SET ? "-" : "", offset);
 				  if (NEGATIVE_BIT_SET)
 				    offset = -offset;
 				  value_in_comment = offset;
 				}
 			      else
 				{
 				  /* Register Post-indexed.  */
 				  func (stream, "], %s%s",
 					NEGATIVE_BIT_SET ? "-" : "",
 					arm_regnames[given & 0xf]);
 
 				  /* Writing back to the register that is the source/
 				     destination of the load/store is unpredictable.  */
 				  if (! allow_unpredictable
 				      && (given & 0xf) == ((given >> 12) & 0xf))
 				    is_unpredictable = TRUE;
 				}
 
 			      if (! allow_unpredictable)
 				{
 				  /* Writeback is automatically implied by post- addressing.
 				     Setting the W bit is unnecessary and ARM specify it as
 				     being unpredictable.  */
 				  if (WRITEBACK_BIT_SET
 				      /* Specifying the PC register as the post-indexed
 					 registers is also unpredictable.  */
 				      || (! IMMEDIATE_BIT_SET && ((given & 0xf) == 0xf)))
 				    is_unpredictable = TRUE;
 				}
 			    }
 			}
 		      break;
 
 		    case 'b':
 		      {
 			bfd_vma disp = (((given & 0xffffff) ^ 0x800000) - 0x800000);
 			bfd_vma target = disp * 4 + pc + 8;
 			info->print_address_func (target, info);
 
 			/* Fill in instruction information.  */
 			info->insn_info_valid = 1;
 			info->insn_type = dis_branch;
 			info->target = target;
 		      }
 		      break;
 
 		    case 'c':
 		      if (((given >> 28) & 0xf) != 0xe)
 			func (stream, "%s",
 			      arm_conditional [(given >> 28) & 0xf]);
 		      break;
 
 		    case 'm':
 		      {
 			int started = 0;
 			int reg;
 
 			func (stream, "{");
 			for (reg = 0; reg < 16; reg++)
 			  if ((given & (1 << reg)) != 0)
 			    {
 			      if (started)
 				func (stream, ", ");
 			      started = 1;
 			      func (stream, "%s", arm_regnames[reg]);
 			    }
 			func (stream, "}");
 			if (! started)
 			  is_unpredictable = TRUE;
 		      }
 		      break;
 
 		    case 'q':
 		      arm_decode_shift (given, func, stream, FALSE);
 		      break;
 
 		    case 'o':
 		      if ((given & 0x02000000) != 0)
 			{
 			  unsigned int rotate = (given & 0xf00) >> 7;
 			  unsigned int immed = (given & 0xff);
 			  unsigned int a, i;
 
 			  a = (immed << ((32 - rotate) & 31)
 			       | immed >> rotate) & 0xffffffff;
 			  /* If there is another encoding with smaller rotate,
 			     the rotate should be specified directly.  */
 			  for (i = 0; i < 32; i += 2)
 			    if ((a << i | a >> ((32 - i) & 31)) <= 0xff)
 			      break;
 
 			  if (i != rotate)
 			    func (stream, "#%d, %d", immed, rotate);
 			  else
 			    func (stream, "#%d", a);
 			  value_in_comment = a;
 			}
 		      else
 			arm_decode_shift (given, func, stream, TRUE);
 		      break;
 
 		    case 'p':
 		      if ((given & 0x0000f000) == 0x0000f000)
 			{
 			  arm_feature_set arm_ext_v6 =
 			    ARM_FEATURE_CORE_LOW (ARM_EXT_V6);
 
 			  /* The p-variants of tst/cmp/cmn/teq are the pre-V6
 			     mechanism for setting PSR flag bits.  They are
 			     obsolete in V6 onwards.  */
 			  if (! ARM_CPU_HAS_FEATURE (private_data->features, \
 						     arm_ext_v6))
 			    func (stream, "p");
 			  else
 			    is_unpredictable = TRUE;
 			}
 		      break;
 
 		    case 't':
 		      if ((given & 0x01200000) == 0x00200000)
 			func (stream, "t");
 		      break;
 
 		    case 'A':
 		      {
 			int offset = given & 0xff;
 
 			value_in_comment = offset * 4;
 			if (NEGATIVE_BIT_SET)
 			  value_in_comment = - value_in_comment;
 
 			func (stream, "[%s", arm_regnames [(given >> 16) & 0xf]);
 
 			if (PRE_BIT_SET)
 			  {
 			    if (offset)
 			      func (stream, ", #%d]%s",
 				    (int) value_in_comment,
 				    WRITEBACK_BIT_SET ? "!" : "");
 			    else
 			      func (stream, "]");
 			  }
 			else
 			  {
 			    func (stream, "]");
 
 			    if (WRITEBACK_BIT_SET)
 			      {
 				if (offset)
 				  func (stream, ", #%d", (int) value_in_comment);
 			      }
 			    else
 			      {
 				func (stream, ", {%d}", (int) offset);
 				value_in_comment = offset;
 			      }
 			  }
 		      }
 		      break;
 
 		    case 'B':
 		      /* Print ARM V5 BLX(1) address: pc+25 bits.  */
 		      {
 			bfd_vma address;
 			bfd_vma offset = 0;
 
 			if (! NEGATIVE_BIT_SET)
 			  /* Is signed, hi bits should be ones.  */
 			  offset = (-1) ^ 0x00ffffff;
 
 			/* Offset is (SignExtend(offset field)<<2).  */
 			offset += given & 0x00ffffff;
 			offset <<= 2;
 			address = offset + pc + 8;
 
 			if (given & 0x01000000)
 			  /* H bit allows addressing to 2-byte boundaries.  */
 			  address += 2;
 
 		        info->print_address_func (address, info);
 
 			/* Fill in instruction information.  */
 			info->insn_info_valid = 1;
 			info->insn_type = dis_branch;
 			info->target = address;
 		      }
 		      break;
 
 		    case 'C':
 		      if ((given & 0x02000200) == 0x200)
 			{
 			  const char * name;
 			  unsigned sysm = (given & 0x004f0000) >> 16;
 
 			  sysm |= (given & 0x300) >> 4;
 			  name = banked_regname (sysm);
 
 			  if (name != NULL)
 			    func (stream, "%s", name);
 			  else
 			    func (stream, "(UNDEF: %lu)", (unsigned long) sysm);
 			}
 		      else
 			{
 			  func (stream, "%cPSR_",
 				(given & 0x00400000) ? 'S' : 'C');
 			  if (given & 0x80000)
 			    func (stream, "f");
 			  if (given & 0x40000)
 			    func (stream, "s");
 			  if (given & 0x20000)
 			    func (stream, "x");
 			  if (given & 0x10000)
 			    func (stream, "c");
 			}
 		      break;
 
 		    case 'U':
 		      if ((given & 0xf0) == 0x60)
 			{
 			  switch (given & 0xf)
 			    {
 			    case 0xf: func (stream, "sy"); break;
 			    default:
 			      func (stream, "#%d", (int) given & 0xf);
 			      break;
 			    }
 			}
 		      else
 			{
 			  const char * opt = data_barrier_option (given & 0xf);
 			  if (opt != NULL)
 			    func (stream, "%s", opt);
 			  else
 			      func (stream, "#%d", (int) given & 0xf);
 			}
 		      break;
 
 		    case '0': case '1': case '2': case '3': case '4':
 		    case '5': case '6': case '7': case '8': case '9':
 		      {
 			int width;
 			unsigned long value;
 
 			c = arm_decode_bitfield (c, given, &value, &width);
 
 			switch (*c)
 			  {
 			  case 'R':
 			    if (value == 15)
 			      is_unpredictable = TRUE;
 			    /* Fall through.  */
 			  case 'r':
 			  case 'T':
 			    /* We want register + 1 when decoding T.  */
 			    if (*c == 'T')
-			      ++value;
+			      value = (value + 1) & 0xf;
 
 			    if (c[1] == 'u')
 			      {
 				/* Eat the 'u' character.  */
 				++ c;
 
 				if (u_reg == value)
 				  is_unpredictable = TRUE;
 				u_reg = value;
 			      }
 			    if (c[1] == 'U')
 			      {
 				/* Eat the 'U' character.  */
 				++ c;
 
 				if (U_reg == value)
 				  is_unpredictable = TRUE;
 				U_reg = value;
 			      }
 			    func (stream, "%s", arm_regnames[value]);
 			    break;
 			  case 'd':
 			    func (stream, "%ld", value);
 			    value_in_comment = value;
 			    break;
 			  case 'b':
 			    func (stream, "%ld", value * 8);
 			    value_in_comment = value * 8;
 			    break;
 			  case 'W':
 			    func (stream, "%ld", value + 1);
 			    value_in_comment = value + 1;
 			    break;
 			  case 'x':
 			    func (stream, "0x%08lx", value);
 
 			    /* Some SWI instructions have special
 			       meanings.  */
 			    if ((given & 0x0fffffff) == 0x0FF00000)
 			      func (stream, "\t; IMB");
 			    else if ((given & 0x0fffffff) == 0x0FF00001)
 			      func (stream, "\t; IMBRange");
 			    break;
 			  case 'X':
 			    func (stream, "%01lx", value & 0xf);
 			    value_in_comment = value;
 			    break;
 			  case '`':
 			    c++;
 			    if (value == 0)
 			      func (stream, "%c", *c);
 			    break;
 			  case '\'':
 			    c++;
 			    if (value == ((1ul << width) - 1))
 			      func (stream, "%c", *c);
 			    break;
 			  case '?':
 			    func (stream, "%c", c[(1 << width) - (int) value]);
 			    c += 1 << width;
 			    break;
 			  default:
 			    abort ();
 			  }
 		      }
 		      break;
 
 		    case 'e':
 		      {
 			int imm;
 
 			imm = (given & 0xf) | ((given & 0xfff00) >> 4);
 			func (stream, "%d", imm);
 			value_in_comment = imm;
 		      }
 		      break;
 
 		    case 'E':
 		      /* LSB and WIDTH fields of BFI or BFC.  The machine-
 			 language instruction encodes LSB and MSB.  */
 		      {
 			long msb = (given & 0x001f0000) >> 16;
 			long lsb = (given & 0x00000f80) >> 7;
 			long w = msb - lsb + 1;
 
 			if (w > 0)
 			  func (stream, "#%lu, #%lu", lsb, w);
 			else
 			  func (stream, "(invalid: %lu:%lu)", lsb, msb);
 		      }
 		      break;
 
 		    case 'R':
 		      /* Get the PSR/banked register name.  */
 		      {
 			const char * name;
 			unsigned sysm = (given & 0x004f0000) >> 16;
 
 			sysm |= (given & 0x300) >> 4;
 			name = banked_regname (sysm);
 
 			if (name != NULL)
 			  func (stream, "%s", name);
 			else
 			  func (stream, "(UNDEF: %lu)", (unsigned long) sysm);
 		      }
 		      break;
 
 		    case 'V':
 		      /* 16-bit unsigned immediate from a MOVT or MOVW
 			 instruction, encoded in bits 0:11 and 15:19.  */
 		      {
 			long hi = (given & 0x000f0000) >> 4;
 			long lo = (given & 0x00000fff);
 			long imm16 = hi | lo;
 
 			func (stream, "#%lu", imm16);
 			value_in_comment = imm16;
 		      }
 		      break;
 
 		    default:
 		      abort ();
 		    }
 		}
 	      else
 		func (stream, "%c", *c);
 	    }
 
 	  if (value_in_comment > 32 || value_in_comment < -16)
 	    func (stream, "\t; 0x%lx", (value_in_comment & 0xffffffffUL));
 
 	  if (is_unpredictable)
 	    func (stream, UNPREDICTABLE_INSTRUCTION);
 
 	  return;
 	}
     }
   func (stream, UNKNOWN_INSTRUCTION_32BIT, (unsigned)given);
   return;
 }
 
 /* Print one 16-bit Thumb instruction from PC on INFO->STREAM.  */
