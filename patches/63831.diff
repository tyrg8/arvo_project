commit 6d167be4bd4d425e3966eef17e34c1589f21af81
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Sat Nov 4 02:05:35 2023 +0100

    Mark variables with fz_var() so that they are dropped upon exception.
    
    This fixes OSS-fuzz issue 63831.

diff --git a/source/html/html-doc.c b/source/html/html-doc.c
index 4499d1c77..b6b2640fc 100644
--- a/source/html/html-doc.c
+++ b/source/html/html-doc.c
@@ -244,53 +244,54 @@ static fz_document *
 htdoc_open_document_with_buffer(fz_context *ctx, fz_archive *zip, fz_buffer *buf, int format)
 {
 	html_document *doc = NULL;
 
 	fz_var(doc);
+	fz_var(zip);
 
 	fz_try(ctx)
 	{
 		doc = fz_new_derived_document(ctx, html_document);
 		doc->super.drop_document = htdoc_drop_document;
 		doc->super.layout = htdoc_layout;
 		doc->super.load_outline = htdoc_load_outline;
 		doc->super.resolve_link_dest = htdoc_resolve_link;
 		doc->super.make_bookmark = htdoc_make_bookmark;
 		doc->super.lookup_bookmark = htdoc_lookup_bookmark;
 		doc->super.count_pages = htdoc_count_pages;
 		doc->super.load_page = htdoc_load_page;
 		switch (format)
 		{
 		case FORMAT_FB2: doc->super.lookup_metadata = fb2doc_lookup_metadata; break;
 		case FORMAT_HTML5: doc->super.lookup_metadata = htdoc_lookup_metadata; break;
 		case FORMAT_XHTML: doc->super.lookup_metadata = xhtdoc_lookup_metadata; break;
 		case FORMAT_MOBI: doc->super.lookup_metadata = mobi_lookup_metadata; break;
 		case FORMAT_TXT: doc->super.lookup_metadata = txt_lookup_metadata; break;
 		case FORMAT_OFFICE: doc->super.lookup_metadata = office_lookup_metadata; break;
 		}
 		doc->super.is_reflowable = 1;
 
 		doc->zip = zip;
 		zip = NULL;
 		doc->set = fz_new_html_font_set(ctx);
 		switch (format)
 		{
 		case FORMAT_FB2: doc->html = fz_parse_fb2(ctx, doc->set, doc->zip, ".", buf, fz_user_css(ctx)); break;
 		case FORMAT_HTML5: doc->html = fz_parse_html5(ctx, doc->set, doc->zip, ".", buf, fz_user_css(ctx)); break;
 		case FORMAT_XHTML: doc->html = fz_parse_xhtml(ctx, doc->set, doc->zip, ".", buf, fz_user_css(ctx)); break;
 		case FORMAT_MOBI: doc->html = fz_parse_mobi(ctx, doc->set, doc->zip, ".", buf, fz_user_css(ctx)); break;
 		case FORMAT_TXT: doc->html = fz_parse_txt(ctx, doc->set, doc->zip, ".", buf, fz_user_css(ctx)); break;
 		case FORMAT_OFFICE: doc->html = fz_parse_office(ctx, doc->set, doc->zip, ".", buf, fz_user_css(ctx)); break;
 		}
 		doc->outline = fz_load_html_outline(ctx, doc->html);
 	}
 	fz_always(ctx)
 		fz_drop_buffer(ctx, buf);
 	fz_catch(ctx)
 	{
 		fz_drop_archive(ctx, zip);
 		fz_drop_document(ctx, &doc->super);
 		fz_rethrow(ctx);
 	}
 
 	return (fz_document*)doc;
 }
diff --git a/source/html/office.c b/source/html/office.c
index eb29be48d..ad62d52e5 100644
--- a/source/html/office.c
+++ b/source/html/office.c
@@ -965,76 +965,79 @@ static void
 process_office_document(fz_context *ctx, fz_archive *arch, const char *file, doc_info *info)
 {
 	char *file_rels = make_rel_name(ctx, file);
 	fz_xml *xml = NULL;
 	fz_xml *rels = NULL;
 	char *resolved_rel = NULL;
 
 	fz_var(resolved_rel);
 
+	fz_var(rels);
+	fz_var(xml);
+
 	fz_try(ctx)
 	{
 		fz_xml *pos;
 
 		rels = fz_parse_xml_archive_entry(ctx, arch, file_rels, 0);
 		xml = fz_parse_xml_archive_entry(ctx, arch, file, 1);
 
 		/* XLSX */
 		pos = fz_xml_find_dfs(xml, "sheet", NULL, NULL);
 		if (pos)
 		{
 			load_shared_strings(ctx, arch, rels, info, file);
 			while (pos)
 			{
 				char *name = fz_xml_att(pos, "name");
 				char *id = fz_xml_att(pos, "r:id");
 				char *sheet = lookup_rel(ctx, rels, id);
 
 				if (sheet)
 				{
 					resolved_rel = make_absolute_path(ctx, file, sheet);
 					process_sheet(ctx, arch, name, resolved_rel, info);
 					fz_free(ctx, resolved_rel);
 					resolved_rel = NULL;
 				}
 				pos = fz_xml_find_next_dfs(pos, "sheet", NULL, NULL);
 			}
 			break;
 		}
 
 		/* Let's try it as a powerpoint */
 		pos = fz_xml_find_dfs(xml, "sldId", NULL, NULL);
 		if (pos)
 		{
 			while (pos)
 			{
 				char *id = fz_xml_att(pos, "r:id");
 				char *sheet = lookup_rel(ctx, rels, id);
 
 				if (sheet)
 				{
 					resolved_rel = make_absolute_path(ctx, file, sheet);
 					process_slide(ctx, arch, resolved_rel, info);
 					fz_free(ctx, resolved_rel);
 					resolved_rel = NULL;
 				}
 				pos = fz_xml_find_next_dfs(pos, "sldId", NULL, NULL);
 			}
 			break;
 		}
 
 		/* Let's try it as word. */
 		{
 			load_footnotes(ctx, arch, rels, info, file);
 			process_doc_stream(ctx, xml, info, 1);
 		}
 	}
 	fz_always(ctx)
 	{
 		fz_drop_xml(ctx, xml);
 		fz_drop_xml(ctx, rels);
 		fz_free(ctx, resolved_rel);
 		fz_free(ctx, file_rels);
 	}
 	fz_catch(ctx)
 		fz_rethrow(ctx);
 }
