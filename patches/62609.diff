commit d1204e8a66437b9c7a665d2da878c1bbf52f7f93
Author: cpq <valenok@gmail.com>
Date:   Thu Sep 21 19:04:32 2023 +0100

    Better chunk length calculation

diff --git a/mongoose.c b/mongoose.c
index 48f4d3f3..27940bad 100644
--- a/mongoose.c
+++ b/mongoose.c
@@ -2185,28 +2185,33 @@ long mg_http_upload(struct mg_connection *c, struct mg_http_message *hm,
 int mg_http_status(const struct mg_http_message *hm) {
   return atoi(hm->uri.ptr);
 }
 
+static bool is_hex_digit(int c) {
+  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
+         (c >= 'A' && c <= 'F');
+}
+
 // If a server sends data to the client using chunked encoding, Mongoose strips
 // off the chunking prefix (hex length and \r\n) and suffix (\r\n), appends the
 // stripped data to the body, and fires the MG_EV_HTTP_CHUNK event.  When zero
 // chunk is received, we fire MG_EV_HTTP_MSG, and the body already has all
 // chunking prefixes/suffixes stripped.
 //
 // If a server sends data without chunked encoding, we also fire a series of
 // MG_EV_HTTP_CHUNK events for every received piece of data, and then we fire
 // MG_EV_HTTP_MSG event in the end.
 //
 // We track total processed length in the c->pfn_data, which is a void *
 // pointer: we store a size_t value there.
 static bool getchunk(struct mg_str s, size_t *prefixlen, size_t *datalen) {
   size_t i = 0, n;
-  while (i < s.len && s.ptr[i] != '\r' && s.ptr[i] != '\n') i++;
+  while (i < s.len && is_hex_digit(s.ptr[i])) i++;
   n = mg_unhexn(s.ptr, i);
   // MG_INFO(("%d %d", (int) (i + n + 4), (int) s.len));
   if (s.len < i + n + 4) return false;  // Chunk not yet fully buffered
   if (s.ptr[i] != '\r' || s.ptr[i + 1] != '\n') return false;
   if (s.ptr[i + n + 2] != '\r' || s.ptr[i + n + 3] != '\n') return false;
   *prefixlen = i + 2;
   *datalen = n;
   return true;
 }
diff --git a/src/http.c b/src/http.c
index 21990ad7..f4850fa0 100644
--- a/src/http.c
+++ b/src/http.c
@@ -945,28 +945,33 @@ long mg_http_upload(struct mg_connection *c, struct mg_http_message *hm,
 int mg_http_status(const struct mg_http_message *hm) {
   return atoi(hm->uri.ptr);
 }
 
+static bool is_hex_digit(int c) {
+  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
+         (c >= 'A' && c <= 'F');
+}
+
 // If a server sends data to the client using chunked encoding, Mongoose strips
 // off the chunking prefix (hex length and \r\n) and suffix (\r\n), appends the
 // stripped data to the body, and fires the MG_EV_HTTP_CHUNK event.  When zero
 // chunk is received, we fire MG_EV_HTTP_MSG, and the body already has all
 // chunking prefixes/suffixes stripped.
 //
 // If a server sends data without chunked encoding, we also fire a series of
 // MG_EV_HTTP_CHUNK events for every received piece of data, and then we fire
 // MG_EV_HTTP_MSG event in the end.
 //
 // We track total processed length in the c->pfn_data, which is a void *
 // pointer: we store a size_t value there.
 static bool getchunk(struct mg_str s, size_t *prefixlen, size_t *datalen) {
   size_t i = 0, n;
-  while (i < s.len && s.ptr[i] != '\r' && s.ptr[i] != '\n') i++;
+  while (i < s.len && is_hex_digit(s.ptr[i])) i++;
   n = mg_unhexn(s.ptr, i);
   // MG_INFO(("%d %d", (int) (i + n + 4), (int) s.len));
   if (s.len < i + n + 4) return false;  // Chunk not yet fully buffered
   if (s.ptr[i] != '\r' || s.ptr[i + 1] != '\n') return false;
   if (s.ptr[i + n + 2] != '\r' || s.ptr[i + n + 3] != '\n') return false;
   *prefixlen = i + 2;
   *datalen = n;
   return true;
 }
