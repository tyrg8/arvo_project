commit 533444ddc1a71987f263a40fb6286c3303a54a51
Author: Evgenii Kliuchnikov <eustas@google.com>
Date:   Wed Dec 29 11:47:27 2021 +0000

    Use upsampled dimensions in GetCurrentDimensions
    
    Drive-by: initialize have_crop according to API  doc.
    
    Fixes #1041

diff --git a/lib/jxl/decode.cc b/lib/jxl/decode.cc
index 9b94b2d8..8aa89bd9 100644
--- a/lib/jxl/decode.cc
+++ b/lib/jxl/decode.cc
@@ -842,20 +842,21 @@ namespace {
 // helper function to get the dimensions of the current image buffer
 void GetCurrentDimensions(const JxlDecoder* dec, size_t& xsize, size_t& ysize,
                           bool oriented) {
   if (dec->frame_header->nonserialized_is_preview) {
     xsize = dec->metadata.oriented_preview_xsize(dec->keep_orientation);
     ysize = dec->metadata.oriented_preview_ysize(dec->keep_orientation);
     return;
   }
   xsize = dec->metadata.oriented_xsize(dec->keep_orientation || !oriented);
   ysize = dec->metadata.oriented_ysize(dec->keep_orientation || !oriented);
   if (!dec->coalescing) {
-    xsize = dec->frame_header->ToFrameDimensions().xsize;
-    ysize = dec->frame_header->ToFrameDimensions().ysize;
+    const auto frame_dim = dec->frame_header->ToFrameDimensions();
+    xsize = frame_dim.xsize_upsampled;
+    ysize = frame_dim.ysize_upsampled;
     if (!dec->keep_orientation && oriented &&
         static_cast<int>(dec->metadata.m.GetOrientation()) > 4) {
       std::swap(xsize, ysize);
     }
   }
 }
 }  // namespace
@@ -2653,59 +2654,61 @@ JxlDecoderStatus JxlDecoderSetImageOutCallback(JxlDecoder* dec,
 JxlDecoderStatus JxlDecoderGetFrameHeader(const JxlDecoder* dec,
                                           JxlFrameHeader* header) {
   if (!dec->frame_header || dec->frame_stage == FrameStage::kHeader) {
     return JXL_API_ERROR("no frame header available");
   }
   const auto& metadata = dec->metadata.m;
   if (metadata.have_animation) {
     header->duration = dec->frame_header->animation_frame.duration;
     if (metadata.animation.have_timecodes) {
       header->timecode = dec->frame_header->animation_frame.timecode;
     }
   }
   header->name_length = dec->frame_header->name.size();
   header->is_last = dec->frame_header->is_last;
   size_t xsize, ysize;
   GetCurrentDimensions(dec, xsize, ysize, true);
   header->layer_info.xsize = xsize;
   header->layer_info.ysize = ysize;
   if (!dec->coalescing && dec->frame_header->custom_size_or_origin) {
     header->layer_info.crop_x0 = dec->frame_header->frame_origin.x0;
     header->layer_info.crop_y0 = dec->frame_header->frame_origin.y0;
+    header->layer_info.have_crop = JXL_TRUE;
   } else {
     header->layer_info.crop_x0 = 0;
     header->layer_info.crop_y0 = 0;
+    header->layer_info.have_crop = JXL_FALSE;
   }
   if (!dec->keep_orientation && !dec->coalescing) {
     // orient the crop offset
     size_t W = dec->metadata.oriented_xsize(false);
     size_t H = dec->metadata.oriented_ysize(false);
     if (metadata.orientation > 4) {
       std::swap(header->layer_info.crop_x0, header->layer_info.crop_y0);
     }
     size_t o = (metadata.orientation - 1) & 3;
     if (o > 0 && o < 3) {
       header->layer_info.crop_x0 = W - xsize - header->layer_info.crop_x0;
     }
     if (o > 1) {
       header->layer_info.crop_y0 = H - ysize - header->layer_info.crop_y0;
     }
   }
   if (dec->coalescing) {
     header->layer_info.blend_info.blendmode = JXL_BLEND_REPLACE;
     header->layer_info.blend_info.source = 0;
     header->layer_info.blend_info.alpha = 0;
     header->layer_info.blend_info.clamp = JXL_FALSE;
     header->layer_info.save_as_reference = 0;
   } else {
     header->layer_info.blend_info.blendmode =
         static_cast<JxlBlendMode>(dec->frame_header->blending_info.mode);
     header->layer_info.blend_info.source =
         dec->frame_header->blending_info.source;
     header->layer_info.blend_info.alpha =
         dec->frame_header->blending_info.alpha_channel;
     header->layer_info.blend_info.clamp =
         dec->frame_header->blending_info.clamp;
     header->layer_info.save_as_reference = dec->frame_header->save_as_reference;
   }
   return JXL_DEC_SUCCESS;
 }
diff --git a/lib/jxl/decode_test.cc b/lib/jxl/decode_test.cc
index 222c2215..a9015394 100644
--- a/lib/jxl/decode_test.cc
+++ b/lib/jxl/decode_test.cc
@@ -2981,135 +2981,147 @@ TEST(DecodeTest, SkipFrameWithAlphaBlendingTest) {
 }
 
 TEST(DecodeTest, OrientedCroppedFrameTest) {
-  size_t xsize = 90, ysize = 120;
-  JxlPixelFormat format = {4, JXL_TYPE_UINT16, JXL_BIG_ENDIAN, 0};
-
-  for (bool keep_orientation : {true, false}) {
-    for (uint32_t orientation = 1; orientation <= 8; orientation++) {
-      size_t oxsize = (!keep_orientation && orientation > 4 ? ysize : xsize);
-      size_t oysize = (!keep_orientation && orientation > 4 ? xsize : ysize);
-      jxl::CodecInOut io;
-      io.SetSize(xsize, ysize);
-      io.metadata.m.SetUintSamples(16);
-      io.metadata.m.color_encoding = jxl::ColorEncoding::SRGB(false);
-      io.metadata.m.orientation = orientation;
-      io.frames.clear();
-      io.SetSize(xsize, ysize);
-
-      for (size_t i = 0; i < 3; ++i) {
-        size_t cropxsize = 1 + xsize * 2 / (i + 1);
-        size_t cropysize = 1 + ysize * 3 / (i + 2);
-        int cropx0 = i * 3 - 8;
-        int cropy0 = i * 4 - 7;
-
-        std::vector<uint8_t> frame =
-            jxl::test::GetSomeTestImage(cropxsize, cropysize, 4, i * 2);
-        jxl::ImageBundle bundle(&io.metadata.m);
-        EXPECT_TRUE(ConvertFromExternal(
-            jxl::Span<const uint8_t>(frame.data(), frame.size()), cropxsize,
-            cropysize, jxl::ColorEncoding::SRGB(/*is_gray=*/false),
-            /*has_alpha=*/true,
-            /*alpha_is_premultiplied=*/false, /*bits_per_sample=*/16,
-            JXL_BIG_ENDIAN, /*flipped_y=*/false, /*pool=*/nullptr, &bundle,
-            /*float_in=*/false));
-        bundle.origin = {cropx0, cropy0};
-        bundle.use_for_next_frame = true;
-        io.frames.push_back(std::move(bundle));
-      }
+  const auto test = [](bool keep_orientation, uint32_t orientation,
+                       uint32_t resampling) {
+    size_t xsize = 90, ysize = 120;
+    JxlPixelFormat format = {4, JXL_TYPE_UINT16, JXL_BIG_ENDIAN, 0};
+    size_t oxsize = (!keep_orientation && orientation > 4 ? ysize : xsize);
+    size_t oysize = (!keep_orientation && orientation > 4 ? xsize : ysize);
+    jxl::CodecInOut io;
+    io.SetSize(xsize, ysize);
+    io.metadata.m.SetUintSamples(16);
+    io.metadata.m.color_encoding = jxl::ColorEncoding::SRGB(false);
+    io.metadata.m.orientation = orientation;
+    io.frames.clear();
+    io.SetSize(xsize, ysize);
+
+    for (size_t i = 0; i < 3; ++i) {
+      size_t cropxsize = 1 + xsize * 2 / (i + 1);
+      size_t cropysize = 1 + ysize * 3 / (i + 2);
+      int cropx0 = i * 3 - 8;
+      int cropy0 = i * 4 - 7;
+
+      std::vector<uint8_t> frame =
+          jxl::test::GetSomeTestImage(cropxsize, cropysize, 4, i * 2);
+      jxl::ImageBundle bundle(&io.metadata.m);
+      EXPECT_TRUE(ConvertFromExternal(
+          jxl::Span<const uint8_t>(frame.data(), frame.size()), cropxsize,
+          cropysize, jxl::ColorEncoding::SRGB(/*is_gray=*/false),
+          /*has_alpha=*/true,
+          /*alpha_is_premultiplied=*/false, /*bits_per_sample=*/16,
+          JXL_BIG_ENDIAN, /*flipped_y=*/false, /*pool=*/nullptr, &bundle,
+          /*float_in=*/false));
+      bundle.origin = {cropx0, cropy0};
+      bundle.use_for_next_frame = true;
+      io.frames.push_back(std::move(bundle));
+    }
 
-      jxl::CompressParams cparams;
-      cparams
-          .SetLossless();  // Lossless to verify pixels exactly after roundtrip.
-      cparams.speed_tier = jxl::SpeedTier::kThunder;
-      jxl::AuxOut aux_out;
-      jxl::PaddedBytes compressed;
-      jxl::PassesEncoderState enc_state;
-      EXPECT_TRUE(jxl::EncodeFile(cparams, &io, &enc_state, &compressed,
-                                  jxl::GetJxlCms(), &aux_out, nullptr));
-
-      // 0 is merged frame as decoded with coalescing enabled (default)
-      // 1-3 are non-coalesced frames as decoded with coalescing disabled
-      // 4 is the manually merged frame
-      std::vector<uint8_t> frames[5];
-      frames[4].resize(xsize * ysize * 8, 0);
-
-      // try both with and without coalescing
-      for (auto coalescing : {JXL_TRUE, JXL_FALSE}) {
-        // Independently decode all frames without any skipping, to create the
-        // expected blended frames, for the actual tests below to compare with.
-        {
-          JxlDecoder* dec = JxlDecoderCreate(NULL);
-          const uint8_t* next_in = compressed.data();
-          size_t avail_in = compressed.size();
-          EXPECT_EQ(JXL_DEC_SUCCESS, JxlDecoderSetCoalescing(dec, coalescing));
+    jxl::CompressParams cparams;
+    cparams
+        .SetLossless();  // Lossless to verify pixels exactly after roundtrip.
+    cparams.speed_tier = jxl::SpeedTier::kThunder;
+    cparams.resampling = resampling;
+    jxl::AuxOut aux_out;
+    jxl::PaddedBytes compressed;
+    jxl::PassesEncoderState enc_state;
+    EXPECT_TRUE(jxl::EncodeFile(cparams, &io, &enc_state, &compressed,
+                                jxl::GetJxlCms(), &aux_out, nullptr));
+
+    // 0 is merged frame as decoded with coalescing enabled (default)
+    // 1-3 are non-coalesced frames as decoded with coalescing disabled
+    // 4 is the manually merged frame
+    std::vector<uint8_t> frames[5];
+    frames[4].resize(xsize * ysize * 8, 0);
+
+    // try both with and without coalescing
+    for (auto coalescing : {JXL_TRUE, JXL_FALSE}) {
+      // Independently decode all frames without any skipping, to create the
+      // expected blended frames, for the actual tests below to compare with.
+      {
+        JxlDecoder* dec = JxlDecoderCreate(NULL);
+        const uint8_t* next_in = compressed.data();
+        size_t avail_in = compressed.size();
+        EXPECT_EQ(JXL_DEC_SUCCESS, JxlDecoderSetCoalescing(dec, coalescing));
+        EXPECT_EQ(JXL_DEC_SUCCESS,
+                  JxlDecoderSetKeepOrientation(dec, keep_orientation));
+        void* runner = JxlThreadParallelRunnerCreate(
+            NULL, JxlThreadParallelRunnerDefaultNumWorkerThreads());
+        EXPECT_EQ(JXL_DEC_SUCCESS, JxlDecoderSetParallelRunner(
+                                       dec, JxlThreadParallelRunner, runner));
+        EXPECT_EQ(JXL_DEC_SUCCESS,
+                  JxlDecoderSubscribeEvents(dec, JXL_DEC_FULL_IMAGE));
+        EXPECT_EQ(JXL_DEC_SUCCESS, JxlDecoderSetInput(dec, next_in, avail_in));
+        for (size_t i = (coalescing ? 0 : 1); i < (coalescing ? 1 : 4); ++i) {
+          EXPECT_EQ(JXL_DEC_NEED_IMAGE_OUT_BUFFER, JxlDecoderProcessInput(dec));
+          JxlFrameHeader frame_header;
           EXPECT_EQ(JXL_DEC_SUCCESS,
-                    JxlDecoderSetKeepOrientation(dec, keep_orientation));
-          void* runner = JxlThreadParallelRunnerCreate(
-              NULL, JxlThreadParallelRunnerDefaultNumWorkerThreads());
-          EXPECT_EQ(JXL_DEC_SUCCESS, JxlDecoderSetParallelRunner(
-                                         dec, JxlThreadParallelRunner, runner));
+                    JxlDecoderGetFrameHeader(dec, &frame_header));
+          size_t buffer_size;
           EXPECT_EQ(JXL_DEC_SUCCESS,
-                    JxlDecoderSubscribeEvents(dec, JXL_DEC_FULL_IMAGE));
+                    JxlDecoderImageOutBufferSize(dec, &format, &buffer_size));
+          if (coalescing) {
+            EXPECT_EQ(xsize * ysize * 8, buffer_size);
+          } else {
+            EXPECT_EQ(frame_header.layer_info.xsize *
+                          frame_header.layer_info.ysize * 8,
+                      buffer_size);
+          }
+          frames[i].resize(buffer_size);
           EXPECT_EQ(JXL_DEC_SUCCESS,
-                    JxlDecoderSetInput(dec, next_in, avail_in));
-          for (size_t i = (coalescing ? 0 : 1); i < (coalescing ? 1 : 4); ++i) {
-            EXPECT_EQ(JXL_DEC_NEED_IMAGE_OUT_BUFFER,
-                      JxlDecoderProcessInput(dec));
-            JxlFrameHeader frame_header;
-            EXPECT_EQ(JXL_DEC_SUCCESS,
-                      JxlDecoderGetFrameHeader(dec, &frame_header));
-            size_t buffer_size;
-            EXPECT_EQ(JXL_DEC_SUCCESS,
-                      JxlDecoderImageOutBufferSize(dec, &format, &buffer_size));
-            if (coalescing)
-              EXPECT_EQ(xsize * ysize * 8, buffer_size);
-            else
-              EXPECT_EQ(frame_header.layer_info.xsize *
-                            frame_header.layer_info.ysize * 8,
-                        buffer_size);
-            frames[i].resize(buffer_size);
-            EXPECT_EQ(JXL_DEC_SUCCESS,
-                      JxlDecoderSetImageOutBuffer(
-                          dec, &format, frames[i].data(), frames[i].size()));
-            EXPECT_EQ(JXL_DEC_FULL_IMAGE, JxlDecoderProcessInput(dec));
-            EXPECT_EQ(frame_header.layer_info.blend_info.blendmode,
-                      JXL_BLEND_REPLACE);
-            if (coalescing) {
-              EXPECT_EQ(frame_header.layer_info.xsize, oxsize);
-              EXPECT_EQ(frame_header.layer_info.ysize, oysize);
-              EXPECT_EQ(frame_header.layer_info.crop_x0, 0);
-              EXPECT_EQ(frame_header.layer_info.crop_y0, 0);
-            } else {
-              // manually merge this layer
-              int x0 = frame_header.layer_info.crop_x0;
-              int y0 = frame_header.layer_info.crop_y0;
-              int w = frame_header.layer_info.xsize;
-              int h = frame_header.layer_info.ysize;
-              for (int y = 0; y < static_cast<int>(oysize); y++) {
-                if (y < y0 || y >= y0 + h) continue;
-                // pointers do whole 16-bit RGBA pixels at a time
-                uint64_t* row_merged = static_cast<uint64_t*>(
-                    (void*)(frames[4].data() + y * oxsize * 8));
-                uint64_t* row_layer = static_cast<uint64_t*>(
-                    (void*)(frames[i].data() + (y - y0) * w * 8));
-                for (int x = 0; x < static_cast<int>(oxsize); x++) {
-                  if (x < x0 || x >= x0 + w) continue;
-                  row_merged[x] = row_layer[x - x0];
-                }
+                    JxlDecoderSetImageOutBuffer(dec, &format, frames[i].data(),
+                                                frames[i].size()));
+          EXPECT_EQ(JXL_DEC_FULL_IMAGE, JxlDecoderProcessInput(dec));
+          EXPECT_EQ(frame_header.layer_info.blend_info.blendmode,
+                    JXL_BLEND_REPLACE);
+          if (coalescing) {
+            EXPECT_EQ(frame_header.layer_info.xsize, oxsize);
+            EXPECT_EQ(frame_header.layer_info.ysize, oysize);
+            EXPECT_EQ(frame_header.layer_info.crop_x0, 0);
+            EXPECT_EQ(frame_header.layer_info.crop_y0, 0);
+          } else {
+            // manually merge this layer
+            int x0 = frame_header.layer_info.crop_x0;
+            int y0 = frame_header.layer_info.crop_y0;
+            int w = frame_header.layer_info.xsize;
+            int h = frame_header.layer_info.ysize;
+            for (int y = 0; y < static_cast<int>(oysize); y++) {
+              if (y < y0 || y >= y0 + h) continue;
+              // pointers do whole 16-bit RGBA pixels at a time
+              uint64_t* row_merged = static_cast<uint64_t*>(
+                  (void*)(frames[4].data() + y * oxsize * 8));
+              uint64_t* row_layer = static_cast<uint64_t*>(
+                  (void*)(frames[i].data() + (y - y0) * w * 8));
+              for (int x = 0; x < static_cast<int>(oxsize); x++) {
+                if (x < x0 || x >= x0 + w) continue;
+                row_merged[x] = row_layer[x - x0];
               }
             }
           }
-
-          // After all frames were decoded, JxlDecoderProcessInput should return
-          // success to indicate all is done.
-          EXPECT_EQ(JXL_DEC_SUCCESS, JxlDecoderProcessInput(dec));
-          JxlThreadParallelRunnerDestroy(runner);
-          JxlDecoderDestroy(dec);
         }
+
+        // After all frames were decoded, JxlDecoderProcessInput should return
+        // success to indicate all is done.
+        EXPECT_EQ(JXL_DEC_SUCCESS, JxlDecoderProcessInput(dec));
+        JxlThreadParallelRunnerDestroy(runner);
+        JxlDecoderDestroy(dec);
       }
+    }
+
+    // TODO(eustas): investigate why manual merge is not the same as built-in.
+    if (resampling != 1) return;
+    EXPECT_EQ(0u, jxl::test::ComparePixels(frames[0].data(), frames[4].data(),
+                                           oxsize, oysize, format, format));
+  };
 
-      EXPECT_EQ(0u, jxl::test::ComparePixels(frames[0].data(), frames[4].data(),
-                                             oxsize, oysize, format, format));
+  for (bool keep_orientation : {true, false}) {
+    for (uint32_t orientation = 1; orientation <= 8; orientation++) {
+      for (uint32_t resampling : {1, 2, 4, 8}) {
+        SCOPED_TRACE(testing::Message()
+                     << "keep_orientation: " << keep_orientation << ", "
+                     << "orientation: " << orientation << ", "
+                     << "resampling: " << resampling);
+        test(keep_orientation, orientation, resampling);
+      }
     }
   }
 }
