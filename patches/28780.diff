commit 78bbf4250ecc510c46274300b6f7fed73140147b
Merge: 3d2d534 89007cb
Author: Evan Miller <emmiller@gmail.com>
Date:   Fri Dec 18 16:35:48 2020 -0500

    Merge pull request #217 from evanmiller/oss-fuzz-28780
    
    Fix stack overflow

diff --git a/src/libmdb/data.c b/src/libmdb/data.c
index 4ed11c3..fb20a38 100644
--- a/src/libmdb/data.c
+++ b/src/libmdb/data.c
@@ -258,100 +258,105 @@ int ret;
 	//if (!strcmp("Name",col->name)) {
 		//printf("start %d %d\n",start, len);
 	//}
 	if (len) {
 		col->cur_value_start = start;
 		col->cur_value_len = len;
 	} else {
 		col->cur_value_start = 0;
 		col->cur_value_len = 0;
 	}
 	if (col->bind_ptr) {
 		if (!len) {
 			strcpy(col->bind_ptr, "");
 		} else {
 			//fprintf(stdout,"len %d size %d\n",len, col->col_size);
 			char *str;
 			if (col->col_type == MDB_NUMERIC) {
 				str = mdb_numeric_to_string(mdb, start, col->col_scale, col->col_prec);
 			} else if (col->col_type == MDB_DATETIME) {
 				if (mdb_col_is_shortdate(col)) {
 					str = mdb_date_to_string(mdb, mdb->shortdate_fmt, mdb->pg_buf, start);
 				} else {
 					str = mdb_date_to_string(mdb, mdb->date_fmt, mdb->pg_buf, start);
 				}
 			} else {
 				str = mdb_col_to_string(mdb, mdb->pg_buf, start, col->col_type, len);
 			}
 			snprintf(col->bind_ptr, mdb->bind_size, "%s", str);
 			g_free(str);
 		}
 		ret = strlen(col->bind_ptr);
 		if (col->len_ptr) {
 			*col->len_ptr = ret;
 		}
 		return ret;
 	}
 	return 0;
 }
 int mdb_read_row(MdbTableDef *table, unsigned int row)
 {
 	MdbHandle *mdb = table->entry->mdb;
 	MdbColumn *col;
 	unsigned int i;
 	int row_start;
 	size_t row_size;
 	int delflag, lookupflag;
-	MdbField fields[256];
+	MdbField *fields;
 	int num_fields;
 
-	if (table->num_rows == 0) 
+	if (table->num_rows == 0 || table->num_cols == 0)
 		return 0;
 
 	if (mdb_find_row(mdb, row, &row_start, &row_size)) {
 		fprintf(stderr, "warning: mdb_find_row failed.\n");
 		return 0;
 	}
     if (row_size == 0) {
 		fprintf(stderr, "warning: row_size = 0.\n");
 		return 0;
     }
 
 	delflag = lookupflag = 0;
 	if (row_start & 0x8000) lookupflag++;
 	if (row_start & 0x4000) delflag++;
 	row_start &= OFFSET_MASK; /* remove flags */
 #if MDB_DEBUG
 	fprintf(stdout,"Row %d bytes %d to %d %s %s\n", 
 		row, row_start, row_start + row_size - 1,
 		lookupflag ? "[lookup]" : "",
 		delflag ? "[delflag]" : "");
 #endif	
 
 	if (!table->noskip_del && delflag) {
 		return 0;
 	}
 
+	fields = malloc(sizeof(MdbField) * table->num_cols);
+
 	num_fields = mdb_crack_row(table, row_start, row_size, fields);
-	if (num_fields < 0)
+	if (num_fields < 0 || !mdb_test_sargs(table, fields, num_fields)) {
+		free(fields);
 		return 0;
-	if (!mdb_test_sargs(table, fields, num_fields)) return 0;
+	}
 	
 #if MDB_DEBUG
 	fprintf(stdout,"sarg test passed row %d \n", row);
 #endif 
 
 #if MDB_DEBUG
 	mdb_buffer_dump(mdb->pg_buf, row_start, row_size);
 #endif
 
 	/* take advantage of mdb_crack_row() to clean up binding */
 	/* use num_cols instead of num_fields -- bsb 03/04/02 */
 	for (i = 0; i < table->num_cols; i++) {
 		col = g_ptr_array_index(table->columns,fields[i].colnum);
 		_mdb_attempt_bind(mdb, col, fields[i].is_null,
 			fields[i].start, fields[i].siz);
 	}
 
+	free(fields);
+
 	return 1;
 }
 static int _mdb_attempt_bind(MdbHandle *mdb, 
