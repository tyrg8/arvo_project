commit 210f899acad1959d60892538ac1968a36dbbb51b
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Tue Oct 9 21:56:37 2018 -0400

    [kern] Sanitize 4 bytes, not 2

diff --git a/src/hb-ot-kern-table.hh b/src/hb-ot-kern-table.hh
index 0ab9322f5..ee2370201 100644
--- a/src/hb-ot-kern-table.hh
+++ b/src/hb-ot-kern-table.hh
@@ -414,79 +414,79 @@ struct KernAAT : KernTable<KernAAT>
 struct kern
 {
   static const hb_tag_t tableTag = HB_OT_TAG_kern;
 
   inline bool has_data (void) const
   { return u.version32 != 0; }
 
   inline int get_h_kerning (hb_codepoint_t left, hb_codepoint_t right, unsigned int table_length) const
   {
     switch (u.major) {
     case 0: return u.ot.get_h_kerning (left, right, table_length);
     case 1: return u.aat.get_h_kerning (left, right, table_length);
     default:return 0;
     }
   }
 
   inline bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
-    if (!u.major.sanitize (c)) return_trace (false);
+    if (!u.version32.sanitize (c)) return_trace (false);
     switch (u.major) {
     case 0: return_trace (u.ot.sanitize (c));
     case 1: return_trace (u.aat.sanitize (c));
     default:return_trace (true);
     }
   }
 
   struct accelerator_t
   {
     inline void init (hb_face_t *face)
     {
       blob = hb_sanitize_context_t().reference_table<kern> (face);
       table = blob->as<kern> ();
       table_length = blob->length;
     }
     inline void fini (void)
     {
       hb_blob_destroy (blob);
     }
 
     inline bool has_data (void) const
     { return table->has_data (); }
 
     inline int get_h_kerning (hb_codepoint_t left, hb_codepoint_t right) const
     { return table->get_h_kerning (left, right, table_length); }
 
     inline int get_kerning (hb_codepoint_t first, hb_codepoint_t second) const
     { return get_h_kerning (first, second); }
 
     inline void apply (hb_font_t *font,
 		       hb_buffer_t  *buffer,
 		       hb_mask_t kern_mask) const
     {
       if (!HB_DIRECTION_IS_HORIZONTAL (buffer->props.direction))
         return;
 
       hb_kern_machine_t<accelerator_t> machine (*this);
 
       machine.kern (font, buffer, kern_mask);
     }
 
     private:
     hb_blob_t *blob;
     const kern *table;
     unsigned int table_length;
   };
 
   protected:
   union {
-  HBUINT16		major;
   HBUINT32		version32;
+  HBUINT16		major;
   KernOT		ot;
   KernAAT		aat;
   } u;
   public:
-  DEFINE_SIZE_UNION (2, major);
+  DEFINE_SIZE_UNION (4, version32);
 };
 
 struct kern_accelerator_t : kern::accelerator_t {};
