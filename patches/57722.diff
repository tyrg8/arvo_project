commit 200078e20173bdc43b096083c01906b3edf5c011
Author: Reini Urban <rurban@cpan.org>
Date:   Sun Apr 9 11:09:54 2023 +0200

    bit_TV_to_utf8: handle out of memory

diff --git a/src/bits.c b/src/bits.c
index 2b2859e6..419ee97d 100644
--- a/src/bits.c
+++ b/src/bits.c
@@ -2923,125 +2923,138 @@ char *
 bit_TV_to_utf8 (const char *restrict src,
                 const BITCODE_RS codepage)
 {
   if (codepage == CP_UTF8)
     return bit_u_expand ((char *)src);
   {
     const bool is_asian_cp
       = dwg_codepage_isasian ((const Dwg_Codepage)codepage);
     const size_t srclen = strlen (src);
     size_t destlen = is_asian_cp ? srclen * 3 : trunc (srclen * 1.5);
 #ifdef HAVE_ICONV
     const char *charset = dwg_codepage_iconvstr ((Dwg_Codepage)codepage);
     iconv_t cd;
     size_t nconv = (size_t)-1;
     char *dest, *odest, *osrc;
     if (!charset)
       return (char*)src;
+    osrc = (char *)src;
+    odest = dest = (char*)malloc (destlen);
+    if (!odest)
+      {
+        loglevel |= 1;
+        LOG_ERROR ("Out of memory")
+        return NULL;
+      }
     cd = iconv_open ("UTF-8", charset);
     if (cd == (iconv_t) -1)
       {
         loglevel |= 1;
         LOG_ERROR ("iconv_open (\"UTF-8\", \"%s\") failed with errno %d",
                    charset, errno);
         return NULL;
       }
-    osrc = (char *)src;
-    odest = dest = (char*)malloc (destlen);
     while (nconv == (size_t)-1)
       {
         nconv = iconv (cd, (char **restrict)&src, (size_t *)&srclen,
                        (char **)&dest, (size_t *)&destlen);
         if (nconv == (size_t)-1)
           {
             if (errno != EINVAL) // probably dest buffer too small
               {
                 char *dest_new;
                 destlen *= 2;
                 dest_new = (char*)realloc (odest, destlen);
                 if (dest_new)
                   odest = dest = dest_new;
+                else
+                  {
+                    loglevel |= 1;
+                    iconv_close (cd);
+                    LOG_ERROR ("Out of memory");
+                    return NULL;
+                  }
               }
             else
               {
                 loglevel |= 1;
                 LOG_ERROR ("iconv \"%s\" failed with errno %d", src, errno);
                 free (odest);
                 iconv_close (cd);
                 return bit_u_expand (osrc);
               }
           }
       }
     // flush the remains
     iconv (cd, NULL, (size_t *)&srclen, (char **)&dest, (size_t *)&destlen);
     *dest = '\0';
     iconv_close (cd);
     return bit_u_expand (odest);
 #else
     size_t i = 0;
     char *str = calloc (1, destlen + 1);
     char *tmp = (char *)src;
     uint16_t c = 0;
     //printf("cp: %u\n", codepage);
     //printf("src: %s\n", src);
     //printf("destlen: %zu\n", destlen);
     // UTF8 encode
     while ((c = (0xFF & *tmp)) && i < destlen)
       {
         wchar_t wc;
         tmp++;
         //printf("c: %hu\n", c);
         //printf("i: %zu\n", i);
         //printf("str: %s\n", str);
         //if (is_asian_cp)
         //  c = (c << 16) + *tmp++;
         if (c < 0x80)
           str[i++] = c & 0xFF;
         else if ((wc = dwg_codepage_uc ((Dwg_Codepage)codepage, c & 0xFF)))
           {
             c = wc;
             //printf("wc: %u\n", (unsigned)wc);
             if (c < 0x80) // stayed below
               str[i++] = c & 0xFF;
           }
         if (c >= 0x80 && c < 0x800)
           {
             EXTEND_SIZE (str, i + 1, destlen);
             str[i++] = (c >> 6) | 0xC0;
             str[i++] = (c & 0x3F) | 0x80;
           }
         else if (c >= 0x800)
           {  /* windows ucs-2 has no D800-DC00 surrogate pairs. go straight up
               */
             /*if (i+3 > len) {
               str = realloc(str, i+3);
               len = i+2;
             }*/
             EXTEND_SIZE (str, i + 2, destlen);
             str[i++] = (c >> 12) | 0xE0;
             str[i++] = ((c >> 6) & 0x3F) | 0x80;
             str[i++] = (c & 0x3F) | 0x80;
           }
         /*
         else if (c < 0x110000)
           {
             EXTEND_SIZE(str, i + 3, len);
             str[i++] = (c >> 18) | 0xF0;
             str[i++] = ((c >> 12) & 0x3F) | 0x80;
             str[i++] = ((c >> 6) & 0x3F) | 0x80;
             str[i++] = (c & 0x3F) | 0x80;
           }
         else
           HANDLER (OUTPUT, "ERROR: overlarge unicode codepoint U+%0X", c);
        */
       }
     //printf("=> str: %s, i: %zu\n", str, i);
     EXTEND_SIZE (str, i + 1, destlen);
     str[i] = '\0';
     return bit_u_expand (str);
 #endif
   }
 }
 
 /** converts UTF-8 to UCS-2. Returns a copy.
     TODO: unquote json_cquote as above.
  */
