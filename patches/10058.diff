commit cfd2824f02b6cee4ed6e105d50035c74142d9bf0
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Sun Aug 26 08:01:30 2018 -0400

    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=10058

diff --git a/MagickCore/token.c b/MagickCore/token.c
index 8c37a8544..2231890ec 100644
--- a/MagickCore/token.c
+++ b/MagickCore/token.c
@@ -1,58 +1,59 @@
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %                    TTTTT   OOO   K   K  EEEEE  N   N                        %
 %                      T    O   O  K  K   E      NN  N                        %
 %                      T    O   O  KKK    EEE    N N N                        %
 %                      T    O   O  K  K   E      N  NN                        %
 %                      T     OOO   K   K  EEEEE  N   N                        %
 %                                                                             %
 %                                                                             %
 %                         MagickCore Token Methods                            %
 %                                                                             %
 %                             Software Design                                 %
 %                                  Cristy                                     %
 %                              January 1993                                   %
 %                                                                             %
 %                                                                             %
 %  Copyright 1999-2018 ImageMagick Studio LLC, a non-profit organization      %
 %  dedicated to making software imaging solutions freely available.           %
 %                                                                             %
 %  You may not use this file except in compliance with the License.  You may  %
 %  obtain a copy of the License at                                            %
 %                                                                             %
 %    https://www.imagemagick.org/script/license.php                           %
 %                                                                             %
 %  Unless required by applicable law or agreed to in writing, software        %
 %  distributed under the License is distributed on an "AS IS" BASIS,          %
 %  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   %
 %  See the License for the specific language governing permissions and        %
 %  limitations under the License.                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %
 %
 */
 
 /*
   Include declarations.
 */
 #include "MagickCore/studio.h"
 #include "MagickCore/exception.h"
 #include "MagickCore/exception-private.h"
 #include "MagickCore/image.h"
+#include "MagickCore/image-private.h"
 #include "MagickCore/memory_.h"
 #include "MagickCore/memory-private.h"
 #include "MagickCore/string_.h"
 #include "MagickCore/string-private.h"
 #include "MagickCore/token.h"
 #include "MagickCore/token-private.h"
 #include "MagickCore/utility.h"
 #include "MagickCore/utility-private.h"
 
 /*
   Typedef declaractions.
 */
@@ -308,288 +309,288 @@ MagickExport void GetNextToken(const char *start,const char **end,
       offset=4;
       if (token[offset] == '#')
         offset++;
       i=(ssize_t) strlen(token);
       if (i > offset)
         {
           (void) CopyMagickString(token,token+offset,MagickPathExtent);
           token[i-offset-1]='\0';
         }
     }
   while (isspace((int) ((unsigned char) *p)) != 0)
     p++;
   if (end != (const char **) NULL)
     *end=(const char *) p;
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   G l o b E x p r e s s i o n                                               %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  GlobExpression() returns MagickTrue if the expression matches the pattern.
 %
 %  The format of the GlobExpression function is:
 %
 %      MagickBooleanType GlobExpression(const char *expression,
 %        const char *pattern,const MagickBooleanType case_insensitive)
 %
 %  A description of each parameter follows:
 %
 %    o expression: Specifies a pointer to a text string containing a file name.
 %
 %    o pattern: Specifies a pointer to a text string containing a pattern.
 %
 %    o case_insensitive: set to MagickTrue to ignore the case when matching
 %      an expression.
 %
 */
 MagickExport MagickBooleanType GlobExpression(const char *expression,
   const char *pattern,const MagickBooleanType case_insensitive)
 {
   MagickBooleanType
     done,
     match;
 
   register const char
     *p;
 
   /*
     Return on empty pattern or '*'.
   */
   if (pattern == (char *) NULL)
     return(MagickTrue);
   if (GetUTFCode(pattern) == 0)
     return(MagickTrue);
   if (LocaleCompare(pattern,"*") == 0)
     return(MagickTrue);
   p=pattern+strlen(pattern)-1;
   if ((GetUTFCode(p) == ']') && (strchr(pattern,'[') != (char *) NULL))
     {
       ExceptionInfo
         *exception;
 
       ImageInfo
         *image_info;
 
       /*
         Determine if pattern is a scene, i.e. img0001.pcd[2].
       */
       image_info=AcquireImageInfo();
       (void) CopyMagickString(image_info->filename,pattern,MagickPathExtent);
       exception=AcquireExceptionInfo();
       (void) SetImageInfo(image_info,0,exception);
       exception=DestroyExceptionInfo(exception);
       if (LocaleCompare(image_info->filename,pattern) != 0)
         {
           image_info=DestroyImageInfo(image_info);
           return(MagickFalse);
         }
       image_info=DestroyImageInfo(image_info);
     }
   /*
     Evaluate glob expression.
   */
   done=MagickFalse;
   while ((GetUTFCode(pattern) != 0) && (done == MagickFalse))
   {
     if (GetUTFCode(expression) == 0)
       if ((GetUTFCode(pattern) != '{') && (GetUTFCode(pattern) != '*'))
         break;
     switch (GetUTFCode(pattern))
     {
       case '*':
       {
         MagickBooleanType
           status;
 
         status=MagickFalse;
         while (GetUTFCode(pattern) == '*')
           pattern+=GetUTFOctets(pattern);
         while ((GetUTFCode(expression) != 0) && (status == MagickFalse))
         {
           status=GlobExpression(expression,pattern,case_insensitive);
           expression+=GetUTFOctets(expression);
         }
         if (status != MagickFalse)
           {
             while (GetUTFCode(expression) != 0)
               expression+=GetUTFOctets(expression);
             while (GetUTFCode(pattern) != 0)
               pattern+=GetUTFOctets(pattern);
           }
         break;
       }
       case '[':
       {
         int
           c;
 
         pattern+=GetUTFOctets(pattern);
         for ( ; ; )
         {
           if ((GetUTFCode(pattern) == 0) || (GetUTFCode(pattern) == ']'))
             {
               done=MagickTrue;
               break;
             }
           if (GetUTFCode(pattern) == '\\')
             {
               pattern+=GetUTFOctets(pattern);
               if (GetUTFCode(pattern) == 0)
                 {
                   done=MagickTrue;
                   break;
                 }
              }
           if (GetUTFCode(pattern+GetUTFOctets(pattern)) == '-')
             {
               c=GetUTFCode(pattern);
               pattern+=GetUTFOctets(pattern);
               pattern+=GetUTFOctets(pattern);
               if (GetUTFCode(pattern) == ']')
                 {
                   done=MagickTrue;
                   break;
                 }
               if (GetUTFCode(pattern) == '\\')
                 {
                   pattern+=GetUTFOctets(pattern);
                   if (GetUTFCode(pattern) == 0)
                     {
                       done=MagickTrue;
                       break;
                     }
                 }
               if ((GetUTFCode(expression) < c) ||
                   (GetUTFCode(expression) > GetUTFCode(pattern)))
                 {
                   pattern+=GetUTFOctets(pattern);
                   continue;
                 }
             }
           else
             if (GetUTFCode(pattern) != GetUTFCode(expression))
               {
                 pattern+=GetUTFOctets(pattern);
                 continue;
               }
           pattern+=GetUTFOctets(pattern);
           while ((GetUTFCode(pattern) != ']') && (GetUTFCode(pattern) != 0))
           {
             if ((GetUTFCode(pattern) == '\\') &&
                 (GetUTFCode(pattern+GetUTFOctets(pattern)) > 0))
               pattern+=GetUTFOctets(pattern);
             pattern+=GetUTFOctets(pattern);
           }
           if (GetUTFCode(pattern) != 0)
             {
               pattern+=GetUTFOctets(pattern);
               expression+=GetUTFOctets(expression);
             }
           break;
         }
         break;
       }
       case '?':
       {
         pattern+=GetUTFOctets(pattern);
         expression+=GetUTFOctets(expression);
         break;
       }
       case '{':
       {
         char
           *target;
 
         register char
           *p;
 
         target=AcquireString(pattern);
         p=target;
         while ((GetUTFCode(pattern) != '}') && (GetUTFCode(pattern) != 0))
         {
           *p++=(*pattern++);
           if ((GetUTFCode(pattern) == ',') || (GetUTFCode(pattern) == '}'))
             {
               *p='\0';
               match=GlobExpression(expression,target,case_insensitive);
               if (match != MagickFalse)
                 {
-                  expression+=strlen(target);
+                  expression+=MagickMin(strlen(expression),strlen(target));
                   break;
                 }
               p=target;
               pattern+=GetUTFOctets(pattern);
             }
         }
         while ((GetUTFCode(pattern) != '}') && (GetUTFCode(pattern) != 0))
           pattern+=GetUTFOctets(pattern);
         if (GetUTFCode(pattern) != 0)
           pattern+=GetUTFOctets(pattern);
         target=DestroyString(target);
         break;
       }
       case '\\':
       {
         pattern+=GetUTFOctets(pattern);
         if (GetUTFCode(pattern) == 0)
           break;
       }
       default:
       {
         if (case_insensitive != MagickFalse)
           {
             if (tolower((int) GetUTFCode(expression)) !=
                 tolower((int) GetUTFCode(pattern)))
               {
                 done=MagickTrue;
                 break;
               }
           }
         else
           if (GetUTFCode(expression) != GetUTFCode(pattern))
             {
               done=MagickTrue;
               break;
             }
         expression+=GetUTFOctets(expression);
         pattern+=GetUTFOctets(pattern);
       }
     }
   }
   while (GetUTFCode(pattern) == '*')
     pattern+=GetUTFOctets(pattern);
   match=(GetUTFCode(expression) == 0) && (GetUTFCode(pattern) == 0) ?
     MagickTrue : MagickFalse;
   return(match);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 +     I s G l o b                                                             %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  IsGlob() returns MagickTrue if the path specification contains a globbing
 %  pattern.
 %
 %  The format of the IsGlob method is:
 %
 %      MagickBooleanType IsGlob(const char *geometry)
 %
 %  A description of each parameter follows:
 %
 %    o path: the path.
 %
 */
