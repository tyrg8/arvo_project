commit def69fd7bee47398269378be88d16e8be4328c7a
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Mon Jan 17 09:53:11 2022 -0500

    eliminate "declaration of 'p' hides previous local declaration" warning

diff --git a/MagickCore/fx.c b/MagickCore/fx.c
index 304265ff0..5e264fa40 100644
--- a/MagickCore/fx.c
+++ b/MagickCore/fx.c
@@ -999,67 +999,67 @@ static const char * OprStr (int oprNum)
 static MagickBooleanType DumpRPN (FxInfo * pfx, FILE * fh)
 {
   int i;
 
   fprintf (fh, "DumpRPN:");
   fprintf (fh, "  numElements=%i", pfx->numElements);
   fprintf (fh, "  usedElements=%i", pfx->usedElements);
   fprintf (fh, "  maxUsedOprStack=%i", pfx->maxUsedOprStack);
-  fprintf (fh, "  ImgListLen=%lu", pfx->ImgListLen);
+  fprintf (fh, "  ImgListLen=%g", (double) pfx->ImgListLen);
   fprintf (fh, "  NeedStats=%s", pfx->NeedStats ? "yes" : "no");
   fprintf (fh, "  NeedHsl=%s\n", pfx->NeedHsl ? "yes" : "no");
 
   for (i=0; i < pfx->usedElements; i++) {
     ElementT * pel = &pfx->Elements[i];
     pel->nDest = 0;
   }
   for (i=0; i < pfx->usedElements; i++) {
     ElementT * pel = &pfx->Elements[i];
     if (pel->oprNum == rGoto || pel->oprNum == rIfZeroGoto || pel->oprNum == rIfNotZeroGoto) {
       if (pel->EleNdx >= 0 && pel->EleNdx < pfx->numElements) {
         ElementT * pelDest = &pfx->Elements[pel->EleNdx];
         pelDest->nDest++;
       }
     }
   }
   for (i=0; i < pfx->usedElements; i++) {
     char UserSym[MagickPathExtent];
 
     ElementT * pel = &pfx->Elements[i];
     const char * str = OprStr (pel->oprNum);
     const char *sRelAbs = "";
 
     if (pel->oprNum == fP || pel->oprNum == fUP || pel->oprNum == fVP || pel->oprNum == fSP)
       sRelAbs = pel->IsRelative ? "[]" : "{}";
 
     if (pel->type == etColourConstant)
       fprintf (fh, "  %i: %s vals=%.*Lg,%.*Lg,%.*Lg '%s%s' nArgs=%i ndx=%i  %s",
                i, sElementTypes[pel->type],
                pfx->precision, pel->val, pfx->precision, pel->val1, pfx->precision, pel->val2,
                str, sRelAbs, pel->nArgs, pel->EleNdx,
                pel->DoPush ? "push" : "NO push");
     else
       fprintf (fh, "  %i: %s val=%.*Lg '%s%s' nArgs=%i ndx=%i  %s",
                i, sElementTypes[pel->type], pfx->precision, pel->val, str, sRelAbs,
                pel->nArgs, pel->EleNdx,
                pel->DoPush ? "push" : "NO push");
 
     if (pel->ImgAttrQual != aNull)
       fprintf (fh, " ia=%s", OprStr(pel->ImgAttrQual));
 
     if (pel->ChannelQual != NO_CHAN_QUAL) {
       if (pel->ChannelQual == THIS_CHANNEL) fprintf (stderr, "  ch=this");
       else fprintf (stderr, "  ch=%i", pel->ChannelQual);
     }
 
     if (pel->oprNum == rCopyTo) {
       fprintf (fh, "  CopyTo ==> %s", NameOfUserSym (pfx, pel->EleNdx, UserSym));
     } else if (pel->oprNum == rCopyFrom) {
       fprintf (fh, "  CopyFrom <== %s", NameOfUserSym (pfx, pel->EleNdx, UserSym));
     } else if (OprInPlace (pel->oprNum)) {
       fprintf (fh, "  <==> %s", NameOfUserSym (pfx, pel->EleNdx, UserSym));
     }
     if (pel->nDest > 0)  fprintf (fh, "  <==dest(%i)", pel->nDest);
     fprintf (fh, "\n");
   }
   return MagickTrue;
 }
@@ -1521,77 +1521,77 @@ static ssize_t GetProperty (FxInfo * pfx, fxFltType *val)
 static size_t inline GetConstantColour (FxInfo * pfx, fxFltType *v0, fxFltType *v1, fxFltType *v2)
 /* Finds named colour such as "blue" and colorspace function such as "lab(10,20,30)".
    Returns number of characters to swallow.
 */
 {
   PixelInfo
     colour;
 
   ExceptionInfo
     *dummy_exception = AcquireExceptionInfo ();
 
   char
     *p;
 
   MagickBooleanType
     IsGray,
     IsIcc,
     IsDev;
 
   char ColSp[MagickPathExtent];
   (void) CopyMagickString (ColSp, pfx->token, MaxTokenLen);
 
   p = ColSp + pfx->lenToken - 1;
   if (*p == 'a' || *p == 'A') *p = '\0';
 
   (void) GetPixelInfo (pfx->image, &colour);
 
   /* "gray" is both a colorspace and a named colour. */
 
   IsGray = (LocaleCompare (ColSp, "gray") == 0) ? MagickTrue : MagickFalse;
   IsIcc = (LocaleCompare (ColSp, "icc-color") == 0) ? MagickTrue : MagickFalse;
   IsDev = (LocaleNCompare (ColSp, "device-", 7) == 0) ? MagickTrue : MagickFalse;
 
   /* QueryColorCompliance will raise a warning if it isn't a colour, so we discard any exceptions.
   */
   if (!QueryColorCompliance (pfx->token, AllCompliance, &colour, dummy_exception) || IsGray) {
     ssize_t type = ParseCommandOption (MagickColorspaceOptions, MagickFalse, ColSp);
     if (type >= 0 || IsIcc || IsDev) {
-      char * p = pfx->pex + pfx->lenToken;
-      while (isspace ((int)*p)) p++;
-      if (*p == '(') {
+      char * q = pfx->pex + pfx->lenToken;
+      while (isspace((int) ((unsigned char) *q))) q++;
+      if (*q == '(') {
         size_t lenfun;
         char sFunc[MagickPathExtent];
-        while (*p && *p != ')') p++;
-        lenfun = (size_t) (p - pfx->pex + 1);
+        while (*q && *q != ')') p++;
+        lenfun = (size_t) (q - pfx->pex + 1);
         if (lenfun > MaxTokenLen) {
           (void) ThrowMagickException (
             pfx->exception, GetMagickModule(), OptionError,
             "lenfun too long", "'%g' at '%s'",
             (double) lenfun, SetShortExp(pfx));
           dummy_exception = DestroyExceptionInfo (dummy_exception);
           return 0;
         }
         (void) CopyMagickString (sFunc, pfx->pex, lenfun+1);
         if (QueryColorCompliance (sFunc, AllCompliance, &colour, dummy_exception)) {
           *v0 = colour.red   / QuantumRange;
           *v1 = colour.green / QuantumRange;
           *v2 = colour.blue  / QuantumRange;
           dummy_exception = DestroyExceptionInfo (dummy_exception);
           return lenfun;
         }
       }
     }
     if (!IsGray) {
       dummy_exception = DestroyExceptionInfo (dummy_exception);
       return 0;
     }
   }
 
   *v0 = colour.red   / QuantumRange;
   *v1 = colour.green / QuantumRange;
   *v2 = colour.blue  / QuantumRange;
 
   dummy_exception = DestroyExceptionInfo (dummy_exception);
 
   return strlen (pfx->token);
 }
