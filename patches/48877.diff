commit 960021e51989881c06c7c87b2661440c1fb2a784
Author: Yukihiro "Matz" Matsumoto <matz@ruby.or.jp>
Date:   Fri Jul 8 21:57:05 2022 +0900

    numeric.c (cmpnum): call mrb_bigint_cmp() if v1 is bigint, not v2.

diff --git a/src/numeric.c b/src/numeric.c
index 27a7cb8c3..7c8754e49 100644
--- a/src/numeric.c
+++ b/src/numeric.c
@@ -1801,61 +1801,61 @@ static mrb_int
 cmpnum(mrb_state *mrb, mrb_value v1, mrb_value v2)
 {
 #ifdef MRB_USE_BIGINT
-  if (mrb_bigint_p(v2)) {
+  if (mrb_bigint_p(v1)) {
     return mrb_bint_cmp(mrb, v1, v2);
   }
 #endif
 
 #ifdef MRB_NO_FLOAT
   mrb_int x, y;
 #else
   mrb_float x, y;
 #endif
 
 #ifdef MRB_NO_FLOAT
   x = mrb_integer(v1);
 #else
   x = mrb_as_float(mrb, v1);
 #endif
   switch (mrb_type(v2)) {
   case MRB_TT_INTEGER:
 #ifdef MRB_NO_FLOAT
     y = mrb_integer(v2);
 #else
     y = (mrb_float)mrb_integer(v2);
 #endif
     break;
 #ifndef MRB_NO_FLOAT
   case MRB_TT_FLOAT:
     y = mrb_float(v2);
     break;
 #ifdef MRB_USE_RATIONAL
   case MRB_TT_RATIONAL:
     y = mrb_as_float(mrb, v2);
     break;
 #endif
 #endif
   default:
     return -2;
   }
   if (x > y)
     return 1;
   else {
     if (x < y)
       return -1;
     return 0;
   }
 }
 
 /* 15.2.9.3.6  */
 /*
  * call-seq:
  *     self.f <=> other.f    => -1, 0, +1, or nil
  *             <  => -1
  *             =  =>  0
  *             >  => +1
  *  Comparison---Returns -1, 0, or +1 depending on whether <i>int</i> is
  *  less than, equal to, or greater than <i>numeric</i>. This is the
  *  basis for the tests in <code>Comparable</code>. When the operands are
  *  not comparable, it returns nil instead of raising an exception.
  */
