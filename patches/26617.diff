commit 72e26ea4839206a379f46e49e84e5203294b9fbb
Author: Alex Hultman <alexhultman@gmail.com>
Date:   Sat Oct 24 08:28:35 2020 +0200

    Update PerMessageDeflate.cpp

diff --git a/fuzzing/PerMessageDeflate.cpp b/fuzzing/PerMessageDeflate.cpp
index 8b34a4a..5beac54 100644
--- a/fuzzing/PerMessageDeflate.cpp
+++ b/fuzzing/PerMessageDeflate.cpp
@@ -14,50 +14,52 @@
 extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
 
     /* First byte determines what compressor to use */
     if (size >= 1) {
 
         int compressors[] = {
             uWS::DEDICATED_COMPRESSOR_3KB,
             uWS::DEDICATED_COMPRESSOR_4KB,
             uWS::DEDICATED_COMPRESSOR_8KB,
             uWS::DEDICATED_COMPRESSOR_16KB,
             uWS::DEDICATED_COMPRESSOR_32KB,
             uWS::DEDICATED_COMPRESSOR_64KB,
             uWS::DEDICATED_COMPRESSOR_128KB,
             uWS::DEDICATED_COMPRESSOR_256KB
         };
 
         auto compressor = compressors[data[0] % 8];
         data++;
         size--;
 
         /* Bits 0 - 256 are okay */
         std::bitset<257> b;
 
         /* If we could specify LARGE_BUFFER_SIZE small here we could force it to inflate in chunks,
         * triggering more line coverage. Currently it is set to 16kb which is always too much */
         struct StaticData {
             uWS::DeflationStream deflationStream;
             uWS::ZlibContext zlibContext;
 
             uWS::InflationStream inflationStream;
         } staticData = {compressor};
 
         /* Why is this padded? */
         makeChunked(makePadded(data, size), size, [&staticData, &b](const uint8_t *data, size_t size) {
             auto inflation = staticData.inflationStream.inflate(&staticData.zlibContext, std::string_view((char *) data, size), 256);
 
             /* Trigger ASAN flaws if length is more than 256 */
-            b.set(inflation->length());
+            if (inflation.has_value()) {
+                b.set(inflation->length());
+            }
         });
 
         makeChunked(makePadded(data, size), size, [&staticData](const uint8_t *data, size_t size) {
             /* Always reset */
             staticData.deflationStream.deflate(&staticData.zlibContext, std::string_view((char *) data, size), true);
         });
 
     }
 
     return 0;
 }
 
