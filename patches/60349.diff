commit 9a35f1652ed34ea6aaa7daef36de219b1ed8a3ce
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Fri Aug 4 14:55:30 2023 +0200

    Revert "Bug 706764: OSS-Fuzz 59600: Fix scaled pixmap weight generation."
    
    This reverts commit 8ad9e2393c695e8d8b850a2b735b4a6d02e05a26.
    
    The bugfix introduced a crash in ImageProb2.pdf and ImageProb2y.pdf
    in the cluster. Misbehaving on a real file is worse than misbehaving
    on a fuzzed file, so for the time being we back this one out until
    we have a proper fix that doesn't cause issues for normal files.

diff --git a/source/fitz/draw-scale-simple.c b/source/fitz/draw-scale-simple.c
index 472a68df8..01bb4e965 100644
--- a/source/fitz/draw-scale-simple.c
+++ b/source/fitz/draw-scale-simple.c
@@ -288,80 +288,82 @@ init_weights(fz_weights *weights, int j)
 }
 
 static void
-insert_weight(fz_weights *weights, int j, int i, int weight)
+add_weight(fz_weights *weights, int j, int i, fz_scale_filter *filter,
+	float x, float F, float G, int src_w, float dst_w)
 {
-	int min, len, index;
+	float dist = j - x + 0.5f - ((i + 0.5f)*dst_w/src_w);
+	float f;
+	int min, len, index, weight;
+
+	dist *= G;
+	if (dist < 0)
+		dist = -dist;
+	f = filter->fn(filter, dist)*F;
+	weight = (int)(256*f+0.5f);
+
+	/* Ensure i is in range */
+	if (i < 0 || i >= src_w)
+		return;
+	if (weight == 0)
+	{
+		/* We add a fudge factor here to allow for extreme downscales
+		 * where all the weights round to 0. Ensure that at least one
+		 * (arbitrarily the first one) is non zero. */
+		if (weights->new_line && f > 0)
+			weight = 1;
+		else
+			return;
+	}
 
 	/* Move j from patch_l...patch_l+patch_w range to 0..patch_w range */
 	j -= weights->patch_l;
 	if (weights->new_line)
 	{
 		/* New line */
 		weights->new_line = 0;
 		index = weights->index[j]; /* row pointer */
 		weights->index[index] = i; /* min */
 		weights->index[index+1] = 0; /* len */
 	}
 	index = weights->index[j];
 	min = weights->index[index++];
 	len = weights->index[index++];
 	while (i < min)
 	{
 		/* This only happens in rare cases, but we need to insert
 		 * one earlier. In exceedingly rare cases we may need to
 		 * insert more than one earlier. */
 		int k;
 
 		for (k = len; k > 0; k--)
 		{
 			weights->index[index+k] = weights->index[index+k-1];
 		}
 		weights->index[index] = 0;
 		min--;
 		len++;
 		weights->index[index-2] = min;
 		weights->index[index-1] = len;
 	}
 	if (i-min >= len)
 	{
 		/* The usual case */
 		while (i-min >= ++len)
 		{
 			weights->index[index+len-1] = 0;
 		}
 		assert(len-1 == i-min);
 		weights->index[index+i-min] = weight;
 		weights->index[index-1] = len;
 		assert(len <= weights->max_len);
 	}
 	else
 	{
 		/* Infrequent case */
 		weights->index[index+i-min] += weight;
 	}
 }
 
-static void
-add_weight(fz_weights *weights, int j, int i, fz_scale_filter *filter,
-	float x, float F, float G, int src_w, float dst_w)
-{
-	float dist = j - x + 0.5f - ((i + 0.5f)*dst_w/src_w);
-	float f;
-	int weight;
-
-	dist *= G;
-	if (dist < 0)
-		dist = -dist;
-	f = filter->fn(filter, dist)*F;
-	weight = (int)(256*f+0.5f);
-
-	/* Ensure i is in range */
-	if (i < 0 || i >= src_w)
-		return;
-	if (weight != 0)
-		insert_weight(weights, j, i, weight);
-}
-
 static void
 reorder_weights(fz_weights *weights, int j, int src_w)
 {
@@ -444,79 +446,72 @@ static fz_weights *
 make_weights(fz_context *ctx, int src_w, float x, float dst_w, fz_scale_filter *filter, int vertical, int dst_w_int, int patch_l, int patch_r, int n, int flip, fz_scale_cache *cache)
 {
 	fz_weights *weights;
 	float F, G;
 	float window;
 	int j;
 
 	if (cache)
 	{
 		if (cache->src_w == src_w && cache->x == x && cache->dst_w == dst_w &&
 			cache->filter == filter && cache->vertical == vertical &&
 			cache->dst_w_int == dst_w_int &&
 			cache->patch_l == patch_l && cache->patch_r == patch_r &&
 			cache->n == n && cache->flip == flip)
 		{
 			return cache->weights;
 		}
 		cache->src_w = src_w;
 		cache->x = x;
 		cache->dst_w = dst_w;
 		cache->filter = filter;
 		cache->vertical = vertical;
 		cache->dst_w_int = dst_w_int;
 		cache->patch_l = patch_l;
 		cache->patch_r = patch_r;
 		cache->n = n;
 		cache->flip = flip;
 		fz_free(ctx, cache->weights);
 		cache->weights = NULL;
 	}
 
 	if (dst_w < src_w)
 	{
 		/* Scaling down */
 		F = dst_w / src_w;
 		G = 1;
 	}
 	else
 	{
 		/* Scaling up */
 		F = 1;
 		G = src_w / dst_w;
 	}
 	window = filter->width / F;
 	weights	= new_weights(ctx, filter, src_w, dst_w, patch_r-patch_l, n, flip, patch_l);
 	if (!weights)
 		return NULL;
 	for (j = patch_l; j < patch_r; j++)
 	{
 		/* find the position of the centre of dst[j] in src space */
 		float centre = (j - x + 0.5f)*src_w/dst_w - 0.5f;
 		int l, r;
 		l = ceilf(centre - window);
 		r = floorf(centre + window);
 		init_weights(weights, j);
 		for (; l <= r; l++)
 		{
 			add_weight(weights, j, l, filter, x, F, G, src_w, dst_w);
 		}
-		if (weights->new_line)
-		{
-			/* In very rare cases (bug 706764) we might not actually
-			 * have generated any non-zero weights for this destination
-			 * pixel. Just use the central pixel. */
-			insert_weight(weights, j, floorf(centre), 1);
-		}
 		check_weights(weights, j, dst_w_int, x, dst_w);
 		if (vertical)
 		{
 			reorder_weights(weights, j, src_w);
 		}
 	}
 	weights->count++; /* weights->count = dst_w_int now */
 	if (cache)
 	{
 		cache->weights = weights;
 	}
 	return weights;
 }
