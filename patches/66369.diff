commit 7278dabf370f5bb18b02c8fbbbf15ad59ce6712c
Author: Rob Davies <rmd+git@sanger.ac.uk>
Date:   Thu Feb 1 16:48:08 2024 +0000

    Fix possible heap overflow in cram_encode_aux() on bad RG:Z tags
    
    RG:Z tags without a proper NUL termination could lead to use of
    invalid data, or a heap overflow when the tag is passed to
    sam_hrecs_find_rg(), or hts_log_warning() if the former returns
    NULL.  Fix by moving the line that skips to the end of the aux
    tag and then checking that it was terminated correctly, failing
    if it was not.
    
    Similar checks are also added for MD:Z and generic Z- or H- type
    tags, to prevent generation of unreadable CRAM files.
    
    Credit to OSS-Fuzz
    Fixes oss-fuzz 66369

diff --git a/cram/cram_encode.c b/cram/cram_encode.c
index 9651abde..4a762f7b 100644
--- a/cram/cram_encode.c
+++ b/cram/cram_encode.c
@@ -2746,460 +2746,478 @@ static int cram_add_insertion(cram_container *c, cram_slice *s, cram_record *r,
 /*
  * Encodes auxiliary data. Largely duplicated from above, but done so to
  * keep it simple and avoid a myriad of version ifs.
  *
  * Returns the RG header line pointed to by the BAM aux fields on success,
  *         NULL on failure or no rg present, also sets "*err" to non-zero
  */
 static sam_hrec_rg_t *cram_encode_aux(cram_fd *fd, bam_seq_t *b,
                                       cram_container *c,
                                       cram_slice *s, cram_record *cr,
                                       int verbatim_NM, int verbatim_MD,
                                       int NM, kstring_t *MD, int cf_tag,
                                       int no_ref, int *err) {
     char *aux, *orig;
     sam_hrec_rg_t *brg = NULL;
     int aux_size = bam_get_l_aux(b);
     const char *aux_end = bam_data_end(b);
     cram_block *td_b = c->comp_hdr->TD_blk;
     int TD_blk_size = BLOCK_SIZE(td_b), new;
     char *key;
     khint_t k;
 
     if (err) *err = 1;
 
     orig = aux = (char *)bam_aux(b);
 
 
     // cF:i  => Extra CRAM bit flags.
     // 1:  Don't auto-decode MD (may be invalid)
     // 2:  Don't auto-decode NM (may be invalid)
     if (cf_tag && CRAM_MAJOR_VERS(fd->version) < 4) {
         // Temporary copy of aux so we can ammend it.
         aux = malloc(aux_size+4);
         if (!aux)
             return NULL;
 
         memcpy(aux, orig, aux_size);
         aux[aux_size++] = 'c';
         aux[aux_size++] = 'F';
         aux[aux_size++] = 'C';
         aux[aux_size++] = cf_tag;
         orig = aux;
         aux_end = aux + aux_size;
     }
 
     // Copy aux keys to td_b and aux values to slice aux blocks
     while (aux_end - aux >= 1 && aux[0] != 0) {
         int r;
 
         // Room for code + type + at least 1 byte of data
         if (aux - orig >= aux_size - 3)
             goto err;
 
         // RG:Z
         if (aux[0] == 'R' && aux[1] == 'G' && aux[2] == 'Z') {
             char *rg = &aux[3];
+            aux = rg;
+            while (aux < aux_end && *aux++);
+            if (aux == aux_end && aux[-1] != '\0') {
+                hts_log_error("Unterminated RG:Z tag for read \"%s\"",
+                              bam_get_qname(b));
+                goto err;
+            }
             brg = sam_hrecs_find_rg(fd->header->hrecs, rg);
             if (brg) {
-                while (aux < aux_end && *aux++);
                 if (CRAM_MAJOR_VERS(fd->version) >= 4)
                     BLOCK_APPEND(td_b, "RG*", 3);
                 continue;
             } else {
                 // RG:Z tag will be stored verbatim
                 hts_log_warning("Missing @RG header for RG \"%s\"", rg);
+                aux = rg - 3;
             }
         }
 
         // MD:Z
         if (aux[0] == 'M' && aux[1] == 'D' && aux[2] == 'Z') {
             if (cr->len && !no_ref && !(cr->flags & BAM_FUNMAP) && !verbatim_MD) {
                 if (MD && MD->s && strncasecmp(MD->s, aux+3, orig + aux_size - (aux+3)) == 0) {
                     while (aux < aux_end && *aux++);
+                    if (aux == aux_end && aux[-1] != '\0') {
+                        hts_log_error("Unterminated MD:Z tag for read \"%s\"",
+                                      bam_get_qname(b));
+                        goto err;
+                    }
                     if (CRAM_MAJOR_VERS(fd->version) >= 4)
                         BLOCK_APPEND(td_b, "MD*", 3);
                     continue;
                 }
             }
         }
 
         // NM:i
         if (aux[0] == 'N' && aux[1] == 'M') {
             if (cr->len && !no_ref && !(cr->flags & BAM_FUNMAP) && !verbatim_NM) {
                 int NM_ = bam_aux2i_end((uint8_t *)aux+2, (uint8_t *)aux_end);
                 if (NM_ == NM) {
                     switch(aux[2]) {
                     case 'A': case 'C': case 'c': aux+=4; break;
                     case 'S': case 's':           aux+=5; break;
                     case 'I': case 'i': case 'f': aux+=7; break;
                     default:
                         hts_log_error("Unhandled type code for NM tag");
                         goto err;
                     }
                     if (CRAM_MAJOR_VERS(fd->version) >= 4)
                         BLOCK_APPEND(td_b, "NM*", 3);
                     continue;
                 }
             }
         }
 
         BLOCK_APPEND(td_b, aux, 3);
 
         // Container level tags_used, for TD series
         // Maps integer key ('X0i') to cram_tag_map struct.
         int key = (((unsigned char *) aux)[0]<<16 |
                    ((unsigned char *) aux)[1]<<8  |
                    ((unsigned char *) aux)[2]);
         k = kh_put(m_tagmap, c->tags_used, key, &r);
         if (-1 == r)
             goto err;
         else if (r != 0)
             kh_val(c->tags_used, k) = NULL;
 
         if (r == 1) {
             khint_t k_global;
 
             // Global tags_used for cram_metrics support
             pthread_mutex_lock(&fd->metrics_lock);
             k_global = kh_put(m_metrics, fd->tags_used, key, &r);
             if (-1 == r) {
                 pthread_mutex_unlock(&fd->metrics_lock);
                 goto err;
             }
             if (r >= 1) {
                 kh_val(fd->tags_used, k_global) = cram_new_metrics();
                 if (!kh_val(fd->tags_used, k_global)) {
                     kh_del(m_metrics, fd->tags_used, k_global);
                     pthread_mutex_unlock(&fd->metrics_lock);
                     goto err;
                 }
             }
 
             pthread_mutex_unlock(&fd->metrics_lock);
 
             int i2[2] = {'\t',key};
             size_t sk = key;
             cram_tag_map *m = calloc(1, sizeof(*m));
             if (!m)
                 goto_err;
             kh_val(c->tags_used, k) = m;
 
             cram_codec *c;
 
             // Use a block content id based on the tag id.
             // Codec type depends on tag data type.
             switch(aux[2]) {
             case 'Z': case 'H':
                 // string as byte_array_stop
                 c = cram_encoder_init(E_BYTE_ARRAY_STOP, NULL,
                                       E_BYTE_ARRAY, (void *)i2,
                                       fd->version, &fd->vv);
                 break;
 
             case 'A': case 'c': case 'C': {
                 // byte array len, 1 byte
                 cram_byte_array_len_encoder e;
                 cram_stats st;
 
                 if (CRAM_MAJOR_VERS(fd->version) <= 3) {
                     e.len_encoding = E_HUFFMAN;
                     e.len_dat = NULL; // will get codes from st
                 } else {
                     e.len_encoding = E_CONST_INT;
                     e.len_dat = NULL; // will get codes from st
                 }
                 memset(&st, 0, sizeof(st));
                 if (cram_stats_add(&st, 1) < 0) goto block_err;
                 cram_stats_encoding(fd, &st);
 
                 e.val_encoding = E_EXTERNAL;
                 e.val_dat = (void *)sk;
 
                 c = cram_encoder_init(E_BYTE_ARRAY_LEN, &st,
                                       E_BYTE_ARRAY, (void *)&e,
                                       fd->version, &fd->vv);
                 break;
             }
 
             case 's': case 'S': {
                 // byte array len, 2 byte
                 cram_byte_array_len_encoder e;
                 cram_stats st;
 
                 if (CRAM_MAJOR_VERS(fd->version) <= 3) {
                     e.len_encoding = E_HUFFMAN;
                     e.len_dat = NULL; // will get codes from st
                 } else {
                     e.len_encoding = E_CONST_INT;
                     e.len_dat = NULL; // will get codes from st
                 }
                 memset(&st, 0, sizeof(st));
                 if (cram_stats_add(&st, 2) < 0) goto block_err;
                 cram_stats_encoding(fd, &st);
 
                 e.val_encoding = E_EXTERNAL;
                 e.val_dat = (void *)sk;
 
                 c = cram_encoder_init(E_BYTE_ARRAY_LEN, &st,
                                       E_BYTE_ARRAY, (void *)&e,
                                       fd->version, &fd->vv);
                 break;
             }
             case 'i': case 'I': case 'f': {
                 // byte array len, 4 byte
                 cram_byte_array_len_encoder e;
                 cram_stats st;
 
                 if (CRAM_MAJOR_VERS(fd->version) <= 3) {
                     e.len_encoding = E_HUFFMAN;
                     e.len_dat = NULL; // will get codes from st
                 } else {
                     e.len_encoding = E_CONST_INT;
                     e.len_dat = NULL; // will get codes from st
                 }
                 memset(&st, 0, sizeof(st));
                 if (cram_stats_add(&st, 4) < 0) goto block_err;
                 cram_stats_encoding(fd, &st);
 
                 e.val_encoding = E_EXTERNAL;
                 e.val_dat = (void *)sk;
 
                 c = cram_encoder_init(E_BYTE_ARRAY_LEN, &st,
                                       E_BYTE_ARRAY, (void *)&e,
                                       fd->version, &fd->vv);
                 break;
             }
 
             case 'B': {
                 // Byte array of variable size, but we generate our tag
                 // byte stream at the wrong stage (during reading and not
                 // after slice header construction). So we use
                 // BYTE_ARRAY_LEN with the length codec being external
                 // too.
                 cram_byte_array_len_encoder e;
 
                 e.len_encoding = CRAM_MAJOR_VERS(fd->version) >= 4
                     ? E_VARINT_UNSIGNED
                     : E_EXTERNAL;
                 e.len_dat = (void *)sk; // or key+128 for len?
 
                 e.val_encoding = E_EXTERNAL;
                 e.val_dat = (void *)sk;
 
                 c = cram_encoder_init(E_BYTE_ARRAY_LEN, NULL,
                                       E_BYTE_ARRAY, (void *)&e,
                                       fd->version, &fd->vv);
                 break;
             }
 
             default:
                 hts_log_error("Unsupported SAM aux type '%c'", aux[2]);
                 c = NULL;
             }
 
             if (!c)
                 goto_err;
 
             m->codec = c;
 
             // Link to fd-global tag metrics
             pthread_mutex_lock(&fd->metrics_lock);
             m->m = k_global ? (cram_metrics *)kh_val(fd->tags_used, k_global) : NULL;
             pthread_mutex_unlock(&fd->metrics_lock);
         }
 
         cram_tag_map *tm = (cram_tag_map *)kh_val(c->tags_used, k);
         if (!tm) goto_err;
         cram_codec *codec = tm->codec;
         if (!tm->codec) goto_err;
 
         switch(aux[2]) {
         case 'A': case 'C': case 'c':
             if (aux_end - aux < 3+1)
                 goto err;
 
             if (!tm->blk) {
                 if (!(tm->blk = cram_new_block(EXTERNAL, key)))
                     goto err;
                 codec->u.e_byte_array_len.val_codec->out = tm->blk;
             }
 
             aux+=3;
             //codec->encode(s, codec, aux, 1);
             // Functionally equivalent, but less code.
             BLOCK_APPEND_CHAR(tm->blk, *aux);
             aux++;
             break;
 
         case 'S': case 's':
             if (aux_end - aux < 3+2)
                 goto err;
 
             if (!tm->blk) {
                 if (!(tm->blk = cram_new_block(EXTERNAL, key)))
                     goto err;
                 codec->u.e_byte_array_len.val_codec->out = tm->blk;
             }
 
             aux+=3;
             //codec->encode(s, codec, aux, 2);
             BLOCK_APPEND(tm->blk, aux, 2);
             aux+=2;
             break;
 
         case 'I': case 'i': case 'f':
             if (aux_end - aux < 3+4)
                 goto err;
 
             if (!tm->blk) {
                 if (!(tm->blk = cram_new_block(EXTERNAL, key)))
                     goto err;
                 codec->u.e_byte_array_len.val_codec->out = tm->blk;
             }
 
             aux+=3;
             //codec->encode(s, codec, aux, 4);
             BLOCK_APPEND(tm->blk, aux, 4);
             aux+=4;
             break;
 
         case 'd':
             if (aux_end - aux < 3+8)
                 goto err;
 
             if (!tm->blk) {
                 if (!(tm->blk = cram_new_block(EXTERNAL, key)))
                     goto err;
                 codec->u.e_byte_array_len.val_codec->out = tm->blk;
             }
 
             aux+=3; //*tmp++=*aux++; *tmp++=*aux++; *tmp++=*aux++;
             //codec->encode(s, codec, aux, 8);
             BLOCK_APPEND(tm->blk, aux, 8);
             aux+=8;
             break;
 
         case 'Z': case 'H': {
             if (aux_end - aux < 3)
                 goto err;
 
             if (!tm->blk) {
                 if (!(tm->blk = cram_new_block(EXTERNAL, key)))
                     goto err;
                 codec->out = tm->blk;
             }
 
             char *aux_s;
             aux += 3;
             aux_s = aux;
             while (aux < aux_end && *aux++);
+            if (aux == aux_end && aux[-1] != '\0') {
+                hts_log_error("Unterminated %c%c:%c tag for read \"%s\"",
+                              aux_s[-3], aux_s[-2], aux_s[-1],
+                              bam_get_qname(b));
+                goto err;
+            }
             if (codec->encode(s, codec, aux_s, aux - aux_s) < 0)
                 goto err;
             break;
         }
 
         case 'B': {
             if (aux_end - aux < 4+4)
                 goto err;
 
             int type = aux[3];
             uint64_t count = (((uint64_t)((unsigned char *)aux)[4]) << 0 |
                               ((uint64_t)((unsigned char *)aux)[5]) << 8 |
                               ((uint64_t)((unsigned char *)aux)[6]) <<16 |
                               ((uint64_t)((unsigned char *)aux)[7]) <<24);
             uint64_t blen;
             if (!tm->blk) {
                 if (!(tm->blk = cram_new_block(EXTERNAL, key)))
                     goto err;
                 if (codec->u.e_byte_array_len.val_codec->codec == E_XDELTA) {
                     if (!(tm->blk2 = cram_new_block(EXTERNAL, key+128)))
                         goto err;
                     codec->u.e_byte_array_len.len_codec->out = tm->blk2;
                     codec->u.e_byte_array_len.val_codec->u.e_xdelta.sub_codec->out = tm->blk;
                 } else {
                     codec->u.e_byte_array_len.len_codec->out = tm->blk;
                     codec->u.e_byte_array_len.val_codec->out = tm->blk;
                 }
             }
 
             // skip TN field
             aux+=3;
 
             // We use BYTE_ARRAY_LEN with external length, so store that first
             switch (type) {
             case 'c': case 'C':
                 blen = count;
                 break;
             case 's': case 'S':
                 blen = 2*count;
                 break;
             case 'i': case 'I': case 'f':
                 blen = 4*count;
                 break;
             default:
                 hts_log_error("Unknown sub-type '%c' for aux type 'B'", type);
                 goto err;
             }
 
             blen += 5; // sub-type & length
             if (aux_end - aux < blen || blen > INT_MAX)
                 goto err;
 
             if (codec->encode(s, codec, aux, (int) blen) < 0)
                 goto err;
             aux += blen;
             break;
         }
         default:
             hts_log_error("Unknown aux type '%c'", aux_end - aux < 2 ? '?' : aux[2]);
             goto err;
         }
         tm->blk->m = tm->m;
     }
 
     // FIXME: sort BLOCK_DATA(td_b) by char[3] triples
 
     // And and increment TD hash entry
     BLOCK_APPEND_CHAR(td_b, 0);
 
     // Duplicate key as BLOCK_DATA() can be realloced to a new pointer.
     key = string_ndup(c->comp_hdr->TD_keys,
                       (char *)BLOCK_DATA(td_b) + TD_blk_size,
                       BLOCK_SIZE(td_b) - TD_blk_size);
     if (!key)
         goto block_err;
     k = kh_put(m_s2i, c->comp_hdr->TD_hash, key, &new);
     if (new < 0) {
         goto err;
     } else if (new == 0) {
         BLOCK_SIZE(td_b) = TD_blk_size;
     } else {
         kh_val(c->comp_hdr->TD_hash, k) = c->comp_hdr->nTL;
         c->comp_hdr->nTL++;
     }
 
     cr->TL = kh_val(c->comp_hdr->TD_hash, k);
     if (cram_stats_add(c->stats[DS_TL], cr->TL) < 0)
         goto block_err;
 
     if (orig != (char *)bam_aux(b))
         free(orig);
 
     if (err) *err = 0;
 
     return brg;
 
  err:
  block_err:
     if (orig != (char *)bam_aux(b))
         free(orig);
     return NULL;
 }
 
 /*
  * During cram_next_container or before the final flush at end of
  * file, we update the current slice headers and increment the slice
  * number to the next slice.
  *
  * See cram_next_container() and cram_close().
  */
