commit af0b20a9692cd7cbfb58c655e82a4310f9cb6eba
Author: John Thacker <johnthacker@gmail.com>
Date:   Thu Sep 8 23:12:58 2022 -0400

    http-urlencoded: Pass the correct string length to get_utf_8_string
    
    Pass in the correct length of the percent decoded string, which
    is not necessarily the same as the value calculated from the offsets.
    Fix #18322. Fix #18325.

diff --git a/epan/dissectors/packet-http-urlencoded.c b/epan/dissectors/packet-http-urlencoded.c
index 56e5201412..98ce12461c 100644
--- a/epan/dissectors/packet-http-urlencoded.c
+++ b/epan/dissectors/packet-http-urlencoded.c
@@ -103,76 +103,76 @@ static int
 dissect_form_urlencoded(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)
 {
 	proto_tree	*url_tree;
 	proto_tree	*sub;
 	proto_item	*ti;
 	gint		offset = 0, next_offset;
 	const char	*data_name;
 	http_message_info_t *message_info;
 
 	data_name = pinfo->match_string;
 	if (! (data_name && data_name[0])) {
 		/*
 		 * No information from "match_string"
 		 */
 		message_info = (http_message_info_t *)data;
 		if (message_info == NULL) {
 			/*
 			 * No information from dissector data
 			 */
 			data_name = NULL;
 		} else {
 			data_name = message_info->media_str;
 			if (! (data_name && data_name[0])) {
 				/*
 				 * No information from dissector data
 				 */
 				data_name = NULL;
 			}
 		}
 	}
 
 	if (data_name)
 		col_append_sep_fstr(pinfo->cinfo, COL_INFO, " ", "(%s)", data_name);
 
 	ti = proto_tree_add_item(tree, proto_urlencoded, tvb, 0, -1, ENC_NA);
 	if (data_name)
 		proto_item_append_text(ti, ": %s", data_name);
 	url_tree = proto_item_add_subtree(ti, ett_form_urlencoded);
 
 	while (tvb_reported_length_remaining(tvb, offset) > 0) {
 		const int start_offset = offset;
 		char *key, *value;
 		char *key_decoded, *value_decoded;
 
 		sub = proto_tree_add_subtree(url_tree, tvb, offset, 0, ett_form_keyvalue, &ti, "Form item");
 
 		next_offset = get_form_key_value(tvb, &key, offset, '=');
 		if (next_offset == -1)
 			break;
 		/* XXX: Only UTF-8 is conforming according to WHATWG, though we
 		 * ought to look for a "charset" parameter in media_str
 		 * to handle other encodings.
 		 * Our charset functions should probably return a boolean
 		 * indicating that replacement characters had to be used,
 		 * and that the string was not the expected encoding.
 		 */
-		key_decoded = get_utf_8_string(pinfo->pool, key, next_offset - offset);
+		key_decoded = get_utf_8_string(pinfo->pool, key, (int)strlen(key));
 		proto_tree_add_string(sub, hf_form_key, tvb, offset, next_offset - offset, key_decoded);
 		proto_item_append_text(sub, ": \"%s\"", format_text(pinfo->pool, key, strlen(key)));
 
 		offset = next_offset+1;
 
 		next_offset = get_form_key_value(tvb, &value, offset, '&');
 		if (next_offset == -1)
 			break;
-		value_decoded = get_utf_8_string(pinfo->pool, value, next_offset - offset);
+		value_decoded = get_utf_8_string(pinfo->pool, value, (int)strlen(value));
 		proto_tree_add_string(sub, hf_form_value, tvb, offset, next_offset - offset, value_decoded);
 		proto_item_append_text(sub, " = \"%s\"", format_text(pinfo->pool, value, strlen(value)));
 
 		offset = next_offset+1;
 
 		proto_item_set_len(ti, offset - start_offset);
 	}
 
 	return tvb_captured_length(tvb);
 }
