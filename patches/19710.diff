commit ae5d7604f699dac4fd824e594c7df5439a36c29b
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Wed Jan 8 14:18:14 2020 +0100

    Fix #65274: Add class name to undef class constant error

diff --git a/NEWS b/NEWS
index 9ab884ee43..f1909fda44 100644
--- a/NEWS
+++ b/NEWS
@@ -1,106 +1,108 @@
 PHP                                                                        NEWS
 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
 ?? ??? ????, PHP 8.0.0alpha1
 
 - Core:
   . Removed the pdo_odbc.db2_instance_name php.ini directive. (Kalle)
   . Fixed bug #77619 (Wrong reflection on MultipleIterator::__construct).
     (Fabien Villepinte)
+  . Fixed bug #65274 (Enhance undefined class constant error with class name).
+    (Nikita)
 
 - Date:
   . Fixed bug #65547 (Default value for sunrise/sunset zenith still wrong).
     (cmb)
   . Fixed bug #69044 (discrepency between time and microtime). (krakjoe)
 
 - DOM:
   . Add property DOMXPath::$registerNodeNamespaces and constructor argument
     that allow global flag to configure query() or evaluate() calls.
 
 - GD:
   . Fixed bug #55005 (imagepolygon num_points requirement). (cmb)
   . Replaced gd resources with objects. (Mark Randall)
   . Made the $num_points parameter of php_imagepolygon optional. (cmb)
   . Removed deprecated image2wbmp(). (cmb)
   . Removed deprecated png2wbmp() and jpeg2wbmp(). (cmb)
 
 - Intl:
   . Removed deprecated INTL_IDNA_VARIANT_2003. (cmb)
 
 - JIT:
   . Fixed bug #77857 (Wrong result if executed with JIT). (Laruence)
 
 - LDAP:
   . Removed deprecated ldap_sort. (mcmic)
 
 - MBString:
   . Removed the unused $is_hex parameter from mb_decode_numericentity(). (cmb)
 
 - MySQLi:
   . Fixed bug #76809 (SSL settings aren't respected when persistent connections
     are used). (fabiomsouto)
 
 - mysqlnd:
   . Fixed #60594 (mysqlnd exposes 160 lines of stats in phpinfo). (PeeHaa)
 
 - OpCache:
   . Fixed bug #78654 (Incorrectly computed opcache checksum on files with 
     non-ascii characters). (mhagstrand)
 
 - PCRE:
   . Don't ignore invalid escape sequences. (sjon)
 
 - PDO:
   . Fixed bug #77849 (Disable cloning of PDO handle/connection objects).
     (camporter)
 
 - PDO_OCI:
   . Added support for setting and getting the oracle OCI 18c call timeout.
     (camporter)
 
 - phpdbg:
   . Fixed bug #76596 (phpdbg support for display_errors=stderr). (kabel)
   . Fixed bug #76801 (too many open files). (alekitto)
   . Fixed bug #77800 (phpdbg segfaults on listing some conditional breakpoints).
     (krakjoe)
   . Fixed bug #77805 (phpdbg build fails when readline is shared). (krakjoe)
 
 - Reflection:
   . Fixed bug #78697 (ReflectionClass::implementsInterface - inaccurate error 
     message with traits). (villfa)
 
 - Session:
   . Fixed bug #78624 (session_gc return value for user defined session
     handlers). (bshaffer)
 
 - SimpleXML:
   . Fixed bug #75245 (Don't set content of elements with only whitespaces).
     (eriklundin)
 
 - sodium:
   . Fixed bug #77646 (sign_detached() strings not terminated). (Frank)
 
 - SQLite3:
   . Added SQLite3::setAuthorizer() and respective class constants. (bohwaz)
 
 - Standard:
   . Implemented FR #78638 (__PHP_Incomplete_Class should be final). (Laruence)
   . Fixed bug #77204 (getimagesize(): Read error! should mention file path).
     (peter279k)
   . Fixed bug #76859 (stream_get_line skips data if used with data-generating
     filter). (kkopachev)
 
 - tidy:
   . Removed the unused $use_include_path parameter from tidy_repair_string().
     (cmb)
 
 - XML:
   . Fixed bug #76874 (xml_parser_free() should never leak memory). (Nikita)
 
 - XMLWriter:
   . Changed functions to accept/return XMKWriter objects instead of resources.
     (cmb)
 
 - Zip:
   . Fixed bug #72374 (remove_path strips first char of filename). (tyage)
 
 <<< NOTE: Insert NEWS from last stable release here prior to actual release! >>>
diff --git a/Zend/tests/class_constants_001.phpt b/Zend/tests/class_constants_001.phpt
index f36b1af9f6..484157fe4b 100644
--- a/Zend/tests/class_constants_001.phpt
+++ b/Zend/tests/class_constants_001.phpt
@@ -6,20 +6,20 @@ class constants basic tests
 class test {
 	const val = "string";
 	const val2 = 1;
 }
 
 var_dump(test::val);
 var_dump(test::val2);
 
 var_dump(test::val3);
 
 echo "Done\n";
 ?>
 --EXPECTF--
 string(6) "string"
 int(1)
 
-Fatal error: Uncaught Error: Undefined class constant 'val3' in %s:%d
+Fatal error: Uncaught Error: Undefined class constant 'test::val3' in %s:%d
 Stack trace:
 #0 {main}
   thrown in %s on line %d
diff --git a/Zend/zend_vm_def.h b/Zend/zend_vm_def.h
index c38499d972..608d24f508 100644
--- a/Zend/zend_vm_def.h
+++ b/Zend/zend_vm_def.h
@@ -5428,70 +5428,71 @@ ZEND_VM_HOT_HANDLER(99, ZEND_FETCH_CONSTANT, UNUSED|CONST_FETCH, CONST, CACHE_SL
 ZEND_VM_HANDLER(181, ZEND_FETCH_CLASS_CONSTANT, VAR|CONST|UNUSED|CLASS_FETCH, CONST, CACHE_SLOT)
 {
 	zend_class_entry *ce, *scope;
 	zend_class_constant *c;
 	zval *value, *zv;
 	USE_OPLINE
 
 	SAVE_OPLINE();
 
 	do {
 		if (OP1_TYPE == IS_CONST) {
 			if (EXPECTED(CACHED_PTR(opline->extended_value + sizeof(void*)))) {
 				value = CACHED_PTR(opline->extended_value + sizeof(void*));
 				break;
 			} else if (EXPECTED(CACHED_PTR(opline->extended_value))) {
 				ce = CACHED_PTR(opline->extended_value);
 			} else {
 				ce = zend_fetch_class_by_name(Z_STR_P(RT_CONSTANT(opline, opline->op1)), Z_STR_P(RT_CONSTANT(opline, opline->op1) + 1), ZEND_FETCH_CLASS_DEFAULT | ZEND_FETCH_CLASS_EXCEPTION);
 				if (UNEXPECTED(ce == NULL)) {
 					ZEND_ASSERT(EG(exception));
 					ZVAL_UNDEF(EX_VAR(opline->result.var));
 					HANDLE_EXCEPTION();
 				}
 			}
 		} else {
 			if (OP1_TYPE == IS_UNUSED) {
 				ce = zend_fetch_class(NULL, opline->op1.num);
 				if (UNEXPECTED(ce == NULL)) {
 					ZEND_ASSERT(EG(exception));
 					ZVAL_UNDEF(EX_VAR(opline->result.var));
 					HANDLE_EXCEPTION();
 				}
 			} else {
 				ce = Z_CE_P(EX_VAR(opline->op1.var));
 			}
 			if (EXPECTED(CACHED_PTR(opline->extended_value) == ce)) {
 				value = CACHED_PTR(opline->extended_value + sizeof(void*));
 				break;
 			}
 		}
 
 		zv = zend_hash_find_ex(&ce->constants_table, Z_STR_P(RT_CONSTANT(opline, opline->op2)), 1);
 		if (EXPECTED(zv != NULL)) {
 			c = Z_PTR_P(zv);
 			scope = EX(func)->op_array.scope;
 			if (!zend_verify_const_access(c, scope)) {
 				zend_throw_error(NULL, "Cannot access %s const %s::%s", zend_visibility_string(Z_ACCESS_FLAGS(c->value)), ZSTR_VAL(ce->name), Z_STRVAL_P(RT_CONSTANT(opline, opline->op2)));
 				ZVAL_UNDEF(EX_VAR(opline->result.var));
 				HANDLE_EXCEPTION();
 			}
 			value = &c->value;
 			if (Z_TYPE_P(value) == IS_CONSTANT_AST) {
 				zval_update_constant_ex(value, c->ce);
 				if (UNEXPECTED(EG(exception) != NULL)) {
 					ZVAL_UNDEF(EX_VAR(opline->result.var));
 					HANDLE_EXCEPTION();
 				}
 			}
 			CACHE_POLYMORPHIC_PTR(opline->extended_value, ce, value);
 		} else {
-			zend_throw_error(NULL, "Undefined class constant '%s'", Z_STRVAL_P(RT_CONSTANT(opline, opline->op2)));
+			zend_throw_error(NULL, "Undefined class constant '%s::%s'",
+				ZSTR_VAL(ce->name), Z_STRVAL_P(RT_CONSTANT(opline, opline->op2)));
 			ZVAL_UNDEF(EX_VAR(opline->result.var));
 			HANDLE_EXCEPTION();
 		}
 	} while (0);
 
 	ZVAL_COPY_OR_DUP(EX_VAR(opline->result.var), value);
 
 	ZEND_VM_NEXT_OPCODE();
 }
diff --git a/Zend/zend_vm_execute.h b/Zend/zend_vm_execute.h
index c5a429a9e3..3940598619 100644
Binary files a/Zend/zend_vm_execute.h and b/Zend/zend_vm_execute.h differ
diff --git a/tests/classes/constants_basic_001.phpt b/tests/classes/constants_basic_001.phpt
index af9915c277..796c8d559e 100644
--- a/tests/classes/constants_basic_001.phpt
+++ b/tests/classes/constants_basic_001.phpt
@@ -10,76 +10,76 @@
   class C
   {
       const c1 = 1, c2 = 1.5;
       const c3 =  + 1, c4 =  + 1.5;
       const c5 = -1, c6 = -1.5;
 
       const c7 = __LINE__;
       const c8 = __FILE__;
       const c9 = __CLASS__;
       const c10 = __METHOD__;
       const c11 = __FUNCTION__;
 
       const c12 = DEFINED;
       const c13 = DEFINED_TO_VAR;
       const c14 = DEFINED_TO_UNDEF_VAR;
 
       const c15 = "hello1";
       const c16 = 'hello2';
       const c17 = C::c16;
       const c18 = self::c17;
   }
 
   echo "\nAttempt to access various kinds of class constants:\n";
   var_dump(C::c1);
   var_dump(C::c2);
   var_dump(C::c3);
   var_dump(C::c4);
   var_dump(C::c5);
   var_dump(C::c6);
   var_dump(C::c7);
   var_dump(C::c8);
   var_dump(C::c9);
   var_dump(C::c10);
   var_dump(C::c11);
   var_dump(C::c12);
   var_dump(C::c13);
   var_dump(C::c14);
   var_dump(C::c15);
   var_dump(C::c16);
   var_dump(C::c17);
   var_dump(C::c18);
 
   echo "\nExpecting fatal error:\n";
   var_dump(C::c19);
 
   echo "\nYou should not see this.";
 ?>
 --EXPECTF--
 Warning: Undefined variable: undef in %s on line %d
 
 Attempt to access various kinds of class constants:
 int(1)
 float(1.5)
 int(1)
 float(1.5)
 int(-1)
 float(-1.5)
 int(13)
 string(%d) "%s"
 string(1) "C"
 string(0) ""
 string(0) ""
 int(1234)
 int(456)
 NULL
 string(6) "hello1"
 string(6) "hello2"
 string(6) "hello2"
 string(6) "hello2"
 
 Expecting fatal error:
 
-Fatal error: Uncaught Error: Undefined class constant 'c19' in %s:%d
+Fatal error: Uncaught Error: Undefined class constant 'C::c19' in %s:%d
 Stack trace:
 #0 {main}
   thrown in %s on line %d
diff --git a/tests/classes/constants_visibility_004.phpt b/tests/classes/constants_visibility_004.phpt
index 93acacf3c9..983b2e247b 100644
--- a/tests/classes/constants_visibility_004.phpt
+++ b/tests/classes/constants_visibility_004.phpt
@@ -11,18 +11,18 @@ class B extends A {
 	static public function checkConstants() {
 		var_dump(self::X);
 		var_dump(self::Y);
 		var_dump(self::Z);
 	}
 }
 
 B::checkConstants();
 ?>
 --EXPECTF--
 int(1)
 int(2)
 
-Fatal error: Uncaught Error: Undefined class constant 'Z' in %s:11
+Fatal error: Uncaught Error: Undefined class constant 'B::Z' in %s:11
 Stack trace:
 #0 %s(15): B::checkConstants()
 #1 {main}
   thrown in %s on line 11
