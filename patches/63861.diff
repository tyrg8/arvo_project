commit 178d734163b315db3009fa473930688a9047656f
Author: Marti Maria <marti.maria@littlecms.com>
Date:   Sun Nov 5 21:09:15 2023 +0100

    Fix some bugs introduced by last localization commit
    
    On adding a zero terminator and free memory on error

diff --git a/src/cmstypes.c b/src/cmstypes.c
index 4f2d2ee..587c717 100644
--- a/src/cmstypes.c
+++ b/src/cmstypes.c
@@ -925,73 +925,77 @@ static
 void *Type_Text_Description_Read(struct _cms_typehandler_struct* self, cmsIOHANDLER* io, cmsUInt32Number* nItems, cmsUInt32Number SizeOfTag)
 {
     char* Text = NULL;
     wchar_t* UnicodeString = NULL;
     cmsMLU* mlu = NULL;
     cmsUInt32Number  AsciiCount;
     cmsUInt32Number  i, UnicodeCode, UnicodeCount;
     cmsUInt16Number  ScriptCodeCode, Dummy;
     cmsUInt8Number   ScriptCodeCount;
 
     *nItems = 0;
 
     //  One dword should be there
     if (SizeOfTag < sizeof(cmsUInt32Number)) return NULL;
 
     // Read len of ASCII
     if (!_cmsReadUInt32Number(io, &AsciiCount)) return NULL;
     SizeOfTag -= sizeof(cmsUInt32Number);
 
     // Check for size
     if (SizeOfTag < AsciiCount) return NULL;
 
     // All seems Ok, allocate the container
     mlu = cmsMLUalloc(self ->ContextID, 2);
     if (mlu == NULL) return NULL;
 
     // As many memory as size of tag
     Text = (char*) _cmsMalloc(self ->ContextID, AsciiCount + 1);
     if (Text == NULL) goto Error;
 
     // Read it
     if (io ->Read(io, Text, sizeof(char), AsciiCount) != AsciiCount) goto Error;
     SizeOfTag -= AsciiCount;
 
     // Make sure there is a terminator
     Text[AsciiCount] = 0;
 
     // Set the MLU entry. From here we can be tolerant to wrong types
     if (!cmsMLUsetASCII(mlu, cmsNoLanguage, cmsNoCountry, Text)) goto Error;
     _cmsFree(self ->ContextID, (void*) Text);
     Text = NULL;
 
     // Skip Unicode code
     if (SizeOfTag < 2* sizeof(cmsUInt32Number)) goto Done;
     if (!_cmsReadUInt32Number(io, &UnicodeCode)) goto Done;
     if (!_cmsReadUInt32Number(io, &UnicodeCount)) goto Done;
     SizeOfTag -= 2* sizeof(cmsUInt32Number);
 
-    if (SizeOfTag < UnicodeCount*sizeof(cmsUInt16Number)) goto Done;
+    if (UnicodeCount == 0 || SizeOfTag < UnicodeCount*sizeof(cmsUInt16Number)) goto Done;
 
-    UnicodeString = (wchar_t*)_cmsMalloc(self->ContextID, UnicodeCount * sizeof(wchar_t));
+    UnicodeString = (wchar_t*)_cmsMalloc(self->ContextID, (UnicodeCount + 1) * sizeof(wchar_t));
     if (UnicodeString == NULL) goto Done;
 
     if (!_cmsReadWCharArray(io, UnicodeCount, UnicodeString)) goto Done;
+
+    UnicodeString[UnicodeCount] = 0;
+
     if (!cmsMLUsetWide(mlu, cmsV2Unicode, cmsV2Unicode, UnicodeString)) goto Done;
     _cmsFree(self->ContextID, (void*)UnicodeString);
+    UnicodeString = NULL;
 
     SizeOfTag -= UnicodeCount*sizeof(cmsUInt16Number);
 
     // Skip ScriptCode code if present. Some buggy profiles does have less
     // data that strictly required. We need to skip it as this type may come
     // embedded in other types.
 
     if (SizeOfTag >= sizeof(cmsUInt16Number) + sizeof(cmsUInt8Number) + 67) {
 
         if (!_cmsReadUInt16Number(io, &ScriptCodeCode)) goto Done;
         if (!_cmsReadUInt8Number(io,  &ScriptCodeCount)) goto Done;
 
         // Skip rest of tag
         for (i=0; i < 67; i++) {
             if (!io ->Read(io, &Dummy, sizeof(cmsUInt8Number), 1)) goto Error;
         }
     }
@@ -1002,10 +1006,11 @@ Done:
     return mlu;
 
 Error:
+    if (UnicodeString)  _cmsFree(self->ContextID, (void*)UnicodeString);
     if (Text) _cmsFree(self ->ContextID, (void*) Text);
     if (mlu) cmsMLUfree(mlu);
     return NULL;
 }
 
 
 // This tag can come IN UNALIGNED SIZE. In order to prevent issues, we force zeros on description to align it
