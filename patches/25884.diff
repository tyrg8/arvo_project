commit c156093ffd99b0689af3826f3aa04e7db97cc543
Author: Victor Zverovich <viz@fb.com>
Date:   Fri Sep 25 08:19:21 2020 -0700

    Fix carry in fallback_format

diff --git a/include/fmt/format-inl.h b/include/fmt/format-inl.h
index ee5ac889..788dafb8 100644
--- a/include/fmt/format-inl.h
+++ b/include/fmt/format-inl.h
@@ -2442,115 +2442,115 @@ template <typename Double>
 void fallback_format(Double d, int num_digits, bool binary32, buffer<char>& buf,
                      int& exp10) {
   bigint numerator;    // 2 * R in (FPP)^2.
   bigint denominator;  // 2 * S in (FPP)^2.
   // lower and upper are differences between value and corresponding boundaries.
   bigint lower;             // (M^- in (FPP)^2).
   bigint upper_store;       // upper's value if different from lower.
   bigint* upper = nullptr;  // (M^+ in (FPP)^2).
   fp value;
   // Shift numerator and denominator by an extra bit or two (if lower boundary
   // is closer) to make lower and upper integers. This eliminates multiplication
   // by 2 during later computations.
   const bool is_predecessor_closer =
       binary32 ? value.assign(static_cast<float>(d)) : value.assign(d);
   int shift = is_predecessor_closer ? 2 : 1;
   uint64_t significand = value.f << shift;
   if (value.e >= 0) {
     numerator.assign(significand);
     numerator <<= value.e;
     lower.assign(1);
     lower <<= value.e;
     if (shift != 1) {
       upper_store.assign(1);
       upper_store <<= value.e + 1;
       upper = &upper_store;
     }
     denominator.assign_pow10(exp10);
     denominator <<= 1;
   } else if (exp10 < 0) {
     numerator.assign_pow10(-exp10);
     lower.assign(numerator);
     if (shift != 1) {
       upper_store.assign(numerator);
       upper_store <<= 1;
       upper = &upper_store;
     }
     numerator *= significand;
     denominator.assign(1);
     denominator <<= shift - value.e;
   } else {
     numerator.assign(significand);
     denominator.assign_pow10(exp10);
     denominator <<= shift - value.e;
     lower.assign(1);
     if (shift != 1) {
       upper_store.assign(1ULL << 1);
       upper = &upper_store;
     }
   }
   // Invariant: value == (numerator / denominator) * pow(10, exp10).
   if (num_digits < 0) {
     // Generate the shortest representation.
     if (!upper) upper = &lower;
     bool even = (value.f & 1) == 0;
     num_digits = 0;
     char* data = buf.data();
     for (;;) {
       int digit = numerator.divmod_assign(denominator);
       bool low = compare(numerator, lower) - even < 0;  // numerator <[=] lower.
       // numerator + upper >[=] pow10:
       bool high = add_compare(numerator, *upper, denominator) + even > 0;
       data[num_digits++] = static_cast<char>('0' + digit);
       if (low || high) {
         if (!low) {
           ++data[num_digits - 1];
         } else if (high) {
           int result = add_compare(numerator, numerator, denominator);
           // Round half to even.
           if (result > 0 || (result == 0 && (digit % 2) != 0))
             ++data[num_digits - 1];
         }
         buf.try_resize(to_unsigned(num_digits));
         exp10 -= num_digits - 1;
         return;
       }
       numerator *= 10;
       lower *= 10;
       if (upper != &lower) *upper *= 10;
     }
   }
   // Generate the given number of digits.
   exp10 -= num_digits - 1;
   if (num_digits == 0) {
     buf.try_resize(1);
     denominator *= 10;
     buf[0] = add_compare(numerator, numerator, denominator) > 0 ? '1' : '0';
     return;
   }
   buf.try_resize(to_unsigned(num_digits));
   for (int i = 0; i < num_digits - 1; ++i) {
     int digit = numerator.divmod_assign(denominator);
     buf[i] = static_cast<char>('0' + digit);
     numerator *= 10;
   }
   int digit = numerator.divmod_assign(denominator);
   auto result = add_compare(numerator, numerator, denominator);
   if (result > 0 || (result == 0 && (digit % 2) != 0)) {
     if (digit == 9) {
       const auto overflow = '0' + 10;
       buf[num_digits - 1] = overflow;
       // Propagate the carry.
       for (int i = num_digits - 1; i > 0 && buf[i] == overflow; --i) {
         buf[i] = '0';
         ++buf[i - 1];
       }
       if (buf[0] == overflow) {
-        buf[0] = '0';
+        buf[0] = '1';
         ++exp10;
       }
       return;
     }
     ++digit;
   }
   buf[num_digits - 1] = static_cast<char>('0' + digit);
 }
diff --git a/test/format-test.cc b/test/format-test.cc
index 86128ed1..8d33f056 100644
--- a/test/format-test.cc
+++ b/test/format-test.cc
@@ -880,92 +880,93 @@ TEST(FormatterTest, RuntimeWidth) {
 TEST(FormatterTest, Precision) {
   char format_str[BUFFER_SIZE];
   safe_sprintf(format_str, "{0:.%u", UINT_MAX);
   increment(format_str + 4);
   EXPECT_THROW_MSG(format(format_str, 0), format_error, "number is too big");
   size_t size = std::strlen(format_str);
   format_str[size] = '}';
   format_str[size + 1] = 0;
   EXPECT_THROW_MSG(format(format_str, 0), format_error, "number is too big");
 
   safe_sprintf(format_str, "{0:.%u", INT_MAX + 1u);
   EXPECT_THROW_MSG(format(format_str, 0), format_error, "number is too big");
   safe_sprintf(format_str, "{0:.%u}", INT_MAX + 1u);
   EXPECT_THROW_MSG(format(format_str, 0), format_error, "number is too big");
 
   EXPECT_THROW_MSG(format("{0:.", 0), format_error,
                    "missing precision specifier");
   EXPECT_THROW_MSG(format("{0:.}", 0), format_error,
                    "missing precision specifier");
 
   EXPECT_THROW_MSG(format("{0:.2", 0), format_error,
                    "precision not allowed for this argument type");
   EXPECT_THROW_MSG(format("{0:.2}", 42), format_error,
                    "precision not allowed for this argument type");
   EXPECT_THROW_MSG(format("{0:.2f}", 42), format_error,
                    "precision not allowed for this argument type");
   EXPECT_THROW_MSG(format("{0:.2}", 42u), format_error,
                    "precision not allowed for this argument type");
   EXPECT_THROW_MSG(format("{0:.2f}", 42u), format_error,
                    "precision not allowed for this argument type");
   EXPECT_THROW_MSG(format("{0:.2}", 42l), format_error,
                    "precision not allowed for this argument type");
   EXPECT_THROW_MSG(format("{0:.2f}", 42l), format_error,
                    "precision not allowed for this argument type");
   EXPECT_THROW_MSG(format("{0:.2}", 42ul), format_error,
                    "precision not allowed for this argument type");
   EXPECT_THROW_MSG(format("{0:.2f}", 42ul), format_error,
                    "precision not allowed for this argument type");
   EXPECT_THROW_MSG(format("{0:.2}", 42ll), format_error,
                    "precision not allowed for this argument type");
   EXPECT_THROW_MSG(format("{0:.2f}", 42ll), format_error,
                    "precision not allowed for this argument type");
   EXPECT_THROW_MSG(format("{0:.2}", 42ull), format_error,
                    "precision not allowed for this argument type");
   EXPECT_THROW_MSG(format("{0:.2f}", 42ull), format_error,
                    "precision not allowed for this argument type");
   EXPECT_THROW_MSG(format("{0:3.0}", 'x'), format_error,
                    "precision not allowed for this argument type");
   EXPECT_EQ("1.2", format("{0:.2}", 1.2345));
   EXPECT_EQ("1.2", format("{0:.2}", 1.2345l));
   EXPECT_EQ("1.2e+56", format("{:.2}", 1.234e56));
   EXPECT_EQ("1e+00", format("{:.0e}", 1.0L));
   EXPECT_EQ("  0.0e+00", format("{:9.1e}", 0.0));
   EXPECT_EQ(
       "4.9406564584124654417656879286822137236505980261432476442558568250067550"
       "727020875186529983636163599237979656469544571773092665671035593979639877"
       "479601078187812630071319031140452784581716784898210368871863605699873072"
       "305000638740915356498438731247339727316961514003171538539807412623856559"
       "117102665855668676818703956031062493194527159149245532930545654440112748"
       "012970999954193198940908041656332452475714786901472678015935523861155013"
       "480352649347201937902681071074917033322268447533357208324319361e-324",
       format("{:.494}", 4.9406564584124654E-324));
   EXPECT_EQ(
       "-0X1.41FE3FFE71C9E000000000000000000000000000000000000000000000000000000"
       "000000000000000000000000000000000000000000000000000000000000000000000000"
       "000000000000000000000000000000000000000000000000000000000000000000000000"
       "000000000000000000000000000000000000000000000000000000000000000000000000"
       "000000000000000000000000000000000000000000000000000000000000000000000000"
       "000000000000000000000000000000000000000000000000000000000000000000000000"
       "000000000000000000000000000000000000000000000000000000000000000000000000"
       "000000000000000000000000000000000000000000000000000000000000000000000000"
       "000000000000000000000000000000000000000000000000000000000000000000000000"
       "000000000000000000000000000000000000000000000000000000000000000000000000"
       "000000000000000000000000000000000000000000000000000000000000000000000000"
       "000000000000000000000000000000000000000000000000000P+127",
       format("{:.838A}", -2.14001164E+38));
   EXPECT_EQ("123.", format("{:#.0f}", 123.0));
   EXPECT_EQ("1.23", format("{:.02f}", 1.234));
   EXPECT_EQ("0.001", format("{:.1g}", 0.001));
   EXPECT_EQ("1019666400", format("{}", 1019666432.0f));
+  EXPECT_EQ("1e+01", format("{:.0e}", 9.5));
 
   EXPECT_THROW_MSG(format("{0:.2}", reinterpret_cast<void*>(0xcafe)),
                    format_error,
                    "precision not allowed for this argument type");
   EXPECT_THROW_MSG(format("{0:.2f}", reinterpret_cast<void*>(0xcafe)),
                    format_error,
                    "precision not allowed for this argument type");
   EXPECT_THROW_MSG(format("{:.{}e}", 42.0, fmt::detail::max_value<int>()),
                    format_error, "number is too big");
 
   EXPECT_EQ("st", format("{0:.2}", "str"));
 }
