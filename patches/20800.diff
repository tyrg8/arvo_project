commit 871b921f79facab9f99bf0855f7b99027671b719
Author: Victor M. Alvarez <vmalvarez@virustotal.com>
Date:   Sat Feb 22 12:16:43 2020 +0100

    Fix buffer overrun in pe_parse_debug_directory.

diff --git a/libyara/modules/pe/pe.c b/libyara/modules/pe/pe.c
index 45f7ddde..3a92073c 100644
--- a/libyara/modules/pe/pe.c
+++ b/libyara/modules/pe/pe.c
@@ -280,93 +280,97 @@ static void pe_parse_rich_signature(
   return;
 }
 
+
 static void pe_parse_debug_directory(
     PE* pe)
 {
   PIMAGE_DATA_DIRECTORY data_dir;
   PIMAGE_DEBUG_DIRECTORY debug_dir;
   int64_t debug_dir_offset;
   int64_t pcv_hdr_offset;
   int i, dcount;
   size_t pdb_path_len;
   char* pdb_path = NULL;
   
   data_dir = pe_get_directory_entry(
       pe, IMAGE_DIRECTORY_ENTRY_DEBUG);
 
   if (data_dir == NULL)
     return;
 
   if (yr_le32toh(data_dir->Size) == 0)
     return;
 
   if (yr_le32toh(data_dir->Size) % sizeof(IMAGE_DEBUG_DIRECTORY) != 0)
     return;
 
   if (yr_le32toh(data_dir->VirtualAddress) == 0)
     return;
 
   debug_dir_offset = pe_rva_to_offset(
       pe, yr_le32toh(data_dir->VirtualAddress));
 
   if (debug_dir_offset < 0)
     return;
 
   dcount = yr_le32toh(data_dir->Size) / sizeof(IMAGE_DEBUG_DIRECTORY);
 
   for (i = 0; i < dcount; i++)
   {
     debug_dir = (PIMAGE_DEBUG_DIRECTORY) \
         (pe->data + debug_dir_offset + i * sizeof(IMAGE_DEBUG_DIRECTORY));
     
     if (!struct_fits_in_pe(pe, debug_dir, IMAGE_DEBUG_DIRECTORY))
       break;
   
     if (yr_le32toh(debug_dir->Type) != IMAGE_DEBUG_TYPE_CODEVIEW)
       continue;
     
     if (yr_le32toh(debug_dir->AddressOfRawData) == 0)
       continue;
     
     pcv_hdr_offset = pe_rva_to_offset(
         pe, yr_le32toh(debug_dir->AddressOfRawData));
 
     if (pcv_hdr_offset < 0)
       continue;
 
     PCV_HEADER cv_hdr = (PCV_HEADER) (pe->data + pcv_hdr_offset);
 
+    if (!struct_fits_in_pe(pe, cv_hdr, CV_HEADER))
+      continue;
+
     if (yr_le32toh(cv_hdr->dwSignature) == CVINFO_PDB20_CVSIGNATURE)
     {
       PCV_INFO_PDB20 pdb20 = (PCV_INFO_PDB20) cv_hdr;
       
       if (struct_fits_in_pe(pe, pdb20, CV_INFO_PDB20))
         pdb_path = (char*) (pdb20->PdbFileName);
     }
     else if (yr_le32toh(cv_hdr->dwSignature) == CVINFO_PDB70_CVSIGNATURE)
     {
       PCV_INFO_PDB70 pdb70 = (PCV_INFO_PDB70) cv_hdr;
       
       if (struct_fits_in_pe(pe, pdb70, CV_INFO_PDB70))
         pdb_path = (char*) (pdb70->PdbFileName);
     }
 
     if (pdb_path != NULL)
     {
       pdb_path_len = strnlen(
-        pdb_path, yr_min(available_space(pe, pdb_path), MAX_PATH));
+          pdb_path, yr_min(available_space(pe, pdb_path), MAX_PATH));
 
       if (pdb_path_len > 0 && pdb_path_len < MAX_PATH)
       {
         set_sized_string(pdb_path, pdb_path_len, pe->object, "pdb_path");
         break;
       }
     }
   }
   
   return;
 }
 
 // Return a pointer to the resource directory string or NULL.
 // The callback function will parse this and call set_sized_string().
 // The pointer is guaranteed to have enough space to contain the entire string.
