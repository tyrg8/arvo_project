commit 6135ff05d0897342ca5c81585cef5a650eae67b9
Author: Liviu Chircu <liviu@opensips.org>
Date:   Mon Nov 7 10:55:03 2022 +0200

    parse_via_param(): Fix out-of-bounds read edge-case (OSS-Fuzz)
    
    Similar to 5e9f72d3d, but for the parse_via_param() function.
    
    Severity: Low
    Fixes OSS-Fuzz#53080

diff --git a/parser/parse_via.c b/parser/parse_via.c
index 667fa39a3..68a0d18e1 100644
--- a/parser/parse_via.c
+++ b/parser/parse_via.c
@@ -111,830 +111,833 @@ enum {
 /* entry state must be F_PARAM, or saved_state=F_PARAM and
  * state=F_{LF,CR,CRLF}!
  * output state = L_PARAM or F_PARAM or END_OF_HEADER
  * (and saved_state= last state); everything else => error
  * WARNING: param->start must be filled before, it's used in param->size
  * computation.
  */
 static /*inline*/ char* parse_via_param(char* p, char* end,
 										unsigned char* pstate,
 				    					unsigned char* psaved_state,
 										struct via_param* param)
 {
 	char* tmp;
 	register unsigned char state;
 	unsigned char saved_state;
 
 	state=*pstate;
 
 	saved_state=*psaved_state;
 	param->type=PARAM_ERROR;
 
 	for (tmp=p;tmp<end;tmp++){
 		switch(*tmp){
 			case ' ':
 			case '\t':
 				switch(state){
 					case FIN_HIDDEN:
 					case FIN_ALIAS:
 						param->type=state;
 						param->name.len=tmp-param->name.s;
 						state=L_PARAM;
 						goto endofparam;
 					case FIN_BRANCH:
 					case FIN_TTL:
 					case FIN_MADDR:
 					case FIN_RECEIVED:
 					case FIN_RPORT:
 					case FIN_I:
 						param->type=state;
 						param->name.len=tmp-param->name.s;
 						state=L_VALUE;
 						goto find_value;
 					case F_PARAM:
 						break;
 					case F_LF:
 					case F_CR:
 					case F_CRLF:
 						state=saved_state;
 						break;
 					case GEN_PARAM:
 					default:
 						param->type=GEN_PARAM;
 						param->name.len=tmp-param->name.s;
 						state=L_VALUE;
 						goto find_value;
 				}
 				break;
 			/* \n and \r*/
 			case '\n':
 				switch(state){
 					case FIN_HIDDEN:
 					case FIN_ALIAS:
 						param->type=state;
 						param->name.len=tmp-param->name.s;
 						param->size=tmp-param->start;
 						saved_state=L_PARAM;
 						state=F_LF;
 						goto endofparam;
 					case FIN_BRANCH:
 					case FIN_TTL:
 					case FIN_MADDR:
 					case FIN_RECEIVED:
 					case FIN_I:
 					case FIN_RPORT:
 						param->type=state;
 						param->name.len=tmp-param->name.s;
 						param->size=tmp-param->start;
 						saved_state=L_VALUE;
 						state=F_LF;
 						goto find_value;
 					case F_PARAM:
 						saved_state=state;
 						state=F_LF;
 						break;
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					case F_CR:
 						state=F_CRLF;
 						break;
 					case GEN_PARAM:
 					default:
 						param->type=GEN_PARAM;
 						saved_state=L_VALUE;
 						param->name.len=tmp-param->name.s;
 						param->size=tmp-param->start;
 						state=F_LF;
 						goto find_value;
 				}
 				break;
 			case '\r':
 				switch(state){
 					case FIN_HIDDEN:
 					case FIN_ALIAS:
 						param->type=state;
 						param->name.len=tmp-param->name.s;
 						param->size=tmp-param->start;
 						saved_state=L_PARAM;
 						state=F_CR;
 						goto endofparam;
 					case FIN_BRANCH:
 					case FIN_TTL:
 					case FIN_MADDR:
 					case FIN_RECEIVED:
 					case FIN_I:
 					case FIN_RPORT:
 						param->type=state;
 						param->name.len=tmp-param->name.s;
 						param->size=tmp-param->start;
 						saved_state=L_VALUE;
 						state=F_CR;
 						goto find_value;
 					case F_PARAM:
 						saved_state=state;
 						state=F_CR;
 						break;
 					case F_CR:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					case GEN_PARAM:
 					default:
 						param->type=GEN_PARAM;
 						param->name.len=tmp-param->name.s;
 						param->size=tmp-param->start;
 						saved_state=L_VALUE;
 						state=F_CR;
 						goto find_value;
 				}
 				break;
 
 			case '=':
 				switch(state){
 					case FIN_BRANCH:
 					case FIN_TTL:
 					case FIN_MADDR:
 					case FIN_RECEIVED:
 					case FIN_RPORT:
 					case FIN_I:
 						param->type=state;
 						param->name.len=tmp-param->name.s;
 						state=F_VALUE;
 						goto find_value;
 					case F_PARAM:
 					case FIN_HIDDEN:
 					case FIN_ALIAS:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto parse_error;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					case GEN_PARAM:
 					default:
 						param->type=GEN_PARAM;
 						param->name.len=tmp-param->name.s;
 						state=F_VALUE;
 						goto find_value;
 				}
 				break;
 			case ';':
 				switch(state){
 					case FIN_HIDDEN:
 					case FIN_RPORT: /* rport can appear w/o a value */
 					case FIN_ALIAS:
 						param->type=state;
 						param->name.len=tmp-param->name.s;
 						state=F_PARAM;
 						goto endofparam;
 					case FIN_BRANCH:
 					case FIN_MADDR:
 					case FIN_TTL:
 					case FIN_RECEIVED:
 					case FIN_I:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto parse_error;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					case GEN_PARAM:
 					default:
 						param->type=GEN_PARAM;
 						param->name.len=tmp-param->name.s;
 						state=F_PARAM;
 						goto endofparam;
 				}
 				break;
 			case ',':
 				switch(state){
 					case FIN_HIDDEN:
 					case FIN_RPORT:
 					case FIN_ALIAS:
 						param->type=state;
 						param->name.len=tmp-param->name.s;
 						state=F_VIA;
 						goto endofvalue;
 					case FIN_BRANCH:
 					case FIN_MADDR:
 					case FIN_TTL:
 					case FIN_RECEIVED:
 					case FIN_I:
 						LM_ERR("new via found (',') when '=' expected"
 								"(state %d=)\n", state);
 						goto parse_error; /* or we could ignore this bad param*/
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					case GEN_PARAM:
 					default:
 						param->type=GEN_PARAM;
 						param->name.len=tmp-param->name.s;
 						state=F_VIA;
 						goto endofvalue;
 				}
 				break;
 
 				/* param names */
 			case 'h':
 			case 'H':
 				switch(state){
 					case F_PARAM:
 						state=HIDDEN1;
 						param->name.s=tmp;
 						break;
 					case BRANCH5:
 						state=FIN_BRANCH;
 						break;
 					case GEN_PARAM:
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						state=GEN_PARAM;
 				}
 				break;
 			case 'i':
 			case 'I':
 				switch(state){
 					case F_PARAM:
 						state=FIN_I;
 						param->name.s=tmp;
 						break;
 					case HIDDEN1:
 						state=HIDDEN2;
 						break;
 					case RECEIVED4:
 						state=RECEIVED5;
 						break;
 					case ALIAS2:
 						state=ALIAS3;
 						break;
 					case GEN_PARAM:
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						state=GEN_PARAM;
 				}
 				break;
 			case 'd':
 			case 'D':
 				switch(state){
 					case F_PARAM:
 						state=GEN_PARAM;
 						param->name.s=tmp;
 						break;
 					case HIDDEN2:
 						state=HIDDEN3;
 						break;
 					case HIDDEN3:
 						state=HIDDEN4;
 						break;
 					case MADDR2:
 						state=MADDR3;
 						break;
 					case MADDR3:
 						state=MADDR4;
 						break;
 					case RECEIVED7:
 						state=FIN_RECEIVED;
 						break;
 					case GEN_PARAM:
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						state=GEN_PARAM;
 				}
 				break;
 			case 'e':
 			case 'E':
 				switch(state){
 					case F_PARAM:
 						state=GEN_PARAM;
 						param->name.s=tmp;
 						break;
 					case HIDDEN4:
 						state=HIDDEN5;
 						break;
 					case RECEIVED1:
 						state=RECEIVED2;
 						break;
 					case RECEIVED3:
 						state=RECEIVED4;
 						break;
 					case RECEIVED6:
 						state=RECEIVED7;
 						break;
 					case GEN_PARAM:
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						state=GEN_PARAM;
 				}
 				break;
 			case 'n':
 			case 'N':
 				switch(state){
 					case F_PARAM:
 						state=GEN_PARAM;
 						param->name.s=tmp;
 						break;
 					case HIDDEN5:
 						state=FIN_HIDDEN;
 						break;
 					case BRANCH3:
 						state=BRANCH4;
 						break;
 					case GEN_PARAM:
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						state=GEN_PARAM;
 				}
 				break;
 			case 't':
 			case 'T':
 				switch(state){
 					case F_PARAM:
 						state=TTL1;
 						param->name.s=tmp;
 						break;
 					case TTL1:
 						state=TTL2;
 						break;
 					case RPORT3:
 						state=FIN_RPORT;
 						break;
 					case GEN_PARAM:
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						state=GEN_PARAM;
 				}
 				break;
 			case 'l':
 			case 'L':
 				switch(state){
 					case F_PARAM:
 						state=GEN_PARAM;
 						param->name.s=tmp;
 						break;
 					case TTL2:
 						state=FIN_TTL;
 						break;
 					case ALIAS1:
 						state=ALIAS2;
 						break;
 					case GEN_PARAM:
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						state=GEN_PARAM;
 				}
 				break;
 			case 'm':
 			case 'M':
 				switch(state){
 					case F_PARAM:
 						state=MADDR1;
 						param->name.s=tmp;
 						break;
 					case GEN_PARAM:
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						state=GEN_PARAM;
 				}
 				break;
 			case 'a':
 			case 'A':
 				switch(state){
 					case F_PARAM:
 						state=ALIAS1;
 						param->name.s=tmp;
 						break;
 					case MADDR1:
 						state=MADDR2;
 						break;
 					case BRANCH2:
 						state=BRANCH3;
 						break;
 					case ALIAS3:
 						state=ALIAS4;
 						break;
 					case GEN_PARAM:
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						state=GEN_PARAM;
 				}
 				break;
 			case 'r':
 			case 'R':
 				switch(state){
 					case MADDR4:
 						state=FIN_MADDR;
 						break;
 					case F_PARAM:
 						state=RECEIVED1;
 						param->name.s=tmp;
 						break;
 					case BRANCH1:
 						state=BRANCH2;
 						break;
 					case RPORT2:
 						state=RPORT3;
 						break;
 					case GEN_PARAM:
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						state=GEN_PARAM;
 				}
 				break;
 			case 'c':
 			case 'C':
 				switch(state){
 					case F_PARAM:
 						state=GEN_PARAM;
 						param->name.s=tmp;
 						break;
 					case RECEIVED2:
 						state=RECEIVED3;
 						break;
 					case BRANCH4:
 						state=BRANCH5;
 						break;
 					case GEN_PARAM:
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						state=GEN_PARAM;
 				}
 				break;
 			case 'v':
 			case 'V':
 				switch(state){
 					case F_PARAM:
 						state=GEN_PARAM;
 						param->name.s=tmp;
 						break;
 					case RECEIVED5:
 						state=RECEIVED6;
 						break;
 					case GEN_PARAM:
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						state=GEN_PARAM;
 				}
 				break;
 			case 'b':
 			case 'B':
 				switch(state){
 					case F_PARAM:
 						state=BRANCH1;
 						param->name.s=tmp;
 						break;
 					case GEN_PARAM:
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						state=GEN_PARAM;
 				}
 				break;
 			case 'p':
 			case 'P':
 				switch(state){
 					case F_PARAM:
 						state=GEN_PARAM;
 						param->name.s=tmp;
 						break;
 					case RECEIVED1:
 						state=RPORT1;
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						state=GEN_PARAM;
 				}
 				break;
 			case 'o':
 			case 'O':
 				switch(state){
 					case F_PARAM:
 						state=GEN_PARAM;
 						param->name.s=tmp;
 						break;
 					case RPORT1:
 						state=RPORT2;
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						state=GEN_PARAM;
 				}
 				break;
 			case 's':
 			case 'S':
 				switch(state){
 					case F_PARAM:
 						state=GEN_PARAM;
 						param->name.s=tmp;
 						break;
 					case ALIAS4:
 						state=FIN_ALIAS;
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						state=GEN_PARAM;
 				}
 				break;
 			default:
 				switch(state){
 					case F_PARAM:
 						state=GEN_PARAM;
 						param->name.s=tmp;
 						break;
 					case GEN_PARAM:
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						state=GEN_PARAM;
 				}
 		}
 	}/* for tmp*/
 
 	/* end of packet? => error, no cr/lf,',' found!!!*/
 	saved_state=state;
 	state=END_OF_HEADER;
 	goto parse_error;
 
  find_value:
 	tmp++;
-	for(;*tmp;tmp++){
+	for(;tmp<end;tmp++){
 		switch(*tmp){
 			case ' ':
 			case '\t':
 				switch(state){
 					case L_VALUE:
 					case F_VALUE: /*eat space*/
 						break;
 					case P_VALUE:
 						state=L_PARAM;
 						param->value.len=tmp-param->value.s;
 						goto endofvalue;
 					case P_STRING:
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state=saved_state;
 						break;
 					default:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto parse_error;
 				}
 				break;
 			case '\n':
 				switch(state){
 					case L_VALUE:
 					case F_VALUE: /*eat space*/
 					case P_STRING:
 						saved_state=state;
 						param->size=tmp-param->start;
 						state=F_LF;
 						break;
 					case P_VALUE:
 						saved_state=L_PARAM;
 						state=F_LF;
 						param->value.len=tmp-param->value.s;
 						goto endofvalue;
 					case F_LF:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					case F_CR:
 						state=F_CRLF;
 						break;
 					default:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto parse_error;
 				}
 				break;
 			case '\r':
 				switch(state){
 					case L_VALUE:
 					case F_VALUE: /*eat space*/
 					case P_STRING:
 						saved_state=state;
 						param->size=tmp-param->start;
 						state=F_CR;
 						break;
 					case P_VALUE:
 						param->value.len=tmp-param->value.s;
 						saved_state=L_PARAM;
 						state=F_CR;
 						goto endofvalue;
 					case F_LF:
 					case F_CR:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto parse_error;
 				}
 				break;
 
 			case '=':
 				switch(state){
 					case L_VALUE:
 						state=F_VALUE;
 						break;
 					case P_STRING:
 						break;
 					case F_LF:
 					case F_CR:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto parse_error;
 				}
 				break;
 			case ';':
 				switch(state){
 					case P_VALUE:
 						param->value.len=tmp-param->value.s;
 						state=F_PARAM;
 						goto endofvalue;
 					case F_VALUE:
 						param->value.len=0;
 						state=F_PARAM;
 						goto endofvalue;
 					case P_STRING:
 						break; /* what to do? */
 					case F_LF:
 					case F_CR:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					case L_VALUE:
 						if (param->type==FIN_RPORT){
 							param->value.len=0;
 							param->value.s=0; /* null value */
 							state=F_PARAM;
 							goto endofvalue;
 						};
 						/* no break */
 					default:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto parse_error;
 				}
 				break;
 			case ',':
 				switch(state){
 					case P_VALUE:
 						param->value.len=tmp-param->value.s;
 						state=F_VIA;
 						goto endofvalue;
 					case P_STRING:
 					case F_LF:
 					case F_CR:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					case L_VALUE:
 						if (param->type==FIN_RPORT){
 							param->value.len=0;
 							param->value.s=0; /* null value */
 							state=F_VIA;
 							goto endofvalue;
 						};
 						/* no break */
 					default:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto parse_error;
 				}
 				break; /* what to do? */
 			case '"':
 				switch(state){
 					case F_VALUE:
 						state=P_STRING;
 						param->value.s=tmp+1;
 						break;
 					case P_STRING:
 						state=L_PARAM;
 						param->value.len=tmp-param->value.s;
 						goto endofvalue;
 					case F_LF:
 					case F_CR:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto parse_error;
 				}
 				break;
+			case '\0':
+				break;
+
 			default:
 				switch(state){
 					case F_VALUE:
 						state=P_VALUE;
 						param->value.s=tmp;
 						break;
 					case P_VALUE:
 					case P_STRING:
 						break;
 					case F_LF:
 					case F_CR:
 					case F_CRLF:
 						state=END_OF_HEADER;
 						goto end_via;
 					default:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto parse_error;
 				}
 		}
 	} /* for2 tmp*/
 
 	/* end of buff and no CR/LF =>error*/
 	saved_state=state;
 	state=END_OF_HEADER;
 	goto parse_error;
 
  endofparam:
  endofvalue:
 	param->size=tmp-param->start;
diff --git a/parser/test/test_parser.c b/parser/test/test_parser.c
index 627effc38..f566e5b7b 100644
--- a/parser/test/test_parser.c
+++ b/parser/test/test_parser.c
@@ -146,39 +146,41 @@ void test_parse_uri(void)
 static const struct tts {
 	const char *tmsg;
 	int tres;
 } tset[] = {
 	{
 		/* test for read overflows on EoH parsing */
 		"e \xff\xff\xff\xff     \xff\n\xff\xff  ",
 		-1,
 	}, {
 		/* test for read overflows on To header param parsing */
 		"d  \x02\x80\0\nt\0:G;150=\"a8",
 		-1,
 	}, {
 		/* test for read overflows on bad header body (no \n ending) */
 		"m  r\nu:c \x1b\r   : ]",
 		-1,
 	}, {
 		/* test for read overflow on Via header (the @end pointer) */
 		"Q e  M\nV:SIP/2.0  /1P 4rr;TT;TT;TT;TT;TT;TT;T\xd2;TT;",
 		-1,
+	}, {
+		/* test for read overflow on Via header param (the @end pointer) */
+		"A  !\nV:SIP/2.0/? M;recEIVeD\n ",
+		-1,
 	},
-
-	{"\0", 0},
 };
 
 void test_parse_msg(void)
 {
 	int i;
 
-	for (i = 0; tset[i].tmsg[0]; i++) {
+	for (i = 0; i < sizeof tset/sizeof *tset; i++) {
 		struct sip_msg msg;
 
 		memset(&msg, 0, sizeof msg);
 		msg.buf = (char *)tset[i].tmsg;
 		msg.len = strlen(msg.buf);
 
 		ok(parse_msg(msg.buf, msg.len, &msg) == tset[i].tres, "parse-msg-t%d", i);
 	}
 }
