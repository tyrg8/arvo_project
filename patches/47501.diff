commit 7ab96e83d85165801894e887816db6042ea2f9be
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Thu May 19 09:26:20 2022 +0100

    oss-fuzz 47499: reading xref, check starting object num is positive

diff --git a/pdf/pdf_xref.c b/pdf/pdf_xref.c
index b0912d221..3142f2ef1 100644
--- a/pdf/pdf_xref.c
+++ b/pdf/pdf_xref.c
@@ -636,127 +636,130 @@ static int write_offset(byte *B, gs_offset_t o, unsigned int g, unsigned char fr
 static int read_xref_section(pdf_context *ctx, pdf_c_stream *s, uint64_t *section_start, uint64_t *section_size)
 {
     int code = 0, i, j;
     int start = 0;
     int size = 0;
     int64_t bytes = 0;
     char Buffer[21];
 
     *section_start = *section_size = 0;
 
     if (ctx->args.pdfdebug)
         dmprintf(ctx->memory, "\n%% Reading xref section\n");
 
     code = pdfi_read_bare_int(ctx, ctx->main_stream, &start);
     if (code < 0) {
         /* Not an int, might be a keyword */
         code = pdfi_read_bare_keyword(ctx, ctx->main_stream);
         if (code < 0)
             return code;
 
         if (code != TOKEN_TRAILER) {
             /* element is not an integer, and not a keyword - not a valid xref */
             return_error(gs_error_typecheck);
         }
         return 1;
     }
 
+    if (start < 0)
+        return_error(gs_error_rangecheck);
+
     *section_start = start;
 
     code = pdfi_read_bare_int(ctx, ctx->main_stream, &size);
     if (code < 0)
         return code;
     if (code == 0)
         return_error(gs_error_syntaxerror);
 
     /* Zero sized xref sections are valid; see the file attached to
      * bug 704947 for an example. */
     if (size < 0)
         return_error(gs_error_rangecheck);
 
     *section_size = size;
 
     if (ctx->args.pdfdebug)
         dmprintf2(ctx->memory, "\n%% Section starts at %d and has %d entries\n", (unsigned int) start, (unsigned int)size);
 
     if (size > 0) {
         if (ctx->xref_table == NULL) {
             ctx->xref_table = (xref_table_t *)gs_alloc_bytes(ctx->memory, sizeof(xref_table_t), "read_xref_stream allocate xref table");
             if (ctx->xref_table == NULL)
                 return_error(gs_error_VMerror);
             memset(ctx->xref_table, 0x00, sizeof(xref_table_t));
 
             ctx->xref_table->xref = (xref_entry *)gs_alloc_bytes(ctx->memory, (start + size) * sizeof(xref_entry), "read_xref_stream allocate xref table entries");
             if (ctx->xref_table->xref == NULL){
                 gs_free_object(ctx->memory, ctx->xref_table, "free xref table on error allocating entries");
                 ctx->xref_table = NULL;
                 return_error(gs_error_VMerror);
             }
 #if REFCNT_DEBUG
             ctx->xref_table->UID = ctx->ref_UID++;
             dmprintf1(ctx->memory, "Allocated xref table with UID %"PRIi64"\n", ctx->xref_table->UID);
 #endif
 
             memset(ctx->xref_table->xref, 0x00, (start + size) * sizeof(xref_entry));
             ctx->xref_table->ctx = ctx;
             ctx->xref_table->type = PDF_XREF_TABLE;
             ctx->xref_table->xref_size = start + size;
             pdfi_countup(ctx->xref_table);
         } else {
             if (start + size > ctx->xref_table->xref_size) {
                 code = resize_xref(ctx, start + size);
                 if (code < 0)
                     return code;
             }
         }
     }
 
     pdfi_skip_white(ctx, s);
     for (i=0;i< size;i++){
         xref_entry *entry = &ctx->xref_table->xref[i + start];
         unsigned char free;
         gs_offset_t off;
         unsigned int gen;
 
         bytes = pdfi_read_bytes(ctx, (byte *)Buffer, 1, 20, s);
         if (bytes < 20)
             return_error(gs_error_ioerror);
         j = 19;
         while (Buffer[j] != 0x0D && Buffer[j] != 0x0A) {
             pdfi_unread_byte(ctx, s, (byte)Buffer[j]);
             if (--j < 0) {
                 dmprintf(ctx->memory, "Invalid xref entry, line terminator missing.\n");
                 code = read_xref_entry_slow(ctx, s, &off, &gen, &free);
                 if (code < 0)
                     return code;
                 code = write_offset((byte *)Buffer, off, gen, free);
                 if (code < 0)
                     return code;
                 j = 19;
                 break;
             }
         }
         Buffer[j] = 0x00;
         if (entry->object_num != 0)
             continue;
 
         if (sscanf(Buffer, "%"PRIdOFFSET" %d %c", &entry->u.uncompressed.offset, &entry->u.uncompressed.generation_num, &free) != 3) {
             dmprintf(ctx->memory, "Invalid xref entry, incorrect format.\n");
             pdfi_unread(ctx, s, (byte *)Buffer, 20);
             code = read_xref_entry_slow(ctx, s, &off, &gen, &free);
             if (code < 0)
                 return code;
             code = write_offset((byte *)Buffer, off, gen, free);
             if (code < 0)
                 return code;
         }
 
         entry->compressed = false;
         entry->object_num = i + start;
         if (free == 'f')
             entry->free = true;
         if(free == 'n')
             entry->free = false;
     }
 
     return 0;
 }
